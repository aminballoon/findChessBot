
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08011c60  08011c60  00021c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013b6c  08013b6c  00023b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08013b74  08013b74  00023b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08013b7c  08013b7c  00023b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003f0  24000000  08013b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001094  240003f0  08013f74  000303f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001484  08013f74  00031484  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003aea3  00000000  00000000  0003041e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005778  00000000  00000000  0006b2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001680  00000000  00000000  00070a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014d8  00000000  00000000  000720c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e208  00000000  00000000  00073598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022412  00000000  00000000  000b17a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d8b1  00000000  00000000  000d3bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00241463  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f30  00000000  00000000  002414b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003f0 	.word	0x240003f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011c48 	.word	0x08011c48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003f4 	.word	0x240003f4
 80002dc:	08011c48 	.word	0x08011c48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a32      	ldr	r2, [pc, #200]	; (800079c <_ZN10RobotJointC1Ev+0xd4>)
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	edd3 7a00 	vldr	s15, [r3]
 80006dc:	2002      	movs	r0, #2
 80006de:	eeb0 0a67 	vmov.f32	s0, s15
 80006e2:	f000 fecd 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80006e6:	eeb0 7b40 	vmov.f64	d7, d0
 80006ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	edc3 7a01 	vstr	s15, [r3, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	2003      	movs	r0, #3
 80006fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000700:	f000 febe 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000704:	eeb0 7b40 	vmov.f64	d7, d0
 8000708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	edc3 7a02 	vstr	s15, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	2004      	movs	r0, #4
 800071a:	eeb0 0a67 	vmov.f32	s0, s15
 800071e:	f000 feaf 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000722:	eeb0 7b40 	vmov.f64	d7, d0
 8000726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	edc3 7a03 	vstr	s15, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800074a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800075e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f04f 0200 	mov.w	r2, #0
 800077c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <_ZN10RobotJointC1Ev+0xd8>)
 8000784:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <_ZN10RobotJointC1Ev+0xdc>)
 800078c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	3b03126f 	.word	0x3b03126f
 80007a0:	3dcccccd 	.word	0x3dcccccd
 80007a4:	3a83126f 	.word	0x3a83126f

080007a8 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

}
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4618      	mov	r0, r3
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b090      	sub	sp, #64	; 0x40
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6278      	str	r0, [r7, #36]	; 0x24
 80007c8:	ed87 0a08 	vstr	s0, [r7, #32]
 80007cc:	edc7 0a07 	vstr	s1, [r7, #28]
 80007d0:	ed87 1a06 	vstr	s2, [r7, #24]
 80007d4:	edc7 1a05 	vstr	s3, [r7, #20]
 80007d8:	ed87 2a04 	vstr	s4, [r7, #16]
 80007dc:	edc7 2a03 	vstr	s5, [r7, #12]
 80007e0:	ed87 3a02 	vstr	s6, [r7, #8]
 80007e4:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)*1000.0);
 80007e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80007ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80007f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007f8:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80009f8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 80007fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000800:	eeb0 0b47 	vmov.f64	d0, d7
 8000804:	f00d feec 	bl	800e5e0 <sin>
 8000808:	eeb0 7b40 	vmov.f64	d7, d0
 800080c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000810:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)*1000.0);
 8000814:	ed97 7a08 	vldr	s14, [r7, #32]
 8000818:	edd7 7a06 	vldr	s15, [r7, #24]
 800081c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000824:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80009f8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000828:	ee27 7b06 	vmul.f64	d7, d7, d6
 800082c:	eeb0 0b47 	vmov.f64	d0, d7
 8000830:	f00d fe8e 	bl	800e550 <cos>
 8000834:	eeb0 7b40 	vmov.f64	d7, d0
 8000838:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3*1000.0);
 8000840:	edd7 7a06 	vldr	s15, [r7, #24]
 8000844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000848:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80009f8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 800084c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000850:	eeb0 0b47 	vmov.f64	d0, d7
 8000854:	f00d fec4 	bl	800e5e0 <sin>
 8000858:	eeb0 7b40 	vmov.f64	d7, d0
 800085c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000860:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1*1000.0);
 8000864:	edd7 7a08 	vldr	s15, [r7, #32]
 8000868:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800086c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80009f8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb0 0b47 	vmov.f64	d0, d7
 8000878:	f00d feb2 	bl	800e5e0 <sin>
 800087c:	eeb0 7b40 	vmov.f64	d7, d0
 8000880:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000884:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1*1000.0);
 8000888:	edd7 7a08 	vldr	s15, [r7, #32]
 800088c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000890:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80009f8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000894:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000898:	eeb0 0b47 	vmov.f64	d0, d7
 800089c:	f00d fe58 	bl	800e550 <cos>
 80008a0:	eeb0 7b40 	vmov.f64	d7, d0
 80008a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 80008ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80008b0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000a00 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 80008b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12))* 1000.0;
 80008bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80008c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80008c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c8:	edd7 6a03 	vldr	s13, [r7, #12]
 80008cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80008d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008d4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80008d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80008dc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000a04 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 80008e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000a08 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 80008ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 80008f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80008fa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000a08 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 80008fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000908:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800090c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000a00 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000910:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000914:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000918:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000a0c <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 800091c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000924:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000928:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000a10 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 800092c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000934:	edd7 7a04 	vldr	s15, [r7, #16]
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093c:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000944:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000a04 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000950:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000954:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000a00 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000958:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800095c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000960:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000a0c <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000964:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000968:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800096c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000970:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000a10 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000974:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000978:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800097c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000980:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000984:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000988:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000a04 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 800098c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000990:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000994:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000998:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000a08 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 800099c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 80009a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80009aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80009ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009b2:	edd7 6a03 	vldr	s13, [r7, #12]
 80009b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80009ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80009c6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000a00 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 80009ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80009ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80009d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009d6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80009da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80009de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000a08 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 80009e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 80009f0:	bf00      	nop
 80009f2:	3740      	adds	r7, #64	; 0x40
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	00000000 	.word	0x00000000
 80009fc:	408f4000 	.word	0x408f4000
 8000a00:	439d8000 	.word	0x439d8000
 8000a04:	43bfa000 	.word	0x43bfa000
 8000a08:	447a0000 	.word	0x447a0000
 8000a0c:	41540000 	.word	0x41540000
 8000a10:	43b90000 	.word	0x43b90000

08000a14 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000a14:	b480      	push	{r7}
 8000a16:	b091      	sub	sp, #68	; 0x44
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	61f8      	str	r0, [r7, #28]
 8000a1c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a20:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a24:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a28:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a2c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a30:	edc7 2a01 	vstr	s5, [r7, #4]
 8000a34:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000a48:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000a5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000a6e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a82:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000a86:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000a8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a96:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000a9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000aae:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ab6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000aba:	ed97 7a00 	vldr	s14, [r7]
 8000abe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000aca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ace:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ada:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ade:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000aea:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000af2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b02:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000b06:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b0a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000b2a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b32:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000b36:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000b3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b42:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b46:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000b52:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000b56:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000b5a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b5e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b62:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b6a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000b6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b76:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000b7a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000b8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b94:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000b98:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000b9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ba0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ba8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bb0:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000bb4:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000bb8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bbc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bc0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000bc4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bc8:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000bcc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000bd0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000bd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000be6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bee:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000bf2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000bf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bfe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000c0e:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000c12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c16:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000c1a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000c1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c26:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c32:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000c36:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000c3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000c50:	bf00      	nop
 8000c52:	3744      	adds	r7, #68	; 0x44
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	ed2d 8b08 	vpush	{d8-d11}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c7a:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c82:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000c8a:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000c92:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000c9a:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000ca2:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000caa:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	ed93 7a00 	vldr	s14, [r3]
 8000cb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000cc6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000cca:	edd7 7a00 	vldr	s15, [r7]
 8000cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	edd3 6a00 	vldr	s13, [r3]
 8000cd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	ed93 7a00 	vldr	s14, [r3]
 8000cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000d02:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d06:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edd3 7a00 	vldr	s15, [r3]
 8000d10:	2004      	movs	r0, #4
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	f000 fbb3 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d1a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d1e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000d22:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d2a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	ed93 7a00 	vldr	s14, [r3]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	edd3 5a00 	vldr	s11, [r3]
 8000d3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d3e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d46:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d52:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000d56:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000d5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	edd3 6a00 	vldr	s13, [r3]
 8000d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d78:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d80:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d90:	f000 fb76 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d94:	eeb0 7b40 	vmov.f64	d7, d0
 8000d98:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000d9c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000da0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000da4:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	edd3 5a00 	vldr	s11, [r3]
 8000db4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000db8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000dbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dc0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dcc:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000dd0:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000dd4:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000dd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000de2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dee:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	edd3 7a00 	vldr	s15, [r3]
 8000df8:	2003      	movs	r0, #3
 8000dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfe:	f000 fb3f 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e02:	eeb0 7b40 	vmov.f64	d7, d0
 8000e06:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000e0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000e0e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	ed93 7a00 	vldr	s14, [r3]
 8000e18:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e30:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000e34:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e38:	edd7 7a00 	vldr	s15, [r7]
 8000e3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	edd3 5a00 	vldr	s11, [r3]
 8000e46:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e4a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e56:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edd3 6a00 	vldr	s13, [r3]
 8000e6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e78:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e80:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	2004      	movs	r0, #4
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	f000 faf6 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e94:	eeb0 7b40 	vmov.f64	d7, d0
 8000e98:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000e9c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ea0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea4:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	ed93 7a00 	vldr	s14, [r3]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	edd3 5a00 	vldr	s11, [r3]
 8000eb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ecc:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ed0:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000ed4:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000ed8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	ed93 7a00 	vldr	s14, [r3]
 8000ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f00:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	f000 fab6 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f14:	eeb0 7b40 	vmov.f64	d7, d0
 8000f18:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000f1c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f24:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	ed93 7a00 	vldr	s14, [r3]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	edd3 5a00 	vldr	s11, [r3]
 8000f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f38:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f40:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f50:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 6a00 	vldr	s13, [r3]
 8000f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f76:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	2004      	movs	r0, #4
 8000f82:	eeb0 0a67 	vmov.f32	s0, s15
 8000f86:	f000 fa7b 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8000f92:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	ed93 7a00 	vldr	s14, [r3]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edd3 5a00 	vldr	s11, [r3]
 8000faa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000fb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc2:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fc6:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8000fca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000fce:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fd2:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	2004      	movs	r0, #4
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	f000 fa3c 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001008:	eeb0 7b40 	vmov.f64	d7, d0
 800100c:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001010:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001014:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001018:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edd3 5a00 	vldr	s11, [r3]
 8001028:	edd7 7a04 	vldr	s15, [r7, #16]
 800102c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001030:	edd7 7a06 	vldr	s15, [r7, #24]
 8001034:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001040:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001044:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001048:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	edd7 7a05 	vldr	s15, [r7, #20]
 800105c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001060:	edd7 7a07 	vldr	s15, [r7, #28]
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	2004      	movs	r0, #4
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	f000 f9fe 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001084:	eeb0 7b40 	vmov.f64	d7, d0
 8001088:	ee29 6b07 	vmul.f64	d6, d9, d7
 800108c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001090:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001094:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edd3 5a00 	vldr	s11, [r3]
 80010a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80010b0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010bc:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	edd3 6a00 	vldr	s13, [r3]
 80010d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010de:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	2004      	movs	r0, #4
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	f000 f9c3 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010fa:	eeb0 7b40 	vmov.f64	d7, d0
 80010fe:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001102:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	ed93 7a00 	vldr	s14, [r3]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	edd3 5a00 	vldr	s11, [r3]
 800111a:	edd7 7a04 	vldr	s15, [r7, #16]
 800111e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001122:	edd7 7a06 	vldr	s15, [r7, #24]
 8001126:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001132:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001136:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800113a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800113e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001142:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	2003      	movs	r0, #3
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	f000 f991 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800115e:	eeb0 7b40 	vmov.f64	d7, d0
 8001162:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001166:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800116a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a00 	vldr	s14, [r3]
 8001174:	edd7 7a04 	vldr	s15, [r7, #16]
 8001178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001180:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001184:	edd7 7a06 	vldr	s15, [r7, #24]
 8001188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001190:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001194:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011bc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	2003      	movs	r0, #3
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	f000 f958 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011d0:	eeb0 7b40 	vmov.f64	d7, d0
 80011d4:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011e0:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80011e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	2003      	movs	r0, #3
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	f000 f942 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001200:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001204:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001208:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	edd7 7a04 	vldr	s15, [r7, #16]
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800121e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800122a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	edd7 7a05 	vldr	s15, [r7, #20]
 8001238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001248:	edd7 7a03 	vldr	s15, [r7, #12]
 800124c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	2004      	movs	r0, #4
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	f000 f910 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001260:	eeb0 7b40 	vmov.f64	d7, d0
 8001264:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001268:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800126c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001270:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 5a00 	vldr	s11, [r3]
 8001280:	edd7 7a04 	vldr	s15, [r7, #16]
 8001284:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001288:	edd7 7a06 	vldr	s15, [r7, #24]
 800128c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001298:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800129c:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80012a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	edd3 6a00 	vldr	s13, [r3]
 80012b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012be:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80012c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	2004      	movs	r0, #4
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f000 f8d3 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012da:	eeb0 7b40 	vmov.f64	d7, d0
 80012de:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80012e2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012ea:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 5a00 	vldr	s11, [r3]
 80012fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80012fe:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001302:	edd7 7a06 	vldr	s15, [r7, #24]
 8001306:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001312:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001316:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800131a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800131e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001328:	edd7 7a04 	vldr	s15, [r7, #16]
 800132c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001330:	edd7 7a03 	vldr	s15, [r7, #12]
 8001334:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	2002      	movs	r0, #2
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	f000 f89c 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001348:	eeb0 7b40 	vmov.f64	d7, d0
 800134c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001350:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001354:	edd7 7a03 	vldr	s15, [r7, #12]
 8001358:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	2003      	movs	r0, #3
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	f000 f88a 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800136c:	eeb0 7b40 	vmov.f64	d7, d0
 8001370:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001374:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001378:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	edd7 7a04 	vldr	s15, [r7, #16]
 8001386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800138e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001392:	edd7 7a06 	vldr	s15, [r7, #24]
 8001396:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800139a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800139e:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	2003      	movs	r0, #3
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	f000 f865 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013b6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ba:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80013be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80013c2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	ed93 7a00 	vldr	s14, [r3]
 80013cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013e8:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80013f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	edd3 6a00 	vldr	s13, [r3]
 80013fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800140e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001412:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	2004      	movs	r0, #4
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	f000 f82d 	bl	8001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001426:	eeb0 7b40 	vmov.f64	d7, d0
 800142a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800142e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001432:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001436:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	edd3 5a00 	vldr	s11, [r3]
 8001446:	edd7 7a04 	vldr	s15, [r7, #16]
 800144a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800144e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001452:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001462:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001466:	ee38 7b47 	vsub.f64	d7, d8, d7
 800146a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	ecbd 8b08 	vpop	{d8-d11}
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	ed87 0a01 	vstr	s0, [r7, #4]
 800148a:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	ee06 3a90 	vmov	s13, r3
 800149a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800149e:	eeb0 1b46 	vmov.f64	d1, d6
 80014a2:	eeb0 0b47 	vmov.f64	d0, d7
 80014a6:	f00c fd8f 	bl	800dfc8 <pow>
 80014aa:	eeb0 7b40 	vmov.f64	d7, d0
    }
 80014ae:	eeb0 0b47 	vmov.f64	d0, d7
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0a01 	vstr	s0, [r7, #4]
 80014c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c6:	fefb 7a67 	vrintm.f32	s15, s15
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	ed87 0a01 	vstr	s0, [r7, #4]
 80014e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e6:	fef8 7a67 	vrinta.f32	s15, s15
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	22b4      	movs	r2, #180	; 0xb4
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	761a      	strb	r2, [r3, #24]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	22ef      	movs	r2, #239	; 0xef
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
}
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <_ZN10ServoMotor17ServoRotateDegreeEl>:
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
}
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af02      	add	r7, sp, #8
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d13f      	bne.n	8001602 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691c      	ldr	r4, [r3, #16]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	3301      	adds	r3, #1
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800159c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001824 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f7ff ff96 	bl	80014d8 <_ZSt5roundf>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80015b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	3301      	adds	r3, #1
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ca:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001828 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80015ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	f7ff ff6f 	bl	80014b8 <_ZSt5floorf>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80015de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e2:	ee17 3a90 	vmov	r3, s15
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	9600      	str	r6, [sp, #0]
 80015ea:	462b      	mov	r3, r5
 80015ec:	4622      	mov	r2, r4
 80015ee:	6839      	ldr	r1, [r7, #0]
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f9ad 	bl	8001950 <_ZN10ServoMotor10GripperMapElllll>
 80015f6:	4602      	mov	r2, r0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8001600:	e176      	b.n	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b04      	cmp	r3, #4
 8001608:	d13f      	bne.n	800168a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691c      	ldr	r4, [r3, #16]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	3301      	adds	r3, #1
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001624:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001824 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f7ff ff52 	bl	80014d8 <_ZSt5roundf>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	3301      	adds	r3, #1
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001652:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001828 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	f7ff ff2b 	bl	80014b8 <_ZSt5floorf>
 8001662:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	9600      	str	r6, [sp, #0]
 8001672:	462b      	mov	r3, r5
 8001674:	4622      	mov	r2, r4
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f969 	bl	8001950 <_ZN10ServoMotor10GripperMapElllll>
 800167e:	4602      	mov	r2, r0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001688:	e132      	b.n	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b08      	cmp	r3, #8
 8001690:	d13f      	bne.n	8001712 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691c      	ldr	r4, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	3301      	adds	r3, #1
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ac:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001824 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f7ff ff0e 	bl	80014d8 <_ZSt5roundf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80016c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	3301      	adds	r3, #1
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016da:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001828 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80016de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e2:	eeb0 0a67 	vmov.f32	s0, s15
 80016e6:	f7ff fee7 	bl	80014b8 <_ZSt5floorf>
 80016ea:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80016ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f2:	ee17 3a90 	vmov	r3, s15
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	9600      	str	r6, [sp, #0]
 80016fa:	462b      	mov	r3, r5
 80016fc:	4622      	mov	r2, r4
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f925 	bl	8001950 <_ZN10ServoMotor10GripperMapElllll>
 8001706:	4602      	mov	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001710:	e0ee      	b.n	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d13f      	bne.n	800179a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691c      	ldr	r4, [r3, #16]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	3301      	adds	r3, #1
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001734:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001824 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	f7ff feca 	bl	80014d8 <_ZSt5roundf>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	3301      	adds	r3, #1
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001762:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001828 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	f7ff fea3 	bl	80014b8 <_ZSt5floorf>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177a:	ee17 3a90 	vmov	r3, s15
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	9600      	str	r6, [sp, #0]
 8001782:	462b      	mov	r3, r5
 8001784:	4622      	mov	r2, r4
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8e1 	bl	8001950 <_ZN10ServoMotor10GripperMapElllll>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001798:	e0aa      	b.n	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d144      	bne.n	800182c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691c      	ldr	r4, [r3, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	3301      	adds	r3, #1
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001824 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80017c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	f7ff fe86 	bl	80014d8 <_ZSt5roundf>
 80017cc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80017d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	3301      	adds	r3, #1
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001828 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	f7ff fe5f 	bl	80014b8 <_ZSt5floorf>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80017fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9600      	str	r6, [sp, #0]
 800180a:	462b      	mov	r3, r5
 800180c:	4622      	mov	r2, r4
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f89d 	bl	8001950 <_ZN10ServoMotor10GripperMapElllll>
 8001816:	4602      	mov	r2, r0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001820:	e066      	b.n	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001822:	bf00      	nop
 8001824:	3d4ccccd 	.word	0x3d4ccccd
 8001828:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b14      	cmp	r3, #20
 8001832:	d13f      	bne.n	80018b4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691c      	ldr	r4, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	3301      	adds	r3, #1
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001824 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	f7ff fe3d 	bl	80014d8 <_ZSt5roundf>
 800185e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001866:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	3301      	adds	r3, #1
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001828 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f7ff fe16 	bl	80014b8 <_ZSt5floorf>
 800188c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001894:	ee17 3a90 	vmov	r3, s15
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	9600      	str	r6, [sp, #0]
 800189c:	462b      	mov	r3, r5
 800189e:	4622      	mov	r2, r4
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f854 	bl	8001950 <_ZN10ServoMotor10GripperMapElllll>
 80018a8:	4602      	mov	r2, r0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80018b2:	e01d      	b.n	80018f0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018f8 <_ZN10ServoMotor12GripperCloseEv>:
}
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
	this->sdegclose = _sdegclose;
	this->isSetDegreeGripperClose = true;
}
void ServoMotor::GripperClose() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e5b      	ldrb	r3, [r3, #25]
 8001904:	f083 0301 	eor.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4619      	mov	r1, r3
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fe2b 	bl	8001570 <_ZN10ServoMotor17ServoRotateDegreeEl>
 800191a:	e000      	b.n	800191e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800191c:	bf00      	nop
}
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e1b      	ldrb	r3, [r3, #24]
 8001930:	f083 0301 	eor.w	r3, r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4619      	mov	r1, r3
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fe15 	bl	8001570 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001946:	e000      	b.n	800194a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001948:	bf00      	nop
}
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	69f9      	ldr	r1, [r7, #28]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	1a8a      	subs	r2, r1, r2
 800196a:	fb02 f203 	mul.w	r2, r2, r3
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1acb      	subs	r3, r1, r3
 8001974:	fb92 f2f3 	sdiv	r2, r2, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	4413      	add	r3, r2
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_CRC_Init+0x54>)
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <MX_CRC_Init+0x58>)
 8001990:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_CRC_Init+0x54>)
 8001994:	2201      	movs	r2, #1
 8001996:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_CRC_Init+0x54>)
 800199a:	2201      	movs	r2, #1
 800199c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_CRC_Init+0x54>)
 80019a0:	f248 0205 	movw	r2, #32773	; 0x8005
 80019a4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <MX_CRC_Init+0x54>)
 80019a8:	2208      	movs	r2, #8
 80019aa:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_CRC_Init+0x54>)
 80019ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_CRC_Init+0x54>)
 80019b6:	2220      	movs	r2, #32
 80019b8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_CRC_Init+0x54>)
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_CRC_Init+0x54>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_CRC_Init+0x54>)
 80019c8:	f003 f9f4 	bl	8004db4 <HAL_CRC_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80019d2:	f001 fb07 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	24000c2c 	.word	0x24000c2c
 80019e0:	58024c00 	.word	0x58024c00

080019e4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_CRC_MspInit+0x3c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10e      	bne.n	8001a14 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_CRC_MspInit+0x40>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_CRC_MspInit+0x40>)
 80019fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_CRC_MspInit+0x40>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	58024c00 	.word	0x58024c00
 8001a24:	58024400 	.word	0x58024400

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_DMA_Init+0x7c>)
 8001a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a34:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <MX_DMA_Init+0x7c>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_DMA_Init+0x7c>)
 8001a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	200b      	movs	r0, #11
 8001a52:	f003 f96e 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a56:	200b      	movs	r0, #11
 8001a58:	f003 f985 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	200c      	movs	r0, #12
 8001a62:	f003 f966 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a66:	200c      	movs	r0, #12
 8001a68:	f003 f97d 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	200d      	movs	r0, #13
 8001a72:	f003 f95e 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a76:	200d      	movs	r0, #13
 8001a78:	f003 f975 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	200e      	movs	r0, #14
 8001a82:	f003 f956 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a86:	200e      	movs	r0, #14
 8001a88:	f003 f96d 	bl	8004d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	200f      	movs	r0, #15
 8001a92:	f003 f94e 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a96:	200f      	movs	r0, #15
 8001a98:	f003 f965 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	58024400 	.word	0x58024400

08001aa8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abe:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	4a85      	ldr	r2, [pc, #532]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001ac6:	f043 0310 	orr.w	r3, r3, #16
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ace:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aec:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b00:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b70      	ldr	r3, [pc, #448]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1e:	4a6f      	ldr	r2, [pc, #444]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b69      	ldr	r3, [pc, #420]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3c:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b46:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5a:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b64:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b72:	4b5a      	ldr	r3, [pc, #360]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <MX_GPIO_Init+0x234>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001b90:	2200      	movs	r2, #0
 8001b92:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001b96:	4852      	ldr	r0, [pc, #328]	; (8001ce0 <MX_GPIO_Init+0x238>)
 8001b98:	f006 faf4 	bl	8008184 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001ba2:	4850      	ldr	r0, [pc, #320]	; (8001ce4 <MX_GPIO_Init+0x23c>)
 8001ba4:	f006 faee 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bae:	484e      	ldr	r0, [pc, #312]	; (8001ce8 <MX_GPIO_Init+0x240>)
 8001bb0:	f006 fae8 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bba:	484c      	ldr	r0, [pc, #304]	; (8001cec <MX_GPIO_Init+0x244>)
 8001bbc:	f006 fae2 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc6:	484a      	ldr	r0, [pc, #296]	; (8001cf0 <MX_GPIO_Init+0x248>)
 8001bc8:	f006 fadc 	bl	8008184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001bcc:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001bd0:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	483e      	ldr	r0, [pc, #248]	; (8001ce0 <MX_GPIO_Init+0x238>)
 8001be6:	f006 f91d 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 8001bea:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4838      	ldr	r0, [pc, #224]	; (8001ce4 <MX_GPIO_Init+0x23c>)
 8001c02:	f006 f90f 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001c06:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4831      	ldr	r0, [pc, #196]	; (8001ce4 <MX_GPIO_Init+0x23c>)
 8001c20:	f006 f900 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	482a      	ldr	r0, [pc, #168]	; (8001ce8 <MX_GPIO_Init+0x240>)
 8001c3e:	f006 f8f1 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4824      	ldr	r0, [pc, #144]	; (8001cec <MX_GPIO_Init+0x244>)
 8001c5c:	f006 f8e2 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	481d      	ldr	r0, [pc, #116]	; (8001cf0 <MX_GPIO_Init+0x248>)
 8001c7a:	f006 f8d3 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8001c7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <MX_GPIO_Init+0x24c>)
 8001c96:	f006 f8c5 	bl	8007e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	4619      	mov	r1, r3
 8001cae:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <MX_GPIO_Init+0x238>)
 8001cb0:	f006 f8b8 	bl	8007e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2017      	movs	r0, #23
 8001cba:	f003 f83a 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cbe:	2017      	movs	r0, #23
 8001cc0:	f003 f851 	bl	8004d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2028      	movs	r0, #40	; 0x28
 8001cca:	f003 f832 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cce:	2028      	movs	r0, #40	; 0x28
 8001cd0:	f003 f849 	bl	8004d66 <HAL_NVIC_EnableIRQ>

}
 8001cd4:	bf00      	nop
 8001cd6:	3730      	adds	r7, #48	; 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	58021000 	.word	0x58021000
 8001ce8:	58020c00 	.word	0x58020c00
 8001cec:	58020800 	.word	0x58020800
 8001cf0:	58020000 	.word	0x58020000
 8001cf4:	58021800 	.word	0x58021800

08001cf8 <_Z12Insert_queuei>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    if (bot == LIMIT - 1)
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <_Z12Insert_queuei+0x5c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_Z12Insert_queuei+0x1e>
    {
        return false;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e018      	b.n	8001d48 <_Z12Insert_queuei+0x50>
    }
    else
    {
        if (first == - 1)
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <_Z12Insert_queuei+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <_Z12Insert_queuei+0x38>
        {
            first = 0;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <_Z12Insert_queuei+0x60>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
        }
		bot++;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_Z12Insert_queuei+0x5c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <_Z12Insert_queuei+0x5c>)
 8001d38:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <_Z12Insert_queuei+0x5c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4907      	ldr	r1, [pc, #28]	; (8001d5c <_Z12Insert_queuei+0x64>)
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8001d46:	2301      	movs	r3, #1
    }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	24000004 	.word	0x24000004
 8001d58:	24000000 	.word	0x24000000
 8001d5c:	240009ec 	.word	0x240009ec

08001d60 <_Z10Call_queuev>:

int Call_queue()
    {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <_Z10Call_queuev+0x94>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6e:	d005      	beq.n	8001d7c <_Z10Call_queuev+0x1c>
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <_Z10Call_queuev+0x94>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <_Z10Call_queuev+0x98>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dd01      	ble.n	8001d80 <_Z10Call_queuev+0x20>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <_Z10Call_queuev+0x22>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d026      	beq.n	8001dd4 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 8001d86:	481d      	ldr	r0, [pc, #116]	; (8001dfc <_Z10Call_queuev+0x9c>)
 8001d88:	f00d ff5a 	bl	800fc40 <puts>
        for (int num = 0; num <= bot+1; num++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <_Z10Call_queuev+0x98>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	bfd4      	ite	le
 8001d9c:	2301      	movle	r3, #1
 8001d9e:	2300      	movgt	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 8001da6:	4a16      	ldr	r2, [pc, #88]	; (8001e00 <_Z10Call_queuev+0xa0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2100      	movs	r1, #0
 8001dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	e7eb      	b.n	8001d90 <_Z10Call_queuev+0x30>
        }
        first = -1;
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <_Z10Call_queuev+0x94>)
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	601a      	str	r2, [r3, #0]
        bot = -1;
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <_Z10Call_queuev+0x98>)
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc6:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <_Z10Call_queuev+0xa4>)
 8001dca:	f00d ff39 	bl	800fc40 <puts>
        output = 255;
 8001dce:	23ff      	movs	r3, #255	; 0xff
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	e00a      	b.n	8001dea <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_Z10Call_queuev+0x94>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <_Z10Call_queuev+0xa0>)
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	607b      	str	r3, [r7, #4]
        first++;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <_Z10Call_queuev+0x94>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a03      	ldr	r2, [pc, #12]	; (8001df4 <_Z10Call_queuev+0x94>)
 8001de8:	6013      	str	r3, [r2, #0]
    }
    return output;
 8001dea:	687b      	ldr	r3, [r7, #4]

}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	24000000 	.word	0x24000000
 8001df8:	24000004 	.word	0x24000004
 8001dfc:	08011c60 	.word	0x08011c60
 8001e00:	240009ec 	.word	0x240009ec
 8001e04:	08011c7c 	.word	0x08011c7c

08001e08 <_Z20Update_State_Machinev>:
int indexy;
void Update_State_Machine()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    switch (control_state)
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <_Z20Update_State_Machinev+0xcc>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3b29      	subs	r3, #41	; 0x29
 8001e14:	2b0b      	cmp	r3, #11
 8001e16:	d857      	bhi.n	8001ec8 <_Z20Update_State_Machinev+0xc0>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <_Z20Update_State_Machinev+0x18>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e51 	.word	0x08001e51
 8001e24:	08001e97 	.word	0x08001e97
 8001e28:	08001ec9 	.word	0x08001ec9
 8001e2c:	08001ec9 	.word	0x08001ec9
 8001e30:	08001ec9 	.word	0x08001ec9
 8001e34:	08001ec9 	.word	0x08001ec9
 8001e38:	08001ec9 	.word	0x08001ec9
 8001e3c:	08001ec9 	.word	0x08001ec9
 8001e40:	08001ec9 	.word	0x08001ec9
 8001e44:	08001ec9 	.word	0x08001ec9
 8001e48:	08001e9f 	.word	0x08001e9f
 8001e4c:	08001ebb 	.word	0x08001ebb
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8001e50:	f7ff ff86 	bl	8001d60 <_Z10Call_queuev>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a20      	ldr	r2, [pc, #128]	; (8001ed8 <_Z20Update_State_Machinev+0xd0>)
 8001e58:	6013      	str	r3, [r2, #0]
    	test_value_r = radias[indexy];
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <_Z20Update_State_Machinev+0xd0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <_Z20Update_State_Machinev+0xd4>)
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6c:	ee17 2a90 	vmov	r2, s15
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <_Z20Update_State_Machinev+0xd8>)
 8001e72:	601a      	str	r2, [r3, #0]
		test_value_theta = theta[indexy];
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <_Z20Update_State_Machinev+0xd0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <_Z20Update_State_Machinev+0xdc>)
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e86:	ee17 2a90 	vmov	r2, s15
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <_Z20Update_State_Machinev+0xe0>)
 8001e8c:	601a      	str	r2, [r3, #0]
		control_state = 42;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <_Z20Update_State_Machinev+0xcc>)
 8001e90:	222a      	movs	r2, #42	; 0x2a
 8001e92:	701a      	strb	r2, [r3, #0]
		break;
 8001e94:	e01c      	b.n	8001ed0 <_Z20Update_State_Machinev+0xc8>

	case 42:
		control_state = 0;
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <_Z20Update_State_Machinev+0xcc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
		break;
 8001e9c:	e018      	b.n	8001ed0 <_Z20Update_State_Machinev+0xc8>

	case 51:
		Traj_Flag = 1;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_Z20Update_State_Machinev+0xe4>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
		t = 0;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <_Z20Update_State_Machinev+0xe8>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <_Z20Update_State_Machinev+0xec>)
 8001eae:	f008 fe69 	bl	800ab84 <HAL_TIM_Base_Start_IT>
		control_state = 52;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <_Z20Update_State_Machinev+0xcc>)
 8001eb4:	2234      	movs	r2, #52	; 0x34
 8001eb6:	701a      	strb	r2, [r3, #0]
		break;
 8001eb8:	e00a      	b.n	8001ed0 <_Z20Update_State_Machinev+0xc8>
	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <_Z20Update_State_Machinev+0xec>)
 8001ebc:	f008 feda 	bl	800ac74 <HAL_TIM_Base_Stop_IT>
		control_state = 0;
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <_Z20Update_State_Machinev+0xcc>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
		break;
 8001ec6:	e003      	b.n	8001ed0 <_Z20Update_State_Machinev+0xc8>
	default:
		control_state = 0;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <_Z20Update_State_Machinev+0xcc>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
		break;
 8001ece:	bf00      	nop
    }
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	24000a1c 	.word	0x24000a1c
 8001ed8:	24000a3c 	.word	0x24000a3c
 8001edc:	24000108 	.word	0x24000108
 8001ee0:	24000a14 	.word	0x24000a14
 8001ee4:	24000008 	.word	0x24000008
 8001ee8:	24000a18 	.word	0x24000a18
 8001eec:	24000a24 	.word	0x24000a24
 8001ef0:	24000a28 	.word	0x24000a28
 8001ef4:	24000f38 	.word	0x24000f38

08001ef8 <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a8c      	ldr	r2, [pc, #560]	; (8002138 <HAL_UARTEx_RxEventCallback+0x240>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	f040 8184 	bne.w	8002216 <HAL_UARTEx_RxEventCallback+0x31e>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001f0e:	4a8b      	ldr	r2, [pc, #556]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001f10:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_UARTEx_RxEventCallback+0x248>)
 8001f12:	4614      	mov	r4, r2
 8001f14:	461d      	mov	r5, r3
 8001f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1a:	682b      	ldr	r3, [r5, #0]
 8001f1c:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001f1e:	2214      	movs	r2, #20
 8001f20:	2100      	movs	r1, #0
 8001f22:	4887      	ldr	r0, [pc, #540]	; (8002140 <HAL_UARTEx_RxEventCallback+0x248>)
 8001f24:	f00d f9d4 	bl	800f2d0 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	f240 8162 	bls.w	80021f4 <HAL_UARTEx_RxEventCallback+0x2fc>
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	2b14      	cmp	r3, #20
 8001f34:	f200 815e 	bhi.w	80021f4 <HAL_UARTEx_RxEventCallback+0x2fc>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	3b02      	subs	r3, #2
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f40:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001f42:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	497c      	ldr	r1, [pc, #496]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001f4c:	487e      	ldr	r0, [pc, #504]	; (8002148 <HAL_UARTEx_RxEventCallback+0x250>)
 8001f4e:	f002 ff95 	bl	8004e7c <HAL_CRC_Calculate>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <HAL_UARTEx_RxEventCallback+0x254>)
 8001f58:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001f5a:	4b7a      	ldr	r3, [pc, #488]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001f64:	5c9b      	ldrb	r3, [r3, r2]
 8001f66:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	4972      	ldr	r1, [pc, #456]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001f7e:	4b74      	ldr	r3, [pc, #464]	; (8002150 <HAL_UARTEx_RxEventCallback+0x258>)
 8001f80:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_UARTEx_RxEventCallback+0x254>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b71      	ldr	r3, [pc, #452]	; (8002150 <HAL_UARTEx_RxEventCallback+0x258>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	bf0c      	ite	eq
 8001f92:	2301      	moveq	r3, #1
 8001f94:	2300      	movne	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 814d 	beq.w	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	486c      	ldr	r0, [pc, #432]	; (8002154 <HAL_UARTEx_RxEventCallback+0x25c>)
 8001fa4:	f006 f8ee 	bl	8008184 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fae:	486a      	ldr	r0, [pc, #424]	; (8002158 <HAL_UARTEx_RxEventCallback+0x260>)
 8001fb0:	f006 f8e8 	bl	8008184 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8001fb4:	4b61      	ldr	r3, [pc, #388]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b61      	cmp	r3, #97	; 0x61
 8001fba:	d106      	bne.n	8001fca <HAL_UARTEx_RxEventCallback+0xd2>
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d101      	bne.n	8001fca <HAL_UARTEx_RxEventCallback+0xd2>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_UARTEx_RxEventCallback+0xd4>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d014      	beq.n	8001ffa <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001fd2:	785b      	ldrb	r3, [r3, #1]
 8001fd4:	b25a      	sxtb	r2, r3
 8001fd6:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_UARTEx_RxEventCallback+0x264>)
 8001fd8:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	b25a      	sxtb	r2, r3
 8001fe0:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_UARTEx_RxEventCallback+0x268>)
 8001fe2:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001fe4:	4b55      	ldr	r3, [pc, #340]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_UARTEx_RxEventCallback+0x26c>)
 8001fec:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	b25a      	sxtb	r2, r3
 8001ff4:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_UARTEx_RxEventCallback+0x270>)
 8001ff6:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8001ff8:	e11e      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b71      	cmp	r3, #113	; 0x71
 8002000:	d106      	bne.n	8002010 <HAL_UARTEx_RxEventCallback+0x118>
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b05      	cmp	r3, #5
 800200a:	d101      	bne.n	8002010 <HAL_UARTEx_RxEventCallback+0x118>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_UARTEx_RxEventCallback+0x11a>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d014      	beq.n	8002040 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 8002016:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	b25a      	sxtb	r2, r3
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_UARTEx_RxEventCallback+0x274>)
 800201e:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8002020:	4b46      	ldr	r3, [pc, #280]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8002022:	789b      	ldrb	r3, [r3, #2]
 8002024:	b25a      	sxtb	r2, r3
 8002026:	4b52      	ldr	r3, [pc, #328]	; (8002170 <HAL_UARTEx_RxEventCallback+0x278>)
 8002028:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 800202c:	78db      	ldrb	r3, [r3, #3]
 800202e:	b25a      	sxtb	r2, r3
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_UARTEx_RxEventCallback+0x27c>)
 8002032:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8002034:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	b25a      	sxtb	r2, r3
 800203a:	4b4f      	ldr	r3, [pc, #316]	; (8002178 <HAL_UARTEx_RxEventCallback+0x280>)
 800203c:	701a      	strb	r2, [r3, #0]
			}
 800203e:	e0fb      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 8002040:	4b3e      	ldr	r3, [pc, #248]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b85      	cmp	r3, #133	; 0x85
 8002046:	d106      	bne.n	8002056 <HAL_UARTEx_RxEventCallback+0x15e>
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d101      	bne.n	8002056 <HAL_UARTEx_RxEventCallback+0x15e>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_UARTEx_RxEventCallback+0x160>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d014      	beq.n	8002086 <HAL_UARTEx_RxEventCallback+0x18e>
					trajstate = Old_Rx_Buffer[1];
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	461a      	mov	r2, r3
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_UARTEx_RxEventCallback+0x284>)
 8002064:	601a      	str	r2, [r3, #0]
					if (trajstate != 0)
 8002066:	4b45      	ldr	r3, [pc, #276]	; (800217c <HAL_UARTEx_RxEventCallback+0x284>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80df 	beq.w	8002238 <HAL_UARTEx_RxEventCallback+0x340>
						control_state = 51;
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_UARTEx_RxEventCallback+0x288>)
 800207c:	2233      	movs	r2, #51	; 0x33
 800207e:	701a      	strb	r2, [r3, #0]
						Update_State_Machine();
 8002080:	f7ff fec2 	bl	8001e08 <_Z20Update_State_Machinev>
			}
 8002084:	e0d8      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 2) //
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b86      	cmp	r3, #134	; 0x86
 800208c:	d106      	bne.n	800209c <HAL_UARTEx_RxEventCallback+0x1a4>
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d101      	bne.n	800209c <HAL_UARTEx_RxEventCallback+0x1a4>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_UARTEx_RxEventCallback+0x1a6>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x1b8>
					int value_input = Old_Rx_Buffer[1];
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input);
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff fe25 	bl	8001cf8 <_Z12Insert_queuei>
			}
 80020ae:	e0c3      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b87      	cmp	r3, #135	; 0x87
 80020b6:	d106      	bne.n	80020c6 <HAL_UARTEx_RxEventCallback+0x1ce>
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d101      	bne.n	80020c6 <HAL_UARTEx_RxEventCallback+0x1ce>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_UARTEx_RxEventCallback+0x1d0>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_UARTEx_RxEventCallback+0x1e0>
					control_state = 41;
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_UARTEx_RxEventCallback+0x288>)
 80020ce:	2229      	movs	r2, #41	; 0x29
 80020d0:	701a      	strb	r2, [r3, #0]
					Update_State_Machine();
 80020d2:	f7ff fe99 	bl	8001e08 <_Z20Update_State_Machinev>
			}
 80020d6:	e0af      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b81      	cmp	r3, #129	; 0x81
 80020de:	d106      	bne.n	80020ee <HAL_UARTEx_RxEventCallback+0x1f6>
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d101      	bne.n	80020ee <HAL_UARTEx_RxEventCallback+0x1f6>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_UARTEx_RxEventCallback+0x1f8>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_UARTEx_RxEventCallback+0x228>
					gripperstate = Old_Rx_Buffer[1];
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_UARTEx_RxEventCallback+0x28c>)
 80020fc:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_UARTEx_RxEventCallback+0x28c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_UARTEx_RxEventCallback+0x220>
						gripper.GripperOpen();
 8002110:	481d      	ldr	r0, [pc, #116]	; (8002188 <HAL_UARTEx_RxEventCallback+0x290>)
 8002112:	f7ff fc07 	bl	8001924 <_ZN10ServoMotor11GripperOpenEv>
			}
 8002116:	e08f      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
						gripper.GripperClose();
 8002118:	481b      	ldr	r0, [pc, #108]	; (8002188 <HAL_UARTEx_RxEventCallback+0x290>)
 800211a:	f7ff fbed 	bl	80018f8 <_ZN10ServoMotor12GripperCloseEv>
			}
 800211e:	e08b      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_UARTEx_RxEventCallback+0x244>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b91      	cmp	r3, #145	; 0x91
 8002126:	d131      	bne.n	800218c <HAL_UARTEx_RxEventCallback+0x294>
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_UARTEx_RxEventCallback+0x24c>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b08      	cmp	r3, #8
 8002130:	d12c      	bne.n	800218c <HAL_UARTEx_RxEventCallback+0x294>
 8002132:	2301      	movs	r3, #1
 8002134:	e02b      	b.n	800218e <HAL_UARTEx_RxEventCallback+0x296>
 8002136:	bf00      	nop
 8002138:	240011e8 	.word	0x240011e8
 800213c:	240009c0 	.word	0x240009c0
 8002140:	240009d4 	.word	0x240009d4
 8002144:	240009e8 	.word	0x240009e8
 8002148:	24000c2c 	.word	0x24000c2c
 800214c:	240009b4 	.word	0x240009b4
 8002150:	240009b6 	.word	0x240009b6
 8002154:	58021000 	.word	0x58021000
 8002158:	58020400 	.word	0x58020400
 800215c:	2400099c 	.word	0x2400099c
 8002160:	2400099d 	.word	0x2400099d
 8002164:	2400099e 	.word	0x2400099e
 8002168:	2400099f 	.word	0x2400099f
 800216c:	240009a0 	.word	0x240009a0
 8002170:	240009a1 	.word	0x240009a1
 8002174:	240009a2 	.word	0x240009a2
 8002178:	240009a3 	.word	0x240009a3
 800217c:	240009bc 	.word	0x240009bc
 8002180:	24000a1c 	.word	0x24000a1c
 8002184:	240009b8 	.word	0x240009b8
 8002188:	24000980 	.word	0x24000980
 800218c:	2300      	movs	r3, #0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d052      	beq.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 800219a:	7892      	ldrb	r2, [r2, #2]
 800219c:	4313      	orrs	r3, r2
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_UARTEx_RxEventCallback+0x41c>)
 80021a8:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 80021ac:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 80021ae:	78db      	ldrb	r3, [r3, #3]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	4a57      	ldr	r2, [pc, #348]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 80021b4:	7912      	ldrb	r2, [r2, #4]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c0:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_UARTEx_RxEventCallback+0x420>)
 80021c2:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 80021c6:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 80021c8:	795b      	ldrb	r3, [r3, #5]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 80021ce:	7992      	ldrb	r2, [r2, #6]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_UARTEx_RxEventCallback+0x424>)
 80021dc:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_UARTEx_RxEventCallback+0x418>)
 80021e2:	79db      	ldrb	r3, [r3, #7]
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_UARTEx_RxEventCallback+0x428>)
 80021ee:	edc3 7a00 	vstr	s15, [r3]
			}
 80021f2:	e021      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x340>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2102      	movs	r1, #2
 80021f8:	484a      	ldr	r0, [pc, #296]	; (8002324 <HAL_UARTEx_RxEventCallback+0x42c>)
 80021fa:	f005 ffc3 	bl	8008184 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002204:	4848      	ldr	r0, [pc, #288]	; (8002328 <HAL_UARTEx_RxEventCallback+0x430>)
 8002206:	f005 ffbd 	bl	8008184 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 800220a:	220c      	movs	r2, #12
 800220c:	4947      	ldr	r1, [pc, #284]	; (800232c <HAL_UARTEx_RxEventCallback+0x434>)
 800220e:	4848      	ldr	r0, [pc, #288]	; (8002330 <HAL_UARTEx_RxEventCallback+0x438>)
 8002210:	f009 fe9c 	bl	800bf4c <HAL_UART_Transmit_DMA>
 8002214:	e011      	b.n	800223a <HAL_UARTEx_RxEventCallback+0x342>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	2102      	movs	r1, #2
 800221a:	4842      	ldr	r0, [pc, #264]	; (8002324 <HAL_UARTEx_RxEventCallback+0x42c>)
 800221c:	f005 ffb2 	bl	8008184 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002226:	4840      	ldr	r0, [pc, #256]	; (8002328 <HAL_UARTEx_RxEventCallback+0x430>)
 8002228:	f005 ffac 	bl	8008184 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 800222c:	2215      	movs	r2, #21
 800222e:	4941      	ldr	r1, [pc, #260]	; (8002334 <HAL_UARTEx_RxEventCallback+0x43c>)
 8002230:	483f      	ldr	r0, [pc, #252]	; (8002330 <HAL_UARTEx_RxEventCallback+0x438>)
 8002232:	f009 fe8b 	bl	800bf4c <HAL_UART_Transmit_DMA>
 8002236:	e000      	b.n	800223a <HAL_UARTEx_RxEventCallback+0x342>
			}
 8002238:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800223a:	2214      	movs	r2, #20
 800223c:	493e      	ldr	r1, [pc, #248]	; (8002338 <HAL_UARTEx_RxEventCallback+0x440>)
 800223e:	483c      	ldr	r0, [pc, #240]	; (8002330 <HAL_UARTEx_RxEventCallback+0x438>)
 8002240:	f00b fde1 	bl	800de06 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002244:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a3d      	ldr	r2, [pc, #244]	; (8002340 <HAL_UARTEx_RxEventCallback+0x448>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d04a      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <HAL_UARTEx_RxEventCallback+0x44c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d045      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <HAL_UARTEx_RxEventCallback+0x450>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d040      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a39      	ldr	r2, [pc, #228]	; (800234c <HAL_UARTEx_RxEventCallback+0x454>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d03b      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a37      	ldr	r2, [pc, #220]	; (8002350 <HAL_UARTEx_RxEventCallback+0x458>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d036      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_UARTEx_RxEventCallback+0x45c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d031      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a34      	ldr	r2, [pc, #208]	; (8002358 <HAL_UARTEx_RxEventCallback+0x460>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d02c      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a33      	ldr	r2, [pc, #204]	; (800235c <HAL_UARTEx_RxEventCallback+0x464>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d027      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_UARTEx_RxEventCallback+0x468>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d022      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_UARTEx_RxEventCallback+0x46c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d01d      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_UARTEx_RxEventCallback+0x470>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d018      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_UARTEx_RxEventCallback+0x474>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_UARTEx_RxEventCallback+0x478>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_UARTEx_RxEventCallback+0x47c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_UARTEx_RxEventCallback+0x480>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_UARTEx_RxEventCallback+0x484>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <HAL_UARTEx_RxEventCallback+0x3fe>
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0208 	bic.w	r2, r2, #8
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	e008      	b.n	8002308 <HAL_UARTEx_RxEventCallback+0x410>
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_UARTEx_RxEventCallback+0x444>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0204 	bic.w	r2, r2, #4
 8002304:	601a      	str	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bdb0      	pop	{r4, r5, r7, pc}
 8002310:	240009c0 	.word	0x240009c0
 8002314:	240009a4 	.word	0x240009a4
 8002318:	240009a8 	.word	0x240009a8
 800231c:	240009ac 	.word	0x240009ac
 8002320:	240009b0 	.word	0x240009b0
 8002324:	58021000 	.word	0x58021000
 8002328:	58020400 	.word	0x58020400
 800232c:	08011c8c 	.word	0x08011c8c
 8002330:	240011e8 	.word	0x240011e8
 8002334:	08011c9c 	.word	0x08011c9c
 8002338:	240009d4 	.word	0x240009d4
 800233c:	24001170 	.word	0x24001170
 8002340:	40020010 	.word	0x40020010
 8002344:	40020028 	.word	0x40020028
 8002348:	40020040 	.word	0x40020040
 800234c:	40020058 	.word	0x40020058
 8002350:	40020070 	.word	0x40020070
 8002354:	40020088 	.word	0x40020088
 8002358:	400200a0 	.word	0x400200a0
 800235c:	400200b8 	.word	0x400200b8
 8002360:	40020410 	.word	0x40020410
 8002364:	40020428 	.word	0x40020428
 8002368:	40020440 	.word	0x40020440
 800236c:	40020458 	.word	0x40020458
 8002370:	40020470 	.word	0x40020470
 8002374:	40020488 	.word	0x40020488
 8002378:	400204a0 	.word	0x400204a0
 800237c:	400204b8 	.word	0x400204b8

08002380 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a7d      	ldr	r2, [pc, #500]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800238c:	4293      	cmp	r3, r2
 800238e:	f040 8119 	bne.w	80025c4 <HAL_TIM_PeriodElapsedCallback+0x244>
	//		stepperJ2.StepperSetFrequency(dq2);
	//		stepperJ3.StepperSetFrequency(dq3);
	//		stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);
 8002392:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002394:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 8002398:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800239a:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
 800239e:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023ac:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8002578 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80023b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023b4:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023c6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002578 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80023ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023ce:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023e0:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8002578 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80023e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023ec:	eddf 3a6a 	vldr	s7, [pc, #424]	; 8002598 <HAL_TIM_PeriodElapsedCallback+0x218>
 80023f0:	eeb0 3a67 	vmov.f32	s6, s15
 80023f4:	eddf 1a68 	vldr	s3, [pc, #416]	; 8002598 <HAL_TIM_PeriodElapsedCallback+0x218>
 80023f8:	eeb0 1a44 	vmov.f32	s2, s8
 80023fc:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002598 <HAL_TIM_PeriodElapsedCallback+0x218>
 8002400:	eeb0 0a64 	vmov.f32	s0, s9
 8002404:	4865      	ldr	r0, [pc, #404]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002406:	f7fe f9db 	bl	80007c0 <_ZN10RobotJoint9UpdateIVKEffffffff>

			int i;
					for (i = 1 ; i<num ; i++)
 800240a:	2301      	movs	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	4b64      	ldr	r3, [pc, #400]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	da2f      	bge.n	8002478 <HAL_TIM_PeriodElapsedCallback+0xf8>
					{
						box_q1[i-1] = box_q1[i];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3b01      	subs	r3, #1
 800241c:	4961      	ldr	r1, [pc, #388]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	440a      	add	r2, r1
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	495f      	ldr	r1, [pc, #380]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	601a      	str	r2, [r3, #0]
						box_q2[i-1] = box_q2[i];
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b01      	subs	r3, #1
 8002432:	495d      	ldr	r1, [pc, #372]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	440a      	add	r2, r1
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	495a      	ldr	r1, [pc, #360]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	601a      	str	r2, [r3, #0]
						box_q3[i-1] = box_q3[i];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3b01      	subs	r3, #1
 8002448:	4958      	ldr	r1, [pc, #352]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	440a      	add	r2, r1
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	4956      	ldr	r1, [pc, #344]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	601a      	str	r2, [r3, #0]
						box_q4[i-1] = box_q4[i];
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b01      	subs	r3, #1
 800245e:	4954      	ldr	r1, [pc, #336]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	440a      	add	r2, r1
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	4951      	ldr	r1, [pc, #324]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	601a      	str	r2, [r3, #0]
					for (i = 1 ; i<num ; i++)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3301      	adds	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e7ca      	b.n	800240e <HAL_TIM_PeriodElapsedCallback+0x8e>
					}
					 box_q1[num-1] = fcb_X.w_q1;
 8002478:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	4a47      	ldr	r2, [pc, #284]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002480:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002482:	4948      	ldr	r1, [pc, #288]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	601a      	str	r2, [r3, #0]
					 box_q2[num-1] = dz;
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b25a      	sxtb	r2, r3
 8002490:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	ee07 2a90 	vmov	s15, r2
 800249a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249e:	4a42      	ldr	r2, [pc, #264]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	edc3 7a00 	vstr	s15, [r3]
					 box_q3[num-1] = fcb_X.w_q3;
 80024a8:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	4a3b      	ldr	r2, [pc, #236]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80024b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024b2:	493e      	ldr	r1, [pc, #248]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	601a      	str	r2, [r3, #0]
					 box_q4[num-1] = fcb_X.w_q4;
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3b01      	subs	r3, #1
 80024c0:	4a36      	ldr	r2, [pc, #216]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80024c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c4:	493a      	ldr	r1, [pc, #232]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	601a      	str	r2, [r3, #0]

					u_q1 = 0.0;
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
					u_q2 = 0.0;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
					u_q3 = 0.0;
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
					u_q4 = 0.0;
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

					for(i = 0; i < num; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	da64      	bge.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x244>
					{
						u_q1 += box_q1[i];
 80024fa:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002512:	edc3 7a00 	vstr	s15, [r3]
						u_q2 += box_q2[i];
 8002516:	4a24      	ldr	r2, [pc, #144]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800252e:	edc3 7a00 	vstr	s15, [r3]
						u_q3 += box_q3[i];
 8002532:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800254a:	edc3 7a00 	vstr	s15, [r3]
						u_q4 += box_q4[i];
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002566:	edc3 7a00 	vstr	s15, [r3]
					for(i = 0; i < num; i++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e7be      	b.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	00000000 	.word	0x00000000
 800257c:	408f4000 	.word	0x408f4000
 8002580:	24000d70 	.word	0x24000d70
 8002584:	24000428 	.word	0x24000428
 8002588:	240005f0 	.word	0x240005f0
 800258c:	240009a0 	.word	0x240009a0
 8002590:	240009a1 	.word	0x240009a1
 8002594:	240009a2 	.word	0x240009a2
 8002598:	00000000 	.word	0x00000000
 800259c:	2400089c 	.word	0x2400089c
 80025a0:	2400020c 	.word	0x2400020c
 80025a4:	24000a40 	.word	0x24000a40
 80025a8:	24000ab8 	.word	0x24000ab8
 80025ac:	24000b30 	.word	0x24000b30
 80025b0:	24000ba8 	.word	0x24000ba8
 80025b4:	24000a2c 	.word	0x24000a2c
 80025b8:	24000a30 	.word	0x24000a30
 80025bc:	24000a34 	.word	0x24000a34
 80025c0:	24000a38 	.word	0x24000a38
	if (htim == &htim16)
	{

	}

	if (htim == &htim14) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4ad4      	ldr	r2, [pc, #848]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f040 8395 	bne.w	8002cf8 <HAL_TIM_PeriodElapsedCallback+0x978>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 80025ce:	4bd3      	ldr	r3, [pc, #844]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	4bd1      	ldr	r3, [pc, #836]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	edc7 7a06 	vstr	s15, [r7, #24]
		float t3 = t * t * t;
 80025e2:	4bce      	ldr	r3, [pc, #824]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4bcc      	ldr	r3, [pc, #816]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f2:	4bca      	ldr	r3, [pc, #808]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fc:	edc7 7a05 	vstr	s15, [r7, #20]
		float t4 = t * t * t * t;
 8002600:	4bc6      	ldr	r3, [pc, #792]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002602:	ed93 7a00 	vldr	s14, [r3]
 8002606:	4bc5      	ldr	r3, [pc, #788]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002610:	4bc2      	ldr	r3, [pc, #776]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261a:	4bc0      	ldr	r3, [pc, #768]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002624:	edc7 7a04 	vstr	s15, [r7, #16]
		float t5 = t * t * t * t * t;
 8002628:	4bbc      	ldr	r3, [pc, #752]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	4bbb      	ldr	r3, [pc, #748]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002638:	4bb8      	ldr	r3, [pc, #736]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002642:	4bb6      	ldr	r3, [pc, #728]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264c:	4bb3      	ldr	r3, [pc, #716]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002656:	edc7 7a03 	vstr	s15, [r7, #12]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 800265a:	4bb1      	ldr	r3, [pc, #708]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800265c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002660:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002664:	4bae      	ldr	r3, [pc, #696]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002666:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800266a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800266e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002672:	4baa      	ldr	r3, [pc, #680]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002680:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002684:	4ba6      	ldr	r3, [pc, #664]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002686:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800268a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800268e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002692:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002696:	edd7 7a06 	vldr	s15, [r7, #24]
 800269a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800269e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80026a6:	4b9e      	ldr	r3, [pc, #632]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026a8:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80026ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80026b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80026bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80026c8:	4b95      	ldr	r3, [pc, #596]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026ca:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80026ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026d2:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80026d6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026da:	edd7 7a04 	vldr	s15, [r7, #16]
 80026de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026ee:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026f0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 80026f4:	4b8a      	ldr	r3, [pc, #552]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026f6:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026fc:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8002700:	4b86      	ldr	r3, [pc, #536]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270e:	4b84      	ldr	r3, [pc, #528]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002710:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8002714:	edd7 7a06 	vldr	s15, [r7, #24]
 8002718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002720:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002722:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002726:	edd7 7a05 	vldr	s15, [r7, #20]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002734:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002738:	edd7 7a04 	vldr	s15, [r7, #16]
 800273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002744:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002746:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 800274a:	edd7 7a03 	vldr	s15, [r7, #12]
 800274e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002756:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002758:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 800275c:	4b71      	ldr	r3, [pc, #452]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800275e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002762:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002768:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800276c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002770:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002774:	4b69      	ldr	r3, [pc, #420]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800277e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002782:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002788:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800278c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002790:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002794:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002798:	edd7 7a06 	vldr	s15, [r7, #24]
 800279c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80027a8:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027aa:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80027ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80027ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80027be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80027ca:	4b56      	ldr	r3, [pc, #344]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027cc:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80027d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027d4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80027d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80027dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80027e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027f2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 80027f6:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027f8:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80027fc:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027fe:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8002802:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002810:	4b44      	ldr	r3, [pc, #272]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002812:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8002816:	edd7 7a06 	vldr	s15, [r7, #24]
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002824:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002828:	edd7 7a05 	vldr	s15, [r7, #20]
 800282c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002836:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800283a:	edd7 7a04 	vldr	s15, [r7, #16]
 800283e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002848:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 800284c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800285a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002860:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002864:	eeb0 0a67 	vmov.f32	s0, s15
 8002868:	482d      	ldr	r0, [pc, #180]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800286a:	f7fe f9f7 	bl	8000c5c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002874:	4a2a      	ldr	r2, [pc, #168]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002876:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800287c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002882:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002888:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800288c:	eeb0 0a67 	vmov.f32	s0, s15
 8002890:	4824      	ldr	r0, [pc, #144]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002892:	f7fe f9e3 	bl	8000c5c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002898:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800289c:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800289e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028a8:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028aa:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
//		fcb_joint1.Kd_p = 0.0004;
//		fcb_joint3.Kp_p = 0.015; // 0.015
//		fcb_joint3.Ki_p = 0.009; // 0.009
//		fcb_joint3.Kd_p = 0.0015; // 0.0015

		fcb_joint1.Kp_p = 0.0;
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 0.0;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint1.Kp_v = 0.0;
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 0.0;
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002910:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002914:	e008      	b.n	8002928 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 8002916:	bf00      	nop
 8002918:	24000f38 	.word	0x24000f38
 800291c:	24000a28 	.word	0x24000a28
 8002920:	24000428 	.word	0x24000428
 8002924:	240005f0 	.word	0x240005f0
 8002928:	4bb3      	ldr	r3, [pc, #716]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800292a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800292e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002932:	4bb1      	ldr	r3, [pc, #708]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002934:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8002938:	4bb0      	ldr	r3, [pc, #704]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800293a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800293e:	4baf      	ldr	r3, [pc, #700]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002940:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002948:	4bac      	ldr	r3, [pc, #688]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800294a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 800294e:	4baa      	ldr	r3, [pc, #680]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002950:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002954:	4ba8      	ldr	r3, [pc, #672]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002956:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800295a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295e:	4ba6      	ldr	r3, [pc, #664]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002960:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8002964:	4ba5      	ldr	r3, [pc, #660]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002966:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800296a:	4ba4      	ldr	r3, [pc, #656]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800296c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	4ba1      	ldr	r3, [pc, #644]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002976:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 800297a:	4b9f      	ldr	r3, [pc, #636]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800297c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002980:	4b9d      	ldr	r3, [pc, #628]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002982:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	4b9b      	ldr	r3, [pc, #620]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800298c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8002990:	4b9a      	ldr	r3, [pc, #616]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002992:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002996:	4b99      	ldr	r3, [pc, #612]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002998:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	4b96      	ldr	r3, [pc, #600]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80029a2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 80029a6:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029a8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80029ac:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029ae:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	4b90      	ldr	r3, [pc, #576]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029b8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 80029bc:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80029be:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80029c2:	4b8e      	ldr	r3, [pc, #568]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80029c4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80029ce:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80029d2:	4b89      	ldr	r3, [pc, #548]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029d4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 80029d8:	4b87      	ldr	r3, [pc, #540]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029da:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80029de:	4b86      	ldr	r3, [pc, #536]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029e0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80029e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80029e8:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 80029ec:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029ee:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80029f2:	4b81      	ldr	r3, [pc, #516]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029f4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80029f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 80029fc:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8002a00:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a02:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002a06:	4b7c      	ldr	r3, [pc, #496]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a08:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8002a0c:	4b7a      	ldr	r3, [pc, #488]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a0e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002a12:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 8002a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a20:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8002a24:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a26:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8002a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8002a32:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a34:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002a38:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a3a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8002a42:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 8002a46:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a48:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002a4c:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a4e:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002a52:	4b69      	ldr	r3, [pc, #420]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a54:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002a58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8002a60:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8002a64:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a66:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a6c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8002a70:	4b62      	ldr	r3, [pc, #392]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a72:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002a76:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a78:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8002a80:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8002a84:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a86:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a8c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8002a94:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8002a98:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a9a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002a9e:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002aa0:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8002aa4:	4b55      	ldr	r3, [pc, #340]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002aa6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002aaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8002ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ab8:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8002abc:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002abe:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8002ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002acc:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ad2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8002ada:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ae0:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002ae4:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ae6:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002aea:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002aec:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002af0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8002af8:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002afe:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Goal_Velocity);
//		stepperJ4.StepperOpenLoopSpeed(-4.0 * fcb_joint1.Goal_Velocity);

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b06:	4a3c      	ldr	r2, [pc, #240]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b08:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8002b0a:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0e:	4a3b      	ldr	r2, [pc, #236]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b10:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	4a37      	ldr	r2, [pc, #220]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8002b34:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	4a30      	ldr	r2, [pc, #192]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b44:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

//		if (Traj_Flag == 1){
//			t = t + sample_time_500;
//		}
		t = t + sample_time_500;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002b58:	ed93 7a00 	vldr	s14, [r3]
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]
		//-  (sample_time_500*40.0)
		if (t >= fcb_joint3.T )
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b6e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	bf94      	ite	ls
 8002b82:	2301      	movls	r3, #1
 8002b84:	2300      	movhi	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80b5 	beq.w	8002cf8 <HAL_TIM_PeriodElapsedCallback+0x978>
				{

//			stepperJ1.StepperOpenLoopSpeedM(0);
//			stepperJ3.StepperOpenLoopSpeedM(0);
			Traj_Flag = 0;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
			if (direction_traj == 0)
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03a      	beq.n	8002c1c <HAL_TIM_PeriodElapsedCallback+0x89c>
			{

//				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 0.0, 0.0, 0.0, 0.0, 0.0);
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 0.0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, -785.0, 0.0, 0.0, 0.0, 0.0);
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002ba8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bac:	ed9f 3a18 	vldr	s6, [pc, #96]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bb0:	eddf 2a17 	vldr	s5, [pc, #92]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bb4:	ed9f 2a16 	vldr	s4, [pc, #88]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bb8:	eddf 1a15 	vldr	s3, [pc, #84]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bbc:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002c14 <HAL_TIM_PeriodElapsedCallback+0x894>
 8002bc0:	eef0 0a67 	vmov.f32	s1, s15
 8002bc4:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002bca:	f7fd ff23 	bl	8000a14 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 1570.0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 2400.0, 0.0, 0.0, 0.0, 0.0);
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002bd0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bd4:	ed9f 3a0e 	vldr	s6, [pc, #56]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bd8:	eddf 2a0d 	vldr	s5, [pc, #52]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bdc:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002be0:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8002c10 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002be4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002c18 <HAL_TIM_PeriodElapsedCallback+0x898>
 8002be8:	eef0 0a67 	vmov.f32	s1, s15
 8002bec:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002bf2:	f7fd ff0f 	bl	8000a14 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 8002bf6:	e039      	b.n	8002c6c <HAL_TIM_PeriodElapsedCallback+0x8ec>
 8002bf8:	24000428 	.word	0x24000428
 8002bfc:	240005f0 	.word	0x240005f0
 8002c00:	24000a28 	.word	0x24000a28
 8002c04:	24000208 	.word	0x24000208
 8002c08:	24000a24 	.word	0x24000a24
 8002c0c:	24000a20 	.word	0x24000a20
 8002c10:	00000000 	.word	0x00000000
 8002c14:	c4444000 	.word	0xc4444000
 8002c18:	45160000 	.word	0x45160000

			else
			{
//				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 0, 0.0, 0.0, 0.0, 0.0);
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 785.0, 0.0, 0.0, 0.0, 0.0);
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c22:	ed9f 3a38 	vldr	s6, [pc, #224]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c26:	eddf 2a37 	vldr	s5, [pc, #220]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c2a:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c2e:	eddf 1a35 	vldr	s3, [pc, #212]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c32:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8002d08 <HAL_TIM_PeriodElapsedCallback+0x988>
 8002c36:	eef0 0a67 	vmov.f32	s1, s15
 8002c3a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002c3e:	4830      	ldr	r0, [pc, #192]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c40:	f7fd fee8 	bl	8000a14 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, -1570.0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, -2400.0, 0.0, 0.0, 0.0, 0.0);
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c46:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c4a:	ed9f 3a2e 	vldr	s6, [pc, #184]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c4e:	eddf 2a2d 	vldr	s5, [pc, #180]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c52:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c56:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8002d04 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c5a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002d10 <HAL_TIM_PeriodElapsedCallback+0x990>
 8002c5e:	eef0 0a67 	vmov.f32	s1, s15
 8002c62:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002c66:	4829      	ldr	r0, [pc, #164]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c68:	f7fd fed4 	bl	8000a14 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>


//				fcb_X.UpdateQuinticCoff(5.0, Robot_X, Robot_X + 0.2, 0, 0, 0, 0);
			}

			direction_traj ^= 1;
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002c76:	6013      	str	r3, [r2, #0]


			t = (int)0;
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
//			HAL_TIM_Base_Stop_IT(&htim14);
			fcb_joint1.Sum_Error_p = 0;
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			Update_State_Machine();
 8002cf4:	f7ff f888 	bl	8001e08 <_Z20Update_State_Machinev>

				}


	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	24000428 	.word	0x24000428
 8002d04:	00000000 	.word	0x00000000
 8002d08:	44444000 	.word	0x44444000
 8002d0c:	240005f0 	.word	0x240005f0
 8002d10:	c5160000 	.word	0xc5160000
 8002d14:	24000a20 	.word	0x24000a20
 8002d18:	24000a28 	.word	0x24000a28

08002d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d20:	f001 fe8e 	bl	8004a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d24:	f000 f8c8 	bl	8002eb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d28:	f7fe febe 	bl	8001aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d2c:	f7fe fe7c 	bl	8001a28 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002d30:	f001 fbda 	bl	80044e8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002d34:	f000 fd98 	bl	8003868 <MX_TIM2_Init>
  MX_UART4_Init();
 8002d38:	f001 fb34 	bl	80043a4 <MX_UART4_Init>
  MX_TIM4_Init();
 8002d3c:	f000 fe84 	bl	8003a48 <MX_TIM4_Init>
  MX_SPI3_Init();
 8002d40:	f000 f9dc 	bl	80030fc <MX_SPI3_Init>
  MX_TIM1_Init();
 8002d44:	f000 fce2 	bl	800370c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002d48:	f000 fe06 	bl	8003958 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002d4c:	f000 fef4 	bl	8003b38 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002d50:	f001 f82e 	bl	8003db0 <MX_TIM15_Init>
  MX_CRC_Init();
 8002d54:	f7fe fe18 	bl	8001988 <MX_CRC_Init>
  MX_UART7_Init();
 8002d58:	f001 fb78 	bl	800444c <MX_UART7_Init>
  MX_TIM6_Init();
 8002d5c:	f000 ff3a 	bl	8003bd4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002d60:	f000 ff6e 	bl	8003c40 <MX_TIM7_Init>
  MX_TIM12_Init();
 8002d64:	f000 ffa2 	bl	8003cac <MX_TIM12_Init>
  MX_TIM13_Init();
 8002d68:	f000 ffda 	bl	8003d20 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002d6c:	f000 fffc 	bl	8003d68 <MX_TIM14_Init>
  MX_TIM16_Init();
 8002d70:	f001 f8c2 	bl	8003ef8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002d74:	2201      	movs	r2, #1
 8002d76:	2101      	movs	r1, #1
 8002d78:	483a      	ldr	r0, [pc, #232]	; (8002e64 <main+0x148>)
 8002d7a:	f005 fa03 	bl	8008184 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002d7e:	2201      	movs	r2, #1
 8002d80:	2102      	movs	r1, #2
 8002d82:	4839      	ldr	r0, [pc, #228]	; (8002e68 <main+0x14c>)
 8002d84:	f005 f9fe 	bl	8008184 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d8e:	4835      	ldr	r0, [pc, #212]	; (8002e64 <main+0x148>)
 8002d90:	f005 f9f8 	bl	8008184 <HAL_GPIO_WritePin>
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
//		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
//	encoderJ2.AMT21_Set_Zero();
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8002d94:	2214      	movs	r2, #20
 8002d96:	4935      	ldr	r1, [pc, #212]	; (8002e6c <main+0x150>)
 8002d98:	4835      	ldr	r0, [pc, #212]	; (8002e70 <main+0x154>)
 8002d9a:	f00b f834 	bl	800de06 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002d9e:	4b35      	ldr	r3, [pc, #212]	; (8002e74 <main+0x158>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <main+0x15c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <main+0x122>
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <main+0x158>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <main+0x160>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <main+0x122>
 8002db2:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <main+0x158>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a32      	ldr	r2, [pc, #200]	; (8002e80 <main+0x164>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <main+0x122>
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <main+0x158>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <main+0x168>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <main+0x122>
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <main+0x158>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <main+0x16c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <main+0x122>
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <main+0x158>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <main+0x170>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <main+0x122>
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <main+0x158>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <main+0x174>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <main+0x122>
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <main+0x158>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <main+0x178>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <main+0x122>
 8002dee:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <main+0x158>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a29      	ldr	r2, [pc, #164]	; (8002e98 <main+0x17c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <main+0x122>
 8002df8:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <main+0x158>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <main+0x180>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <main+0x122>
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <main+0x158>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <main+0x184>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <main+0x122>
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <main+0x158>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <main+0x188>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <main+0x122>
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <main+0x158>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <main+0x18c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <main+0x122>
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <main+0x158>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <main+0x190>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <main+0x122>
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <main+0x158>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <main+0x194>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <main+0x122>
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <main+0x158>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <main+0x198>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d108      	bne.n	8002e50 <main+0x134>
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <main+0x158>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <main+0x158>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	e007      	b.n	8002e60 <main+0x144>
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <main+0x158>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <main+0x158>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0204 	bic.w	r2, r2, #4
 8002e5e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002e60:	e7fe      	b.n	8002e60 <main+0x144>
 8002e62:	bf00      	nop
 8002e64:	58020400 	.word	0x58020400
 8002e68:	58021000 	.word	0x58021000
 8002e6c:	240009d4 	.word	0x240009d4
 8002e70:	240011e8 	.word	0x240011e8
 8002e74:	24001170 	.word	0x24001170
 8002e78:	40020010 	.word	0x40020010
 8002e7c:	40020028 	.word	0x40020028
 8002e80:	40020040 	.word	0x40020040
 8002e84:	40020058 	.word	0x40020058
 8002e88:	40020070 	.word	0x40020070
 8002e8c:	40020088 	.word	0x40020088
 8002e90:	400200a0 	.word	0x400200a0
 8002e94:	400200b8 	.word	0x400200b8
 8002e98:	40020410 	.word	0x40020410
 8002e9c:	40020428 	.word	0x40020428
 8002ea0:	40020440 	.word	0x40020440
 8002ea4:	40020458 	.word	0x40020458
 8002ea8:	40020470 	.word	0x40020470
 8002eac:	40020488 	.word	0x40020488
 8002eb0:	400204a0 	.word	0x400204a0
 8002eb4:	400204b8 	.word	0x400204b8

08002eb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b09c      	sub	sp, #112	; 0x70
 8002ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec2:	224c      	movs	r2, #76	; 0x4c
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f00c fa02 	bl	800f2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2220      	movs	r2, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00c f9fc 	bl	800f2d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f005 f987 	bl	80081ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <_Z18SystemClock_Configv+0x10c>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4a37      	ldr	r2, [pc, #220]	; (8002fc4 <_Z18SystemClock_Configv+0x10c>)
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eec:	6193      	str	r3, [r2, #24]
 8002eee:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <_Z18SystemClock_Configv+0x10c>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <_Z18SystemClock_Configv+0x110>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <_Z18SystemClock_Configv+0x110>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f04:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <_Z18SystemClock_Configv+0x110>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <_Z18SystemClock_Configv+0x10c>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d000      	beq.n	8002f2a <_Z18SystemClock_Configv+0x72>
 8002f28:	e7f2      	b.n	8002f10 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f36:	2302      	movs	r3, #2
 8002f38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002f42:	233c      	movs	r3, #60	; 0x3c
 8002f44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f46:	2302      	movs	r3, #2
 8002f48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002f52:	230c      	movs	r3, #12
 8002f54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 f97c 	bl	8008260 <HAL_RCC_OscConfig>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002f78:	f000 f834 	bl	8002fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f7c:	233f      	movs	r3, #63	; 0x3f
 8002f7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f80:	2303      	movs	r3, #3
 8002f82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f8c:	2340      	movs	r3, #64	; 0x40
 8002f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f90:	2340      	movs	r3, #64	; 0x40
 8002f92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f9a:	2340      	movs	r3, #64	; 0x40
 8002f9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 fd88 	bl	8008ab8 <HAL_RCC_ClockConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8002fb8:	f000 f814 	bl	8002fe4 <Error_Handler>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3770      	adds	r7, #112	; 0x70
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	58024800 	.word	0x58024800
 8002fc8:	58000400 	.word	0x58000400

08002fcc <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//
//}
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	80fb      	strh	r3, [r7, #6]

	}
	if(GPIO_Pin == LM_LED_Pin){	// Limit Switch LED on Cabinet

	}
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2101      	movs	r1, #1
 8002fec:	4808      	ldr	r0, [pc, #32]	; (8003010 <Error_Handler+0x2c>)
 8002fee:	f005 f8c9 	bl	8008184 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4807      	ldr	r0, [pc, #28]	; (8003014 <Error_Handler+0x30>)
 8002ff8:	f005 f8c4 	bl	8008184 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <Error_Handler+0x2c>)
 8003004:	f005 f8be 	bl	8008184 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 800300c:	e7fe      	b.n	800300c <Error_Handler+0x28>
 800300e:	bf00      	nop
 8003010:	58020400 	.word	0x58020400
 8003014:	58021000 	.word	0x58021000

08003018 <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d120      	bne.n	800306a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302e:	4293      	cmp	r3, r2
 8003030:	d11b      	bne.n	800306a <_Z41__static_initialization_and_destruction_0ii+0x52>
AMT21 encoderJ2(&huart4, 0xB4);
 8003032:	22b4      	movs	r2, #180	; 0xb4
 8003034:	491f      	ldr	r1, [pc, #124]	; (80030b4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003036:	4820      	ldr	r0, [pc, #128]	; (80030b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003038:	f7fd fb26 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
RobotJoint fcb_joint1;
 800303c:	481f      	ldr	r0, [pc, #124]	; (80030bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800303e:	f7fd fb43 	bl	80006c8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8003042:	481f      	ldr	r0, [pc, #124]	; (80030c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003044:	f7fd fb40 	bl	80006c8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8003048:	481e      	ldr	r0, [pc, #120]	; (80030c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800304a:	f7fd fb3d 	bl	80006c8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 800304e:	481e      	ldr	r0, [pc, #120]	; (80030c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003050:	f7fd fb3a 	bl	80006c8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8003054:	481d      	ldr	r0, [pc, #116]	; (80030cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003056:	f7fd fb37 	bl	80006c8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 800305a:	481d      	ldr	r0, [pc, #116]	; (80030d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800305c:	f7fd fb34 	bl	80006c8 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003060:	2208      	movs	r2, #8
 8003062:	491c      	ldr	r1, [pc, #112]	; (80030d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003064:	481c      	ldr	r0, [pc, #112]	; (80030d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003066:	f7fe fa47 	bl	80014f8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11c      	bne.n	80030aa <_Z41__static_initialization_and_destruction_0ii+0x92>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003076:	4293      	cmp	r3, r2
 8003078:	d117      	bne.n	80030aa <_Z41__static_initialization_and_destruction_0ii+0x92>
 800307a:	4817      	ldr	r0, [pc, #92]	; (80030d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800307c:	f7fe fa6c 	bl	8001558 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8003080:	4813      	ldr	r0, [pc, #76]	; (80030d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003082:	f7fd fb91 	bl	80007a8 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8003086:	4811      	ldr	r0, [pc, #68]	; (80030cc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003088:	f7fd fb8e 	bl	80007a8 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 800308c:	480e      	ldr	r0, [pc, #56]	; (80030c8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800308e:	f7fd fb8b 	bl	80007a8 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8003092:	480c      	ldr	r0, [pc, #48]	; (80030c4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003094:	f7fd fb88 	bl	80007a8 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800309a:	f7fd fb85 	bl	80007a8 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 800309e:	4807      	ldr	r0, [pc, #28]	; (80030bc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80030a0:	f7fd fb82 	bl	80007a8 <_ZN10RobotJointD1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80030a6:	f7fd fb03 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	24001368 	.word	0x24001368
 80030b8:	2400040c 	.word	0x2400040c
 80030bc:	24000428 	.word	0x24000428
 80030c0:	2400050c 	.word	0x2400050c
 80030c4:	240005f0 	.word	0x240005f0
 80030c8:	240006d4 	.word	0x240006d4
 80030cc:	240007b8 	.word	0x240007b8
 80030d0:	2400089c 	.word	0x2400089c
 80030d4:	24000cd8 	.word	0x24000cd8
 80030d8:	24000980 	.word	0x24000980

080030dc <_GLOBAL__sub_I_TIM_MS>:
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
 80030e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff ff97 	bl	8003018 <_Z41__static_initialization_and_destruction_0ii>
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_GLOBAL__sub_D_TIM_MS>:
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7ff ff8f 	bl	8003018 <_Z41__static_initialization_and_destruction_0ii>
 80030fa:	bd80      	pop	{r7, pc}

080030fc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003102:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <MX_SPI3_Init+0xa8>)
 8003104:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003108:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800310c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003114:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003116:	2203      	movs	r2, #3
 8003118:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003126:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003128:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800312c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003130:	2200      	movs	r2, #0
 8003132:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003136:	2200      	movs	r2, #0
 8003138:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003140:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003142:	2200      	movs	r2, #0
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003148:	2200      	movs	r2, #0
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800314e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003152:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003156:	2200      	movs	r2, #0
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800315c:	2200      	movs	r2, #0
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003162:	2200      	movs	r2, #0
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800316e:	2200      	movs	r2, #0
 8003170:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003172:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003174:	2200      	movs	r2, #0
 8003176:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800317a:	2200      	movs	r2, #0
 800317c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003180:	2200      	movs	r2, #0
 8003182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <MX_SPI3_Init+0xa4>)
 8003186:	2200      	movs	r2, #0
 8003188:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <MX_SPI3_Init+0xa4>)
 800318c:	f007 fb82 	bl	800a894 <HAL_SPI_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003196:	f7ff ff25 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	24000c50 	.word	0x24000c50
 80031a4:	40003c00 	.word	0x40003c00

080031a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b0b8      	sub	sp, #224	; 0xe0
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	22bc      	movs	r2, #188	; 0xbc
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00c f881 	bl	800f2d0 <memset>
  if(spiHandle->Instance==SPI3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a25      	ldr	r2, [pc, #148]	; (8003268 <HAL_SPI_MspInit+0xc0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d142      	bne.n	800325e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80031d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80031de:	2300      	movs	r3, #0
 80031e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 fff2 	bl	80091d0 <HAL_RCCEx_PeriphCLKConfig>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80031f2:	f7ff fef7 	bl	8002fe4 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_SPI_MspInit+0xc4>)
 80031f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_SPI_MspInit+0xc4>)
 80031fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003202:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003206:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_SPI_MspInit+0xc4>)
 8003208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800320c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003214:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_SPI_MspInit+0xc4>)
 8003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321a:	4a14      	ldr	r2, [pc, #80]	; (800326c <HAL_SPI_MspInit+0xc4>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_SPI_MspInit+0xc4>)
 8003226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003232:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003236:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800324c:	2306      	movs	r3, #6
 800324e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003256:	4619      	mov	r1, r3
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <HAL_SPI_MspInit+0xc8>)
 800325a:	f004 fde3 	bl	8007e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800325e:	bf00      	nop
 8003260:	37e0      	adds	r7, #224	; 0xe0
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40003c00 	.word	0x40003c00
 800326c:	58024400 	.word	0x58024400
 8003270:	58020800 	.word	0x58020800

08003274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_MspInit+0x30>)
 800327c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_MspInit+0x30>)
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_MspInit+0x30>)
 800328c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	58024400 	.word	0x58024400

080032a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <NMI_Handler+0x4>

080032ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler+0x4>

080032b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <MemManage_Handler+0x4>

080032ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032be:	e7fe      	b.n	80032be <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f4:	f001 fc16 	bl	8004b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80032f8:	f001 fd4f 	bl	8004d9a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}

08003300 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <DMA1_Stream0_IRQHandler+0x10>)
 8003306:	f003 fa7b 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	240012f0 	.word	0x240012f0

08003314 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <DMA1_Stream1_IRQHandler+0x10>)
 800331a:	f003 fa71 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24001170 	.word	0x24001170

08003328 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <DMA1_Stream2_IRQHandler+0x10>)
 800332e:	f003 fa67 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24001278 	.word	0x24001278

0800333c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA1_Stream3_IRQHandler+0x10>)
 8003342:	f003 fa5d 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	24001068 	.word	0x24001068

08003350 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <DMA1_Stream4_IRQHandler+0x10>)
 8003356:	f003 fa53 	bl	8006800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	240013f8 	.word	0x240013f8

08003364 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8003368:	2040      	movs	r0, #64	; 0x40
 800336a:	f004 ff24 	bl	80081b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 800336e:	2080      	movs	r0, #128	; 0x80
 8003370:	f004 ff21 	bl	80081b6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}

08003378 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <USART3_IRQHandler+0x10>)
 800337e:	f008 fe77 	bl	800c070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	240011e8 	.word	0x240011e8

0800338c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003390:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003394:	f004 ff0f 	bl	80081b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003398:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800339c:	f004 ff0b 	bl	80081b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 80033a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033a4:	f004 ff07 	bl	80081b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80033a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033ac:	f004 ff03 	bl	80081b6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80033ba:	f007 fceb 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	24000f84 	.word	0x24000f84

080033c8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80033cc:	4802      	ldr	r0, [pc, #8]	; (80033d8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80033ce:	f007 fce1 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	24000e08 	.word	0x24000e08

080033dc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80033e2:	f007 fcd7 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	24000f38 	.word	0x24000f38

080033f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <TIM5_IRQHandler+0x10>)
 80033f6:	f007 fccd 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	24000d70 	.word	0x24000d70

08003404 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <UART4_IRQHandler+0x10>)
 800340a:	f008 fe31 	bl	800c070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	24001368 	.word	0x24001368

08003418 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <TIM6_DAC_IRQHandler+0x10>)
 800341e:	f007 fcb9 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	24000e54 	.word	0x24000e54

0800342c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <TIM7_IRQHandler+0x10>)
 8003432:	f007 fcaf 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	2400101c 	.word	0x2400101c

08003440 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <UART7_IRQHandler+0x10>)
 8003446:	f008 fe13 	bl	800c070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	240010e0 	.word	0x240010e0

08003454 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <TIM16_IRQHandler+0x10>)
 800345a:	f007 fc9b 	bl	800ad94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	24000fd0 	.word	0x24000fd0

08003468 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
	return 1;
 800346c:	2301      	movs	r3, #1
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <_kill>:

int _kill(int pid, int sig)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003482:	f00b fefb 	bl	800f27c <__errno>
 8003486:	4603      	mov	r3, r0
 8003488:	2216      	movs	r2, #22
 800348a:	601a      	str	r2, [r3, #0]
	return -1;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_exit>:

void _exit (int status)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034a0:	f04f 31ff 	mov.w	r1, #4294967295
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ffe7 	bl	8003478 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034aa:	e7fe      	b.n	80034aa <_exit+0x12>

080034ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e00a      	b.n	80034d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034be:	f3af 8000 	nop.w
 80034c2:	4601      	mov	r1, r0
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	60ba      	str	r2, [r7, #8]
 80034ca:	b2ca      	uxtb	r2, r1
 80034cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dbf0      	blt.n	80034be <_read+0x12>
	}

return len;
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e009      	b.n	800350c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60ba      	str	r2, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3301      	adds	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	dbf1      	blt.n	80034f8 <_write+0x12>
	}
	return len;
 8003514:	687b      	ldr	r3, [r7, #4]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_close>:

int _close(int file)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
	return -1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003546:	605a      	str	r2, [r3, #4]
	return 0;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <_isatty>:

int _isatty(int file)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
	return 1;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
	return 0;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <_sbrk+0x5c>)
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <_sbrk+0x60>)
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <_sbrk+0x64>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <_sbrk+0x64>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <_sbrk+0x68>)
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <_sbrk+0x64>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d207      	bcs.n	80035c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b8:	f00b fe60 	bl	800f27c <__errno>
 80035bc:	4603      	mov	r3, r0
 80035be:	220c      	movs	r2, #12
 80035c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e009      	b.n	80035dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <_sbrk+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <_sbrk+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <_sbrk+0x64>)
 80035d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	24001a88 	.word	0x24001a88
 80035e8:	00000400 	.word	0x00000400
 80035ec:	24000c20 	.word	0x24000c20
 80035f0:	24001488 	.word	0x24001488

080035f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035f8:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <SystemInit+0xec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	4a38      	ldr	r2, [pc, #224]	; (80036e0 <SystemInit+0xec>)
 8003600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <SystemInit+0xf0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	2b06      	cmp	r3, #6
 8003612:	d807      	bhi.n	8003624 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003614:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <SystemInit+0xf0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 030f 	bic.w	r3, r3, #15
 800361c:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <SystemInit+0xf0>)
 800361e:	f043 0307 	orr.w	r3, r3, #7
 8003622:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <SystemInit+0xf4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2f      	ldr	r2, [pc, #188]	; (80036e8 <SystemInit+0xf4>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <SystemInit+0xf4>)
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <SystemInit+0xf4>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	492b      	ldr	r1, [pc, #172]	; (80036e8 <SystemInit+0xf4>)
 800363c:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <SystemInit+0xf8>)
 800363e:	4013      	ands	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <SystemInit+0xf0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <SystemInit+0xf0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 030f 	bic.w	r3, r3, #15
 8003656:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <SystemInit+0xf0>)
 8003658:	f043 0307 	orr.w	r3, r3, #7
 800365c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <SystemInit+0xf4>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <SystemInit+0xf4>)
 8003666:	2200      	movs	r2, #0
 8003668:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <SystemInit+0xf4>)
 800366c:	2200      	movs	r2, #0
 800366e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <SystemInit+0xf4>)
 8003672:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <SystemInit+0xfc>)
 8003674:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <SystemInit+0xf4>)
 8003678:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <SystemInit+0x100>)
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <SystemInit+0xf4>)
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <SystemInit+0x104>)
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <SystemInit+0xf4>)
 8003684:	2200      	movs	r2, #0
 8003686:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <SystemInit+0xf4>)
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <SystemInit+0x104>)
 800368c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <SystemInit+0xf4>)
 8003690:	2200      	movs	r2, #0
 8003692:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <SystemInit+0xf4>)
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <SystemInit+0x104>)
 8003698:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <SystemInit+0xf4>)
 800369c:	2200      	movs	r2, #0
 800369e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <SystemInit+0xf4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <SystemInit+0xf4>)
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <SystemInit+0xf4>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <SystemInit+0x108>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <SystemInit+0x10c>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036be:	d202      	bcs.n	80036c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <SystemInit+0x110>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <SystemInit+0x114>)
 80036c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80036cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <SystemInit+0xec>)
 80036d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00
 80036e4:	52002000 	.word	0x52002000
 80036e8:	58024400 	.word	0x58024400
 80036ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80036f0:	02020200 	.word	0x02020200
 80036f4:	01ff0000 	.word	0x01ff0000
 80036f8:	01010280 	.word	0x01010280
 80036fc:	5c001000 	.word	0x5c001000
 8003700:	ffff0000 	.word	0xffff0000
 8003704:	51008108 	.word	0x51008108
 8003708:	52004000 	.word	0x52004000

0800370c <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b09a      	sub	sp, #104	; 0x68
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003712:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800372c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	222c      	movs	r2, #44	; 0x2c
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f00b fdc2 	bl	800f2d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800374c:	4b44      	ldr	r3, [pc, #272]	; (8003860 <MX_TIM1_Init+0x154>)
 800374e:	4a45      	ldr	r2, [pc, #276]	; (8003864 <MX_TIM1_Init+0x158>)
 8003750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <MX_TIM1_Init+0x154>)
 8003754:	22c7      	movs	r2, #199	; 0xc7
 8003756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <MX_TIM1_Init+0x154>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800375e:	4b40      	ldr	r3, [pc, #256]	; (8003860 <MX_TIM1_Init+0x154>)
 8003760:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <MX_TIM1_Init+0x154>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <MX_TIM1_Init+0x154>)
 800376e:	2200      	movs	r2, #0
 8003770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <MX_TIM1_Init+0x154>)
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003778:	4839      	ldr	r0, [pc, #228]	; (8003860 <MX_TIM1_Init+0x154>)
 800377a:	f007 f9ac 	bl	800aad6 <HAL_TIM_Base_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003784:	f7ff fc2e 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800378e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003792:	4619      	mov	r1, r3
 8003794:	4832      	ldr	r0, [pc, #200]	; (8003860 <MX_TIM1_Init+0x154>)
 8003796:	f007 fd31 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80037a0:	f7ff fc20 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037a4:	482e      	ldr	r0, [pc, #184]	; (8003860 <MX_TIM1_Init+0x154>)
 80037a6:	f007 fa94 	bl	800acd2 <HAL_TIM_PWM_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80037b0:	f7ff fc18 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037c4:	4619      	mov	r1, r3
 80037c6:	4826      	ldr	r0, [pc, #152]	; (8003860 <MX_TIM1_Init+0x154>)
 80037c8:	f008 fa46 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80037d2:	f7ff fc07 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037d6:	2360      	movs	r3, #96	; 0x60
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80037da:	f240 1339 	movw	r3, #313	; 0x139
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037e0:	2300      	movs	r3, #0
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037e4:	2300      	movs	r3, #0
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037ec:	2300      	movs	r3, #0
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037f8:	2204      	movs	r2, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4818      	ldr	r0, [pc, #96]	; (8003860 <MX_TIM1_Init+0x154>)
 80037fe:	f007 fbe9 	bl	800afd4 <HAL_TIM_PWM_ConfigChannel>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003808:	f7ff fbec 	bl	8002fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003824:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800382e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4807      	ldr	r0, [pc, #28]	; (8003860 <MX_TIM1_Init+0x154>)
 8003842:	f008 fa97 	bl	800bd74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800384c:	f7ff fbca 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <MX_TIM1_Init+0x154>)
 8003852:	f000 fccb 	bl	80041ec <HAL_TIM_MspPostInit>

}
 8003856:	bf00      	nop
 8003858:	3768      	adds	r7, #104	; 0x68
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	24000ea0 	.word	0x24000ea0
 8003864:	40010000 	.word	0x40010000

08003868 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08e      	sub	sp, #56	; 0x38
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800386e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800387c:	f107 031c 	add.w	r3, r7, #28
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003888:	463b      	mov	r3, r7
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	611a      	str	r2, [r3, #16]
 8003896:	615a      	str	r2, [r3, #20]
 8003898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <MX_TIM2_Init+0xec>)
 800389c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80038a2:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <MX_TIM2_Init+0xec>)
 80038a4:	22c7      	movs	r2, #199	; 0xc7
 80038a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a8:	4b2a      	ldr	r3, [pc, #168]	; (8003954 <MX_TIM2_Init+0xec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80038ae:	4b29      	ldr	r3, [pc, #164]	; (8003954 <MX_TIM2_Init+0xec>)
 80038b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80038b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <MX_TIM2_Init+0xec>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <MX_TIM2_Init+0xec>)
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038c2:	4824      	ldr	r0, [pc, #144]	; (8003954 <MX_TIM2_Init+0xec>)
 80038c4:	f007 f907 	bl	800aad6 <HAL_TIM_Base_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80038ce:	f7ff fb89 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038dc:	4619      	mov	r1, r3
 80038de:	481d      	ldr	r0, [pc, #116]	; (8003954 <MX_TIM2_Init+0xec>)
 80038e0:	f007 fc8c 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80038ea:	f7ff fb7b 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038ee:	4819      	ldr	r0, [pc, #100]	; (8003954 <MX_TIM2_Init+0xec>)
 80038f0:	f007 f9ef 	bl	800acd2 <HAL_TIM_PWM_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80038fa:	f7ff fb73 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4619      	mov	r1, r3
 800390c:	4811      	ldr	r0, [pc, #68]	; (8003954 <MX_TIM2_Init+0xec>)
 800390e:	f008 f9a3 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003918:	f7ff fb64 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800391c:	2360      	movs	r3, #96	; 0x60
 800391e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8003920:	f240 1339 	movw	r3, #313	; 0x139
 8003924:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800392e:	463b      	mov	r3, r7
 8003930:	2208      	movs	r2, #8
 8003932:	4619      	mov	r1, r3
 8003934:	4807      	ldr	r0, [pc, #28]	; (8003954 <MX_TIM2_Init+0xec>)
 8003936:	f007 fb4d 	bl	800afd4 <HAL_TIM_PWM_ConfigChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003940:	f7ff fb50 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003944:	4803      	ldr	r0, [pc, #12]	; (8003954 <MX_TIM2_Init+0xec>)
 8003946:	f000 fc51 	bl	80041ec <HAL_TIM_MspPostInit>

}
 800394a:	bf00      	nop
 800394c:	3738      	adds	r7, #56	; 0x38
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	24000eec 	.word	0x24000eec

08003958 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003978:	463b      	mov	r3, r7
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800398a:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <MX_TIM3_Init+0xe8>)
 800398c:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <MX_TIM3_Init+0xec>)
 800398e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8003990:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <MX_TIM3_Init+0xe8>)
 8003992:	22c7      	movs	r2, #199	; 0xc7
 8003994:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <MX_TIM3_Init+0xe8>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <MX_TIM3_Init+0xe8>)
 800399e:	f640 125f 	movw	r2, #2399	; 0x95f
 80039a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a4:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <MX_TIM3_Init+0xe8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <MX_TIM3_Init+0xe8>)
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039b0:	4823      	ldr	r0, [pc, #140]	; (8003a40 <MX_TIM3_Init+0xe8>)
 80039b2:	f007 f890 	bl	800aad6 <HAL_TIM_Base_Init>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80039bc:	f7ff fb12 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ca:	4619      	mov	r1, r3
 80039cc:	481c      	ldr	r0, [pc, #112]	; (8003a40 <MX_TIM3_Init+0xe8>)
 80039ce:	f007 fc15 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80039d8:	f7ff fb04 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039dc:	4818      	ldr	r0, [pc, #96]	; (8003a40 <MX_TIM3_Init+0xe8>)
 80039de:	f007 f978 	bl	800acd2 <HAL_TIM_PWM_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80039e8:	f7ff fafc 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	4811      	ldr	r0, [pc, #68]	; (8003a40 <MX_TIM3_Init+0xe8>)
 80039fc:	f008 f92c 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003a06:	f7ff faed 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a0a:	2360      	movs	r3, #96	; 0x60
 8003a0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4807      	ldr	r0, [pc, #28]	; (8003a40 <MX_TIM3_Init+0xe8>)
 8003a22:	f007 fad7 	bl	800afd4 <HAL_TIM_PWM_ConfigChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003a2c:	f7ff fada 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a30:	4803      	ldr	r0, [pc, #12]	; (8003a40 <MX_TIM3_Init+0xe8>)
 8003a32:	f000 fbdb 	bl	80041ec <HAL_TIM_MspPostInit>

}
 8003a36:	bf00      	nop
 8003a38:	3738      	adds	r7, #56	; 0x38
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	24000dbc 	.word	0x24000dbc
 8003a44:	40000400 	.word	0x40000400

08003a48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	; 0x38
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a68:	463b      	mov	r3, r7
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	60da      	str	r2, [r3, #12]
 8003a74:	611a      	str	r2, [r3, #16]
 8003a76:	615a      	str	r2, [r3, #20]
 8003a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <MX_TIM4_Init+0xec>)
 8003a7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8003a80:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003a82:	22ef      	movs	r2, #239	; 0xef
 8003a84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003a8e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003a92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003aa0:	4823      	ldr	r0, [pc, #140]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003aa2:	f007 f818 	bl	800aad6 <HAL_TIM_Base_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003aac:	f7ff fa9a 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aba:	4619      	mov	r1, r3
 8003abc:	481c      	ldr	r0, [pc, #112]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003abe:	f007 fb9d 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003ac8:	f7ff fa8c 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003acc:	4818      	ldr	r0, [pc, #96]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003ace:	f007 f900 	bl	800acd2 <HAL_TIM_PWM_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ad8:	f7ff fa84 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4811      	ldr	r0, [pc, #68]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003aec:	f008 f8b4 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003af6:	f7ff fa75 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003afa:	2360      	movs	r3, #96	; 0x60
 8003afc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4807      	ldr	r0, [pc, #28]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003b12:	f007 fa5f 	bl	800afd4 <HAL_TIM_PWM_ConfigChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003b1c:	f7ff fa62 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b20:	4803      	ldr	r0, [pc, #12]	; (8003b30 <MX_TIM4_Init+0xe8>)
 8003b22:	f000 fb63 	bl	80041ec <HAL_TIM_MspPostInit>

}
 8003b26:	bf00      	nop
 8003b28:	3738      	adds	r7, #56	; 0x38
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	24000cd8 	.word	0x24000cd8
 8003b34:	40000800 	.word	0x40000800

08003b38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b3e:	f107 0310 	add.w	r3, r7, #16
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	609a      	str	r2, [r3, #8]
 8003b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <MX_TIM5_Init+0x98>)
 8003b5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b5e:	22c7      	movs	r2, #199	; 0xc7
 8003b60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b6a:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003b6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b7c:	4813      	ldr	r0, [pc, #76]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b7e:	f006 ffaa 	bl	800aad6 <HAL_TIM_Base_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003b88:	f7ff fa2c 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b92:	f107 0310 	add.w	r3, r7, #16
 8003b96:	4619      	mov	r1, r3
 8003b98:	480c      	ldr	r0, [pc, #48]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003b9a:	f007 fb2f 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003ba4:	f7ff fa1e 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4805      	ldr	r0, [pc, #20]	; (8003bcc <MX_TIM5_Init+0x94>)
 8003bb6:	f008 f84f 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003bc0:	f7ff fa10 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003bc4:	bf00      	nop
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	24000d70 	.word	0x24000d70
 8003bd0:	40000c00 	.word	0x40000c00

08003bd4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003be6:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <MX_TIM6_Init+0x68>)
 8003be8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003bec:	22c7      	movs	r2, #199	; 0xc7
 8003bee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003bf8:	f241 726f 	movw	r2, #5999	; 0x176f
 8003bfc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c04:	480c      	ldr	r0, [pc, #48]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003c06:	f006 ff66 	bl	800aad6 <HAL_TIM_Base_Init>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003c10:	f7ff f9e8 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4805      	ldr	r0, [pc, #20]	; (8003c38 <MX_TIM6_Init+0x64>)
 8003c22:	f008 f819 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003c2c:	f7ff f9da 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	24000e54 	.word	0x24000e54
 8003c3c:	40001000 	.word	0x40001000

08003c40 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <MX_TIM7_Init+0x68>)
 8003c54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c58:	22c7      	movs	r2, #199	; 0xc7
 8003c5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c64:	f240 42af 	movw	r2, #1199	; 0x4af
 8003c68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c70:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c72:	f006 ff30 	bl	800aad6 <HAL_TIM_Base_Init>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003c7c:	f7ff f9b2 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c80:	2300      	movs	r3, #0
 8003c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <MX_TIM7_Init+0x64>)
 8003c8e:	f007 ffe3 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003c98:	f7ff f9a4 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	2400101c 	.word	0x2400101c
 8003ca8:	40001400 	.word	0x40001400

08003cac <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003cc0:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <MX_TIM12_Init+0x70>)
 8003cc2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003cc6:	22c7      	movs	r2, #199	; 0xc7
 8003cc8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cca:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003cd2:	f240 2257 	movw	r2, #599	; 0x257
 8003cd6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003ce0:	2280      	movs	r2, #128	; 0x80
 8003ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003ce6:	f006 fef6 	bl	800aad6 <HAL_TIM_Base_Init>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003cf0:	f7ff f978 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4806      	ldr	r0, [pc, #24]	; (8003d18 <MX_TIM12_Init+0x6c>)
 8003d00:	f007 fa7c 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8003d0a:	f7ff f96b 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	24000f84 	.word	0x24000f84
 8003d1c:	40001800 	.word	0x40001800

08003d20 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d26:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <MX_TIM13_Init+0x44>)
 8003d28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d2c:	22c7      	movs	r2, #199	; 0xc7
 8003d2e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d38:	f240 2257 	movw	r2, #599	; 0x257
 8003d3c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003d4a:	4805      	ldr	r0, [pc, #20]	; (8003d60 <MX_TIM13_Init+0x40>)
 8003d4c:	f006 fec3 	bl	800aad6 <HAL_TIM_Base_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003d56:	f7ff f945 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	24000e08 	.word	0x24000e08
 8003d64:	40001c00 	.word	0x40001c00

08003d68 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d6e:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <MX_TIM14_Init+0x44>)
 8003d70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d74:	22c7      	movs	r2, #199	; 0xc7
 8003d76:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d80:	f640 125f 	movw	r2, #2399	; 0x95f
 8003d84:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <MX_TIM14_Init+0x40>)
 8003d94:	f006 fe9f 	bl	800aad6 <HAL_TIM_Base_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003d9e:	f7ff f921 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24000f38 	.word	0x24000f38
 8003dac:	40002000 	.word	0x40002000

08003db0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b09a      	sub	sp, #104	; 0x68
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
 8003de0:	615a      	str	r2, [r3, #20]
 8003de2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	222c      	movs	r2, #44	; 0x2c
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f00b fa70 	bl	800f2d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003df2:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <MX_TIM15_Init+0x144>)
 8003df4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003df8:	22ef      	movs	r2, #239	; 0xef
 8003dfa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfc:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8003e02:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e04:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003e08:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003e1c:	4834      	ldr	r0, [pc, #208]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e1e:	f006 fe5a 	bl	800aad6 <HAL_TIM_Base_Init>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003e28:	f7ff f8dc 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e30:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003e32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e36:	4619      	mov	r1, r3
 8003e38:	482d      	ldr	r0, [pc, #180]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e3a:	f007 f9df 	bl	800b1fc <HAL_TIM_ConfigClockSource>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8003e44:	f7ff f8ce 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003e48:	4829      	ldr	r0, [pc, #164]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e4a:	f006 ff42 	bl	800acd2 <HAL_TIM_PWM_Init>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8003e54:	f7ff f8c6 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e64:	4619      	mov	r1, r3
 8003e66:	4822      	ldr	r0, [pc, #136]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e68:	f007 fef6 	bl	800bc58 <HAL_TIMEx_MasterConfigSynchronization>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003e72:	f7ff f8b7 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e76:	2360      	movs	r3, #96	; 0x60
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8003e7a:	f240 1339 	movw	r3, #313	; 0x139
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e80:	2300      	movs	r3, #0
 8003e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e84:	2300      	movs	r3, #0
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e90:	2300      	movs	r3, #0
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e98:	2204      	movs	r2, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4814      	ldr	r0, [pc, #80]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003e9e:	f007 f899 	bl	800afd4 <HAL_TIM_PWM_ConfigChannel>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8003ea8:	f7ff f89c 	bl	8002fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4807      	ldr	r0, [pc, #28]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003ed4:	f007 ff4e 	bl	800bd74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003ede:	f7ff f881 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003ee2:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <MX_TIM15_Init+0x140>)
 8003ee4:	f000 f982 	bl	80041ec <HAL_TIM_MspPostInit>

}
 8003ee8:	bf00      	nop
 8003eea:	3768      	adds	r7, #104	; 0x68
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	24000d24 	.word	0x24000d24
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <MX_TIM16_Init+0x48>)
 8003f00:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f04:	22ef      	movs	r2, #239	; 0xef
 8003f06:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f14:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f24:	2280      	movs	r2, #128	; 0x80
 8003f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003f28:	4804      	ldr	r0, [pc, #16]	; (8003f3c <MX_TIM16_Init+0x44>)
 8003f2a:	f006 fdd4 	bl	800aad6 <HAL_TIM_Base_Init>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003f34:	f7ff f856 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	24000fd0 	.word	0x24000fd0
 8003f40:	40014400 	.word	0x40014400

08003f44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08e      	sub	sp, #56	; 0x38
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a9a      	ldr	r2, [pc, #616]	; (80041bc <HAL_TIM_Base_MspInit+0x278>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10f      	bne.n	8003f76 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f56:	4b9a      	ldr	r3, [pc, #616]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f5c:	4a98      	ldr	r2, [pc, #608]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f66:	4b96      	ldr	r3, [pc, #600]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003f74:	e11d      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f80:	4b8f      	ldr	r3, [pc, #572]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f86:	4a8e      	ldr	r2, [pc, #568]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f90:	4b8b      	ldr	r3, [pc, #556]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003f9e:	e108      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a87      	ldr	r2, [pc, #540]	; (80041c4 <HAL_TIM_Base_MspInit+0x280>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10f      	bne.n	8003fca <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fb0:	4a83      	ldr	r2, [pc, #524]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003fb2:	f043 0302 	orr.w	r3, r3, #2
 8003fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fba:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003fc8:	e0f3      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM4)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7e      	ldr	r2, [pc, #504]	; (80041c8 <HAL_TIM_Base_MspInit+0x284>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fd4:	4b7a      	ldr	r3, [pc, #488]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fda:	4a79      	ldr	r2, [pc, #484]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8003fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ff2:	e0de      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM5)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a74      	ldr	r2, [pc, #464]	; (80041cc <HAL_TIM_Base_MspInit+0x288>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d117      	bne.n	800402e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ffe:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004004:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004006:	f043 0308 	orr.w	r3, r3, #8
 800400a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800400e:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800401c:	2200      	movs	r2, #0
 800401e:	2100      	movs	r1, #0
 8004020:	2032      	movs	r0, #50	; 0x32
 8004022:	f000 fe86 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004026:	2032      	movs	r0, #50	; 0x32
 8004028:	f000 fe9d 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 800402c:	e0c1      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM6)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a67      	ldr	r2, [pc, #412]	; (80041d0 <HAL_TIM_Base_MspInit+0x28c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d117      	bne.n	8004068 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004038:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 800403a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800403e:	4a60      	ldr	r2, [pc, #384]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004040:	f043 0310 	orr.w	r3, r3, #16
 8004044:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004048:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 800404a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004056:	2200      	movs	r2, #0
 8004058:	2100      	movs	r1, #0
 800405a:	2036      	movs	r0, #54	; 0x36
 800405c:	f000 fe69 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004060:	2036      	movs	r0, #54	; 0x36
 8004062:	f000 fe80 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8004066:	e0a4      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM7)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a59      	ldr	r2, [pc, #356]	; (80041d4 <HAL_TIM_Base_MspInit+0x290>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d117      	bne.n	80040a2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004072:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004078:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004082:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	2100      	movs	r1, #0
 8004094:	2037      	movs	r0, #55	; 0x37
 8004096:	f000 fe4c 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800409a:	2037      	movs	r0, #55	; 0x37
 800409c:	f000 fe63 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 80040a0:	e087      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM12)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4c      	ldr	r2, [pc, #304]	; (80041d8 <HAL_TIM_Base_MspInit+0x294>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d117      	bne.n	80040dc <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80040ac:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 80040ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040b2:	4a43      	ldr	r2, [pc, #268]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 80040b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040bc:	4b40      	ldr	r3, [pc, #256]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 80040be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	202b      	movs	r0, #43	; 0x2b
 80040d0:	f000 fe2f 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80040d4:	202b      	movs	r0, #43	; 0x2b
 80040d6:	f000 fe46 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 80040da:	e06a      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM13)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3e      	ldr	r2, [pc, #248]	; (80041dc <HAL_TIM_Base_MspInit+0x298>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d117      	bne.n	8004116 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 80040e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ec:	4a34      	ldr	r2, [pc, #208]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 80040ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 80040f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004104:	2200      	movs	r2, #0
 8004106:	2100      	movs	r1, #0
 8004108:	202c      	movs	r0, #44	; 0x2c
 800410a:	f000 fe12 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800410e:	202c      	movs	r0, #44	; 0x2c
 8004110:	f000 fe29 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 8004114:	e04d      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM14)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_TIM_Base_MspInit+0x29c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d117      	bne.n	8004150 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004126:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004130:	4b23      	ldr	r3, [pc, #140]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	202d      	movs	r0, #45	; 0x2d
 8004144:	f000 fdf5 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004148:	202d      	movs	r0, #45	; 0x2d
 800414a:	f000 fe0c 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 800414e:	e030      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM15)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <HAL_TIM_Base_MspInit+0x2a0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10f      	bne.n	800417a <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 800415c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004160:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 800416c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	e01b      	b.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM16)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <HAL_TIM_Base_MspInit+0x2a4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d116      	bne.n	80041b2 <HAL_TIM_Base_MspInit+0x26e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800418a:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 800418c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004190:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_TIM_Base_MspInit+0x27c>)
 8004196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80041a2:	2200      	movs	r2, #0
 80041a4:	2100      	movs	r1, #0
 80041a6:	2075      	movs	r0, #117	; 0x75
 80041a8:	f000 fdc3 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80041ac:	2075      	movs	r0, #117	; 0x75
 80041ae:	f000 fdda 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3738      	adds	r7, #56	; 0x38
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	58024400 	.word	0x58024400
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40001000 	.word	0x40001000
 80041d4:	40001400 	.word	0x40001400
 80041d8:	40001800 	.word	0x40001800
 80041dc:	40001c00 	.word	0x40001c00
 80041e0:	40002000 	.word	0x40002000
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400

080041ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f4:	f107 031c 	add.w	r3, r7, #28
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]
 8004202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a5e      	ldr	r2, [pc, #376]	; (8004384 <HAL_TIM_MspPostInit+0x198>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d120      	bne.n	8004250 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800420e:	4b5e      	ldr	r3, [pc, #376]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 8004210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004214:	4a5c      	ldr	r2, [pc, #368]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 8004216:	f043 0310 	orr.w	r3, r3, #16
 800421a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800421e:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 8004220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800422c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423a:	2300      	movs	r3, #0
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800423e:	2301      	movs	r3, #1
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8004242:	f107 031c 	add.w	r3, r7, #28
 8004246:	4619      	mov	r1, r3
 8004248:	4850      	ldr	r0, [pc, #320]	; (800438c <HAL_TIM_MspPostInit+0x1a0>)
 800424a:	f003 fdeb 	bl	8007e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800424e:	e094      	b.n	800437a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d120      	bne.n	800429c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425a:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 800425c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004260:	4a49      	ldr	r2, [pc, #292]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 800426c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8004278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004286:	2300      	movs	r3, #0
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800428a:	2301      	movs	r3, #1
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800428e:	f107 031c 	add.w	r3, r7, #28
 8004292:	4619      	mov	r1, r3
 8004294:	483e      	ldr	r0, [pc, #248]	; (8004390 <HAL_TIM_MspPostInit+0x1a4>)
 8004296:	f003 fdc5 	bl	8007e24 <HAL_GPIO_Init>
}
 800429a:	e06e      	b.n	800437a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <HAL_TIM_MspPostInit+0x1a8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d11f      	bne.n	80042e6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a6:	4b38      	ldr	r3, [pc, #224]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 80042a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ac:	4a36      	ldr	r2, [pc, #216]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042b6:	4b34      	ldr	r3, [pc, #208]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 80042b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80042c4:	2340      	movs	r3, #64	; 0x40
 80042c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d4:	2302      	movs	r3, #2
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80042d8:	f107 031c 	add.w	r3, r7, #28
 80042dc:	4619      	mov	r1, r3
 80042de:	482e      	ldr	r0, [pc, #184]	; (8004398 <HAL_TIM_MspPostInit+0x1ac>)
 80042e0:	f003 fda0 	bl	8007e24 <HAL_GPIO_Init>
}
 80042e4:	e049      	b.n	800437a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a2c      	ldr	r2, [pc, #176]	; (800439c <HAL_TIM_MspPostInit+0x1b0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d120      	bne.n	8004332 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 80042f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 8004302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800430e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004314:	2302      	movs	r3, #2
 8004316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431c:	2300      	movs	r3, #0
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004320:	2302      	movs	r3, #2
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	4619      	mov	r1, r3
 800432a:	4819      	ldr	r0, [pc, #100]	; (8004390 <HAL_TIM_MspPostInit+0x1a4>)
 800432c:	f003 fd7a 	bl	8007e24 <HAL_GPIO_Init>
}
 8004330:	e023      	b.n	800437a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_TIM_MspPostInit+0x1b4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d11e      	bne.n	800437a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800433c:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 800433e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004342:	4a11      	ldr	r2, [pc, #68]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_TIM_MspPostInit+0x19c>)
 800434e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800435a:	2340      	movs	r3, #64	; 0x40
 800435c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435e:	2302      	movs	r3, #2
 8004360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004366:	2300      	movs	r3, #0
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800436a:	2304      	movs	r3, #4
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800436e:	f107 031c 	add.w	r3, r7, #28
 8004372:	4619      	mov	r1, r3
 8004374:	4805      	ldr	r0, [pc, #20]	; (800438c <HAL_TIM_MspPostInit+0x1a0>)
 8004376:	f003 fd55 	bl	8007e24 <HAL_GPIO_Init>
}
 800437a:	bf00      	nop
 800437c:	3730      	adds	r7, #48	; 0x30
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40010000 	.word	0x40010000
 8004388:	58024400 	.word	0x58024400
 800438c:	58021000 	.word	0x58021000
 8004390:	58020400 	.word	0x58020400
 8004394:	40000400 	.word	0x40000400
 8004398:	58020000 	.word	0x58020000
 800439c:	40000800 	.word	0x40000800
 80043a0:	40014000 	.word	0x40014000

080043a4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80043a8:	4b25      	ldr	r3, [pc, #148]	; (8004440 <MX_UART4_Init+0x9c>)
 80043aa:	4a26      	ldr	r2, [pc, #152]	; (8004444 <MX_UART4_Init+0xa0>)
 80043ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <MX_UART4_Init+0x9c>)
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <MX_UART4_Init+0xa4>)
 80043b2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <MX_UART4_Init+0x9c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80043ba:	4b21      	ldr	r3, [pc, #132]	; (8004440 <MX_UART4_Init+0x9c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <MX_UART4_Init+0x9c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <MX_UART4_Init+0x9c>)
 80043c8:	220c      	movs	r2, #12
 80043ca:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <MX_UART4_Init+0x9c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d2:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <MX_UART4_Init+0x9c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <MX_UART4_Init+0x9c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <MX_UART4_Init+0x9c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <MX_UART4_Init+0x9c>)
 80043e6:	2208      	movs	r2, #8
 80043e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <MX_UART4_Init+0x9c>)
 80043ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80043f2:	4813      	ldr	r0, [pc, #76]	; (8004440 <MX_UART4_Init+0x9c>)
 80043f4:	f007 fd5a 	bl	800beac <HAL_UART_Init>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80043fe:	f7fe fdf1 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004402:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004406:	480e      	ldr	r0, [pc, #56]	; (8004440 <MX_UART4_Init+0x9c>)
 8004408:	f009 fc81 	bl	800dd0e <HAL_UARTEx_SetTxFifoThreshold>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8004412:	f7fe fde7 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004416:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800441a:	4809      	ldr	r0, [pc, #36]	; (8004440 <MX_UART4_Init+0x9c>)
 800441c:	f009 fcb5 	bl	800dd8a <HAL_UARTEx_SetRxFifoThreshold>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8004426:	f7fe fddd 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800442a:	4805      	ldr	r0, [pc, #20]	; (8004440 <MX_UART4_Init+0x9c>)
 800442c:	f009 fbfb 	bl	800dc26 <HAL_UARTEx_EnableFifoMode>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8004436:	f7fe fdd5 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	24001368 	.word	0x24001368
 8004444:	40004c00 	.word	0x40004c00
 8004448:	001e8480 	.word	0x001e8480

0800444c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004450:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <MX_UART7_Init+0x94>)
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <MX_UART7_Init+0x98>)
 8004454:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <MX_UART7_Init+0x94>)
 8004458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800445c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <MX_UART7_Init+0x94>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <MX_UART7_Init+0x94>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <MX_UART7_Init+0x94>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <MX_UART7_Init+0x94>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <MX_UART7_Init+0x94>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <MX_UART7_Init+0x94>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <MX_UART7_Init+0x94>)
 8004484:	2200      	movs	r2, #0
 8004486:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <MX_UART7_Init+0x94>)
 800448a:	2200      	movs	r2, #0
 800448c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <MX_UART7_Init+0x94>)
 8004490:	2200      	movs	r2, #0
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004494:	4812      	ldr	r0, [pc, #72]	; (80044e0 <MX_UART7_Init+0x94>)
 8004496:	f007 fd09 	bl	800beac <HAL_UART_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80044a0:	f7fe fda0 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80044a4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80044a8:	480d      	ldr	r0, [pc, #52]	; (80044e0 <MX_UART7_Init+0x94>)
 80044aa:	f009 fc30 	bl	800dd0e <HAL_UARTEx_SetTxFifoThreshold>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80044b4:	f7fe fd96 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80044b8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80044bc:	4808      	ldr	r0, [pc, #32]	; (80044e0 <MX_UART7_Init+0x94>)
 80044be:	f009 fc64 	bl	800dd8a <HAL_UARTEx_SetRxFifoThreshold>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80044c8:	f7fe fd8c 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80044cc:	4804      	ldr	r0, [pc, #16]	; (80044e0 <MX_UART7_Init+0x94>)
 80044ce:	f009 fbaa 	bl	800dc26 <HAL_UARTEx_EnableFifoMode>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80044d8:	f7fe fd84 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80044dc:	bf00      	nop
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	240010e0 	.word	0x240010e0
 80044e4:	40007800 	.word	0x40007800

080044e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044ec:	4b22      	ldr	r3, [pc, #136]	; (8004578 <MX_USART3_UART_Init+0x90>)
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <MX_USART3_UART_Init+0x94>)
 80044f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <MX_USART3_UART_Init+0x90>)
 80044f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <MX_USART3_UART_Init+0x90>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004502:	2200      	movs	r2, #0
 8004504:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800450c:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <MX_USART3_UART_Init+0x90>)
 800450e:	220c      	movs	r2, #12
 8004510:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004512:	4b19      	ldr	r3, [pc, #100]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004514:	2200      	movs	r2, #0
 8004516:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <MX_USART3_UART_Init+0x90>)
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004520:	2200      	movs	r2, #0
 8004522:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004526:	2200      	movs	r2, #0
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <MX_USART3_UART_Init+0x90>)
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004530:	4811      	ldr	r0, [pc, #68]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004532:	f007 fcbb 	bl	800beac <HAL_UART_Init>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800453c:	f7fe fd52 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004540:	2100      	movs	r1, #0
 8004542:	480d      	ldr	r0, [pc, #52]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004544:	f009 fbe3 	bl	800dd0e <HAL_UARTEx_SetTxFifoThreshold>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800454e:	f7fe fd49 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004552:	2100      	movs	r1, #0
 8004554:	4808      	ldr	r0, [pc, #32]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004556:	f009 fc18 	bl	800dd8a <HAL_UARTEx_SetRxFifoThreshold>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004560:	f7fe fd40 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004564:	4804      	ldr	r0, [pc, #16]	; (8004578 <MX_USART3_UART_Init+0x90>)
 8004566:	f009 fb99 	bl	800dc9c <HAL_UARTEx_DisableFifoMode>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004570:	f7fe fd38 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}
 8004578:	240011e8 	.word	0x240011e8
 800457c:	40004800 	.word	0x40004800

08004580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b0bc      	sub	sp, #240	; 0xf0
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004598:	f107 0320 	add.w	r3, r7, #32
 800459c:	22bc      	movs	r2, #188	; 0xbc
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f00a fe95 	bl	800f2d0 <memset>
  if(uartHandle->Instance==UART4)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4aa1      	ldr	r2, [pc, #644]	; (8004830 <HAL_UART_MspInit+0x2b0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	f040 80b7 	bne.w	8004720 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80045b2:	2302      	movs	r3, #2
 80045b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045bc:	f107 0320 	add.w	r3, r7, #32
 80045c0:	4618      	mov	r0, r3
 80045c2:	f004 fe05 	bl	80091d0 <HAL_RCCEx_PeriphCLKConfig>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80045cc:	f7fe fd0a 	bl	8002fe4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80045d0:	4b98      	ldr	r3, [pc, #608]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 80045d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d6:	4a97      	ldr	r2, [pc, #604]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 80045d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045e0:	4b94      	ldr	r3, [pc, #592]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 80045e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ee:	4b91      	ldr	r3, [pc, #580]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 80045f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f4:	4a8f      	ldr	r2, [pc, #572]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045fe:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 8004600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800460c:	2303      	movs	r3, #3
 800460e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004624:	2308      	movs	r3, #8
 8004626:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800462a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800462e:	4619      	mov	r1, r3
 8004630:	4881      	ldr	r0, [pc, #516]	; (8004838 <HAL_UART_MspInit+0x2b8>)
 8004632:	f003 fbf7 	bl	8007e24 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8004636:	4b81      	ldr	r3, [pc, #516]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004638:	4a81      	ldr	r2, [pc, #516]	; (8004840 <HAL_UART_MspInit+0x2c0>)
 800463a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800463c:	4b7f      	ldr	r3, [pc, #508]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800463e:	223f      	movs	r2, #63	; 0x3f
 8004640:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004642:	4b7e      	ldr	r3, [pc, #504]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004648:	4b7c      	ldr	r3, [pc, #496]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800464e:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004654:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004656:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004658:	2200      	movs	r2, #0
 800465a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800465c:	4b77      	ldr	r3, [pc, #476]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800465e:	2200      	movs	r2, #0
 8004660:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004664:	2200      	movs	r2, #0
 8004666:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004668:	4b74      	ldr	r3, [pc, #464]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800466a:	2200      	movs	r2, #0
 800466c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800466e:	4b73      	ldr	r3, [pc, #460]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004670:	2204      	movs	r2, #4
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004674:	4b71      	ldr	r3, [pc, #452]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004676:	2203      	movs	r2, #3
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800467a:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800467c:	2200      	movs	r2, #0
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004680:	4b6e      	ldr	r3, [pc, #440]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004686:	486d      	ldr	r0, [pc, #436]	; (800483c <HAL_UART_MspInit+0x2bc>)
 8004688:	f000 fd92 	bl	80051b0 <HAL_DMA_Init>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8004692:	f7fe fca7 	bl	8002fe4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800469a:	67da      	str	r2, [r3, #124]	; 0x7c
 800469c:	4a67      	ldr	r2, [pc, #412]	; (800483c <HAL_UART_MspInit+0x2bc>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80046a2:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046a4:	4a68      	ldr	r2, [pc, #416]	; (8004848 <HAL_UART_MspInit+0x2c8>)
 80046a6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046b0:	2240      	movs	r2, #64	; 0x40
 80046b2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046b4:	4b63      	ldr	r3, [pc, #396]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046ba:	4b62      	ldr	r3, [pc, #392]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046c2:	4b60      	ldr	r3, [pc, #384]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046c8:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80046ce:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046d4:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80046da:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046dc:	2204      	movs	r2, #4
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80046e0:	4b58      	ldr	r3, [pc, #352]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046e2:	2203      	movs	r2, #3
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80046e6:	4b57      	ldr	r3, [pc, #348]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80046ec:	4b55      	ldr	r3, [pc, #340]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80046f2:	4854      	ldr	r0, [pc, #336]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 80046f4:	f000 fd5c 	bl	80051b0 <HAL_DMA_Init>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80046fe:	f7fe fc71 	bl	8002fe4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a4f      	ldr	r2, [pc, #316]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 8004706:	679a      	str	r2, [r3, #120]	; 0x78
 8004708:	4a4e      	ldr	r2, [pc, #312]	; (8004844 <HAL_UART_MspInit+0x2c4>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800470e:	2200      	movs	r2, #0
 8004710:	2100      	movs	r1, #0
 8004712:	2034      	movs	r0, #52	; 0x34
 8004714:	f000 fb0d 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004718:	2034      	movs	r0, #52	; 0x34
 800471a:	f000 fb24 	bl	8004d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800471e:	e153      	b.n	80049c8 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a49      	ldr	r2, [pc, #292]	; (800484c <HAL_UART_MspInit+0x2cc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	f040 8098 	bne.w	800485c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800472c:	2302      	movs	r3, #2
 800472e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004736:	f107 0320 	add.w	r3, r7, #32
 800473a:	4618      	mov	r0, r3
 800473c:	f004 fd48 	bl	80091d0 <HAL_RCCEx_PeriphCLKConfig>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8004746:	f7fe fc4d 	bl	8002fe4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800474a:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 800474c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004750:	4a38      	ldr	r2, [pc, #224]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 8004752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004756:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 800475c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004760:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004768:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 800476a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800476e:	4a31      	ldr	r2, [pc, #196]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 8004770:	f043 0310 	orr.w	r3, r3, #16
 8004774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004778:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_UART_MspInit+0x2b4>)
 800477a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004786:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800478a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2302      	movs	r3, #2
 8004790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80047a0:	2307      	movs	r3, #7
 80047a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80047aa:	4619      	mov	r1, r3
 80047ac:	4828      	ldr	r0, [pc, #160]	; (8004850 <HAL_UART_MspInit+0x2d0>)
 80047ae:	f003 fb39 	bl	8007e24 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047b4:	4a28      	ldr	r2, [pc, #160]	; (8004858 <HAL_UART_MspInit+0x2d8>)
 80047b6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80047b8:	4b26      	ldr	r3, [pc, #152]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047ba:	2250      	movs	r2, #80	; 0x50
 80047bc:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047be:	4b25      	ldr	r3, [pc, #148]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047c4:	4b23      	ldr	r3, [pc, #140]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047ca:	4b22      	ldr	r3, [pc, #136]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d0:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047d8:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047ea:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047ec:	2204      	movs	r2, #4
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047f0:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047f2:	2203      	movs	r2, #3
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80047fc:	4b15      	ldr	r3, [pc, #84]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8004802:	4814      	ldr	r0, [pc, #80]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 8004804:	f000 fcd4 	bl	80051b0 <HAL_DMA_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800480e:	f7fe fbe9 	bl	8002fe4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 8004816:	679a      	str	r2, [r3, #120]	; 0x78
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <HAL_UART_MspInit+0x2d4>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2052      	movs	r0, #82	; 0x52
 8004824:	f000 fa85 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004828:	2052      	movs	r0, #82	; 0x52
 800482a:	f000 fa9c 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 800482e:	e0cb      	b.n	80049c8 <HAL_UART_MspInit+0x448>
 8004830:	40004c00 	.word	0x40004c00
 8004834:	58024400 	.word	0x58024400
 8004838:	58020c00 	.word	0x58020c00
 800483c:	24001068 	.word	0x24001068
 8004840:	40020058 	.word	0x40020058
 8004844:	240013f8 	.word	0x240013f8
 8004848:	40020070 	.word	0x40020070
 800484c:	40007800 	.word	0x40007800
 8004850:	58021000 	.word	0x58021000
 8004854:	240012f0 	.word	0x240012f0
 8004858:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <HAL_UART_MspInit+0x450>)
 8004862:	4293      	cmp	r3, r2
 8004864:	f040 80b0 	bne.w	80049c8 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004868:	2302      	movs	r3, #2
 800486a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004872:	f107 0320 	add.w	r3, r7, #32
 8004876:	4618      	mov	r0, r3
 8004878:	f004 fcaa 	bl	80091d0 <HAL_RCCEx_PeriphCLKConfig>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8004882:	f7fe fbaf 	bl	8002fe4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004886:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_UART_MspInit+0x454>)
 8004888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800488c:	4a51      	ldr	r2, [pc, #324]	; (80049d4 <HAL_UART_MspInit+0x454>)
 800488e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004892:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004896:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_UART_MspInit+0x454>)
 8004898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800489c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <HAL_UART_MspInit+0x454>)
 80048a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048aa:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <HAL_UART_MspInit+0x454>)
 80048ac:	f043 0308 	orr.w	r3, r3, #8
 80048b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048b4:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_UART_MspInit+0x454>)
 80048b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ca:	2302      	movs	r3, #2
 80048cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048dc:	2307      	movs	r3, #7
 80048de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80048e6:	4619      	mov	r1, r3
 80048e8:	483b      	ldr	r0, [pc, #236]	; (80049d8 <HAL_UART_MspInit+0x458>)
 80048ea:	f003 fa9b 	bl	8007e24 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_UART_MspInit+0x45c>)
 80048f0:	4a3b      	ldr	r2, [pc, #236]	; (80049e0 <HAL_UART_MspInit+0x460>)
 80048f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <HAL_UART_MspInit+0x45c>)
 80048f6:	222d      	movs	r2, #45	; 0x2d
 80048f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_UART_MspInit+0x45c>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004902:	2200      	movs	r2, #0
 8004904:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004906:	4b35      	ldr	r3, [pc, #212]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800490c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800490e:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004910:	2200      	movs	r2, #0
 8004912:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800491a:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_UART_MspInit+0x45c>)
 800491c:	2200      	movs	r2, #0
 800491e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004926:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_UART_MspInit+0x45c>)
 800492a:	2200      	movs	r2, #0
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800492e:	482b      	ldr	r0, [pc, #172]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004930:	f000 fc3e 	bl	80051b0 <HAL_DMA_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_UART_MspInit+0x3be>
      Error_Handler();
 800493a:	f7fe fb53 	bl	8002fe4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a26      	ldr	r2, [pc, #152]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004942:	67da      	str	r2, [r3, #124]	; 0x7c
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <HAL_UART_MspInit+0x45c>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800494a:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <HAL_UART_MspInit+0x464>)
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <HAL_UART_MspInit+0x468>)
 800494e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004950:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004952:	222e      	movs	r2, #46	; 0x2e
 8004954:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004956:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800495c:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_UART_MspInit+0x464>)
 800495e:	2200      	movs	r2, #0
 8004960:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004968:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_UART_MspInit+0x464>)
 800496c:	2200      	movs	r2, #0
 800496e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004970:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004972:	2200      	movs	r2, #0
 8004974:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004978:	2200      	movs	r2, #0
 800497a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_UART_MspInit+0x464>)
 800497e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004982:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004984:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004986:	2204      	movs	r2, #4
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800498a:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <HAL_UART_MspInit+0x464>)
 800498c:	2203      	movs	r2, #3
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004992:	2200      	movs	r2, #0
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_UART_MspInit+0x464>)
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800499c:	4811      	ldr	r0, [pc, #68]	; (80049e4 <HAL_UART_MspInit+0x464>)
 800499e:	f000 fc07 	bl	80051b0 <HAL_DMA_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_UART_MspInit+0x42c>
      Error_Handler();
 80049a8:	f7fe fb1c 	bl	8002fe4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <HAL_UART_MspInit+0x464>)
 80049b0:	679a      	str	r2, [r3, #120]	; 0x78
 80049b2:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <HAL_UART_MspInit+0x464>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2100      	movs	r1, #0
 80049bc:	2027      	movs	r0, #39	; 0x27
 80049be:	f000 f9b8 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049c2:	2027      	movs	r0, #39	; 0x27
 80049c4:	f000 f9cf 	bl	8004d66 <HAL_NVIC_EnableIRQ>
}
 80049c8:	bf00      	nop
 80049ca:	37f0      	adds	r7, #240	; 0xf0
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40004800 	.word	0x40004800
 80049d4:	58024400 	.word	0x58024400
 80049d8:	58020c00 	.word	0x58020c00
 80049dc:	24001170 	.word	0x24001170
 80049e0:	40020028 	.word	0x40020028
 80049e4:	24001278 	.word	0x24001278
 80049e8:	40020040 	.word	0x40020040

080049ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 80049ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049f0:	f7fe fe00 	bl	80035f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049f4:	480c      	ldr	r0, [pc, #48]	; (8004a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049f6:	490d      	ldr	r1, [pc, #52]	; (8004a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049f8:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049fc:	e002      	b.n	8004a04 <LoopCopyDataInit>

080049fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a02:	3304      	adds	r3, #4

08004a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a08:	d3f9      	bcc.n	80049fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a0c:	4c0a      	ldr	r4, [pc, #40]	; (8004a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a10:	e001      	b.n	8004a16 <LoopFillZerobss>

08004a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a14:	3204      	adds	r2, #4

08004a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a18:	d3fb      	bcc.n	8004a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a1a:	f00a fc35 	bl	800f288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a1e:	f7fe f97d 	bl	8002d1c <main>
  bx  lr
 8004a22:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8004a24:	24001a88 	.word	0x24001a88
  ldr r0, =_sdata
 8004a28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a2c:	240003f0 	.word	0x240003f0
  ldr r2, =_sidata
 8004a30:	08013b84 	.word	0x08013b84
  ldr r2, =_sbss
 8004a34:	240003f0 	.word	0x240003f0
  ldr r4, =_ebss
 8004a38:	24001484 	.word	0x24001484

08004a3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a3c:	e7fe      	b.n	8004a3c <ADC3_IRQHandler>
	...

08004a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a46:	2003      	movs	r0, #3
 8004a48:	f000 f968 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a4c:	f004 f9ea 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_Init+0x68>)
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	4913      	ldr	r1, [pc, #76]	; (8004aac <HAL_Init+0x6c>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_Init+0x68>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <HAL_Init+0x6c>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <HAL_Init+0x70>)
 8004a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a84:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <HAL_Init+0x74>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f000 f814 	bl	8004ab8 <HAL_InitTick>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e002      	b.n	8004aa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a9a:	f7fe fbeb 	bl	8003274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	08011cb4 	.word	0x08011cb4
 8004ab0:	24000214 	.word	0x24000214
 8004ab4:	24000210 	.word	0x24000210

08004ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ac0:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_InitTick+0x60>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e021      	b.n	8004b10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004acc:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <HAL_InitTick+0x64>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_InitTick+0x60>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f94d 	bl	8004d82 <HAL_SYSTICK_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00e      	b.n	8004b10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d80a      	bhi.n	8004b0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af8:	2200      	movs	r2, #0
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f000 f917 	bl	8004d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <HAL_InitTick+0x68>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2400021c 	.word	0x2400021c
 8004b1c:	24000210 	.word	0x24000210
 8004b20:	24000218 	.word	0x24000218

08004b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_IncTick+0x20>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_IncTick+0x24>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_IncTick+0x24>)
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2400021c 	.word	0x2400021c
 8004b48:	24001470 	.word	0x24001470

08004b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <HAL_GetTick+0x14>)
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	24001470 	.word	0x24001470

08004b64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_GetREVID+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	5c001000 	.word	0x5c001000

08004b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <__NVIC_SetPriorityGrouping+0x40>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004baa:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <__NVIC_SetPriorityGrouping+0x40>)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	60d3      	str	r3, [r2, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000ed00 	.word	0xe000ed00
 8004bc0:	05fa0000 	.word	0x05fa0000

08004bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <__NVIC_GetPriorityGrouping+0x18>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	f003 0307 	and.w	r3, r3, #7
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	db0b      	blt.n	8004c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	f003 021f 	and.w	r2, r3, #31
 8004bf8:	4907      	ldr	r1, [pc, #28]	; (8004c18 <__NVIC_EnableIRQ+0x38>)
 8004bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2001      	movs	r0, #1
 8004c02:	fa00 f202 	lsl.w	r2, r0, r2
 8004c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	e000e100 	.word	0xe000e100

08004c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	6039      	str	r1, [r7, #0]
 8004c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	db0a      	blt.n	8004c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	490c      	ldr	r1, [pc, #48]	; (8004c68 <__NVIC_SetPriority+0x4c>)
 8004c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c3a:	0112      	lsls	r2, r2, #4
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	440b      	add	r3, r1
 8004c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c44:	e00a      	b.n	8004c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4908      	ldr	r1, [pc, #32]	; (8004c6c <__NVIC_SetPriority+0x50>)
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	3b04      	subs	r3, #4
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	440b      	add	r3, r1
 8004c5a:	761a      	strb	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	; 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f1c3 0307 	rsb	r3, r3, #7
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	bf28      	it	cs
 8004c8e:	2304      	movcs	r3, #4
 8004c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d902      	bls.n	8004ca0 <NVIC_EncodePriority+0x30>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3b03      	subs	r3, #3
 8004c9e:	e000      	b.n	8004ca2 <NVIC_EncodePriority+0x32>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43d9      	mvns	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	4313      	orrs	r3, r2
         );
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	; 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff8e 	bl	8004c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff29 	bl	8004b7c <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d40:	f7ff ff40 	bl	8004bc4 <__NVIC_GetPriorityGrouping>
 8004d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	6978      	ldr	r0, [r7, #20]
 8004d4c:	f7ff ff90 	bl	8004c70 <NVIC_EncodePriority>
 8004d50:	4602      	mov	r2, r0
 8004d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff5f 	bl	8004c1c <__NVIC_SetPriority>
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff33 	bl	8004be0 <__NVIC_EnableIRQ>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff ffa4 	bl	8004cd8 <SysTick_Config>
 8004d90:	4603      	mov	r3, r0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004d9e:	f000 f802 	bl	8004da6 <HAL_SYSTICK_Callback>
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e054      	b.n	8004e70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7f5b      	ldrb	r3, [r3, #29]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fe04 	bl	80019e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10c      	bne.n	8004e04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_CRC_Init+0xc4>)
 8004df0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0218 	bic.w	r2, r2, #24
 8004e00:	609a      	str	r2, [r3, #8]
 8004e02:	e00c      	b.n	8004e1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6899      	ldr	r1, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f948 	bl	80050a4 <HAL_CRCEx_Polynomial_Set>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e028      	b.n	8004e70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	795b      	ldrb	r3, [r3, #5]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2e:	611a      	str	r2, [r3, #16]
 8004e30:	e004      	b.n	8004e3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6912      	ldr	r2, [r2, #16]
 8004e3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	04c11db7 	.word	0x04c11db7

08004e7c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d006      	beq.n	8004eb8 <HAL_CRC_Calculate+0x3c>
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d829      	bhi.n	8004f02 <HAL_CRC_Calculate+0x86>
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d019      	beq.n	8004ee6 <HAL_CRC_Calculate+0x6a>
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d01e      	beq.n	8004ef4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004eb6:	e024      	b.n	8004f02 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e00a      	b.n	8004ed4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	441a      	add	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d3f0      	bcc.n	8004ebe <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	613b      	str	r3, [r7, #16]
      break;
 8004ee4:	e00e      	b.n	8004f04 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f812 	bl	8004f14 <CRC_Handle_8>
 8004ef0:	6138      	str	r0, [r7, #16]
      break;
 8004ef2:	e007      	b.n	8004f04 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f899 	bl	8005030 <CRC_Handle_16>
 8004efe:	6138      	str	r0, [r7, #16]
      break;
 8004f00:	e000      	b.n	8004f04 <HAL_CRC_Calculate+0x88>
      break;
 8004f02:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004f0a:	693b      	ldr	r3, [r7, #16]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e023      	b.n	8004f6e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3301      	adds	r3, #1
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	440b      	add	r3, r1
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f40:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	3302      	adds	r3, #2
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	440b      	add	r3, r1
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004f50:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	3303      	adds	r3, #3
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	440b      	add	r3, r1
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004f64:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d3d6      	bcc.n	8004f26 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04d      	beq.n	800501e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d107      	bne.n	8004f9c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4413      	add	r3, r2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d116      	bne.n	8004fd4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	3301      	adds	r3, #1
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	440b      	add	r3, r1
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b21b      	sxth	r3, r3
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	b21b      	sxth	r3, r3
 8004fc6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	8b7a      	ldrh	r2, [r7, #26]
 8004fd2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d11f      	bne.n	800501e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	b21a      	sxth	r2, r3
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	440b      	add	r3, r1
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	8b7a      	ldrh	r2, [r7, #26]
 800500a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	3302      	adds	r3, #2
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	4413      	add	r3, r2
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3724      	adds	r7, #36	; 0x24
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e013      	b.n	800506a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4413      	add	r3, r2
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	041a      	lsls	r2, r3, #16
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	3302      	adds	r3, #2
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	440b      	add	r3, r1
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	429a      	cmp	r2, r3
 8005072:	d3e6      	bcc.n	8005042 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4413      	add	r3, r2
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80050b4:	231f      	movs	r3, #31
 80050b6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80050b8:	bf00      	nop
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1e5a      	subs	r2, r3, #1
 80050be:	613a      	str	r2, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_CRCEx_Polynomial_Set+0x34>
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_CRCEx_Polynomial_Set+0x16>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b18      	cmp	r3, #24
 80050dc:	d846      	bhi.n	800516c <HAL_CRCEx_Polynomial_Set+0xc8>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005173 	.word	0x08005173
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	0800516d 	.word	0x0800516d
 80050f0:	0800516d 	.word	0x0800516d
 80050f4:	0800516d 	.word	0x0800516d
 80050f8:	0800516d 	.word	0x0800516d
 80050fc:	0800516d 	.word	0x0800516d
 8005100:	0800516d 	.word	0x0800516d
 8005104:	08005161 	.word	0x08005161
 8005108:	0800516d 	.word	0x0800516d
 800510c:	0800516d 	.word	0x0800516d
 8005110:	0800516d 	.word	0x0800516d
 8005114:	0800516d 	.word	0x0800516d
 8005118:	0800516d 	.word	0x0800516d
 800511c:	0800516d 	.word	0x0800516d
 8005120:	0800516d 	.word	0x0800516d
 8005124:	08005155 	.word	0x08005155
 8005128:	0800516d 	.word	0x0800516d
 800512c:	0800516d 	.word	0x0800516d
 8005130:	0800516d 	.word	0x0800516d
 8005134:	0800516d 	.word	0x0800516d
 8005138:	0800516d 	.word	0x0800516d
 800513c:	0800516d 	.word	0x0800516d
 8005140:	0800516d 	.word	0x0800516d
 8005144:	08005149 	.word	0x08005149
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d913      	bls.n	8005176 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005152:	e010      	b.n	8005176 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b07      	cmp	r3, #7
 8005158:	d90f      	bls.n	800517a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800515e:	e00c      	b.n	800517a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d90b      	bls.n	800517e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800516a:	e008      	b.n	800517e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
      break;
 8005170:	e006      	b.n	8005180 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005172:	bf00      	nop
 8005174:	e004      	b.n	8005180 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800517e:	bf00      	nop
  }
  if (status == HAL_OK)
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 0118 	bic.w	r1, r3, #24
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80051b8:	f7ff fcc8 	bl	8004b4c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e316      	b.n	80057f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a66      	ldr	r2, [pc, #408]	; (8005368 <HAL_DMA_Init+0x1b8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d04a      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a65      	ldr	r2, [pc, #404]	; (800536c <HAL_DMA_Init+0x1bc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d045      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a63      	ldr	r2, [pc, #396]	; (8005370 <HAL_DMA_Init+0x1c0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d040      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a62      	ldr	r2, [pc, #392]	; (8005374 <HAL_DMA_Init+0x1c4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d03b      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a60      	ldr	r2, [pc, #384]	; (8005378 <HAL_DMA_Init+0x1c8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d036      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a5f      	ldr	r2, [pc, #380]	; (800537c <HAL_DMA_Init+0x1cc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d031      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <HAL_DMA_Init+0x1d0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02c      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5c      	ldr	r2, [pc, #368]	; (8005384 <HAL_DMA_Init+0x1d4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d027      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5a      	ldr	r2, [pc, #360]	; (8005388 <HAL_DMA_Init+0x1d8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a59      	ldr	r2, [pc, #356]	; (800538c <HAL_DMA_Init+0x1dc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d01d      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a57      	ldr	r2, [pc, #348]	; (8005390 <HAL_DMA_Init+0x1e0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a56      	ldr	r2, [pc, #344]	; (8005394 <HAL_DMA_Init+0x1e4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a54      	ldr	r2, [pc, #336]	; (8005398 <HAL_DMA_Init+0x1e8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a53      	ldr	r2, [pc, #332]	; (800539c <HAL_DMA_Init+0x1ec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a51      	ldr	r2, [pc, #324]	; (80053a0 <HAL_DMA_Init+0x1f0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_DMA_Init+0xb8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a50      	ldr	r2, [pc, #320]	; (80053a4 <HAL_DMA_Init+0x1f4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_DMA_Init+0xbc>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_DMA_Init+0xbe>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 813b 	beq.w	80054ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a37      	ldr	r2, [pc, #220]	; (8005368 <HAL_DMA_Init+0x1b8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d04a      	beq.n	8005324 <HAL_DMA_Init+0x174>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a36      	ldr	r2, [pc, #216]	; (800536c <HAL_DMA_Init+0x1bc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d045      	beq.n	8005324 <HAL_DMA_Init+0x174>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a34      	ldr	r2, [pc, #208]	; (8005370 <HAL_DMA_Init+0x1c0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d040      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a33      	ldr	r2, [pc, #204]	; (8005374 <HAL_DMA_Init+0x1c4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03b      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a31      	ldr	r2, [pc, #196]	; (8005378 <HAL_DMA_Init+0x1c8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d036      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a30      	ldr	r2, [pc, #192]	; (800537c <HAL_DMA_Init+0x1cc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d031      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2e      	ldr	r2, [pc, #184]	; (8005380 <HAL_DMA_Init+0x1d0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02c      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <HAL_DMA_Init+0x1d4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2b      	ldr	r2, [pc, #172]	; (8005388 <HAL_DMA_Init+0x1d8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2a      	ldr	r2, [pc, #168]	; (800538c <HAL_DMA_Init+0x1dc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a28      	ldr	r2, [pc, #160]	; (8005390 <HAL_DMA_Init+0x1e0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a27      	ldr	r2, [pc, #156]	; (8005394 <HAL_DMA_Init+0x1e4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_DMA_Init+0x174>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a25      	ldr	r2, [pc, #148]	; (8005398 <HAL_DMA_Init+0x1e8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_DMA_Init+0x174>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a24      	ldr	r2, [pc, #144]	; (800539c <HAL_DMA_Init+0x1ec>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_DMA_Init+0x174>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a22      	ldr	r2, [pc, #136]	; (80053a0 <HAL_DMA_Init+0x1f0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_DMA_Init+0x174>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <HAL_DMA_Init+0x1f4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <HAL_DMA_Init+0x186>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e007      	b.n	8005346 <HAL_DMA_Init+0x196>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005346:	e02f      	b.n	80053a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005348:	f7ff fc00 	bl	8004b4c <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b05      	cmp	r3, #5
 8005354:	d928      	bls.n	80053a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2203      	movs	r2, #3
 8005360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e246      	b.n	80057f6 <HAL_DMA_Init+0x646>
 8005368:	40020010 	.word	0x40020010
 800536c:	40020028 	.word	0x40020028
 8005370:	40020040 	.word	0x40020040
 8005374:	40020058 	.word	0x40020058
 8005378:	40020070 	.word	0x40020070
 800537c:	40020088 	.word	0x40020088
 8005380:	400200a0 	.word	0x400200a0
 8005384:	400200b8 	.word	0x400200b8
 8005388:	40020410 	.word	0x40020410
 800538c:	40020428 	.word	0x40020428
 8005390:	40020440 	.word	0x40020440
 8005394:	40020458 	.word	0x40020458
 8005398:	40020470 	.word	0x40020470
 800539c:	40020488 	.word	0x40020488
 80053a0:	400204a0 	.word	0x400204a0
 80053a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1c8      	bne.n	8005348 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4b83      	ldr	r3, [pc, #524]	; (80055d0 <HAL_DMA_Init+0x420>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d107      	bne.n	800540c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	4313      	orrs	r3, r2
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800540c:	4b71      	ldr	r3, [pc, #452]	; (80055d4 <HAL_DMA_Init+0x424>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b71      	ldr	r3, [pc, #452]	; (80055d8 <HAL_DMA_Init+0x428>)
 8005412:	4013      	ands	r3, r2
 8005414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005418:	d328      	bcc.n	800546c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b28      	cmp	r3, #40	; 0x28
 8005420:	d903      	bls.n	800542a <HAL_DMA_Init+0x27a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b2e      	cmp	r3, #46	; 0x2e
 8005428:	d917      	bls.n	800545a <HAL_DMA_Init+0x2aa>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b3e      	cmp	r3, #62	; 0x3e
 8005430:	d903      	bls.n	800543a <HAL_DMA_Init+0x28a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b42      	cmp	r3, #66	; 0x42
 8005438:	d90f      	bls.n	800545a <HAL_DMA_Init+0x2aa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b46      	cmp	r3, #70	; 0x46
 8005440:	d903      	bls.n	800544a <HAL_DMA_Init+0x29a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b48      	cmp	r3, #72	; 0x48
 8005448:	d907      	bls.n	800545a <HAL_DMA_Init+0x2aa>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b4e      	cmp	r3, #78	; 0x4e
 8005450:	d905      	bls.n	800545e <HAL_DMA_Init+0x2ae>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b52      	cmp	r3, #82	; 0x52
 8005458:	d801      	bhi.n	800545e <HAL_DMA_Init+0x2ae>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <HAL_DMA_Init+0x2b0>
 800545e:	2300      	movs	r3, #0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800546a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0307 	bic.w	r3, r3, #7
 8005482:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b04      	cmp	r3, #4
 8005494:	d117      	bne.n	80054c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f002 fb31 	bl	8007b10 <DMA_CheckFifoParam>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2240      	movs	r2, #64	; 0x40
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e197      	b.n	80057f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f002 fa6c 	bl	80079ac <DMA_CalcBaseAndBitshift>
 80054d4:	4603      	mov	r3, r0
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	223f      	movs	r2, #63	; 0x3f
 80054e2:	409a      	lsls	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	e0cd      	b.n	8005686 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3b      	ldr	r2, [pc, #236]	; (80055dc <HAL_DMA_Init+0x42c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d022      	beq.n	800553a <HAL_DMA_Init+0x38a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a39      	ldr	r2, [pc, #228]	; (80055e0 <HAL_DMA_Init+0x430>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01d      	beq.n	800553a <HAL_DMA_Init+0x38a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a38      	ldr	r2, [pc, #224]	; (80055e4 <HAL_DMA_Init+0x434>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d018      	beq.n	800553a <HAL_DMA_Init+0x38a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a36      	ldr	r2, [pc, #216]	; (80055e8 <HAL_DMA_Init+0x438>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <HAL_DMA_Init+0x38a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a35      	ldr	r2, [pc, #212]	; (80055ec <HAL_DMA_Init+0x43c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_DMA_Init+0x38a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a33      	ldr	r2, [pc, #204]	; (80055f0 <HAL_DMA_Init+0x440>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_DMA_Init+0x38a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a32      	ldr	r2, [pc, #200]	; (80055f4 <HAL_DMA_Init+0x444>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_DMA_Init+0x38a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a30      	ldr	r2, [pc, #192]	; (80055f8 <HAL_DMA_Init+0x448>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_DMA_Init+0x38e>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_DMA_Init+0x390>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8097 	beq.w	8005674 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a24      	ldr	r2, [pc, #144]	; (80055dc <HAL_DMA_Init+0x42c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d021      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <HAL_DMA_Init+0x430>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01c      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <HAL_DMA_Init+0x434>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d017      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <HAL_DMA_Init+0x438>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d012      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <HAL_DMA_Init+0x43c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00d      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1c      	ldr	r2, [pc, #112]	; (80055f0 <HAL_DMA_Init+0x440>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d008      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <HAL_DMA_Init+0x444>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <HAL_DMA_Init+0x3e4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <HAL_DMA_Init+0x448>)
 8005592:	4293      	cmp	r3, r2
 8005594:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_DMA_Init+0x44c>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d020      	beq.n	8005600 <HAL_DMA_Init+0x450>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2b80      	cmp	r3, #128	; 0x80
 80055c4:	d102      	bne.n	80055cc <HAL_DMA_Init+0x41c>
 80055c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ca:	e01a      	b.n	8005602 <HAL_DMA_Init+0x452>
 80055cc:	2300      	movs	r3, #0
 80055ce:	e018      	b.n	8005602 <HAL_DMA_Init+0x452>
 80055d0:	fe10803f 	.word	0xfe10803f
 80055d4:	5c001000 	.word	0x5c001000
 80055d8:	ffff0000 	.word	0xffff0000
 80055dc:	58025408 	.word	0x58025408
 80055e0:	5802541c 	.word	0x5802541c
 80055e4:	58025430 	.word	0x58025430
 80055e8:	58025444 	.word	0x58025444
 80055ec:	58025458 	.word	0x58025458
 80055f0:	5802546c 	.word	0x5802546c
 80055f4:	58025480 	.word	0x58025480
 80055f8:	58025494 	.word	0x58025494
 80055fc:	fffe000f 	.word	0xfffe000f
 8005600:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68d2      	ldr	r2, [r2, #12]
 8005606:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005618:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005630:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	4b6e      	ldr	r3, [pc, #440]	; (8005800 <HAL_DMA_Init+0x650>)
 8005648:	4413      	add	r3, r2
 800564a:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_DMA_Init+0x654>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f002 f9a7 	bl	80079ac <DMA_CalcBaseAndBitshift>
 800565e:	4603      	mov	r3, r0
 8005660:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2201      	movs	r2, #1
 800566c:	409a      	lsls	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	e008      	b.n	8005686 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2203      	movs	r2, #3
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0b7      	b.n	80057f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a5f      	ldr	r2, [pc, #380]	; (8005808 <HAL_DMA_Init+0x658>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d072      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5d      	ldr	r2, [pc, #372]	; (800580c <HAL_DMA_Init+0x65c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d06d      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a5c      	ldr	r2, [pc, #368]	; (8005810 <HAL_DMA_Init+0x660>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d068      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a5a      	ldr	r2, [pc, #360]	; (8005814 <HAL_DMA_Init+0x664>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d063      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a59      	ldr	r2, [pc, #356]	; (8005818 <HAL_DMA_Init+0x668>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d05e      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a57      	ldr	r2, [pc, #348]	; (800581c <HAL_DMA_Init+0x66c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d059      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a56      	ldr	r2, [pc, #344]	; (8005820 <HAL_DMA_Init+0x670>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d054      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a54      	ldr	r2, [pc, #336]	; (8005824 <HAL_DMA_Init+0x674>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d04f      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a53      	ldr	r2, [pc, #332]	; (8005828 <HAL_DMA_Init+0x678>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04a      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a51      	ldr	r2, [pc, #324]	; (800582c <HAL_DMA_Init+0x67c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d045      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a50      	ldr	r2, [pc, #320]	; (8005830 <HAL_DMA_Init+0x680>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4e      	ldr	r2, [pc, #312]	; (8005834 <HAL_DMA_Init+0x684>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d03b      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4d      	ldr	r2, [pc, #308]	; (8005838 <HAL_DMA_Init+0x688>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d036      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4b      	ldr	r2, [pc, #300]	; (800583c <HAL_DMA_Init+0x68c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d031      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a4a      	ldr	r2, [pc, #296]	; (8005840 <HAL_DMA_Init+0x690>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d02c      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a48      	ldr	r2, [pc, #288]	; (8005844 <HAL_DMA_Init+0x694>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d027      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a47      	ldr	r2, [pc, #284]	; (8005848 <HAL_DMA_Init+0x698>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d022      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a45      	ldr	r2, [pc, #276]	; (800584c <HAL_DMA_Init+0x69c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a44      	ldr	r2, [pc, #272]	; (8005850 <HAL_DMA_Init+0x6a0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a42      	ldr	r2, [pc, #264]	; (8005854 <HAL_DMA_Init+0x6a4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a41      	ldr	r2, [pc, #260]	; (8005858 <HAL_DMA_Init+0x6a8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3f      	ldr	r2, [pc, #252]	; (800585c <HAL_DMA_Init+0x6ac>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a3e      	ldr	r2, [pc, #248]	; (8005860 <HAL_DMA_Init+0x6b0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_DMA_Init+0x5c6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a3c      	ldr	r2, [pc, #240]	; (8005864 <HAL_DMA_Init+0x6b4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_DMA_Init+0x5ca>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_DMA_Init+0x5cc>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d032      	beq.n	80057e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f002 fa41 	bl	8007c08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d102      	bne.n	8005794 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_DMA_Init+0x624>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d80c      	bhi.n	80057d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f002 fabe 	bl	8007d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e008      	b.n	80057e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	a7fdabf8 	.word	0xa7fdabf8
 8005804:	cccccccd 	.word	0xcccccccd
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494

08005868 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e226      	b.n	8005cd2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_DMA_Start_IT+0x2a>
 800588e:	2302      	movs	r3, #2
 8005890:	e21f      	b.n	8005cd2 <HAL_DMA_Start_IT+0x46a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	f040 820a 	bne.w	8005cbc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a68      	ldr	r2, [pc, #416]	; (8005a5c <HAL_DMA_Start_IT+0x1f4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d04a      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a66      	ldr	r2, [pc, #408]	; (8005a60 <HAL_DMA_Start_IT+0x1f8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d045      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a65      	ldr	r2, [pc, #404]	; (8005a64 <HAL_DMA_Start_IT+0x1fc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d040      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a63      	ldr	r2, [pc, #396]	; (8005a68 <HAL_DMA_Start_IT+0x200>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d03b      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a62      	ldr	r2, [pc, #392]	; (8005a6c <HAL_DMA_Start_IT+0x204>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d036      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a60      	ldr	r2, [pc, #384]	; (8005a70 <HAL_DMA_Start_IT+0x208>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d031      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5f      	ldr	r2, [pc, #380]	; (8005a74 <HAL_DMA_Start_IT+0x20c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d02c      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5d      	ldr	r2, [pc, #372]	; (8005a78 <HAL_DMA_Start_IT+0x210>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d027      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a5c      	ldr	r2, [pc, #368]	; (8005a7c <HAL_DMA_Start_IT+0x214>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d022      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a5a      	ldr	r2, [pc, #360]	; (8005a80 <HAL_DMA_Start_IT+0x218>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01d      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a59      	ldr	r2, [pc, #356]	; (8005a84 <HAL_DMA_Start_IT+0x21c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d018      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a57      	ldr	r2, [pc, #348]	; (8005a88 <HAL_DMA_Start_IT+0x220>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a56      	ldr	r2, [pc, #344]	; (8005a8c <HAL_DMA_Start_IT+0x224>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <HAL_DMA_Start_IT+0x228>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a53      	ldr	r2, [pc, #332]	; (8005a94 <HAL_DMA_Start_IT+0x22c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_DMA_Start_IT+0xee>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a51      	ldr	r2, [pc, #324]	; (8005a98 <HAL_DMA_Start_IT+0x230>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d108      	bne.n	8005968 <HAL_DMA_Start_IT+0x100>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e007      	b.n	8005978 <HAL_DMA_Start_IT+0x110>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f001 fe68 	bl	8007654 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a34      	ldr	r2, [pc, #208]	; (8005a5c <HAL_DMA_Start_IT+0x1f4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d04a      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a33      	ldr	r2, [pc, #204]	; (8005a60 <HAL_DMA_Start_IT+0x1f8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d045      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a31      	ldr	r2, [pc, #196]	; (8005a64 <HAL_DMA_Start_IT+0x1fc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d040      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a30      	ldr	r2, [pc, #192]	; (8005a68 <HAL_DMA_Start_IT+0x200>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d03b      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a2e      	ldr	r2, [pc, #184]	; (8005a6c <HAL_DMA_Start_IT+0x204>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d036      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <HAL_DMA_Start_IT+0x208>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d031      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <HAL_DMA_Start_IT+0x20c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02c      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2a      	ldr	r2, [pc, #168]	; (8005a78 <HAL_DMA_Start_IT+0x210>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d027      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <HAL_DMA_Start_IT+0x214>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d022      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <HAL_DMA_Start_IT+0x218>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <HAL_DMA_Start_IT+0x21c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d018      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <HAL_DMA_Start_IT+0x220>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <HAL_DMA_Start_IT+0x224>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_DMA_Start_IT+0x228>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	; (8005a94 <HAL_DMA_Start_IT+0x22c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_DMA_Start_IT+0x1bc>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <HAL_DMA_Start_IT+0x230>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d101      	bne.n	8005a28 <HAL_DMA_Start_IT+0x1c0>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_DMA_Start_IT+0x1c2>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d036      	beq.n	8005a9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f023 021e 	bic.w	r2, r3, #30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0216 	orr.w	r2, r2, #22
 8005a40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d03e      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e035      	b.n	8005ac8 <HAL_DMA_Start_IT+0x260>
 8005a5c:	40020010 	.word	0x40020010
 8005a60:	40020028 	.word	0x40020028
 8005a64:	40020040 	.word	0x40020040
 8005a68:	40020058 	.word	0x40020058
 8005a6c:	40020070 	.word	0x40020070
 8005a70:	40020088 	.word	0x40020088
 8005a74:	400200a0 	.word	0x400200a0
 8005a78:	400200b8 	.word	0x400200b8
 8005a7c:	40020410 	.word	0x40020410
 8005a80:	40020428 	.word	0x40020428
 8005a84:	40020440 	.word	0x40020440
 8005a88:	40020458 	.word	0x40020458
 8005a8c:	40020470 	.word	0x40020470
 8005a90:	40020488 	.word	0x40020488
 8005a94:	400204a0 	.word	0x400204a0
 8005a98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 020e 	bic.w	r2, r3, #14
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 020a 	orr.w	r2, r2, #10
 8005aae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0204 	orr.w	r2, r2, #4
 8005ac6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a83      	ldr	r2, [pc, #524]	; (8005cdc <HAL_DMA_Start_IT+0x474>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d072      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a82      	ldr	r2, [pc, #520]	; (8005ce0 <HAL_DMA_Start_IT+0x478>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d06d      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a80      	ldr	r2, [pc, #512]	; (8005ce4 <HAL_DMA_Start_IT+0x47c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d068      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7f      	ldr	r2, [pc, #508]	; (8005ce8 <HAL_DMA_Start_IT+0x480>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d063      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7d      	ldr	r2, [pc, #500]	; (8005cec <HAL_DMA_Start_IT+0x484>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d05e      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7c      	ldr	r2, [pc, #496]	; (8005cf0 <HAL_DMA_Start_IT+0x488>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d059      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7a      	ldr	r2, [pc, #488]	; (8005cf4 <HAL_DMA_Start_IT+0x48c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d054      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a79      	ldr	r2, [pc, #484]	; (8005cf8 <HAL_DMA_Start_IT+0x490>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d04f      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a77      	ldr	r2, [pc, #476]	; (8005cfc <HAL_DMA_Start_IT+0x494>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04a      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a76      	ldr	r2, [pc, #472]	; (8005d00 <HAL_DMA_Start_IT+0x498>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d045      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a74      	ldr	r2, [pc, #464]	; (8005d04 <HAL_DMA_Start_IT+0x49c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d040      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	; (8005d08 <HAL_DMA_Start_IT+0x4a0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d03b      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a71      	ldr	r2, [pc, #452]	; (8005d0c <HAL_DMA_Start_IT+0x4a4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d036      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a70      	ldr	r2, [pc, #448]	; (8005d10 <HAL_DMA_Start_IT+0x4a8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d031      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6e      	ldr	r2, [pc, #440]	; (8005d14 <HAL_DMA_Start_IT+0x4ac>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a6d      	ldr	r2, [pc, #436]	; (8005d18 <HAL_DMA_Start_IT+0x4b0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d027      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a6b      	ldr	r2, [pc, #428]	; (8005d1c <HAL_DMA_Start_IT+0x4b4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a6a      	ldr	r2, [pc, #424]	; (8005d20 <HAL_DMA_Start_IT+0x4b8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a68      	ldr	r2, [pc, #416]	; (8005d24 <HAL_DMA_Start_IT+0x4bc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a67      	ldr	r2, [pc, #412]	; (8005d28 <HAL_DMA_Start_IT+0x4c0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a65      	ldr	r2, [pc, #404]	; (8005d2c <HAL_DMA_Start_IT+0x4c4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a64      	ldr	r2, [pc, #400]	; (8005d30 <HAL_DMA_Start_IT+0x4c8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a62      	ldr	r2, [pc, #392]	; (8005d34 <HAL_DMA_Start_IT+0x4cc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x350>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a61      	ldr	r2, [pc, #388]	; (8005d38 <HAL_DMA_Start_IT+0x4d0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_Start_IT+0x354>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <HAL_DMA_Start_IT+0x356>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01a      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a37      	ldr	r2, [pc, #220]	; (8005cdc <HAL_DMA_Start_IT+0x474>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d04a      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a36      	ldr	r2, [pc, #216]	; (8005ce0 <HAL_DMA_Start_IT+0x478>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d045      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a34      	ldr	r2, [pc, #208]	; (8005ce4 <HAL_DMA_Start_IT+0x47c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d040      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a33      	ldr	r2, [pc, #204]	; (8005ce8 <HAL_DMA_Start_IT+0x480>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d03b      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a31      	ldr	r2, [pc, #196]	; (8005cec <HAL_DMA_Start_IT+0x484>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d036      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <HAL_DMA_Start_IT+0x488>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d031      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2e      	ldr	r2, [pc, #184]	; (8005cf4 <HAL_DMA_Start_IT+0x48c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02c      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2d      	ldr	r2, [pc, #180]	; (8005cf8 <HAL_DMA_Start_IT+0x490>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d027      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2b      	ldr	r2, [pc, #172]	; (8005cfc <HAL_DMA_Start_IT+0x494>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d022      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <HAL_DMA_Start_IT+0x498>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d01d      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <HAL_DMA_Start_IT+0x49c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d018      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a27      	ldr	r2, [pc, #156]	; (8005d08 <HAL_DMA_Start_IT+0x4a0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a25      	ldr	r2, [pc, #148]	; (8005d0c <HAL_DMA_Start_IT+0x4a4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a24      	ldr	r2, [pc, #144]	; (8005d10 <HAL_DMA_Start_IT+0x4a8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d009      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a22      	ldr	r2, [pc, #136]	; (8005d14 <HAL_DMA_Start_IT+0x4ac>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_DMA_Start_IT+0x430>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <HAL_DMA_Start_IT+0x4b0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <HAL_DMA_Start_IT+0x442>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e012      	b.n	8005cd0 <HAL_DMA_Start_IT+0x468>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e009      	b.n	8005cd0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	58025408 	.word	0x58025408
 8005d20:	5802541c 	.word	0x5802541c
 8005d24:	58025430 	.word	0x58025430
 8005d28:	58025444 	.word	0x58025444
 8005d2c:	58025458 	.word	0x58025458
 8005d30:	5802546c 	.word	0x5802546c
 8005d34:	58025480 	.word	0x58025480
 8005d38:	58025494 	.word	0x58025494

08005d3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7fe ff02 	bl	8004b4c <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e2dc      	b.n	800630e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d008      	beq.n	8005d72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2280      	movs	r2, #128	; 0x80
 8005d64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e2cd      	b.n	800630e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a76      	ldr	r2, [pc, #472]	; (8005f50 <HAL_DMA_Abort+0x214>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d04a      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a74      	ldr	r2, [pc, #464]	; (8005f54 <HAL_DMA_Abort+0x218>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d045      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a73      	ldr	r2, [pc, #460]	; (8005f58 <HAL_DMA_Abort+0x21c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d040      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a71      	ldr	r2, [pc, #452]	; (8005f5c <HAL_DMA_Abort+0x220>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d03b      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a70      	ldr	r2, [pc, #448]	; (8005f60 <HAL_DMA_Abort+0x224>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d036      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a6e      	ldr	r2, [pc, #440]	; (8005f64 <HAL_DMA_Abort+0x228>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d031      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6d      	ldr	r2, [pc, #436]	; (8005f68 <HAL_DMA_Abort+0x22c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d02c      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a6b      	ldr	r2, [pc, #428]	; (8005f6c <HAL_DMA_Abort+0x230>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d027      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6a      	ldr	r2, [pc, #424]	; (8005f70 <HAL_DMA_Abort+0x234>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a68      	ldr	r2, [pc, #416]	; (8005f74 <HAL_DMA_Abort+0x238>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01d      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a67      	ldr	r2, [pc, #412]	; (8005f78 <HAL_DMA_Abort+0x23c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a65      	ldr	r2, [pc, #404]	; (8005f7c <HAL_DMA_Abort+0x240>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a64      	ldr	r2, [pc, #400]	; (8005f80 <HAL_DMA_Abort+0x244>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a62      	ldr	r2, [pc, #392]	; (8005f84 <HAL_DMA_Abort+0x248>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a61      	ldr	r2, [pc, #388]	; (8005f88 <HAL_DMA_Abort+0x24c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_DMA_Abort+0xd6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a5f      	ldr	r2, [pc, #380]	; (8005f8c <HAL_DMA_Abort+0x250>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d101      	bne.n	8005e16 <HAL_DMA_Abort+0xda>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <HAL_DMA_Abort+0xdc>
 8005e16:	2300      	movs	r3, #0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d013      	beq.n	8005e44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 021e 	bic.w	r2, r2, #30
 8005e2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e00a      	b.n	8005e5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 020e 	bic.w	r2, r2, #14
 8005e52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a3c      	ldr	r2, [pc, #240]	; (8005f50 <HAL_DMA_Abort+0x214>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d072      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a3a      	ldr	r2, [pc, #232]	; (8005f54 <HAL_DMA_Abort+0x218>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d06d      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a39      	ldr	r2, [pc, #228]	; (8005f58 <HAL_DMA_Abort+0x21c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d068      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a37      	ldr	r2, [pc, #220]	; (8005f5c <HAL_DMA_Abort+0x220>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d063      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a36      	ldr	r2, [pc, #216]	; (8005f60 <HAL_DMA_Abort+0x224>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d05e      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <HAL_DMA_Abort+0x228>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d059      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <HAL_DMA_Abort+0x22c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d054      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <HAL_DMA_Abort+0x230>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d04f      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a30      	ldr	r2, [pc, #192]	; (8005f70 <HAL_DMA_Abort+0x234>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d04a      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <HAL_DMA_Abort+0x238>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d045      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a2d      	ldr	r2, [pc, #180]	; (8005f78 <HAL_DMA_Abort+0x23c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d040      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <HAL_DMA_Abort+0x240>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d03b      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <HAL_DMA_Abort+0x244>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d036      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <HAL_DMA_Abort+0x248>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d031      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <HAL_DMA_Abort+0x24c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d02c      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <HAL_DMA_Abort+0x250>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d027      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a24      	ldr	r2, [pc, #144]	; (8005f90 <HAL_DMA_Abort+0x254>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d022      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <HAL_DMA_Abort+0x258>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01d      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <HAL_DMA_Abort+0x25c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d018      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <HAL_DMA_Abort+0x260>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_DMA_Abort+0x264>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00e      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <HAL_DMA_Abort+0x268>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_DMA_Abort+0x26c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_DMA_Abort+0x20e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a19      	ldr	r2, [pc, #100]	; (8005fac <HAL_DMA_Abort+0x270>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d132      	bne.n	8005fb0 <HAL_DMA_Abort+0x274>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e031      	b.n	8005fb2 <HAL_DMA_Abort+0x276>
 8005f4e:	bf00      	nop
 8005f50:	40020010 	.word	0x40020010
 8005f54:	40020028 	.word	0x40020028
 8005f58:	40020040 	.word	0x40020040
 8005f5c:	40020058 	.word	0x40020058
 8005f60:	40020070 	.word	0x40020070
 8005f64:	40020088 	.word	0x40020088
 8005f68:	400200a0 	.word	0x400200a0
 8005f6c:	400200b8 	.word	0x400200b8
 8005f70:	40020410 	.word	0x40020410
 8005f74:	40020428 	.word	0x40020428
 8005f78:	40020440 	.word	0x40020440
 8005f7c:	40020458 	.word	0x40020458
 8005f80:	40020470 	.word	0x40020470
 8005f84:	40020488 	.word	0x40020488
 8005f88:	400204a0 	.word	0x400204a0
 8005f8c:	400204b8 	.word	0x400204b8
 8005f90:	58025408 	.word	0x58025408
 8005f94:	5802541c 	.word	0x5802541c
 8005f98:	58025430 	.word	0x58025430
 8005f9c:	58025444 	.word	0x58025444
 8005fa0:	58025458 	.word	0x58025458
 8005fa4:	5802546c 	.word	0x5802546c
 8005fa8:	58025480 	.word	0x58025480
 8005fac:	58025494 	.word	0x58025494
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a6d      	ldr	r2, [pc, #436]	; (8006180 <HAL_DMA_Abort+0x444>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d04a      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a6b      	ldr	r2, [pc, #428]	; (8006184 <HAL_DMA_Abort+0x448>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d045      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6a      	ldr	r2, [pc, #424]	; (8006188 <HAL_DMA_Abort+0x44c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d040      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a68      	ldr	r2, [pc, #416]	; (800618c <HAL_DMA_Abort+0x450>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d03b      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a67      	ldr	r2, [pc, #412]	; (8006190 <HAL_DMA_Abort+0x454>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d036      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a65      	ldr	r2, [pc, #404]	; (8006194 <HAL_DMA_Abort+0x458>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d031      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a64      	ldr	r2, [pc, #400]	; (8006198 <HAL_DMA_Abort+0x45c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d02c      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a62      	ldr	r2, [pc, #392]	; (800619c <HAL_DMA_Abort+0x460>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d027      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a61      	ldr	r2, [pc, #388]	; (80061a0 <HAL_DMA_Abort+0x464>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d022      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a5f      	ldr	r2, [pc, #380]	; (80061a4 <HAL_DMA_Abort+0x468>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a5e      	ldr	r2, [pc, #376]	; (80061a8 <HAL_DMA_Abort+0x46c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a5c      	ldr	r2, [pc, #368]	; (80061ac <HAL_DMA_Abort+0x470>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5b      	ldr	r2, [pc, #364]	; (80061b0 <HAL_DMA_Abort+0x474>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <HAL_DMA_Abort+0x478>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a58      	ldr	r2, [pc, #352]	; (80061b8 <HAL_DMA_Abort+0x47c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_DMA_Abort+0x32a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a56      	ldr	r2, [pc, #344]	; (80061bc <HAL_DMA_Abort+0x480>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d108      	bne.n	8006078 <HAL_DMA_Abort+0x33c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e007      	b.n	8006088 <HAL_DMA_Abort+0x34c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006088:	e013      	b.n	80060b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800608a:	f7fe fd5f 	bl	8004b4c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b05      	cmp	r3, #5
 8006096:	d90c      	bls.n	80060b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e12d      	b.n	800630e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <HAL_DMA_Abort+0x444>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_Abort+0x422>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <HAL_DMA_Abort+0x448>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_Abort+0x422>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2c      	ldr	r2, [pc, #176]	; (8006188 <HAL_DMA_Abort+0x44c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_Abort+0x422>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2a      	ldr	r2, [pc, #168]	; (800618c <HAL_DMA_Abort+0x450>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_Abort+0x422>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a29      	ldr	r2, [pc, #164]	; (8006190 <HAL_DMA_Abort+0x454>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_Abort+0x422>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <HAL_DMA_Abort+0x458>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_Abort+0x422>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a26      	ldr	r2, [pc, #152]	; (8006198 <HAL_DMA_Abort+0x45c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_Abort+0x422>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a24      	ldr	r2, [pc, #144]	; (800619c <HAL_DMA_Abort+0x460>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_Abort+0x422>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <HAL_DMA_Abort+0x464>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_Abort+0x422>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a21      	ldr	r2, [pc, #132]	; (80061a4 <HAL_DMA_Abort+0x468>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_Abort+0x422>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a20      	ldr	r2, [pc, #128]	; (80061a8 <HAL_DMA_Abort+0x46c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_Abort+0x422>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <HAL_DMA_Abort+0x470>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_Abort+0x422>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <HAL_DMA_Abort+0x474>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_Abort+0x422>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <HAL_DMA_Abort+0x478>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_Abort+0x422>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1a      	ldr	r2, [pc, #104]	; (80061b8 <HAL_DMA_Abort+0x47c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_Abort+0x422>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a18      	ldr	r2, [pc, #96]	; (80061bc <HAL_DMA_Abort+0x480>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <HAL_DMA_Abort+0x426>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <HAL_DMA_Abort+0x428>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d02b      	beq.n	80061c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	223f      	movs	r2, #63	; 0x3f
 8006178:	409a      	lsls	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	e02a      	b.n	80061d6 <HAL_DMA_Abort+0x49a>
 8006180:	40020010 	.word	0x40020010
 8006184:	40020028 	.word	0x40020028
 8006188:	40020040 	.word	0x40020040
 800618c:	40020058 	.word	0x40020058
 8006190:	40020070 	.word	0x40020070
 8006194:	40020088 	.word	0x40020088
 8006198:	400200a0 	.word	0x400200a0
 800619c:	400200b8 	.word	0x400200b8
 80061a0:	40020410 	.word	0x40020410
 80061a4:	40020428 	.word	0x40020428
 80061a8:	40020440 	.word	0x40020440
 80061ac:	40020458 	.word	0x40020458
 80061b0:	40020470 	.word	0x40020470
 80061b4:	40020488 	.word	0x40020488
 80061b8:	400204a0 	.word	0x400204a0
 80061bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2201      	movs	r2, #1
 80061d0:	409a      	lsls	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a4f      	ldr	r2, [pc, #316]	; (8006318 <HAL_DMA_Abort+0x5dc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d072      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a4d      	ldr	r2, [pc, #308]	; (800631c <HAL_DMA_Abort+0x5e0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d06d      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a4c      	ldr	r2, [pc, #304]	; (8006320 <HAL_DMA_Abort+0x5e4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d068      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a4a      	ldr	r2, [pc, #296]	; (8006324 <HAL_DMA_Abort+0x5e8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d063      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a49      	ldr	r2, [pc, #292]	; (8006328 <HAL_DMA_Abort+0x5ec>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d05e      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a47      	ldr	r2, [pc, #284]	; (800632c <HAL_DMA_Abort+0x5f0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d059      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a46      	ldr	r2, [pc, #280]	; (8006330 <HAL_DMA_Abort+0x5f4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d054      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a44      	ldr	r2, [pc, #272]	; (8006334 <HAL_DMA_Abort+0x5f8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d04f      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a43      	ldr	r2, [pc, #268]	; (8006338 <HAL_DMA_Abort+0x5fc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d04a      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a41      	ldr	r2, [pc, #260]	; (800633c <HAL_DMA_Abort+0x600>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d045      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a40      	ldr	r2, [pc, #256]	; (8006340 <HAL_DMA_Abort+0x604>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d040      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3e      	ldr	r2, [pc, #248]	; (8006344 <HAL_DMA_Abort+0x608>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d03b      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a3d      	ldr	r2, [pc, #244]	; (8006348 <HAL_DMA_Abort+0x60c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d036      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3b      	ldr	r2, [pc, #236]	; (800634c <HAL_DMA_Abort+0x610>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d031      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a3a      	ldr	r2, [pc, #232]	; (8006350 <HAL_DMA_Abort+0x614>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d02c      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a38      	ldr	r2, [pc, #224]	; (8006354 <HAL_DMA_Abort+0x618>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d027      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a37      	ldr	r2, [pc, #220]	; (8006358 <HAL_DMA_Abort+0x61c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a35      	ldr	r2, [pc, #212]	; (800635c <HAL_DMA_Abort+0x620>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01d      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a34      	ldr	r2, [pc, #208]	; (8006360 <HAL_DMA_Abort+0x624>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a32      	ldr	r2, [pc, #200]	; (8006364 <HAL_DMA_Abort+0x628>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a31      	ldr	r2, [pc, #196]	; (8006368 <HAL_DMA_Abort+0x62c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2f      	ldr	r2, [pc, #188]	; (800636c <HAL_DMA_Abort+0x630>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2e      	ldr	r2, [pc, #184]	; (8006370 <HAL_DMA_Abort+0x634>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_DMA_Abort+0x58a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <HAL_DMA_Abort+0x638>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d101      	bne.n	80062ca <HAL_DMA_Abort+0x58e>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <HAL_DMA_Abort+0x590>
 80062ca:	2300      	movs	r3, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d015      	beq.n	80062fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40020010 	.word	0x40020010
 800631c:	40020028 	.word	0x40020028
 8006320:	40020040 	.word	0x40020040
 8006324:	40020058 	.word	0x40020058
 8006328:	40020070 	.word	0x40020070
 800632c:	40020088 	.word	0x40020088
 8006330:	400200a0 	.word	0x400200a0
 8006334:	400200b8 	.word	0x400200b8
 8006338:	40020410 	.word	0x40020410
 800633c:	40020428 	.word	0x40020428
 8006340:	40020440 	.word	0x40020440
 8006344:	40020458 	.word	0x40020458
 8006348:	40020470 	.word	0x40020470
 800634c:	40020488 	.word	0x40020488
 8006350:	400204a0 	.word	0x400204a0
 8006354:	400204b8 	.word	0x400204b8
 8006358:	58025408 	.word	0x58025408
 800635c:	5802541c 	.word	0x5802541c
 8006360:	58025430 	.word	0x58025430
 8006364:	58025444 	.word	0x58025444
 8006368:	58025458 	.word	0x58025458
 800636c:	5802546c 	.word	0x5802546c
 8006370:	58025480 	.word	0x58025480
 8006374:	58025494 	.word	0x58025494

08006378 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e205      	b.n	8006796 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d004      	beq.n	80063a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2280      	movs	r2, #128	; 0x80
 800639a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e1fa      	b.n	8006796 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a8c      	ldr	r2, [pc, #560]	; (80065d8 <HAL_DMA_Abort_IT+0x260>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a8b      	ldr	r2, [pc, #556]	; (80065dc <HAL_DMA_Abort_IT+0x264>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a89      	ldr	r2, [pc, #548]	; (80065e0 <HAL_DMA_Abort_IT+0x268>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a88      	ldr	r2, [pc, #544]	; (80065e4 <HAL_DMA_Abort_IT+0x26c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a86      	ldr	r2, [pc, #536]	; (80065e8 <HAL_DMA_Abort_IT+0x270>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a85      	ldr	r2, [pc, #532]	; (80065ec <HAL_DMA_Abort_IT+0x274>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a83      	ldr	r2, [pc, #524]	; (80065f0 <HAL_DMA_Abort_IT+0x278>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a82      	ldr	r2, [pc, #520]	; (80065f4 <HAL_DMA_Abort_IT+0x27c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a80      	ldr	r2, [pc, #512]	; (80065f8 <HAL_DMA_Abort_IT+0x280>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a7f      	ldr	r2, [pc, #508]	; (80065fc <HAL_DMA_Abort_IT+0x284>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a7d      	ldr	r2, [pc, #500]	; (8006600 <HAL_DMA_Abort_IT+0x288>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7c      	ldr	r2, [pc, #496]	; (8006604 <HAL_DMA_Abort_IT+0x28c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a7a      	ldr	r2, [pc, #488]	; (8006608 <HAL_DMA_Abort_IT+0x290>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a79      	ldr	r2, [pc, #484]	; (800660c <HAL_DMA_Abort_IT+0x294>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a77      	ldr	r2, [pc, #476]	; (8006610 <HAL_DMA_Abort_IT+0x298>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_Abort_IT+0xc8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a76      	ldr	r2, [pc, #472]	; (8006614 <HAL_DMA_Abort_IT+0x29c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d101      	bne.n	8006444 <HAL_DMA_Abort_IT+0xcc>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <HAL_DMA_Abort_IT+0xce>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d065      	beq.n	8006516 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2204      	movs	r2, #4
 800644e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a60      	ldr	r2, [pc, #384]	; (80065d8 <HAL_DMA_Abort_IT+0x260>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d04a      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5e      	ldr	r2, [pc, #376]	; (80065dc <HAL_DMA_Abort_IT+0x264>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d045      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a5d      	ldr	r2, [pc, #372]	; (80065e0 <HAL_DMA_Abort_IT+0x268>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d040      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_DMA_Abort_IT+0x26c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d03b      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5a      	ldr	r2, [pc, #360]	; (80065e8 <HAL_DMA_Abort_IT+0x270>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d036      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a58      	ldr	r2, [pc, #352]	; (80065ec <HAL_DMA_Abort_IT+0x274>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d031      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a57      	ldr	r2, [pc, #348]	; (80065f0 <HAL_DMA_Abort_IT+0x278>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d02c      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a55      	ldr	r2, [pc, #340]	; (80065f4 <HAL_DMA_Abort_IT+0x27c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d027      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a54      	ldr	r2, [pc, #336]	; (80065f8 <HAL_DMA_Abort_IT+0x280>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a52      	ldr	r2, [pc, #328]	; (80065fc <HAL_DMA_Abort_IT+0x284>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a51      	ldr	r2, [pc, #324]	; (8006600 <HAL_DMA_Abort_IT+0x288>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a4f      	ldr	r2, [pc, #316]	; (8006604 <HAL_DMA_Abort_IT+0x28c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a4e      	ldr	r2, [pc, #312]	; (8006608 <HAL_DMA_Abort_IT+0x290>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a4c      	ldr	r2, [pc, #304]	; (800660c <HAL_DMA_Abort_IT+0x294>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a4b      	ldr	r2, [pc, #300]	; (8006610 <HAL_DMA_Abort_IT+0x298>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x17a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a49      	ldr	r2, [pc, #292]	; (8006614 <HAL_DMA_Abort_IT+0x29c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d108      	bne.n	8006504 <HAL_DMA_Abort_IT+0x18c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e147      	b.n	8006794 <HAL_DMA_Abort_IT+0x41c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e13e      	b.n	8006794 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 020e 	bic.w	r2, r2, #14
 8006524:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <HAL_DMA_Abort_IT+0x260>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d04a      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a29      	ldr	r2, [pc, #164]	; (80065dc <HAL_DMA_Abort_IT+0x264>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d045      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a28      	ldr	r2, [pc, #160]	; (80065e0 <HAL_DMA_Abort_IT+0x268>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d040      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_DMA_Abort_IT+0x26c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d03b      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <HAL_DMA_Abort_IT+0x270>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d036      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_DMA_Abort_IT+0x274>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d031      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <HAL_DMA_Abort_IT+0x278>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d02c      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_DMA_Abort_IT+0x27c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d027      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <HAL_DMA_Abort_IT+0x280>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d022      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_DMA_Abort_IT+0x284>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01d      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <HAL_DMA_Abort_IT+0x288>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d018      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <HAL_DMA_Abort_IT+0x28c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a19      	ldr	r2, [pc, #100]	; (8006608 <HAL_DMA_Abort_IT+0x290>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a17      	ldr	r2, [pc, #92]	; (800660c <HAL_DMA_Abort_IT+0x294>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d009      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a16      	ldr	r2, [pc, #88]	; (8006610 <HAL_DMA_Abort_IT+0x298>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_DMA_Abort_IT+0x24e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a14      	ldr	r2, [pc, #80]	; (8006614 <HAL_DMA_Abort_IT+0x29c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d128      	bne.n	8006618 <HAL_DMA_Abort_IT+0x2a0>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e027      	b.n	8006628 <HAL_DMA_Abort_IT+0x2b0>
 80065d8:	40020010 	.word	0x40020010
 80065dc:	40020028 	.word	0x40020028
 80065e0:	40020040 	.word	0x40020040
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020070 	.word	0x40020070
 80065ec:	40020088 	.word	0x40020088
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	400200b8 	.word	0x400200b8
 80065f8:	40020410 	.word	0x40020410
 80065fc:	40020428 	.word	0x40020428
 8006600:	40020440 	.word	0x40020440
 8006604:	40020458 	.word	0x40020458
 8006608:	40020470 	.word	0x40020470
 800660c:	40020488 	.word	0x40020488
 8006610:	400204a0 	.word	0x400204a0
 8006614:	400204b8 	.word	0x400204b8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5c      	ldr	r2, [pc, #368]	; (80067a0 <HAL_DMA_Abort_IT+0x428>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d072      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a5b      	ldr	r2, [pc, #364]	; (80067a4 <HAL_DMA_Abort_IT+0x42c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d06d      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a59      	ldr	r2, [pc, #356]	; (80067a8 <HAL_DMA_Abort_IT+0x430>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d068      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a58      	ldr	r2, [pc, #352]	; (80067ac <HAL_DMA_Abort_IT+0x434>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d063      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a56      	ldr	r2, [pc, #344]	; (80067b0 <HAL_DMA_Abort_IT+0x438>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d05e      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a55      	ldr	r2, [pc, #340]	; (80067b4 <HAL_DMA_Abort_IT+0x43c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d059      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a53      	ldr	r2, [pc, #332]	; (80067b8 <HAL_DMA_Abort_IT+0x440>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d054      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a52      	ldr	r2, [pc, #328]	; (80067bc <HAL_DMA_Abort_IT+0x444>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04f      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a50      	ldr	r2, [pc, #320]	; (80067c0 <HAL_DMA_Abort_IT+0x448>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04a      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a4f      	ldr	r2, [pc, #316]	; (80067c4 <HAL_DMA_Abort_IT+0x44c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d045      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a4d      	ldr	r2, [pc, #308]	; (80067c8 <HAL_DMA_Abort_IT+0x450>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d040      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a4c      	ldr	r2, [pc, #304]	; (80067cc <HAL_DMA_Abort_IT+0x454>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d03b      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a4a      	ldr	r2, [pc, #296]	; (80067d0 <HAL_DMA_Abort_IT+0x458>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d036      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a49      	ldr	r2, [pc, #292]	; (80067d4 <HAL_DMA_Abort_IT+0x45c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d031      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a47      	ldr	r2, [pc, #284]	; (80067d8 <HAL_DMA_Abort_IT+0x460>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02c      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a46      	ldr	r2, [pc, #280]	; (80067dc <HAL_DMA_Abort_IT+0x464>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d027      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a44      	ldr	r2, [pc, #272]	; (80067e0 <HAL_DMA_Abort_IT+0x468>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d022      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a43      	ldr	r2, [pc, #268]	; (80067e4 <HAL_DMA_Abort_IT+0x46c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a41      	ldr	r2, [pc, #260]	; (80067e8 <HAL_DMA_Abort_IT+0x470>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a40      	ldr	r2, [pc, #256]	; (80067ec <HAL_DMA_Abort_IT+0x474>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d013      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a3e      	ldr	r2, [pc, #248]	; (80067f0 <HAL_DMA_Abort_IT+0x478>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a3d      	ldr	r2, [pc, #244]	; (80067f4 <HAL_DMA_Abort_IT+0x47c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3b      	ldr	r2, [pc, #236]	; (80067f8 <HAL_DMA_Abort_IT+0x480>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_DMA_Abort_IT+0x3a0>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a3a      	ldr	r2, [pc, #232]	; (80067fc <HAL_DMA_Abort_IT+0x484>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d101      	bne.n	800671c <HAL_DMA_Abort_IT+0x3a4>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <HAL_DMA_Abort_IT+0x3a6>
 800671c:	2300      	movs	r3, #0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d028      	beq.n	8006774 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006730:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006736:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	2201      	movs	r2, #1
 8006742:	409a      	lsls	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006750:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006768:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006772:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40020010 	.word	0x40020010
 80067a4:	40020028 	.word	0x40020028
 80067a8:	40020040 	.word	0x40020040
 80067ac:	40020058 	.word	0x40020058
 80067b0:	40020070 	.word	0x40020070
 80067b4:	40020088 	.word	0x40020088
 80067b8:	400200a0 	.word	0x400200a0
 80067bc:	400200b8 	.word	0x400200b8
 80067c0:	40020410 	.word	0x40020410
 80067c4:	40020428 	.word	0x40020428
 80067c8:	40020440 	.word	0x40020440
 80067cc:	40020458 	.word	0x40020458
 80067d0:	40020470 	.word	0x40020470
 80067d4:	40020488 	.word	0x40020488
 80067d8:	400204a0 	.word	0x400204a0
 80067dc:	400204b8 	.word	0x400204b8
 80067e0:	58025408 	.word	0x58025408
 80067e4:	5802541c 	.word	0x5802541c
 80067e8:	58025430 	.word	0x58025430
 80067ec:	58025444 	.word	0x58025444
 80067f0:	58025458 	.word	0x58025458
 80067f4:	5802546c 	.word	0x5802546c
 80067f8:	58025480 	.word	0x58025480
 80067fc:	58025494 	.word	0x58025494

08006800 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800680c:	4b67      	ldr	r3, [pc, #412]	; (80069ac <HAL_DMA_IRQHandler+0x1ac>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a67      	ldr	r2, [pc, #412]	; (80069b0 <HAL_DMA_IRQHandler+0x1b0>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0a9b      	lsrs	r3, r3, #10
 8006818:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5f      	ldr	r2, [pc, #380]	; (80069b4 <HAL_DMA_IRQHandler+0x1b4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04a      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5d      	ldr	r2, [pc, #372]	; (80069b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d045      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a5c      	ldr	r2, [pc, #368]	; (80069bc <HAL_DMA_IRQHandler+0x1bc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d040      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a5a      	ldr	r2, [pc, #360]	; (80069c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03b      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a59      	ldr	r2, [pc, #356]	; (80069c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d036      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a57      	ldr	r2, [pc, #348]	; (80069c8 <HAL_DMA_IRQHandler+0x1c8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a56      	ldr	r2, [pc, #344]	; (80069cc <HAL_DMA_IRQHandler+0x1cc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02c      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a54      	ldr	r2, [pc, #336]	; (80069d0 <HAL_DMA_IRQHandler+0x1d0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d027      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a53      	ldr	r2, [pc, #332]	; (80069d4 <HAL_DMA_IRQHandler+0x1d4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a51      	ldr	r2, [pc, #324]	; (80069d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a50      	ldr	r2, [pc, #320]	; (80069dc <HAL_DMA_IRQHandler+0x1dc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a4e      	ldr	r2, [pc, #312]	; (80069e0 <HAL_DMA_IRQHandler+0x1e0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4d      	ldr	r2, [pc, #308]	; (80069e4 <HAL_DMA_IRQHandler+0x1e4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a4b      	ldr	r2, [pc, #300]	; (80069e8 <HAL_DMA_IRQHandler+0x1e8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a4a      	ldr	r2, [pc, #296]	; (80069ec <HAL_DMA_IRQHandler+0x1ec>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xd2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a48      	ldr	r2, [pc, #288]	; (80069f0 <HAL_DMA_IRQHandler+0x1f0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <HAL_DMA_IRQHandler+0xd6>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <HAL_DMA_IRQHandler+0xd8>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 842b 	beq.w	8007134 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2208      	movs	r2, #8
 80068e8:	409a      	lsls	r2, r3
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80a2 	beq.w	8006a38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2e      	ldr	r2, [pc, #184]	; (80069b4 <HAL_DMA_IRQHandler+0x1b4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d04a      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2d      	ldr	r2, [pc, #180]	; (80069b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d045      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2b      	ldr	r2, [pc, #172]	; (80069bc <HAL_DMA_IRQHandler+0x1bc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d040      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2a      	ldr	r2, [pc, #168]	; (80069c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d03b      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d036      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <HAL_DMA_IRQHandler+0x1c8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d031      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a25      	ldr	r2, [pc, #148]	; (80069cc <HAL_DMA_IRQHandler+0x1cc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d02c      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <HAL_DMA_IRQHandler+0x1d0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d027      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <HAL_DMA_IRQHandler+0x1d4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d01d      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1f      	ldr	r2, [pc, #124]	; (80069dc <HAL_DMA_IRQHandler+0x1dc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1e      	ldr	r2, [pc, #120]	; (80069e0 <HAL_DMA_IRQHandler+0x1e0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <HAL_DMA_IRQHandler+0x1e4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <HAL_DMA_IRQHandler+0x1e8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <HAL_DMA_IRQHandler+0x1ec>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_DMA_IRQHandler+0x194>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_DMA_IRQHandler+0x1f0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d12f      	bne.n	80069f4 <HAL_DMA_IRQHandler+0x1f4>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	e02e      	b.n	8006a08 <HAL_DMA_IRQHandler+0x208>
 80069aa:	bf00      	nop
 80069ac:	24000210 	.word	0x24000210
 80069b0:	1b4e81b5 	.word	0x1b4e81b5
 80069b4:	40020010 	.word	0x40020010
 80069b8:	40020028 	.word	0x40020028
 80069bc:	40020040 	.word	0x40020040
 80069c0:	40020058 	.word	0x40020058
 80069c4:	40020070 	.word	0x40020070
 80069c8:	40020088 	.word	0x40020088
 80069cc:	400200a0 	.word	0x400200a0
 80069d0:	400200b8 	.word	0x400200b8
 80069d4:	40020410 	.word	0x40020410
 80069d8:	40020428 	.word	0x40020428
 80069dc:	40020440 	.word	0x40020440
 80069e0:	40020458 	.word	0x40020458
 80069e4:	40020470 	.word	0x40020470
 80069e8:	40020488 	.word	0x40020488
 80069ec:	400204a0 	.word	0x400204a0
 80069f0:	400204b8 	.word	0x400204b8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d015      	beq.n	8006a38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0204 	bic.w	r2, r2, #4
 8006a1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2208      	movs	r2, #8
 8006a26:	409a      	lsls	r2, r3
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	fa22 f303 	lsr.w	r3, r2, r3
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d06e      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a69      	ldr	r2, [pc, #420]	; (8006bf8 <HAL_DMA_IRQHandler+0x3f8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d04a      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a67      	ldr	r2, [pc, #412]	; (8006bfc <HAL_DMA_IRQHandler+0x3fc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d045      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a66      	ldr	r2, [pc, #408]	; (8006c00 <HAL_DMA_IRQHandler+0x400>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d040      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a64      	ldr	r2, [pc, #400]	; (8006c04 <HAL_DMA_IRQHandler+0x404>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d03b      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a63      	ldr	r2, [pc, #396]	; (8006c08 <HAL_DMA_IRQHandler+0x408>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d036      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a61      	ldr	r2, [pc, #388]	; (8006c0c <HAL_DMA_IRQHandler+0x40c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d031      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a60      	ldr	r2, [pc, #384]	; (8006c10 <HAL_DMA_IRQHandler+0x410>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d02c      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a5e      	ldr	r2, [pc, #376]	; (8006c14 <HAL_DMA_IRQHandler+0x414>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d027      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a5d      	ldr	r2, [pc, #372]	; (8006c18 <HAL_DMA_IRQHandler+0x418>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d022      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a5b      	ldr	r2, [pc, #364]	; (8006c1c <HAL_DMA_IRQHandler+0x41c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d01d      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a5a      	ldr	r2, [pc, #360]	; (8006c20 <HAL_DMA_IRQHandler+0x420>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d018      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a58      	ldr	r2, [pc, #352]	; (8006c24 <HAL_DMA_IRQHandler+0x424>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a57      	ldr	r2, [pc, #348]	; (8006c28 <HAL_DMA_IRQHandler+0x428>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a55      	ldr	r2, [pc, #340]	; (8006c2c <HAL_DMA_IRQHandler+0x42c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a54      	ldr	r2, [pc, #336]	; (8006c30 <HAL_DMA_IRQHandler+0x430>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_DMA_IRQHandler+0x2ee>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a52      	ldr	r2, [pc, #328]	; (8006c34 <HAL_DMA_IRQHandler+0x434>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d10a      	bne.n	8006b04 <HAL_DMA_IRQHandler+0x304>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e003      	b.n	8006b0c <HAL_DMA_IRQHandler+0x30c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	2201      	movs	r2, #1
 8006b1a:	409a      	lsls	r2, r3
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	f043 0202 	orr.w	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2204      	movs	r2, #4
 8006b36:	409a      	lsls	r2, r3
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 808f 	beq.w	8006c60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2c      	ldr	r2, [pc, #176]	; (8006bf8 <HAL_DMA_IRQHandler+0x3f8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d04a      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2a      	ldr	r2, [pc, #168]	; (8006bfc <HAL_DMA_IRQHandler+0x3fc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d045      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a29      	ldr	r2, [pc, #164]	; (8006c00 <HAL_DMA_IRQHandler+0x400>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d040      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a27      	ldr	r2, [pc, #156]	; (8006c04 <HAL_DMA_IRQHandler+0x404>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d03b      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <HAL_DMA_IRQHandler+0x408>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d036      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a24      	ldr	r2, [pc, #144]	; (8006c0c <HAL_DMA_IRQHandler+0x40c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d031      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <HAL_DMA_IRQHandler+0x410>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d02c      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a21      	ldr	r2, [pc, #132]	; (8006c14 <HAL_DMA_IRQHandler+0x414>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d027      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a20      	ldr	r2, [pc, #128]	; (8006c18 <HAL_DMA_IRQHandler+0x418>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1e      	ldr	r2, [pc, #120]	; (8006c1c <HAL_DMA_IRQHandler+0x41c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01d      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <HAL_DMA_IRQHandler+0x420>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	; (8006c24 <HAL_DMA_IRQHandler+0x424>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <HAL_DMA_IRQHandler+0x428>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	; (8006c2c <HAL_DMA_IRQHandler+0x42c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <HAL_DMA_IRQHandler+0x430>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_DMA_IRQHandler+0x3e2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <HAL_DMA_IRQHandler+0x434>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d12a      	bne.n	8006c38 <HAL_DMA_IRQHandler+0x438>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	e023      	b.n	8006c40 <HAL_DMA_IRQHandler+0x440>
 8006bf8:	40020010 	.word	0x40020010
 8006bfc:	40020028 	.word	0x40020028
 8006c00:	40020040 	.word	0x40020040
 8006c04:	40020058 	.word	0x40020058
 8006c08:	40020070 	.word	0x40020070
 8006c0c:	40020088 	.word	0x40020088
 8006c10:	400200a0 	.word	0x400200a0
 8006c14:	400200b8 	.word	0x400200b8
 8006c18:	40020410 	.word	0x40020410
 8006c1c:	40020428 	.word	0x40020428
 8006c20:	40020440 	.word	0x40020440
 8006c24:	40020458 	.word	0x40020458
 8006c28:	40020470 	.word	0x40020470
 8006c2c:	40020488 	.word	0x40020488
 8006c30:	400204a0 	.word	0x400204a0
 8006c34:	400204b8 	.word	0x400204b8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	f043 0204 	orr.w	r2, r3, #4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2210      	movs	r2, #16
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a6 	beq.w	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a85      	ldr	r2, [pc, #532]	; (8006e90 <HAL_DMA_IRQHandler+0x690>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d04a      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a83      	ldr	r2, [pc, #524]	; (8006e94 <HAL_DMA_IRQHandler+0x694>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d045      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a82      	ldr	r2, [pc, #520]	; (8006e98 <HAL_DMA_IRQHandler+0x698>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d040      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a80      	ldr	r2, [pc, #512]	; (8006e9c <HAL_DMA_IRQHandler+0x69c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d03b      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7f      	ldr	r2, [pc, #508]	; (8006ea0 <HAL_DMA_IRQHandler+0x6a0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d036      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7d      	ldr	r2, [pc, #500]	; (8006ea4 <HAL_DMA_IRQHandler+0x6a4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d031      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a7c      	ldr	r2, [pc, #496]	; (8006ea8 <HAL_DMA_IRQHandler+0x6a8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d02c      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a7a      	ldr	r2, [pc, #488]	; (8006eac <HAL_DMA_IRQHandler+0x6ac>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d027      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a79      	ldr	r2, [pc, #484]	; (8006eb0 <HAL_DMA_IRQHandler+0x6b0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a77      	ldr	r2, [pc, #476]	; (8006eb4 <HAL_DMA_IRQHandler+0x6b4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a76      	ldr	r2, [pc, #472]	; (8006eb8 <HAL_DMA_IRQHandler+0x6b8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a74      	ldr	r2, [pc, #464]	; (8006ebc <HAL_DMA_IRQHandler+0x6bc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a73      	ldr	r2, [pc, #460]	; (8006ec0 <HAL_DMA_IRQHandler+0x6c0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a71      	ldr	r2, [pc, #452]	; (8006ec4 <HAL_DMA_IRQHandler+0x6c4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a70      	ldr	r2, [pc, #448]	; (8006ec8 <HAL_DMA_IRQHandler+0x6c8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_DMA_IRQHandler+0x516>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a6e      	ldr	r2, [pc, #440]	; (8006ecc <HAL_DMA_IRQHandler+0x6cc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d10a      	bne.n	8006d2c <HAL_DMA_IRQHandler+0x52c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bf14      	ite	ne
 8006d24:	2301      	movne	r3, #1
 8006d26:	2300      	moveq	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	e009      	b.n	8006d40 <HAL_DMA_IRQHandler+0x540>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2301      	movne	r3, #1
 8006d3c:	2300      	moveq	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d03e      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d018      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d108      	bne.n	8006d82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d024      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
 8006d80:	e01f      	b.n	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01b      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	e016      	b.n	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0208 	bic.w	r2, r2, #8
 8006db0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	2220      	movs	r2, #32
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8110 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2c      	ldr	r2, [pc, #176]	; (8006e90 <HAL_DMA_IRQHandler+0x690>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d04a      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <HAL_DMA_IRQHandler+0x694>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d045      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <HAL_DMA_IRQHandler+0x698>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d040      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <HAL_DMA_IRQHandler+0x69c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d03b      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <HAL_DMA_IRQHandler+0x6a0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d036      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <HAL_DMA_IRQHandler+0x6a4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d031      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <HAL_DMA_IRQHandler+0x6a8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d02c      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a22      	ldr	r2, [pc, #136]	; (8006eac <HAL_DMA_IRQHandler+0x6ac>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d027      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_DMA_IRQHandler+0x6b0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d022      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <HAL_DMA_IRQHandler+0x6b4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d01d      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <HAL_DMA_IRQHandler+0x6b8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d018      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <HAL_DMA_IRQHandler+0x6bc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <HAL_DMA_IRQHandler+0x6c0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <HAL_DMA_IRQHandler+0x6c4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_DMA_IRQHandler+0x6c8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_DMA_IRQHandler+0x678>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <HAL_DMA_IRQHandler+0x6cc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d12b      	bne.n	8006ed0 <HAL_DMA_IRQHandler+0x6d0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bf14      	ite	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	2300      	moveq	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e02a      	b.n	8006ee4 <HAL_DMA_IRQHandler+0x6e4>
 8006e8e:	bf00      	nop
 8006e90:	40020010 	.word	0x40020010
 8006e94:	40020028 	.word	0x40020028
 8006e98:	40020040 	.word	0x40020040
 8006e9c:	40020058 	.word	0x40020058
 8006ea0:	40020070 	.word	0x40020070
 8006ea4:	40020088 	.word	0x40020088
 8006ea8:	400200a0 	.word	0x400200a0
 8006eac:	400200b8 	.word	0x400200b8
 8006eb0:	40020410 	.word	0x40020410
 8006eb4:	40020428 	.word	0x40020428
 8006eb8:	40020440 	.word	0x40020440
 8006ebc:	40020458 	.word	0x40020458
 8006ec0:	40020470 	.word	0x40020470
 8006ec4:	40020488 	.word	0x40020488
 8006ec8:	400204a0 	.word	0x400204a0
 8006ecc:	400204b8 	.word	0x400204b8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bf14      	ite	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	2300      	moveq	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8087 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d139      	bne.n	8006f7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0216 	bic.w	r2, r2, #22
 8006f14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d103      	bne.n	8006f36 <HAL_DMA_IRQHandler+0x736>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d007      	beq.n	8006f46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0208 	bic.w	r2, r2, #8
 8006f44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	223f      	movs	r2, #63	; 0x3f
 8006f50:	409a      	lsls	r2, r3
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 834a 	beq.w	8007604 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
          }
          return;
 8006f78:	e344      	b.n	8007604 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d018      	beq.n	8006fba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d108      	bne.n	8006fa8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d02c      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
 8006fa6:	e027      	b.n	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d023      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
 8006fb8:	e01e      	b.n	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0210 	bic.w	r2, r2, #16
 8006fd6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8306 	beq.w	800760e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 8088 	beq.w	8007120 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2204      	movs	r2, #4
 8007014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a7a      	ldr	r2, [pc, #488]	; (8007208 <HAL_DMA_IRQHandler+0xa08>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d04a      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a79      	ldr	r2, [pc, #484]	; (800720c <HAL_DMA_IRQHandler+0xa0c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d045      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a77      	ldr	r2, [pc, #476]	; (8007210 <HAL_DMA_IRQHandler+0xa10>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d040      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a76      	ldr	r2, [pc, #472]	; (8007214 <HAL_DMA_IRQHandler+0xa14>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d03b      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a74      	ldr	r2, [pc, #464]	; (8007218 <HAL_DMA_IRQHandler+0xa18>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d036      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a73      	ldr	r2, [pc, #460]	; (800721c <HAL_DMA_IRQHandler+0xa1c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d031      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a71      	ldr	r2, [pc, #452]	; (8007220 <HAL_DMA_IRQHandler+0xa20>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d02c      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a70      	ldr	r2, [pc, #448]	; (8007224 <HAL_DMA_IRQHandler+0xa24>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d027      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6e      	ldr	r2, [pc, #440]	; (8007228 <HAL_DMA_IRQHandler+0xa28>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d022      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6d      	ldr	r2, [pc, #436]	; (800722c <HAL_DMA_IRQHandler+0xa2c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d01d      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a6b      	ldr	r2, [pc, #428]	; (8007230 <HAL_DMA_IRQHandler+0xa30>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d018      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a6a      	ldr	r2, [pc, #424]	; (8007234 <HAL_DMA_IRQHandler+0xa34>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a68      	ldr	r2, [pc, #416]	; (8007238 <HAL_DMA_IRQHandler+0xa38>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00e      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a67      	ldr	r2, [pc, #412]	; (800723c <HAL_DMA_IRQHandler+0xa3c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a65      	ldr	r2, [pc, #404]	; (8007240 <HAL_DMA_IRQHandler+0xa40>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d004      	beq.n	80070b8 <HAL_DMA_IRQHandler+0x8b8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a64      	ldr	r2, [pc, #400]	; (8007244 <HAL_DMA_IRQHandler+0xa44>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d108      	bne.n	80070ca <HAL_DMA_IRQHandler+0x8ca>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0201 	bic.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e007      	b.n	80070da <HAL_DMA_IRQHandler+0x8da>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d307      	bcc.n	80070f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f2      	bne.n	80070da <HAL_DMA_IRQHandler+0x8da>
 80070f4:	e000      	b.n	80070f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2203      	movs	r2, #3
 800710a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800710e:	e003      	b.n	8007118 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8272 	beq.w	800760e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	e26c      	b.n	800760e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a43      	ldr	r2, [pc, #268]	; (8007248 <HAL_DMA_IRQHandler+0xa48>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d022      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a42      	ldr	r2, [pc, #264]	; (800724c <HAL_DMA_IRQHandler+0xa4c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d01d      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a40      	ldr	r2, [pc, #256]	; (8007250 <HAL_DMA_IRQHandler+0xa50>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a3f      	ldr	r2, [pc, #252]	; (8007254 <HAL_DMA_IRQHandler+0xa54>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3d      	ldr	r2, [pc, #244]	; (8007258 <HAL_DMA_IRQHandler+0xa58>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3c      	ldr	r2, [pc, #240]	; (800725c <HAL_DMA_IRQHandler+0xa5c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3a      	ldr	r2, [pc, #232]	; (8007260 <HAL_DMA_IRQHandler+0xa60>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_DMA_IRQHandler+0x984>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a39      	ldr	r2, [pc, #228]	; (8007264 <HAL_DMA_IRQHandler+0xa64>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d101      	bne.n	8007188 <HAL_DMA_IRQHandler+0x988>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <HAL_DMA_IRQHandler+0x98a>
 8007188:	2300      	movs	r3, #0
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 823f 	beq.w	800760e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2204      	movs	r2, #4
 80071a2:	409a      	lsls	r2, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4013      	ands	r3, r2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80cd 	beq.w	8007348 <HAL_DMA_IRQHandler+0xb48>
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80c7 	beq.w	8007348 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	2204      	movs	r2, #4
 80071c4:	409a      	lsls	r2, r3
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d049      	beq.n	8007268 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8210 	beq.w	8007608 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071f0:	e20a      	b.n	8007608 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8206 	beq.w	8007608 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007204:	e200      	b.n	8007608 <HAL_DMA_IRQHandler+0xe08>
 8007206:	bf00      	nop
 8007208:	40020010 	.word	0x40020010
 800720c:	40020028 	.word	0x40020028
 8007210:	40020040 	.word	0x40020040
 8007214:	40020058 	.word	0x40020058
 8007218:	40020070 	.word	0x40020070
 800721c:	40020088 	.word	0x40020088
 8007220:	400200a0 	.word	0x400200a0
 8007224:	400200b8 	.word	0x400200b8
 8007228:	40020410 	.word	0x40020410
 800722c:	40020428 	.word	0x40020428
 8007230:	40020440 	.word	0x40020440
 8007234:	40020458 	.word	0x40020458
 8007238:	40020470 	.word	0x40020470
 800723c:	40020488 	.word	0x40020488
 8007240:	400204a0 	.word	0x400204a0
 8007244:	400204b8 	.word	0x400204b8
 8007248:	58025408 	.word	0x58025408
 800724c:	5802541c 	.word	0x5802541c
 8007250:	58025430 	.word	0x58025430
 8007254:	58025444 	.word	0x58025444
 8007258:	58025458 	.word	0x58025458
 800725c:	5802546c 	.word	0x5802546c
 8007260:	58025480 	.word	0x58025480
 8007264:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f003 0320 	and.w	r3, r3, #32
 800726e:	2b00      	cmp	r3, #0
 8007270:	d160      	bne.n	8007334 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a8c      	ldr	r2, [pc, #560]	; (80074a8 <HAL_DMA_IRQHandler+0xca8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d04a      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a8a      	ldr	r2, [pc, #552]	; (80074ac <HAL_DMA_IRQHandler+0xcac>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d045      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a89      	ldr	r2, [pc, #548]	; (80074b0 <HAL_DMA_IRQHandler+0xcb0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d040      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a87      	ldr	r2, [pc, #540]	; (80074b4 <HAL_DMA_IRQHandler+0xcb4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d03b      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a86      	ldr	r2, [pc, #536]	; (80074b8 <HAL_DMA_IRQHandler+0xcb8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d036      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a84      	ldr	r2, [pc, #528]	; (80074bc <HAL_DMA_IRQHandler+0xcbc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d031      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a83      	ldr	r2, [pc, #524]	; (80074c0 <HAL_DMA_IRQHandler+0xcc0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d02c      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a81      	ldr	r2, [pc, #516]	; (80074c4 <HAL_DMA_IRQHandler+0xcc4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d027      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a80      	ldr	r2, [pc, #512]	; (80074c8 <HAL_DMA_IRQHandler+0xcc8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d022      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a7e      	ldr	r2, [pc, #504]	; (80074cc <HAL_DMA_IRQHandler+0xccc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01d      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a7d      	ldr	r2, [pc, #500]	; (80074d0 <HAL_DMA_IRQHandler+0xcd0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d018      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a7b      	ldr	r2, [pc, #492]	; (80074d4 <HAL_DMA_IRQHandler+0xcd4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a7a      	ldr	r2, [pc, #488]	; (80074d8 <HAL_DMA_IRQHandler+0xcd8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00e      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a78      	ldr	r2, [pc, #480]	; (80074dc <HAL_DMA_IRQHandler+0xcdc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a77      	ldr	r2, [pc, #476]	; (80074e0 <HAL_DMA_IRQHandler+0xce0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d004      	beq.n	8007312 <HAL_DMA_IRQHandler+0xb12>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a75      	ldr	r2, [pc, #468]	; (80074e4 <HAL_DMA_IRQHandler+0xce4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d108      	bne.n	8007324 <HAL_DMA_IRQHandler+0xb24>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0208 	bic.w	r2, r2, #8
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e007      	b.n	8007334 <HAL_DMA_IRQHandler+0xb34>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0204 	bic.w	r2, r2, #4
 8007332:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8165 	beq.w	8007608 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007346:	e15f      	b.n	8007608 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	2202      	movs	r2, #2
 8007352:	409a      	lsls	r2, r3
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80c5 	beq.w	80074e8 <HAL_DMA_IRQHandler+0xce8>
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 80bf 	beq.w	80074e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	2202      	movs	r2, #2
 8007374:	409a      	lsls	r2, r3
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d018      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d109      	bne.n	80073a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 813a 	beq.w	800760c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a0:	e134      	b.n	800760c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8130 	beq.w	800760c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073b4:	e12a      	b.n	800760c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d168      	bne.n	8007492 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a38      	ldr	r2, [pc, #224]	; (80074a8 <HAL_DMA_IRQHandler+0xca8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d04a      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a37      	ldr	r2, [pc, #220]	; (80074ac <HAL_DMA_IRQHandler+0xcac>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d045      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a35      	ldr	r2, [pc, #212]	; (80074b0 <HAL_DMA_IRQHandler+0xcb0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d040      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a34      	ldr	r2, [pc, #208]	; (80074b4 <HAL_DMA_IRQHandler+0xcb4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d03b      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a32      	ldr	r2, [pc, #200]	; (80074b8 <HAL_DMA_IRQHandler+0xcb8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d036      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a31      	ldr	r2, [pc, #196]	; (80074bc <HAL_DMA_IRQHandler+0xcbc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d031      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2f      	ldr	r2, [pc, #188]	; (80074c0 <HAL_DMA_IRQHandler+0xcc0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d02c      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2e      	ldr	r2, [pc, #184]	; (80074c4 <HAL_DMA_IRQHandler+0xcc4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d027      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a2c      	ldr	r2, [pc, #176]	; (80074c8 <HAL_DMA_IRQHandler+0xcc8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d022      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a2b      	ldr	r2, [pc, #172]	; (80074cc <HAL_DMA_IRQHandler+0xccc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d01d      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <HAL_DMA_IRQHandler+0xcd0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d018      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a28      	ldr	r2, [pc, #160]	; (80074d4 <HAL_DMA_IRQHandler+0xcd4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d013      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <HAL_DMA_IRQHandler+0xcd8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00e      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a25      	ldr	r2, [pc, #148]	; (80074dc <HAL_DMA_IRQHandler+0xcdc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d009      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a23      	ldr	r2, [pc, #140]	; (80074e0 <HAL_DMA_IRQHandler+0xce0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <HAL_DMA_IRQHandler+0xc60>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a22      	ldr	r2, [pc, #136]	; (80074e4 <HAL_DMA_IRQHandler+0xce4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d108      	bne.n	8007472 <HAL_DMA_IRQHandler+0xc72>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0214 	bic.w	r2, r2, #20
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	e007      	b.n	8007482 <HAL_DMA_IRQHandler+0xc82>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 020a 	bic.w	r2, r2, #10
 8007480:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80b8 	beq.w	800760c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074a4:	e0b2      	b.n	800760c <HAL_DMA_IRQHandler+0xe0c>
 80074a6:	bf00      	nop
 80074a8:	40020010 	.word	0x40020010
 80074ac:	40020028 	.word	0x40020028
 80074b0:	40020040 	.word	0x40020040
 80074b4:	40020058 	.word	0x40020058
 80074b8:	40020070 	.word	0x40020070
 80074bc:	40020088 	.word	0x40020088
 80074c0:	400200a0 	.word	0x400200a0
 80074c4:	400200b8 	.word	0x400200b8
 80074c8:	40020410 	.word	0x40020410
 80074cc:	40020428 	.word	0x40020428
 80074d0:	40020440 	.word	0x40020440
 80074d4:	40020458 	.word	0x40020458
 80074d8:	40020470 	.word	0x40020470
 80074dc:	40020488 	.word	0x40020488
 80074e0:	400204a0 	.word	0x400204a0
 80074e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ec:	f003 031f 	and.w	r3, r3, #31
 80074f0:	2208      	movs	r2, #8
 80074f2:	409a      	lsls	r2, r3
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8088 	beq.w	800760e <HAL_DMA_IRQHandler+0xe0e>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8082 	beq.w	800760e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a41      	ldr	r2, [pc, #260]	; (8007614 <HAL_DMA_IRQHandler+0xe14>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d04a      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <HAL_DMA_IRQHandler+0xe18>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d045      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a3e      	ldr	r2, [pc, #248]	; (800761c <HAL_DMA_IRQHandler+0xe1c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d040      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3c      	ldr	r2, [pc, #240]	; (8007620 <HAL_DMA_IRQHandler+0xe20>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d03b      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <HAL_DMA_IRQHandler+0xe24>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d036      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a39      	ldr	r2, [pc, #228]	; (8007628 <HAL_DMA_IRQHandler+0xe28>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d031      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a38      	ldr	r2, [pc, #224]	; (800762c <HAL_DMA_IRQHandler+0xe2c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d02c      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a36      	ldr	r2, [pc, #216]	; (8007630 <HAL_DMA_IRQHandler+0xe30>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d027      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a35      	ldr	r2, [pc, #212]	; (8007634 <HAL_DMA_IRQHandler+0xe34>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <HAL_DMA_IRQHandler+0xe38>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01d      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a32      	ldr	r2, [pc, #200]	; (800763c <HAL_DMA_IRQHandler+0xe3c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a30      	ldr	r2, [pc, #192]	; (8007640 <HAL_DMA_IRQHandler+0xe40>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <HAL_DMA_IRQHandler+0xe44>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a2d      	ldr	r2, [pc, #180]	; (8007648 <HAL_DMA_IRQHandler+0xe48>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2c      	ldr	r2, [pc, #176]	; (800764c <HAL_DMA_IRQHandler+0xe4c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_DMA_IRQHandler+0xdaa>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2a      	ldr	r2, [pc, #168]	; (8007650 <HAL_DMA_IRQHandler+0xe50>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d108      	bne.n	80075bc <HAL_DMA_IRQHandler+0xdbc>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 021c 	bic.w	r2, r2, #28
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	e007      	b.n	80075cc <HAL_DMA_IRQHandler+0xdcc>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 020e 	bic.w	r2, r2, #14
 80075ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2201      	movs	r2, #1
 80075d6:	409a      	lsls	r2, r3
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
 8007602:	e004      	b.n	800760e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007604:	bf00      	nop
 8007606:	e002      	b.n	800760e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007608:	bf00      	nop
 800760a:	e000      	b.n	800760e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800760c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800760e:	3728      	adds	r7, #40	; 0x28
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40020010 	.word	0x40020010
 8007618:	40020028 	.word	0x40020028
 800761c:	40020040 	.word	0x40020040
 8007620:	40020058 	.word	0x40020058
 8007624:	40020070 	.word	0x40020070
 8007628:	40020088 	.word	0x40020088
 800762c:	400200a0 	.word	0x400200a0
 8007630:	400200b8 	.word	0x400200b8
 8007634:	40020410 	.word	0x40020410
 8007638:	40020428 	.word	0x40020428
 800763c:	40020440 	.word	0x40020440
 8007640:	40020458 	.word	0x40020458
 8007644:	40020470 	.word	0x40020470
 8007648:	40020488 	.word	0x40020488
 800764c:	400204a0 	.word	0x400204a0
 8007650:	400204b8 	.word	0x400204b8

08007654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007666:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a84      	ldr	r2, [pc, #528]	; (8007884 <DMA_SetConfig+0x230>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d072      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a82      	ldr	r2, [pc, #520]	; (8007888 <DMA_SetConfig+0x234>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d06d      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a81      	ldr	r2, [pc, #516]	; (800788c <DMA_SetConfig+0x238>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d068      	beq.n	800775e <DMA_SetConfig+0x10a>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a7f      	ldr	r2, [pc, #508]	; (8007890 <DMA_SetConfig+0x23c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d063      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a7e      	ldr	r2, [pc, #504]	; (8007894 <DMA_SetConfig+0x240>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d05e      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a7c      	ldr	r2, [pc, #496]	; (8007898 <DMA_SetConfig+0x244>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d059      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a7b      	ldr	r2, [pc, #492]	; (800789c <DMA_SetConfig+0x248>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d054      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a79      	ldr	r2, [pc, #484]	; (80078a0 <DMA_SetConfig+0x24c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d04f      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a78      	ldr	r2, [pc, #480]	; (80078a4 <DMA_SetConfig+0x250>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d04a      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a76      	ldr	r2, [pc, #472]	; (80078a8 <DMA_SetConfig+0x254>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d045      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a75      	ldr	r2, [pc, #468]	; (80078ac <DMA_SetConfig+0x258>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d040      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a73      	ldr	r2, [pc, #460]	; (80078b0 <DMA_SetConfig+0x25c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d03b      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a72      	ldr	r2, [pc, #456]	; (80078b4 <DMA_SetConfig+0x260>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d036      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a70      	ldr	r2, [pc, #448]	; (80078b8 <DMA_SetConfig+0x264>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d031      	beq.n	800775e <DMA_SetConfig+0x10a>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a6f      	ldr	r2, [pc, #444]	; (80078bc <DMA_SetConfig+0x268>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d02c      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a6d      	ldr	r2, [pc, #436]	; (80078c0 <DMA_SetConfig+0x26c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d027      	beq.n	800775e <DMA_SetConfig+0x10a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a6c      	ldr	r2, [pc, #432]	; (80078c4 <DMA_SetConfig+0x270>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a6a      	ldr	r2, [pc, #424]	; (80078c8 <DMA_SetConfig+0x274>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a69      	ldr	r2, [pc, #420]	; (80078cc <DMA_SetConfig+0x278>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <DMA_SetConfig+0x10a>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a67      	ldr	r2, [pc, #412]	; (80078d0 <DMA_SetConfig+0x27c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a66      	ldr	r2, [pc, #408]	; (80078d4 <DMA_SetConfig+0x280>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a64      	ldr	r2, [pc, #400]	; (80078d8 <DMA_SetConfig+0x284>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <DMA_SetConfig+0x10a>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a63      	ldr	r2, [pc, #396]	; (80078dc <DMA_SetConfig+0x288>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <DMA_SetConfig+0x10a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a61      	ldr	r2, [pc, #388]	; (80078e0 <DMA_SetConfig+0x28c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <DMA_SetConfig+0x10e>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <DMA_SetConfig+0x110>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00d      	beq.n	8007784 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007770:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007782:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a3e      	ldr	r2, [pc, #248]	; (8007884 <DMA_SetConfig+0x230>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d04a      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a3d      	ldr	r2, [pc, #244]	; (8007888 <DMA_SetConfig+0x234>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d045      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a3b      	ldr	r2, [pc, #236]	; (800788c <DMA_SetConfig+0x238>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d040      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a3a      	ldr	r2, [pc, #232]	; (8007890 <DMA_SetConfig+0x23c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d03b      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a38      	ldr	r2, [pc, #224]	; (8007894 <DMA_SetConfig+0x240>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d036      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a37      	ldr	r2, [pc, #220]	; (8007898 <DMA_SetConfig+0x244>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d031      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a35      	ldr	r2, [pc, #212]	; (800789c <DMA_SetConfig+0x248>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d02c      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a34      	ldr	r2, [pc, #208]	; (80078a0 <DMA_SetConfig+0x24c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d027      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a32      	ldr	r2, [pc, #200]	; (80078a4 <DMA_SetConfig+0x250>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d022      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a31      	ldr	r2, [pc, #196]	; (80078a8 <DMA_SetConfig+0x254>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d01d      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2f      	ldr	r2, [pc, #188]	; (80078ac <DMA_SetConfig+0x258>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d018      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2e      	ldr	r2, [pc, #184]	; (80078b0 <DMA_SetConfig+0x25c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d013      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2c      	ldr	r2, [pc, #176]	; (80078b4 <DMA_SetConfig+0x260>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d00e      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2b      	ldr	r2, [pc, #172]	; (80078b8 <DMA_SetConfig+0x264>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d009      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a29      	ldr	r2, [pc, #164]	; (80078bc <DMA_SetConfig+0x268>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d004      	beq.n	8007824 <DMA_SetConfig+0x1d0>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a28      	ldr	r2, [pc, #160]	; (80078c0 <DMA_SetConfig+0x26c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d101      	bne.n	8007828 <DMA_SetConfig+0x1d4>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <DMA_SetConfig+0x1d6>
 8007828:	2300      	movs	r3, #0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d05a      	beq.n	80078e4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	223f      	movs	r2, #63	; 0x3f
 8007838:	409a      	lsls	r2, r3
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800784c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d108      	bne.n	8007870 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800786e:	e087      	b.n	8007980 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	60da      	str	r2, [r3, #12]
}
 8007880:	e07e      	b.n	8007980 <DMA_SetConfig+0x32c>
 8007882:	bf00      	nop
 8007884:	40020010 	.word	0x40020010
 8007888:	40020028 	.word	0x40020028
 800788c:	40020040 	.word	0x40020040
 8007890:	40020058 	.word	0x40020058
 8007894:	40020070 	.word	0x40020070
 8007898:	40020088 	.word	0x40020088
 800789c:	400200a0 	.word	0x400200a0
 80078a0:	400200b8 	.word	0x400200b8
 80078a4:	40020410 	.word	0x40020410
 80078a8:	40020428 	.word	0x40020428
 80078ac:	40020440 	.word	0x40020440
 80078b0:	40020458 	.word	0x40020458
 80078b4:	40020470 	.word	0x40020470
 80078b8:	40020488 	.word	0x40020488
 80078bc:	400204a0 	.word	0x400204a0
 80078c0:	400204b8 	.word	0x400204b8
 80078c4:	58025408 	.word	0x58025408
 80078c8:	5802541c 	.word	0x5802541c
 80078cc:	58025430 	.word	0x58025430
 80078d0:	58025444 	.word	0x58025444
 80078d4:	58025458 	.word	0x58025458
 80078d8:	5802546c 	.word	0x5802546c
 80078dc:	58025480 	.word	0x58025480
 80078e0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a28      	ldr	r2, [pc, #160]	; (800798c <DMA_SetConfig+0x338>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d022      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a27      	ldr	r2, [pc, #156]	; (8007990 <DMA_SetConfig+0x33c>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d01d      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a25      	ldr	r2, [pc, #148]	; (8007994 <DMA_SetConfig+0x340>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d018      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a24      	ldr	r2, [pc, #144]	; (8007998 <DMA_SetConfig+0x344>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d013      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a22      	ldr	r2, [pc, #136]	; (800799c <DMA_SetConfig+0x348>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a21      	ldr	r2, [pc, #132]	; (80079a0 <DMA_SetConfig+0x34c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1f      	ldr	r2, [pc, #124]	; (80079a4 <DMA_SetConfig+0x350>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <DMA_SetConfig+0x2e0>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <DMA_SetConfig+0x354>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d101      	bne.n	8007938 <DMA_SetConfig+0x2e4>
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <DMA_SetConfig+0x2e6>
 8007938:	2300      	movs	r3, #0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d020      	beq.n	8007980 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	2201      	movs	r2, #1
 8007948:	409a      	lsls	r2, r3
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d108      	bne.n	8007970 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	60da      	str	r2, [r3, #12]
}
 800796e:	e007      	b.n	8007980 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	58025408 	.word	0x58025408
 8007990:	5802541c 	.word	0x5802541c
 8007994:	58025430 	.word	0x58025430
 8007998:	58025444 	.word	0x58025444
 800799c:	58025458 	.word	0x58025458
 80079a0:	5802546c 	.word	0x5802546c
 80079a4:	58025480 	.word	0x58025480
 80079a8:	58025494 	.word	0x58025494

080079ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a42      	ldr	r2, [pc, #264]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x118>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d04a      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a41      	ldr	r2, [pc, #260]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x11c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d045      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a3f      	ldr	r2, [pc, #252]	; (8007acc <DMA_CalcBaseAndBitshift+0x120>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d040      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a3e      	ldr	r2, [pc, #248]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x124>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d03b      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a3c      	ldr	r2, [pc, #240]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x128>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d036      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a3b      	ldr	r2, [pc, #236]	; (8007ad8 <DMA_CalcBaseAndBitshift+0x12c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d031      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a39      	ldr	r2, [pc, #228]	; (8007adc <DMA_CalcBaseAndBitshift+0x130>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d02c      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a38      	ldr	r2, [pc, #224]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x134>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d027      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a36      	ldr	r2, [pc, #216]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x138>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d022      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a35      	ldr	r2, [pc, #212]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01d      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a33      	ldr	r2, [pc, #204]	; (8007aec <DMA_CalcBaseAndBitshift+0x140>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a32      	ldr	r2, [pc, #200]	; (8007af0 <DMA_CalcBaseAndBitshift+0x144>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a30      	ldr	r2, [pc, #192]	; (8007af4 <DMA_CalcBaseAndBitshift+0x148>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a2f      	ldr	r2, [pc, #188]	; (8007af8 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a2d      	ldr	r2, [pc, #180]	; (8007afc <DMA_CalcBaseAndBitshift+0x150>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <DMA_CalcBaseAndBitshift+0xa8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2c      	ldr	r2, [pc, #176]	; (8007b00 <DMA_CalcBaseAndBitshift+0x154>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d101      	bne.n	8007a58 <DMA_CalcBaseAndBitshift+0xac>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <DMA_CalcBaseAndBitshift+0xae>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d024      	beq.n	8007aa8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	3b10      	subs	r3, #16
 8007a66:	4a27      	ldr	r2, [pc, #156]	; (8007b04 <DMA_CalcBaseAndBitshift+0x158>)
 8007a68:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6c:	091b      	lsrs	r3, r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	4a24      	ldr	r2, [pc, #144]	; (8007b08 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a78:	5cd3      	ldrb	r3, [r2, r3]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d908      	bls.n	8007a98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <DMA_CalcBaseAndBitshift+0x160>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	1d1a      	adds	r2, r3, #4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	659a      	str	r2, [r3, #88]	; 0x58
 8007a96:	e00d      	b.n	8007ab4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4b1b      	ldr	r3, [pc, #108]	; (8007b0c <DMA_CalcBaseAndBitshift+0x160>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8007aa6:	e005      	b.n	8007ab4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40020010 	.word	0x40020010
 8007ac8:	40020028 	.word	0x40020028
 8007acc:	40020040 	.word	0x40020040
 8007ad0:	40020058 	.word	0x40020058
 8007ad4:	40020070 	.word	0x40020070
 8007ad8:	40020088 	.word	0x40020088
 8007adc:	400200a0 	.word	0x400200a0
 8007ae0:	400200b8 	.word	0x400200b8
 8007ae4:	40020410 	.word	0x40020410
 8007ae8:	40020428 	.word	0x40020428
 8007aec:	40020440 	.word	0x40020440
 8007af0:	40020458 	.word	0x40020458
 8007af4:	40020470 	.word	0x40020470
 8007af8:	40020488 	.word	0x40020488
 8007afc:	400204a0 	.word	0x400204a0
 8007b00:	400204b8 	.word	0x400204b8
 8007b04:	aaaaaaab 	.word	0xaaaaaaab
 8007b08:	08011cc4 	.word	0x08011cc4
 8007b0c:	fffffc00 	.word	0xfffffc00

08007b10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d120      	bne.n	8007b66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d858      	bhi.n	8007bde <DMA_CheckFifoParam+0xce>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <DMA_CheckFifoParam+0x24>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b57 	.word	0x08007b57
 8007b3c:	08007b45 	.word	0x08007b45
 8007b40:	08007bdf 	.word	0x08007bdf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d048      	beq.n	8007be2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b54:	e045      	b.n	8007be2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b5e:	d142      	bne.n	8007be6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b64:	e03f      	b.n	8007be6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6e:	d123      	bne.n	8007bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d838      	bhi.n	8007bea <DMA_CheckFifoParam+0xda>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <DMA_CheckFifoParam+0x70>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b91 	.word	0x08007b91
 8007b84:	08007b97 	.word	0x08007b97
 8007b88:	08007b91 	.word	0x08007b91
 8007b8c:	08007ba9 	.word	0x08007ba9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
        break;
 8007b94:	e030      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d025      	beq.n	8007bee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ba6:	e022      	b.n	8007bee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bb0:	d11f      	bne.n	8007bf2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bb6:	e01c      	b.n	8007bf2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d902      	bls.n	8007bc6 <DMA_CheckFifoParam+0xb6>
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d003      	beq.n	8007bcc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007bc4:	e018      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8007bca:	e015      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00e      	beq.n	8007bf6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
    break;
 8007bdc:	e00b      	b.n	8007bf6 <DMA_CheckFifoParam+0xe6>
        break;
 8007bde:	bf00      	nop
 8007be0:	e00a      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        break;
 8007be2:	bf00      	nop
 8007be4:	e008      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        break;
 8007be6:	bf00      	nop
 8007be8:	e006      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        break;
 8007bea:	bf00      	nop
 8007bec:	e004      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        break;
 8007bee:	bf00      	nop
 8007bf0:	e002      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
        break;
 8007bf2:	bf00      	nop
 8007bf4:	e000      	b.n	8007bf8 <DMA_CheckFifoParam+0xe8>
    break;
 8007bf6:	bf00      	nop
    }
  }

  return status;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop

08007c08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a38      	ldr	r2, [pc, #224]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a36      	ldr	r2, [pc, #216]	; (8007d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a35      	ldr	r2, [pc, #212]	; (8007d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d018      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a33      	ldr	r2, [pc, #204]	; (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a32      	ldr	r2, [pc, #200]	; (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a30      	ldr	r2, [pc, #192]	; (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a2f      	ldr	r2, [pc, #188]	; (8007d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2d      	ldr	r2, [pc, #180]	; (8007d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d101      	bne.n	8007c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d01a      	beq.n	8007ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	3b08      	subs	r3, #8
 8007c78:	4a28      	ldr	r2, [pc, #160]	; (8007d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a24      	ldr	r2, [pc, #144]	; (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ca4:	e024      	b.n	8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	3b10      	subs	r3, #16
 8007cae:	4a1e      	ldr	r2, [pc, #120]	; (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	091b      	lsrs	r3, r3, #4
 8007cb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d806      	bhi.n	8007cce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d902      	bls.n	8007cce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4b18      	ldr	r3, [pc, #96]	; (8007d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ce0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	2201      	movs	r2, #1
 8007cea:	409a      	lsls	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	58025408 	.word	0x58025408
 8007d00:	5802541c 	.word	0x5802541c
 8007d04:	58025430 	.word	0x58025430
 8007d08:	58025444 	.word	0x58025444
 8007d0c:	58025458 	.word	0x58025458
 8007d10:	5802546c 	.word	0x5802546c
 8007d14:	58025480 	.word	0x58025480
 8007d18:	58025494 	.word	0x58025494
 8007d1c:	cccccccd 	.word	0xcccccccd
 8007d20:	16009600 	.word	0x16009600
 8007d24:	58025880 	.word	0x58025880
 8007d28:	aaaaaaab 	.word	0xaaaaaaab
 8007d2c:	400204b8 	.word	0x400204b8
 8007d30:	4002040f 	.word	0x4002040f
 8007d34:	10008200 	.word	0x10008200
 8007d38:	40020880 	.word	0x40020880

08007d3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d04a      	beq.n	8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d847      	bhi.n	8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a25      	ldr	r2, [pc, #148]	; (8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d022      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a24      	ldr	r2, [pc, #144]	; (8007df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d01d      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d018      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00e      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d101      	bne.n	8007dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	461a      	mov	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007dc4:	671a      	str	r2, [r3, #112]	; 0x70
 8007dc6:	e009      	b.n	8007ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a11      	ldr	r2, [pc, #68]	; (8007e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007dda:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2201      	movs	r2, #1
 8007de2:	409a      	lsls	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007de8:	bf00      	nop
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	58025408 	.word	0x58025408
 8007df8:	5802541c 	.word	0x5802541c
 8007dfc:	58025430 	.word	0x58025430
 8007e00:	58025444 	.word	0x58025444
 8007e04:	58025458 	.word	0x58025458
 8007e08:	5802546c 	.word	0x5802546c
 8007e0c:	58025480 	.word	0x58025480
 8007e10:	58025494 	.word	0x58025494
 8007e14:	1600963f 	.word	0x1600963f
 8007e18:	58025940 	.word	0x58025940
 8007e1c:	1000823f 	.word	0x1000823f
 8007e20:	40020940 	.word	0x40020940

08007e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b089      	sub	sp, #36	; 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e32:	4b89      	ldr	r3, [pc, #548]	; (8008058 <HAL_GPIO_Init+0x234>)
 8007e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e36:	e194      	b.n	8008162 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	fa01 f303 	lsl.w	r3, r1, r3
 8007e44:	4013      	ands	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 8186 	beq.w	800815c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d005      	beq.n	8007e68 <HAL_GPIO_Init+0x44>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d130      	bne.n	8007eca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	2203      	movs	r2, #3
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f003 0201 	and.w	r2, r3, #1
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d017      	beq.n	8007f06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	4013      	ands	r3, r2
 8007eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d123      	bne.n	8007f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	08da      	lsrs	r2, r3, #3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3208      	adds	r2, #8
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	220f      	movs	r2, #15
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	08da      	lsrs	r2, r3, #3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3208      	adds	r2, #8
 8007f54:	69b9      	ldr	r1, [r7, #24]
 8007f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	2203      	movs	r2, #3
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 0203 	and.w	r2, r3, #3
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80e0 	beq.w	800815c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f9c:	4b2f      	ldr	r3, [pc, #188]	; (800805c <HAL_GPIO_Init+0x238>)
 8007f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fa2:	4a2e      	ldr	r2, [pc, #184]	; (800805c <HAL_GPIO_Init+0x238>)
 8007fa4:	f043 0302 	orr.w	r3, r3, #2
 8007fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007fac:	4b2b      	ldr	r3, [pc, #172]	; (800805c <HAL_GPIO_Init+0x238>)
 8007fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fba:	4a29      	ldr	r2, [pc, #164]	; (8008060 <HAL_GPIO_Init+0x23c>)
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	089b      	lsrs	r3, r3, #2
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	220f      	movs	r2, #15
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	43db      	mvns	r3, r3
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a20      	ldr	r2, [pc, #128]	; (8008064 <HAL_GPIO_Init+0x240>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d052      	beq.n	800808c <HAL_GPIO_Init+0x268>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a1f      	ldr	r2, [pc, #124]	; (8008068 <HAL_GPIO_Init+0x244>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d031      	beq.n	8008052 <HAL_GPIO_Init+0x22e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1e      	ldr	r2, [pc, #120]	; (800806c <HAL_GPIO_Init+0x248>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d02b      	beq.n	800804e <HAL_GPIO_Init+0x22a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	; (8008070 <HAL_GPIO_Init+0x24c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d025      	beq.n	800804a <HAL_GPIO_Init+0x226>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <HAL_GPIO_Init+0x250>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01f      	beq.n	8008046 <HAL_GPIO_Init+0x222>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1b      	ldr	r2, [pc, #108]	; (8008078 <HAL_GPIO_Init+0x254>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d019      	beq.n	8008042 <HAL_GPIO_Init+0x21e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1a      	ldr	r2, [pc, #104]	; (800807c <HAL_GPIO_Init+0x258>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d013      	beq.n	800803e <HAL_GPIO_Init+0x21a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a19      	ldr	r2, [pc, #100]	; (8008080 <HAL_GPIO_Init+0x25c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00d      	beq.n	800803a <HAL_GPIO_Init+0x216>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a18      	ldr	r2, [pc, #96]	; (8008084 <HAL_GPIO_Init+0x260>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d007      	beq.n	8008036 <HAL_GPIO_Init+0x212>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a17      	ldr	r2, [pc, #92]	; (8008088 <HAL_GPIO_Init+0x264>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d101      	bne.n	8008032 <HAL_GPIO_Init+0x20e>
 800802e:	2309      	movs	r3, #9
 8008030:	e02d      	b.n	800808e <HAL_GPIO_Init+0x26a>
 8008032:	230a      	movs	r3, #10
 8008034:	e02b      	b.n	800808e <HAL_GPIO_Init+0x26a>
 8008036:	2308      	movs	r3, #8
 8008038:	e029      	b.n	800808e <HAL_GPIO_Init+0x26a>
 800803a:	2307      	movs	r3, #7
 800803c:	e027      	b.n	800808e <HAL_GPIO_Init+0x26a>
 800803e:	2306      	movs	r3, #6
 8008040:	e025      	b.n	800808e <HAL_GPIO_Init+0x26a>
 8008042:	2305      	movs	r3, #5
 8008044:	e023      	b.n	800808e <HAL_GPIO_Init+0x26a>
 8008046:	2304      	movs	r3, #4
 8008048:	e021      	b.n	800808e <HAL_GPIO_Init+0x26a>
 800804a:	2303      	movs	r3, #3
 800804c:	e01f      	b.n	800808e <HAL_GPIO_Init+0x26a>
 800804e:	2302      	movs	r3, #2
 8008050:	e01d      	b.n	800808e <HAL_GPIO_Init+0x26a>
 8008052:	2301      	movs	r3, #1
 8008054:	e01b      	b.n	800808e <HAL_GPIO_Init+0x26a>
 8008056:	bf00      	nop
 8008058:	58000080 	.word	0x58000080
 800805c:	58024400 	.word	0x58024400
 8008060:	58000400 	.word	0x58000400
 8008064:	58020000 	.word	0x58020000
 8008068:	58020400 	.word	0x58020400
 800806c:	58020800 	.word	0x58020800
 8008070:	58020c00 	.word	0x58020c00
 8008074:	58021000 	.word	0x58021000
 8008078:	58021400 	.word	0x58021400
 800807c:	58021800 	.word	0x58021800
 8008080:	58021c00 	.word	0x58021c00
 8008084:	58022000 	.word	0x58022000
 8008088:	58022400 	.word	0x58022400
 800808c:	2300      	movs	r3, #0
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	f002 0203 	and.w	r2, r2, #3
 8008094:	0092      	lsls	r2, r2, #2
 8008096:	4093      	lsls	r3, r2
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	4313      	orrs	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800809e:	4938      	ldr	r1, [pc, #224]	; (8008180 <HAL_GPIO_Init+0x35c>)
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	089b      	lsrs	r3, r3, #2
 80080a4:	3302      	adds	r3, #2
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	4013      	ands	r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	43db      	mvns	r3, r3
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	4013      	ands	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	43db      	mvns	r3, r3
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	4013      	ands	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	43db      	mvns	r3, r3
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	4013      	ands	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3301      	adds	r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	fa22 f303 	lsr.w	r3, r2, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f ae63 	bne.w	8007e38 <HAL_GPIO_Init+0x14>
  }
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	3724      	adds	r7, #36	; 0x24
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	58000400 	.word	0x58000400

08008184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	807b      	strh	r3, [r7, #2]
 8008190:	4613      	mov	r3, r2
 8008192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008194:	787b      	ldrb	r3, [r7, #1]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800819a:	887a      	ldrh	r2, [r7, #2]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80081a0:	e003      	b.n	80081aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80081a2:	887b      	ldrh	r3, [r7, #2]
 80081a4:	041a      	lsls	r2, r3, #16
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	619a      	str	r2, [r3, #24]
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	4603      	mov	r3, r0
 80081be:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80081c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fa fef5 	bl	8002fcc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081f4:	4b19      	ldr	r3, [pc, #100]	; (800825c <HAL_PWREx_ConfigSupply+0x70>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d00a      	beq.n	8008216 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008200:	4b16      	ldr	r3, [pc, #88]	; (800825c <HAL_PWREx_ConfigSupply+0x70>)
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d001      	beq.n	8008212 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e01f      	b.n	8008252 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e01d      	b.n	8008252 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <HAL_PWREx_ConfigSupply+0x70>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f023 0207 	bic.w	r2, r3, #7
 800821e:	490f      	ldr	r1, [pc, #60]	; (800825c <HAL_PWREx_ConfigSupply+0x70>)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4313      	orrs	r3, r2
 8008224:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008226:	f7fc fc91 	bl	8004b4c <HAL_GetTick>
 800822a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800822c:	e009      	b.n	8008242 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800822e:	f7fc fc8d 	bl	8004b4c <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800823c:	d901      	bls.n	8008242 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e007      	b.n	8008252 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008242:	4b06      	ldr	r3, [pc, #24]	; (800825c <HAL_PWREx_ConfigSupply+0x70>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800824a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800824e:	d1ee      	bne.n	800822e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	58024800 	.word	0x58024800

08008260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08c      	sub	sp, #48	; 0x30
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	f000 bc1c 	b.w	8008aac <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8087 	beq.w	8008390 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008282:	4b9e      	ldr	r3, [pc, #632]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800828a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800828c:	4b9b      	ldr	r3, [pc, #620]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	2b10      	cmp	r3, #16
 8008296:	d007      	beq.n	80082a8 <HAL_RCC_OscConfig+0x48>
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	2b18      	cmp	r3, #24
 800829c:	d110      	bne.n	80082c0 <HAL_RCC_OscConfig+0x60>
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d10b      	bne.n	80082c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a8:	4b94      	ldr	r3, [pc, #592]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d06c      	beq.n	800838e <HAL_RCC_OscConfig+0x12e>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d168      	bne.n	800838e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e3f5      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c8:	d106      	bne.n	80082d8 <HAL_RCC_OscConfig+0x78>
 80082ca:	4b8c      	ldr	r3, [pc, #560]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a8b      	ldr	r2, [pc, #556]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	e02e      	b.n	8008336 <HAL_RCC_OscConfig+0xd6>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <HAL_RCC_OscConfig+0x9a>
 80082e0:	4b86      	ldr	r3, [pc, #536]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a85      	ldr	r2, [pc, #532]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	4b83      	ldr	r3, [pc, #524]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a82      	ldr	r2, [pc, #520]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80082f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e01d      	b.n	8008336 <HAL_RCC_OscConfig+0xd6>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008302:	d10c      	bne.n	800831e <HAL_RCC_OscConfig+0xbe>
 8008304:	4b7d      	ldr	r3, [pc, #500]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a7c      	ldr	r2, [pc, #496]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800830a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	4b7a      	ldr	r3, [pc, #488]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a79      	ldr	r2, [pc, #484]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	e00b      	b.n	8008336 <HAL_RCC_OscConfig+0xd6>
 800831e:	4b77      	ldr	r3, [pc, #476]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a76      	ldr	r2, [pc, #472]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	4b74      	ldr	r3, [pc, #464]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a73      	ldr	r2, [pc, #460]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008334:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800833e:	f7fc fc05 	bl	8004b4c <HAL_GetTick>
 8008342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008344:	e008      	b.n	8008358 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008346:	f7fc fc01 	bl	8004b4c <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b64      	cmp	r3, #100	; 0x64
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e3a9      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008358:	4b68      	ldr	r3, [pc, #416]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0f0      	beq.n	8008346 <HAL_RCC_OscConfig+0xe6>
 8008364:	e014      	b.n	8008390 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008366:	f7fc fbf1 	bl	8004b4c <HAL_GetTick>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800836c:	e008      	b.n	8008380 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800836e:	f7fc fbed 	bl	8004b4c <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b64      	cmp	r3, #100	; 0x64
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e395      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008380:	4b5e      	ldr	r3, [pc, #376]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f0      	bne.n	800836e <HAL_RCC_OscConfig+0x10e>
 800838c:	e000      	b.n	8008390 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800838e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80ca 	beq.w	8008532 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800839e:	4b57      	ldr	r3, [pc, #348]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083a8:	4b54      	ldr	r3, [pc, #336]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d007      	beq.n	80083c4 <HAL_RCC_OscConfig+0x164>
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	2b18      	cmp	r3, #24
 80083b8:	d156      	bne.n	8008468 <HAL_RCC_OscConfig+0x208>
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	f003 0303 	and.w	r3, r3, #3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d151      	bne.n	8008468 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083c4:	4b4d      	ldr	r3, [pc, #308]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RCC_OscConfig+0x17c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e367      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083dc:	4b47      	ldr	r3, [pc, #284]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f023 0219 	bic.w	r2, r3, #25
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4944      	ldr	r1, [pc, #272]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083ee:	f7fc fbad 	bl	8004b4c <HAL_GetTick>
 80083f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f4:	e008      	b.n	8008408 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083f6:	f7fc fba9 	bl	8004b4c <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e351      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008408:	4b3c      	ldr	r3, [pc, #240]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f0      	beq.n	80083f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008414:	f7fc fba6 	bl	8004b64 <HAL_GetREVID>
 8008418:	4603      	mov	r3, r0
 800841a:	f241 0203 	movw	r2, #4099	; 0x1003
 800841e:	4293      	cmp	r3, r2
 8008420:	d817      	bhi.n	8008452 <HAL_RCC_OscConfig+0x1f2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d108      	bne.n	800843c <HAL_RCC_OscConfig+0x1dc>
 800842a:	4b34      	ldr	r3, [pc, #208]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008432:	4a32      	ldr	r2, [pc, #200]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008438:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800843a:	e07a      	b.n	8008532 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843c:	4b2f      	ldr	r3, [pc, #188]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	031b      	lsls	r3, r3, #12
 800844a:	492c      	ldr	r1, [pc, #176]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800844c:	4313      	orrs	r3, r2
 800844e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008450:	e06f      	b.n	8008532 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008452:	4b2a      	ldr	r3, [pc, #168]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	061b      	lsls	r3, r3, #24
 8008460:	4926      	ldr	r1, [pc, #152]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008462:	4313      	orrs	r3, r2
 8008464:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008466:	e064      	b.n	8008532 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d047      	beq.n	8008500 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008470:	4b22      	ldr	r3, [pc, #136]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f023 0219 	bic.w	r2, r3, #25
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	491f      	ldr	r1, [pc, #124]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800847e:	4313      	orrs	r3, r2
 8008480:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008482:	f7fc fb63 	bl	8004b4c <HAL_GetTick>
 8008486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008488:	e008      	b.n	800849c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800848a:	f7fc fb5f 	bl	8004b4c <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e307      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800849c:	4b17      	ldr	r3, [pc, #92]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0f0      	beq.n	800848a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a8:	f7fc fb5c 	bl	8004b64 <HAL_GetREVID>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f241 0203 	movw	r2, #4099	; 0x1003
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d817      	bhi.n	80084e6 <HAL_RCC_OscConfig+0x286>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d108      	bne.n	80084d0 <HAL_RCC_OscConfig+0x270>
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084c6:	4a0d      	ldr	r2, [pc, #52]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80084c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	e030      	b.n	8008532 <HAL_RCC_OscConfig+0x2d2>
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	031b      	lsls	r3, r3, #12
 80084de:	4907      	ldr	r1, [pc, #28]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	604b      	str	r3, [r1, #4]
 80084e4:	e025      	b.n	8008532 <HAL_RCC_OscConfig+0x2d2>
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	061b      	lsls	r3, r3, #24
 80084f4:	4901      	ldr	r1, [pc, #4]	; (80084fc <HAL_RCC_OscConfig+0x29c>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	604b      	str	r3, [r1, #4]
 80084fa:	e01a      	b.n	8008532 <HAL_RCC_OscConfig+0x2d2>
 80084fc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008500:	4b9e      	ldr	r3, [pc, #632]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a9d      	ldr	r2, [pc, #628]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850c:	f7fc fb1e 	bl	8004b4c <HAL_GetTick>
 8008510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008512:	e008      	b.n	8008526 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008514:	f7fc fb1a 	bl	8004b4c <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	2b02      	cmp	r3, #2
 8008520:	d901      	bls.n	8008526 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e2c2      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008526:	4b95      	ldr	r3, [pc, #596]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0304 	and.w	r3, r3, #4
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f0      	bne.n	8008514 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 80a9 	beq.w	8008692 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008540:	4b8e      	ldr	r3, [pc, #568]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008548:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800854a:	4b8c      	ldr	r3, [pc, #560]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2b08      	cmp	r3, #8
 8008554:	d007      	beq.n	8008566 <HAL_RCC_OscConfig+0x306>
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	2b18      	cmp	r3, #24
 800855a:	d13a      	bne.n	80085d2 <HAL_RCC_OscConfig+0x372>
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b01      	cmp	r3, #1
 8008564:	d135      	bne.n	80085d2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008566:	4b85      	ldr	r3, [pc, #532]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_RCC_OscConfig+0x31e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	2b80      	cmp	r3, #128	; 0x80
 8008578:	d001      	beq.n	800857e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e296      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800857e:	f7fc faf1 	bl	8004b64 <HAL_GetREVID>
 8008582:	4603      	mov	r3, r0
 8008584:	f241 0203 	movw	r2, #4099	; 0x1003
 8008588:	4293      	cmp	r3, r2
 800858a:	d817      	bhi.n	80085bc <HAL_RCC_OscConfig+0x35c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	2b20      	cmp	r3, #32
 8008592:	d108      	bne.n	80085a6 <HAL_RCC_OscConfig+0x346>
 8008594:	4b79      	ldr	r3, [pc, #484]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800859c:	4a77      	ldr	r2, [pc, #476]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 800859e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085a4:	e075      	b.n	8008692 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085a6:	4b75      	ldr	r3, [pc, #468]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	069b      	lsls	r3, r3, #26
 80085b4:	4971      	ldr	r1, [pc, #452]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085ba:	e06a      	b.n	8008692 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085bc:	4b6f      	ldr	r3, [pc, #444]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	061b      	lsls	r3, r3, #24
 80085ca:	496c      	ldr	r1, [pc, #432]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085d0:	e05f      	b.n	8008692 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d042      	beq.n	8008660 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80085da:	4b68      	ldr	r3, [pc, #416]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a67      	ldr	r2, [pc, #412]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80085e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e6:	f7fc fab1 	bl	8004b4c <HAL_GetTick>
 80085ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085ec:	e008      	b.n	8008600 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085ee:	f7fc faad 	bl	8004b4c <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e255      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008600:	4b5e      	ldr	r3, [pc, #376]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0f0      	beq.n	80085ee <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800860c:	f7fc faaa 	bl	8004b64 <HAL_GetREVID>
 8008610:	4603      	mov	r3, r0
 8008612:	f241 0203 	movw	r2, #4099	; 0x1003
 8008616:	4293      	cmp	r3, r2
 8008618:	d817      	bhi.n	800864a <HAL_RCC_OscConfig+0x3ea>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	2b20      	cmp	r3, #32
 8008620:	d108      	bne.n	8008634 <HAL_RCC_OscConfig+0x3d4>
 8008622:	4b56      	ldr	r3, [pc, #344]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800862a:	4a54      	ldr	r2, [pc, #336]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 800862c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008630:	6053      	str	r3, [r2, #4]
 8008632:	e02e      	b.n	8008692 <HAL_RCC_OscConfig+0x432>
 8008634:	4b51      	ldr	r3, [pc, #324]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	069b      	lsls	r3, r3, #26
 8008642:	494e      	ldr	r1, [pc, #312]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008644:	4313      	orrs	r3, r2
 8008646:	604b      	str	r3, [r1, #4]
 8008648:	e023      	b.n	8008692 <HAL_RCC_OscConfig+0x432>
 800864a:	4b4c      	ldr	r3, [pc, #304]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	061b      	lsls	r3, r3, #24
 8008658:	4948      	ldr	r1, [pc, #288]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 800865a:	4313      	orrs	r3, r2
 800865c:	60cb      	str	r3, [r1, #12]
 800865e:	e018      	b.n	8008692 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008660:	4b46      	ldr	r3, [pc, #280]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a45      	ldr	r2, [pc, #276]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800866a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7fc fa6e 	bl	8004b4c <HAL_GetTick>
 8008670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008674:	f7fc fa6a 	bl	8004b4c <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e212      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008686:	4b3d      	ldr	r3, [pc, #244]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d036      	beq.n	800870c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d019      	beq.n	80086da <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086a6:	4b35      	ldr	r3, [pc, #212]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80086a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086aa:	4a34      	ldr	r2, [pc, #208]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b2:	f7fc fa4b 	bl	8004b4c <HAL_GetTick>
 80086b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086b8:	e008      	b.n	80086cc <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086ba:	f7fc fa47 	bl	8004b4c <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e1ef      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086cc:	4b2b      	ldr	r3, [pc, #172]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80086ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0f0      	beq.n	80086ba <HAL_RCC_OscConfig+0x45a>
 80086d8:	e018      	b.n	800870c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086da:	4b28      	ldr	r3, [pc, #160]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80086dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086de:	4a27      	ldr	r2, [pc, #156]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 80086e0:	f023 0301 	bic.w	r3, r3, #1
 80086e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e6:	f7fc fa31 	bl	8004b4c <HAL_GetTick>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086ec:	e008      	b.n	8008700 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086ee:	f7fc fa2d 	bl	8004b4c <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e1d5      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008700:	4b1e      	ldr	r3, [pc, #120]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1f0      	bne.n	80086ee <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d039      	beq.n	800878c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d019      	beq.n	8008754 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008720:	4b16      	ldr	r3, [pc, #88]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a15      	ldr	r2, [pc, #84]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800872a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800872c:	f7fc fa0e 	bl	8004b4c <HAL_GetTick>
 8008730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008734:	f7fc fa0a 	bl	8004b4c <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e1b2      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0x4d4>
 8008752:	e01b      	b.n	800878c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008754:	4b09      	ldr	r3, [pc, #36]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a08      	ldr	r2, [pc, #32]	; (800877c <HAL_RCC_OscConfig+0x51c>)
 800875a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800875e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008760:	f7fc f9f4 	bl	8004b4c <HAL_GetTick>
 8008764:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008766:	e00b      	b.n	8008780 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008768:	f7fc f9f0 	bl	8004b4c <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d904      	bls.n	8008780 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e198      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
 800877a:	bf00      	nop
 800877c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008780:	4ba3      	ldr	r3, [pc, #652]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1ed      	bne.n	8008768 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8081 	beq.w	800889c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800879a:	4b9e      	ldr	r3, [pc, #632]	; (8008a14 <HAL_RCC_OscConfig+0x7b4>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a9d      	ldr	r2, [pc, #628]	; (8008a14 <HAL_RCC_OscConfig+0x7b4>)
 80087a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087a6:	f7fc f9d1 	bl	8004b4c <HAL_GetTick>
 80087aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087ac:	e008      	b.n	80087c0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087ae:	f7fc f9cd 	bl	8004b4c <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b64      	cmp	r3, #100	; 0x64
 80087ba:	d901      	bls.n	80087c0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e175      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087c0:	4b94      	ldr	r3, [pc, #592]	; (8008a14 <HAL_RCC_OscConfig+0x7b4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0f0      	beq.n	80087ae <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d106      	bne.n	80087e2 <HAL_RCC_OscConfig+0x582>
 80087d4:	4b8e      	ldr	r3, [pc, #568]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d8:	4a8d      	ldr	r2, [pc, #564]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80087da:	f043 0301 	orr.w	r3, r3, #1
 80087de:	6713      	str	r3, [r2, #112]	; 0x70
 80087e0:	e02d      	b.n	800883e <HAL_RCC_OscConfig+0x5de>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10c      	bne.n	8008804 <HAL_RCC_OscConfig+0x5a4>
 80087ea:	4b89      	ldr	r3, [pc, #548]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ee:	4a88      	ldr	r2, [pc, #544]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80087f0:	f023 0301 	bic.w	r3, r3, #1
 80087f4:	6713      	str	r3, [r2, #112]	; 0x70
 80087f6:	4b86      	ldr	r3, [pc, #536]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	4a85      	ldr	r2, [pc, #532]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80087fc:	f023 0304 	bic.w	r3, r3, #4
 8008800:	6713      	str	r3, [r2, #112]	; 0x70
 8008802:	e01c      	b.n	800883e <HAL_RCC_OscConfig+0x5de>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b05      	cmp	r3, #5
 800880a:	d10c      	bne.n	8008826 <HAL_RCC_OscConfig+0x5c6>
 800880c:	4b80      	ldr	r3, [pc, #512]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	4a7f      	ldr	r2, [pc, #508]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008812:	f043 0304 	orr.w	r3, r3, #4
 8008816:	6713      	str	r3, [r2, #112]	; 0x70
 8008818:	4b7d      	ldr	r3, [pc, #500]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	4a7c      	ldr	r2, [pc, #496]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	6713      	str	r3, [r2, #112]	; 0x70
 8008824:	e00b      	b.n	800883e <HAL_RCC_OscConfig+0x5de>
 8008826:	4b7a      	ldr	r3, [pc, #488]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	4a79      	ldr	r2, [pc, #484]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	6713      	str	r3, [r2, #112]	; 0x70
 8008832:	4b77      	ldr	r3, [pc, #476]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	4a76      	ldr	r2, [pc, #472]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008838:	f023 0304 	bic.w	r3, r3, #4
 800883c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d015      	beq.n	8008872 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008846:	f7fc f981 	bl	8004b4c <HAL_GetTick>
 800884a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800884c:	e00a      	b.n	8008864 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800884e:	f7fc f97d 	bl	8004b4c <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	f241 3288 	movw	r2, #5000	; 0x1388
 800885c:	4293      	cmp	r3, r2
 800885e:	d901      	bls.n	8008864 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e123      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008864:	4b6a      	ldr	r3, [pc, #424]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0ee      	beq.n	800884e <HAL_RCC_OscConfig+0x5ee>
 8008870:	e014      	b.n	800889c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008872:	f7fc f96b 	bl	8004b4c <HAL_GetTick>
 8008876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008878:	e00a      	b.n	8008890 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800887a:	f7fc f967 	bl	8004b4c <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	f241 3288 	movw	r2, #5000	; 0x1388
 8008888:	4293      	cmp	r3, r2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e10d      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008890:	4b5f      	ldr	r3, [pc, #380]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1ee      	bne.n	800887a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8102 	beq.w	8008aaa <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80088a6:	4b5a      	ldr	r3, [pc, #360]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ae:	2b18      	cmp	r3, #24
 80088b0:	f000 80bd 	beq.w	8008a2e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	f040 8095 	bne.w	80089e8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088be:	4b54      	ldr	r3, [pc, #336]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a53      	ldr	r2, [pc, #332]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80088c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ca:	f7fc f93f 	bl	8004b4c <HAL_GetTick>
 80088ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088d0:	e008      	b.n	80088e4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088d2:	f7fc f93b 	bl	8004b4c <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0e3      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088e4:	4b4a      	ldr	r3, [pc, #296]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1f0      	bne.n	80088d2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088f0:	4b47      	ldr	r3, [pc, #284]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80088f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088f4:	4b48      	ldr	r3, [pc, #288]	; (8008a18 <HAL_RCC_OscConfig+0x7b8>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008900:	0112      	lsls	r2, r2, #4
 8008902:	430a      	orrs	r2, r1
 8008904:	4942      	ldr	r1, [pc, #264]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008906:	4313      	orrs	r3, r2
 8008908:	628b      	str	r3, [r1, #40]	; 0x28
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	3b01      	subs	r3, #1
 8008910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	3b01      	subs	r3, #1
 800891a:	025b      	lsls	r3, r3, #9
 800891c:	b29b      	uxth	r3, r3
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	3b01      	subs	r3, #1
 8008926:	041b      	lsls	r3, r3, #16
 8008928:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800892c:	431a      	orrs	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	3b01      	subs	r3, #1
 8008934:	061b      	lsls	r3, r3, #24
 8008936:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800893a:	4935      	ldr	r1, [pc, #212]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800893c:	4313      	orrs	r3, r2
 800893e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008940:	4b33      	ldr	r3, [pc, #204]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	4a32      	ldr	r2, [pc, #200]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800894c:	4b30      	ldr	r3, [pc, #192]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800894e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008950:	4b32      	ldr	r3, [pc, #200]	; (8008a1c <HAL_RCC_OscConfig+0x7bc>)
 8008952:	4013      	ands	r3, r2
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008958:	00d2      	lsls	r2, r2, #3
 800895a:	492d      	ldr	r1, [pc, #180]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800895c:	4313      	orrs	r3, r2
 800895e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008960:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	f023 020c 	bic.w	r2, r3, #12
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	4928      	ldr	r1, [pc, #160]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800896e:	4313      	orrs	r3, r2
 8008970:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008972:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	f023 0202 	bic.w	r2, r3, #2
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897e:	4924      	ldr	r1, [pc, #144]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008980:	4313      	orrs	r3, r2
 8008982:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008984:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a21      	ldr	r2, [pc, #132]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800898a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008990:	4b1f      	ldr	r3, [pc, #124]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	4a1e      	ldr	r2, [pc, #120]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 8008996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800899a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800899c:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	4a1b      	ldr	r2, [pc, #108]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80089a8:	4b19      	ldr	r3, [pc, #100]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	4a18      	ldr	r2, [pc, #96]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089ae:	f043 0301 	orr.w	r3, r3, #1
 80089b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a15      	ldr	r2, [pc, #84]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c0:	f7fc f8c4 	bl	8004b4c <HAL_GetTick>
 80089c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c8:	f7fc f8c0 	bl	8004b4c <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e068      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0f0      	beq.n	80089c8 <HAL_RCC_OscConfig+0x768>
 80089e6:	e060      	b.n	8008aaa <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e8:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <HAL_RCC_OscConfig+0x7b0>)
 80089ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f4:	f7fc f8aa 	bl	8004b4c <HAL_GetTick>
 80089f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089fa:	e011      	b.n	8008a20 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fc:	f7fc f8a6 	bl	8004b4c <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d90a      	bls.n	8008a20 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e04e      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
 8008a0e:	bf00      	nop
 8008a10:	58024400 	.word	0x58024400
 8008a14:	58024800 	.word	0x58024800
 8008a18:	fffffc0c 	.word	0xfffffc0c
 8008a1c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a20:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <HAL_RCC_OscConfig+0x854>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e7      	bne.n	80089fc <HAL_RCC_OscConfig+0x79c>
 8008a2c:	e03d      	b.n	8008aaa <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a2e:	4b21      	ldr	r3, [pc, #132]	; (8008ab4 <HAL_RCC_OscConfig+0x854>)
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a34:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <HAL_RCC_OscConfig+0x854>)
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d031      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f003 0203 	and.w	r2, r3, #3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d12a      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	091b      	lsrs	r3, r3, #4
 8008a54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d122      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d11a      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	0a5b      	lsrs	r3, r3, #9
 8008a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d111      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	0c1b      	lsrs	r3, r3, #16
 8008a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d108      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	0e1b      	lsrs	r3, r3, #24
 8008a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d001      	beq.n	8008aaa <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3730      	adds	r7, #48	; 0x30
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	58024400 	.word	0x58024400

08008ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e19c      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008acc:	4b8a      	ldr	r3, [pc, #552]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d910      	bls.n	8008afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ada:	4b87      	ldr	r3, [pc, #540]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f023 020f 	bic.w	r2, r3, #15
 8008ae2:	4985      	ldr	r1, [pc, #532]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aea:	4b83      	ldr	r3, [pc, #524]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d001      	beq.n	8008afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e184      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d010      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	4b7b      	ldr	r3, [pc, #492]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d908      	bls.n	8008b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b18:	4b78      	ldr	r3, [pc, #480]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	4975      	ldr	r1, [pc, #468]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d010      	beq.n	8008b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695a      	ldr	r2, [r3, #20]
 8008b3a:	4b70      	ldr	r3, [pc, #448]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d908      	bls.n	8008b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b46:	4b6d      	ldr	r3, [pc, #436]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	496a      	ldr	r1, [pc, #424]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d010      	beq.n	8008b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	4b64      	ldr	r3, [pc, #400]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d908      	bls.n	8008b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b74:	4b61      	ldr	r3, [pc, #388]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	495e      	ldr	r1, [pc, #376]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d010      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	4b59      	ldr	r3, [pc, #356]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d908      	bls.n	8008bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ba2:	4b56      	ldr	r3, [pc, #344]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	4953      	ldr	r1, [pc, #332]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d010      	beq.n	8008be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	4b4d      	ldr	r3, [pc, #308]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d908      	bls.n	8008be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bd0:	4b4a      	ldr	r3, [pc, #296]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f023 020f 	bic.w	r2, r3, #15
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4947      	ldr	r1, [pc, #284]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d055      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008bee:	4b43      	ldr	r3, [pc, #268]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	4940      	ldr	r1, [pc, #256]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d107      	bne.n	8008c18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c08:	4b3c      	ldr	r3, [pc, #240]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d121      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e0f6      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d107      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c20:	4b36      	ldr	r3, [pc, #216]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d115      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0ea      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d107      	bne.n	8008c48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c38:	4b30      	ldr	r3, [pc, #192]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0de      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c48:	4b2c      	ldr	r3, [pc, #176]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e0d6      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c58:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f023 0207 	bic.w	r2, r3, #7
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4925      	ldr	r1, [pc, #148]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6a:	f7fb ff6f 	bl	8004b4c <HAL_GetTick>
 8008c6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c70:	e00a      	b.n	8008c88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c72:	f7fb ff6b 	bl	8004b4c <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d901      	bls.n	8008c88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e0be      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c88:	4b1c      	ldr	r3, [pc, #112]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d1eb      	bne.n	8008c72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d010      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d208      	bcs.n	8008cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	f023 020f 	bic.w	r2, r3, #15
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	490e      	ldr	r1, [pc, #56]	; (8008cfc <HAL_RCC_ClockConfig+0x244>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d214      	bcs.n	8008d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd6:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f023 020f 	bic.w	r2, r3, #15
 8008cde:	4906      	ldr	r1, [pc, #24]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce6:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <HAL_RCC_ClockConfig+0x240>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d005      	beq.n	8008d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e086      	b.n	8008e06 <HAL_RCC_ClockConfig+0x34e>
 8008cf8:	52002000 	.word	0x52002000
 8008cfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d010      	beq.n	8008d2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691a      	ldr	r2, [r3, #16]
 8008d10:	4b3f      	ldr	r3, [pc, #252]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d208      	bcs.n	8008d2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d1c:	4b3c      	ldr	r3, [pc, #240]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	4939      	ldr	r1, [pc, #228]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0308 	and.w	r3, r3, #8
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d010      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	695a      	ldr	r2, [r3, #20]
 8008d3e:	4b34      	ldr	r3, [pc, #208]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d208      	bcs.n	8008d5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	492e      	ldr	r1, [pc, #184]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d010      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d208      	bcs.n	8008d8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d78:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	4922      	ldr	r1, [pc, #136]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d010      	beq.n	8008db8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	69da      	ldr	r2, [r3, #28]
 8008d9a:	4b1d      	ldr	r3, [pc, #116]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d208      	bcs.n	8008db8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	4917      	ldr	r1, [pc, #92]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008db8:	f000 f834 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	0a1b      	lsrs	r3, r3, #8
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	4912      	ldr	r1, [pc, #72]	; (8008e14 <HAL_RCC_ClockConfig+0x35c>)
 8008dca:	5ccb      	ldrb	r3, [r1, r3]
 8008dcc:	f003 031f 	and.w	r3, r3, #31
 8008dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <HAL_RCC_ClockConfig+0x358>)
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	4a0d      	ldr	r2, [pc, #52]	; (8008e14 <HAL_RCC_ClockConfig+0x35c>)
 8008de0:	5cd3      	ldrb	r3, [r2, r3]
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dec:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <HAL_RCC_ClockConfig+0x360>)
 8008dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <HAL_RCC_ClockConfig+0x364>)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008df6:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <HAL_RCC_ClockConfig+0x368>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fb fe5c 	bl	8004ab8 <HAL_InitTick>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	58024400 	.word	0x58024400
 8008e14:	08011cb4 	.word	0x08011cb4
 8008e18:	24000214 	.word	0x24000214
 8008e1c:	24000210 	.word	0x24000210
 8008e20:	24000218 	.word	0x24000218

08008e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b089      	sub	sp, #36	; 0x24
 8008e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e2a:	4bb3      	ldr	r3, [pc, #716]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e32:	2b18      	cmp	r3, #24
 8008e34:	f200 8155 	bhi.w	80090e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	080090e3 	.word	0x080090e3
 8008e48:	080090e3 	.word	0x080090e3
 8008e4c:	080090e3 	.word	0x080090e3
 8008e50:	080090e3 	.word	0x080090e3
 8008e54:	080090e3 	.word	0x080090e3
 8008e58:	080090e3 	.word	0x080090e3
 8008e5c:	080090e3 	.word	0x080090e3
 8008e60:	08008ecb 	.word	0x08008ecb
 8008e64:	080090e3 	.word	0x080090e3
 8008e68:	080090e3 	.word	0x080090e3
 8008e6c:	080090e3 	.word	0x080090e3
 8008e70:	080090e3 	.word	0x080090e3
 8008e74:	080090e3 	.word	0x080090e3
 8008e78:	080090e3 	.word	0x080090e3
 8008e7c:	080090e3 	.word	0x080090e3
 8008e80:	08008ed1 	.word	0x08008ed1
 8008e84:	080090e3 	.word	0x080090e3
 8008e88:	080090e3 	.word	0x080090e3
 8008e8c:	080090e3 	.word	0x080090e3
 8008e90:	080090e3 	.word	0x080090e3
 8008e94:	080090e3 	.word	0x080090e3
 8008e98:	080090e3 	.word	0x080090e3
 8008e9c:	080090e3 	.word	0x080090e3
 8008ea0:	08008ed7 	.word	0x08008ed7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea4:	4b94      	ldr	r3, [pc, #592]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d009      	beq.n	8008ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb0:	4b91      	ldr	r3, [pc, #580]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	4a90      	ldr	r2, [pc, #576]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008ec2:	e111      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ec4:	4b8d      	ldr	r3, [pc, #564]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ec6:	61bb      	str	r3, [r7, #24]
    break;
 8008ec8:	e10e      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008eca:	4b8d      	ldr	r3, [pc, #564]	; (8009100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ecc:	61bb      	str	r3, [r7, #24]
    break;
 8008ece:	e10b      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008ed0:	4b8c      	ldr	r3, [pc, #560]	; (8009104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ed2:	61bb      	str	r3, [r7, #24]
    break;
 8008ed4:	e108      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ed6:	4b88      	ldr	r3, [pc, #544]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ee0:	4b85      	ldr	r3, [pc, #532]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	091b      	lsrs	r3, r3, #4
 8008ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008eec:	4b82      	ldr	r3, [pc, #520]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ef6:	4b80      	ldr	r3, [pc, #512]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80e1 	beq.w	80090dc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	f000 8083 	beq.w	8009028 <HAL_RCC_GetSysClockFreq+0x204>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	f200 80a1 	bhi.w	800906c <HAL_RCC_GetSysClockFreq+0x248>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <HAL_RCC_GetSysClockFreq+0x114>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d056      	beq.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f36:	e099      	b.n	800906c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f38:	4b6f      	ldr	r3, [pc, #444]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d02d      	beq.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f44:	4b6c      	ldr	r3, [pc, #432]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	08db      	lsrs	r3, r3, #3
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	4a6b      	ldr	r2, [pc, #428]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
 8008f54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b62      	ldr	r3, [pc, #392]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f9e:	e087      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800910c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb2:	4b51      	ldr	r3, [pc, #324]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fba:	ee07 3a90 	vmov	s15, r3
 8008fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fe2:	e065      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff6:	4b40      	ldr	r3, [pc, #256]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	ed97 6a02 	vldr	s12, [r7, #8]
 800900a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800900e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800901a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009026:	e043      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903a:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800904a:	ed97 6a02 	vldr	s12, [r7, #8]
 800904e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800905a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800905e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800906a:	e021      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009076:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b1e      	ldr	r3, [pc, #120]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009092:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b4:	0a5b      	lsrs	r3, r3, #9
 80090b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ba:	3301      	adds	r3, #1
 80090bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80090cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d4:	ee17 3a90 	vmov	r3, s15
 80090d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80090da:	e005      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	61bb      	str	r3, [r7, #24]
    break;
 80090e0:	e002      	b.n	80090e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090e4:	61bb      	str	r3, [r7, #24]
    break;
 80090e6:	bf00      	nop
  }

  return sysclockfreq;
 80090e8:	69bb      	ldr	r3, [r7, #24]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3724      	adds	r7, #36	; 0x24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400
 80090fc:	03d09000 	.word	0x03d09000
 8009100:	003d0900 	.word	0x003d0900
 8009104:	02dc6c00 	.word	0x02dc6c00
 8009108:	46000000 	.word	0x46000000
 800910c:	4c742400 	.word	0x4c742400
 8009110:	4a742400 	.word	0x4a742400
 8009114:	4c371b00 	.word	0x4c371b00

08009118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800911e:	f7ff fe81 	bl	8008e24 <HAL_RCC_GetSysClockFreq>
 8009122:	4602      	mov	r2, r0
 8009124:	4b10      	ldr	r3, [pc, #64]	; (8009168 <HAL_RCC_GetHCLKFreq+0x50>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	490f      	ldr	r1, [pc, #60]	; (800916c <HAL_RCC_GetHCLKFreq+0x54>)
 8009130:	5ccb      	ldrb	r3, [r1, r3]
 8009132:	f003 031f 	and.w	r3, r3, #31
 8009136:	fa22 f303 	lsr.w	r3, r2, r3
 800913a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800913c:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <HAL_RCC_GetHCLKFreq+0x50>)
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	4a09      	ldr	r2, [pc, #36]	; (800916c <HAL_RCC_GetHCLKFreq+0x54>)
 8009146:	5cd3      	ldrb	r3, [r2, r3]
 8009148:	f003 031f 	and.w	r3, r3, #31
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	fa22 f303 	lsr.w	r3, r2, r3
 8009152:	4a07      	ldr	r2, [pc, #28]	; (8009170 <HAL_RCC_GetHCLKFreq+0x58>)
 8009154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009156:	4a07      	ldr	r2, [pc, #28]	; (8009174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <HAL_RCC_GetHCLKFreq+0x58>)
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	58024400 	.word	0x58024400
 800916c:	08011cb4 	.word	0x08011cb4
 8009170:	24000214 	.word	0x24000214
 8009174:	24000210 	.word	0x24000210

08009178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800917c:	f7ff ffcc 	bl	8009118 <HAL_RCC_GetHCLKFreq>
 8009180:	4602      	mov	r2, r0
 8009182:	4b06      	ldr	r3, [pc, #24]	; (800919c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	091b      	lsrs	r3, r3, #4
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	4904      	ldr	r1, [pc, #16]	; (80091a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800918e:	5ccb      	ldrb	r3, [r1, r3]
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009198:	4618      	mov	r0, r3
 800919a:	bd80      	pop	{r7, pc}
 800919c:	58024400 	.word	0x58024400
 80091a0:	08011cb4 	.word	0x08011cb4

080091a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80091a8:	f7ff ffb6 	bl	8009118 <HAL_RCC_GetHCLKFreq>
 80091ac:	4602      	mov	r2, r0
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	0a1b      	lsrs	r3, r3, #8
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	4904      	ldr	r1, [pc, #16]	; (80091cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80091ba:	5ccb      	ldrb	r3, [r1, r3]
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	58024400 	.word	0x58024400
 80091cc:	08011cb4 	.word	0x08011cb4

080091d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091d8:	2300      	movs	r3, #0
 80091da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091dc:	2300      	movs	r3, #0
 80091de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d03f      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091f4:	d02a      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80091f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091fa:	d824      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009200:	d018      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009206:	d81e      	bhi.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800920c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009210:	d007      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009212:	e018      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009214:	4bab      	ldr	r3, [pc, #684]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009218:	4aaa      	ldr	r2, [pc, #680]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800921a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009220:	e015      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3304      	adds	r3, #4
 8009226:	2102      	movs	r1, #2
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f9cf 	bl	800a5cc <RCCEx_PLL2_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009232:	e00c      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3324      	adds	r3, #36	; 0x24
 8009238:	2102      	movs	r1, #2
 800923a:	4618      	mov	r0, r3
 800923c:	f001 fa78 	bl	800a730 <RCCEx_PLL3_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009244:	e003      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	75fb      	strb	r3, [r7, #23]
      break;
 800924a:	e000      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800924c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009254:	4b9b      	ldr	r3, [pc, #620]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009260:	4998      	ldr	r1, [pc, #608]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009262:	4313      	orrs	r3, r2
 8009264:	650b      	str	r3, [r1, #80]	; 0x50
 8009266:	e001      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009274:	2b00      	cmp	r3, #0
 8009276:	d03d      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927c:	2b04      	cmp	r3, #4
 800927e:	d826      	bhi.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	0800929d 	.word	0x0800929d
 800928c:	080092ab 	.word	0x080092ab
 8009290:	080092bd 	.word	0x080092bd
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092d5 	.word	0x080092d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929c:	4b89      	ldr	r3, [pc, #548]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a88      	ldr	r2, [pc, #544]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092a8:	e015      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3304      	adds	r3, #4
 80092ae:	2100      	movs	r1, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 f98b 	bl	800a5cc <RCCEx_PLL2_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092ba:	e00c      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3324      	adds	r3, #36	; 0x24
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 fa34 	bl	800a730 <RCCEx_PLL3_Config>
 80092c8:	4603      	mov	r3, r0
 80092ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092cc:	e003      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	75fb      	strb	r3, [r7, #23]
      break;
 80092d2:	e000      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80092d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d109      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092dc:	4b79      	ldr	r3, [pc, #484]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e0:	f023 0207 	bic.w	r2, r3, #7
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e8:	4976      	ldr	r1, [pc, #472]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	650b      	str	r3, [r1, #80]	; 0x50
 80092ee:	e001      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d042      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009308:	d02b      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800930a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800930e:	d825      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009310:	2bc0      	cmp	r3, #192	; 0xc0
 8009312:	d028      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009314:	2bc0      	cmp	r3, #192	; 0xc0
 8009316:	d821      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009318:	2b80      	cmp	r3, #128	; 0x80
 800931a:	d016      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800931c:	2b80      	cmp	r3, #128	; 0x80
 800931e:	d81d      	bhi.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	d007      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009328:	e018      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800932a:	4b66      	ldr	r3, [pc, #408]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	4a65      	ldr	r2, [pc, #404]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009336:	e017      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3304      	adds	r3, #4
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f001 f944 	bl	800a5cc <RCCEx_PLL2_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009348:	e00e      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3324      	adds	r3, #36	; 0x24
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f9ed 	bl	800a730 <RCCEx_PLL3_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800935a:	e005      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	75fb      	strb	r3, [r7, #23]
      break;
 8009360:	e002      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009368:	7dfb      	ldrb	r3, [r7, #23]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800936e:	4b55      	ldr	r3, [pc, #340]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009372:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800937a:	4952      	ldr	r1, [pc, #328]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800937c:	4313      	orrs	r3, r2
 800937e:	650b      	str	r3, [r1, #80]	; 0x50
 8009380:	e001      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800938e:	2b00      	cmp	r3, #0
 8009390:	d049      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800939c:	d030      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800939e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093a2:	d82a      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093a8:	d02c      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80093aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093ae:	d824      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093b4:	d018      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80093b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ba:	d81e      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80093c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093c4:	d007      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80093c6:	e018      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c8:	4b3e      	ldr	r3, [pc, #248]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	4a3d      	ldr	r2, [pc, #244]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d4:	e017      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3304      	adds	r3, #4
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 f8f5 	bl	800a5cc <RCCEx_PLL2_Config>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093e6:	e00e      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3324      	adds	r3, #36	; 0x24
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 f99e 	bl	800a730 <RCCEx_PLL3_Config>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093f8:	e005      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
      break;
 80093fe:	e002      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800940c:	4b2d      	ldr	r3, [pc, #180]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800940e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009410:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800941a:	492a      	ldr	r1, [pc, #168]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800941c:	4313      	orrs	r3, r2
 800941e:	658b      	str	r3, [r1, #88]	; 0x58
 8009420:	e001      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04c      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800943c:	d030      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800943e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009442:	d82a      	bhi.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009444:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009448:	d02c      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800944a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800944e:	d824      	bhi.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009454:	d018      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800945a:	d81e      	bhi.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009464:	d007      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009466:	e018      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009468:	4b16      	ldr	r3, [pc, #88]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	4a15      	ldr	r2, [pc, #84]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800946e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009474:	e017      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3304      	adds	r3, #4
 800947a:	2100      	movs	r1, #0
 800947c:	4618      	mov	r0, r3
 800947e:	f001 f8a5 	bl	800a5cc <RCCEx_PLL2_Config>
 8009482:	4603      	mov	r3, r0
 8009484:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009486:	e00e      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3324      	adds	r3, #36	; 0x24
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f001 f94e 	bl	800a730 <RCCEx_PLL3_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009498:	e005      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]
      break;
 800949e:	e002      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80094a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10d      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094ba:	4902      	ldr	r1, [pc, #8]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	658b      	str	r3, [r1, #88]	; 0x58
 80094c0:	e004      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d032      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094dc:	2b30      	cmp	r3, #48	; 0x30
 80094de:	d01c      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094e0:	2b30      	cmp	r3, #48	; 0x30
 80094e2:	d817      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80094e4:	2b20      	cmp	r3, #32
 80094e6:	d00c      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d813      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d016      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d10f      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f4:	4baf      	ldr	r3, [pc, #700]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4aae      	ldr	r2, [pc, #696]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009500:	e00e      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3304      	adds	r3, #4
 8009506:	2102      	movs	r1, #2
 8009508:	4618      	mov	r0, r3
 800950a:	f001 f85f 	bl	800a5cc <RCCEx_PLL2_Config>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009512:	e005      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
      break;
 8009518:	e002      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800951a:	bf00      	nop
 800951c:	e000      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800951e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d109      	bne.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009526:	4ba3      	ldr	r3, [pc, #652]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800952a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009532:	49a0      	ldr	r1, [pc, #640]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009534:	4313      	orrs	r3, r2
 8009536:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009538:	e001      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d047      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800954e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009552:	d030      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009558:	d82a      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800955a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800955e:	d02c      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009564:	d824      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956a:	d018      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800956c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009570:	d81e      	bhi.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957a:	d007      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800957c:	e018      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800957e:	4b8d      	ldr	r3, [pc, #564]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	4a8c      	ldr	r2, [pc, #560]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009588:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800958a:	e017      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3304      	adds	r3, #4
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f001 f81a 	bl	800a5cc <RCCEx_PLL2_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800959c:	e00e      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3324      	adds	r3, #36	; 0x24
 80095a2:	2100      	movs	r1, #0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 f8c3 	bl	800a730 <RCCEx_PLL3_Config>
 80095aa:	4603      	mov	r3, r0
 80095ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80095ae:	e005      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	75fb      	strb	r3, [r7, #23]
      break;
 80095b4:	e002      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80095b6:	bf00      	nop
 80095b8:	e000      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80095ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095c2:	4b7c      	ldr	r3, [pc, #496]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ce:	4979      	ldr	r1, [pc, #484]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	650b      	str	r3, [r1, #80]	; 0x50
 80095d4:	e001      	b.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d049      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ee:	d02e      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80095f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095f4:	d828      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095fa:	d02a      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80095fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009600:	d822      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009606:	d026      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800960c:	d81c      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800960e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009612:	d010      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009618:	d816      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01d      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800961e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009622:	d111      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3304      	adds	r3, #4
 8009628:	2101      	movs	r1, #1
 800962a:	4618      	mov	r0, r3
 800962c:	f000 ffce 	bl	800a5cc <RCCEx_PLL2_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009634:	e012      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3324      	adds	r3, #36	; 0x24
 800963a:	2101      	movs	r1, #1
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f877 	bl	800a730 <RCCEx_PLL3_Config>
 8009642:	4603      	mov	r3, r0
 8009644:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009646:	e009      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
      break;
 800964c:	e006      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800964e:	bf00      	nop
 8009650:	e004      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009652:	bf00      	nop
 8009654:	e002      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009656:	bf00      	nop
 8009658:	e000      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800965a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009662:	4b54      	ldr	r3, [pc, #336]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009666:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800966e:	4951      	ldr	r1, [pc, #324]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009670:	4313      	orrs	r3, r2
 8009672:	650b      	str	r3, [r1, #80]	; 0x50
 8009674:	e001      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d04b      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800968c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009690:	d02e      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009696:	d828      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969c:	d02a      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800969e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a2:	d822      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80096a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a8:	d026      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80096aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096ae:	d81c      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80096b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b4:	d010      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80096b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ba:	d816      	bhi.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01d      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80096c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096c4:	d111      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3304      	adds	r3, #4
 80096ca:	2101      	movs	r1, #1
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 ff7d 	bl	800a5cc <RCCEx_PLL2_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096d6:	e012      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3324      	adds	r3, #36	; 0x24
 80096dc:	2101      	movs	r1, #1
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 f826 	bl	800a730 <RCCEx_PLL3_Config>
 80096e4:	4603      	mov	r3, r0
 80096e6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096e8:	e009      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	75fb      	strb	r3, [r7, #23]
      break;
 80096ee:	e006      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096f0:	bf00      	nop
 80096f2:	e004      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096f4:	bf00      	nop
 80096f6:	e002      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096f8:	bf00      	nop
 80096fa:	e000      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009704:	4b2b      	ldr	r3, [pc, #172]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009708:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009712:	4928      	ldr	r1, [pc, #160]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009714:	4313      	orrs	r3, r2
 8009716:	658b      	str	r3, [r1, #88]	; 0x58
 8009718:	e001      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d02f      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800972e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009732:	d00e      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009738:	d814      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d015      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800973e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009742:	d10f      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009744:	4b1b      	ldr	r3, [pc, #108]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	4a1a      	ldr	r2, [pc, #104]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800974a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800974e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009750:	e00c      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3304      	adds	r3, #4
 8009756:	2101      	movs	r1, #1
 8009758:	4618      	mov	r0, r3
 800975a:	f000 ff37 	bl	800a5cc <RCCEx_PLL2_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009762:	e003      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	75fb      	strb	r3, [r7, #23]
      break;
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800976a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d109      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977e:	490d      	ldr	r1, [pc, #52]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009780:	4313      	orrs	r3, r2
 8009782:	650b      	str	r3, [r1, #80]	; 0x50
 8009784:	e001      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d033      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979a:	2b03      	cmp	r3, #3
 800979c:	d81c      	bhi.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097df 	.word	0x080097df
 80097a8:	080097b9 	.word	0x080097b9
 80097ac:	080097c7 	.word	0x080097c7
 80097b0:	080097df 	.word	0x080097df
 80097b4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b8:	4bb8      	ldr	r3, [pc, #736]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4ab7      	ldr	r2, [pc, #732]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097c4:	e00c      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3304      	adds	r3, #4
 80097ca:	2102      	movs	r1, #2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fefd 	bl	800a5cc <RCCEx_PLL2_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097d6:	e003      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
      break;
 80097dc:	e000      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80097de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097e6:	4bad      	ldr	r3, [pc, #692]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ea:	f023 0203 	bic.w	r2, r3, #3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	49aa      	ldr	r1, [pc, #680]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097f8:	e001      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 8086 	beq.w	8009918 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800980c:	4ba4      	ldr	r3, [pc, #656]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4aa3      	ldr	r2, [pc, #652]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009818:	f7fb f998 	bl	8004b4c <HAL_GetTick>
 800981c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800981e:	e009      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009820:	f7fb f994 	bl	8004b4c <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b64      	cmp	r3, #100	; 0x64
 800982c:	d902      	bls.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	75fb      	strb	r3, [r7, #23]
        break;
 8009832:	e005      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009834:	4b9a      	ldr	r3, [pc, #616]	; (8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0ef      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d166      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009846:	4b95      	ldr	r3, [pc, #596]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009850:	4053      	eors	r3, r2
 8009852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009856:	2b00      	cmp	r3, #0
 8009858:	d013      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800985a:	4b90      	ldr	r3, [pc, #576]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009862:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009864:	4b8d      	ldr	r3, [pc, #564]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009868:	4a8c      	ldr	r2, [pc, #560]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800986a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800986e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009870:	4b8a      	ldr	r3, [pc, #552]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009874:	4a89      	ldr	r2, [pc, #548]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800987a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800987c:	4a87      	ldr	r2, [pc, #540]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800988c:	d115      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988e:	f7fb f95d 	bl	8004b4c <HAL_GetTick>
 8009892:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009894:	e00b      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009896:	f7fb f959 	bl	8004b4c <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d902      	bls.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	75fb      	strb	r3, [r7, #23]
            break;
 80098ac:	e005      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098ae:	4b7b      	ldr	r3, [pc, #492]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ed      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d126      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ce:	d10d      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80098d0:	4b72      	ldr	r3, [pc, #456]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098de:	0919      	lsrs	r1, r3, #4
 80098e0:	4b70      	ldr	r3, [pc, #448]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80098e2:	400b      	ands	r3, r1
 80098e4:	496d      	ldr	r1, [pc, #436]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	610b      	str	r3, [r1, #16]
 80098ea:	e005      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80098ec:	4b6b      	ldr	r3, [pc, #428]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	4a6a      	ldr	r2, [pc, #424]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098f6:	6113      	str	r3, [r2, #16]
 80098f8:	4b68      	ldr	r3, [pc, #416]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009906:	4965      	ldr	r1, [pc, #404]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009908:	4313      	orrs	r3, r2
 800990a:	670b      	str	r3, [r1, #112]	; 0x70
 800990c:	e004      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	75bb      	strb	r3, [r7, #22]
 8009912:	e001      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d07e      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009928:	2b28      	cmp	r3, #40	; 0x28
 800992a:	d867      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009a03 	.word	0x08009a03
 8009938:	080099fd 	.word	0x080099fd
 800993c:	080099fd 	.word	0x080099fd
 8009940:	080099fd 	.word	0x080099fd
 8009944:	080099fd 	.word	0x080099fd
 8009948:	080099fd 	.word	0x080099fd
 800994c:	080099fd 	.word	0x080099fd
 8009950:	080099fd 	.word	0x080099fd
 8009954:	080099d9 	.word	0x080099d9
 8009958:	080099fd 	.word	0x080099fd
 800995c:	080099fd 	.word	0x080099fd
 8009960:	080099fd 	.word	0x080099fd
 8009964:	080099fd 	.word	0x080099fd
 8009968:	080099fd 	.word	0x080099fd
 800996c:	080099fd 	.word	0x080099fd
 8009970:	080099fd 	.word	0x080099fd
 8009974:	080099eb 	.word	0x080099eb
 8009978:	080099fd 	.word	0x080099fd
 800997c:	080099fd 	.word	0x080099fd
 8009980:	080099fd 	.word	0x080099fd
 8009984:	080099fd 	.word	0x080099fd
 8009988:	080099fd 	.word	0x080099fd
 800998c:	080099fd 	.word	0x080099fd
 8009990:	080099fd 	.word	0x080099fd
 8009994:	08009a03 	.word	0x08009a03
 8009998:	080099fd 	.word	0x080099fd
 800999c:	080099fd 	.word	0x080099fd
 80099a0:	080099fd 	.word	0x080099fd
 80099a4:	080099fd 	.word	0x080099fd
 80099a8:	080099fd 	.word	0x080099fd
 80099ac:	080099fd 	.word	0x080099fd
 80099b0:	080099fd 	.word	0x080099fd
 80099b4:	08009a03 	.word	0x08009a03
 80099b8:	080099fd 	.word	0x080099fd
 80099bc:	080099fd 	.word	0x080099fd
 80099c0:	080099fd 	.word	0x080099fd
 80099c4:	080099fd 	.word	0x080099fd
 80099c8:	080099fd 	.word	0x080099fd
 80099cc:	080099fd 	.word	0x080099fd
 80099d0:	080099fd 	.word	0x080099fd
 80099d4:	08009a03 	.word	0x08009a03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3304      	adds	r3, #4
 80099dc:	2101      	movs	r1, #1
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fdf4 	bl	800a5cc <RCCEx_PLL2_Config>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099e8:	e00c      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3324      	adds	r3, #36	; 0x24
 80099ee:	2101      	movs	r1, #1
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fe9d 	bl	800a730 <RCCEx_PLL3_Config>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099fa:	e003      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009a00:	e000      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d109      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a16:	4921      	ldr	r1, [pc, #132]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8009a1c:	e001      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d03e      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	d820      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a7f 	.word	0x08009a7f
 8009a40:	08009a55 	.word	0x08009a55
 8009a44:	08009a67 	.word	0x08009a67
 8009a48:	08009a7f 	.word	0x08009a7f
 8009a4c:	08009a7f 	.word	0x08009a7f
 8009a50:	08009a7f 	.word	0x08009a7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	2101      	movs	r1, #1
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fdb6 	bl	800a5cc <RCCEx_PLL2_Config>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a64:	e00c      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3324      	adds	r3, #36	; 0x24
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fe5f 	bl	800a730 <RCCEx_PLL3_Config>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a76:	e003      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a7c:	e000      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d110      	bne.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	f023 0207 	bic.w	r2, r3, #7
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a92:	4902      	ldr	r1, [pc, #8]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	654b      	str	r3, [r1, #84]	; 0x54
 8009a98:	e008      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009a9a:	bf00      	nop
 8009a9c:	58024400 	.word	0x58024400
 8009aa0:	58024800 	.word	0x58024800
 8009aa4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d039      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	d820      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009ac2:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009b0b 	.word	0x08009b0b
 8009acc:	08009ae1 	.word	0x08009ae1
 8009ad0:	08009af3 	.word	0x08009af3
 8009ad4:	08009b0b 	.word	0x08009b0b
 8009ad8:	08009b0b 	.word	0x08009b0b
 8009adc:	08009b0b 	.word	0x08009b0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fd70 	bl	800a5cc <RCCEx_PLL2_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009af0:	e00c      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3324      	adds	r3, #36	; 0x24
 8009af6:	2101      	movs	r1, #1
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fe19 	bl	800a730 <RCCEx_PLL3_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009b02:	e003      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
      break;
 8009b08:	e000      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10a      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b12:	4bb7      	ldr	r3, [pc, #732]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b16:	f023 0207 	bic.w	r2, r3, #7
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b20:	49b3      	ldr	r1, [pc, #716]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	658b      	str	r3, [r1, #88]	; 0x58
 8009b26:	e001      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d04b      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b42:	d02e      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b48:	d828      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4e:	d02a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b54:	d822      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b5a:	d026      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009b5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b60:	d81c      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b66:	d010      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b6c:	d816      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01d      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b76:	d111      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fd24 	bl	800a5cc <RCCEx_PLL2_Config>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b88:	e012      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3324      	adds	r3, #36	; 0x24
 8009b8e:	2102      	movs	r1, #2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fdcd 	bl	800a730 <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b9a:	e009      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba0:	e006      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009ba2:	bf00      	nop
 8009ba4:	e004      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bb6:	4b8e      	ldr	r3, [pc, #568]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc4:	498a      	ldr	r1, [pc, #552]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	654b      	str	r3, [r1, #84]	; 0x54
 8009bca:	e001      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d04b      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009be2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009be6:	d02e      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009be8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bec:	d828      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf2:	d02a      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf8:	d822      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bfe:	d026      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c04:	d81c      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c0a:	d010      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c10:	d816      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d01d      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c1a:	d111      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	2100      	movs	r1, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fcd2 	bl	800a5cc <RCCEx_PLL2_Config>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c2c:	e012      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	3324      	adds	r3, #36	; 0x24
 8009c32:	2102      	movs	r1, #2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fd7b 	bl	800a730 <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c3e:	e009      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	75fb      	strb	r3, [r7, #23]
      break;
 8009c44:	e006      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c46:	bf00      	nop
 8009c48:	e004      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c4a:	bf00      	nop
 8009c4c:	e002      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c4e:	bf00      	nop
 8009c50:	e000      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c5a:	4b65      	ldr	r3, [pc, #404]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c68:	4961      	ldr	r1, [pc, #388]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8009c6e:	e001      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d04b      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c8a:	d02e      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009c8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c90:	d828      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c96:	d02a      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c9c:	d822      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ca2:	d026      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009ca4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ca8:	d81c      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cae:	d010      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cb4:	d816      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01d      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cbe:	d111      	bne.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 fc80 	bl	800a5cc <RCCEx_PLL2_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cd0:	e012      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3324      	adds	r3, #36	; 0x24
 8009cd6:	2102      	movs	r1, #2
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fd29 	bl	800a730 <RCCEx_PLL3_Config>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ce2:	e009      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce8:	e006      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cea:	bf00      	nop
 8009cec:	e004      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cfe:	4b3c      	ldr	r3, [pc, #240]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d0c:	4938      	ldr	r1, [pc, #224]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	658b      	str	r3, [r1, #88]	; 0x58
 8009d12:	e001      	b.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01a      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	d10a      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3324      	adds	r3, #36	; 0x24
 8009d34:	2102      	movs	r1, #2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fcfa 	bl	800a730 <RCCEx_PLL3_Config>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d46:	4b2a      	ldr	r3, [pc, #168]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d54:	4926      	ldr	r1, [pc, #152]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 0310 	and.w	r3, r3, #16
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01a      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d70:	d10a      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3324      	adds	r3, #36	; 0x24
 8009d76:	2102      	movs	r1, #2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fcd9 	bl	800a730 <RCCEx_PLL3_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d88:	4b19      	ldr	r3, [pc, #100]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d96:	4916      	ldr	r1, [pc, #88]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d036      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db2:	d01f      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db8:	d817      	bhi.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc2:	d009      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009dc4:	e011      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	2100      	movs	r1, #0
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 fbfd 	bl	800a5cc <RCCEx_PLL2_Config>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009dd6:	e00e      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3324      	adds	r3, #36	; 0x24
 8009ddc:	2102      	movs	r1, #2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fca6 	bl	800a730 <RCCEx_PLL3_Config>
 8009de4:	4603      	mov	r3, r0
 8009de6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009de8:	e005      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	75fb      	strb	r3, [r7, #23]
      break;
 8009dee:	e002      	b.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009df0:	58024400 	.word	0x58024400
      break;
 8009df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dfc:	4b93      	ldr	r3, [pc, #588]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e0a:	4990      	ldr	r1, [pc, #576]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	658b      	str	r3, [r1, #88]	; 0x58
 8009e10:	e001      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d033      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e2c:	d01c      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009e2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e32:	d816      	bhi.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e38:	d003      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e3e:	d007      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009e40:	e00f      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e42:	4b82      	ldr	r3, [pc, #520]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	4a81      	ldr	r2, [pc, #516]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e4e:	e00c      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	3324      	adds	r3, #36	; 0x24
 8009e54:	2101      	movs	r1, #1
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fc6a 	bl	800a730 <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e60:	e003      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	75fb      	strb	r3, [r7, #23]
      break;
 8009e66:	e000      	b.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e70:	4b76      	ldr	r3, [pc, #472]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e7e:	4973      	ldr	r1, [pc, #460]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	654b      	str	r3, [r1, #84]	; 0x54
 8009e84:	e001      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d029      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ea2:	d007      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009ea4:	e00f      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea6:	4b69      	ldr	r3, [pc, #420]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	4a68      	ldr	r2, [pc, #416]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009eb2:	e00b      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	2102      	movs	r1, #2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fb86 	bl	800a5cc <RCCEx_PLL2_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ec4:	e002      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d109      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ed2:	4b5e      	ldr	r3, [pc, #376]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ede:	495b      	ldr	r1, [pc, #364]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ee4:	e001      	b.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3324      	adds	r3, #36	; 0x24
 8009efa:	2102      	movs	r1, #2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fc17 	bl	800a730 <RCCEx_PLL3_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d030      	beq.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f20:	d017      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f26:	d811      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f2c:	d013      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f32:	d80b      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d010      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3c:	d106      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f3e:	4b43      	ldr	r3, [pc, #268]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	4a42      	ldr	r2, [pc, #264]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009f4a:	e007      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f50:	e004      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f52:	bf00      	nop
 8009f54:	e002      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f56:	bf00      	nop
 8009f58:	e000      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f62:	4b3a      	ldr	r3, [pc, #232]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f6e:	4937      	ldr	r1, [pc, #220]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	654b      	str	r3, [r1, #84]	; 0x54
 8009f74:	e001      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d008      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f86:	4b31      	ldr	r3, [pc, #196]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f92:	492e      	ldr	r1, [pc, #184]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d009      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009fa4:	4b29      	ldr	r3, [pc, #164]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fb2:	4926      	ldr	r1, [pc, #152]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d008      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fc4:	4b21      	ldr	r3, [pc, #132]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fd0:	491e      	ldr	r1, [pc, #120]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00d      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fe2:	4b1a      	ldr	r3, [pc, #104]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	4a19      	ldr	r2, [pc, #100]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fec:	6113      	str	r3, [r2, #16]
 8009fee:	4b17      	ldr	r3, [pc, #92]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009ff8:	4914      	ldr	r1, [pc, #80]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	da08      	bge.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a006:	4b11      	ldr	r3, [pc, #68]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	490e      	ldr	r1, [pc, #56]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a014:	4313      	orrs	r3, r2
 800a016:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d009      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a024:	4b09      	ldr	r3, [pc, #36]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a032:	4906      	ldr	r1, [pc, #24]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a034:	4313      	orrs	r3, r2
 800a036:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a038:	7dbb      	ldrb	r3, [r7, #22]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
}
 800a044:	4618      	mov	r0, r3
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	58024400 	.word	0x58024400

0800a050 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a054:	f7ff f860 	bl	8009118 <HAL_RCC_GetHCLKFreq>
 800a058:	4602      	mov	r2, r0
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	f003 0307 	and.w	r3, r3, #7
 800a064:	4904      	ldr	r1, [pc, #16]	; (800a078 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a066:	5ccb      	ldrb	r3, [r1, r3]
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a070:	4618      	mov	r0, r3
 800a072:	bd80      	pop	{r7, pc}
 800a074:	58024400 	.word	0x58024400
 800a078:	08011cb4 	.word	0x08011cb4

0800a07c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b089      	sub	sp, #36	; 0x24
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a084:	4ba1      	ldr	r3, [pc, #644]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	f003 0303 	and.w	r3, r3, #3
 800a08c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a08e:	4b9f      	ldr	r3, [pc, #636]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a092:	0b1b      	lsrs	r3, r3, #12
 800a094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a098:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a09a:	4b9c      	ldr	r3, [pc, #624]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	091b      	lsrs	r3, r3, #4
 800a0a0:	f003 0301 	and.w	r3, r3, #1
 800a0a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a0a6:	4b99      	ldr	r3, [pc, #612]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0aa:	08db      	lsrs	r3, r3, #3
 800a0ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 8111 	beq.w	800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	f000 8083 	beq.w	800a1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	f200 80a1 	bhi.w	800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d056      	beq.n	800a194 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0e6:	e099      	b.n	800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0e8:	4b88      	ldr	r3, [pc, #544]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0320 	and.w	r3, r3, #32
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d02d      	beq.n	800a150 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0f4:	4b85      	ldr	r3, [pc, #532]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	08db      	lsrs	r3, r3, #3
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	4a84      	ldr	r2, [pc, #528]	; (800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a100:	fa22 f303 	lsr.w	r3, r2, r3
 800a104:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	ee07 3a90 	vmov	s15, r3
 800a10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11e:	4b7b      	ldr	r3, [pc, #492]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a126:	ee07 3a90 	vmov	s15, r3
 800a12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a132:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a14a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a14e:	e087      	b.n	800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	ee07 3a90 	vmov	s15, r3
 800a156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a318 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a162:	4b6a      	ldr	r3, [pc, #424]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a172:	ed97 6a03 	vldr	s12, [r7, #12]
 800a176:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a192:	e065      	b.n	800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a31c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a6:	4b59      	ldr	r3, [pc, #356]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d6:	e043      	b.n	800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a320 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ea:	4b48      	ldr	r3, [pc, #288]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a21a:	e021      	b.n	800a260 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	ee07 3a90 	vmov	s15, r3
 800a222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a226:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a31c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a22e:	4b37      	ldr	r3, [pc, #220]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	ee07 3a90 	vmov	s15, r3
 800a23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a242:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a314 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a25a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a25e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a260:	4b2a      	ldr	r3, [pc, #168]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	0a5b      	lsrs	r3, r3, #9
 800a266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a286:	ee17 2a90 	vmov	r2, s15
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a28e:	4b1f      	ldr	r3, [pc, #124]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a292:	0c1b      	lsrs	r3, r3, #16
 800a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b4:	ee17 2a90 	vmov	r2, s15
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a2bc:	4b13      	ldr	r3, [pc, #76]	; (800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	0e1b      	lsrs	r3, r3, #24
 800a2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c6:	ee07 3a90 	vmov	s15, r3
 800a2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2e2:	ee17 2a90 	vmov	r2, s15
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2ea:	e008      	b.n	800a2fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	609a      	str	r2, [r3, #8]
}
 800a2fe:	bf00      	nop
 800a300:	3724      	adds	r7, #36	; 0x24
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	58024400 	.word	0x58024400
 800a310:	03d09000 	.word	0x03d09000
 800a314:	46000000 	.word	0x46000000
 800a318:	4c742400 	.word	0x4c742400
 800a31c:	4a742400 	.word	0x4a742400
 800a320:	4c371b00 	.word	0x4c371b00

0800a324 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a324:	b480      	push	{r7}
 800a326:	b089      	sub	sp, #36	; 0x24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a32c:	4ba1      	ldr	r3, [pc, #644]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a330:	f003 0303 	and.w	r3, r3, #3
 800a334:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a336:	4b9f      	ldr	r3, [pc, #636]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33a:	0d1b      	lsrs	r3, r3, #20
 800a33c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a340:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a342:	4b9c      	ldr	r3, [pc, #624]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a34e:	4b99      	ldr	r3, [pc, #612]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a352:	08db      	lsrs	r3, r3, #3
 800a354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	fb02 f303 	mul.w	r3, r2, r3
 800a35e:	ee07 3a90 	vmov	s15, r3
 800a362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 8111 	beq.w	800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b02      	cmp	r3, #2
 800a376:	f000 8083 	beq.w	800a480 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	f200 80a1 	bhi.w	800a4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d056      	beq.n	800a43c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a38e:	e099      	b.n	800a4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a390:	4b88      	ldr	r3, [pc, #544]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0320 	and.w	r3, r3, #32
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d02d      	beq.n	800a3f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a39c:	4b85      	ldr	r3, [pc, #532]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	08db      	lsrs	r3, r3, #3
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	4a84      	ldr	r2, [pc, #528]	; (800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	ee07 3a90 	vmov	s15, r3
 800a3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c6:	4b7b      	ldr	r3, [pc, #492]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a3f6:	e087      	b.n	800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a402:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a40a:	4b6a      	ldr	r3, [pc, #424]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a412:	ee07 3a90 	vmov	s15, r3
 800a416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a41e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a43a:	e065      	b.n	800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a446:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a44e:	4b59      	ldr	r3, [pc, #356]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a462:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a47e:	e043      	b.n	800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a492:	4b48      	ldr	r3, [pc, #288]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4c2:	e021      	b.n	800a508 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4d6:	4b37      	ldr	r3, [pc, #220]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a5bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a506:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a508:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	0a5b      	lsrs	r3, r3, #9
 800a50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a51e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a522:	edd7 6a07 	vldr	s13, [r7, #28]
 800a526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a52a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a52e:	ee17 2a90 	vmov	r2, s15
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a536:	4b1f      	ldr	r3, [pc, #124]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53a:	0c1b      	lsrs	r3, r3, #16
 800a53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a54c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a550:	edd7 6a07 	vldr	s13, [r7, #28]
 800a554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a55c:	ee17 2a90 	vmov	r2, s15
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a564:	4b13      	ldr	r3, [pc, #76]	; (800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	0e1b      	lsrs	r3, r3, #24
 800a56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a56e:	ee07 3a90 	vmov	s15, r3
 800a572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a57a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a57e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a58a:	ee17 2a90 	vmov	r2, s15
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a592:	e008      	b.n	800a5a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	609a      	str	r2, [r3, #8]
}
 800a5a6:	bf00      	nop
 800a5a8:	3724      	adds	r7, #36	; 0x24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	03d09000 	.word	0x03d09000
 800a5bc:	46000000 	.word	0x46000000
 800a5c0:	4c742400 	.word	0x4c742400
 800a5c4:	4a742400 	.word	0x4a742400
 800a5c8:	4c371b00 	.word	0x4c371b00

0800a5cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5da:	4b53      	ldr	r3, [pc, #332]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d101      	bne.n	800a5ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e099      	b.n	800a71e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a5ea:	4b4f      	ldr	r3, [pc, #316]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a4e      	ldr	r2, [pc, #312]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a5f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5f6:	f7fa faa9 	bl	8004b4c <HAL_GetTick>
 800a5fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5fc:	e008      	b.n	800a610 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a5fe:	f7fa faa5 	bl	8004b4c <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d901      	bls.n	800a610 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e086      	b.n	800a71e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a610:	4b45      	ldr	r3, [pc, #276]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f0      	bne.n	800a5fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a61c:	4b42      	ldr	r3, [pc, #264]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a620:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	031b      	lsls	r3, r3, #12
 800a62a:	493f      	ldr	r1, [pc, #252]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	628b      	str	r3, [r1, #40]	; 0x28
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	3b01      	subs	r3, #1
 800a636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	3b01      	subs	r3, #1
 800a640:	025b      	lsls	r3, r3, #9
 800a642:	b29b      	uxth	r3, r3
 800a644:	431a      	orrs	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	041b      	lsls	r3, r3, #16
 800a64e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a652:	431a      	orrs	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	3b01      	subs	r3, #1
 800a65a:	061b      	lsls	r3, r3, #24
 800a65c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a660:	4931      	ldr	r1, [pc, #196]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a662:	4313      	orrs	r3, r2
 800a664:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a666:	4b30      	ldr	r3, [pc, #192]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	492d      	ldr	r1, [pc, #180]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a674:	4313      	orrs	r3, r2
 800a676:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a678:	4b2b      	ldr	r3, [pc, #172]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	f023 0220 	bic.w	r2, r3, #32
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	4928      	ldr	r1, [pc, #160]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a686:	4313      	orrs	r3, r2
 800a688:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a68a:	4b27      	ldr	r3, [pc, #156]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68e:	4a26      	ldr	r2, [pc, #152]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a690:	f023 0310 	bic.w	r3, r3, #16
 800a694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a696:	4b24      	ldr	r3, [pc, #144]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <RCCEx_PLL2_Config+0x160>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	69d2      	ldr	r2, [r2, #28]
 800a6a2:	00d2      	lsls	r2, r2, #3
 800a6a4:	4920      	ldr	r1, [pc, #128]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a6aa:	4b1f      	ldr	r3, [pc, #124]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	4a1e      	ldr	r2, [pc, #120]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6b0:	f043 0310 	orr.w	r3, r3, #16
 800a6b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d106      	bne.n	800a6ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a6bc:	4b1a      	ldr	r3, [pc, #104]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	4a19      	ldr	r2, [pc, #100]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6c8:	e00f      	b.n	800a6ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d106      	bne.n	800a6de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a6d0:	4b15      	ldr	r3, [pc, #84]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	4a14      	ldr	r2, [pc, #80]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6dc:	e005      	b.n	800a6ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a6de:	4b12      	ldr	r3, [pc, #72]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	4a11      	ldr	r2, [pc, #68]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a6ea:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a0e      	ldr	r2, [pc, #56]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a6f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6f6:	f7fa fa29 	bl	8004b4c <HAL_GetTick>
 800a6fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6fc:	e008      	b.n	800a710 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6fe:	f7fa fa25 	bl	8004b4c <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d901      	bls.n	800a710 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a70c:	2303      	movs	r3, #3
 800a70e:	e006      	b.n	800a71e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a710:	4b05      	ldr	r3, [pc, #20]	; (800a728 <RCCEx_PLL2_Config+0x15c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0f0      	beq.n	800a6fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	58024400 	.word	0x58024400
 800a72c:	ffff0007 	.word	0xffff0007

0800a730 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a73e:	4b53      	ldr	r3, [pc, #332]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	f003 0303 	and.w	r3, r3, #3
 800a746:	2b03      	cmp	r3, #3
 800a748:	d101      	bne.n	800a74e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e099      	b.n	800a882 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a74e:	4b4f      	ldr	r3, [pc, #316]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a4e      	ldr	r2, [pc, #312]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a75a:	f7fa f9f7 	bl	8004b4c <HAL_GetTick>
 800a75e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a760:	e008      	b.n	800a774 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a762:	f7fa f9f3 	bl	8004b4c <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d901      	bls.n	800a774 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e086      	b.n	800a882 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a774:	4b45      	ldr	r3, [pc, #276]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f0      	bne.n	800a762 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a780:	4b42      	ldr	r3, [pc, #264]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a784:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	493f      	ldr	r1, [pc, #252]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a790:	4313      	orrs	r3, r2
 800a792:	628b      	str	r3, [r1, #40]	; 0x28
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	3b01      	subs	r3, #1
 800a79a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	025b      	lsls	r3, r3, #9
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	431a      	orrs	r2, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	041b      	lsls	r3, r3, #16
 800a7b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	061b      	lsls	r3, r3, #24
 800a7c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7c4:	4931      	ldr	r1, [pc, #196]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a7ca:	4b30      	ldr	r3, [pc, #192]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	492d      	ldr	r1, [pc, #180]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a7dc:	4b2b      	ldr	r3, [pc, #172]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	4928      	ldr	r1, [pc, #160]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a7ee:	4b27      	ldr	r3, [pc, #156]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f2:	4a26      	ldr	r2, [pc, #152]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a7fa:	4b24      	ldr	r3, [pc, #144]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a7fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7fe:	4b24      	ldr	r3, [pc, #144]	; (800a890 <RCCEx_PLL3_Config+0x160>)
 800a800:	4013      	ands	r3, r2
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	69d2      	ldr	r2, [r2, #28]
 800a806:	00d2      	lsls	r2, r2, #3
 800a808:	4920      	ldr	r1, [pc, #128]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a80e:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	4a1e      	ldr	r2, [pc, #120]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a820:	4b1a      	ldr	r3, [pc, #104]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	4a19      	ldr	r2, [pc, #100]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a826:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a82a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a82c:	e00f      	b.n	800a84e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d106      	bne.n	800a842 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a834:	4b15      	ldr	r3, [pc, #84]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a838:	4a14      	ldr	r2, [pc, #80]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a83a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a83e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a840:	e005      	b.n	800a84e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a842:	4b12      	ldr	r3, [pc, #72]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	4a11      	ldr	r2, [pc, #68]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a848:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a84c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a0e      	ldr	r2, [pc, #56]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a85a:	f7fa f977 	bl	8004b4c <HAL_GetTick>
 800a85e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a860:	e008      	b.n	800a874 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a862:	f7fa f973 	bl	8004b4c <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d901      	bls.n	800a874 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a870:	2303      	movs	r3, #3
 800a872:	e006      	b.n	800a882 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a874:	4b05      	ldr	r3, [pc, #20]	; (800a88c <RCCEx_PLL3_Config+0x15c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d0f0      	beq.n	800a862 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	58024400 	.word	0x58024400
 800a890:	ffff0007 	.word	0xffff0007

0800a894 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e0f1      	b.n	800aa8a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a78      	ldr	r2, [pc, #480]	; (800aa94 <HAL_SPI_Init+0x200>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d00f      	beq.n	800a8d6 <HAL_SPI_Init+0x42>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a77      	ldr	r2, [pc, #476]	; (800aa98 <HAL_SPI_Init+0x204>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d00a      	beq.n	800a8d6 <HAL_SPI_Init+0x42>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a75      	ldr	r2, [pc, #468]	; (800aa9c <HAL_SPI_Init+0x208>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d005      	beq.n	800a8d6 <HAL_SPI_Init+0x42>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	2b0f      	cmp	r3, #15
 800a8d0:	d901      	bls.n	800a8d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e0d9      	b.n	800aa8a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f8e2 	bl	800aaa0 <SPI_GetPacketSize>
 800a8dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a6c      	ldr	r2, [pc, #432]	; (800aa94 <HAL_SPI_Init+0x200>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d00c      	beq.n	800a902 <HAL_SPI_Init+0x6e>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a6a      	ldr	r2, [pc, #424]	; (800aa98 <HAL_SPI_Init+0x204>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d007      	beq.n	800a902 <HAL_SPI_Init+0x6e>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a69      	ldr	r2, [pc, #420]	; (800aa9c <HAL_SPI_Init+0x208>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d002      	beq.n	800a902 <HAL_SPI_Init+0x6e>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b08      	cmp	r3, #8
 800a900:	d811      	bhi.n	800a926 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a906:	4a63      	ldr	r2, [pc, #396]	; (800aa94 <HAL_SPI_Init+0x200>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d009      	beq.n	800a920 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a61      	ldr	r2, [pc, #388]	; (800aa98 <HAL_SPI_Init+0x204>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d004      	beq.n	800a920 <HAL_SPI_Init+0x8c>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a60      	ldr	r2, [pc, #384]	; (800aa9c <HAL_SPI_Init+0x208>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d104      	bne.n	800a92a <HAL_SPI_Init+0x96>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b10      	cmp	r3, #16
 800a924:	d901      	bls.n	800a92a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e0af      	b.n	800aa8a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d106      	bne.n	800a944 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7f8 fc32 	bl	80031a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 0201 	bic.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a966:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a970:	d119      	bne.n	800a9a6 <HAL_SPI_Init+0x112>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a97a:	d103      	bne.n	800a984 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a980:	2b00      	cmp	r3, #0
 800a982:	d008      	beq.n	800a996 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10c      	bne.n	800a9a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a994:	d107      	bne.n	800a9a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	69da      	ldr	r2, [r3, #28]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b8:	ea42 0103 	orr.w	r1, r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	431a      	orrs	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	431a      	orrs	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa06:	ea42 0103 	orr.w	r1, r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d113      	bne.n	800aa46 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa30:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa44:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f022 0201 	bic.w	r2, r2, #1
 800aa54:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	40013000 	.word	0x40013000
 800aa98:	40003800 	.word	0x40003800
 800aa9c:	40003c00 	.word	0x40003c00

0800aaa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaac:	095b      	lsrs	r3, r3, #5
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	3301      	adds	r3, #1
 800aab8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	3307      	adds	r3, #7
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	fb02 f303 	mul.w	r3, r2, r3
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d101      	bne.n	800aae8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e049      	b.n	800ab7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d106      	bne.n	800ab02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7f9 fa21 	bl	8003f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2202      	movs	r2, #2
 800ab06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	3304      	adds	r3, #4
 800ab12:	4619      	mov	r1, r3
 800ab14:	4610      	mov	r0, r2
 800ab16:	f000 fc91 	bl	800b43c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d001      	beq.n	800ab9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e054      	b.n	800ac46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f042 0201 	orr.w	r2, r2, #1
 800abb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a26      	ldr	r2, [pc, #152]	; (800ac54 <HAL_TIM_Base_Start_IT+0xd0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d022      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc6:	d01d      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a22      	ldr	r2, [pc, #136]	; (800ac58 <HAL_TIM_Base_Start_IT+0xd4>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d018      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a21      	ldr	r2, [pc, #132]	; (800ac5c <HAL_TIM_Base_Start_IT+0xd8>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d013      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a1f      	ldr	r2, [pc, #124]	; (800ac60 <HAL_TIM_Base_Start_IT+0xdc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d00e      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a1e      	ldr	r2, [pc, #120]	; (800ac64 <HAL_TIM_Base_Start_IT+0xe0>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d009      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a1c      	ldr	r2, [pc, #112]	; (800ac68 <HAL_TIM_Base_Start_IT+0xe4>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d004      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x80>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a1b      	ldr	r2, [pc, #108]	; (800ac6c <HAL_TIM_Base_Start_IT+0xe8>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d115      	bne.n	800ac30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	4b19      	ldr	r3, [pc, #100]	; (800ac70 <HAL_TIM_Base_Start_IT+0xec>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b06      	cmp	r3, #6
 800ac14:	d015      	beq.n	800ac42 <HAL_TIM_Base_Start_IT+0xbe>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac1c:	d011      	beq.n	800ac42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f042 0201 	orr.w	r2, r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac2e:	e008      	b.n	800ac42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e000      	b.n	800ac44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	40010000 	.word	0x40010000
 800ac58:	40000400 	.word	0x40000400
 800ac5c:	40000800 	.word	0x40000800
 800ac60:	40000c00 	.word	0x40000c00
 800ac64:	40010400 	.word	0x40010400
 800ac68:	40001800 	.word	0x40001800
 800ac6c:	40014000 	.word	0x40014000
 800ac70:	00010007 	.word	0x00010007

0800ac74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f022 0201 	bic.w	r2, r2, #1
 800ac8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	6a1a      	ldr	r2, [r3, #32]
 800ac92:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac96:	4013      	ands	r3, r2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10f      	bne.n	800acbc <HAL_TIM_Base_Stop_IT+0x48>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6a1a      	ldr	r2, [r3, #32]
 800aca2:	f240 4344 	movw	r3, #1092	; 0x444
 800aca6:	4013      	ands	r3, r2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d107      	bne.n	800acbc <HAL_TIM_Base_Stop_IT+0x48>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f022 0201 	bic.w	r2, r2, #1
 800acba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e049      	b.n	800ad78 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f841 	bl	800ad80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2202      	movs	r2, #2
 800ad02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f000 fb93 	bl	800b43c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d122      	bne.n	800adf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0302 	and.w	r3, r3, #2
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d11b      	bne.n	800adf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0202 	mvn.w	r2, #2
 800adc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	f003 0303 	and.w	r3, r3, #3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fb12 	bl	800b400 <HAL_TIM_IC_CaptureCallback>
 800addc:	e005      	b.n	800adea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fb04 	bl	800b3ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fb15 	bl	800b414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d122      	bne.n	800ae44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d11b      	bne.n	800ae44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f06f 0204 	mvn.w	r2, #4
 800ae14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2202      	movs	r2, #2
 800ae1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fae8 	bl	800b400 <HAL_TIM_IC_CaptureCallback>
 800ae30:	e005      	b.n	800ae3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fada 	bl	800b3ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 faeb 	bl	800b414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	f003 0308 	and.w	r3, r3, #8
 800ae4e:	2b08      	cmp	r3, #8
 800ae50:	d122      	bne.n	800ae98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d11b      	bne.n	800ae98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f06f 0208 	mvn.w	r2, #8
 800ae68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fabe 	bl	800b400 <HAL_TIM_IC_CaptureCallback>
 800ae84:	e005      	b.n	800ae92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fab0 	bl	800b3ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fac1 	bl	800b414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f003 0310 	and.w	r3, r3, #16
 800aea2:	2b10      	cmp	r3, #16
 800aea4:	d122      	bne.n	800aeec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f003 0310 	and.w	r3, r3, #16
 800aeb0:	2b10      	cmp	r3, #16
 800aeb2:	d11b      	bne.n	800aeec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f06f 0210 	mvn.w	r2, #16
 800aebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2208      	movs	r2, #8
 800aec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d003      	beq.n	800aeda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fa94 	bl	800b400 <HAL_TIM_IC_CaptureCallback>
 800aed8:	e005      	b.n	800aee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa86 	bl	800b3ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fa97 	bl	800b414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d10e      	bne.n	800af18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b01      	cmp	r3, #1
 800af06:	d107      	bne.n	800af18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f06f 0201 	mvn.w	r2, #1
 800af10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7f7 fa34 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af22:	2b80      	cmp	r3, #128	; 0x80
 800af24:	d10e      	bne.n	800af44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af30:	2b80      	cmp	r3, #128	; 0x80
 800af32:	d107      	bne.n	800af44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 ffa0 	bl	800be84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af52:	d10e      	bne.n	800af72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af5e:	2b80      	cmp	r3, #128	; 0x80
 800af60:	d107      	bne.n	800af72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 ff93 	bl	800be98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af7c:	2b40      	cmp	r3, #64	; 0x40
 800af7e:	d10e      	bne.n	800af9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af8a:	2b40      	cmp	r3, #64	; 0x40
 800af8c:	d107      	bne.n	800af9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fa45 	bl	800b428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	2b20      	cmp	r3, #32
 800afaa:	d10e      	bne.n	800afca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	f003 0320 	and.w	r3, r3, #32
 800afb6:	2b20      	cmp	r3, #32
 800afb8:	d107      	bne.n	800afca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f06f 0220 	mvn.w	r2, #32
 800afc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 ff53 	bl	800be70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b086      	sub	sp, #24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afea:	2b01      	cmp	r3, #1
 800afec:	d101      	bne.n	800aff2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afee:	2302      	movs	r3, #2
 800aff0:	e0ff      	b.n	800b1f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b14      	cmp	r3, #20
 800affe:	f200 80f0 	bhi.w	800b1e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b002:	a201      	add	r2, pc, #4	; (adr r2, 800b008 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b05d 	.word	0x0800b05d
 800b00c:	0800b1e3 	.word	0x0800b1e3
 800b010:	0800b1e3 	.word	0x0800b1e3
 800b014:	0800b1e3 	.word	0x0800b1e3
 800b018:	0800b09d 	.word	0x0800b09d
 800b01c:	0800b1e3 	.word	0x0800b1e3
 800b020:	0800b1e3 	.word	0x0800b1e3
 800b024:	0800b1e3 	.word	0x0800b1e3
 800b028:	0800b0df 	.word	0x0800b0df
 800b02c:	0800b1e3 	.word	0x0800b1e3
 800b030:	0800b1e3 	.word	0x0800b1e3
 800b034:	0800b1e3 	.word	0x0800b1e3
 800b038:	0800b11f 	.word	0x0800b11f
 800b03c:	0800b1e3 	.word	0x0800b1e3
 800b040:	0800b1e3 	.word	0x0800b1e3
 800b044:	0800b1e3 	.word	0x0800b1e3
 800b048:	0800b161 	.word	0x0800b161
 800b04c:	0800b1e3 	.word	0x0800b1e3
 800b050:	0800b1e3 	.word	0x0800b1e3
 800b054:	0800b1e3 	.word	0x0800b1e3
 800b058:	0800b1a1 	.word	0x0800b1a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	4618      	mov	r0, r3
 800b064:	f000 fa84 	bl	800b570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0208 	orr.w	r2, r2, #8
 800b076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f022 0204 	bic.w	r2, r2, #4
 800b086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6999      	ldr	r1, [r3, #24]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	619a      	str	r2, [r3, #24]
      break;
 800b09a:	e0a5      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 faf4 	bl	800b690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699a      	ldr	r2, [r3, #24]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6999      	ldr	r1, [r3, #24]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	021a      	lsls	r2, r3, #8
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	619a      	str	r2, [r3, #24]
      break;
 800b0dc:	e084      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 fb5d 	bl	800b7a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	69da      	ldr	r2, [r3, #28]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0208 	orr.w	r2, r2, #8
 800b0f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	69da      	ldr	r2, [r3, #28]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0204 	bic.w	r2, r2, #4
 800b108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	69d9      	ldr	r1, [r3, #28]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	691a      	ldr	r2, [r3, #16]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	61da      	str	r2, [r3, #28]
      break;
 800b11c:	e064      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fbc5 	bl	800b8b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69da      	ldr	r2, [r3, #28]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69da      	ldr	r2, [r3, #28]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69d9      	ldr	r1, [r3, #28]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	021a      	lsls	r2, r3, #8
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	430a      	orrs	r2, r1
 800b15c:	61da      	str	r2, [r3, #28]
      break;
 800b15e:	e043      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	4618      	mov	r0, r3
 800b168:	f000 fc0e 	bl	800b988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0208 	orr.w	r2, r2, #8
 800b17a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f022 0204 	bic.w	r2, r2, #4
 800b18a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	691a      	ldr	r2, [r3, #16]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b19e:	e023      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 fc52 	bl	800ba50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	021a      	lsls	r2, r3, #8
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b1e0:	e002      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop

0800b1fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b210:	2b01      	cmp	r3, #1
 800b212:	d101      	bne.n	800b218 <HAL_TIM_ConfigClockSource+0x1c>
 800b214:	2302      	movs	r3, #2
 800b216:	e0dc      	b.n	800b3d2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	4b6a      	ldr	r3, [pc, #424]	; (800b3dc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b234:	4013      	ands	r3, r2
 800b236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b23e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a64      	ldr	r2, [pc, #400]	; (800b3e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	f000 80a9 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b254:	4a62      	ldr	r2, [pc, #392]	; (800b3e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b256:	4293      	cmp	r3, r2
 800b258:	f200 80ae 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b25c:	4a61      	ldr	r2, [pc, #388]	; (800b3e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	f000 80a1 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b264:	4a5f      	ldr	r2, [pc, #380]	; (800b3e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b266:	4293      	cmp	r3, r2
 800b268:	f200 80a6 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b26c:	4a5e      	ldr	r2, [pc, #376]	; (800b3e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	f000 8099 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b274:	4a5c      	ldr	r2, [pc, #368]	; (800b3e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b276:	4293      	cmp	r3, r2
 800b278:	f200 809e 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b27c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b280:	f000 8091 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b284:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b288:	f200 8096 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b28c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b290:	f000 8089 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b298:	f200 808e 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b29c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a0:	d03e      	beq.n	800b320 <HAL_TIM_ConfigClockSource+0x124>
 800b2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a6:	f200 8087 	bhi.w	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ae:	f000 8086 	beq.w	800b3be <HAL_TIM_ConfigClockSource+0x1c2>
 800b2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b6:	d87f      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2b8:	2b70      	cmp	r3, #112	; 0x70
 800b2ba:	d01a      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0xf6>
 800b2bc:	2b70      	cmp	r3, #112	; 0x70
 800b2be:	d87b      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2c0:	2b60      	cmp	r3, #96	; 0x60
 800b2c2:	d050      	beq.n	800b366 <HAL_TIM_ConfigClockSource+0x16a>
 800b2c4:	2b60      	cmp	r3, #96	; 0x60
 800b2c6:	d877      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2c8:	2b50      	cmp	r3, #80	; 0x50
 800b2ca:	d03c      	beq.n	800b346 <HAL_TIM_ConfigClockSource+0x14a>
 800b2cc:	2b50      	cmp	r3, #80	; 0x50
 800b2ce:	d873      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2d0:	2b40      	cmp	r3, #64	; 0x40
 800b2d2:	d058      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x18a>
 800b2d4:	2b40      	cmp	r3, #64	; 0x40
 800b2d6:	d86f      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2d8:	2b30      	cmp	r3, #48	; 0x30
 800b2da:	d064      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2dc:	2b30      	cmp	r3, #48	; 0x30
 800b2de:	d86b      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	d060      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2e4:	2b20      	cmp	r3, #32
 800b2e6:	d867      	bhi.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d05c      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2ec:	2b10      	cmp	r3, #16
 800b2ee:	d05a      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2f0:	e062      	b.n	800b3b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6818      	ldr	r0, [r3, #0]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	6899      	ldr	r1, [r3, #8]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	f000 fc89 	bl	800bc18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	609a      	str	r2, [r3, #8]
      break;
 800b31e:	e04f      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	6899      	ldr	r1, [r3, #8]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f000 fc72 	bl	800bc18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689a      	ldr	r2, [r3, #8]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b342:	609a      	str	r2, [r3, #8]
      break;
 800b344:	e03c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	6859      	ldr	r1, [r3, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	461a      	mov	r2, r3
 800b354:	f000 fbe2 	bl	800bb1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2150      	movs	r1, #80	; 0x50
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fc3c 	bl	800bbdc <TIM_ITRx_SetConfig>
      break;
 800b364:	e02c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6818      	ldr	r0, [r3, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6859      	ldr	r1, [r3, #4]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	461a      	mov	r2, r3
 800b374:	f000 fc01 	bl	800bb7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2160      	movs	r1, #96	; 0x60
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fc2c 	bl	800bbdc <TIM_ITRx_SetConfig>
      break;
 800b384:	e01c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6859      	ldr	r1, [r3, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	461a      	mov	r2, r3
 800b394:	f000 fbc2 	bl	800bb1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2140      	movs	r1, #64	; 0x40
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fc1c 	bl	800bbdc <TIM_ITRx_SetConfig>
      break;
 800b3a4:	e00c      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f000 fc13 	bl	800bbdc <TIM_ITRx_SetConfig>
      break;
 800b3b6:	e003      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b3bc:	e000      	b.n	800b3c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b3be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	ffceff88 	.word	0xffceff88
 800b3e0:	00100040 	.word	0x00100040
 800b3e4:	00100030 	.word	0x00100030
 800b3e8:	00100020 	.word	0x00100020

0800b3ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a40      	ldr	r2, [pc, #256]	; (800b550 <TIM_Base_SetConfig+0x114>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d013      	beq.n	800b47c <TIM_Base_SetConfig+0x40>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b45a:	d00f      	beq.n	800b47c <TIM_Base_SetConfig+0x40>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a3d      	ldr	r2, [pc, #244]	; (800b554 <TIM_Base_SetConfig+0x118>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d00b      	beq.n	800b47c <TIM_Base_SetConfig+0x40>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a3c      	ldr	r2, [pc, #240]	; (800b558 <TIM_Base_SetConfig+0x11c>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d007      	beq.n	800b47c <TIM_Base_SetConfig+0x40>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a3b      	ldr	r2, [pc, #236]	; (800b55c <TIM_Base_SetConfig+0x120>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d003      	beq.n	800b47c <TIM_Base_SetConfig+0x40>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a3a      	ldr	r2, [pc, #232]	; (800b560 <TIM_Base_SetConfig+0x124>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d108      	bne.n	800b48e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a2f      	ldr	r2, [pc, #188]	; (800b550 <TIM_Base_SetConfig+0x114>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d01f      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49c:	d01b      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a2c      	ldr	r2, [pc, #176]	; (800b554 <TIM_Base_SetConfig+0x118>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d017      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a2b      	ldr	r2, [pc, #172]	; (800b558 <TIM_Base_SetConfig+0x11c>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d013      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a2a      	ldr	r2, [pc, #168]	; (800b55c <TIM_Base_SetConfig+0x120>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00f      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a29      	ldr	r2, [pc, #164]	; (800b560 <TIM_Base_SetConfig+0x124>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00b      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a28      	ldr	r2, [pc, #160]	; (800b564 <TIM_Base_SetConfig+0x128>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d007      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a27      	ldr	r2, [pc, #156]	; (800b568 <TIM_Base_SetConfig+0x12c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d003      	beq.n	800b4d6 <TIM_Base_SetConfig+0x9a>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a26      	ldr	r2, [pc, #152]	; (800b56c <TIM_Base_SetConfig+0x130>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d108      	bne.n	800b4e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a10      	ldr	r2, [pc, #64]	; (800b550 <TIM_Base_SetConfig+0x114>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d00f      	beq.n	800b534 <TIM_Base_SetConfig+0xf8>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a12      	ldr	r2, [pc, #72]	; (800b560 <TIM_Base_SetConfig+0x124>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00b      	beq.n	800b534 <TIM_Base_SetConfig+0xf8>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a11      	ldr	r2, [pc, #68]	; (800b564 <TIM_Base_SetConfig+0x128>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d007      	beq.n	800b534 <TIM_Base_SetConfig+0xf8>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a10      	ldr	r2, [pc, #64]	; (800b568 <TIM_Base_SetConfig+0x12c>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d003      	beq.n	800b534 <TIM_Base_SetConfig+0xf8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a0f      	ldr	r2, [pc, #60]	; (800b56c <TIM_Base_SetConfig+0x130>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d103      	bne.n	800b53c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	691a      	ldr	r2, [r3, #16]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	615a      	str	r2, [r3, #20]
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	40010000 	.word	0x40010000
 800b554:	40000400 	.word	0x40000400
 800b558:	40000800 	.word	0x40000800
 800b55c:	40000c00 	.word	0x40000c00
 800b560:	40010400 	.word	0x40010400
 800b564:	40014000 	.word	0x40014000
 800b568:	40014400 	.word	0x40014400
 800b56c:	40014800 	.word	0x40014800

0800b570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	f023 0201 	bic.w	r2, r3, #1
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4b37      	ldr	r3, [pc, #220]	; (800b678 <TIM_OC1_SetConfig+0x108>)
 800b59c:	4013      	ands	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 0303 	bic.w	r3, r3, #3
 800b5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f023 0302 	bic.w	r3, r3, #2
 800b5b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a2d      	ldr	r2, [pc, #180]	; (800b67c <TIM_OC1_SetConfig+0x10c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d00f      	beq.n	800b5ec <TIM_OC1_SetConfig+0x7c>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a2c      	ldr	r2, [pc, #176]	; (800b680 <TIM_OC1_SetConfig+0x110>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00b      	beq.n	800b5ec <TIM_OC1_SetConfig+0x7c>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a2b      	ldr	r2, [pc, #172]	; (800b684 <TIM_OC1_SetConfig+0x114>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d007      	beq.n	800b5ec <TIM_OC1_SetConfig+0x7c>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a2a      	ldr	r2, [pc, #168]	; (800b688 <TIM_OC1_SetConfig+0x118>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d003      	beq.n	800b5ec <TIM_OC1_SetConfig+0x7c>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a29      	ldr	r2, [pc, #164]	; (800b68c <TIM_OC1_SetConfig+0x11c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d10c      	bne.n	800b606 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f023 0308 	bic.w	r3, r3, #8
 800b5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f023 0304 	bic.w	r3, r3, #4
 800b604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a1c      	ldr	r2, [pc, #112]	; (800b67c <TIM_OC1_SetConfig+0x10c>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00f      	beq.n	800b62e <TIM_OC1_SetConfig+0xbe>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a1b      	ldr	r2, [pc, #108]	; (800b680 <TIM_OC1_SetConfig+0x110>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d00b      	beq.n	800b62e <TIM_OC1_SetConfig+0xbe>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <TIM_OC1_SetConfig+0x114>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d007      	beq.n	800b62e <TIM_OC1_SetConfig+0xbe>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a19      	ldr	r2, [pc, #100]	; (800b688 <TIM_OC1_SetConfig+0x118>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d003      	beq.n	800b62e <TIM_OC1_SetConfig+0xbe>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a18      	ldr	r2, [pc, #96]	; (800b68c <TIM_OC1_SetConfig+0x11c>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d111      	bne.n	800b652 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b63c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	4313      	orrs	r3, r2
 800b646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	4313      	orrs	r3, r2
 800b650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	621a      	str	r2, [r3, #32]
}
 800b66c:	bf00      	nop
 800b66e:	371c      	adds	r7, #28
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	fffeff8f 	.word	0xfffeff8f
 800b67c:	40010000 	.word	0x40010000
 800b680:	40010400 	.word	0x40010400
 800b684:	40014000 	.word	0x40014000
 800b688:	40014400 	.word	0x40014400
 800b68c:	40014800 	.word	0x40014800

0800b690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	f023 0210 	bic.w	r2, r3, #16
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4b34      	ldr	r3, [pc, #208]	; (800b78c <TIM_OC2_SetConfig+0xfc>)
 800b6bc:	4013      	ands	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	021b      	lsls	r3, r3, #8
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f023 0320 	bic.w	r3, r3, #32
 800b6da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a29      	ldr	r2, [pc, #164]	; (800b790 <TIM_OC2_SetConfig+0x100>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d003      	beq.n	800b6f8 <TIM_OC2_SetConfig+0x68>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a28      	ldr	r2, [pc, #160]	; (800b794 <TIM_OC2_SetConfig+0x104>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d10d      	bne.n	800b714 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	011b      	lsls	r3, r3, #4
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4313      	orrs	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a1e      	ldr	r2, [pc, #120]	; (800b790 <TIM_OC2_SetConfig+0x100>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d00f      	beq.n	800b73c <TIM_OC2_SetConfig+0xac>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a1d      	ldr	r2, [pc, #116]	; (800b794 <TIM_OC2_SetConfig+0x104>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d00b      	beq.n	800b73c <TIM_OC2_SetConfig+0xac>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a1c      	ldr	r2, [pc, #112]	; (800b798 <TIM_OC2_SetConfig+0x108>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d007      	beq.n	800b73c <TIM_OC2_SetConfig+0xac>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a1b      	ldr	r2, [pc, #108]	; (800b79c <TIM_OC2_SetConfig+0x10c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d003      	beq.n	800b73c <TIM_OC2_SetConfig+0xac>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a1a      	ldr	r2, [pc, #104]	; (800b7a0 <TIM_OC2_SetConfig+0x110>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d113      	bne.n	800b764 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b74a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	4313      	orrs	r3, r2
 800b756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	4313      	orrs	r3, r2
 800b762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	621a      	str	r2, [r3, #32]
}
 800b77e:	bf00      	nop
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	feff8fff 	.word	0xfeff8fff
 800b790:	40010000 	.word	0x40010000
 800b794:	40010400 	.word	0x40010400
 800b798:	40014000 	.word	0x40014000
 800b79c:	40014400 	.word	0x40014400
 800b7a0:	40014800 	.word	0x40014800

0800b7a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	4b33      	ldr	r3, [pc, #204]	; (800b89c <TIM_OC3_SetConfig+0xf8>)
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0303 	bic.w	r3, r3, #3
 800b7da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a28      	ldr	r2, [pc, #160]	; (800b8a0 <TIM_OC3_SetConfig+0xfc>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d003      	beq.n	800b80a <TIM_OC3_SetConfig+0x66>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a27      	ldr	r2, [pc, #156]	; (800b8a4 <TIM_OC3_SetConfig+0x100>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d10d      	bne.n	800b826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	021b      	lsls	r3, r3, #8
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a1d      	ldr	r2, [pc, #116]	; (800b8a0 <TIM_OC3_SetConfig+0xfc>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d00f      	beq.n	800b84e <TIM_OC3_SetConfig+0xaa>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a1c      	ldr	r2, [pc, #112]	; (800b8a4 <TIM_OC3_SetConfig+0x100>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d00b      	beq.n	800b84e <TIM_OC3_SetConfig+0xaa>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a1b      	ldr	r2, [pc, #108]	; (800b8a8 <TIM_OC3_SetConfig+0x104>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d007      	beq.n	800b84e <TIM_OC3_SetConfig+0xaa>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a1a      	ldr	r2, [pc, #104]	; (800b8ac <TIM_OC3_SetConfig+0x108>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d003      	beq.n	800b84e <TIM_OC3_SetConfig+0xaa>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a19      	ldr	r2, [pc, #100]	; (800b8b0 <TIM_OC3_SetConfig+0x10c>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d113      	bne.n	800b876 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b85c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	4313      	orrs	r3, r2
 800b868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	011b      	lsls	r3, r3, #4
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	621a      	str	r2, [r3, #32]
}
 800b890:	bf00      	nop
 800b892:	371c      	adds	r7, #28
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	fffeff8f 	.word	0xfffeff8f
 800b8a0:	40010000 	.word	0x40010000
 800b8a4:	40010400 	.word	0x40010400
 800b8a8:	40014000 	.word	0x40014000
 800b8ac:	40014400 	.word	0x40014400
 800b8b0:	40014800 	.word	0x40014800

0800b8b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a1b      	ldr	r3, [r3, #32]
 800b8ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	69db      	ldr	r3, [r3, #28]
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4b24      	ldr	r3, [pc, #144]	; (800b970 <TIM_OC4_SetConfig+0xbc>)
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	021b      	lsls	r3, r3, #8
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	031b      	lsls	r3, r3, #12
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	4313      	orrs	r3, r2
 800b90a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a19      	ldr	r2, [pc, #100]	; (800b974 <TIM_OC4_SetConfig+0xc0>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d00f      	beq.n	800b934 <TIM_OC4_SetConfig+0x80>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a18      	ldr	r2, [pc, #96]	; (800b978 <TIM_OC4_SetConfig+0xc4>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d00b      	beq.n	800b934 <TIM_OC4_SetConfig+0x80>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a17      	ldr	r2, [pc, #92]	; (800b97c <TIM_OC4_SetConfig+0xc8>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d007      	beq.n	800b934 <TIM_OC4_SetConfig+0x80>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a16      	ldr	r2, [pc, #88]	; (800b980 <TIM_OC4_SetConfig+0xcc>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d003      	beq.n	800b934 <TIM_OC4_SetConfig+0x80>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a15      	ldr	r2, [pc, #84]	; (800b984 <TIM_OC4_SetConfig+0xd0>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d109      	bne.n	800b948 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b93a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	019b      	lsls	r3, r3, #6
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	4313      	orrs	r3, r2
 800b946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	621a      	str	r2, [r3, #32]
}
 800b962:	bf00      	nop
 800b964:	371c      	adds	r7, #28
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	feff8fff 	.word	0xfeff8fff
 800b974:	40010000 	.word	0x40010000
 800b978:	40010400 	.word	0x40010400
 800b97c:	40014000 	.word	0x40014000
 800b980:	40014400 	.word	0x40014400
 800b984:	40014800 	.word	0x40014800

0800b988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b988:	b480      	push	{r7}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <TIM_OC5_SetConfig+0xb0>)
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b9c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	041b      	lsls	r3, r3, #16
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a18      	ldr	r2, [pc, #96]	; (800ba3c <TIM_OC5_SetConfig+0xb4>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00f      	beq.n	800b9fe <TIM_OC5_SetConfig+0x76>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a17      	ldr	r2, [pc, #92]	; (800ba40 <TIM_OC5_SetConfig+0xb8>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00b      	beq.n	800b9fe <TIM_OC5_SetConfig+0x76>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a16      	ldr	r2, [pc, #88]	; (800ba44 <TIM_OC5_SetConfig+0xbc>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d007      	beq.n	800b9fe <TIM_OC5_SetConfig+0x76>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a15      	ldr	r2, [pc, #84]	; (800ba48 <TIM_OC5_SetConfig+0xc0>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d003      	beq.n	800b9fe <TIM_OC5_SetConfig+0x76>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a14      	ldr	r2, [pc, #80]	; (800ba4c <TIM_OC5_SetConfig+0xc4>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d109      	bne.n	800ba12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	021b      	lsls	r3, r3, #8
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	685a      	ldr	r2, [r3, #4]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	621a      	str	r2, [r3, #32]
}
 800ba2c:	bf00      	nop
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr
 800ba38:	fffeff8f 	.word	0xfffeff8f
 800ba3c:	40010000 	.word	0x40010000
 800ba40:	40010400 	.word	0x40010400
 800ba44:	40014000 	.word	0x40014000
 800ba48:	40014400 	.word	0x40014400
 800ba4c:	40014800 	.word	0x40014800

0800ba50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4b22      	ldr	r3, [pc, #136]	; (800bb04 <TIM_OC6_SetConfig+0xb4>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	051b      	lsls	r3, r3, #20
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a19      	ldr	r2, [pc, #100]	; (800bb08 <TIM_OC6_SetConfig+0xb8>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d00f      	beq.n	800bac8 <TIM_OC6_SetConfig+0x78>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a18      	ldr	r2, [pc, #96]	; (800bb0c <TIM_OC6_SetConfig+0xbc>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d00b      	beq.n	800bac8 <TIM_OC6_SetConfig+0x78>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a17      	ldr	r2, [pc, #92]	; (800bb10 <TIM_OC6_SetConfig+0xc0>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d007      	beq.n	800bac8 <TIM_OC6_SetConfig+0x78>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a16      	ldr	r2, [pc, #88]	; (800bb14 <TIM_OC6_SetConfig+0xc4>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d003      	beq.n	800bac8 <TIM_OC6_SetConfig+0x78>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a15      	ldr	r2, [pc, #84]	; (800bb18 <TIM_OC6_SetConfig+0xc8>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d109      	bne.n	800badc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bace:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	029b      	lsls	r3, r3, #10
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4313      	orrs	r3, r2
 800bada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	621a      	str	r2, [r3, #32]
}
 800baf6:	bf00      	nop
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	feff8fff 	.word	0xfeff8fff
 800bb08:	40010000 	.word	0x40010000
 800bb0c:	40010400 	.word	0x40010400
 800bb10:	40014000 	.word	0x40014000
 800bb14:	40014400 	.word	0x40014400
 800bb18:	40014800 	.word	0x40014800

0800bb1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	f023 0201 	bic.w	r2, r3, #1
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f023 030a 	bic.w	r3, r3, #10
 800bb58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	621a      	str	r2, [r3, #32]
}
 800bb6e:	bf00      	nop
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b087      	sub	sp, #28
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	f023 0210 	bic.w	r2, r3, #16
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	031b      	lsls	r3, r3, #12
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	011b      	lsls	r3, r3, #4
 800bbbc:	693a      	ldr	r2, [r7, #16]
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	697a      	ldr	r2, [r7, #20]
 800bbc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	621a      	str	r2, [r3, #32]
}
 800bbce:	bf00      	nop
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <TIM_ITRx_SetConfig+0x38>)
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f043 0307 	orr.w	r3, r3, #7
 800bbfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	609a      	str	r2, [r3, #8]
}
 800bc06:	bf00      	nop
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	ffcfff8f 	.word	0xffcfff8f

0800bc18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	021a      	lsls	r2, r3, #8
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	609a      	str	r2, [r3, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d101      	bne.n	800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	e06d      	b.n	800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a30      	ldr	r2, [pc, #192]	; (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d004      	beq.n	800bca4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a2f      	ldr	r2, [pc, #188]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d108      	bne.n	800bcb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bcaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a20      	ldr	r2, [pc, #128]	; (800bd58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d022      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce2:	d01d      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a1d      	ldr	r2, [pc, #116]	; (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d018      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a1c      	ldr	r2, [pc, #112]	; (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d013      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a1a      	ldr	r2, [pc, #104]	; (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d00e      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a15      	ldr	r2, [pc, #84]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d009      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a16      	ldr	r2, [pc, #88]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d004      	beq.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d10c      	bne.n	800bd3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	40010000 	.word	0x40010000
 800bd5c:	40010400 	.word	0x40010400
 800bd60:	40000400 	.word	0x40000400
 800bd64:	40000800 	.word	0x40000800
 800bd68:	40000c00 	.word	0x40000c00
 800bd6c:	40001800 	.word	0x40001800
 800bd70:	40014000 	.word	0x40014000

0800bd74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d101      	bne.n	800bd90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e065      	b.n	800be5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	041b      	lsls	r3, r3, #16
 800be06:	4313      	orrs	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a16      	ldr	r2, [pc, #88]	; (800be68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d004      	beq.n	800be1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a14      	ldr	r2, [pc, #80]	; (800be6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d115      	bne.n	800be4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	051b      	lsls	r3, r3, #20
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	69db      	ldr	r3, [r3, #28]
 800be38:	4313      	orrs	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr
 800be68:	40010000 	.word	0x40010000
 800be6c:	40010400 	.word	0x40010400

0800be70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be78:	bf00      	nop
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e042      	b.n	800bf44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d106      	bne.n	800bed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7f8 fb55 	bl	8004580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2224      	movs	r2, #36	; 0x24
 800beda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 0201 	bic.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fc8e 	bl	800c810 <UART_SetConfig>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d101      	bne.n	800befe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e022      	b.n	800bf44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 f9e2 	bl	800d2d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689a      	ldr	r2, [r3, #8]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0201 	orr.w	r2, r2, #1
 800bf3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f001 fa69 	bl	800d414 <UART_CheckIdleState>
 800bf42:	4603      	mov	r3, r0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08a      	sub	sp, #40	; 0x28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	4613      	mov	r3, r2
 800bf58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf60:	2b20      	cmp	r3, #32
 800bf62:	d17a      	bne.n	800c05a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <HAL_UART_Transmit_DMA+0x24>
 800bf6a:	88fb      	ldrh	r3, [r7, #6]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e073      	b.n	800c05c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d101      	bne.n	800bf82 <HAL_UART_Transmit_DMA+0x36>
 800bf7e:	2302      	movs	r3, #2
 800bf80:	e06c      	b.n	800c05c <HAL_UART_Transmit_DMA+0x110>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	88fa      	ldrh	r2, [r7, #6]
 800bf94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	88fa      	ldrh	r2, [r7, #6]
 800bf9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2221      	movs	r2, #33	; 0x21
 800bfac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d02c      	beq.n	800c012 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfbc:	4a29      	ldr	r2, [pc, #164]	; (800c064 <HAL_UART_Transmit_DMA+0x118>)
 800bfbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfc4:	4a28      	ldr	r2, [pc, #160]	; (800c068 <HAL_UART_Transmit_DMA+0x11c>)
 800bfc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfcc:	4a27      	ldr	r2, [pc, #156]	; (800c06c <HAL_UART_Transmit_DMA+0x120>)
 800bfce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3328      	adds	r3, #40	; 0x28
 800bfe8:	461a      	mov	r2, r3
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	f7f9 fc3c 	bl	8005868 <HAL_DMA_Start_IT>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00d      	beq.n	800c012 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2210      	movs	r2, #16
 800bffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2220      	movs	r2, #32
 800c00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	e024      	b.n	800c05c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2240      	movs	r2, #64	; 0x40
 800c018:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3308      	adds	r3, #8
 800c028:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	613b      	str	r3, [r7, #16]
   return(result);
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3308      	adds	r3, #8
 800c040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c042:	623a      	str	r2, [r7, #32]
 800c044:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c046:	69f9      	ldr	r1, [r7, #28]
 800c048:	6a3a      	ldr	r2, [r7, #32]
 800c04a:	e841 2300 	strex	r3, r2, [r1]
 800c04e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1e5      	bne.n	800c022 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	e000      	b.n	800c05c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c05a:	2302      	movs	r3, #2
  }
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3728      	adds	r7, #40	; 0x28
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	0800d8dd 	.word	0x0800d8dd
 800c068:	0800d973 	.word	0x0800d973
 800c06c:	0800dae9 	.word	0x0800dae9

0800c070 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b0ba      	sub	sp, #232	; 0xe8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c096:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c09a:	f640 030f 	movw	r3, #2063	; 0x80f
 800c09e:	4013      	ands	r3, r2
 800c0a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c0a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d11b      	bne.n	800c0e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b0:	f003 0320 	and.w	r3, r3, #32
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d015      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0bc:	f003 0320 	and.w	r3, r3, #32
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d105      	bne.n	800c0d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d009      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 835a 	beq.w	800c78e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
      }
      return;
 800c0e2:	e354      	b.n	800c78e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 811f 	beq.w	800c32c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0f2:	4b8b      	ldr	r3, [pc, #556]	; (800c320 <HAL_UART_IRQHandler+0x2b0>)
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0fe:	4b89      	ldr	r3, [pc, #548]	; (800c324 <HAL_UART_IRQHandler+0x2b4>)
 800c100:	4013      	ands	r3, r2
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 8112 	beq.w	800c32c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d011      	beq.n	800c138 <HAL_UART_IRQHandler+0xc8>
 800c114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00b      	beq.n	800c138 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2201      	movs	r2, #1
 800c126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12e:	f043 0201 	orr.w	r2, r3, #1
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c13c:	f003 0302 	and.w	r3, r3, #2
 800c140:	2b00      	cmp	r3, #0
 800c142:	d011      	beq.n	800c168 <HAL_UART_IRQHandler+0xf8>
 800c144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c148:	f003 0301 	and.w	r3, r3, #1
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2202      	movs	r2, #2
 800c156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15e:	f043 0204 	orr.w	r2, r3, #4
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c16c:	f003 0304 	and.w	r3, r3, #4
 800c170:	2b00      	cmp	r3, #0
 800c172:	d011      	beq.n	800c198 <HAL_UART_IRQHandler+0x128>
 800c174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00b      	beq.n	800c198 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2204      	movs	r2, #4
 800c186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c18e:	f043 0202 	orr.w	r2, r3, #2
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c19c:	f003 0308 	and.w	r3, r3, #8
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d017      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a8:	f003 0320 	and.w	r3, r3, #32
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d105      	bne.n	800c1bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1b4:	4b5a      	ldr	r3, [pc, #360]	; (800c320 <HAL_UART_IRQHandler+0x2b0>)
 800c1b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00b      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ca:	f043 0208 	orr.w	r2, r3, #8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d012      	beq.n	800c206 <HAL_UART_IRQHandler+0x196>
 800c1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00c      	beq.n	800c206 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1fc:	f043 0220 	orr.w	r2, r3, #32
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 82c0 	beq.w	800c792 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d013      	beq.n	800c246 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	d105      	bne.n	800c236 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c22e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d007      	beq.n	800c246 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c24c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25a:	2b40      	cmp	r3, #64	; 0x40
 800c25c:	d005      	beq.n	800c26a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c262:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c266:	2b00      	cmp	r3, #0
 800c268:	d04f      	beq.n	800c30a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f001 fad0 	bl	800d810 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27a:	2b40      	cmp	r3, #64	; 0x40
 800c27c:	d141      	bne.n	800c302 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3308      	adds	r3, #8
 800c284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1d9      	bne.n	800c27e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d013      	beq.n	800c2fa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2d6:	4a14      	ldr	r2, [pc, #80]	; (800c328 <HAL_UART_IRQHandler+0x2b8>)
 800c2d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fa f84a 	bl	8006378 <HAL_DMA_Abort_IT>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d017      	beq.n	800c31a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f8:	e00f      	b.n	800c31a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fa7e 	bl	800c7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c300:	e00b      	b.n	800c31a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fa7a 	bl	800c7fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c308:	e007      	b.n	800c31a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fa76 	bl	800c7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c318:	e23b      	b.n	800c792 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c31a:	bf00      	nop
    return;
 800c31c:	e239      	b.n	800c792 <HAL_UART_IRQHandler+0x722>
 800c31e:	bf00      	nop
 800c320:	10000001 	.word	0x10000001
 800c324:	04000120 	.word	0x04000120
 800c328:	0800db69 	.word	0x0800db69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c330:	2b01      	cmp	r3, #1
 800c332:	f040 81ce 	bne.w	800c6d2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c33a:	f003 0310 	and.w	r3, r3, #16
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 81c7 	beq.w	800c6d2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c348:	f003 0310 	and.w	r3, r3, #16
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 81c0 	beq.w	800c6d2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2210      	movs	r2, #16
 800c358:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c364:	2b40      	cmp	r3, #64	; 0x40
 800c366:	f040 813b 	bne.w	800c5e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a8b      	ldr	r2, [pc, #556]	; (800c5a0 <HAL_UART_IRQHandler+0x530>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d059      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a89      	ldr	r2, [pc, #548]	; (800c5a4 <HAL_UART_IRQHandler+0x534>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d053      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a87      	ldr	r2, [pc, #540]	; (800c5a8 <HAL_UART_IRQHandler+0x538>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d04d      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a85      	ldr	r2, [pc, #532]	; (800c5ac <HAL_UART_IRQHandler+0x53c>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d047      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a83      	ldr	r2, [pc, #524]	; (800c5b0 <HAL_UART_IRQHandler+0x540>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d041      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a81      	ldr	r2, [pc, #516]	; (800c5b4 <HAL_UART_IRQHandler+0x544>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d03b      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a7f      	ldr	r2, [pc, #508]	; (800c5b8 <HAL_UART_IRQHandler+0x548>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d035      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a7d      	ldr	r2, [pc, #500]	; (800c5bc <HAL_UART_IRQHandler+0x54c>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d02f      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a7b      	ldr	r2, [pc, #492]	; (800c5c0 <HAL_UART_IRQHandler+0x550>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d029      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a79      	ldr	r2, [pc, #484]	; (800c5c4 <HAL_UART_IRQHandler+0x554>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d023      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a77      	ldr	r2, [pc, #476]	; (800c5c8 <HAL_UART_IRQHandler+0x558>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d01d      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a75      	ldr	r2, [pc, #468]	; (800c5cc <HAL_UART_IRQHandler+0x55c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d017      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a73      	ldr	r2, [pc, #460]	; (800c5d0 <HAL_UART_IRQHandler+0x560>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d011      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a71      	ldr	r2, [pc, #452]	; (800c5d4 <HAL_UART_IRQHandler+0x564>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d00b      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a6f      	ldr	r2, [pc, #444]	; (800c5d8 <HAL_UART_IRQHandler+0x568>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d005      	beq.n	800c42a <HAL_UART_IRQHandler+0x3ba>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a6d      	ldr	r2, [pc, #436]	; (800c5dc <HAL_UART_IRQHandler+0x56c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d105      	bne.n	800c436 <HAL_UART_IRQHandler+0x3c6>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	b29b      	uxth	r3, r3
 800c434:	e004      	b.n	800c440 <HAL_UART_IRQHandler+0x3d0>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	b29b      	uxth	r3, r3
 800c440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 81a4 	beq.w	800c796 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c458:	429a      	cmp	r2, r3
 800c45a:	f080 819c 	bcs.w	800c796 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46c:	69db      	ldr	r3, [r3, #28]
 800c46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c472:	f000 8086 	beq.w	800c582 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c482:	e853 3f00 	ldrex	r3, [r3]
 800c486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c48a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c4ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4b0:	e841 2300 	strex	r3, r2, [r1]
 800c4b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1da      	bne.n	800c476 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4ca:	e853 3f00 	ldrex	r3, [r3]
 800c4ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4d2:	f023 0301 	bic.w	r3, r3, #1
 800c4d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4f0:	e841 2300 	strex	r3, r2, [r1]
 800c4f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1e1      	bne.n	800c4c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3308      	adds	r3, #8
 800c502:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c50c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3308      	adds	r3, #8
 800c51c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c520:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c524:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c526:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c528:	e841 2300 	strex	r3, r2, [r1]
 800c52c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c52e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1e3      	bne.n	800c4fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2220      	movs	r2, #32
 800c538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c54a:	e853 3f00 	ldrex	r3, [r3]
 800c54e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c552:	f023 0310 	bic.w	r3, r3, #16
 800c556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c564:	65bb      	str	r3, [r7, #88]	; 0x58
 800c566:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c56a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e4      	bne.n	800c542 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7f9 fbdd 	bl	8005d3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c58e:	b29b      	uxth	r3, r3
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	b29b      	uxth	r3, r3
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7f5 fcae 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c59c:	e0fb      	b.n	800c796 <HAL_UART_IRQHandler+0x726>
 800c59e:	bf00      	nop
 800c5a0:	40020010 	.word	0x40020010
 800c5a4:	40020028 	.word	0x40020028
 800c5a8:	40020040 	.word	0x40020040
 800c5ac:	40020058 	.word	0x40020058
 800c5b0:	40020070 	.word	0x40020070
 800c5b4:	40020088 	.word	0x40020088
 800c5b8:	400200a0 	.word	0x400200a0
 800c5bc:	400200b8 	.word	0x400200b8
 800c5c0:	40020410 	.word	0x40020410
 800c5c4:	40020428 	.word	0x40020428
 800c5c8:	40020440 	.word	0x40020440
 800c5cc:	40020458 	.word	0x40020458
 800c5d0:	40020470 	.word	0x40020470
 800c5d4:	40020488 	.word	0x40020488
 800c5d8:	400204a0 	.word	0x400204a0
 800c5dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 80cc 	beq.w	800c79a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80c7 	beq.w	800c79a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c62e:	647b      	str	r3, [r7, #68]	; 0x44
 800c630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e4      	bne.n	800c60c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	623b      	str	r3, [r7, #32]
   return(result);
 800c652:	6a3a      	ldr	r2, [r7, #32]
 800c654:	4b54      	ldr	r3, [pc, #336]	; (800c7a8 <HAL_UART_IRQHandler+0x738>)
 800c656:	4013      	ands	r3, r2
 800c658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3308      	adds	r3, #8
 800c662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c666:	633a      	str	r2, [r7, #48]	; 0x30
 800c668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e3      	bne.n	800c642 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2220      	movs	r2, #32
 800c67e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f023 0310 	bic.w	r3, r3, #16
 800c6a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6b0:	61fb      	str	r3, [r7, #28]
 800c6b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	69b9      	ldr	r1, [r7, #24]
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	617b      	str	r3, [r7, #20]
   return(result);
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e4      	bne.n	800c68e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7f5 fc14 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6d0:	e063      	b.n	800c79a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00e      	beq.n	800c6fc <HAL_UART_IRQHandler+0x68c>
 800c6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d008      	beq.n	800c6fc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c6f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f001 fa78 	bl	800dbea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6fa:	e051      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c704:	2b00      	cmp	r3, #0
 800c706:	d014      	beq.n	800c732 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d008      	beq.n	800c732 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c724:	2b00      	cmp	r3, #0
 800c726:	d03a      	beq.n	800c79e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	4798      	blx	r3
    }
    return;
 800c730:	e035      	b.n	800c79e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d009      	beq.n	800c752 <HAL_UART_IRQHandler+0x6e2>
 800c73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f001 fa22 	bl	800db94 <UART_EndTransmit_IT>
    return;
 800c750:	e026      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d009      	beq.n	800c772 <HAL_UART_IRQHandler+0x702>
 800c75e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c762:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f001 fa51 	bl	800dc12 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c770:	e016      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d010      	beq.n	800c7a0 <HAL_UART_IRQHandler+0x730>
 800c77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c782:	2b00      	cmp	r3, #0
 800c784:	da0c      	bge.n	800c7a0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 fa39 	bl	800dbfe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c78c:	e008      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
      return;
 800c78e:	bf00      	nop
 800c790:	e006      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
    return;
 800c792:	bf00      	nop
 800c794:	e004      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
      return;
 800c796:	bf00      	nop
 800c798:	e002      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
      return;
 800c79a:	bf00      	nop
 800c79c:	e000      	b.n	800c7a0 <HAL_UART_IRQHandler+0x730>
    return;
 800c79e:	bf00      	nop
  }
}
 800c7a0:	37e8      	adds	r7, #232	; 0xe8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	effffffe 	.word	0xeffffffe

0800c7ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7b4:	bf00      	nop
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c810:	b5b0      	push	{r4, r5, r7, lr}
 800c812:	b08e      	sub	sp, #56	; 0x38
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	431a      	orrs	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	4313      	orrs	r3, r2
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4bbf      	ldr	r3, [pc, #764]	; (800cb3c <UART_SetConfig+0x32c>)
 800c83e:	4013      	ands	r3, r2
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	6812      	ldr	r2, [r2, #0]
 800c844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c846:	430b      	orrs	r3, r1
 800c848:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68da      	ldr	r2, [r3, #12]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	430a      	orrs	r2, r1
 800c85e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4ab5      	ldr	r2, [pc, #724]	; (800cb40 <UART_SetConfig+0x330>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d004      	beq.n	800c87a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c876:	4313      	orrs	r3, r2
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	689a      	ldr	r2, [r3, #8]
 800c880:	4bb0      	ldr	r3, [pc, #704]	; (800cb44 <UART_SetConfig+0x334>)
 800c882:	4013      	ands	r3, r2
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	6812      	ldr	r2, [r2, #0]
 800c888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c88a:	430b      	orrs	r3, r1
 800c88c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	f023 010f 	bic.w	r1, r3, #15
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	430a      	orrs	r2, r1
 800c8a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4aa7      	ldr	r2, [pc, #668]	; (800cb48 <UART_SetConfig+0x338>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d176      	bne.n	800c99c <UART_SetConfig+0x18c>
 800c8ae:	4ba7      	ldr	r3, [pc, #668]	; (800cb4c <UART_SetConfig+0x33c>)
 800c8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8b6:	2b28      	cmp	r3, #40	; 0x28
 800c8b8:	d86c      	bhi.n	800c994 <UART_SetConfig+0x184>
 800c8ba:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <UART_SetConfig+0xb0>)
 800c8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c0:	0800c965 	.word	0x0800c965
 800c8c4:	0800c995 	.word	0x0800c995
 800c8c8:	0800c995 	.word	0x0800c995
 800c8cc:	0800c995 	.word	0x0800c995
 800c8d0:	0800c995 	.word	0x0800c995
 800c8d4:	0800c995 	.word	0x0800c995
 800c8d8:	0800c995 	.word	0x0800c995
 800c8dc:	0800c995 	.word	0x0800c995
 800c8e0:	0800c96d 	.word	0x0800c96d
 800c8e4:	0800c995 	.word	0x0800c995
 800c8e8:	0800c995 	.word	0x0800c995
 800c8ec:	0800c995 	.word	0x0800c995
 800c8f0:	0800c995 	.word	0x0800c995
 800c8f4:	0800c995 	.word	0x0800c995
 800c8f8:	0800c995 	.word	0x0800c995
 800c8fc:	0800c995 	.word	0x0800c995
 800c900:	0800c975 	.word	0x0800c975
 800c904:	0800c995 	.word	0x0800c995
 800c908:	0800c995 	.word	0x0800c995
 800c90c:	0800c995 	.word	0x0800c995
 800c910:	0800c995 	.word	0x0800c995
 800c914:	0800c995 	.word	0x0800c995
 800c918:	0800c995 	.word	0x0800c995
 800c91c:	0800c995 	.word	0x0800c995
 800c920:	0800c97d 	.word	0x0800c97d
 800c924:	0800c995 	.word	0x0800c995
 800c928:	0800c995 	.word	0x0800c995
 800c92c:	0800c995 	.word	0x0800c995
 800c930:	0800c995 	.word	0x0800c995
 800c934:	0800c995 	.word	0x0800c995
 800c938:	0800c995 	.word	0x0800c995
 800c93c:	0800c995 	.word	0x0800c995
 800c940:	0800c985 	.word	0x0800c985
 800c944:	0800c995 	.word	0x0800c995
 800c948:	0800c995 	.word	0x0800c995
 800c94c:	0800c995 	.word	0x0800c995
 800c950:	0800c995 	.word	0x0800c995
 800c954:	0800c995 	.word	0x0800c995
 800c958:	0800c995 	.word	0x0800c995
 800c95c:	0800c995 	.word	0x0800c995
 800c960:	0800c98d 	.word	0x0800c98d
 800c964:	2301      	movs	r3, #1
 800c966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96a:	e222      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c972:	e21e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97a:	e21a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c982:	e216      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c984:	2320      	movs	r3, #32
 800c986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98a:	e212      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c98c:	2340      	movs	r3, #64	; 0x40
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e20e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e20a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a6b      	ldr	r2, [pc, #428]	; (800cb50 <UART_SetConfig+0x340>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d130      	bne.n	800ca08 <UART_SetConfig+0x1f8>
 800c9a6:	4b69      	ldr	r3, [pc, #420]	; (800cb4c <UART_SetConfig+0x33c>)
 800c9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9aa:	f003 0307 	and.w	r3, r3, #7
 800c9ae:	2b05      	cmp	r3, #5
 800c9b0:	d826      	bhi.n	800ca00 <UART_SetConfig+0x1f0>
 800c9b2:	a201      	add	r2, pc, #4	; (adr r2, 800c9b8 <UART_SetConfig+0x1a8>)
 800c9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b8:	0800c9d1 	.word	0x0800c9d1
 800c9bc:	0800c9d9 	.word	0x0800c9d9
 800c9c0:	0800c9e1 	.word	0x0800c9e1
 800c9c4:	0800c9e9 	.word	0x0800c9e9
 800c9c8:	0800c9f1 	.word	0x0800c9f1
 800c9cc:	0800c9f9 	.word	0x0800c9f9
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9d6:	e1ec      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c9d8:	2304      	movs	r3, #4
 800c9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9de:	e1e8      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c9e0:	2308      	movs	r3, #8
 800c9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9e6:	e1e4      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c9e8:	2310      	movs	r3, #16
 800c9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ee:	e1e0      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c9f0:	2320      	movs	r3, #32
 800c9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9f6:	e1dc      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800c9f8:	2340      	movs	r3, #64	; 0x40
 800c9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9fe:	e1d8      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca00:	2380      	movs	r3, #128	; 0x80
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e1d4      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a51      	ldr	r2, [pc, #324]	; (800cb54 <UART_SetConfig+0x344>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d130      	bne.n	800ca74 <UART_SetConfig+0x264>
 800ca12:	4b4e      	ldr	r3, [pc, #312]	; (800cb4c <UART_SetConfig+0x33c>)
 800ca14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b05      	cmp	r3, #5
 800ca1c:	d826      	bhi.n	800ca6c <UART_SetConfig+0x25c>
 800ca1e:	a201      	add	r2, pc, #4	; (adr r2, 800ca24 <UART_SetConfig+0x214>)
 800ca20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca24:	0800ca3d 	.word	0x0800ca3d
 800ca28:	0800ca45 	.word	0x0800ca45
 800ca2c:	0800ca4d 	.word	0x0800ca4d
 800ca30:	0800ca55 	.word	0x0800ca55
 800ca34:	0800ca5d 	.word	0x0800ca5d
 800ca38:	0800ca65 	.word	0x0800ca65
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca42:	e1b6      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca44:	2304      	movs	r3, #4
 800ca46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca4a:	e1b2      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca4c:	2308      	movs	r3, #8
 800ca4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca52:	e1ae      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca54:	2310      	movs	r3, #16
 800ca56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca5a:	e1aa      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca5c:	2320      	movs	r3, #32
 800ca5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca62:	e1a6      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca64:	2340      	movs	r3, #64	; 0x40
 800ca66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca6a:	e1a2      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca6c:	2380      	movs	r3, #128	; 0x80
 800ca6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca72:	e19e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a37      	ldr	r2, [pc, #220]	; (800cb58 <UART_SetConfig+0x348>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d130      	bne.n	800cae0 <UART_SetConfig+0x2d0>
 800ca7e:	4b33      	ldr	r3, [pc, #204]	; (800cb4c <UART_SetConfig+0x33c>)
 800ca80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca82:	f003 0307 	and.w	r3, r3, #7
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	d826      	bhi.n	800cad8 <UART_SetConfig+0x2c8>
 800ca8a:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <UART_SetConfig+0x280>)
 800ca8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca90:	0800caa9 	.word	0x0800caa9
 800ca94:	0800cab1 	.word	0x0800cab1
 800ca98:	0800cab9 	.word	0x0800cab9
 800ca9c:	0800cac1 	.word	0x0800cac1
 800caa0:	0800cac9 	.word	0x0800cac9
 800caa4:	0800cad1 	.word	0x0800cad1
 800caa8:	2300      	movs	r3, #0
 800caaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caae:	e180      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cab0:	2304      	movs	r3, #4
 800cab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cab6:	e17c      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cab8:	2308      	movs	r3, #8
 800caba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cabe:	e178      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cac0:	2310      	movs	r3, #16
 800cac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cac6:	e174      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cac8:	2320      	movs	r3, #32
 800caca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cace:	e170      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cad0:	2340      	movs	r3, #64	; 0x40
 800cad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cad6:	e16c      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cad8:	2380      	movs	r3, #128	; 0x80
 800cada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cade:	e168      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a1d      	ldr	r2, [pc, #116]	; (800cb5c <UART_SetConfig+0x34c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d142      	bne.n	800cb70 <UART_SetConfig+0x360>
 800caea:	4b18      	ldr	r3, [pc, #96]	; (800cb4c <UART_SetConfig+0x33c>)
 800caec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caee:	f003 0307 	and.w	r3, r3, #7
 800caf2:	2b05      	cmp	r3, #5
 800caf4:	d838      	bhi.n	800cb68 <UART_SetConfig+0x358>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <UART_SetConfig+0x2ec>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb15 	.word	0x0800cb15
 800cb00:	0800cb1d 	.word	0x0800cb1d
 800cb04:	0800cb25 	.word	0x0800cb25
 800cb08:	0800cb2d 	.word	0x0800cb2d
 800cb0c:	0800cb35 	.word	0x0800cb35
 800cb10:	0800cb61 	.word	0x0800cb61
 800cb14:	2300      	movs	r3, #0
 800cb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb1a:	e14a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb22:	e146      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb24:	2308      	movs	r3, #8
 800cb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2a:	e142      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb32:	e13e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb34:	2320      	movs	r3, #32
 800cb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb3a:	e13a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb3c:	cfff69f3 	.word	0xcfff69f3
 800cb40:	58000c00 	.word	0x58000c00
 800cb44:	11fff4ff 	.word	0x11fff4ff
 800cb48:	40011000 	.word	0x40011000
 800cb4c:	58024400 	.word	0x58024400
 800cb50:	40004400 	.word	0x40004400
 800cb54:	40004800 	.word	0x40004800
 800cb58:	40004c00 	.word	0x40004c00
 800cb5c:	40005000 	.word	0x40005000
 800cb60:	2340      	movs	r3, #64	; 0x40
 800cb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb66:	e124      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb68:	2380      	movs	r3, #128	; 0x80
 800cb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6e:	e120      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4acc      	ldr	r2, [pc, #816]	; (800cea8 <UART_SetConfig+0x698>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d176      	bne.n	800cc68 <UART_SetConfig+0x458>
 800cb7a:	4bcc      	ldr	r3, [pc, #816]	; (800ceac <UART_SetConfig+0x69c>)
 800cb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb82:	2b28      	cmp	r3, #40	; 0x28
 800cb84:	d86c      	bhi.n	800cc60 <UART_SetConfig+0x450>
 800cb86:	a201      	add	r2, pc, #4	; (adr r2, 800cb8c <UART_SetConfig+0x37c>)
 800cb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb8c:	0800cc31 	.word	0x0800cc31
 800cb90:	0800cc61 	.word	0x0800cc61
 800cb94:	0800cc61 	.word	0x0800cc61
 800cb98:	0800cc61 	.word	0x0800cc61
 800cb9c:	0800cc61 	.word	0x0800cc61
 800cba0:	0800cc61 	.word	0x0800cc61
 800cba4:	0800cc61 	.word	0x0800cc61
 800cba8:	0800cc61 	.word	0x0800cc61
 800cbac:	0800cc39 	.word	0x0800cc39
 800cbb0:	0800cc61 	.word	0x0800cc61
 800cbb4:	0800cc61 	.word	0x0800cc61
 800cbb8:	0800cc61 	.word	0x0800cc61
 800cbbc:	0800cc61 	.word	0x0800cc61
 800cbc0:	0800cc61 	.word	0x0800cc61
 800cbc4:	0800cc61 	.word	0x0800cc61
 800cbc8:	0800cc61 	.word	0x0800cc61
 800cbcc:	0800cc41 	.word	0x0800cc41
 800cbd0:	0800cc61 	.word	0x0800cc61
 800cbd4:	0800cc61 	.word	0x0800cc61
 800cbd8:	0800cc61 	.word	0x0800cc61
 800cbdc:	0800cc61 	.word	0x0800cc61
 800cbe0:	0800cc61 	.word	0x0800cc61
 800cbe4:	0800cc61 	.word	0x0800cc61
 800cbe8:	0800cc61 	.word	0x0800cc61
 800cbec:	0800cc49 	.word	0x0800cc49
 800cbf0:	0800cc61 	.word	0x0800cc61
 800cbf4:	0800cc61 	.word	0x0800cc61
 800cbf8:	0800cc61 	.word	0x0800cc61
 800cbfc:	0800cc61 	.word	0x0800cc61
 800cc00:	0800cc61 	.word	0x0800cc61
 800cc04:	0800cc61 	.word	0x0800cc61
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc51 	.word	0x0800cc51
 800cc10:	0800cc61 	.word	0x0800cc61
 800cc14:	0800cc61 	.word	0x0800cc61
 800cc18:	0800cc61 	.word	0x0800cc61
 800cc1c:	0800cc61 	.word	0x0800cc61
 800cc20:	0800cc61 	.word	0x0800cc61
 800cc24:	0800cc61 	.word	0x0800cc61
 800cc28:	0800cc61 	.word	0x0800cc61
 800cc2c:	0800cc59 	.word	0x0800cc59
 800cc30:	2301      	movs	r3, #1
 800cc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc36:	e0bc      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc38:	2304      	movs	r3, #4
 800cc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3e:	e0b8      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc40:	2308      	movs	r3, #8
 800cc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc46:	e0b4      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc48:	2310      	movs	r3, #16
 800cc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4e:	e0b0      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc50:	2320      	movs	r3, #32
 800cc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc56:	e0ac      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc58:	2340      	movs	r3, #64	; 0x40
 800cc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5e:	e0a8      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc60:	2380      	movs	r3, #128	; 0x80
 800cc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc66:	e0a4      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a90      	ldr	r2, [pc, #576]	; (800ceb0 <UART_SetConfig+0x6a0>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d130      	bne.n	800ccd4 <UART_SetConfig+0x4c4>
 800cc72:	4b8e      	ldr	r3, [pc, #568]	; (800ceac <UART_SetConfig+0x69c>)
 800cc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	2b05      	cmp	r3, #5
 800cc7c:	d826      	bhi.n	800cccc <UART_SetConfig+0x4bc>
 800cc7e:	a201      	add	r2, pc, #4	; (adr r2, 800cc84 <UART_SetConfig+0x474>)
 800cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc84:	0800cc9d 	.word	0x0800cc9d
 800cc88:	0800cca5 	.word	0x0800cca5
 800cc8c:	0800ccad 	.word	0x0800ccad
 800cc90:	0800ccb5 	.word	0x0800ccb5
 800cc94:	0800ccbd 	.word	0x0800ccbd
 800cc98:	0800ccc5 	.word	0x0800ccc5
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca2:	e086      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cca4:	2304      	movs	r3, #4
 800cca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccaa:	e082      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ccac:	2308      	movs	r3, #8
 800ccae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb2:	e07e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ccb4:	2310      	movs	r3, #16
 800ccb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccba:	e07a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ccbc:	2320      	movs	r3, #32
 800ccbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc2:	e076      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ccc4:	2340      	movs	r3, #64	; 0x40
 800ccc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccca:	e072      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cccc:	2380      	movs	r3, #128	; 0x80
 800ccce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd2:	e06e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a76      	ldr	r2, [pc, #472]	; (800ceb4 <UART_SetConfig+0x6a4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d130      	bne.n	800cd40 <UART_SetConfig+0x530>
 800ccde:	4b73      	ldr	r3, [pc, #460]	; (800ceac <UART_SetConfig+0x69c>)
 800cce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	2b05      	cmp	r3, #5
 800cce8:	d826      	bhi.n	800cd38 <UART_SetConfig+0x528>
 800ccea:	a201      	add	r2, pc, #4	; (adr r2, 800ccf0 <UART_SetConfig+0x4e0>)
 800ccec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf0:	0800cd09 	.word	0x0800cd09
 800ccf4:	0800cd11 	.word	0x0800cd11
 800ccf8:	0800cd19 	.word	0x0800cd19
 800ccfc:	0800cd21 	.word	0x0800cd21
 800cd00:	0800cd29 	.word	0x0800cd29
 800cd04:	0800cd31 	.word	0x0800cd31
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0e:	e050      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd10:	2304      	movs	r3, #4
 800cd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd16:	e04c      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd18:	2308      	movs	r3, #8
 800cd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1e:	e048      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd20:	2310      	movs	r3, #16
 800cd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd26:	e044      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd28:	2320      	movs	r3, #32
 800cd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2e:	e040      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd30:	2340      	movs	r3, #64	; 0x40
 800cd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd36:	e03c      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd38:	2380      	movs	r3, #128	; 0x80
 800cd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3e:	e038      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a5c      	ldr	r2, [pc, #368]	; (800ceb8 <UART_SetConfig+0x6a8>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d130      	bne.n	800cdac <UART_SetConfig+0x59c>
 800cd4a:	4b58      	ldr	r3, [pc, #352]	; (800ceac <UART_SetConfig+0x69c>)
 800cd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	2b05      	cmp	r3, #5
 800cd54:	d826      	bhi.n	800cda4 <UART_SetConfig+0x594>
 800cd56:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <UART_SetConfig+0x54c>)
 800cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5c:	0800cd75 	.word	0x0800cd75
 800cd60:	0800cd7d 	.word	0x0800cd7d
 800cd64:	0800cd85 	.word	0x0800cd85
 800cd68:	0800cd8d 	.word	0x0800cd8d
 800cd6c:	0800cd95 	.word	0x0800cd95
 800cd70:	0800cd9d 	.word	0x0800cd9d
 800cd74:	2302      	movs	r3, #2
 800cd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7a:	e01a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd7c:	2304      	movs	r3, #4
 800cd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd82:	e016      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd84:	2308      	movs	r3, #8
 800cd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8a:	e012      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd8c:	2310      	movs	r3, #16
 800cd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd92:	e00e      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd94:	2320      	movs	r3, #32
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9a:	e00a      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cd9c:	2340      	movs	r3, #64	; 0x40
 800cd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda2:	e006      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cda4:	2380      	movs	r3, #128	; 0x80
 800cda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdaa:	e002      	b.n	800cdb2 <UART_SetConfig+0x5a2>
 800cdac:	2380      	movs	r3, #128	; 0x80
 800cdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a40      	ldr	r2, [pc, #256]	; (800ceb8 <UART_SetConfig+0x6a8>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	f040 80ef 	bne.w	800cf9c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdc2:	2b20      	cmp	r3, #32
 800cdc4:	dc46      	bgt.n	800ce54 <UART_SetConfig+0x644>
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	f2c0 8081 	blt.w	800cece <UART_SetConfig+0x6be>
 800cdcc:	3b02      	subs	r3, #2
 800cdce:	2b1e      	cmp	r3, #30
 800cdd0:	d87d      	bhi.n	800cece <UART_SetConfig+0x6be>
 800cdd2:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <UART_SetConfig+0x5c8>)
 800cdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd8:	0800ce5b 	.word	0x0800ce5b
 800cddc:	0800cecf 	.word	0x0800cecf
 800cde0:	0800ce63 	.word	0x0800ce63
 800cde4:	0800cecf 	.word	0x0800cecf
 800cde8:	0800cecf 	.word	0x0800cecf
 800cdec:	0800cecf 	.word	0x0800cecf
 800cdf0:	0800ce73 	.word	0x0800ce73
 800cdf4:	0800cecf 	.word	0x0800cecf
 800cdf8:	0800cecf 	.word	0x0800cecf
 800cdfc:	0800cecf 	.word	0x0800cecf
 800ce00:	0800cecf 	.word	0x0800cecf
 800ce04:	0800cecf 	.word	0x0800cecf
 800ce08:	0800cecf 	.word	0x0800cecf
 800ce0c:	0800cecf 	.word	0x0800cecf
 800ce10:	0800ce83 	.word	0x0800ce83
 800ce14:	0800cecf 	.word	0x0800cecf
 800ce18:	0800cecf 	.word	0x0800cecf
 800ce1c:	0800cecf 	.word	0x0800cecf
 800ce20:	0800cecf 	.word	0x0800cecf
 800ce24:	0800cecf 	.word	0x0800cecf
 800ce28:	0800cecf 	.word	0x0800cecf
 800ce2c:	0800cecf 	.word	0x0800cecf
 800ce30:	0800cecf 	.word	0x0800cecf
 800ce34:	0800cecf 	.word	0x0800cecf
 800ce38:	0800cecf 	.word	0x0800cecf
 800ce3c:	0800cecf 	.word	0x0800cecf
 800ce40:	0800cecf 	.word	0x0800cecf
 800ce44:	0800cecf 	.word	0x0800cecf
 800ce48:	0800cecf 	.word	0x0800cecf
 800ce4c:	0800cecf 	.word	0x0800cecf
 800ce50:	0800cec1 	.word	0x0800cec1
 800ce54:	2b40      	cmp	r3, #64	; 0x40
 800ce56:	d036      	beq.n	800cec6 <UART_SetConfig+0x6b6>
 800ce58:	e039      	b.n	800cece <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce5a:	f7fd f8f9 	bl	800a050 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce60:	e03b      	b.n	800ceda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce62:	f107 0314 	add.w	r3, r7, #20
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fd f908 	bl	800a07c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce70:	e033      	b.n	800ceda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce72:	f107 0308 	add.w	r3, r7, #8
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fd fa54 	bl	800a324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce80:	e02b      	b.n	800ceda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce82:	4b0a      	ldr	r3, [pc, #40]	; (800ceac <UART_SetConfig+0x69c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f003 0320 	and.w	r3, r3, #32
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d009      	beq.n	800cea2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce8e:	4b07      	ldr	r3, [pc, #28]	; (800ceac <UART_SetConfig+0x69c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	08db      	lsrs	r3, r3, #3
 800ce94:	f003 0303 	and.w	r3, r3, #3
 800ce98:	4a08      	ldr	r2, [pc, #32]	; (800cebc <UART_SetConfig+0x6ac>)
 800ce9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cea0:	e01b      	b.n	800ceda <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800cea2:	4b06      	ldr	r3, [pc, #24]	; (800cebc <UART_SetConfig+0x6ac>)
 800cea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cea6:	e018      	b.n	800ceda <UART_SetConfig+0x6ca>
 800cea8:	40011400 	.word	0x40011400
 800ceac:	58024400 	.word	0x58024400
 800ceb0:	40007800 	.word	0x40007800
 800ceb4:	40007c00 	.word	0x40007c00
 800ceb8:	58000c00 	.word	0x58000c00
 800cebc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cec0:	4bc4      	ldr	r3, [pc, #784]	; (800d1d4 <UART_SetConfig+0x9c4>)
 800cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cec4:	e009      	b.n	800ceda <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cecc:	e005      	b.n	800ceda <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cece:	2300      	movs	r3, #0
 800ced0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ced8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 81da 	beq.w	800d296 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee6:	4abc      	ldr	r2, [pc, #752]	; (800d1d8 <UART_SetConfig+0x9c8>)
 800cee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceec:	461a      	mov	r2, r3
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	4613      	mov	r3, r2
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	4413      	add	r3, r2
 800cf00:	6a3a      	ldr	r2, [r7, #32]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d305      	bcc.n	800cf12 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf0c:	6a3a      	ldr	r2, [r7, #32]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d903      	bls.n	800cf1a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf18:	e1bd      	b.n	800d296 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f04f 0100 	mov.w	r1, #0
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	4aac      	ldr	r2, [pc, #688]	; (800d1d8 <UART_SetConfig+0x9c8>)
 800cf28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	f7f3 fa2d 	bl	8000390 <__aeabi_uldivmod>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4610      	mov	r0, r2
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	f04f 0200 	mov.w	r2, #0
 800cf42:	f04f 0300 	mov.w	r3, #0
 800cf46:	020b      	lsls	r3, r1, #8
 800cf48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf4c:	0202      	lsls	r2, r0, #8
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	6849      	ldr	r1, [r1, #4]
 800cf52:	0849      	lsrs	r1, r1, #1
 800cf54:	4608      	mov	r0, r1
 800cf56:	f04f 0100 	mov.w	r1, #0
 800cf5a:	1814      	adds	r4, r2, r0
 800cf5c:	eb43 0501 	adc.w	r5, r3, r1
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	461a      	mov	r2, r3
 800cf66:	f04f 0300 	mov.w	r3, #0
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 fa0f 	bl	8000390 <__aeabi_uldivmod>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4613      	mov	r3, r2
 800cf78:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf80:	d308      	bcc.n	800cf94 <UART_SetConfig+0x784>
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf88:	d204      	bcs.n	800cf94 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf90:	60da      	str	r2, [r3, #12]
 800cf92:	e180      	b.n	800d296 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf9a:	e17c      	b.n	800d296 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	69db      	ldr	r3, [r3, #28]
 800cfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfa4:	f040 80be 	bne.w	800d124 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800cfa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfac:	2b20      	cmp	r3, #32
 800cfae:	dc49      	bgt.n	800d044 <UART_SetConfig+0x834>
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	db7c      	blt.n	800d0ae <UART_SetConfig+0x89e>
 800cfb4:	2b20      	cmp	r3, #32
 800cfb6:	d87a      	bhi.n	800d0ae <UART_SetConfig+0x89e>
 800cfb8:	a201      	add	r2, pc, #4	; (adr r2, 800cfc0 <UART_SetConfig+0x7b0>)
 800cfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfbe:	bf00      	nop
 800cfc0:	0800d04b 	.word	0x0800d04b
 800cfc4:	0800d053 	.word	0x0800d053
 800cfc8:	0800d0af 	.word	0x0800d0af
 800cfcc:	0800d0af 	.word	0x0800d0af
 800cfd0:	0800d05b 	.word	0x0800d05b
 800cfd4:	0800d0af 	.word	0x0800d0af
 800cfd8:	0800d0af 	.word	0x0800d0af
 800cfdc:	0800d0af 	.word	0x0800d0af
 800cfe0:	0800d06b 	.word	0x0800d06b
 800cfe4:	0800d0af 	.word	0x0800d0af
 800cfe8:	0800d0af 	.word	0x0800d0af
 800cfec:	0800d0af 	.word	0x0800d0af
 800cff0:	0800d0af 	.word	0x0800d0af
 800cff4:	0800d0af 	.word	0x0800d0af
 800cff8:	0800d0af 	.word	0x0800d0af
 800cffc:	0800d0af 	.word	0x0800d0af
 800d000:	0800d07b 	.word	0x0800d07b
 800d004:	0800d0af 	.word	0x0800d0af
 800d008:	0800d0af 	.word	0x0800d0af
 800d00c:	0800d0af 	.word	0x0800d0af
 800d010:	0800d0af 	.word	0x0800d0af
 800d014:	0800d0af 	.word	0x0800d0af
 800d018:	0800d0af 	.word	0x0800d0af
 800d01c:	0800d0af 	.word	0x0800d0af
 800d020:	0800d0af 	.word	0x0800d0af
 800d024:	0800d0af 	.word	0x0800d0af
 800d028:	0800d0af 	.word	0x0800d0af
 800d02c:	0800d0af 	.word	0x0800d0af
 800d030:	0800d0af 	.word	0x0800d0af
 800d034:	0800d0af 	.word	0x0800d0af
 800d038:	0800d0af 	.word	0x0800d0af
 800d03c:	0800d0af 	.word	0x0800d0af
 800d040:	0800d0a1 	.word	0x0800d0a1
 800d044:	2b40      	cmp	r3, #64	; 0x40
 800d046:	d02e      	beq.n	800d0a6 <UART_SetConfig+0x896>
 800d048:	e031      	b.n	800d0ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d04a:	f7fc f895 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800d04e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d050:	e033      	b.n	800d0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d052:	f7fc f8a7 	bl	80091a4 <HAL_RCC_GetPCLK2Freq>
 800d056:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d058:	e02f      	b.n	800d0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d05a:	f107 0314 	add.w	r3, r7, #20
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fd f80c 	bl	800a07c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d068:	e027      	b.n	800d0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd f958 	bl	800a324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d078:	e01f      	b.n	800d0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d07a:	4b58      	ldr	r3, [pc, #352]	; (800d1dc <UART_SetConfig+0x9cc>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 0320 	and.w	r3, r3, #32
 800d082:	2b00      	cmp	r3, #0
 800d084:	d009      	beq.n	800d09a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d086:	4b55      	ldr	r3, [pc, #340]	; (800d1dc <UART_SetConfig+0x9cc>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	08db      	lsrs	r3, r3, #3
 800d08c:	f003 0303 	and.w	r3, r3, #3
 800d090:	4a53      	ldr	r2, [pc, #332]	; (800d1e0 <UART_SetConfig+0x9d0>)
 800d092:	fa22 f303 	lsr.w	r3, r2, r3
 800d096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d098:	e00f      	b.n	800d0ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d09a:	4b51      	ldr	r3, [pc, #324]	; (800d1e0 <UART_SetConfig+0x9d0>)
 800d09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d09e:	e00c      	b.n	800d0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0a0:	4b4c      	ldr	r3, [pc, #304]	; (800d1d4 <UART_SetConfig+0x9c4>)
 800d0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0a4:	e009      	b.n	800d0ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ac:	e005      	b.n	800d0ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d0b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 80ea 	beq.w	800d296 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c6:	4a44      	ldr	r2, [pc, #272]	; (800d1d8 <UART_SetConfig+0x9c8>)
 800d0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0d4:	005a      	lsls	r2, r3, #1
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	085b      	lsrs	r3, r3, #1
 800d0dc:	441a      	add	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	2b0f      	cmp	r3, #15
 800d0ec:	d916      	bls.n	800d11c <UART_SetConfig+0x90c>
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0f4:	d212      	bcs.n	800d11c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	f023 030f 	bic.w	r3, r3, #15
 800d0fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	085b      	lsrs	r3, r3, #1
 800d104:	b29b      	uxth	r3, r3
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d10e:	4313      	orrs	r3, r2
 800d110:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d118:	60da      	str	r2, [r3, #12]
 800d11a:	e0bc      	b.n	800d296 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d122:	e0b8      	b.n	800d296 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d128:	2b20      	cmp	r3, #32
 800d12a:	dc4b      	bgt.n	800d1c4 <UART_SetConfig+0x9b4>
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f2c0 8087 	blt.w	800d240 <UART_SetConfig+0xa30>
 800d132:	2b20      	cmp	r3, #32
 800d134:	f200 8084 	bhi.w	800d240 <UART_SetConfig+0xa30>
 800d138:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <UART_SetConfig+0x930>)
 800d13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13e:	bf00      	nop
 800d140:	0800d1cb 	.word	0x0800d1cb
 800d144:	0800d1e5 	.word	0x0800d1e5
 800d148:	0800d241 	.word	0x0800d241
 800d14c:	0800d241 	.word	0x0800d241
 800d150:	0800d1ed 	.word	0x0800d1ed
 800d154:	0800d241 	.word	0x0800d241
 800d158:	0800d241 	.word	0x0800d241
 800d15c:	0800d241 	.word	0x0800d241
 800d160:	0800d1fd 	.word	0x0800d1fd
 800d164:	0800d241 	.word	0x0800d241
 800d168:	0800d241 	.word	0x0800d241
 800d16c:	0800d241 	.word	0x0800d241
 800d170:	0800d241 	.word	0x0800d241
 800d174:	0800d241 	.word	0x0800d241
 800d178:	0800d241 	.word	0x0800d241
 800d17c:	0800d241 	.word	0x0800d241
 800d180:	0800d20d 	.word	0x0800d20d
 800d184:	0800d241 	.word	0x0800d241
 800d188:	0800d241 	.word	0x0800d241
 800d18c:	0800d241 	.word	0x0800d241
 800d190:	0800d241 	.word	0x0800d241
 800d194:	0800d241 	.word	0x0800d241
 800d198:	0800d241 	.word	0x0800d241
 800d19c:	0800d241 	.word	0x0800d241
 800d1a0:	0800d241 	.word	0x0800d241
 800d1a4:	0800d241 	.word	0x0800d241
 800d1a8:	0800d241 	.word	0x0800d241
 800d1ac:	0800d241 	.word	0x0800d241
 800d1b0:	0800d241 	.word	0x0800d241
 800d1b4:	0800d241 	.word	0x0800d241
 800d1b8:	0800d241 	.word	0x0800d241
 800d1bc:	0800d241 	.word	0x0800d241
 800d1c0:	0800d233 	.word	0x0800d233
 800d1c4:	2b40      	cmp	r3, #64	; 0x40
 800d1c6:	d037      	beq.n	800d238 <UART_SetConfig+0xa28>
 800d1c8:	e03a      	b.n	800d240 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1ca:	f7fb ffd5 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800d1ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1d0:	e03c      	b.n	800d24c <UART_SetConfig+0xa3c>
 800d1d2:	bf00      	nop
 800d1d4:	003d0900 	.word	0x003d0900
 800d1d8:	08011ccc 	.word	0x08011ccc
 800d1dc:	58024400 	.word	0x58024400
 800d1e0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1e4:	f7fb ffde 	bl	80091a4 <HAL_RCC_GetPCLK2Freq>
 800d1e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1ea:	e02f      	b.n	800d24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ec:	f107 0314 	add.w	r3, r7, #20
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fc ff43 	bl	800a07c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1fa:	e027      	b.n	800d24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1fc:	f107 0308 	add.w	r3, r7, #8
 800d200:	4618      	mov	r0, r3
 800d202:	f7fd f88f 	bl	800a324 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d20a:	e01f      	b.n	800d24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d20c:	4b2c      	ldr	r3, [pc, #176]	; (800d2c0 <UART_SetConfig+0xab0>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 0320 	and.w	r3, r3, #32
 800d214:	2b00      	cmp	r3, #0
 800d216:	d009      	beq.n	800d22c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d218:	4b29      	ldr	r3, [pc, #164]	; (800d2c0 <UART_SetConfig+0xab0>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	08db      	lsrs	r3, r3, #3
 800d21e:	f003 0303 	and.w	r3, r3, #3
 800d222:	4a28      	ldr	r2, [pc, #160]	; (800d2c4 <UART_SetConfig+0xab4>)
 800d224:	fa22 f303 	lsr.w	r3, r2, r3
 800d228:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d22a:	e00f      	b.n	800d24c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d22c:	4b25      	ldr	r3, [pc, #148]	; (800d2c4 <UART_SetConfig+0xab4>)
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d230:	e00c      	b.n	800d24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d232:	4b25      	ldr	r3, [pc, #148]	; (800d2c8 <UART_SetConfig+0xab8>)
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d236:	e009      	b.n	800d24c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d23e:	e005      	b.n	800d24c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d240:	2300      	movs	r3, #0
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d24a:	bf00      	nop
    }

    if (pclk != 0U)
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d021      	beq.n	800d296 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	4a1d      	ldr	r2, [pc, #116]	; (800d2cc <UART_SetConfig+0xabc>)
 800d258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d25c:	461a      	mov	r2, r3
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	fbb3 f2f2 	udiv	r2, r3, r2
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	085b      	lsrs	r3, r3, #1
 800d26a:	441a      	add	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	fbb2 f3f3 	udiv	r3, r2, r3
 800d274:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	2b0f      	cmp	r3, #15
 800d27a:	d909      	bls.n	800d290 <UART_SetConfig+0xa80>
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d282:	d205      	bcs.n	800d290 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	b29a      	uxth	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	60da      	str	r2, [r3, #12]
 800d28e:	e002      	b.n	800d296 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d2b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3738      	adds	r7, #56	; 0x38
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bdb0      	pop	{r4, r5, r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	58024400 	.word	0x58024400
 800d2c4:	03d09000 	.word	0x03d09000
 800d2c8:	003d0900 	.word	0x003d0900
 800d2cc:	08011ccc 	.word	0x08011ccc

0800d2d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2dc:	f003 0301 	and.w	r3, r3, #1
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00a      	beq.n	800d2fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2fe:	f003 0302 	and.w	r3, r3, #2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	430a      	orrs	r2, r1
 800d31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d320:	f003 0304 	and.w	r3, r3, #4
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00a      	beq.n	800d33e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	430a      	orrs	r2, r1
 800d33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d342:	f003 0308 	and.w	r3, r3, #8
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00a      	beq.n	800d360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	430a      	orrs	r2, r1
 800d35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d364:	f003 0310 	and.w	r3, r3, #16
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00a      	beq.n	800d382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	430a      	orrs	r2, r1
 800d380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00a      	beq.n	800d3a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	430a      	orrs	r2, r1
 800d3a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d01a      	beq.n	800d3e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	430a      	orrs	r2, r1
 800d3c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3ce:	d10a      	bne.n	800d3e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	430a      	orrs	r2, r1
 800d406:	605a      	str	r2, [r3, #4]
  }
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af02      	add	r7, sp, #8
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d424:	f7f7 fb92 	bl	8004b4c <HAL_GetTick>
 800d428:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 0308 	and.w	r3, r3, #8
 800d434:	2b08      	cmp	r3, #8
 800d436:	d10e      	bne.n	800d456 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f82f 	bl	800d4aa <UART_WaitOnFlagUntilTimeout>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d452:	2303      	movs	r3, #3
 800d454:	e025      	b.n	800d4a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b04      	cmp	r3, #4
 800d462:	d10e      	bne.n	800d482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f819 	bl	800d4aa <UART_WaitOnFlagUntilTimeout>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e00f      	b.n	800d4a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2220      	movs	r2, #32
 800d486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2220      	movs	r2, #32
 800d48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b09c      	sub	sp, #112	; 0x70
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	603b      	str	r3, [r7, #0]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4ba:	e0a9      	b.n	800d610 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c2:	f000 80a5 	beq.w	800d610 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4c6:	f7f7 fb41 	bl	8004b4c <HAL_GetTick>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d302      	bcc.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x32>
 800d4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d140      	bne.n	800d55e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4e4:	e853 3f00 	ldrex	r3, [r3]
 800d4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4f0:	667b      	str	r3, [r7, #100]	; 0x64
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d500:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d502:	e841 2300 	strex	r3, r2, [r1]
 800d506:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1e6      	bne.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3308      	adds	r3, #8
 800d514:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	f023 0301 	bic.w	r3, r3, #1
 800d524:	663b      	str	r3, [r7, #96]	; 0x60
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3308      	adds	r3, #8
 800d52c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d52e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d530:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d536:	e841 2300 	strex	r3, r2, [r1]
 800d53a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1e5      	bne.n	800d50e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2220      	movs	r2, #32
 800d546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e069      	b.n	800d632 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0304 	and.w	r3, r3, #4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d051      	beq.n	800d610 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d57a:	d149      	bne.n	800d610 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d584:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	e853 3f00 	ldrex	r3, [r3]
 800d592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d59a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ac:	e841 2300 	strex	r3, r2, [r1]
 800d5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1e6      	bne.n	800d586 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3308      	adds	r3, #8
 800d5be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	e853 3f00 	ldrex	r3, [r3]
 800d5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	f023 0301 	bic.w	r3, r3, #1
 800d5ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3308      	adds	r3, #8
 800d5d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5d8:	623a      	str	r2, [r7, #32]
 800d5da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5dc:	69f9      	ldr	r1, [r7, #28]
 800d5de:	6a3a      	ldr	r2, [r7, #32]
 800d5e0:	e841 2300 	strex	r3, r2, [r1]
 800d5e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1e5      	bne.n	800d5b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2220      	movs	r2, #32
 800d5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2220      	movs	r2, #32
 800d5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2220      	movs	r2, #32
 800d600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d60c:	2303      	movs	r3, #3
 800d60e:	e010      	b.n	800d632 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	69da      	ldr	r2, [r3, #28]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	4013      	ands	r3, r2
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	bf0c      	ite	eq
 800d620:	2301      	moveq	r3, #1
 800d622:	2300      	movne	r3, #0
 800d624:	b2db      	uxtb	r3, r3
 800d626:	461a      	mov	r2, r3
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	f43f af46 	beq.w	800d4bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3770      	adds	r7, #112	; 0x70
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b096      	sub	sp, #88	; 0x58
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	4613      	mov	r3, r2
 800d648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	88fa      	ldrh	r2, [r7, #6]
 800d654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2222      	movs	r2, #34	; 0x22
 800d664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d02c      	beq.n	800d6ca <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d674:	4a42      	ldr	r2, [pc, #264]	; (800d780 <UART_Start_Receive_DMA+0x144>)
 800d676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d67c:	4a41      	ldr	r2, [pc, #260]	; (800d784 <UART_Start_Receive_DMA+0x148>)
 800d67e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d684:	4a40      	ldr	r2, [pc, #256]	; (800d788 <UART_Start_Receive_DMA+0x14c>)
 800d686:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d68c:	2200      	movs	r2, #0
 800d68e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3324      	adds	r3, #36	; 0x24
 800d69a:	4619      	mov	r1, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	f7f8 f8e0 	bl	8005868 <HAL_DMA_Start_IT>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00d      	beq.n	800d6ca <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2210      	movs	r2, #16
 800d6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2220      	movs	r2, #32
 800d6c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e055      	b.n	800d776 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d018      	beq.n	800d70c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e2:	e853 3f00 	ldrex	r3, [r3]
 800d6e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6ee:	657b      	str	r3, [r7, #84]	; 0x54
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6fa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e6      	bne.n	800d6da <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	3308      	adds	r3, #8
 800d712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	e853 3f00 	ldrex	r3, [r3]
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	f043 0301 	orr.w	r3, r3, #1
 800d722:	653b      	str	r3, [r7, #80]	; 0x50
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3308      	adds	r3, #8
 800d72a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d72c:	637a      	str	r2, [r7, #52]	; 0x34
 800d72e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d734:	e841 2300 	strex	r3, r2, [r1]
 800d738:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1e5      	bne.n	800d70c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3308      	adds	r3, #8
 800d746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	e853 3f00 	ldrex	r3, [r3]
 800d74e:	613b      	str	r3, [r7, #16]
   return(result);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d756:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3308      	adds	r3, #8
 800d75e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d760:	623a      	str	r2, [r7, #32]
 800d762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d764:	69f9      	ldr	r1, [r7, #28]
 800d766:	6a3a      	ldr	r2, [r7, #32]
 800d768:	e841 2300 	strex	r3, r2, [r1]
 800d76c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1e5      	bne.n	800d740 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3758      	adds	r7, #88	; 0x58
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	0800d98f 	.word	0x0800d98f
 800d784:	0800dab1 	.word	0x0800dab1
 800d788:	0800dae9 	.word	0x0800dae9

0800d78c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b08f      	sub	sp, #60	; 0x3c
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79a:	6a3b      	ldr	r3, [r7, #32]
 800d79c:	e853 3f00 	ldrex	r3, [r3]
 800d7a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ba:	e841 2300 	strex	r3, r2, [r1]
 800d7be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e6      	bne.n	800d794 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3308      	adds	r3, #8
 800d7cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	e853 3f00 	ldrex	r3, [r3]
 800d7d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d7dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e6:	61ba      	str	r2, [r7, #24]
 800d7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ea:	6979      	ldr	r1, [r7, #20]
 800d7ec:	69ba      	ldr	r2, [r7, #24]
 800d7ee:	e841 2300 	strex	r3, r2, [r1]
 800d7f2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1e5      	bne.n	800d7c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2220      	movs	r2, #32
 800d7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d802:	bf00      	nop
 800d804:	373c      	adds	r7, #60	; 0x3c
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
	...

0800d810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d810:	b480      	push	{r7}
 800d812:	b095      	sub	sp, #84	; 0x54
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d82c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d836:	643b      	str	r3, [r7, #64]	; 0x40
 800d838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e6      	bne.n	800d818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	61fb      	str	r3, [r7, #28]
   return(result);
 800d85a:	69fa      	ldr	r2, [r7, #28]
 800d85c:	4b1e      	ldr	r3, [pc, #120]	; (800d8d8 <UART_EndRxTransfer+0xc8>)
 800d85e:	4013      	ands	r3, r2
 800d860:	64bb      	str	r3, [r7, #72]	; 0x48
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d86a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d882:	2b01      	cmp	r3, #1
 800d884:	d118      	bne.n	800d8b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	e853 3f00 	ldrex	r3, [r3]
 800d892:	60bb      	str	r3, [r7, #8]
   return(result);
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	f023 0310 	bic.w	r3, r3, #16
 800d89a:	647b      	str	r3, [r7, #68]	; 0x44
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8a4:	61bb      	str	r3, [r7, #24]
 800d8a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a8:	6979      	ldr	r1, [r7, #20]
 800d8aa:	69ba      	ldr	r2, [r7, #24]
 800d8ac:	e841 2300 	strex	r3, r2, [r1]
 800d8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1e6      	bne.n	800d886 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2220      	movs	r2, #32
 800d8bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d8cc:	bf00      	nop
 800d8ce:	3754      	adds	r7, #84	; 0x54
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	effffffe 	.word	0xeffffffe

0800d8dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b090      	sub	sp, #64	; 0x40
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	69db      	ldr	r3, [r3, #28]
 800d8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8f2:	d037      	beq.n	800d964 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3308      	adds	r3, #8
 800d902:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	e853 3f00 	ldrex	r3, [r3]
 800d90a:	623b      	str	r3, [r7, #32]
   return(result);
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d912:	63bb      	str	r3, [r7, #56]	; 0x38
 800d914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3308      	adds	r3, #8
 800d91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d91c:	633a      	str	r2, [r7, #48]	; 0x30
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d924:	e841 2300 	strex	r3, r2, [r1]
 800d928:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1e5      	bne.n	800d8fc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d944:	637b      	str	r3, [r7, #52]	; 0x34
 800d946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94e:	61fb      	str	r3, [r7, #28]
 800d950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	69b9      	ldr	r1, [r7, #24]
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	617b      	str	r3, [r7, #20]
   return(result);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d962:	e002      	b.n	800d96a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d964:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d966:	f7fe ff21 	bl	800c7ac <HAL_UART_TxCpltCallback>
}
 800d96a:	bf00      	nop
 800d96c:	3740      	adds	r7, #64	; 0x40
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7fe ff1d 	bl	800c7c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b09c      	sub	sp, #112	; 0x70
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9a4:	d071      	beq.n	800da8a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9b6:	e853 3f00 	ldrex	r3, [r3]
 800d9ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d9bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9cc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9d4:	e841 2300 	strex	r3, r2, [r1]
 800d9d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1e6      	bne.n	800d9ae <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	e853 3f00 	ldrex	r3, [r3]
 800d9ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f2:	f023 0301 	bic.w	r3, r3, #1
 800d9f6:	667b      	str	r3, [r7, #100]	; 0x64
 800d9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3308      	adds	r3, #8
 800d9fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da00:	647a      	str	r2, [r7, #68]	; 0x44
 800da02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da08:	e841 2300 	strex	r3, r2, [r1]
 800da0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1e5      	bne.n	800d9e0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3308      	adds	r3, #8
 800da1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	e853 3f00 	ldrex	r3, [r3]
 800da22:	623b      	str	r3, [r7, #32]
   return(result);
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da2a:	663b      	str	r3, [r7, #96]	; 0x60
 800da2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3308      	adds	r3, #8
 800da32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da34:	633a      	str	r2, [r7, #48]	; 0x30
 800da36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da3c:	e841 2300 	strex	r3, r2, [r1]
 800da40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1e5      	bne.n	800da14 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da4a:	2220      	movs	r2, #32
 800da4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da54:	2b01      	cmp	r3, #1
 800da56:	d118      	bne.n	800da8a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	60fb      	str	r3, [r7, #12]
   return(result);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f023 0310 	bic.w	r3, r3, #16
 800da6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da76:	61fb      	str	r3, [r7, #28]
 800da78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7a:	69b9      	ldr	r1, [r7, #24]
 800da7c:	69fa      	ldr	r2, [r7, #28]
 800da7e:	e841 2300 	strex	r3, r2, [r1]
 800da82:	617b      	str	r3, [r7, #20]
   return(result);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e6      	bne.n	800da58 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d107      	bne.n	800daa2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da98:	4619      	mov	r1, r3
 800da9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da9c:	f7f4 fa2c 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daa0:	e002      	b.n	800daa8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800daa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800daa4:	f7fe fe96 	bl	800c7d4 <HAL_UART_RxCpltCallback>
}
 800daa8:	bf00      	nop
 800daaa:	3770      	adds	r7, #112	; 0x70
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d109      	bne.n	800dada <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dacc:	085b      	lsrs	r3, r3, #1
 800dace:	b29b      	uxth	r3, r3
 800dad0:	4619      	mov	r1, r3
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f7f4 fa10 	bl	8001ef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dad8:	e002      	b.n	800dae0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f7fe fe84 	bl	800c7e8 <HAL_UART_RxHalfCpltCallback>
}
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dafc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db10:	2b80      	cmp	r3, #128	; 0x80
 800db12:	d109      	bne.n	800db28 <UART_DMAError+0x40>
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	2b21      	cmp	r3, #33	; 0x21
 800db18:	d106      	bne.n	800db28 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db22:	6978      	ldr	r0, [r7, #20]
 800db24:	f7ff fe32 	bl	800d78c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db32:	2b40      	cmp	r3, #64	; 0x40
 800db34:	d109      	bne.n	800db4a <UART_DMAError+0x62>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2b22      	cmp	r3, #34	; 0x22
 800db3a:	d106      	bne.n	800db4a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2200      	movs	r2, #0
 800db40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800db44:	6978      	ldr	r0, [r7, #20]
 800db46:	f7ff fe63 	bl	800d810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db50:	f043 0210 	orr.w	r2, r3, #16
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db5a:	6978      	ldr	r0, [r7, #20]
 800db5c:	f7fe fe4e 	bl	800c7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db60:	bf00      	nop
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2200      	movs	r2, #0
 800db82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f7fe fe38 	bl	800c7fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db8c:	bf00      	nop
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	e853 3f00 	ldrex	r3, [r3]
 800dba8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	61bb      	str	r3, [r7, #24]
 800dbbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbe:	6979      	ldr	r1, [r7, #20]
 800dbc0:	69ba      	ldr	r2, [r7, #24]
 800dbc2:	e841 2300 	strex	r3, r2, [r1]
 800dbc6:	613b      	str	r3, [r7, #16]
   return(result);
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e6      	bne.n	800db9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7fe fde5 	bl	800c7ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbe2:	bf00      	nop
 800dbe4:	3720      	adds	r7, #32
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_UARTEx_EnableFifoMode+0x16>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e02b      	b.n	800dc94 <HAL_UARTEx_EnableFifoMode+0x6e>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2224      	movs	r2, #36	; 0x24
 800dc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f022 0201 	bic.w	r2, r2, #1
 800dc62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800dc72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f91f 	bl	800dec0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2220      	movs	r2, #32
 800dc86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b085      	sub	sp, #20
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d101      	bne.n	800dcb2 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcae:	2302      	movs	r3, #2
 800dcb0:	e027      	b.n	800dd02 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2224      	movs	r2, #36	; 0x24
 800dcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f022 0201 	bic.w	r2, r2, #1
 800dcd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2220      	movs	r2, #32
 800dcf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3714      	adds	r7, #20
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d101      	bne.n	800dd26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd22:	2302      	movs	r3, #2
 800dd24:	e02d      	b.n	800dd82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2224      	movs	r2, #36	; 0x24
 800dd32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f022 0201 	bic.w	r2, r2, #1
 800dd4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	430a      	orrs	r2, r1
 800dd60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f8ac 	bl	800dec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2220      	movs	r2, #32
 800dd74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d101      	bne.n	800dda2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e02d      	b.n	800ddfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2224      	movs	r2, #36	; 0x24
 800ddae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f022 0201 	bic.w	r2, r2, #1
 800ddc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	430a      	orrs	r2, r1
 800dddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f86e 	bl	800dec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2220      	movs	r2, #32
 800ddf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddfc:	2300      	movs	r3, #0
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b08c      	sub	sp, #48	; 0x30
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	60f8      	str	r0, [r7, #12]
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	4613      	mov	r3, r2
 800de12:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de1a:	2b20      	cmp	r3, #32
 800de1c:	d14a      	bne.n	800deb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d002      	beq.n	800de2a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800de24:	88fb      	ldrh	r3, [r7, #6]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e043      	b.n	800deb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de34:	2b01      	cmp	r3, #1
 800de36:	d101      	bne.n	800de3c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800de38:	2302      	movs	r3, #2
 800de3a:	e03c      	b.n	800deb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2201      	movs	r2, #1
 800de48:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800de4a:	88fb      	ldrh	r3, [r7, #6]
 800de4c:	461a      	mov	r2, r3
 800de4e:	68b9      	ldr	r1, [r7, #8]
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7ff fbf3 	bl	800d63c <UART_Start_Receive_DMA>
 800de56:	4603      	mov	r3, r0
 800de58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800de5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de60:	2b00      	cmp	r3, #0
 800de62:	d124      	bne.n	800deae <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d11d      	bne.n	800dea8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2210      	movs	r2, #16
 800de72:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	e853 3f00 	ldrex	r3, [r3]
 800de80:	617b      	str	r3, [r7, #20]
   return(result);
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f043 0310 	orr.w	r3, r3, #16
 800de88:	62bb      	str	r3, [r7, #40]	; 0x28
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	461a      	mov	r2, r3
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	627b      	str	r3, [r7, #36]	; 0x24
 800de94:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de96:	6a39      	ldr	r1, [r7, #32]
 800de98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de9a:	e841 2300 	strex	r3, r2, [r1]
 800de9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1e6      	bne.n	800de74 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800dea6:	e002      	b.n	800deae <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800deae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800deb2:	e000      	b.n	800deb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800deb4:	2302      	movs	r3, #2
  }
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3730      	adds	r7, #48	; 0x30
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
	...

0800dec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800decc:	2b00      	cmp	r3, #0
 800dece:	d108      	bne.n	800dee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dee0:	e031      	b.n	800df46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dee2:	2310      	movs	r3, #16
 800dee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dee6:	2310      	movs	r3, #16
 800dee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	0e5b      	lsrs	r3, r3, #25
 800def2:	b2db      	uxtb	r3, r3
 800def4:	f003 0307 	and.w	r3, r3, #7
 800def8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	0f5b      	lsrs	r3, r3, #29
 800df02:	b2db      	uxtb	r3, r3
 800df04:	f003 0307 	and.w	r3, r3, #7
 800df08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df0a:	7bbb      	ldrb	r3, [r7, #14]
 800df0c:	7b3a      	ldrb	r2, [r7, #12]
 800df0e:	4911      	ldr	r1, [pc, #68]	; (800df54 <UARTEx_SetNbDataToProcess+0x94>)
 800df10:	5c8a      	ldrb	r2, [r1, r2]
 800df12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df16:	7b3a      	ldrb	r2, [r7, #12]
 800df18:	490f      	ldr	r1, [pc, #60]	; (800df58 <UARTEx_SetNbDataToProcess+0x98>)
 800df1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800df20:	b29a      	uxth	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df28:	7bfb      	ldrb	r3, [r7, #15]
 800df2a:	7b7a      	ldrb	r2, [r7, #13]
 800df2c:	4909      	ldr	r1, [pc, #36]	; (800df54 <UARTEx_SetNbDataToProcess+0x94>)
 800df2e:	5c8a      	ldrb	r2, [r1, r2]
 800df30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df34:	7b7a      	ldrb	r2, [r7, #13]
 800df36:	4908      	ldr	r1, [pc, #32]	; (800df58 <UARTEx_SetNbDataToProcess+0x98>)
 800df38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800df3e:	b29a      	uxth	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df46:	bf00      	nop
 800df48:	3714      	adds	r7, #20
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	08011ce4 	.word	0x08011ce4
 800df58:	08011cec 	.word	0x08011cec

0800df5c <checkint>:
 800df5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df60:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800df64:	429a      	cmp	r2, r3
 800df66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df68:	dd2b      	ble.n	800dfc2 <checkint+0x66>
 800df6a:	f240 4333 	movw	r3, #1075	; 0x433
 800df6e:	429a      	cmp	r2, r3
 800df70:	dc25      	bgt.n	800dfbe <checkint+0x62>
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	f1a3 0620 	sub.w	r6, r3, #32
 800df78:	f04f 32ff 	mov.w	r2, #4294967295
 800df7c:	fa02 f606 	lsl.w	r6, r2, r6
 800df80:	fa02 f403 	lsl.w	r4, r2, r3
 800df84:	f1c3 0520 	rsb	r5, r3, #32
 800df88:	4334      	orrs	r4, r6
 800df8a:	fa22 f505 	lsr.w	r5, r2, r5
 800df8e:	432c      	orrs	r4, r5
 800df90:	409a      	lsls	r2, r3
 800df92:	ea20 0602 	bic.w	r6, r0, r2
 800df96:	ea21 0704 	bic.w	r7, r1, r4
 800df9a:	ea56 0207 	orrs.w	r2, r6, r7
 800df9e:	f1a3 0420 	sub.w	r4, r3, #32
 800dfa2:	f1c3 0220 	rsb	r2, r3, #32
 800dfa6:	d10c      	bne.n	800dfc2 <checkint+0x66>
 800dfa8:	40d8      	lsrs	r0, r3
 800dfaa:	fa01 f302 	lsl.w	r3, r1, r2
 800dfae:	4318      	orrs	r0, r3
 800dfb0:	40e1      	lsrs	r1, r4
 800dfb2:	4308      	orrs	r0, r1
 800dfb4:	f000 0301 	and.w	r3, r0, #1
 800dfb8:	f1c3 0002 	rsb	r0, r3, #2
 800dfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbe:	2002      	movs	r0, #2
 800dfc0:	e7fc      	b.n	800dfbc <checkint+0x60>
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	e7fa      	b.n	800dfbc <checkint+0x60>
	...

0800dfc8 <pow>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	ed2d 8b0a 	vpush	{d8-d12}
 800dfd0:	b09b      	sub	sp, #108	; 0x6c
 800dfd2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dfd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfda:	ed8d 1b00 	vstr	d1, [sp]
 800dfde:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800dfe2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dfe6:	f109 30ff 	add.w	r0, r9, #4294967295
 800dfea:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800dfee:	4288      	cmp	r0, r1
 800dff0:	46cc      	mov	ip, r9
 800dff2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800dff6:	d806      	bhi.n	800e006 <pow+0x3e>
 800dff8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800dffc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800e000:	297f      	cmp	r1, #127	; 0x7f
 800e002:	f240 81ab 	bls.w	800e35c <pow+0x394>
 800e006:	19b1      	adds	r1, r6, r6
 800e008:	9104      	str	r1, [sp, #16]
 800e00a:	eb47 0107 	adc.w	r1, r7, r7
 800e00e:	9105      	str	r1, [sp, #20]
 800e010:	9904      	ldr	r1, [sp, #16]
 800e012:	f111 31ff 	adds.w	r1, r1, #4294967295
 800e016:	460a      	mov	r2, r1
 800e018:	9905      	ldr	r1, [sp, #20]
 800e01a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800e01e:	460b      	mov	r3, r1
 800e020:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800e024:	f06f 0001 	mvn.w	r0, #1
 800e028:	4299      	cmp	r1, r3
 800e02a:	bf08      	it	eq
 800e02c:	4290      	cmpeq	r0, r2
 800e02e:	d260      	bcs.n	800e0f2 <pow+0x12a>
 800e030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e034:	4313      	orrs	r3, r2
 800e036:	d11a      	bne.n	800e06e <pow+0xa6>
 800e038:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800e03c:	1923      	adds	r3, r4, r4
 800e03e:	930c      	str	r3, [sp, #48]	; 0x30
 800e040:	eb42 0302 	adc.w	r3, r2, r2
 800e044:	930d      	str	r3, [sp, #52]	; 0x34
 800e046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e04a:	4bcf      	ldr	r3, [pc, #828]	; (800e388 <pow+0x3c0>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	428b      	cmp	r3, r1
 800e050:	bf08      	it	eq
 800e052:	4282      	cmpeq	r2, r0
 800e054:	f080 8265 	bcs.w	800e522 <pow+0x55a>
 800e058:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e05c:	ed9d 6b00 	vldr	d6, [sp]
 800e060:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e064:	b01b      	add	sp, #108	; 0x6c
 800e066:	ecbd 8b0a 	vpop	{d8-d12}
 800e06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06e:	49c7      	ldr	r1, [pc, #796]	; (800e38c <pow+0x3c4>)
 800e070:	2000      	movs	r0, #0
 800e072:	428d      	cmp	r5, r1
 800e074:	bf08      	it	eq
 800e076:	4284      	cmpeq	r4, r0
 800e078:	d10b      	bne.n	800e092 <pow+0xca>
 800e07a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e07e:	19b3      	adds	r3, r6, r6
 800e080:	930e      	str	r3, [sp, #56]	; 0x38
 800e082:	eb42 0302 	adc.w	r3, r2, r2
 800e086:	930f      	str	r3, [sp, #60]	; 0x3c
 800e088:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e08c:	4bbe      	ldr	r3, [pc, #760]	; (800e388 <pow+0x3c0>)
 800e08e:	2200      	movs	r2, #0
 800e090:	e7dd      	b.n	800e04e <pow+0x86>
 800e092:	1921      	adds	r1, r4, r4
 800e094:	9106      	str	r1, [sp, #24]
 800e096:	eb45 0105 	adc.w	r1, r5, r5
 800e09a:	9107      	str	r1, [sp, #28]
 800e09c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e0a0:	49bb      	ldr	r1, [pc, #748]	; (800e390 <pow+0x3c8>)
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	42a1      	cmp	r1, r4
 800e0a6:	bf08      	it	eq
 800e0a8:	4298      	cmpeq	r0, r3
 800e0aa:	d3d5      	bcc.n	800e058 <pow+0x90>
 800e0ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e0b0:	428c      	cmp	r4, r1
 800e0b2:	bf08      	it	eq
 800e0b4:	4283      	cmpeq	r3, r0
 800e0b6:	d1cf      	bne.n	800e058 <pow+0x90>
 800e0b8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e0bc:	49b5      	ldr	r1, [pc, #724]	; (800e394 <pow+0x3cc>)
 800e0be:	2000      	movs	r0, #0
 800e0c0:	428c      	cmp	r4, r1
 800e0c2:	bf08      	it	eq
 800e0c4:	4283      	cmpeq	r3, r0
 800e0c6:	f000 822c 	beq.w	800e522 <pow+0x55a>
 800e0ca:	49b3      	ldr	r1, [pc, #716]	; (800e398 <pow+0x3d0>)
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	42a1      	cmp	r1, r4
 800e0d2:	bf08      	it	eq
 800e0d4:	4298      	cmpeq	r0, r3
 800e0d6:	ea6f 0307 	mvn.w	r3, r7
 800e0da:	bf34      	ite	cc
 800e0dc:	2201      	movcc	r2, #1
 800e0de:	2200      	movcs	r2, #0
 800e0e0:	0fdb      	lsrs	r3, r3, #31
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	f040 821a 	bne.w	800e51c <pow+0x554>
 800e0e8:	ed9d 7b00 	vldr	d7, [sp]
 800e0ec:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e0f0:	e7b8      	b.n	800e064 <pow+0x9c>
 800e0f2:	1923      	adds	r3, r4, r4
 800e0f4:	9308      	str	r3, [sp, #32]
 800e0f6:	eb45 0305 	adc.w	r3, r5, r5
 800e0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e0fc:	9b08      	ldr	r3, [sp, #32]
 800e0fe:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e102:	9310      	str	r3, [sp, #64]	; 0x40
 800e104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e106:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e10a:	9311      	str	r3, [sp, #68]	; 0x44
 800e10c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e110:	4299      	cmp	r1, r3
 800e112:	bf08      	it	eq
 800e114:	4290      	cmpeq	r0, r2
 800e116:	d22d      	bcs.n	800e174 <pow+0x1ac>
 800e118:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e11c:	2c00      	cmp	r4, #0
 800e11e:	f175 0300 	sbcs.w	r3, r5, #0
 800e122:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e126:	da16      	bge.n	800e156 <pow+0x18e>
 800e128:	4630      	mov	r0, r6
 800e12a:	4639      	mov	r1, r7
 800e12c:	f7ff ff16 	bl	800df5c <checkint>
 800e130:	2801      	cmp	r0, #1
 800e132:	d110      	bne.n	800e156 <pow+0x18e>
 800e134:	eeb1 0b40 	vneg.f64	d0, d0
 800e138:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e13c:	4323      	orrs	r3, r4
 800e13e:	d10c      	bne.n	800e15a <pow+0x192>
 800e140:	2e00      	cmp	r6, #0
 800e142:	f177 0300 	sbcs.w	r3, r7, #0
 800e146:	da8d      	bge.n	800e064 <pow+0x9c>
 800e148:	b01b      	add	sp, #108	; 0x6c
 800e14a:	ecbd 8b0a 	vpop	{d8-d12}
 800e14e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e152:	f000 bf3d 	b.w	800efd0 <__math_divzero>
 800e156:	2000      	movs	r0, #0
 800e158:	e7ee      	b.n	800e138 <pow+0x170>
 800e15a:	2e00      	cmp	r6, #0
 800e15c:	f177 0300 	sbcs.w	r3, r7, #0
 800e160:	da80      	bge.n	800e064 <pow+0x9c>
 800e162:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e166:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e16a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e16e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e172:	e777      	b.n	800e064 <pow+0x9c>
 800e174:	2c00      	cmp	r4, #0
 800e176:	f175 0300 	sbcs.w	r3, r5, #0
 800e17a:	da35      	bge.n	800e1e8 <pow+0x220>
 800e17c:	4630      	mov	r0, r6
 800e17e:	4639      	mov	r1, r7
 800e180:	f7ff feec 	bl	800df5c <checkint>
 800e184:	b940      	cbnz	r0, 800e198 <pow+0x1d0>
 800e186:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e18a:	b01b      	add	sp, #108	; 0x6c
 800e18c:	ecbd 8b0a 	vpop	{d8-d12}
 800e190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e194:	f000 bf34 	b.w	800f000 <__math_invalid>
 800e198:	2801      	cmp	r0, #1
 800e19a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e19e:	bf14      	ite	ne
 800e1a0:	2000      	movne	r0, #0
 800e1a2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e1a6:	461d      	mov	r5, r3
 800e1a8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e1ac:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e1b0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e1b4:	2a7f      	cmp	r2, #127	; 0x7f
 800e1b6:	d933      	bls.n	800e220 <pow+0x258>
 800e1b8:	4974      	ldr	r1, [pc, #464]	; (800e38c <pow+0x3c4>)
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	428d      	cmp	r5, r1
 800e1be:	bf08      	it	eq
 800e1c0:	4284      	cmpeq	r4, r0
 800e1c2:	f000 81ae 	beq.w	800e522 <pow+0x55a>
 800e1c6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d80e      	bhi.n	800e1ec <pow+0x224>
 800e1ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e1d2:	ed9d 7b00 	vldr	d7, [sp]
 800e1d6:	42a9      	cmp	r1, r5
 800e1d8:	bf08      	it	eq
 800e1da:	42a0      	cmpeq	r0, r4
 800e1dc:	bf34      	ite	cc
 800e1de:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e1e2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e1e6:	e73d      	b.n	800e064 <pow+0x9c>
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	e7df      	b.n	800e1ac <pow+0x1e4>
 800e1ec:	42a9      	cmp	r1, r5
 800e1ee:	bf08      	it	eq
 800e1f0:	42a0      	cmpeq	r0, r4
 800e1f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e1f6:	bf2c      	ite	cs
 800e1f8:	2301      	movcs	r3, #1
 800e1fa:	2300      	movcc	r3, #0
 800e1fc:	4590      	cmp	r8, r2
 800e1fe:	bf8c      	ite	hi
 800e200:	f04f 0800 	movhi.w	r8, #0
 800e204:	f04f 0801 	movls.w	r8, #1
 800e208:	4543      	cmp	r3, r8
 800e20a:	f04f 0000 	mov.w	r0, #0
 800e20e:	f000 80af 	beq.w	800e370 <pow+0x3a8>
 800e212:	b01b      	add	sp, #108	; 0x6c
 800e214:	ecbd 8b0a 	vpop	{d8-d12}
 800e218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21c:	f000 bed0 	b.w	800efc0 <__math_oflow>
 800e220:	f1bc 0f00 	cmp.w	ip, #0
 800e224:	d10e      	bne.n	800e244 <pow+0x27c>
 800e226:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e380 <pow+0x3b8>
 800e22a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e22e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e232:	ec57 6b17 	vmov	r6, r7, d7
 800e236:	4b59      	ldr	r3, [pc, #356]	; (800e39c <pow+0x3d4>)
 800e238:	2100      	movs	r1, #0
 800e23a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e23e:	1874      	adds	r4, r6, r1
 800e240:	eb42 0503 	adc.w	r5, r2, r3
 800e244:	2300      	movs	r3, #0
 800e246:	18e3      	adds	r3, r4, r3
 800e248:	4b55      	ldr	r3, [pc, #340]	; (800e3a0 <pow+0x3d8>)
 800e24a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e24e:	eb45 0303 	adc.w	r3, r5, r3
 800e252:	1519      	asrs	r1, r3, #20
 800e254:	ee03 1a10 	vmov	s6, r1
 800e258:	0d1e      	lsrs	r6, r3, #20
 800e25a:	2100      	movs	r1, #0
 800e25c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e260:	0536      	lsls	r6, r6, #20
 800e262:	1a63      	subs	r3, r4, r1
 800e264:	9312      	str	r3, [sp, #72]	; 0x48
 800e266:	eb65 0306 	sbc.w	r3, r5, r6
 800e26a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e26c:	4b4d      	ldr	r3, [pc, #308]	; (800e3a4 <pow+0x3dc>)
 800e26e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e272:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e276:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e27a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e27e:	ed93 7b00 	vldr	d7, [r3]
 800e282:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e286:	ed93 4b02 	vldr	d4, [r3, #8]
 800e28a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e28e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e292:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e296:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e29a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e29e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e2a2:	ed93 4b04 	vldr	d4, [r3, #16]
 800e2a6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e2aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e2ae:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e2b2:	ed93 3b08 	vldr	d3, [r3, #32]
 800e2b6:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e2ba:	eeb0 8b40 	vmov.f64	d8, d0
 800e2be:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e2c2:	ed93 4b06 	vldr	d4, [r3, #24]
 800e2c6:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e2ca:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e2ce:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e2d2:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e2d6:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e2da:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e2de:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e2e2:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e2e6:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e2ea:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e2ee:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e2f2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e2f6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e2fa:	ed9d 6b00 	vldr	d6, [sp]
 800e2fe:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e302:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e306:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e30a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e30e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e312:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e316:	eeb0 3b46 	vmov.f64	d3, d6
 800e31a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e31e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e322:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e326:	ed9d 6b00 	vldr	d6, [sp]
 800e32a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e32e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e332:	193c      	adds	r4, r7, r4
 800e334:	2c3e      	cmp	r4, #62	; 0x3e
 800e336:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e33a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e33e:	d934      	bls.n	800e3aa <pow+0x3e2>
 800e340:	428c      	cmp	r4, r1
 800e342:	da0d      	bge.n	800e360 <pow+0x398>
 800e344:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e34c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e350:	2800      	cmp	r0, #0
 800e352:	f43f ae87 	beq.w	800e064 <pow+0x9c>
 800e356:	eeb1 0b40 	vneg.f64	d0, d0
 800e35a:	e683      	b.n	800e064 <pow+0x9c>
 800e35c:	2000      	movs	r0, #0
 800e35e:	e771      	b.n	800e244 <pow+0x27c>
 800e360:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e364:	d920      	bls.n	800e3a8 <pow+0x3e0>
 800e366:	2a00      	cmp	r2, #0
 800e368:	f173 0300 	sbcs.w	r3, r3, #0
 800e36c:	f6bf af51 	bge.w	800e212 <pow+0x24a>
 800e370:	b01b      	add	sp, #108	; 0x6c
 800e372:	ecbd 8b0a 	vpop	{d8-d12}
 800e376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e37a:	f000 be19 	b.w	800efb0 <__math_uflow>
 800e37e:	bf00      	nop
 800e380:	00000000 	.word	0x00000000
 800e384:	43300000 	.word	0x43300000
 800e388:	fff00000 	.word	0xfff00000
 800e38c:	3ff00000 	.word	0x3ff00000
 800e390:	ffe00000 	.word	0xffe00000
 800e394:	7fe00000 	.word	0x7fe00000
 800e398:	7fdfffff 	.word	0x7fdfffff
 800e39c:	fcc00000 	.word	0xfcc00000
 800e3a0:	c0196aab 	.word	0xc0196aab
 800e3a4:	08011cf8 	.word	0x08011cf8
 800e3a8:	460f      	mov	r7, r1
 800e3aa:	4e65      	ldr	r6, [pc, #404]	; (800e540 <pow+0x578>)
 800e3ac:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e3b0:	ed96 6b02 	vldr	d6, [r6, #8]
 800e3b4:	ed96 7b00 	vldr	d7, [r6]
 800e3b8:	eeb0 5b46 	vmov.f64	d5, d6
 800e3bc:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e3c0:	ed8d 5b00 	vstr	d5, [sp]
 800e3c4:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e3c8:	eeb0 5b44 	vmov.f64	d5, d4
 800e3cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3d0:	ed96 7b04 	vldr	d7, [r6, #16]
 800e3d4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e3d8:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e3dc:	eeb0 7b45 	vmov.f64	d7, d5
 800e3e0:	ed96 5b06 	vldr	d5, [r6, #24]
 800e3e4:	1849      	adds	r1, r1, r1
 800e3e6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e3ea:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e3ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3f2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e3f6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e3fa:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e3fe:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e402:	ed96 5b08 	vldr	d5, [r6, #32]
 800e406:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e40a:	1814      	adds	r4, r2, r0
 800e40c:	0365      	lsls	r5, r4, #13
 800e40e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e412:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e416:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e41a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e41e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e422:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e426:	2000      	movs	r0, #0
 800e428:	eb10 0a04 	adds.w	sl, r0, r4
 800e42c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e430:	eb45 0b0c 	adc.w	fp, r5, ip
 800e434:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e438:	2f00      	cmp	r7, #0
 800e43a:	d16a      	bne.n	800e512 <pow+0x54a>
 800e43c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e440:	4639      	mov	r1, r7
 800e442:	ea50 0301 	orrs.w	r3, r0, r1
 800e446:	f04f 0300 	mov.w	r3, #0
 800e44a:	d115      	bne.n	800e478 <pow+0x4b0>
 800e44c:	eb1a 0303 	adds.w	r3, sl, r3
 800e450:	ee0b 3a10 	vmov	s22, r3
 800e454:	4b3b      	ldr	r3, [pc, #236]	; (800e544 <pow+0x57c>)
 800e456:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e528 <pow+0x560>
 800e45a:	eb4b 0303 	adc.w	r3, fp, r3
 800e45e:	ee0b 3a90 	vmov	s23, r3
 800e462:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e466:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e46a:	b01b      	add	sp, #108	; 0x6c
 800e46c:	ecbd 8b0a 	vpop	{d8-d12}
 800e470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	f000 bddc 	b.w	800f030 <__math_check_oflow>
 800e478:	eb1a 0303 	adds.w	r3, sl, r3
 800e47c:	930a      	str	r3, [sp, #40]	; 0x28
 800e47e:	4b32      	ldr	r3, [pc, #200]	; (800e548 <pow+0x580>)
 800e480:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e484:	eb4b 0303 	adc.w	r3, fp, r3
 800e488:	930b      	str	r3, [sp, #44]	; 0x2c
 800e48a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e48e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e492:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e496:	eeb0 3bc7 	vabs.f64	d3, d7
 800e49a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e530 <pow+0x568>
 800e4a6:	d52b      	bpl.n	800e500 <pow+0x538>
 800e4a8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e4ac:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e4b8:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e4bc:	bf48      	it	mi
 800e4be:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e4c2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e4c6:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e4ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e4ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e4d2:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e4d6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e4da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	d105      	bne.n	800e4f0 <pow+0x528>
 800e4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4e6:	463a      	mov	r2, r7
 800e4e8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e4ec:	ec43 2b17 	vmov	d7, r2, r3
 800e4f0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e4f4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e4f8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e4fc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e500:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e504:	b01b      	add	sp, #108	; 0x6c
 800e506:	ecbd 8b0a 	vpop	{d8-d12}
 800e50a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50e:	f000 bd86 	b.w	800f01e <__math_check_uflow>
 800e512:	ec4b ab10 	vmov	d0, sl, fp
 800e516:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e51a:	e5a3      	b.n	800e064 <pow+0x9c>
 800e51c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e538 <pow+0x570>
 800e520:	e5a0      	b.n	800e064 <pow+0x9c>
 800e522:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e526:	e59d      	b.n	800e064 <pow+0x9c>
 800e528:	00000000 	.word	0x00000000
 800e52c:	7f000000 	.word	0x7f000000
 800e530:	00000000 	.word	0x00000000
 800e534:	00100000 	.word	0x00100000
	...
 800e540:	08012ec8 	.word	0x08012ec8
 800e544:	c0f00000 	.word	0xc0f00000
 800e548:	3fe00000 	.word	0x3fe00000
 800e54c:	00000000 	.word	0x00000000

0800e550 <cos>:
 800e550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e552:	eeb0 7b40 	vmov.f64	d7, d0
 800e556:	ee17 3a90 	vmov	r3, s15
 800e55a:	4a1f      	ldr	r2, [pc, #124]	; (800e5d8 <cos+0x88>)
 800e55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e560:	4293      	cmp	r3, r2
 800e562:	dc04      	bgt.n	800e56e <cos+0x1e>
 800e564:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e5d0 <cos+0x80>
 800e568:	f000 f9c2 	bl	800e8f0 <__kernel_cos>
 800e56c:	e004      	b.n	800e578 <cos+0x28>
 800e56e:	4a1b      	ldr	r2, [pc, #108]	; (800e5dc <cos+0x8c>)
 800e570:	4293      	cmp	r3, r2
 800e572:	dd04      	ble.n	800e57e <cos+0x2e>
 800e574:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e578:	b005      	add	sp, #20
 800e57a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e57e:	4668      	mov	r0, sp
 800e580:	f000 f876 	bl	800e670 <__ieee754_rem_pio2>
 800e584:	f000 0003 	and.w	r0, r0, #3
 800e588:	2801      	cmp	r0, #1
 800e58a:	d007      	beq.n	800e59c <cos+0x4c>
 800e58c:	2802      	cmp	r0, #2
 800e58e:	d00e      	beq.n	800e5ae <cos+0x5e>
 800e590:	b9a0      	cbnz	r0, 800e5bc <cos+0x6c>
 800e592:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e596:	ed9d 0b00 	vldr	d0, [sp]
 800e59a:	e7e5      	b.n	800e568 <cos+0x18>
 800e59c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5a0:	ed9d 0b00 	vldr	d0, [sp]
 800e5a4:	f000 fc90 	bl	800eec8 <__kernel_sin>
 800e5a8:	eeb1 0b40 	vneg.f64	d0, d0
 800e5ac:	e7e4      	b.n	800e578 <cos+0x28>
 800e5ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5b2:	ed9d 0b00 	vldr	d0, [sp]
 800e5b6:	f000 f99b 	bl	800e8f0 <__kernel_cos>
 800e5ba:	e7f5      	b.n	800e5a8 <cos+0x58>
 800e5bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5c0:	ed9d 0b00 	vldr	d0, [sp]
 800e5c4:	2001      	movs	r0, #1
 800e5c6:	f000 fc7f 	bl	800eec8 <__kernel_sin>
 800e5ca:	e7d5      	b.n	800e578 <cos+0x28>
 800e5cc:	f3af 8000 	nop.w
	...
 800e5d8:	3fe921fb 	.word	0x3fe921fb
 800e5dc:	7fefffff 	.word	0x7fefffff

0800e5e0 <sin>:
 800e5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5e2:	eeb0 7b40 	vmov.f64	d7, d0
 800e5e6:	ee17 3a90 	vmov	r3, s15
 800e5ea:	4a1f      	ldr	r2, [pc, #124]	; (800e668 <sin+0x88>)
 800e5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	dc05      	bgt.n	800e600 <sin+0x20>
 800e5f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e660 <sin+0x80>
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	f000 fc65 	bl	800eec8 <__kernel_sin>
 800e5fe:	e004      	b.n	800e60a <sin+0x2a>
 800e600:	4a1a      	ldr	r2, [pc, #104]	; (800e66c <sin+0x8c>)
 800e602:	4293      	cmp	r3, r2
 800e604:	dd04      	ble.n	800e610 <sin+0x30>
 800e606:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e60a:	b005      	add	sp, #20
 800e60c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e610:	4668      	mov	r0, sp
 800e612:	f000 f82d 	bl	800e670 <__ieee754_rem_pio2>
 800e616:	f000 0003 	and.w	r0, r0, #3
 800e61a:	2801      	cmp	r0, #1
 800e61c:	d008      	beq.n	800e630 <sin+0x50>
 800e61e:	2802      	cmp	r0, #2
 800e620:	d00d      	beq.n	800e63e <sin+0x5e>
 800e622:	b9b0      	cbnz	r0, 800e652 <sin+0x72>
 800e624:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e628:	ed9d 0b00 	vldr	d0, [sp]
 800e62c:	2001      	movs	r0, #1
 800e62e:	e7e4      	b.n	800e5fa <sin+0x1a>
 800e630:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e634:	ed9d 0b00 	vldr	d0, [sp]
 800e638:	f000 f95a 	bl	800e8f0 <__kernel_cos>
 800e63c:	e7e5      	b.n	800e60a <sin+0x2a>
 800e63e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e642:	ed9d 0b00 	vldr	d0, [sp]
 800e646:	2001      	movs	r0, #1
 800e648:	f000 fc3e 	bl	800eec8 <__kernel_sin>
 800e64c:	eeb1 0b40 	vneg.f64	d0, d0
 800e650:	e7db      	b.n	800e60a <sin+0x2a>
 800e652:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e656:	ed9d 0b00 	vldr	d0, [sp]
 800e65a:	f000 f949 	bl	800e8f0 <__kernel_cos>
 800e65e:	e7f5      	b.n	800e64c <sin+0x6c>
	...
 800e668:	3fe921fb 	.word	0x3fe921fb
 800e66c:	7fefffff 	.word	0x7fefffff

0800e670 <__ieee754_rem_pio2>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	eeb0 7b40 	vmov.f64	d7, d0
 800e676:	ee17 5a90 	vmov	r5, s15
 800e67a:	4b97      	ldr	r3, [pc, #604]	; (800e8d8 <__ieee754_rem_pio2+0x268>)
 800e67c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e680:	429e      	cmp	r6, r3
 800e682:	b088      	sub	sp, #32
 800e684:	4604      	mov	r4, r0
 800e686:	dc07      	bgt.n	800e698 <__ieee754_rem_pio2+0x28>
 800e688:	2200      	movs	r2, #0
 800e68a:	2300      	movs	r3, #0
 800e68c:	ed84 0b00 	vstr	d0, [r4]
 800e690:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e694:	2000      	movs	r0, #0
 800e696:	e01b      	b.n	800e6d0 <__ieee754_rem_pio2+0x60>
 800e698:	4b90      	ldr	r3, [pc, #576]	; (800e8dc <__ieee754_rem_pio2+0x26c>)
 800e69a:	429e      	cmp	r6, r3
 800e69c:	dc3b      	bgt.n	800e716 <__ieee754_rem_pio2+0xa6>
 800e69e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e6a2:	2d00      	cmp	r5, #0
 800e6a4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e898 <__ieee754_rem_pio2+0x228>
 800e6a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e6ac:	dd19      	ble.n	800e6e2 <__ieee754_rem_pio2+0x72>
 800e6ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e6b2:	429e      	cmp	r6, r3
 800e6b4:	d00e      	beq.n	800e6d4 <__ieee754_rem_pio2+0x64>
 800e6b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800e8a0 <__ieee754_rem_pio2+0x230>
 800e6ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e6be:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e6c2:	ed84 5b00 	vstr	d5, [r4]
 800e6c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800e6ce:	2001      	movs	r0, #1
 800e6d0:	b008      	add	sp, #32
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}
 800e6d4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e8a8 <__ieee754_rem_pio2+0x238>
 800e6d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6dc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e8b0 <__ieee754_rem_pio2+0x240>
 800e6e0:	e7eb      	b.n	800e6ba <__ieee754_rem_pio2+0x4a>
 800e6e2:	429e      	cmp	r6, r3
 800e6e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e6e8:	d00e      	beq.n	800e708 <__ieee754_rem_pio2+0x98>
 800e6ea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e8a0 <__ieee754_rem_pio2+0x230>
 800e6ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e6f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e6f6:	ed84 5b00 	vstr	d5, [r4]
 800e6fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e702:	ed84 7b02 	vstr	d7, [r4, #8]
 800e706:	e7e3      	b.n	800e6d0 <__ieee754_rem_pio2+0x60>
 800e708:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e8a8 <__ieee754_rem_pio2+0x238>
 800e70c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e710:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e8b0 <__ieee754_rem_pio2+0x240>
 800e714:	e7eb      	b.n	800e6ee <__ieee754_rem_pio2+0x7e>
 800e716:	4b72      	ldr	r3, [pc, #456]	; (800e8e0 <__ieee754_rem_pio2+0x270>)
 800e718:	429e      	cmp	r6, r3
 800e71a:	dc6e      	bgt.n	800e7fa <__ieee754_rem_pio2+0x18a>
 800e71c:	f000 fc9c 	bl	800f058 <fabs>
 800e720:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e724:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800e8b8 <__ieee754_rem_pio2+0x248>
 800e728:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e72c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e730:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e734:	ee17 0a90 	vmov	r0, s15
 800e738:	eeb1 4b45 	vneg.f64	d4, d5
 800e73c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e898 <__ieee754_rem_pio2+0x228>
 800e740:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e744:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e8a0 <__ieee754_rem_pio2+0x230>
 800e748:	281f      	cmp	r0, #31
 800e74a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e74e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e752:	dc08      	bgt.n	800e766 <__ieee754_rem_pio2+0xf6>
 800e754:	4b63      	ldr	r3, [pc, #396]	; (800e8e4 <__ieee754_rem_pio2+0x274>)
 800e756:	1e42      	subs	r2, r0, #1
 800e758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e75c:	42b3      	cmp	r3, r6
 800e75e:	d002      	beq.n	800e766 <__ieee754_rem_pio2+0xf6>
 800e760:	ed84 6b00 	vstr	d6, [r4]
 800e764:	e024      	b.n	800e7b0 <__ieee754_rem_pio2+0x140>
 800e766:	ee16 3a90 	vmov	r3, s13
 800e76a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e76e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e772:	2b10      	cmp	r3, #16
 800e774:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e778:	ddf2      	ble.n	800e760 <__ieee754_rem_pio2+0xf0>
 800e77a:	eeb0 6b40 	vmov.f64	d6, d0
 800e77e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800e8a8 <__ieee754_rem_pio2+0x238>
 800e782:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e786:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e78a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e78e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800e8b0 <__ieee754_rem_pio2+0x240>
 800e792:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e796:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e79a:	ee13 3a90 	vmov	r3, s7
 800e79e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	2b31      	cmp	r3, #49	; 0x31
 800e7a6:	dc17      	bgt.n	800e7d8 <__ieee754_rem_pio2+0x168>
 800e7a8:	eeb0 0b46 	vmov.f64	d0, d6
 800e7ac:	ed84 3b00 	vstr	d3, [r4]
 800e7b0:	ed94 6b00 	vldr	d6, [r4]
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e7ba:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e7be:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7c2:	da85      	bge.n	800e6d0 <__ieee754_rem_pio2+0x60>
 800e7c4:	eeb1 6b46 	vneg.f64	d6, d6
 800e7c8:	ed84 6b00 	vstr	d6, [r4]
 800e7cc:	eeb1 7b47 	vneg.f64	d7, d7
 800e7d0:	4240      	negs	r0, r0
 800e7d2:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7d6:	e77b      	b.n	800e6d0 <__ieee754_rem_pio2+0x60>
 800e7d8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800e8c0 <__ieee754_rem_pio2+0x250>
 800e7dc:	eeb0 0b46 	vmov.f64	d0, d6
 800e7e0:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e7e4:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e7e8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800e8c8 <__ieee754_rem_pio2+0x258>
 800e7ec:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e7f0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e7f4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e7f8:	e7b2      	b.n	800e760 <__ieee754_rem_pio2+0xf0>
 800e7fa:	4b3b      	ldr	r3, [pc, #236]	; (800e8e8 <__ieee754_rem_pio2+0x278>)
 800e7fc:	429e      	cmp	r6, r3
 800e7fe:	dd06      	ble.n	800e80e <__ieee754_rem_pio2+0x19e>
 800e800:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e804:	ed80 7b02 	vstr	d7, [r0, #8]
 800e808:	ed80 7b00 	vstr	d7, [r0]
 800e80c:	e742      	b.n	800e694 <__ieee754_rem_pio2+0x24>
 800e80e:	1532      	asrs	r2, r6, #20
 800e810:	ee10 0a10 	vmov	r0, s0
 800e814:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e818:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e81c:	ec41 0b17 	vmov	d7, r0, r1
 800e820:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e824:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800e8d0 <__ieee754_rem_pio2+0x260>
 800e828:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e82c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e830:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e834:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e838:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e83c:	a902      	add	r1, sp, #8
 800e83e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e842:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e846:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e84a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e84e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e852:	2603      	movs	r6, #3
 800e854:	4608      	mov	r0, r1
 800e856:	ed91 7b04 	vldr	d7, [r1, #16]
 800e85a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e862:	4633      	mov	r3, r6
 800e864:	f1a1 0108 	sub.w	r1, r1, #8
 800e868:	f106 36ff 	add.w	r6, r6, #4294967295
 800e86c:	d0f3      	beq.n	800e856 <__ieee754_rem_pio2+0x1e6>
 800e86e:	491f      	ldr	r1, [pc, #124]	; (800e8ec <__ieee754_rem_pio2+0x27c>)
 800e870:	9101      	str	r1, [sp, #4]
 800e872:	2102      	movs	r1, #2
 800e874:	9100      	str	r1, [sp, #0]
 800e876:	4621      	mov	r1, r4
 800e878:	f000 f8a6 	bl	800e9c8 <__kernel_rem_pio2>
 800e87c:	2d00      	cmp	r5, #0
 800e87e:	f6bf af27 	bge.w	800e6d0 <__ieee754_rem_pio2+0x60>
 800e882:	ed94 7b00 	vldr	d7, [r4]
 800e886:	eeb1 7b47 	vneg.f64	d7, d7
 800e88a:	ed84 7b00 	vstr	d7, [r4]
 800e88e:	ed94 7b02 	vldr	d7, [r4, #8]
 800e892:	e79b      	b.n	800e7cc <__ieee754_rem_pio2+0x15c>
 800e894:	f3af 8000 	nop.w
 800e898:	54400000 	.word	0x54400000
 800e89c:	3ff921fb 	.word	0x3ff921fb
 800e8a0:	1a626331 	.word	0x1a626331
 800e8a4:	3dd0b461 	.word	0x3dd0b461
 800e8a8:	1a600000 	.word	0x1a600000
 800e8ac:	3dd0b461 	.word	0x3dd0b461
 800e8b0:	2e037073 	.word	0x2e037073
 800e8b4:	3ba3198a 	.word	0x3ba3198a
 800e8b8:	6dc9c883 	.word	0x6dc9c883
 800e8bc:	3fe45f30 	.word	0x3fe45f30
 800e8c0:	2e000000 	.word	0x2e000000
 800e8c4:	3ba3198a 	.word	0x3ba3198a
 800e8c8:	252049c1 	.word	0x252049c1
 800e8cc:	397b839a 	.word	0x397b839a
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	41700000 	.word	0x41700000
 800e8d8:	3fe921fb 	.word	0x3fe921fb
 800e8dc:	4002d97b 	.word	0x4002d97b
 800e8e0:	413921fb 	.word	0x413921fb
 800e8e4:	08012d40 	.word	0x08012d40
 800e8e8:	7fefffff 	.word	0x7fefffff
 800e8ec:	08012dc0 	.word	0x08012dc0

0800e8f0 <__kernel_cos>:
 800e8f0:	ee10 1a90 	vmov	r1, s1
 800e8f4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e8f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e900:	da05      	bge.n	800e90e <__kernel_cos+0x1e>
 800e902:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e906:	ee17 3a90 	vmov	r3, s15
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d03d      	beq.n	800e98a <__kernel_cos+0x9a>
 800e90e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e912:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e990 <__kernel_cos+0xa0>
 800e916:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e998 <__kernel_cos+0xa8>
 800e91a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e91e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e9a0 <__kernel_cos+0xb0>
 800e922:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e926:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e9a8 <__kernel_cos+0xb8>
 800e92a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e92e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e9b0 <__kernel_cos+0xc0>
 800e932:	4b23      	ldr	r3, [pc, #140]	; (800e9c0 <__kernel_cos+0xd0>)
 800e934:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e938:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e9b8 <__kernel_cos+0xc8>
 800e93c:	4299      	cmp	r1, r3
 800e93e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e942:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e946:	ee26 5b03 	vmul.f64	d5, d6, d3
 800e94a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e94e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e952:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e956:	dc04      	bgt.n	800e962 <__kernel_cos+0x72>
 800e958:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e95c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e960:	4770      	bx	lr
 800e962:	4b18      	ldr	r3, [pc, #96]	; (800e9c4 <__kernel_cos+0xd4>)
 800e964:	4299      	cmp	r1, r3
 800e966:	dc0d      	bgt.n	800e984 <__kernel_cos+0x94>
 800e968:	2200      	movs	r2, #0
 800e96a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e96e:	ec43 2b15 	vmov	d5, r2, r3
 800e972:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e976:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e97a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e97e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e982:	4770      	bx	lr
 800e984:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e988:	e7f3      	b.n	800e972 <__kernel_cos+0x82>
 800e98a:	eeb0 0b44 	vmov.f64	d0, d4
 800e98e:	4770      	bx	lr
 800e990:	be8838d4 	.word	0xbe8838d4
 800e994:	bda8fae9 	.word	0xbda8fae9
 800e998:	bdb4b1c4 	.word	0xbdb4b1c4
 800e99c:	3e21ee9e 	.word	0x3e21ee9e
 800e9a0:	809c52ad 	.word	0x809c52ad
 800e9a4:	be927e4f 	.word	0xbe927e4f
 800e9a8:	19cb1590 	.word	0x19cb1590
 800e9ac:	3efa01a0 	.word	0x3efa01a0
 800e9b0:	16c15177 	.word	0x16c15177
 800e9b4:	bf56c16c 	.word	0xbf56c16c
 800e9b8:	5555554c 	.word	0x5555554c
 800e9bc:	3fa55555 	.word	0x3fa55555
 800e9c0:	3fd33332 	.word	0x3fd33332
 800e9c4:	3fe90000 	.word	0x3fe90000

0800e9c8 <__kernel_rem_pio2>:
 800e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9cc:	ed2d 8b06 	vpush	{d8-d10}
 800e9d0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800e9d4:	469b      	mov	fp, r3
 800e9d6:	460f      	mov	r7, r1
 800e9d8:	4bcf      	ldr	r3, [pc, #828]	; (800ed18 <__kernel_rem_pio2+0x350>)
 800e9da:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800e9dc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800e9e0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800e9e4:	9000      	str	r0, [sp, #0]
 800e9e6:	f112 0f14 	cmn.w	r2, #20
 800e9ea:	bfa8      	it	ge
 800e9ec:	2318      	movge	r3, #24
 800e9ee:	f10b 31ff 	add.w	r1, fp, #4294967295
 800e9f2:	bfb8      	it	lt
 800e9f4:	2300      	movlt	r3, #0
 800e9f6:	f06f 0417 	mvn.w	r4, #23
 800e9fa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800ed00 <__kernel_rem_pio2+0x338>
 800e9fe:	bfa4      	itt	ge
 800ea00:	f1a2 0a03 	subge.w	sl, r2, #3
 800ea04:	fb9a f3f3 	sdivge	r3, sl, r3
 800ea08:	fb03 4404 	mla	r4, r3, r4, r4
 800ea0c:	1a5d      	subs	r5, r3, r1
 800ea0e:	4414      	add	r4, r2
 800ea10:	eb09 0601 	add.w	r6, r9, r1
 800ea14:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800ea18:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	42b2      	cmp	r2, r6
 800ea20:	dd12      	ble.n	800ea48 <__kernel_rem_pio2+0x80>
 800ea22:	aa18      	add	r2, sp, #96	; 0x60
 800ea24:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800ea28:	460e      	mov	r6, r1
 800ea2a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800ea2e:	f1cb 0a01 	rsb	sl, fp, #1
 800ea32:	eb0a 0006 	add.w	r0, sl, r6
 800ea36:	4581      	cmp	r9, r0
 800ea38:	db25      	blt.n	800ea86 <__kernel_rem_pio2+0xbe>
 800ea3a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800ed00 <__kernel_rem_pio2+0x338>
 800ea3e:	f8dd e000 	ldr.w	lr, [sp]
 800ea42:	4615      	mov	r5, r2
 800ea44:	2000      	movs	r0, #0
 800ea46:	e015      	b.n	800ea74 <__kernel_rem_pio2+0xac>
 800ea48:	42d5      	cmn	r5, r2
 800ea4a:	d409      	bmi.n	800ea60 <__kernel_rem_pio2+0x98>
 800ea4c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ea50:	ee07 0a90 	vmov	s15, r0
 800ea54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea58:	eca8 7b02 	vstmia	r8!, {d7}
 800ea5c:	3201      	adds	r2, #1
 800ea5e:	e7de      	b.n	800ea1e <__kernel_rem_pio2+0x56>
 800ea60:	eeb0 7b46 	vmov.f64	d7, d6
 800ea64:	e7f8      	b.n	800ea58 <__kernel_rem_pio2+0x90>
 800ea66:	ecbe 5b02 	vldmia	lr!, {d5}
 800ea6a:	ed95 6b00 	vldr	d6, [r5]
 800ea6e:	3001      	adds	r0, #1
 800ea70:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea74:	4288      	cmp	r0, r1
 800ea76:	f1a5 0508 	sub.w	r5, r5, #8
 800ea7a:	ddf4      	ble.n	800ea66 <__kernel_rem_pio2+0x9e>
 800ea7c:	eca8 7b02 	vstmia	r8!, {d7}
 800ea80:	3208      	adds	r2, #8
 800ea82:	3601      	adds	r6, #1
 800ea84:	e7d5      	b.n	800ea32 <__kernel_rem_pio2+0x6a>
 800ea86:	aa04      	add	r2, sp, #16
 800ea88:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800ed08 <__kernel_rem_pio2+0x340>
 800ea8c:	ed9f aba0 	vldr	d10, [pc, #640]	; 800ed10 <__kernel_rem_pio2+0x348>
 800ea90:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ea94:	9201      	str	r2, [sp, #4]
 800ea96:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ea9a:	464e      	mov	r6, r9
 800ea9c:	ab90      	add	r3, sp, #576	; 0x240
 800ea9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eaa2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800eaa6:	ab04      	add	r3, sp, #16
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	4632      	mov	r2, r6
 800eaac:	2a00      	cmp	r2, #0
 800eaae:	dc4e      	bgt.n	800eb4e <__kernel_rem_pio2+0x186>
 800eab0:	4620      	mov	r0, r4
 800eab2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800eab6:	f000 fb4f 	bl	800f158 <scalbn>
 800eaba:	eeb0 8b40 	vmov.f64	d8, d0
 800eabe:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800eac2:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eac6:	f000 fad3 	bl	800f070 <floor>
 800eaca:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800eace:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ead2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ead6:	2c00      	cmp	r4, #0
 800ead8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800eadc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800eae0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eae4:	ee17 8a90 	vmov	r8, s15
 800eae8:	dd46      	ble.n	800eb78 <__kernel_rem_pio2+0x1b0>
 800eaea:	1e70      	subs	r0, r6, #1
 800eaec:	aa04      	add	r2, sp, #16
 800eaee:	f1c4 0c18 	rsb	ip, r4, #24
 800eaf2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800eaf6:	fa45 f20c 	asr.w	r2, r5, ip
 800eafa:	4490      	add	r8, r2
 800eafc:	fa02 f20c 	lsl.w	r2, r2, ip
 800eb00:	1aad      	subs	r5, r5, r2
 800eb02:	aa04      	add	r2, sp, #16
 800eb04:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800eb08:	f1c4 0217 	rsb	r2, r4, #23
 800eb0c:	4115      	asrs	r5, r2
 800eb0e:	2d00      	cmp	r5, #0
 800eb10:	dd41      	ble.n	800eb96 <__kernel_rem_pio2+0x1ce>
 800eb12:	f04f 0c00 	mov.w	ip, #0
 800eb16:	f108 0801 	add.w	r8, r8, #1
 800eb1a:	4660      	mov	r0, ip
 800eb1c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800eb20:	4566      	cmp	r6, ip
 800eb22:	dc69      	bgt.n	800ebf8 <__kernel_rem_pio2+0x230>
 800eb24:	2c00      	cmp	r4, #0
 800eb26:	dd03      	ble.n	800eb30 <__kernel_rem_pio2+0x168>
 800eb28:	2c01      	cmp	r4, #1
 800eb2a:	d076      	beq.n	800ec1a <__kernel_rem_pio2+0x252>
 800eb2c:	2c02      	cmp	r4, #2
 800eb2e:	d07f      	beq.n	800ec30 <__kernel_rem_pio2+0x268>
 800eb30:	2d02      	cmp	r5, #2
 800eb32:	d130      	bne.n	800eb96 <__kernel_rem_pio2+0x1ce>
 800eb34:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eb38:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eb3c:	b358      	cbz	r0, 800eb96 <__kernel_rem_pio2+0x1ce>
 800eb3e:	4620      	mov	r0, r4
 800eb40:	9102      	str	r1, [sp, #8]
 800eb42:	f000 fb09 	bl	800f158 <scalbn>
 800eb46:	9902      	ldr	r1, [sp, #8]
 800eb48:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb4c:	e023      	b.n	800eb96 <__kernel_rem_pio2+0x1ce>
 800eb4e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eb52:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eb56:	3a01      	subs	r2, #1
 800eb58:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb5c:	ad68      	add	r5, sp, #416	; 0x1a0
 800eb5e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eb62:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eb66:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800eb6a:	eca0 0a01 	vstmia	r0!, {s0}
 800eb6e:	ed95 0b00 	vldr	d0, [r5]
 800eb72:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eb76:	e799      	b.n	800eaac <__kernel_rem_pio2+0xe4>
 800eb78:	d105      	bne.n	800eb86 <__kernel_rem_pio2+0x1be>
 800eb7a:	1e72      	subs	r2, r6, #1
 800eb7c:	a804      	add	r0, sp, #16
 800eb7e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800eb82:	15ed      	asrs	r5, r5, #23
 800eb84:	e7c3      	b.n	800eb0e <__kernel_rem_pio2+0x146>
 800eb86:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eb8a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb92:	da2f      	bge.n	800ebf4 <__kernel_rem_pio2+0x22c>
 800eb94:	2500      	movs	r5, #0
 800eb96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9e:	f040 8087 	bne.w	800ecb0 <__kernel_rem_pio2+0x2e8>
 800eba2:	1e73      	subs	r3, r6, #1
 800eba4:	4618      	mov	r0, r3
 800eba6:	f04f 0c00 	mov.w	ip, #0
 800ebaa:	4548      	cmp	r0, r9
 800ebac:	da47      	bge.n	800ec3e <__kernel_rem_pio2+0x276>
 800ebae:	f1bc 0f00 	cmp.w	ip, #0
 800ebb2:	d070      	beq.n	800ec96 <__kernel_rem_pio2+0x2ce>
 800ebb4:	aa04      	add	r2, sp, #16
 800ebb6:	3c18      	subs	r4, #24
 800ebb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ebbc:	2a00      	cmp	r2, #0
 800ebbe:	d075      	beq.n	800ecac <__kernel_rem_pio2+0x2e4>
 800ebc0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	9300      	str	r3, [sp, #0]
 800ebc8:	f000 fac6 	bl	800f158 <scalbn>
 800ebcc:	9b00      	ldr	r3, [sp, #0]
 800ebce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ed08 <__kernel_rem_pio2+0x340>
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	f280 80ac 	bge.w	800ed32 <__kernel_rem_pio2+0x36a>
 800ebda:	4619      	mov	r1, r3
 800ebdc:	2000      	movs	r0, #0
 800ebde:	2900      	cmp	r1, #0
 800ebe0:	f2c0 80cd 	blt.w	800ed7e <__kernel_rem_pio2+0x3b6>
 800ebe4:	aa68      	add	r2, sp, #416	; 0x1a0
 800ebe6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ebea:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800ed00 <__kernel_rem_pio2+0x338>
 800ebee:	4e4b      	ldr	r6, [pc, #300]	; (800ed1c <__kernel_rem_pio2+0x354>)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	e0b8      	b.n	800ed66 <__kernel_rem_pio2+0x39e>
 800ebf4:	2502      	movs	r5, #2
 800ebf6:	e78c      	b.n	800eb12 <__kernel_rem_pio2+0x14a>
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	b948      	cbnz	r0, 800ec10 <__kernel_rem_pio2+0x248>
 800ebfc:	b11a      	cbz	r2, 800ec06 <__kernel_rem_pio2+0x23e>
 800ebfe:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	2201      	movs	r2, #1
 800ec06:	f10c 0c01 	add.w	ip, ip, #1
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	e787      	b.n	800eb20 <__kernel_rem_pio2+0x158>
 800ec10:	ebae 0202 	sub.w	r2, lr, r2
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	4602      	mov	r2, r0
 800ec18:	e7f5      	b.n	800ec06 <__kernel_rem_pio2+0x23e>
 800ec1a:	1e72      	subs	r2, r6, #1
 800ec1c:	ab04      	add	r3, sp, #16
 800ec1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec22:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec26:	f10d 0c10 	add.w	ip, sp, #16
 800ec2a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ec2e:	e77f      	b.n	800eb30 <__kernel_rem_pio2+0x168>
 800ec30:	1e72      	subs	r2, r6, #1
 800ec32:	ab04      	add	r3, sp, #16
 800ec34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec3c:	e7f3      	b.n	800ec26 <__kernel_rem_pio2+0x25e>
 800ec3e:	aa04      	add	r2, sp, #16
 800ec40:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ec44:	3801      	subs	r0, #1
 800ec46:	ea4c 0c02 	orr.w	ip, ip, r2
 800ec4a:	e7ae      	b.n	800ebaa <__kernel_rem_pio2+0x1e2>
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec52:	2a00      	cmp	r2, #0
 800ec54:	d0fa      	beq.n	800ec4c <__kernel_rem_pio2+0x284>
 800ec56:	eb06 020b 	add.w	r2, r6, fp
 800ec5a:	ad18      	add	r5, sp, #96	; 0x60
 800ec5c:	1c73      	adds	r3, r6, #1
 800ec5e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ec62:	4406      	add	r6, r0
 800ec64:	429e      	cmp	r6, r3
 800ec66:	f6ff af19 	blt.w	800ea9c <__kernel_rem_pio2+0xd4>
 800ec6a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ec6e:	9d00      	ldr	r5, [sp, #0]
 800ec70:	ee07 0a90 	vmov	s15, r0
 800ec74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec78:	2000      	movs	r0, #0
 800ec7a:	eca2 7b02 	vstmia	r2!, {d7}
 800ec7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ed00 <__kernel_rem_pio2+0x338>
 800ec82:	4694      	mov	ip, r2
 800ec84:	4288      	cmp	r0, r1
 800ec86:	dd09      	ble.n	800ec9c <__kernel_rem_pio2+0x2d4>
 800ec88:	a868      	add	r0, sp, #416	; 0x1a0
 800ec8a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ec8e:	ed80 7b00 	vstr	d7, [r0]
 800ec92:	3301      	adds	r3, #1
 800ec94:	e7e6      	b.n	800ec64 <__kernel_rem_pio2+0x29c>
 800ec96:	9b01      	ldr	r3, [sp, #4]
 800ec98:	2001      	movs	r0, #1
 800ec9a:	e7d8      	b.n	800ec4e <__kernel_rem_pio2+0x286>
 800ec9c:	ecb5 5b02 	vldmia	r5!, {d5}
 800eca0:	ed3c 6b02 	vldmdb	ip!, {d6}
 800eca4:	3001      	adds	r0, #1
 800eca6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ecaa:	e7eb      	b.n	800ec84 <__kernel_rem_pio2+0x2bc>
 800ecac:	3b01      	subs	r3, #1
 800ecae:	e781      	b.n	800ebb4 <__kernel_rem_pio2+0x1ec>
 800ecb0:	4260      	negs	r0, r4
 800ecb2:	eeb0 0b48 	vmov.f64	d0, d8
 800ecb6:	f000 fa4f 	bl	800f158 <scalbn>
 800ecba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ed10 <__kernel_rem_pio2+0x348>
 800ecbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ecc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc6:	db2b      	blt.n	800ed20 <__kernel_rem_pio2+0x358>
 800ecc8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ed08 <__kernel_rem_pio2+0x340>
 800eccc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ecd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ecd4:	aa04      	add	r2, sp, #16
 800ecd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ecda:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ecde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ece2:	a904      	add	r1, sp, #16
 800ece4:	ee10 3a10 	vmov	r3, s0
 800ece8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ecec:	ee17 2a10 	vmov	r2, s14
 800ecf0:	1c73      	adds	r3, r6, #1
 800ecf2:	3418      	adds	r4, #24
 800ecf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ecf8:	e762      	b.n	800ebc0 <__kernel_rem_pio2+0x1f8>
 800ecfa:	bf00      	nop
 800ecfc:	f3af 8000 	nop.w
	...
 800ed0c:	3e700000 	.word	0x3e700000
 800ed10:	00000000 	.word	0x00000000
 800ed14:	41700000 	.word	0x41700000
 800ed18:	08013778 	.word	0x08013778
 800ed1c:	08013738 	.word	0x08013738
 800ed20:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ed24:	aa04      	add	r2, sp, #16
 800ed26:	ee10 3a10 	vmov	r3, s0
 800ed2a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ed2e:	4633      	mov	r3, r6
 800ed30:	e746      	b.n	800ebc0 <__kernel_rem_pio2+0x1f8>
 800ed32:	a804      	add	r0, sp, #16
 800ed34:	a968      	add	r1, sp, #416	; 0x1a0
 800ed36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ed3a:	9000      	str	r0, [sp, #0]
 800ed3c:	ee07 0a90 	vmov	s15, r0
 800ed40:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ed44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed48:	3a01      	subs	r2, #1
 800ed4a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ed4e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ed52:	ed81 7b00 	vstr	d7, [r1]
 800ed56:	e73d      	b.n	800ebd4 <__kernel_rem_pio2+0x20c>
 800ed58:	ecb6 5b02 	vldmia	r6!, {d5}
 800ed5c:	ecb4 6b02 	vldmia	r4!, {d6}
 800ed60:	3201      	adds	r2, #1
 800ed62:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed66:	454a      	cmp	r2, r9
 800ed68:	dc01      	bgt.n	800ed6e <__kernel_rem_pio2+0x3a6>
 800ed6a:	4290      	cmp	r0, r2
 800ed6c:	daf4      	bge.n	800ed58 <__kernel_rem_pio2+0x390>
 800ed6e:	aa40      	add	r2, sp, #256	; 0x100
 800ed70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ed74:	ed82 7b00 	vstr	d7, [r2]
 800ed78:	3901      	subs	r1, #1
 800ed7a:	3001      	adds	r0, #1
 800ed7c:	e72f      	b.n	800ebde <__kernel_rem_pio2+0x216>
 800ed7e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ed80:	2a02      	cmp	r2, #2
 800ed82:	dc0a      	bgt.n	800ed9a <__kernel_rem_pio2+0x3d2>
 800ed84:	2a00      	cmp	r2, #0
 800ed86:	dc5a      	bgt.n	800ee3e <__kernel_rem_pio2+0x476>
 800ed88:	d039      	beq.n	800edfe <__kernel_rem_pio2+0x436>
 800ed8a:	f008 0007 	and.w	r0, r8, #7
 800ed8e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800ed92:	ecbd 8b06 	vpop	{d8-d10}
 800ed96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed9a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ed9c:	2a03      	cmp	r2, #3
 800ed9e:	d1f4      	bne.n	800ed8a <__kernel_rem_pio2+0x3c2>
 800eda0:	aa40      	add	r2, sp, #256	; 0x100
 800eda2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800eda6:	4611      	mov	r1, r2
 800eda8:	4618      	mov	r0, r3
 800edaa:	2800      	cmp	r0, #0
 800edac:	f1a1 0108 	sub.w	r1, r1, #8
 800edb0:	dc52      	bgt.n	800ee58 <__kernel_rem_pio2+0x490>
 800edb2:	4619      	mov	r1, r3
 800edb4:	2901      	cmp	r1, #1
 800edb6:	f1a2 0208 	sub.w	r2, r2, #8
 800edba:	dc5d      	bgt.n	800ee78 <__kernel_rem_pio2+0x4b0>
 800edbc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800eec0 <__kernel_rem_pio2+0x4f8>
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	dc69      	bgt.n	800ee98 <__kernel_rem_pio2+0x4d0>
 800edc4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800edc8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800edcc:	2d00      	cmp	r5, #0
 800edce:	d16c      	bne.n	800eeaa <__kernel_rem_pio2+0x4e2>
 800edd0:	ed87 5b00 	vstr	d5, [r7]
 800edd4:	ed87 6b02 	vstr	d6, [r7, #8]
 800edd8:	ed87 7b04 	vstr	d7, [r7, #16]
 800eddc:	e7d5      	b.n	800ed8a <__kernel_rem_pio2+0x3c2>
 800edde:	aa40      	add	r2, sp, #256	; 0x100
 800ede0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ede4:	ed92 6b00 	vldr	d6, [r2]
 800ede8:	3b01      	subs	r3, #1
 800edea:	ee37 7b06 	vadd.f64	d7, d7, d6
 800edee:	2b00      	cmp	r3, #0
 800edf0:	daf5      	bge.n	800edde <__kernel_rem_pio2+0x416>
 800edf2:	b10d      	cbz	r5, 800edf8 <__kernel_rem_pio2+0x430>
 800edf4:	eeb1 7b47 	vneg.f64	d7, d7
 800edf8:	ed87 7b00 	vstr	d7, [r7]
 800edfc:	e7c5      	b.n	800ed8a <__kernel_rem_pio2+0x3c2>
 800edfe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800eec0 <__kernel_rem_pio2+0x4f8>
 800ee02:	e7f4      	b.n	800edee <__kernel_rem_pio2+0x426>
 800ee04:	a940      	add	r1, sp, #256	; 0x100
 800ee06:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ee0a:	ed91 7b00 	vldr	d7, [r1]
 800ee0e:	3a01      	subs	r2, #1
 800ee10:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee14:	2a00      	cmp	r2, #0
 800ee16:	daf5      	bge.n	800ee04 <__kernel_rem_pio2+0x43c>
 800ee18:	b1ad      	cbz	r5, 800ee46 <__kernel_rem_pio2+0x47e>
 800ee1a:	eeb1 7b46 	vneg.f64	d7, d6
 800ee1e:	ed87 7b00 	vstr	d7, [r7]
 800ee22:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800ee26:	a942      	add	r1, sp, #264	; 0x108
 800ee28:	2201      	movs	r2, #1
 800ee2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	da0c      	bge.n	800ee4c <__kernel_rem_pio2+0x484>
 800ee32:	b10d      	cbz	r5, 800ee38 <__kernel_rem_pio2+0x470>
 800ee34:	eeb1 7b47 	vneg.f64	d7, d7
 800ee38:	ed87 7b02 	vstr	d7, [r7, #8]
 800ee3c:	e7a5      	b.n	800ed8a <__kernel_rem_pio2+0x3c2>
 800ee3e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800eec0 <__kernel_rem_pio2+0x4f8>
 800ee42:	461a      	mov	r2, r3
 800ee44:	e7e6      	b.n	800ee14 <__kernel_rem_pio2+0x44c>
 800ee46:	eeb0 7b46 	vmov.f64	d7, d6
 800ee4a:	e7e8      	b.n	800ee1e <__kernel_rem_pio2+0x456>
 800ee4c:	ecb1 6b02 	vldmia	r1!, {d6}
 800ee50:	3201      	adds	r2, #1
 800ee52:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee56:	e7ea      	b.n	800ee2e <__kernel_rem_pio2+0x466>
 800ee58:	ed91 7b00 	vldr	d7, [r1]
 800ee5c:	ed91 5b02 	vldr	d5, [r1, #8]
 800ee60:	3801      	subs	r0, #1
 800ee62:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee66:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee6a:	ed81 6b00 	vstr	d6, [r1]
 800ee6e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee72:	ed81 7b02 	vstr	d7, [r1, #8]
 800ee76:	e798      	b.n	800edaa <__kernel_rem_pio2+0x3e2>
 800ee78:	ed92 7b00 	vldr	d7, [r2]
 800ee7c:	ed92 5b02 	vldr	d5, [r2, #8]
 800ee80:	3901      	subs	r1, #1
 800ee82:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee86:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee8a:	ed82 6b00 	vstr	d6, [r2]
 800ee8e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee92:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee96:	e78d      	b.n	800edb4 <__kernel_rem_pio2+0x3ec>
 800ee98:	aa40      	add	r2, sp, #256	; 0x100
 800ee9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ee9e:	ed92 6b00 	vldr	d6, [r2]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eea8:	e78a      	b.n	800edc0 <__kernel_rem_pio2+0x3f8>
 800eeaa:	eeb1 5b45 	vneg.f64	d5, d5
 800eeae:	eeb1 6b46 	vneg.f64	d6, d6
 800eeb2:	ed87 5b00 	vstr	d5, [r7]
 800eeb6:	eeb1 7b47 	vneg.f64	d7, d7
 800eeba:	ed87 6b02 	vstr	d6, [r7, #8]
 800eebe:	e78b      	b.n	800edd8 <__kernel_rem_pio2+0x410>
	...

0800eec8 <__kernel_sin>:
 800eec8:	ee10 3a90 	vmov	r3, s1
 800eecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eed0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eed4:	da04      	bge.n	800eee0 <__kernel_sin+0x18>
 800eed6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800eeda:	ee17 3a90 	vmov	r3, s15
 800eede:	b35b      	cbz	r3, 800ef38 <__kernel_sin+0x70>
 800eee0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800eee4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800eee8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ef40 <__kernel_sin+0x78>
 800eeec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef48 <__kernel_sin+0x80>
 800eef0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eef4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef50 <__kernel_sin+0x88>
 800eef8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800eefc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef58 <__kernel_sin+0x90>
 800ef00:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ef04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef60 <__kernel_sin+0x98>
 800ef08:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ef0c:	b930      	cbnz	r0, 800ef1c <__kernel_sin+0x54>
 800ef0e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef68 <__kernel_sin+0xa0>
 800ef12:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ef16:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ef1a:	4770      	bx	lr
 800ef1c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ef20:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ef24:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ef28:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ef2c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ef70 <__kernel_sin+0xa8>
 800ef30:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ef34:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	f3af 8000 	nop.w
 800ef40:	5acfd57c 	.word	0x5acfd57c
 800ef44:	3de5d93a 	.word	0x3de5d93a
 800ef48:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef4c:	be5ae5e6 	.word	0xbe5ae5e6
 800ef50:	57b1fe7d 	.word	0x57b1fe7d
 800ef54:	3ec71de3 	.word	0x3ec71de3
 800ef58:	19c161d5 	.word	0x19c161d5
 800ef5c:	bf2a01a0 	.word	0xbf2a01a0
 800ef60:	1110f8a6 	.word	0x1110f8a6
 800ef64:	3f811111 	.word	0x3f811111
 800ef68:	55555549 	.word	0x55555549
 800ef6c:	bfc55555 	.word	0xbfc55555
 800ef70:	55555549 	.word	0x55555549
 800ef74:	3fc55555 	.word	0x3fc55555

0800ef78 <with_errno>:
 800ef78:	b513      	push	{r0, r1, r4, lr}
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	ed8d 0b00 	vstr	d0, [sp]
 800ef80:	f000 f97c 	bl	800f27c <__errno>
 800ef84:	ed9d 0b00 	vldr	d0, [sp]
 800ef88:	6004      	str	r4, [r0, #0]
 800ef8a:	b002      	add	sp, #8
 800ef8c:	bd10      	pop	{r4, pc}

0800ef8e <xflow>:
 800ef8e:	b082      	sub	sp, #8
 800ef90:	b158      	cbz	r0, 800efaa <xflow+0x1c>
 800ef92:	eeb1 7b40 	vneg.f64	d7, d0
 800ef96:	ed8d 7b00 	vstr	d7, [sp]
 800ef9a:	ed9d 7b00 	vldr	d7, [sp]
 800ef9e:	2022      	movs	r0, #34	; 0x22
 800efa0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800efa4:	b002      	add	sp, #8
 800efa6:	f7ff bfe7 	b.w	800ef78 <with_errno>
 800efaa:	eeb0 7b40 	vmov.f64	d7, d0
 800efae:	e7f2      	b.n	800ef96 <xflow+0x8>

0800efb0 <__math_uflow>:
 800efb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efb8 <__math_uflow+0x8>
 800efb4:	f7ff bfeb 	b.w	800ef8e <xflow>
 800efb8:	00000000 	.word	0x00000000
 800efbc:	10000000 	.word	0x10000000

0800efc0 <__math_oflow>:
 800efc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800efc8 <__math_oflow+0x8>
 800efc4:	f7ff bfe3 	b.w	800ef8e <xflow>
 800efc8:	00000000 	.word	0x00000000
 800efcc:	70000000 	.word	0x70000000

0800efd0 <__math_divzero>:
 800efd0:	b082      	sub	sp, #8
 800efd2:	2800      	cmp	r0, #0
 800efd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800efd8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800efdc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800efe0:	ed8d 7b00 	vstr	d7, [sp]
 800efe4:	ed9d 0b00 	vldr	d0, [sp]
 800efe8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800eff8 <__math_divzero+0x28>
 800efec:	2022      	movs	r0, #34	; 0x22
 800efee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800eff2:	b002      	add	sp, #8
 800eff4:	f7ff bfc0 	b.w	800ef78 <with_errno>
	...

0800f000 <__math_invalid>:
 800f000:	eeb0 7b40 	vmov.f64	d7, d0
 800f004:	eeb4 7b47 	vcmp.f64	d7, d7
 800f008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f010:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f014:	d602      	bvs.n	800f01c <__math_invalid+0x1c>
 800f016:	2021      	movs	r0, #33	; 0x21
 800f018:	f7ff bfae 	b.w	800ef78 <with_errno>
 800f01c:	4770      	bx	lr

0800f01e <__math_check_uflow>:
 800f01e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f026:	d102      	bne.n	800f02e <__math_check_uflow+0x10>
 800f028:	2022      	movs	r0, #34	; 0x22
 800f02a:	f7ff bfa5 	b.w	800ef78 <with_errno>
 800f02e:	4770      	bx	lr

0800f030 <__math_check_oflow>:
 800f030:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f050 <__math_check_oflow+0x20>
 800f034:	eeb0 7bc0 	vabs.f64	d7, d0
 800f038:	eeb4 7b46 	vcmp.f64	d7, d6
 800f03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f040:	dd02      	ble.n	800f048 <__math_check_oflow+0x18>
 800f042:	2022      	movs	r0, #34	; 0x22
 800f044:	f7ff bf98 	b.w	800ef78 <with_errno>
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	f3af 8000 	nop.w
 800f050:	ffffffff 	.word	0xffffffff
 800f054:	7fefffff 	.word	0x7fefffff

0800f058 <fabs>:
 800f058:	ec51 0b10 	vmov	r0, r1, d0
 800f05c:	ee10 2a10 	vmov	r2, s0
 800f060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f064:	ec43 2b10 	vmov	d0, r2, r3
 800f068:	4770      	bx	lr
 800f06a:	0000      	movs	r0, r0
 800f06c:	0000      	movs	r0, r0
	...

0800f070 <floor>:
 800f070:	ee10 1a90 	vmov	r1, s1
 800f074:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f078:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f07c:	2b13      	cmp	r3, #19
 800f07e:	b530      	push	{r4, r5, lr}
 800f080:	ee10 0a10 	vmov	r0, s0
 800f084:	ee10 5a10 	vmov	r5, s0
 800f088:	dc31      	bgt.n	800f0ee <floor+0x7e>
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	da15      	bge.n	800f0ba <floor+0x4a>
 800f08e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f148 <floor+0xd8>
 800f092:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f096:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f09e:	dd07      	ble.n	800f0b0 <floor+0x40>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	da4e      	bge.n	800f142 <floor+0xd2>
 800f0a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0a8:	4318      	orrs	r0, r3
 800f0aa:	d001      	beq.n	800f0b0 <floor+0x40>
 800f0ac:	4928      	ldr	r1, [pc, #160]	; (800f150 <floor+0xe0>)
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	ec43 2b10 	vmov	d0, r2, r3
 800f0b8:	e020      	b.n	800f0fc <floor+0x8c>
 800f0ba:	4a26      	ldr	r2, [pc, #152]	; (800f154 <floor+0xe4>)
 800f0bc:	411a      	asrs	r2, r3
 800f0be:	ea01 0402 	and.w	r4, r1, r2
 800f0c2:	4304      	orrs	r4, r0
 800f0c4:	d01a      	beq.n	800f0fc <floor+0x8c>
 800f0c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f148 <floor+0xd8>
 800f0ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f0ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d6:	ddeb      	ble.n	800f0b0 <floor+0x40>
 800f0d8:	2900      	cmp	r1, #0
 800f0da:	bfbe      	ittt	lt
 800f0dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f0e0:	fa40 f303 	asrlt.w	r3, r0, r3
 800f0e4:	18c9      	addlt	r1, r1, r3
 800f0e6:	ea21 0102 	bic.w	r1, r1, r2
 800f0ea:	2000      	movs	r0, #0
 800f0ec:	e7e0      	b.n	800f0b0 <floor+0x40>
 800f0ee:	2b33      	cmp	r3, #51	; 0x33
 800f0f0:	dd05      	ble.n	800f0fe <floor+0x8e>
 800f0f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0f6:	d101      	bne.n	800f0fc <floor+0x8c>
 800f0f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f0fc:	bd30      	pop	{r4, r5, pc}
 800f0fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f102:	f04f 32ff 	mov.w	r2, #4294967295
 800f106:	40e2      	lsrs	r2, r4
 800f108:	4202      	tst	r2, r0
 800f10a:	d0f7      	beq.n	800f0fc <floor+0x8c>
 800f10c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f148 <floor+0xd8>
 800f110:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f114:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11c:	ddc8      	ble.n	800f0b0 <floor+0x40>
 800f11e:	2900      	cmp	r1, #0
 800f120:	da02      	bge.n	800f128 <floor+0xb8>
 800f122:	2b14      	cmp	r3, #20
 800f124:	d103      	bne.n	800f12e <floor+0xbe>
 800f126:	3101      	adds	r1, #1
 800f128:	ea20 0002 	bic.w	r0, r0, r2
 800f12c:	e7c0      	b.n	800f0b0 <floor+0x40>
 800f12e:	2401      	movs	r4, #1
 800f130:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f134:	fa04 f303 	lsl.w	r3, r4, r3
 800f138:	4418      	add	r0, r3
 800f13a:	42a8      	cmp	r0, r5
 800f13c:	bf38      	it	cc
 800f13e:	1909      	addcc	r1, r1, r4
 800f140:	e7f2      	b.n	800f128 <floor+0xb8>
 800f142:	2000      	movs	r0, #0
 800f144:	4601      	mov	r1, r0
 800f146:	e7b3      	b.n	800f0b0 <floor+0x40>
 800f148:	8800759c 	.word	0x8800759c
 800f14c:	7e37e43c 	.word	0x7e37e43c
 800f150:	bff00000 	.word	0xbff00000
 800f154:	000fffff 	.word	0x000fffff

0800f158 <scalbn>:
 800f158:	b082      	sub	sp, #8
 800f15a:	ed8d 0b00 	vstr	d0, [sp]
 800f15e:	9b01      	ldr	r3, [sp, #4]
 800f160:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f164:	b9a2      	cbnz	r2, 800f190 <scalbn+0x38>
 800f166:	9a00      	ldr	r2, [sp, #0]
 800f168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f16c:	4313      	orrs	r3, r2
 800f16e:	d03a      	beq.n	800f1e6 <scalbn+0x8e>
 800f170:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f248 <scalbn+0xf0>
 800f174:	4b40      	ldr	r3, [pc, #256]	; (800f278 <scalbn+0x120>)
 800f176:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f17a:	4298      	cmp	r0, r3
 800f17c:	ed8d 7b00 	vstr	d7, [sp]
 800f180:	da11      	bge.n	800f1a6 <scalbn+0x4e>
 800f182:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f250 <scalbn+0xf8>
 800f186:	ed9d 6b00 	vldr	d6, [sp]
 800f18a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f18e:	e007      	b.n	800f1a0 <scalbn+0x48>
 800f190:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f194:	428a      	cmp	r2, r1
 800f196:	d10a      	bne.n	800f1ae <scalbn+0x56>
 800f198:	ed9d 7b00 	vldr	d7, [sp]
 800f19c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f1a0:	ed8d 7b00 	vstr	d7, [sp]
 800f1a4:	e01f      	b.n	800f1e6 <scalbn+0x8e>
 800f1a6:	9b01      	ldr	r3, [sp, #4]
 800f1a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f1ac:	3a36      	subs	r2, #54	; 0x36
 800f1ae:	4402      	add	r2, r0
 800f1b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1b4:	428a      	cmp	r2, r1
 800f1b6:	dd0a      	ble.n	800f1ce <scalbn+0x76>
 800f1b8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f258 <scalbn+0x100>
 800f1bc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f260 <scalbn+0x108>
 800f1c0:	eeb0 6b47 	vmov.f64	d6, d7
 800f1c4:	9b01      	ldr	r3, [sp, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f1cc:	e7dd      	b.n	800f18a <scalbn+0x32>
 800f1ce:	2a00      	cmp	r2, #0
 800f1d0:	dd0d      	ble.n	800f1ee <scalbn+0x96>
 800f1d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1de:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f1e6:	ed9d 0b00 	vldr	d0, [sp]
 800f1ea:	b002      	add	sp, #8
 800f1ec:	4770      	bx	lr
 800f1ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f1f2:	da18      	bge.n	800f226 <scalbn+0xce>
 800f1f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f1f8:	4298      	cmp	r0, r3
 800f1fa:	9b01      	ldr	r3, [sp, #4]
 800f1fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f200:	dd09      	ble.n	800f216 <scalbn+0xbe>
 800f202:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f258 <scalbn+0x100>
 800f206:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f260 <scalbn+0x108>
 800f20a:	eeb0 6b47 	vmov.f64	d6, d7
 800f20e:	2b00      	cmp	r3, #0
 800f210:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f214:	e7b9      	b.n	800f18a <scalbn+0x32>
 800f216:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f250 <scalbn+0xf8>
 800f21a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f268 <scalbn+0x110>
 800f21e:	eeb0 6b47 	vmov.f64	d6, d7
 800f222:	2b00      	cmp	r3, #0
 800f224:	e7f4      	b.n	800f210 <scalbn+0xb8>
 800f226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f22a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f22e:	3236      	adds	r2, #54	; 0x36
 800f230:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f234:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f238:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f270 <scalbn+0x118>
 800f23c:	ec41 0b17 	vmov	d7, r0, r1
 800f240:	e7a3      	b.n	800f18a <scalbn+0x32>
 800f242:	bf00      	nop
 800f244:	f3af 8000 	nop.w
 800f248:	00000000 	.word	0x00000000
 800f24c:	43500000 	.word	0x43500000
 800f250:	c2f8f359 	.word	0xc2f8f359
 800f254:	01a56e1f 	.word	0x01a56e1f
 800f258:	8800759c 	.word	0x8800759c
 800f25c:	7e37e43c 	.word	0x7e37e43c
 800f260:	8800759c 	.word	0x8800759c
 800f264:	fe37e43c 	.word	0xfe37e43c
 800f268:	c2f8f359 	.word	0xc2f8f359
 800f26c:	81a56e1f 	.word	0x81a56e1f
 800f270:	00000000 	.word	0x00000000
 800f274:	3c900000 	.word	0x3c900000
 800f278:	ffff3cb0 	.word	0xffff3cb0

0800f27c <__errno>:
 800f27c:	4b01      	ldr	r3, [pc, #4]	; (800f284 <__errno+0x8>)
 800f27e:	6818      	ldr	r0, [r3, #0]
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	24000220 	.word	0x24000220

0800f288 <__libc_init_array>:
 800f288:	b570      	push	{r4, r5, r6, lr}
 800f28a:	4d0d      	ldr	r5, [pc, #52]	; (800f2c0 <__libc_init_array+0x38>)
 800f28c:	4c0d      	ldr	r4, [pc, #52]	; (800f2c4 <__libc_init_array+0x3c>)
 800f28e:	1b64      	subs	r4, r4, r5
 800f290:	10a4      	asrs	r4, r4, #2
 800f292:	2600      	movs	r6, #0
 800f294:	42a6      	cmp	r6, r4
 800f296:	d109      	bne.n	800f2ac <__libc_init_array+0x24>
 800f298:	4d0b      	ldr	r5, [pc, #44]	; (800f2c8 <__libc_init_array+0x40>)
 800f29a:	4c0c      	ldr	r4, [pc, #48]	; (800f2cc <__libc_init_array+0x44>)
 800f29c:	f002 fcd4 	bl	8011c48 <_init>
 800f2a0:	1b64      	subs	r4, r4, r5
 800f2a2:	10a4      	asrs	r4, r4, #2
 800f2a4:	2600      	movs	r6, #0
 800f2a6:	42a6      	cmp	r6, r4
 800f2a8:	d105      	bne.n	800f2b6 <__libc_init_array+0x2e>
 800f2aa:	bd70      	pop	{r4, r5, r6, pc}
 800f2ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2b0:	4798      	blx	r3
 800f2b2:	3601      	adds	r6, #1
 800f2b4:	e7ee      	b.n	800f294 <__libc_init_array+0xc>
 800f2b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2ba:	4798      	blx	r3
 800f2bc:	3601      	adds	r6, #1
 800f2be:	e7f2      	b.n	800f2a6 <__libc_init_array+0x1e>
 800f2c0:	08013b74 	.word	0x08013b74
 800f2c4:	08013b74 	.word	0x08013b74
 800f2c8:	08013b74 	.word	0x08013b74
 800f2cc:	08013b7c 	.word	0x08013b7c

0800f2d0 <memset>:
 800f2d0:	4402      	add	r2, r0
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d100      	bne.n	800f2da <memset+0xa>
 800f2d8:	4770      	bx	lr
 800f2da:	f803 1b01 	strb.w	r1, [r3], #1
 800f2de:	e7f9      	b.n	800f2d4 <memset+0x4>

0800f2e0 <__cvt>:
 800f2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e2:	ed2d 8b02 	vpush	{d8}
 800f2e6:	eeb0 8b40 	vmov.f64	d8, d0
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	4617      	mov	r7, r2
 800f2ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f2f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f2f2:	ee18 2a90 	vmov	r2, s17
 800f2f6:	f025 0520 	bic.w	r5, r5, #32
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	bfb6      	itet	lt
 800f2fe:	222d      	movlt	r2, #45	; 0x2d
 800f300:	2200      	movge	r2, #0
 800f302:	eeb1 8b40 	vneglt.f64	d8, d0
 800f306:	2d46      	cmp	r5, #70	; 0x46
 800f308:	460c      	mov	r4, r1
 800f30a:	701a      	strb	r2, [r3, #0]
 800f30c:	d004      	beq.n	800f318 <__cvt+0x38>
 800f30e:	2d45      	cmp	r5, #69	; 0x45
 800f310:	d100      	bne.n	800f314 <__cvt+0x34>
 800f312:	3401      	adds	r4, #1
 800f314:	2102      	movs	r1, #2
 800f316:	e000      	b.n	800f31a <__cvt+0x3a>
 800f318:	2103      	movs	r1, #3
 800f31a:	ab03      	add	r3, sp, #12
 800f31c:	9301      	str	r3, [sp, #4]
 800f31e:	ab02      	add	r3, sp, #8
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	4622      	mov	r2, r4
 800f324:	4633      	mov	r3, r6
 800f326:	eeb0 0b48 	vmov.f64	d0, d8
 800f32a:	f000 fddd 	bl	800fee8 <_dtoa_r>
 800f32e:	2d47      	cmp	r5, #71	; 0x47
 800f330:	d109      	bne.n	800f346 <__cvt+0x66>
 800f332:	07fb      	lsls	r3, r7, #31
 800f334:	d407      	bmi.n	800f346 <__cvt+0x66>
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f33a:	1a1b      	subs	r3, r3, r0
 800f33c:	6013      	str	r3, [r2, #0]
 800f33e:	b005      	add	sp, #20
 800f340:	ecbd 8b02 	vpop	{d8}
 800f344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f346:	2d46      	cmp	r5, #70	; 0x46
 800f348:	eb00 0204 	add.w	r2, r0, r4
 800f34c:	d10c      	bne.n	800f368 <__cvt+0x88>
 800f34e:	7803      	ldrb	r3, [r0, #0]
 800f350:	2b30      	cmp	r3, #48	; 0x30
 800f352:	d107      	bne.n	800f364 <__cvt+0x84>
 800f354:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35c:	bf1c      	itt	ne
 800f35e:	f1c4 0401 	rsbne	r4, r4, #1
 800f362:	6034      	strne	r4, [r6, #0]
 800f364:	6833      	ldr	r3, [r6, #0]
 800f366:	441a      	add	r2, r3
 800f368:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f370:	bf08      	it	eq
 800f372:	9203      	streq	r2, [sp, #12]
 800f374:	2130      	movs	r1, #48	; 0x30
 800f376:	9b03      	ldr	r3, [sp, #12]
 800f378:	4293      	cmp	r3, r2
 800f37a:	d2dc      	bcs.n	800f336 <__cvt+0x56>
 800f37c:	1c5c      	adds	r4, r3, #1
 800f37e:	9403      	str	r4, [sp, #12]
 800f380:	7019      	strb	r1, [r3, #0]
 800f382:	e7f8      	b.n	800f376 <__cvt+0x96>

0800f384 <__exponent>:
 800f384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f386:	4603      	mov	r3, r0
 800f388:	2900      	cmp	r1, #0
 800f38a:	bfb8      	it	lt
 800f38c:	4249      	neglt	r1, r1
 800f38e:	f803 2b02 	strb.w	r2, [r3], #2
 800f392:	bfb4      	ite	lt
 800f394:	222d      	movlt	r2, #45	; 0x2d
 800f396:	222b      	movge	r2, #43	; 0x2b
 800f398:	2909      	cmp	r1, #9
 800f39a:	7042      	strb	r2, [r0, #1]
 800f39c:	dd2a      	ble.n	800f3f4 <__exponent+0x70>
 800f39e:	f10d 0407 	add.w	r4, sp, #7
 800f3a2:	46a4      	mov	ip, r4
 800f3a4:	270a      	movs	r7, #10
 800f3a6:	46a6      	mov	lr, r4
 800f3a8:	460a      	mov	r2, r1
 800f3aa:	fb91 f6f7 	sdiv	r6, r1, r7
 800f3ae:	fb07 1516 	mls	r5, r7, r6, r1
 800f3b2:	3530      	adds	r5, #48	; 0x30
 800f3b4:	2a63      	cmp	r2, #99	; 0x63
 800f3b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f3ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f3be:	4631      	mov	r1, r6
 800f3c0:	dcf1      	bgt.n	800f3a6 <__exponent+0x22>
 800f3c2:	3130      	adds	r1, #48	; 0x30
 800f3c4:	f1ae 0502 	sub.w	r5, lr, #2
 800f3c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f3cc:	1c44      	adds	r4, r0, #1
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	4561      	cmp	r1, ip
 800f3d2:	d30a      	bcc.n	800f3ea <__exponent+0x66>
 800f3d4:	f10d 0209 	add.w	r2, sp, #9
 800f3d8:	eba2 020e 	sub.w	r2, r2, lr
 800f3dc:	4565      	cmp	r5, ip
 800f3de:	bf88      	it	hi
 800f3e0:	2200      	movhi	r2, #0
 800f3e2:	4413      	add	r3, r2
 800f3e4:	1a18      	subs	r0, r3, r0
 800f3e6:	b003      	add	sp, #12
 800f3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f3f2:	e7ed      	b.n	800f3d0 <__exponent+0x4c>
 800f3f4:	2330      	movs	r3, #48	; 0x30
 800f3f6:	3130      	adds	r1, #48	; 0x30
 800f3f8:	7083      	strb	r3, [r0, #2]
 800f3fa:	70c1      	strb	r1, [r0, #3]
 800f3fc:	1d03      	adds	r3, r0, #4
 800f3fe:	e7f1      	b.n	800f3e4 <__exponent+0x60>

0800f400 <_printf_float>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	b08b      	sub	sp, #44	; 0x2c
 800f406:	460c      	mov	r4, r1
 800f408:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f40c:	4616      	mov	r6, r2
 800f40e:	461f      	mov	r7, r3
 800f410:	4605      	mov	r5, r0
 800f412:	f001 fca3 	bl	8010d5c <_localeconv_r>
 800f416:	f8d0 b000 	ldr.w	fp, [r0]
 800f41a:	4658      	mov	r0, fp
 800f41c:	f7f0 ff60 	bl	80002e0 <strlen>
 800f420:	2300      	movs	r3, #0
 800f422:	9308      	str	r3, [sp, #32]
 800f424:	f8d8 3000 	ldr.w	r3, [r8]
 800f428:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f42c:	6822      	ldr	r2, [r4, #0]
 800f42e:	3307      	adds	r3, #7
 800f430:	f023 0307 	bic.w	r3, r3, #7
 800f434:	f103 0108 	add.w	r1, r3, #8
 800f438:	f8c8 1000 	str.w	r1, [r8]
 800f43c:	4682      	mov	sl, r0
 800f43e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f442:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f446:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f6a8 <_printf_float+0x2a8>
 800f44a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f44e:	eeb0 6bc0 	vabs.f64	d6, d0
 800f452:	eeb4 6b47 	vcmp.f64	d6, d7
 800f456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45a:	dd24      	ble.n	800f4a6 <_printf_float+0xa6>
 800f45c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f464:	d502      	bpl.n	800f46c <_printf_float+0x6c>
 800f466:	232d      	movs	r3, #45	; 0x2d
 800f468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f46c:	4b90      	ldr	r3, [pc, #576]	; (800f6b0 <_printf_float+0x2b0>)
 800f46e:	4891      	ldr	r0, [pc, #580]	; (800f6b4 <_printf_float+0x2b4>)
 800f470:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f474:	bf94      	ite	ls
 800f476:	4698      	movls	r8, r3
 800f478:	4680      	movhi	r8, r0
 800f47a:	2303      	movs	r3, #3
 800f47c:	6123      	str	r3, [r4, #16]
 800f47e:	f022 0204 	bic.w	r2, r2, #4
 800f482:	2300      	movs	r3, #0
 800f484:	6022      	str	r2, [r4, #0]
 800f486:	9304      	str	r3, [sp, #16]
 800f488:	9700      	str	r7, [sp, #0]
 800f48a:	4633      	mov	r3, r6
 800f48c:	aa09      	add	r2, sp, #36	; 0x24
 800f48e:	4621      	mov	r1, r4
 800f490:	4628      	mov	r0, r5
 800f492:	f000 f9d3 	bl	800f83c <_printf_common>
 800f496:	3001      	adds	r0, #1
 800f498:	f040 808a 	bne.w	800f5b0 <_printf_float+0x1b0>
 800f49c:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a0:	b00b      	add	sp, #44	; 0x2c
 800f4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4a6:	eeb4 0b40 	vcmp.f64	d0, d0
 800f4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ae:	d709      	bvc.n	800f4c4 <_printf_float+0xc4>
 800f4b0:	ee10 3a90 	vmov	r3, s1
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	bfbc      	itt	lt
 800f4b8:	232d      	movlt	r3, #45	; 0x2d
 800f4ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f4be:	487e      	ldr	r0, [pc, #504]	; (800f6b8 <_printf_float+0x2b8>)
 800f4c0:	4b7e      	ldr	r3, [pc, #504]	; (800f6bc <_printf_float+0x2bc>)
 800f4c2:	e7d5      	b.n	800f470 <_printf_float+0x70>
 800f4c4:	6863      	ldr	r3, [r4, #4]
 800f4c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f4ca:	9104      	str	r1, [sp, #16]
 800f4cc:	1c59      	adds	r1, r3, #1
 800f4ce:	d13c      	bne.n	800f54a <_printf_float+0x14a>
 800f4d0:	2306      	movs	r3, #6
 800f4d2:	6063      	str	r3, [r4, #4]
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	9303      	str	r3, [sp, #12]
 800f4d8:	ab08      	add	r3, sp, #32
 800f4da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f4de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f4e2:	ab07      	add	r3, sp, #28
 800f4e4:	6861      	ldr	r1, [r4, #4]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	6022      	str	r2, [r4, #0]
 800f4ea:	f10d 031b 	add.w	r3, sp, #27
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f7ff fef6 	bl	800f2e0 <__cvt>
 800f4f4:	9b04      	ldr	r3, [sp, #16]
 800f4f6:	9907      	ldr	r1, [sp, #28]
 800f4f8:	2b47      	cmp	r3, #71	; 0x47
 800f4fa:	4680      	mov	r8, r0
 800f4fc:	d108      	bne.n	800f510 <_printf_float+0x110>
 800f4fe:	1cc8      	adds	r0, r1, #3
 800f500:	db02      	blt.n	800f508 <_printf_float+0x108>
 800f502:	6863      	ldr	r3, [r4, #4]
 800f504:	4299      	cmp	r1, r3
 800f506:	dd41      	ble.n	800f58c <_printf_float+0x18c>
 800f508:	f1a9 0902 	sub.w	r9, r9, #2
 800f50c:	fa5f f989 	uxtb.w	r9, r9
 800f510:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f514:	d820      	bhi.n	800f558 <_printf_float+0x158>
 800f516:	3901      	subs	r1, #1
 800f518:	464a      	mov	r2, r9
 800f51a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f51e:	9107      	str	r1, [sp, #28]
 800f520:	f7ff ff30 	bl	800f384 <__exponent>
 800f524:	9a08      	ldr	r2, [sp, #32]
 800f526:	9004      	str	r0, [sp, #16]
 800f528:	1813      	adds	r3, r2, r0
 800f52a:	2a01      	cmp	r2, #1
 800f52c:	6123      	str	r3, [r4, #16]
 800f52e:	dc02      	bgt.n	800f536 <_printf_float+0x136>
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	07d2      	lsls	r2, r2, #31
 800f534:	d501      	bpl.n	800f53a <_printf_float+0x13a>
 800f536:	3301      	adds	r3, #1
 800f538:	6123      	str	r3, [r4, #16]
 800f53a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d0a2      	beq.n	800f488 <_printf_float+0x88>
 800f542:	232d      	movs	r3, #45	; 0x2d
 800f544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f548:	e79e      	b.n	800f488 <_printf_float+0x88>
 800f54a:	9904      	ldr	r1, [sp, #16]
 800f54c:	2947      	cmp	r1, #71	; 0x47
 800f54e:	d1c1      	bne.n	800f4d4 <_printf_float+0xd4>
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1bf      	bne.n	800f4d4 <_printf_float+0xd4>
 800f554:	2301      	movs	r3, #1
 800f556:	e7bc      	b.n	800f4d2 <_printf_float+0xd2>
 800f558:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f55c:	d118      	bne.n	800f590 <_printf_float+0x190>
 800f55e:	2900      	cmp	r1, #0
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	dd0b      	ble.n	800f57c <_printf_float+0x17c>
 800f564:	6121      	str	r1, [r4, #16]
 800f566:	b913      	cbnz	r3, 800f56e <_printf_float+0x16e>
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	07d0      	lsls	r0, r2, #31
 800f56c:	d502      	bpl.n	800f574 <_printf_float+0x174>
 800f56e:	3301      	adds	r3, #1
 800f570:	440b      	add	r3, r1
 800f572:	6123      	str	r3, [r4, #16]
 800f574:	2300      	movs	r3, #0
 800f576:	65a1      	str	r1, [r4, #88]	; 0x58
 800f578:	9304      	str	r3, [sp, #16]
 800f57a:	e7de      	b.n	800f53a <_printf_float+0x13a>
 800f57c:	b913      	cbnz	r3, 800f584 <_printf_float+0x184>
 800f57e:	6822      	ldr	r2, [r4, #0]
 800f580:	07d2      	lsls	r2, r2, #31
 800f582:	d501      	bpl.n	800f588 <_printf_float+0x188>
 800f584:	3302      	adds	r3, #2
 800f586:	e7f4      	b.n	800f572 <_printf_float+0x172>
 800f588:	2301      	movs	r3, #1
 800f58a:	e7f2      	b.n	800f572 <_printf_float+0x172>
 800f58c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f590:	9b08      	ldr	r3, [sp, #32]
 800f592:	4299      	cmp	r1, r3
 800f594:	db05      	blt.n	800f5a2 <_printf_float+0x1a2>
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	6121      	str	r1, [r4, #16]
 800f59a:	07d8      	lsls	r0, r3, #31
 800f59c:	d5ea      	bpl.n	800f574 <_printf_float+0x174>
 800f59e:	1c4b      	adds	r3, r1, #1
 800f5a0:	e7e7      	b.n	800f572 <_printf_float+0x172>
 800f5a2:	2900      	cmp	r1, #0
 800f5a4:	bfd4      	ite	le
 800f5a6:	f1c1 0202 	rsble	r2, r1, #2
 800f5aa:	2201      	movgt	r2, #1
 800f5ac:	4413      	add	r3, r2
 800f5ae:	e7e0      	b.n	800f572 <_printf_float+0x172>
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	055a      	lsls	r2, r3, #21
 800f5b4:	d407      	bmi.n	800f5c6 <_printf_float+0x1c6>
 800f5b6:	6923      	ldr	r3, [r4, #16]
 800f5b8:	4642      	mov	r2, r8
 800f5ba:	4631      	mov	r1, r6
 800f5bc:	4628      	mov	r0, r5
 800f5be:	47b8      	blx	r7
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d12a      	bne.n	800f61a <_printf_float+0x21a>
 800f5c4:	e76a      	b.n	800f49c <_printf_float+0x9c>
 800f5c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f5ca:	f240 80e2 	bls.w	800f792 <_printf_float+0x392>
 800f5ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f5d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	d133      	bne.n	800f644 <_printf_float+0x244>
 800f5dc:	4a38      	ldr	r2, [pc, #224]	; (800f6c0 <_printf_float+0x2c0>)
 800f5de:	2301      	movs	r3, #1
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	47b8      	blx	r7
 800f5e6:	3001      	adds	r0, #1
 800f5e8:	f43f af58 	beq.w	800f49c <_printf_float+0x9c>
 800f5ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	db02      	blt.n	800f5fa <_printf_float+0x1fa>
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	07d8      	lsls	r0, r3, #31
 800f5f8:	d50f      	bpl.n	800f61a <_printf_float+0x21a>
 800f5fa:	4653      	mov	r3, sl
 800f5fc:	465a      	mov	r2, fp
 800f5fe:	4631      	mov	r1, r6
 800f600:	4628      	mov	r0, r5
 800f602:	47b8      	blx	r7
 800f604:	3001      	adds	r0, #1
 800f606:	f43f af49 	beq.w	800f49c <_printf_float+0x9c>
 800f60a:	f04f 0800 	mov.w	r8, #0
 800f60e:	f104 091a 	add.w	r9, r4, #26
 800f612:	9b08      	ldr	r3, [sp, #32]
 800f614:	3b01      	subs	r3, #1
 800f616:	4543      	cmp	r3, r8
 800f618:	dc09      	bgt.n	800f62e <_printf_float+0x22e>
 800f61a:	6823      	ldr	r3, [r4, #0]
 800f61c:	079b      	lsls	r3, r3, #30
 800f61e:	f100 8108 	bmi.w	800f832 <_printf_float+0x432>
 800f622:	68e0      	ldr	r0, [r4, #12]
 800f624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f626:	4298      	cmp	r0, r3
 800f628:	bfb8      	it	lt
 800f62a:	4618      	movlt	r0, r3
 800f62c:	e738      	b.n	800f4a0 <_printf_float+0xa0>
 800f62e:	2301      	movs	r3, #1
 800f630:	464a      	mov	r2, r9
 800f632:	4631      	mov	r1, r6
 800f634:	4628      	mov	r0, r5
 800f636:	47b8      	blx	r7
 800f638:	3001      	adds	r0, #1
 800f63a:	f43f af2f 	beq.w	800f49c <_printf_float+0x9c>
 800f63e:	f108 0801 	add.w	r8, r8, #1
 800f642:	e7e6      	b.n	800f612 <_printf_float+0x212>
 800f644:	9b07      	ldr	r3, [sp, #28]
 800f646:	2b00      	cmp	r3, #0
 800f648:	dc3c      	bgt.n	800f6c4 <_printf_float+0x2c4>
 800f64a:	4a1d      	ldr	r2, [pc, #116]	; (800f6c0 <_printf_float+0x2c0>)
 800f64c:	2301      	movs	r3, #1
 800f64e:	4631      	mov	r1, r6
 800f650:	4628      	mov	r0, r5
 800f652:	47b8      	blx	r7
 800f654:	3001      	adds	r0, #1
 800f656:	f43f af21 	beq.w	800f49c <_printf_float+0x9c>
 800f65a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f65e:	4313      	orrs	r3, r2
 800f660:	d102      	bne.n	800f668 <_printf_float+0x268>
 800f662:	6823      	ldr	r3, [r4, #0]
 800f664:	07d9      	lsls	r1, r3, #31
 800f666:	d5d8      	bpl.n	800f61a <_printf_float+0x21a>
 800f668:	4653      	mov	r3, sl
 800f66a:	465a      	mov	r2, fp
 800f66c:	4631      	mov	r1, r6
 800f66e:	4628      	mov	r0, r5
 800f670:	47b8      	blx	r7
 800f672:	3001      	adds	r0, #1
 800f674:	f43f af12 	beq.w	800f49c <_printf_float+0x9c>
 800f678:	f04f 0900 	mov.w	r9, #0
 800f67c:	f104 0a1a 	add.w	sl, r4, #26
 800f680:	9b07      	ldr	r3, [sp, #28]
 800f682:	425b      	negs	r3, r3
 800f684:	454b      	cmp	r3, r9
 800f686:	dc01      	bgt.n	800f68c <_printf_float+0x28c>
 800f688:	9b08      	ldr	r3, [sp, #32]
 800f68a:	e795      	b.n	800f5b8 <_printf_float+0x1b8>
 800f68c:	2301      	movs	r3, #1
 800f68e:	4652      	mov	r2, sl
 800f690:	4631      	mov	r1, r6
 800f692:	4628      	mov	r0, r5
 800f694:	47b8      	blx	r7
 800f696:	3001      	adds	r0, #1
 800f698:	f43f af00 	beq.w	800f49c <_printf_float+0x9c>
 800f69c:	f109 0901 	add.w	r9, r9, #1
 800f6a0:	e7ee      	b.n	800f680 <_printf_float+0x280>
 800f6a2:	bf00      	nop
 800f6a4:	f3af 8000 	nop.w
 800f6a8:	ffffffff 	.word	0xffffffff
 800f6ac:	7fefffff 	.word	0x7fefffff
 800f6b0:	0801378c 	.word	0x0801378c
 800f6b4:	08013790 	.word	0x08013790
 800f6b8:	08013798 	.word	0x08013798
 800f6bc:	08013794 	.word	0x08013794
 800f6c0:	0801379c 	.word	0x0801379c
 800f6c4:	9a08      	ldr	r2, [sp, #32]
 800f6c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	bfa8      	it	ge
 800f6cc:	461a      	movge	r2, r3
 800f6ce:	2a00      	cmp	r2, #0
 800f6d0:	4691      	mov	r9, r2
 800f6d2:	dc38      	bgt.n	800f746 <_printf_float+0x346>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	9305      	str	r3, [sp, #20]
 800f6d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6dc:	f104 021a 	add.w	r2, r4, #26
 800f6e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6e2:	9905      	ldr	r1, [sp, #20]
 800f6e4:	9304      	str	r3, [sp, #16]
 800f6e6:	eba3 0309 	sub.w	r3, r3, r9
 800f6ea:	428b      	cmp	r3, r1
 800f6ec:	dc33      	bgt.n	800f756 <_printf_float+0x356>
 800f6ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	db3c      	blt.n	800f770 <_printf_float+0x370>
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	07da      	lsls	r2, r3, #31
 800f6fa:	d439      	bmi.n	800f770 <_printf_float+0x370>
 800f6fc:	9a08      	ldr	r2, [sp, #32]
 800f6fe:	9b04      	ldr	r3, [sp, #16]
 800f700:	9907      	ldr	r1, [sp, #28]
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	eba2 0901 	sub.w	r9, r2, r1
 800f708:	4599      	cmp	r9, r3
 800f70a:	bfa8      	it	ge
 800f70c:	4699      	movge	r9, r3
 800f70e:	f1b9 0f00 	cmp.w	r9, #0
 800f712:	dc35      	bgt.n	800f780 <_printf_float+0x380>
 800f714:	f04f 0800 	mov.w	r8, #0
 800f718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f71c:	f104 0a1a 	add.w	sl, r4, #26
 800f720:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f724:	1a9b      	subs	r3, r3, r2
 800f726:	eba3 0309 	sub.w	r3, r3, r9
 800f72a:	4543      	cmp	r3, r8
 800f72c:	f77f af75 	ble.w	800f61a <_printf_float+0x21a>
 800f730:	2301      	movs	r3, #1
 800f732:	4652      	mov	r2, sl
 800f734:	4631      	mov	r1, r6
 800f736:	4628      	mov	r0, r5
 800f738:	47b8      	blx	r7
 800f73a:	3001      	adds	r0, #1
 800f73c:	f43f aeae 	beq.w	800f49c <_printf_float+0x9c>
 800f740:	f108 0801 	add.w	r8, r8, #1
 800f744:	e7ec      	b.n	800f720 <_printf_float+0x320>
 800f746:	4613      	mov	r3, r2
 800f748:	4631      	mov	r1, r6
 800f74a:	4642      	mov	r2, r8
 800f74c:	4628      	mov	r0, r5
 800f74e:	47b8      	blx	r7
 800f750:	3001      	adds	r0, #1
 800f752:	d1bf      	bne.n	800f6d4 <_printf_float+0x2d4>
 800f754:	e6a2      	b.n	800f49c <_printf_float+0x9c>
 800f756:	2301      	movs	r3, #1
 800f758:	4631      	mov	r1, r6
 800f75a:	4628      	mov	r0, r5
 800f75c:	9204      	str	r2, [sp, #16]
 800f75e:	47b8      	blx	r7
 800f760:	3001      	adds	r0, #1
 800f762:	f43f ae9b 	beq.w	800f49c <_printf_float+0x9c>
 800f766:	9b05      	ldr	r3, [sp, #20]
 800f768:	9a04      	ldr	r2, [sp, #16]
 800f76a:	3301      	adds	r3, #1
 800f76c:	9305      	str	r3, [sp, #20]
 800f76e:	e7b7      	b.n	800f6e0 <_printf_float+0x2e0>
 800f770:	4653      	mov	r3, sl
 800f772:	465a      	mov	r2, fp
 800f774:	4631      	mov	r1, r6
 800f776:	4628      	mov	r0, r5
 800f778:	47b8      	blx	r7
 800f77a:	3001      	adds	r0, #1
 800f77c:	d1be      	bne.n	800f6fc <_printf_float+0x2fc>
 800f77e:	e68d      	b.n	800f49c <_printf_float+0x9c>
 800f780:	9a04      	ldr	r2, [sp, #16]
 800f782:	464b      	mov	r3, r9
 800f784:	4442      	add	r2, r8
 800f786:	4631      	mov	r1, r6
 800f788:	4628      	mov	r0, r5
 800f78a:	47b8      	blx	r7
 800f78c:	3001      	adds	r0, #1
 800f78e:	d1c1      	bne.n	800f714 <_printf_float+0x314>
 800f790:	e684      	b.n	800f49c <_printf_float+0x9c>
 800f792:	9a08      	ldr	r2, [sp, #32]
 800f794:	2a01      	cmp	r2, #1
 800f796:	dc01      	bgt.n	800f79c <_printf_float+0x39c>
 800f798:	07db      	lsls	r3, r3, #31
 800f79a:	d537      	bpl.n	800f80c <_printf_float+0x40c>
 800f79c:	2301      	movs	r3, #1
 800f79e:	4642      	mov	r2, r8
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	47b8      	blx	r7
 800f7a6:	3001      	adds	r0, #1
 800f7a8:	f43f ae78 	beq.w	800f49c <_printf_float+0x9c>
 800f7ac:	4653      	mov	r3, sl
 800f7ae:	465a      	mov	r2, fp
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	47b8      	blx	r7
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	f43f ae70 	beq.w	800f49c <_printf_float+0x9c>
 800f7bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f7c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c8:	d01b      	beq.n	800f802 <_printf_float+0x402>
 800f7ca:	9b08      	ldr	r3, [sp, #32]
 800f7cc:	f108 0201 	add.w	r2, r8, #1
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	47b8      	blx	r7
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d10e      	bne.n	800f7fa <_printf_float+0x3fa>
 800f7dc:	e65e      	b.n	800f49c <_printf_float+0x9c>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	464a      	mov	r2, r9
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	47b8      	blx	r7
 800f7e8:	3001      	adds	r0, #1
 800f7ea:	f43f ae57 	beq.w	800f49c <_printf_float+0x9c>
 800f7ee:	f108 0801 	add.w	r8, r8, #1
 800f7f2:	9b08      	ldr	r3, [sp, #32]
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	4543      	cmp	r3, r8
 800f7f8:	dcf1      	bgt.n	800f7de <_printf_float+0x3de>
 800f7fa:	9b04      	ldr	r3, [sp, #16]
 800f7fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f800:	e6db      	b.n	800f5ba <_printf_float+0x1ba>
 800f802:	f04f 0800 	mov.w	r8, #0
 800f806:	f104 091a 	add.w	r9, r4, #26
 800f80a:	e7f2      	b.n	800f7f2 <_printf_float+0x3f2>
 800f80c:	2301      	movs	r3, #1
 800f80e:	4642      	mov	r2, r8
 800f810:	e7df      	b.n	800f7d2 <_printf_float+0x3d2>
 800f812:	2301      	movs	r3, #1
 800f814:	464a      	mov	r2, r9
 800f816:	4631      	mov	r1, r6
 800f818:	4628      	mov	r0, r5
 800f81a:	47b8      	blx	r7
 800f81c:	3001      	adds	r0, #1
 800f81e:	f43f ae3d 	beq.w	800f49c <_printf_float+0x9c>
 800f822:	f108 0801 	add.w	r8, r8, #1
 800f826:	68e3      	ldr	r3, [r4, #12]
 800f828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f82a:	1a5b      	subs	r3, r3, r1
 800f82c:	4543      	cmp	r3, r8
 800f82e:	dcf0      	bgt.n	800f812 <_printf_float+0x412>
 800f830:	e6f7      	b.n	800f622 <_printf_float+0x222>
 800f832:	f04f 0800 	mov.w	r8, #0
 800f836:	f104 0919 	add.w	r9, r4, #25
 800f83a:	e7f4      	b.n	800f826 <_printf_float+0x426>

0800f83c <_printf_common>:
 800f83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f840:	4616      	mov	r6, r2
 800f842:	4699      	mov	r9, r3
 800f844:	688a      	ldr	r2, [r1, #8]
 800f846:	690b      	ldr	r3, [r1, #16]
 800f848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f84c:	4293      	cmp	r3, r2
 800f84e:	bfb8      	it	lt
 800f850:	4613      	movlt	r3, r2
 800f852:	6033      	str	r3, [r6, #0]
 800f854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f858:	4607      	mov	r7, r0
 800f85a:	460c      	mov	r4, r1
 800f85c:	b10a      	cbz	r2, 800f862 <_printf_common+0x26>
 800f85e:	3301      	adds	r3, #1
 800f860:	6033      	str	r3, [r6, #0]
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	0699      	lsls	r1, r3, #26
 800f866:	bf42      	ittt	mi
 800f868:	6833      	ldrmi	r3, [r6, #0]
 800f86a:	3302      	addmi	r3, #2
 800f86c:	6033      	strmi	r3, [r6, #0]
 800f86e:	6825      	ldr	r5, [r4, #0]
 800f870:	f015 0506 	ands.w	r5, r5, #6
 800f874:	d106      	bne.n	800f884 <_printf_common+0x48>
 800f876:	f104 0a19 	add.w	sl, r4, #25
 800f87a:	68e3      	ldr	r3, [r4, #12]
 800f87c:	6832      	ldr	r2, [r6, #0]
 800f87e:	1a9b      	subs	r3, r3, r2
 800f880:	42ab      	cmp	r3, r5
 800f882:	dc26      	bgt.n	800f8d2 <_printf_common+0x96>
 800f884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f888:	1e13      	subs	r3, r2, #0
 800f88a:	6822      	ldr	r2, [r4, #0]
 800f88c:	bf18      	it	ne
 800f88e:	2301      	movne	r3, #1
 800f890:	0692      	lsls	r2, r2, #26
 800f892:	d42b      	bmi.n	800f8ec <_printf_common+0xb0>
 800f894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f898:	4649      	mov	r1, r9
 800f89a:	4638      	mov	r0, r7
 800f89c:	47c0      	blx	r8
 800f89e:	3001      	adds	r0, #1
 800f8a0:	d01e      	beq.n	800f8e0 <_printf_common+0xa4>
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	68e5      	ldr	r5, [r4, #12]
 800f8a6:	6832      	ldr	r2, [r6, #0]
 800f8a8:	f003 0306 	and.w	r3, r3, #6
 800f8ac:	2b04      	cmp	r3, #4
 800f8ae:	bf08      	it	eq
 800f8b0:	1aad      	subeq	r5, r5, r2
 800f8b2:	68a3      	ldr	r3, [r4, #8]
 800f8b4:	6922      	ldr	r2, [r4, #16]
 800f8b6:	bf0c      	ite	eq
 800f8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8bc:	2500      	movne	r5, #0
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	bfc4      	itt	gt
 800f8c2:	1a9b      	subgt	r3, r3, r2
 800f8c4:	18ed      	addgt	r5, r5, r3
 800f8c6:	2600      	movs	r6, #0
 800f8c8:	341a      	adds	r4, #26
 800f8ca:	42b5      	cmp	r5, r6
 800f8cc:	d11a      	bne.n	800f904 <_printf_common+0xc8>
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	e008      	b.n	800f8e4 <_printf_common+0xa8>
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4652      	mov	r2, sl
 800f8d6:	4649      	mov	r1, r9
 800f8d8:	4638      	mov	r0, r7
 800f8da:	47c0      	blx	r8
 800f8dc:	3001      	adds	r0, #1
 800f8de:	d103      	bne.n	800f8e8 <_printf_common+0xac>
 800f8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8e8:	3501      	adds	r5, #1
 800f8ea:	e7c6      	b.n	800f87a <_printf_common+0x3e>
 800f8ec:	18e1      	adds	r1, r4, r3
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	2030      	movs	r0, #48	; 0x30
 800f8f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8f6:	4422      	add	r2, r4
 800f8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f900:	3302      	adds	r3, #2
 800f902:	e7c7      	b.n	800f894 <_printf_common+0x58>
 800f904:	2301      	movs	r3, #1
 800f906:	4622      	mov	r2, r4
 800f908:	4649      	mov	r1, r9
 800f90a:	4638      	mov	r0, r7
 800f90c:	47c0      	blx	r8
 800f90e:	3001      	adds	r0, #1
 800f910:	d0e6      	beq.n	800f8e0 <_printf_common+0xa4>
 800f912:	3601      	adds	r6, #1
 800f914:	e7d9      	b.n	800f8ca <_printf_common+0x8e>
	...

0800f918 <_printf_i>:
 800f918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f91c:	460c      	mov	r4, r1
 800f91e:	4691      	mov	r9, r2
 800f920:	7e27      	ldrb	r7, [r4, #24]
 800f922:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f924:	2f78      	cmp	r7, #120	; 0x78
 800f926:	4680      	mov	r8, r0
 800f928:	469a      	mov	sl, r3
 800f92a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f92e:	d807      	bhi.n	800f940 <_printf_i+0x28>
 800f930:	2f62      	cmp	r7, #98	; 0x62
 800f932:	d80a      	bhi.n	800f94a <_printf_i+0x32>
 800f934:	2f00      	cmp	r7, #0
 800f936:	f000 80d8 	beq.w	800faea <_printf_i+0x1d2>
 800f93a:	2f58      	cmp	r7, #88	; 0x58
 800f93c:	f000 80a3 	beq.w	800fa86 <_printf_i+0x16e>
 800f940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f948:	e03a      	b.n	800f9c0 <_printf_i+0xa8>
 800f94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f94e:	2b15      	cmp	r3, #21
 800f950:	d8f6      	bhi.n	800f940 <_printf_i+0x28>
 800f952:	a001      	add	r0, pc, #4	; (adr r0, 800f958 <_printf_i+0x40>)
 800f954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f958:	0800f9b1 	.word	0x0800f9b1
 800f95c:	0800f9c5 	.word	0x0800f9c5
 800f960:	0800f941 	.word	0x0800f941
 800f964:	0800f941 	.word	0x0800f941
 800f968:	0800f941 	.word	0x0800f941
 800f96c:	0800f941 	.word	0x0800f941
 800f970:	0800f9c5 	.word	0x0800f9c5
 800f974:	0800f941 	.word	0x0800f941
 800f978:	0800f941 	.word	0x0800f941
 800f97c:	0800f941 	.word	0x0800f941
 800f980:	0800f941 	.word	0x0800f941
 800f984:	0800fad1 	.word	0x0800fad1
 800f988:	0800f9f5 	.word	0x0800f9f5
 800f98c:	0800fab3 	.word	0x0800fab3
 800f990:	0800f941 	.word	0x0800f941
 800f994:	0800f941 	.word	0x0800f941
 800f998:	0800faf3 	.word	0x0800faf3
 800f99c:	0800f941 	.word	0x0800f941
 800f9a0:	0800f9f5 	.word	0x0800f9f5
 800f9a4:	0800f941 	.word	0x0800f941
 800f9a8:	0800f941 	.word	0x0800f941
 800f9ac:	0800fabb 	.word	0x0800fabb
 800f9b0:	680b      	ldr	r3, [r1, #0]
 800f9b2:	1d1a      	adds	r2, r3, #4
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	600a      	str	r2, [r1, #0]
 800f9b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e0a3      	b.n	800fb0c <_printf_i+0x1f4>
 800f9c4:	6825      	ldr	r5, [r4, #0]
 800f9c6:	6808      	ldr	r0, [r1, #0]
 800f9c8:	062e      	lsls	r6, r5, #24
 800f9ca:	f100 0304 	add.w	r3, r0, #4
 800f9ce:	d50a      	bpl.n	800f9e6 <_printf_i+0xce>
 800f9d0:	6805      	ldr	r5, [r0, #0]
 800f9d2:	600b      	str	r3, [r1, #0]
 800f9d4:	2d00      	cmp	r5, #0
 800f9d6:	da03      	bge.n	800f9e0 <_printf_i+0xc8>
 800f9d8:	232d      	movs	r3, #45	; 0x2d
 800f9da:	426d      	negs	r5, r5
 800f9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9e0:	485e      	ldr	r0, [pc, #376]	; (800fb5c <_printf_i+0x244>)
 800f9e2:	230a      	movs	r3, #10
 800f9e4:	e019      	b.n	800fa1a <_printf_i+0x102>
 800f9e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f9ea:	6805      	ldr	r5, [r0, #0]
 800f9ec:	600b      	str	r3, [r1, #0]
 800f9ee:	bf18      	it	ne
 800f9f0:	b22d      	sxthne	r5, r5
 800f9f2:	e7ef      	b.n	800f9d4 <_printf_i+0xbc>
 800f9f4:	680b      	ldr	r3, [r1, #0]
 800f9f6:	6825      	ldr	r5, [r4, #0]
 800f9f8:	1d18      	adds	r0, r3, #4
 800f9fa:	6008      	str	r0, [r1, #0]
 800f9fc:	0628      	lsls	r0, r5, #24
 800f9fe:	d501      	bpl.n	800fa04 <_printf_i+0xec>
 800fa00:	681d      	ldr	r5, [r3, #0]
 800fa02:	e002      	b.n	800fa0a <_printf_i+0xf2>
 800fa04:	0669      	lsls	r1, r5, #25
 800fa06:	d5fb      	bpl.n	800fa00 <_printf_i+0xe8>
 800fa08:	881d      	ldrh	r5, [r3, #0]
 800fa0a:	4854      	ldr	r0, [pc, #336]	; (800fb5c <_printf_i+0x244>)
 800fa0c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa0e:	bf0c      	ite	eq
 800fa10:	2308      	moveq	r3, #8
 800fa12:	230a      	movne	r3, #10
 800fa14:	2100      	movs	r1, #0
 800fa16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa1a:	6866      	ldr	r6, [r4, #4]
 800fa1c:	60a6      	str	r6, [r4, #8]
 800fa1e:	2e00      	cmp	r6, #0
 800fa20:	bfa2      	ittt	ge
 800fa22:	6821      	ldrge	r1, [r4, #0]
 800fa24:	f021 0104 	bicge.w	r1, r1, #4
 800fa28:	6021      	strge	r1, [r4, #0]
 800fa2a:	b90d      	cbnz	r5, 800fa30 <_printf_i+0x118>
 800fa2c:	2e00      	cmp	r6, #0
 800fa2e:	d04d      	beq.n	800facc <_printf_i+0x1b4>
 800fa30:	4616      	mov	r6, r2
 800fa32:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa36:	fb03 5711 	mls	r7, r3, r1, r5
 800fa3a:	5dc7      	ldrb	r7, [r0, r7]
 800fa3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa40:	462f      	mov	r7, r5
 800fa42:	42bb      	cmp	r3, r7
 800fa44:	460d      	mov	r5, r1
 800fa46:	d9f4      	bls.n	800fa32 <_printf_i+0x11a>
 800fa48:	2b08      	cmp	r3, #8
 800fa4a:	d10b      	bne.n	800fa64 <_printf_i+0x14c>
 800fa4c:	6823      	ldr	r3, [r4, #0]
 800fa4e:	07df      	lsls	r7, r3, #31
 800fa50:	d508      	bpl.n	800fa64 <_printf_i+0x14c>
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	6861      	ldr	r1, [r4, #4]
 800fa56:	4299      	cmp	r1, r3
 800fa58:	bfde      	ittt	le
 800fa5a:	2330      	movle	r3, #48	; 0x30
 800fa5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa64:	1b92      	subs	r2, r2, r6
 800fa66:	6122      	str	r2, [r4, #16]
 800fa68:	f8cd a000 	str.w	sl, [sp]
 800fa6c:	464b      	mov	r3, r9
 800fa6e:	aa03      	add	r2, sp, #12
 800fa70:	4621      	mov	r1, r4
 800fa72:	4640      	mov	r0, r8
 800fa74:	f7ff fee2 	bl	800f83c <_printf_common>
 800fa78:	3001      	adds	r0, #1
 800fa7a:	d14c      	bne.n	800fb16 <_printf_i+0x1fe>
 800fa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa80:	b004      	add	sp, #16
 800fa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa86:	4835      	ldr	r0, [pc, #212]	; (800fb5c <_printf_i+0x244>)
 800fa88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa8c:	6823      	ldr	r3, [r4, #0]
 800fa8e:	680e      	ldr	r6, [r1, #0]
 800fa90:	061f      	lsls	r7, r3, #24
 800fa92:	f856 5b04 	ldr.w	r5, [r6], #4
 800fa96:	600e      	str	r6, [r1, #0]
 800fa98:	d514      	bpl.n	800fac4 <_printf_i+0x1ac>
 800fa9a:	07d9      	lsls	r1, r3, #31
 800fa9c:	bf44      	itt	mi
 800fa9e:	f043 0320 	orrmi.w	r3, r3, #32
 800faa2:	6023      	strmi	r3, [r4, #0]
 800faa4:	b91d      	cbnz	r5, 800faae <_printf_i+0x196>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	f023 0320 	bic.w	r3, r3, #32
 800faac:	6023      	str	r3, [r4, #0]
 800faae:	2310      	movs	r3, #16
 800fab0:	e7b0      	b.n	800fa14 <_printf_i+0xfc>
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	f043 0320 	orr.w	r3, r3, #32
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	2378      	movs	r3, #120	; 0x78
 800fabc:	4828      	ldr	r0, [pc, #160]	; (800fb60 <_printf_i+0x248>)
 800fabe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fac2:	e7e3      	b.n	800fa8c <_printf_i+0x174>
 800fac4:	065e      	lsls	r6, r3, #25
 800fac6:	bf48      	it	mi
 800fac8:	b2ad      	uxthmi	r5, r5
 800faca:	e7e6      	b.n	800fa9a <_printf_i+0x182>
 800facc:	4616      	mov	r6, r2
 800face:	e7bb      	b.n	800fa48 <_printf_i+0x130>
 800fad0:	680b      	ldr	r3, [r1, #0]
 800fad2:	6826      	ldr	r6, [r4, #0]
 800fad4:	6960      	ldr	r0, [r4, #20]
 800fad6:	1d1d      	adds	r5, r3, #4
 800fad8:	600d      	str	r5, [r1, #0]
 800fada:	0635      	lsls	r5, r6, #24
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	d501      	bpl.n	800fae4 <_printf_i+0x1cc>
 800fae0:	6018      	str	r0, [r3, #0]
 800fae2:	e002      	b.n	800faea <_printf_i+0x1d2>
 800fae4:	0671      	lsls	r1, r6, #25
 800fae6:	d5fb      	bpl.n	800fae0 <_printf_i+0x1c8>
 800fae8:	8018      	strh	r0, [r3, #0]
 800faea:	2300      	movs	r3, #0
 800faec:	6123      	str	r3, [r4, #16]
 800faee:	4616      	mov	r6, r2
 800faf0:	e7ba      	b.n	800fa68 <_printf_i+0x150>
 800faf2:	680b      	ldr	r3, [r1, #0]
 800faf4:	1d1a      	adds	r2, r3, #4
 800faf6:	600a      	str	r2, [r1, #0]
 800faf8:	681e      	ldr	r6, [r3, #0]
 800fafa:	6862      	ldr	r2, [r4, #4]
 800fafc:	2100      	movs	r1, #0
 800fafe:	4630      	mov	r0, r6
 800fb00:	f7f0 fbf6 	bl	80002f0 <memchr>
 800fb04:	b108      	cbz	r0, 800fb0a <_printf_i+0x1f2>
 800fb06:	1b80      	subs	r0, r0, r6
 800fb08:	6060      	str	r0, [r4, #4]
 800fb0a:	6863      	ldr	r3, [r4, #4]
 800fb0c:	6123      	str	r3, [r4, #16]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb14:	e7a8      	b.n	800fa68 <_printf_i+0x150>
 800fb16:	6923      	ldr	r3, [r4, #16]
 800fb18:	4632      	mov	r2, r6
 800fb1a:	4649      	mov	r1, r9
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	47d0      	blx	sl
 800fb20:	3001      	adds	r0, #1
 800fb22:	d0ab      	beq.n	800fa7c <_printf_i+0x164>
 800fb24:	6823      	ldr	r3, [r4, #0]
 800fb26:	079b      	lsls	r3, r3, #30
 800fb28:	d413      	bmi.n	800fb52 <_printf_i+0x23a>
 800fb2a:	68e0      	ldr	r0, [r4, #12]
 800fb2c:	9b03      	ldr	r3, [sp, #12]
 800fb2e:	4298      	cmp	r0, r3
 800fb30:	bfb8      	it	lt
 800fb32:	4618      	movlt	r0, r3
 800fb34:	e7a4      	b.n	800fa80 <_printf_i+0x168>
 800fb36:	2301      	movs	r3, #1
 800fb38:	4632      	mov	r2, r6
 800fb3a:	4649      	mov	r1, r9
 800fb3c:	4640      	mov	r0, r8
 800fb3e:	47d0      	blx	sl
 800fb40:	3001      	adds	r0, #1
 800fb42:	d09b      	beq.n	800fa7c <_printf_i+0x164>
 800fb44:	3501      	adds	r5, #1
 800fb46:	68e3      	ldr	r3, [r4, #12]
 800fb48:	9903      	ldr	r1, [sp, #12]
 800fb4a:	1a5b      	subs	r3, r3, r1
 800fb4c:	42ab      	cmp	r3, r5
 800fb4e:	dcf2      	bgt.n	800fb36 <_printf_i+0x21e>
 800fb50:	e7eb      	b.n	800fb2a <_printf_i+0x212>
 800fb52:	2500      	movs	r5, #0
 800fb54:	f104 0619 	add.w	r6, r4, #25
 800fb58:	e7f5      	b.n	800fb46 <_printf_i+0x22e>
 800fb5a:	bf00      	nop
 800fb5c:	0801379e 	.word	0x0801379e
 800fb60:	080137af 	.word	0x080137af

0800fb64 <_puts_r>:
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	460e      	mov	r6, r1
 800fb68:	4605      	mov	r5, r0
 800fb6a:	b118      	cbz	r0, 800fb74 <_puts_r+0x10>
 800fb6c:	6983      	ldr	r3, [r0, #24]
 800fb6e:	b90b      	cbnz	r3, 800fb74 <_puts_r+0x10>
 800fb70:	f001 f856 	bl	8010c20 <__sinit>
 800fb74:	69ab      	ldr	r3, [r5, #24]
 800fb76:	68ac      	ldr	r4, [r5, #8]
 800fb78:	b913      	cbnz	r3, 800fb80 <_puts_r+0x1c>
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	f001 f850 	bl	8010c20 <__sinit>
 800fb80:	4b2c      	ldr	r3, [pc, #176]	; (800fc34 <_puts_r+0xd0>)
 800fb82:	429c      	cmp	r4, r3
 800fb84:	d120      	bne.n	800fbc8 <_puts_r+0x64>
 800fb86:	686c      	ldr	r4, [r5, #4]
 800fb88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb8a:	07db      	lsls	r3, r3, #31
 800fb8c:	d405      	bmi.n	800fb9a <_puts_r+0x36>
 800fb8e:	89a3      	ldrh	r3, [r4, #12]
 800fb90:	0598      	lsls	r0, r3, #22
 800fb92:	d402      	bmi.n	800fb9a <_puts_r+0x36>
 800fb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb96:	f001 f8e6 	bl	8010d66 <__retarget_lock_acquire_recursive>
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	0719      	lsls	r1, r3, #28
 800fb9e:	d51d      	bpl.n	800fbdc <_puts_r+0x78>
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	b1db      	cbz	r3, 800fbdc <_puts_r+0x78>
 800fba4:	3e01      	subs	r6, #1
 800fba6:	68a3      	ldr	r3, [r4, #8]
 800fba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fbac:	3b01      	subs	r3, #1
 800fbae:	60a3      	str	r3, [r4, #8]
 800fbb0:	bb39      	cbnz	r1, 800fc02 <_puts_r+0x9e>
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	da38      	bge.n	800fc28 <_puts_r+0xc4>
 800fbb6:	4622      	mov	r2, r4
 800fbb8:	210a      	movs	r1, #10
 800fbba:	4628      	mov	r0, r5
 800fbbc:	f000 f848 	bl	800fc50 <__swbuf_r>
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d011      	beq.n	800fbe8 <_puts_r+0x84>
 800fbc4:	250a      	movs	r5, #10
 800fbc6:	e011      	b.n	800fbec <_puts_r+0x88>
 800fbc8:	4b1b      	ldr	r3, [pc, #108]	; (800fc38 <_puts_r+0xd4>)
 800fbca:	429c      	cmp	r4, r3
 800fbcc:	d101      	bne.n	800fbd2 <_puts_r+0x6e>
 800fbce:	68ac      	ldr	r4, [r5, #8]
 800fbd0:	e7da      	b.n	800fb88 <_puts_r+0x24>
 800fbd2:	4b1a      	ldr	r3, [pc, #104]	; (800fc3c <_puts_r+0xd8>)
 800fbd4:	429c      	cmp	r4, r3
 800fbd6:	bf08      	it	eq
 800fbd8:	68ec      	ldreq	r4, [r5, #12]
 800fbda:	e7d5      	b.n	800fb88 <_puts_r+0x24>
 800fbdc:	4621      	mov	r1, r4
 800fbde:	4628      	mov	r0, r5
 800fbe0:	f000 f888 	bl	800fcf4 <__swsetup_r>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d0dd      	beq.n	800fba4 <_puts_r+0x40>
 800fbe8:	f04f 35ff 	mov.w	r5, #4294967295
 800fbec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbee:	07da      	lsls	r2, r3, #31
 800fbf0:	d405      	bmi.n	800fbfe <_puts_r+0x9a>
 800fbf2:	89a3      	ldrh	r3, [r4, #12]
 800fbf4:	059b      	lsls	r3, r3, #22
 800fbf6:	d402      	bmi.n	800fbfe <_puts_r+0x9a>
 800fbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbfa:	f001 f8b5 	bl	8010d68 <__retarget_lock_release_recursive>
 800fbfe:	4628      	mov	r0, r5
 800fc00:	bd70      	pop	{r4, r5, r6, pc}
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	da04      	bge.n	800fc10 <_puts_r+0xac>
 800fc06:	69a2      	ldr	r2, [r4, #24]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	dc06      	bgt.n	800fc1a <_puts_r+0xb6>
 800fc0c:	290a      	cmp	r1, #10
 800fc0e:	d004      	beq.n	800fc1a <_puts_r+0xb6>
 800fc10:	6823      	ldr	r3, [r4, #0]
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	6022      	str	r2, [r4, #0]
 800fc16:	7019      	strb	r1, [r3, #0]
 800fc18:	e7c5      	b.n	800fba6 <_puts_r+0x42>
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	f000 f817 	bl	800fc50 <__swbuf_r>
 800fc22:	3001      	adds	r0, #1
 800fc24:	d1bf      	bne.n	800fba6 <_puts_r+0x42>
 800fc26:	e7df      	b.n	800fbe8 <_puts_r+0x84>
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	250a      	movs	r5, #10
 800fc2c:	1c5a      	adds	r2, r3, #1
 800fc2e:	6022      	str	r2, [r4, #0]
 800fc30:	701d      	strb	r5, [r3, #0]
 800fc32:	e7db      	b.n	800fbec <_puts_r+0x88>
 800fc34:	08013874 	.word	0x08013874
 800fc38:	08013894 	.word	0x08013894
 800fc3c:	08013854 	.word	0x08013854

0800fc40 <puts>:
 800fc40:	4b02      	ldr	r3, [pc, #8]	; (800fc4c <puts+0xc>)
 800fc42:	4601      	mov	r1, r0
 800fc44:	6818      	ldr	r0, [r3, #0]
 800fc46:	f7ff bf8d 	b.w	800fb64 <_puts_r>
 800fc4a:	bf00      	nop
 800fc4c:	24000220 	.word	0x24000220

0800fc50 <__swbuf_r>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	460e      	mov	r6, r1
 800fc54:	4614      	mov	r4, r2
 800fc56:	4605      	mov	r5, r0
 800fc58:	b118      	cbz	r0, 800fc62 <__swbuf_r+0x12>
 800fc5a:	6983      	ldr	r3, [r0, #24]
 800fc5c:	b90b      	cbnz	r3, 800fc62 <__swbuf_r+0x12>
 800fc5e:	f000 ffdf 	bl	8010c20 <__sinit>
 800fc62:	4b21      	ldr	r3, [pc, #132]	; (800fce8 <__swbuf_r+0x98>)
 800fc64:	429c      	cmp	r4, r3
 800fc66:	d12b      	bne.n	800fcc0 <__swbuf_r+0x70>
 800fc68:	686c      	ldr	r4, [r5, #4]
 800fc6a:	69a3      	ldr	r3, [r4, #24]
 800fc6c:	60a3      	str	r3, [r4, #8]
 800fc6e:	89a3      	ldrh	r3, [r4, #12]
 800fc70:	071a      	lsls	r2, r3, #28
 800fc72:	d52f      	bpl.n	800fcd4 <__swbuf_r+0x84>
 800fc74:	6923      	ldr	r3, [r4, #16]
 800fc76:	b36b      	cbz	r3, 800fcd4 <__swbuf_r+0x84>
 800fc78:	6923      	ldr	r3, [r4, #16]
 800fc7a:	6820      	ldr	r0, [r4, #0]
 800fc7c:	1ac0      	subs	r0, r0, r3
 800fc7e:	6963      	ldr	r3, [r4, #20]
 800fc80:	b2f6      	uxtb	r6, r6
 800fc82:	4283      	cmp	r3, r0
 800fc84:	4637      	mov	r7, r6
 800fc86:	dc04      	bgt.n	800fc92 <__swbuf_r+0x42>
 800fc88:	4621      	mov	r1, r4
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f000 ff34 	bl	8010af8 <_fflush_r>
 800fc90:	bb30      	cbnz	r0, 800fce0 <__swbuf_r+0x90>
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	3b01      	subs	r3, #1
 800fc96:	60a3      	str	r3, [r4, #8]
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	1c5a      	adds	r2, r3, #1
 800fc9c:	6022      	str	r2, [r4, #0]
 800fc9e:	701e      	strb	r6, [r3, #0]
 800fca0:	6963      	ldr	r3, [r4, #20]
 800fca2:	3001      	adds	r0, #1
 800fca4:	4283      	cmp	r3, r0
 800fca6:	d004      	beq.n	800fcb2 <__swbuf_r+0x62>
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	07db      	lsls	r3, r3, #31
 800fcac:	d506      	bpl.n	800fcbc <__swbuf_r+0x6c>
 800fcae:	2e0a      	cmp	r6, #10
 800fcb0:	d104      	bne.n	800fcbc <__swbuf_r+0x6c>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f000 ff1f 	bl	8010af8 <_fflush_r>
 800fcba:	b988      	cbnz	r0, 800fce0 <__swbuf_r+0x90>
 800fcbc:	4638      	mov	r0, r7
 800fcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcc0:	4b0a      	ldr	r3, [pc, #40]	; (800fcec <__swbuf_r+0x9c>)
 800fcc2:	429c      	cmp	r4, r3
 800fcc4:	d101      	bne.n	800fcca <__swbuf_r+0x7a>
 800fcc6:	68ac      	ldr	r4, [r5, #8]
 800fcc8:	e7cf      	b.n	800fc6a <__swbuf_r+0x1a>
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <__swbuf_r+0xa0>)
 800fccc:	429c      	cmp	r4, r3
 800fcce:	bf08      	it	eq
 800fcd0:	68ec      	ldreq	r4, [r5, #12]
 800fcd2:	e7ca      	b.n	800fc6a <__swbuf_r+0x1a>
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f000 f80c 	bl	800fcf4 <__swsetup_r>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d0cb      	beq.n	800fc78 <__swbuf_r+0x28>
 800fce0:	f04f 37ff 	mov.w	r7, #4294967295
 800fce4:	e7ea      	b.n	800fcbc <__swbuf_r+0x6c>
 800fce6:	bf00      	nop
 800fce8:	08013874 	.word	0x08013874
 800fcec:	08013894 	.word	0x08013894
 800fcf0:	08013854 	.word	0x08013854

0800fcf4 <__swsetup_r>:
 800fcf4:	4b32      	ldr	r3, [pc, #200]	; (800fdc0 <__swsetup_r+0xcc>)
 800fcf6:	b570      	push	{r4, r5, r6, lr}
 800fcf8:	681d      	ldr	r5, [r3, #0]
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	b125      	cbz	r5, 800fd0a <__swsetup_r+0x16>
 800fd00:	69ab      	ldr	r3, [r5, #24]
 800fd02:	b913      	cbnz	r3, 800fd0a <__swsetup_r+0x16>
 800fd04:	4628      	mov	r0, r5
 800fd06:	f000 ff8b 	bl	8010c20 <__sinit>
 800fd0a:	4b2e      	ldr	r3, [pc, #184]	; (800fdc4 <__swsetup_r+0xd0>)
 800fd0c:	429c      	cmp	r4, r3
 800fd0e:	d10f      	bne.n	800fd30 <__swsetup_r+0x3c>
 800fd10:	686c      	ldr	r4, [r5, #4]
 800fd12:	89a3      	ldrh	r3, [r4, #12]
 800fd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd18:	0719      	lsls	r1, r3, #28
 800fd1a:	d42c      	bmi.n	800fd76 <__swsetup_r+0x82>
 800fd1c:	06dd      	lsls	r5, r3, #27
 800fd1e:	d411      	bmi.n	800fd44 <__swsetup_r+0x50>
 800fd20:	2309      	movs	r3, #9
 800fd22:	6033      	str	r3, [r6, #0]
 800fd24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd28:	81a3      	strh	r3, [r4, #12]
 800fd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd2e:	e03e      	b.n	800fdae <__swsetup_r+0xba>
 800fd30:	4b25      	ldr	r3, [pc, #148]	; (800fdc8 <__swsetup_r+0xd4>)
 800fd32:	429c      	cmp	r4, r3
 800fd34:	d101      	bne.n	800fd3a <__swsetup_r+0x46>
 800fd36:	68ac      	ldr	r4, [r5, #8]
 800fd38:	e7eb      	b.n	800fd12 <__swsetup_r+0x1e>
 800fd3a:	4b24      	ldr	r3, [pc, #144]	; (800fdcc <__swsetup_r+0xd8>)
 800fd3c:	429c      	cmp	r4, r3
 800fd3e:	bf08      	it	eq
 800fd40:	68ec      	ldreq	r4, [r5, #12]
 800fd42:	e7e6      	b.n	800fd12 <__swsetup_r+0x1e>
 800fd44:	0758      	lsls	r0, r3, #29
 800fd46:	d512      	bpl.n	800fd6e <__swsetup_r+0x7a>
 800fd48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd4a:	b141      	cbz	r1, 800fd5e <__swsetup_r+0x6a>
 800fd4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd50:	4299      	cmp	r1, r3
 800fd52:	d002      	beq.n	800fd5a <__swsetup_r+0x66>
 800fd54:	4630      	mov	r0, r6
 800fd56:	f001 fc11 	bl	801157c <_free_r>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	6363      	str	r3, [r4, #52]	; 0x34
 800fd5e:	89a3      	ldrh	r3, [r4, #12]
 800fd60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	2300      	movs	r3, #0
 800fd68:	6063      	str	r3, [r4, #4]
 800fd6a:	6923      	ldr	r3, [r4, #16]
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	89a3      	ldrh	r3, [r4, #12]
 800fd70:	f043 0308 	orr.w	r3, r3, #8
 800fd74:	81a3      	strh	r3, [r4, #12]
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	b94b      	cbnz	r3, 800fd8e <__swsetup_r+0x9a>
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd84:	d003      	beq.n	800fd8e <__swsetup_r+0x9a>
 800fd86:	4621      	mov	r1, r4
 800fd88:	4630      	mov	r0, r6
 800fd8a:	f001 f813 	bl	8010db4 <__smakebuf_r>
 800fd8e:	89a0      	ldrh	r0, [r4, #12]
 800fd90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd94:	f010 0301 	ands.w	r3, r0, #1
 800fd98:	d00a      	beq.n	800fdb0 <__swsetup_r+0xbc>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	60a3      	str	r3, [r4, #8]
 800fd9e:	6963      	ldr	r3, [r4, #20]
 800fda0:	425b      	negs	r3, r3
 800fda2:	61a3      	str	r3, [r4, #24]
 800fda4:	6923      	ldr	r3, [r4, #16]
 800fda6:	b943      	cbnz	r3, 800fdba <__swsetup_r+0xc6>
 800fda8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdac:	d1ba      	bne.n	800fd24 <__swsetup_r+0x30>
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	0781      	lsls	r1, r0, #30
 800fdb2:	bf58      	it	pl
 800fdb4:	6963      	ldrpl	r3, [r4, #20]
 800fdb6:	60a3      	str	r3, [r4, #8]
 800fdb8:	e7f4      	b.n	800fda4 <__swsetup_r+0xb0>
 800fdba:	2000      	movs	r0, #0
 800fdbc:	e7f7      	b.n	800fdae <__swsetup_r+0xba>
 800fdbe:	bf00      	nop
 800fdc0:	24000220 	.word	0x24000220
 800fdc4:	08013874 	.word	0x08013874
 800fdc8:	08013894 	.word	0x08013894
 800fdcc:	08013854 	.word	0x08013854

0800fdd0 <quorem>:
 800fdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd4:	6903      	ldr	r3, [r0, #16]
 800fdd6:	690c      	ldr	r4, [r1, #16]
 800fdd8:	42a3      	cmp	r3, r4
 800fdda:	4607      	mov	r7, r0
 800fddc:	f2c0 8081 	blt.w	800fee2 <quorem+0x112>
 800fde0:	3c01      	subs	r4, #1
 800fde2:	f101 0814 	add.w	r8, r1, #20
 800fde6:	f100 0514 	add.w	r5, r0, #20
 800fdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdee:	9301      	str	r3, [sp, #4]
 800fdf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe04:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe08:	d331      	bcc.n	800fe6e <quorem+0x9e>
 800fe0a:	f04f 0e00 	mov.w	lr, #0
 800fe0e:	4640      	mov	r0, r8
 800fe10:	46ac      	mov	ip, r5
 800fe12:	46f2      	mov	sl, lr
 800fe14:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe18:	b293      	uxth	r3, r2
 800fe1a:	fb06 e303 	mla	r3, r6, r3, lr
 800fe1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	ebaa 0303 	sub.w	r3, sl, r3
 800fe28:	0c12      	lsrs	r2, r2, #16
 800fe2a:	f8dc a000 	ldr.w	sl, [ip]
 800fe2e:	fb06 e202 	mla	r2, r6, r2, lr
 800fe32:	fa13 f38a 	uxtah	r3, r3, sl
 800fe36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe3a:	fa1f fa82 	uxth.w	sl, r2
 800fe3e:	f8dc 2000 	ldr.w	r2, [ip]
 800fe42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fe46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe50:	4581      	cmp	r9, r0
 800fe52:	f84c 3b04 	str.w	r3, [ip], #4
 800fe56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe5a:	d2db      	bcs.n	800fe14 <quorem+0x44>
 800fe5c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe60:	b92b      	cbnz	r3, 800fe6e <quorem+0x9e>
 800fe62:	9b01      	ldr	r3, [sp, #4]
 800fe64:	3b04      	subs	r3, #4
 800fe66:	429d      	cmp	r5, r3
 800fe68:	461a      	mov	r2, r3
 800fe6a:	d32e      	bcc.n	800feca <quorem+0xfa>
 800fe6c:	613c      	str	r4, [r7, #16]
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f001 fa74 	bl	801135c <__mcmp>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	db24      	blt.n	800fec2 <quorem+0xf2>
 800fe78:	3601      	adds	r6, #1
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f04f 0c00 	mov.w	ip, #0
 800fe80:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe84:	f8d0 e000 	ldr.w	lr, [r0]
 800fe88:	b293      	uxth	r3, r2
 800fe8a:	ebac 0303 	sub.w	r3, ip, r3
 800fe8e:	0c12      	lsrs	r2, r2, #16
 800fe90:	fa13 f38e 	uxtah	r3, r3, lr
 800fe94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe9c:	b29b      	uxth	r3, r3
 800fe9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fea2:	45c1      	cmp	r9, r8
 800fea4:	f840 3b04 	str.w	r3, [r0], #4
 800fea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800feac:	d2e8      	bcs.n	800fe80 <quorem+0xb0>
 800feae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800feb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800feb6:	b922      	cbnz	r2, 800fec2 <quorem+0xf2>
 800feb8:	3b04      	subs	r3, #4
 800feba:	429d      	cmp	r5, r3
 800febc:	461a      	mov	r2, r3
 800febe:	d30a      	bcc.n	800fed6 <quorem+0x106>
 800fec0:	613c      	str	r4, [r7, #16]
 800fec2:	4630      	mov	r0, r6
 800fec4:	b003      	add	sp, #12
 800fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feca:	6812      	ldr	r2, [r2, #0]
 800fecc:	3b04      	subs	r3, #4
 800fece:	2a00      	cmp	r2, #0
 800fed0:	d1cc      	bne.n	800fe6c <quorem+0x9c>
 800fed2:	3c01      	subs	r4, #1
 800fed4:	e7c7      	b.n	800fe66 <quorem+0x96>
 800fed6:	6812      	ldr	r2, [r2, #0]
 800fed8:	3b04      	subs	r3, #4
 800feda:	2a00      	cmp	r2, #0
 800fedc:	d1f0      	bne.n	800fec0 <quorem+0xf0>
 800fede:	3c01      	subs	r4, #1
 800fee0:	e7eb      	b.n	800feba <quorem+0xea>
 800fee2:	2000      	movs	r0, #0
 800fee4:	e7ee      	b.n	800fec4 <quorem+0xf4>
	...

0800fee8 <_dtoa_r>:
 800fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	ec59 8b10 	vmov	r8, r9, d0
 800fef0:	b095      	sub	sp, #84	; 0x54
 800fef2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fef4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800fef6:	9107      	str	r1, [sp, #28]
 800fef8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fefc:	4606      	mov	r6, r0
 800fefe:	9209      	str	r2, [sp, #36]	; 0x24
 800ff00:	9310      	str	r3, [sp, #64]	; 0x40
 800ff02:	b975      	cbnz	r5, 800ff22 <_dtoa_r+0x3a>
 800ff04:	2010      	movs	r0, #16
 800ff06:	f000 ff95 	bl	8010e34 <malloc>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	6270      	str	r0, [r6, #36]	; 0x24
 800ff0e:	b920      	cbnz	r0, 800ff1a <_dtoa_r+0x32>
 800ff10:	4bab      	ldr	r3, [pc, #684]	; (80101c0 <_dtoa_r+0x2d8>)
 800ff12:	21ea      	movs	r1, #234	; 0xea
 800ff14:	48ab      	ldr	r0, [pc, #684]	; (80101c4 <_dtoa_r+0x2dc>)
 800ff16:	f001 fc41 	bl	801179c <__assert_func>
 800ff1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff1e:	6005      	str	r5, [r0, #0]
 800ff20:	60c5      	str	r5, [r0, #12]
 800ff22:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff24:	6819      	ldr	r1, [r3, #0]
 800ff26:	b151      	cbz	r1, 800ff3e <_dtoa_r+0x56>
 800ff28:	685a      	ldr	r2, [r3, #4]
 800ff2a:	604a      	str	r2, [r1, #4]
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	4093      	lsls	r3, r2
 800ff30:	608b      	str	r3, [r1, #8]
 800ff32:	4630      	mov	r0, r6
 800ff34:	f000 ffd4 	bl	8010ee0 <_Bfree>
 800ff38:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	601a      	str	r2, [r3, #0]
 800ff3e:	f1b9 0300 	subs.w	r3, r9, #0
 800ff42:	bfbb      	ittet	lt
 800ff44:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ff48:	9303      	strlt	r3, [sp, #12]
 800ff4a:	2300      	movge	r3, #0
 800ff4c:	2201      	movlt	r2, #1
 800ff4e:	bfac      	ite	ge
 800ff50:	6023      	strge	r3, [r4, #0]
 800ff52:	6022      	strlt	r2, [r4, #0]
 800ff54:	4b9c      	ldr	r3, [pc, #624]	; (80101c8 <_dtoa_r+0x2e0>)
 800ff56:	9c03      	ldr	r4, [sp, #12]
 800ff58:	43a3      	bics	r3, r4
 800ff5a:	d11a      	bne.n	800ff92 <_dtoa_r+0xaa>
 800ff5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff5e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff62:	6013      	str	r3, [r2, #0]
 800ff64:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ff68:	ea53 0308 	orrs.w	r3, r3, r8
 800ff6c:	f000 8512 	beq.w	8010994 <_dtoa_r+0xaac>
 800ff70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ff72:	b953      	cbnz	r3, 800ff8a <_dtoa_r+0xa2>
 800ff74:	4b95      	ldr	r3, [pc, #596]	; (80101cc <_dtoa_r+0x2e4>)
 800ff76:	e01f      	b.n	800ffb8 <_dtoa_r+0xd0>
 800ff78:	4b95      	ldr	r3, [pc, #596]	; (80101d0 <_dtoa_r+0x2e8>)
 800ff7a:	9300      	str	r3, [sp, #0]
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	9800      	ldr	r0, [sp, #0]
 800ff84:	b015      	add	sp, #84	; 0x54
 800ff86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8a:	4b90      	ldr	r3, [pc, #576]	; (80101cc <_dtoa_r+0x2e4>)
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	3303      	adds	r3, #3
 800ff90:	e7f5      	b.n	800ff7e <_dtoa_r+0x96>
 800ff92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ffa2:	d10b      	bne.n	800ffbc <_dtoa_r+0xd4>
 800ffa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	6013      	str	r3, [r2, #0]
 800ffaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 84ee 	beq.w	801098e <_dtoa_r+0xaa6>
 800ffb2:	4888      	ldr	r0, [pc, #544]	; (80101d4 <_dtoa_r+0x2ec>)
 800ffb4:	6018      	str	r0, [r3, #0]
 800ffb6:	1e43      	subs	r3, r0, #1
 800ffb8:	9300      	str	r3, [sp, #0]
 800ffba:	e7e2      	b.n	800ff82 <_dtoa_r+0x9a>
 800ffbc:	a913      	add	r1, sp, #76	; 0x4c
 800ffbe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ffc2:	aa12      	add	r2, sp, #72	; 0x48
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f001 fa6d 	bl	80114a4 <__d2b>
 800ffca:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ffce:	4605      	mov	r5, r0
 800ffd0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ffd2:	2900      	cmp	r1, #0
 800ffd4:	d047      	beq.n	8010066 <_dtoa_r+0x17e>
 800ffd6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ffd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ffdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ffe0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ffe4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ffe8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ffec:	2400      	movs	r4, #0
 800ffee:	ec43 2b16 	vmov	d6, r2, r3
 800fff2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800fff6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80101a8 <_dtoa_r+0x2c0>
 800fffa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fffe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80101b0 <_dtoa_r+0x2c8>
 8010002:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010006:	eeb0 7b46 	vmov.f64	d7, d6
 801000a:	ee06 1a90 	vmov	s13, r1
 801000e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010012:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80101b8 <_dtoa_r+0x2d0>
 8010016:	eea5 7b06 	vfma.f64	d7, d5, d6
 801001a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801001e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010026:	ee16 ba90 	vmov	fp, s13
 801002a:	9411      	str	r4, [sp, #68]	; 0x44
 801002c:	d508      	bpl.n	8010040 <_dtoa_r+0x158>
 801002e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010032:	eeb4 6b47 	vcmp.f64	d6, d7
 8010036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003a:	bf18      	it	ne
 801003c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010040:	f1bb 0f16 	cmp.w	fp, #22
 8010044:	d832      	bhi.n	80100ac <_dtoa_r+0x1c4>
 8010046:	4b64      	ldr	r3, [pc, #400]	; (80101d8 <_dtoa_r+0x2f0>)
 8010048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801004c:	ed93 7b00 	vldr	d7, [r3]
 8010050:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010054:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005c:	d501      	bpl.n	8010062 <_dtoa_r+0x17a>
 801005e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010062:	2300      	movs	r3, #0
 8010064:	e023      	b.n	80100ae <_dtoa_r+0x1c6>
 8010066:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010068:	4401      	add	r1, r0
 801006a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801006e:	2b20      	cmp	r3, #32
 8010070:	bfc3      	ittte	gt
 8010072:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010076:	fa04 f303 	lslgt.w	r3, r4, r3
 801007a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801007e:	f1c3 0320 	rsble	r3, r3, #32
 8010082:	bfc6      	itte	gt
 8010084:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010088:	ea43 0308 	orrgt.w	r3, r3, r8
 801008c:	fa08 f303 	lslle.w	r3, r8, r3
 8010090:	ee07 3a90 	vmov	s15, r3
 8010094:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010098:	3901      	subs	r1, #1
 801009a:	ed8d 7b00 	vstr	d7, [sp]
 801009e:	9c01      	ldr	r4, [sp, #4]
 80100a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80100a8:	2401      	movs	r4, #1
 80100aa:	e7a0      	b.n	800ffee <_dtoa_r+0x106>
 80100ac:	2301      	movs	r3, #1
 80100ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80100b0:	1a43      	subs	r3, r0, r1
 80100b2:	1e5a      	subs	r2, r3, #1
 80100b4:	bf45      	ittet	mi
 80100b6:	f1c3 0301 	rsbmi	r3, r3, #1
 80100ba:	9305      	strmi	r3, [sp, #20]
 80100bc:	2300      	movpl	r3, #0
 80100be:	2300      	movmi	r3, #0
 80100c0:	9206      	str	r2, [sp, #24]
 80100c2:	bf54      	ite	pl
 80100c4:	9305      	strpl	r3, [sp, #20]
 80100c6:	9306      	strmi	r3, [sp, #24]
 80100c8:	f1bb 0f00 	cmp.w	fp, #0
 80100cc:	db18      	blt.n	8010100 <_dtoa_r+0x218>
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80100d4:	445b      	add	r3, fp
 80100d6:	9306      	str	r3, [sp, #24]
 80100d8:	2300      	movs	r3, #0
 80100da:	9a07      	ldr	r2, [sp, #28]
 80100dc:	2a09      	cmp	r2, #9
 80100de:	d849      	bhi.n	8010174 <_dtoa_r+0x28c>
 80100e0:	2a05      	cmp	r2, #5
 80100e2:	bfc4      	itt	gt
 80100e4:	3a04      	subgt	r2, #4
 80100e6:	9207      	strgt	r2, [sp, #28]
 80100e8:	9a07      	ldr	r2, [sp, #28]
 80100ea:	f1a2 0202 	sub.w	r2, r2, #2
 80100ee:	bfcc      	ite	gt
 80100f0:	2400      	movgt	r4, #0
 80100f2:	2401      	movle	r4, #1
 80100f4:	2a03      	cmp	r2, #3
 80100f6:	d848      	bhi.n	801018a <_dtoa_r+0x2a2>
 80100f8:	e8df f002 	tbb	[pc, r2]
 80100fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8010100:	9b05      	ldr	r3, [sp, #20]
 8010102:	2200      	movs	r2, #0
 8010104:	eba3 030b 	sub.w	r3, r3, fp
 8010108:	9305      	str	r3, [sp, #20]
 801010a:	920e      	str	r2, [sp, #56]	; 0x38
 801010c:	f1cb 0300 	rsb	r3, fp, #0
 8010110:	e7e3      	b.n	80100da <_dtoa_r+0x1f2>
 8010112:	2200      	movs	r2, #0
 8010114:	9208      	str	r2, [sp, #32]
 8010116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010118:	2a00      	cmp	r2, #0
 801011a:	dc39      	bgt.n	8010190 <_dtoa_r+0x2a8>
 801011c:	f04f 0a01 	mov.w	sl, #1
 8010120:	46d1      	mov	r9, sl
 8010122:	4652      	mov	r2, sl
 8010124:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010128:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801012a:	2100      	movs	r1, #0
 801012c:	6079      	str	r1, [r7, #4]
 801012e:	2004      	movs	r0, #4
 8010130:	f100 0c14 	add.w	ip, r0, #20
 8010134:	4594      	cmp	ip, r2
 8010136:	6879      	ldr	r1, [r7, #4]
 8010138:	d92f      	bls.n	801019a <_dtoa_r+0x2b2>
 801013a:	4630      	mov	r0, r6
 801013c:	930c      	str	r3, [sp, #48]	; 0x30
 801013e:	f000 fe8f 	bl	8010e60 <_Balloc>
 8010142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010144:	9000      	str	r0, [sp, #0]
 8010146:	4602      	mov	r2, r0
 8010148:	2800      	cmp	r0, #0
 801014a:	d149      	bne.n	80101e0 <_dtoa_r+0x2f8>
 801014c:	4b23      	ldr	r3, [pc, #140]	; (80101dc <_dtoa_r+0x2f4>)
 801014e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010152:	e6df      	b.n	800ff14 <_dtoa_r+0x2c>
 8010154:	2201      	movs	r2, #1
 8010156:	e7dd      	b.n	8010114 <_dtoa_r+0x22c>
 8010158:	2200      	movs	r2, #0
 801015a:	9208      	str	r2, [sp, #32]
 801015c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801015e:	eb0b 0a02 	add.w	sl, fp, r2
 8010162:	f10a 0901 	add.w	r9, sl, #1
 8010166:	464a      	mov	r2, r9
 8010168:	2a01      	cmp	r2, #1
 801016a:	bfb8      	it	lt
 801016c:	2201      	movlt	r2, #1
 801016e:	e7db      	b.n	8010128 <_dtoa_r+0x240>
 8010170:	2201      	movs	r2, #1
 8010172:	e7f2      	b.n	801015a <_dtoa_r+0x272>
 8010174:	2401      	movs	r4, #1
 8010176:	2200      	movs	r2, #0
 8010178:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801017c:	f04f 3aff 	mov.w	sl, #4294967295
 8010180:	2100      	movs	r1, #0
 8010182:	46d1      	mov	r9, sl
 8010184:	2212      	movs	r2, #18
 8010186:	9109      	str	r1, [sp, #36]	; 0x24
 8010188:	e7ce      	b.n	8010128 <_dtoa_r+0x240>
 801018a:	2201      	movs	r2, #1
 801018c:	9208      	str	r2, [sp, #32]
 801018e:	e7f5      	b.n	801017c <_dtoa_r+0x294>
 8010190:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010194:	46d1      	mov	r9, sl
 8010196:	4652      	mov	r2, sl
 8010198:	e7c6      	b.n	8010128 <_dtoa_r+0x240>
 801019a:	3101      	adds	r1, #1
 801019c:	6079      	str	r1, [r7, #4]
 801019e:	0040      	lsls	r0, r0, #1
 80101a0:	e7c6      	b.n	8010130 <_dtoa_r+0x248>
 80101a2:	bf00      	nop
 80101a4:	f3af 8000 	nop.w
 80101a8:	636f4361 	.word	0x636f4361
 80101ac:	3fd287a7 	.word	0x3fd287a7
 80101b0:	8b60c8b3 	.word	0x8b60c8b3
 80101b4:	3fc68a28 	.word	0x3fc68a28
 80101b8:	509f79fb 	.word	0x509f79fb
 80101bc:	3fd34413 	.word	0x3fd34413
 80101c0:	080137cd 	.word	0x080137cd
 80101c4:	080137e4 	.word	0x080137e4
 80101c8:	7ff00000 	.word	0x7ff00000
 80101cc:	080137c9 	.word	0x080137c9
 80101d0:	080137c0 	.word	0x080137c0
 80101d4:	0801379d 	.word	0x0801379d
 80101d8:	08013940 	.word	0x08013940
 80101dc:	08013843 	.word	0x08013843
 80101e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80101e2:	9900      	ldr	r1, [sp, #0]
 80101e4:	6011      	str	r1, [r2, #0]
 80101e6:	f1b9 0f0e 	cmp.w	r9, #14
 80101ea:	d872      	bhi.n	80102d2 <_dtoa_r+0x3ea>
 80101ec:	2c00      	cmp	r4, #0
 80101ee:	d070      	beq.n	80102d2 <_dtoa_r+0x3ea>
 80101f0:	f1bb 0f00 	cmp.w	fp, #0
 80101f4:	f340 80a6 	ble.w	8010344 <_dtoa_r+0x45c>
 80101f8:	49ca      	ldr	r1, [pc, #808]	; (8010524 <_dtoa_r+0x63c>)
 80101fa:	f00b 020f 	and.w	r2, fp, #15
 80101fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010202:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010206:	ed92 7b00 	vldr	d7, [r2]
 801020a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801020e:	f000 808d 	beq.w	801032c <_dtoa_r+0x444>
 8010212:	4ac5      	ldr	r2, [pc, #788]	; (8010528 <_dtoa_r+0x640>)
 8010214:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010218:	ed92 6b08 	vldr	d6, [r2, #32]
 801021c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010220:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010224:	f001 010f 	and.w	r1, r1, #15
 8010228:	2203      	movs	r2, #3
 801022a:	48bf      	ldr	r0, [pc, #764]	; (8010528 <_dtoa_r+0x640>)
 801022c:	2900      	cmp	r1, #0
 801022e:	d17f      	bne.n	8010330 <_dtoa_r+0x448>
 8010230:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010234:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010238:	ed8d 7b02 	vstr	d7, [sp, #8]
 801023c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801023e:	2900      	cmp	r1, #0
 8010240:	f000 80b2 	beq.w	80103a8 <_dtoa_r+0x4c0>
 8010244:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010248:	ed9d 7b02 	vldr	d7, [sp, #8]
 801024c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010254:	f140 80a8 	bpl.w	80103a8 <_dtoa_r+0x4c0>
 8010258:	f1b9 0f00 	cmp.w	r9, #0
 801025c:	f000 80a4 	beq.w	80103a8 <_dtoa_r+0x4c0>
 8010260:	f1ba 0f00 	cmp.w	sl, #0
 8010264:	dd31      	ble.n	80102ca <_dtoa_r+0x3e2>
 8010266:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801026a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801026e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010272:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010276:	3201      	adds	r2, #1
 8010278:	4650      	mov	r0, sl
 801027a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801027e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010282:	ee07 2a90 	vmov	s15, r2
 8010286:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801028a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801028e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010292:	9c03      	ldr	r4, [sp, #12]
 8010294:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010298:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801029c:	2800      	cmp	r0, #0
 801029e:	f040 8086 	bne.w	80103ae <_dtoa_r+0x4c6>
 80102a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80102a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80102aa:	ec42 1b17 	vmov	d7, r1, r2
 80102ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b6:	f300 8272 	bgt.w	801079e <_dtoa_r+0x8b6>
 80102ba:	eeb1 7b47 	vneg.f64	d7, d7
 80102be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c6:	f100 8267 	bmi.w	8010798 <_dtoa_r+0x8b0>
 80102ca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80102ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80102d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80102d4:	2a00      	cmp	r2, #0
 80102d6:	f2c0 8129 	blt.w	801052c <_dtoa_r+0x644>
 80102da:	f1bb 0f0e 	cmp.w	fp, #14
 80102de:	f300 8125 	bgt.w	801052c <_dtoa_r+0x644>
 80102e2:	4b90      	ldr	r3, [pc, #576]	; (8010524 <_dtoa_r+0x63c>)
 80102e4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80102e8:	ed93 6b00 	vldr	d6, [r3]
 80102ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f280 80c3 	bge.w	801047a <_dtoa_r+0x592>
 80102f4:	f1b9 0f00 	cmp.w	r9, #0
 80102f8:	f300 80bf 	bgt.w	801047a <_dtoa_r+0x592>
 80102fc:	f040 824c 	bne.w	8010798 <_dtoa_r+0x8b0>
 8010300:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010304:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010308:	ed9d 7b02 	vldr	d7, [sp, #8]
 801030c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010314:	464c      	mov	r4, r9
 8010316:	464f      	mov	r7, r9
 8010318:	f280 8222 	bge.w	8010760 <_dtoa_r+0x878>
 801031c:	f8dd 8000 	ldr.w	r8, [sp]
 8010320:	2331      	movs	r3, #49	; 0x31
 8010322:	f808 3b01 	strb.w	r3, [r8], #1
 8010326:	f10b 0b01 	add.w	fp, fp, #1
 801032a:	e21e      	b.n	801076a <_dtoa_r+0x882>
 801032c:	2202      	movs	r2, #2
 801032e:	e77c      	b.n	801022a <_dtoa_r+0x342>
 8010330:	07cc      	lsls	r4, r1, #31
 8010332:	d504      	bpl.n	801033e <_dtoa_r+0x456>
 8010334:	ed90 6b00 	vldr	d6, [r0]
 8010338:	3201      	adds	r2, #1
 801033a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801033e:	1049      	asrs	r1, r1, #1
 8010340:	3008      	adds	r0, #8
 8010342:	e773      	b.n	801022c <_dtoa_r+0x344>
 8010344:	d02e      	beq.n	80103a4 <_dtoa_r+0x4bc>
 8010346:	f1cb 0100 	rsb	r1, fp, #0
 801034a:	4a76      	ldr	r2, [pc, #472]	; (8010524 <_dtoa_r+0x63c>)
 801034c:	f001 000f 	and.w	r0, r1, #15
 8010350:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010354:	ed92 7b00 	vldr	d7, [r2]
 8010358:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801035c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010360:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010364:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010368:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801036c:	486e      	ldr	r0, [pc, #440]	; (8010528 <_dtoa_r+0x640>)
 801036e:	1109      	asrs	r1, r1, #4
 8010370:	2400      	movs	r4, #0
 8010372:	2202      	movs	r2, #2
 8010374:	b939      	cbnz	r1, 8010386 <_dtoa_r+0x49e>
 8010376:	2c00      	cmp	r4, #0
 8010378:	f43f af60 	beq.w	801023c <_dtoa_r+0x354>
 801037c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010384:	e75a      	b.n	801023c <_dtoa_r+0x354>
 8010386:	07cf      	lsls	r7, r1, #31
 8010388:	d509      	bpl.n	801039e <_dtoa_r+0x4b6>
 801038a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801038e:	ed90 7b00 	vldr	d7, [r0]
 8010392:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010396:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801039a:	3201      	adds	r2, #1
 801039c:	2401      	movs	r4, #1
 801039e:	1049      	asrs	r1, r1, #1
 80103a0:	3008      	adds	r0, #8
 80103a2:	e7e7      	b.n	8010374 <_dtoa_r+0x48c>
 80103a4:	2202      	movs	r2, #2
 80103a6:	e749      	b.n	801023c <_dtoa_r+0x354>
 80103a8:	465f      	mov	r7, fp
 80103aa:	4648      	mov	r0, r9
 80103ac:	e765      	b.n	801027a <_dtoa_r+0x392>
 80103ae:	ec42 1b17 	vmov	d7, r1, r2
 80103b2:	4a5c      	ldr	r2, [pc, #368]	; (8010524 <_dtoa_r+0x63c>)
 80103b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80103b8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80103bc:	9a00      	ldr	r2, [sp, #0]
 80103be:	1814      	adds	r4, r2, r0
 80103c0:	9a08      	ldr	r2, [sp, #32]
 80103c2:	b352      	cbz	r2, 801041a <_dtoa_r+0x532>
 80103c4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80103c8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80103cc:	f8dd 8000 	ldr.w	r8, [sp]
 80103d0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80103d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80103d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80103dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80103e0:	ee14 2a90 	vmov	r2, s9
 80103e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80103e8:	3230      	adds	r2, #48	; 0x30
 80103ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 80103ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	f808 2b01 	strb.w	r2, [r8], #1
 80103fa:	d439      	bmi.n	8010470 <_dtoa_r+0x588>
 80103fc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010400:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010408:	d472      	bmi.n	80104f0 <_dtoa_r+0x608>
 801040a:	45a0      	cmp	r8, r4
 801040c:	f43f af5d 	beq.w	80102ca <_dtoa_r+0x3e2>
 8010410:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010414:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010418:	e7e0      	b.n	80103dc <_dtoa_r+0x4f4>
 801041a:	f8dd 8000 	ldr.w	r8, [sp]
 801041e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010422:	4621      	mov	r1, r4
 8010424:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010428:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801042c:	ee14 2a90 	vmov	r2, s9
 8010430:	3230      	adds	r2, #48	; 0x30
 8010432:	f808 2b01 	strb.w	r2, [r8], #1
 8010436:	45a0      	cmp	r8, r4
 8010438:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801043c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010440:	d118      	bne.n	8010474 <_dtoa_r+0x58c>
 8010442:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010446:	ee37 4b05 	vadd.f64	d4, d7, d5
 801044a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010452:	dc4d      	bgt.n	80104f0 <_dtoa_r+0x608>
 8010454:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010458:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010460:	f57f af33 	bpl.w	80102ca <_dtoa_r+0x3e2>
 8010464:	4688      	mov	r8, r1
 8010466:	3901      	subs	r1, #1
 8010468:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801046c:	2b30      	cmp	r3, #48	; 0x30
 801046e:	d0f9      	beq.n	8010464 <_dtoa_r+0x57c>
 8010470:	46bb      	mov	fp, r7
 8010472:	e02a      	b.n	80104ca <_dtoa_r+0x5e2>
 8010474:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010478:	e7d6      	b.n	8010428 <_dtoa_r+0x540>
 801047a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801047e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010482:	f8dd 8000 	ldr.w	r8, [sp]
 8010486:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801048a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801048e:	ee15 3a10 	vmov	r3, s10
 8010492:	3330      	adds	r3, #48	; 0x30
 8010494:	f808 3b01 	strb.w	r3, [r8], #1
 8010498:	9b00      	ldr	r3, [sp, #0]
 801049a:	eba8 0303 	sub.w	r3, r8, r3
 801049e:	4599      	cmp	r9, r3
 80104a0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80104a4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80104a8:	d133      	bne.n	8010512 <_dtoa_r+0x62a>
 80104aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80104ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80104b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b6:	dc1a      	bgt.n	80104ee <_dtoa_r+0x606>
 80104b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80104bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c0:	d103      	bne.n	80104ca <_dtoa_r+0x5e2>
 80104c2:	ee15 3a10 	vmov	r3, s10
 80104c6:	07d9      	lsls	r1, r3, #31
 80104c8:	d411      	bmi.n	80104ee <_dtoa_r+0x606>
 80104ca:	4629      	mov	r1, r5
 80104cc:	4630      	mov	r0, r6
 80104ce:	f000 fd07 	bl	8010ee0 <_Bfree>
 80104d2:	2300      	movs	r3, #0
 80104d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80104d6:	f888 3000 	strb.w	r3, [r8]
 80104da:	f10b 0301 	add.w	r3, fp, #1
 80104de:	6013      	str	r3, [r2, #0]
 80104e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f43f ad4d 	beq.w	800ff82 <_dtoa_r+0x9a>
 80104e8:	f8c3 8000 	str.w	r8, [r3]
 80104ec:	e549      	b.n	800ff82 <_dtoa_r+0x9a>
 80104ee:	465f      	mov	r7, fp
 80104f0:	4643      	mov	r3, r8
 80104f2:	4698      	mov	r8, r3
 80104f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104f8:	2a39      	cmp	r2, #57	; 0x39
 80104fa:	d106      	bne.n	801050a <_dtoa_r+0x622>
 80104fc:	9a00      	ldr	r2, [sp, #0]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d1f7      	bne.n	80104f2 <_dtoa_r+0x60a>
 8010502:	9900      	ldr	r1, [sp, #0]
 8010504:	2230      	movs	r2, #48	; 0x30
 8010506:	3701      	adds	r7, #1
 8010508:	700a      	strb	r2, [r1, #0]
 801050a:	781a      	ldrb	r2, [r3, #0]
 801050c:	3201      	adds	r2, #1
 801050e:	701a      	strb	r2, [r3, #0]
 8010510:	e7ae      	b.n	8010470 <_dtoa_r+0x588>
 8010512:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010516:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801051e:	d1b2      	bne.n	8010486 <_dtoa_r+0x59e>
 8010520:	e7d3      	b.n	80104ca <_dtoa_r+0x5e2>
 8010522:	bf00      	nop
 8010524:	08013940 	.word	0x08013940
 8010528:	08013918 	.word	0x08013918
 801052c:	9908      	ldr	r1, [sp, #32]
 801052e:	2900      	cmp	r1, #0
 8010530:	f000 80d1 	beq.w	80106d6 <_dtoa_r+0x7ee>
 8010534:	9907      	ldr	r1, [sp, #28]
 8010536:	2901      	cmp	r1, #1
 8010538:	f300 80b4 	bgt.w	80106a4 <_dtoa_r+0x7bc>
 801053c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801053e:	2900      	cmp	r1, #0
 8010540:	f000 80ac 	beq.w	801069c <_dtoa_r+0x7b4>
 8010544:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010548:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801054c:	461c      	mov	r4, r3
 801054e:	930a      	str	r3, [sp, #40]	; 0x28
 8010550:	9b05      	ldr	r3, [sp, #20]
 8010552:	4413      	add	r3, r2
 8010554:	9305      	str	r3, [sp, #20]
 8010556:	9b06      	ldr	r3, [sp, #24]
 8010558:	2101      	movs	r1, #1
 801055a:	4413      	add	r3, r2
 801055c:	4630      	mov	r0, r6
 801055e:	9306      	str	r3, [sp, #24]
 8010560:	f000 fd7a 	bl	8011058 <__i2b>
 8010564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010566:	4607      	mov	r7, r0
 8010568:	f1b8 0f00 	cmp.w	r8, #0
 801056c:	dd0d      	ble.n	801058a <_dtoa_r+0x6a2>
 801056e:	9a06      	ldr	r2, [sp, #24]
 8010570:	2a00      	cmp	r2, #0
 8010572:	dd0a      	ble.n	801058a <_dtoa_r+0x6a2>
 8010574:	4542      	cmp	r2, r8
 8010576:	9905      	ldr	r1, [sp, #20]
 8010578:	bfa8      	it	ge
 801057a:	4642      	movge	r2, r8
 801057c:	1a89      	subs	r1, r1, r2
 801057e:	9105      	str	r1, [sp, #20]
 8010580:	9906      	ldr	r1, [sp, #24]
 8010582:	eba8 0802 	sub.w	r8, r8, r2
 8010586:	1a8a      	subs	r2, r1, r2
 8010588:	9206      	str	r2, [sp, #24]
 801058a:	b303      	cbz	r3, 80105ce <_dtoa_r+0x6e6>
 801058c:	9a08      	ldr	r2, [sp, #32]
 801058e:	2a00      	cmp	r2, #0
 8010590:	f000 80a6 	beq.w	80106e0 <_dtoa_r+0x7f8>
 8010594:	2c00      	cmp	r4, #0
 8010596:	dd13      	ble.n	80105c0 <_dtoa_r+0x6d8>
 8010598:	4639      	mov	r1, r7
 801059a:	4622      	mov	r2, r4
 801059c:	4630      	mov	r0, r6
 801059e:	930c      	str	r3, [sp, #48]	; 0x30
 80105a0:	f000 fe16 	bl	80111d0 <__pow5mult>
 80105a4:	462a      	mov	r2, r5
 80105a6:	4601      	mov	r1, r0
 80105a8:	4607      	mov	r7, r0
 80105aa:	4630      	mov	r0, r6
 80105ac:	f000 fd6a 	bl	8011084 <__multiply>
 80105b0:	4629      	mov	r1, r5
 80105b2:	900a      	str	r0, [sp, #40]	; 0x28
 80105b4:	4630      	mov	r0, r6
 80105b6:	f000 fc93 	bl	8010ee0 <_Bfree>
 80105ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105be:	4615      	mov	r5, r2
 80105c0:	1b1a      	subs	r2, r3, r4
 80105c2:	d004      	beq.n	80105ce <_dtoa_r+0x6e6>
 80105c4:	4629      	mov	r1, r5
 80105c6:	4630      	mov	r0, r6
 80105c8:	f000 fe02 	bl	80111d0 <__pow5mult>
 80105cc:	4605      	mov	r5, r0
 80105ce:	2101      	movs	r1, #1
 80105d0:	4630      	mov	r0, r6
 80105d2:	f000 fd41 	bl	8011058 <__i2b>
 80105d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105d8:	2b00      	cmp	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	f340 8082 	ble.w	80106e4 <_dtoa_r+0x7fc>
 80105e0:	461a      	mov	r2, r3
 80105e2:	4601      	mov	r1, r0
 80105e4:	4630      	mov	r0, r6
 80105e6:	f000 fdf3 	bl	80111d0 <__pow5mult>
 80105ea:	9b07      	ldr	r3, [sp, #28]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	4604      	mov	r4, r0
 80105f0:	dd7b      	ble.n	80106ea <_dtoa_r+0x802>
 80105f2:	2300      	movs	r3, #0
 80105f4:	930a      	str	r3, [sp, #40]	; 0x28
 80105f6:	6922      	ldr	r2, [r4, #16]
 80105f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80105fc:	6910      	ldr	r0, [r2, #16]
 80105fe:	f000 fcdb 	bl	8010fb8 <__hi0bits>
 8010602:	f1c0 0020 	rsb	r0, r0, #32
 8010606:	9b06      	ldr	r3, [sp, #24]
 8010608:	4418      	add	r0, r3
 801060a:	f010 001f 	ands.w	r0, r0, #31
 801060e:	f000 808d 	beq.w	801072c <_dtoa_r+0x844>
 8010612:	f1c0 0220 	rsb	r2, r0, #32
 8010616:	2a04      	cmp	r2, #4
 8010618:	f340 8086 	ble.w	8010728 <_dtoa_r+0x840>
 801061c:	f1c0 001c 	rsb	r0, r0, #28
 8010620:	9b05      	ldr	r3, [sp, #20]
 8010622:	4403      	add	r3, r0
 8010624:	9305      	str	r3, [sp, #20]
 8010626:	9b06      	ldr	r3, [sp, #24]
 8010628:	4403      	add	r3, r0
 801062a:	4480      	add	r8, r0
 801062c:	9306      	str	r3, [sp, #24]
 801062e:	9b05      	ldr	r3, [sp, #20]
 8010630:	2b00      	cmp	r3, #0
 8010632:	dd05      	ble.n	8010640 <_dtoa_r+0x758>
 8010634:	4629      	mov	r1, r5
 8010636:	461a      	mov	r2, r3
 8010638:	4630      	mov	r0, r6
 801063a:	f000 fe23 	bl	8011284 <__lshift>
 801063e:	4605      	mov	r5, r0
 8010640:	9b06      	ldr	r3, [sp, #24]
 8010642:	2b00      	cmp	r3, #0
 8010644:	dd05      	ble.n	8010652 <_dtoa_r+0x76a>
 8010646:	4621      	mov	r1, r4
 8010648:	461a      	mov	r2, r3
 801064a:	4630      	mov	r0, r6
 801064c:	f000 fe1a 	bl	8011284 <__lshift>
 8010650:	4604      	mov	r4, r0
 8010652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010654:	2b00      	cmp	r3, #0
 8010656:	d06b      	beq.n	8010730 <_dtoa_r+0x848>
 8010658:	4621      	mov	r1, r4
 801065a:	4628      	mov	r0, r5
 801065c:	f000 fe7e 	bl	801135c <__mcmp>
 8010660:	2800      	cmp	r0, #0
 8010662:	da65      	bge.n	8010730 <_dtoa_r+0x848>
 8010664:	2300      	movs	r3, #0
 8010666:	4629      	mov	r1, r5
 8010668:	220a      	movs	r2, #10
 801066a:	4630      	mov	r0, r6
 801066c:	f000 fc5a 	bl	8010f24 <__multadd>
 8010670:	9b08      	ldr	r3, [sp, #32]
 8010672:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010676:	4605      	mov	r5, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 8192 	beq.w	80109a2 <_dtoa_r+0xaba>
 801067e:	4639      	mov	r1, r7
 8010680:	2300      	movs	r3, #0
 8010682:	220a      	movs	r2, #10
 8010684:	4630      	mov	r0, r6
 8010686:	f000 fc4d 	bl	8010f24 <__multadd>
 801068a:	f1ba 0f00 	cmp.w	sl, #0
 801068e:	4607      	mov	r7, r0
 8010690:	f300 808e 	bgt.w	80107b0 <_dtoa_r+0x8c8>
 8010694:	9b07      	ldr	r3, [sp, #28]
 8010696:	2b02      	cmp	r3, #2
 8010698:	dc51      	bgt.n	801073e <_dtoa_r+0x856>
 801069a:	e089      	b.n	80107b0 <_dtoa_r+0x8c8>
 801069c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801069e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80106a2:	e751      	b.n	8010548 <_dtoa_r+0x660>
 80106a4:	f109 34ff 	add.w	r4, r9, #4294967295
 80106a8:	42a3      	cmp	r3, r4
 80106aa:	bfbf      	itttt	lt
 80106ac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80106ae:	1ae3      	sublt	r3, r4, r3
 80106b0:	18d2      	addlt	r2, r2, r3
 80106b2:	4613      	movlt	r3, r2
 80106b4:	bfb7      	itett	lt
 80106b6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80106b8:	1b1c      	subge	r4, r3, r4
 80106ba:	4623      	movlt	r3, r4
 80106bc:	2400      	movlt	r4, #0
 80106be:	f1b9 0f00 	cmp.w	r9, #0
 80106c2:	bfb5      	itete	lt
 80106c4:	9a05      	ldrlt	r2, [sp, #20]
 80106c6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80106ca:	eba2 0809 	sublt.w	r8, r2, r9
 80106ce:	464a      	movge	r2, r9
 80106d0:	bfb8      	it	lt
 80106d2:	2200      	movlt	r2, #0
 80106d4:	e73b      	b.n	801054e <_dtoa_r+0x666>
 80106d6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80106da:	9f08      	ldr	r7, [sp, #32]
 80106dc:	461c      	mov	r4, r3
 80106de:	e743      	b.n	8010568 <_dtoa_r+0x680>
 80106e0:	461a      	mov	r2, r3
 80106e2:	e76f      	b.n	80105c4 <_dtoa_r+0x6dc>
 80106e4:	9b07      	ldr	r3, [sp, #28]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	dc18      	bgt.n	801071c <_dtoa_r+0x834>
 80106ea:	9b02      	ldr	r3, [sp, #8]
 80106ec:	b9b3      	cbnz	r3, 801071c <_dtoa_r+0x834>
 80106ee:	9b03      	ldr	r3, [sp, #12]
 80106f0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80106f4:	b9a2      	cbnz	r2, 8010720 <_dtoa_r+0x838>
 80106f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80106fa:	0d12      	lsrs	r2, r2, #20
 80106fc:	0512      	lsls	r2, r2, #20
 80106fe:	b18a      	cbz	r2, 8010724 <_dtoa_r+0x83c>
 8010700:	9b05      	ldr	r3, [sp, #20]
 8010702:	3301      	adds	r3, #1
 8010704:	9305      	str	r3, [sp, #20]
 8010706:	9b06      	ldr	r3, [sp, #24]
 8010708:	3301      	adds	r3, #1
 801070a:	9306      	str	r3, [sp, #24]
 801070c:	2301      	movs	r3, #1
 801070e:	930a      	str	r3, [sp, #40]	; 0x28
 8010710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010712:	2b00      	cmp	r3, #0
 8010714:	f47f af6f 	bne.w	80105f6 <_dtoa_r+0x70e>
 8010718:	2001      	movs	r0, #1
 801071a:	e774      	b.n	8010606 <_dtoa_r+0x71e>
 801071c:	2300      	movs	r3, #0
 801071e:	e7f6      	b.n	801070e <_dtoa_r+0x826>
 8010720:	9b02      	ldr	r3, [sp, #8]
 8010722:	e7f4      	b.n	801070e <_dtoa_r+0x826>
 8010724:	920a      	str	r2, [sp, #40]	; 0x28
 8010726:	e7f3      	b.n	8010710 <_dtoa_r+0x828>
 8010728:	d081      	beq.n	801062e <_dtoa_r+0x746>
 801072a:	4610      	mov	r0, r2
 801072c:	301c      	adds	r0, #28
 801072e:	e777      	b.n	8010620 <_dtoa_r+0x738>
 8010730:	f1b9 0f00 	cmp.w	r9, #0
 8010734:	dc37      	bgt.n	80107a6 <_dtoa_r+0x8be>
 8010736:	9b07      	ldr	r3, [sp, #28]
 8010738:	2b02      	cmp	r3, #2
 801073a:	dd34      	ble.n	80107a6 <_dtoa_r+0x8be>
 801073c:	46ca      	mov	sl, r9
 801073e:	f1ba 0f00 	cmp.w	sl, #0
 8010742:	d10d      	bne.n	8010760 <_dtoa_r+0x878>
 8010744:	4621      	mov	r1, r4
 8010746:	4653      	mov	r3, sl
 8010748:	2205      	movs	r2, #5
 801074a:	4630      	mov	r0, r6
 801074c:	f000 fbea 	bl	8010f24 <__multadd>
 8010750:	4601      	mov	r1, r0
 8010752:	4604      	mov	r4, r0
 8010754:	4628      	mov	r0, r5
 8010756:	f000 fe01 	bl	801135c <__mcmp>
 801075a:	2800      	cmp	r0, #0
 801075c:	f73f adde 	bgt.w	801031c <_dtoa_r+0x434>
 8010760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010762:	f8dd 8000 	ldr.w	r8, [sp]
 8010766:	ea6f 0b03 	mvn.w	fp, r3
 801076a:	f04f 0900 	mov.w	r9, #0
 801076e:	4621      	mov	r1, r4
 8010770:	4630      	mov	r0, r6
 8010772:	f000 fbb5 	bl	8010ee0 <_Bfree>
 8010776:	2f00      	cmp	r7, #0
 8010778:	f43f aea7 	beq.w	80104ca <_dtoa_r+0x5e2>
 801077c:	f1b9 0f00 	cmp.w	r9, #0
 8010780:	d005      	beq.n	801078e <_dtoa_r+0x8a6>
 8010782:	45b9      	cmp	r9, r7
 8010784:	d003      	beq.n	801078e <_dtoa_r+0x8a6>
 8010786:	4649      	mov	r1, r9
 8010788:	4630      	mov	r0, r6
 801078a:	f000 fba9 	bl	8010ee0 <_Bfree>
 801078e:	4639      	mov	r1, r7
 8010790:	4630      	mov	r0, r6
 8010792:	f000 fba5 	bl	8010ee0 <_Bfree>
 8010796:	e698      	b.n	80104ca <_dtoa_r+0x5e2>
 8010798:	2400      	movs	r4, #0
 801079a:	4627      	mov	r7, r4
 801079c:	e7e0      	b.n	8010760 <_dtoa_r+0x878>
 801079e:	46bb      	mov	fp, r7
 80107a0:	4604      	mov	r4, r0
 80107a2:	4607      	mov	r7, r0
 80107a4:	e5ba      	b.n	801031c <_dtoa_r+0x434>
 80107a6:	9b08      	ldr	r3, [sp, #32]
 80107a8:	46ca      	mov	sl, r9
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f000 8100 	beq.w	80109b0 <_dtoa_r+0xac8>
 80107b0:	f1b8 0f00 	cmp.w	r8, #0
 80107b4:	dd05      	ble.n	80107c2 <_dtoa_r+0x8da>
 80107b6:	4639      	mov	r1, r7
 80107b8:	4642      	mov	r2, r8
 80107ba:	4630      	mov	r0, r6
 80107bc:	f000 fd62 	bl	8011284 <__lshift>
 80107c0:	4607      	mov	r7, r0
 80107c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d05d      	beq.n	8010884 <_dtoa_r+0x99c>
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	4630      	mov	r0, r6
 80107cc:	f000 fb48 	bl	8010e60 <_Balloc>
 80107d0:	4680      	mov	r8, r0
 80107d2:	b928      	cbnz	r0, 80107e0 <_dtoa_r+0x8f8>
 80107d4:	4b82      	ldr	r3, [pc, #520]	; (80109e0 <_dtoa_r+0xaf8>)
 80107d6:	4602      	mov	r2, r0
 80107d8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107dc:	f7ff bb9a 	b.w	800ff14 <_dtoa_r+0x2c>
 80107e0:	693a      	ldr	r2, [r7, #16]
 80107e2:	3202      	adds	r2, #2
 80107e4:	0092      	lsls	r2, r2, #2
 80107e6:	f107 010c 	add.w	r1, r7, #12
 80107ea:	300c      	adds	r0, #12
 80107ec:	f000 fb2a 	bl	8010e44 <memcpy>
 80107f0:	2201      	movs	r2, #1
 80107f2:	4641      	mov	r1, r8
 80107f4:	4630      	mov	r0, r6
 80107f6:	f000 fd45 	bl	8011284 <__lshift>
 80107fa:	9b00      	ldr	r3, [sp, #0]
 80107fc:	3301      	adds	r3, #1
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	9b00      	ldr	r3, [sp, #0]
 8010802:	4453      	add	r3, sl
 8010804:	9309      	str	r3, [sp, #36]	; 0x24
 8010806:	9b02      	ldr	r3, [sp, #8]
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	46b9      	mov	r9, r7
 801080e:	9308      	str	r3, [sp, #32]
 8010810:	4607      	mov	r7, r0
 8010812:	9b05      	ldr	r3, [sp, #20]
 8010814:	4621      	mov	r1, r4
 8010816:	3b01      	subs	r3, #1
 8010818:	4628      	mov	r0, r5
 801081a:	9302      	str	r3, [sp, #8]
 801081c:	f7ff fad8 	bl	800fdd0 <quorem>
 8010820:	4603      	mov	r3, r0
 8010822:	3330      	adds	r3, #48	; 0x30
 8010824:	9006      	str	r0, [sp, #24]
 8010826:	4649      	mov	r1, r9
 8010828:	4628      	mov	r0, r5
 801082a:	930a      	str	r3, [sp, #40]	; 0x28
 801082c:	f000 fd96 	bl	801135c <__mcmp>
 8010830:	463a      	mov	r2, r7
 8010832:	4682      	mov	sl, r0
 8010834:	4621      	mov	r1, r4
 8010836:	4630      	mov	r0, r6
 8010838:	f000 fdac 	bl	8011394 <__mdiff>
 801083c:	68c2      	ldr	r2, [r0, #12]
 801083e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010840:	4680      	mov	r8, r0
 8010842:	bb0a      	cbnz	r2, 8010888 <_dtoa_r+0x9a0>
 8010844:	4601      	mov	r1, r0
 8010846:	4628      	mov	r0, r5
 8010848:	f000 fd88 	bl	801135c <__mcmp>
 801084c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801084e:	4602      	mov	r2, r0
 8010850:	4641      	mov	r1, r8
 8010852:	4630      	mov	r0, r6
 8010854:	920e      	str	r2, [sp, #56]	; 0x38
 8010856:	930a      	str	r3, [sp, #40]	; 0x28
 8010858:	f000 fb42 	bl	8010ee0 <_Bfree>
 801085c:	9b07      	ldr	r3, [sp, #28]
 801085e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010860:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010864:	ea43 0102 	orr.w	r1, r3, r2
 8010868:	9b08      	ldr	r3, [sp, #32]
 801086a:	430b      	orrs	r3, r1
 801086c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801086e:	d10d      	bne.n	801088c <_dtoa_r+0x9a4>
 8010870:	2b39      	cmp	r3, #57	; 0x39
 8010872:	d029      	beq.n	80108c8 <_dtoa_r+0x9e0>
 8010874:	f1ba 0f00 	cmp.w	sl, #0
 8010878:	dd01      	ble.n	801087e <_dtoa_r+0x996>
 801087a:	9b06      	ldr	r3, [sp, #24]
 801087c:	3331      	adds	r3, #49	; 0x31
 801087e:	9a02      	ldr	r2, [sp, #8]
 8010880:	7013      	strb	r3, [r2, #0]
 8010882:	e774      	b.n	801076e <_dtoa_r+0x886>
 8010884:	4638      	mov	r0, r7
 8010886:	e7b8      	b.n	80107fa <_dtoa_r+0x912>
 8010888:	2201      	movs	r2, #1
 801088a:	e7e1      	b.n	8010850 <_dtoa_r+0x968>
 801088c:	f1ba 0f00 	cmp.w	sl, #0
 8010890:	db06      	blt.n	80108a0 <_dtoa_r+0x9b8>
 8010892:	9907      	ldr	r1, [sp, #28]
 8010894:	ea41 0a0a 	orr.w	sl, r1, sl
 8010898:	9908      	ldr	r1, [sp, #32]
 801089a:	ea5a 0101 	orrs.w	r1, sl, r1
 801089e:	d120      	bne.n	80108e2 <_dtoa_r+0x9fa>
 80108a0:	2a00      	cmp	r2, #0
 80108a2:	ddec      	ble.n	801087e <_dtoa_r+0x996>
 80108a4:	4629      	mov	r1, r5
 80108a6:	2201      	movs	r2, #1
 80108a8:	4630      	mov	r0, r6
 80108aa:	9305      	str	r3, [sp, #20]
 80108ac:	f000 fcea 	bl	8011284 <__lshift>
 80108b0:	4621      	mov	r1, r4
 80108b2:	4605      	mov	r5, r0
 80108b4:	f000 fd52 	bl	801135c <__mcmp>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	9b05      	ldr	r3, [sp, #20]
 80108bc:	dc02      	bgt.n	80108c4 <_dtoa_r+0x9dc>
 80108be:	d1de      	bne.n	801087e <_dtoa_r+0x996>
 80108c0:	07da      	lsls	r2, r3, #31
 80108c2:	d5dc      	bpl.n	801087e <_dtoa_r+0x996>
 80108c4:	2b39      	cmp	r3, #57	; 0x39
 80108c6:	d1d8      	bne.n	801087a <_dtoa_r+0x992>
 80108c8:	9a02      	ldr	r2, [sp, #8]
 80108ca:	2339      	movs	r3, #57	; 0x39
 80108cc:	7013      	strb	r3, [r2, #0]
 80108ce:	4643      	mov	r3, r8
 80108d0:	4698      	mov	r8, r3
 80108d2:	3b01      	subs	r3, #1
 80108d4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80108d8:	2a39      	cmp	r2, #57	; 0x39
 80108da:	d051      	beq.n	8010980 <_dtoa_r+0xa98>
 80108dc:	3201      	adds	r2, #1
 80108de:	701a      	strb	r2, [r3, #0]
 80108e0:	e745      	b.n	801076e <_dtoa_r+0x886>
 80108e2:	2a00      	cmp	r2, #0
 80108e4:	dd03      	ble.n	80108ee <_dtoa_r+0xa06>
 80108e6:	2b39      	cmp	r3, #57	; 0x39
 80108e8:	d0ee      	beq.n	80108c8 <_dtoa_r+0x9e0>
 80108ea:	3301      	adds	r3, #1
 80108ec:	e7c7      	b.n	801087e <_dtoa_r+0x996>
 80108ee:	9a05      	ldr	r2, [sp, #20]
 80108f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108f2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108f6:	428a      	cmp	r2, r1
 80108f8:	d02b      	beq.n	8010952 <_dtoa_r+0xa6a>
 80108fa:	4629      	mov	r1, r5
 80108fc:	2300      	movs	r3, #0
 80108fe:	220a      	movs	r2, #10
 8010900:	4630      	mov	r0, r6
 8010902:	f000 fb0f 	bl	8010f24 <__multadd>
 8010906:	45b9      	cmp	r9, r7
 8010908:	4605      	mov	r5, r0
 801090a:	f04f 0300 	mov.w	r3, #0
 801090e:	f04f 020a 	mov.w	r2, #10
 8010912:	4649      	mov	r1, r9
 8010914:	4630      	mov	r0, r6
 8010916:	d107      	bne.n	8010928 <_dtoa_r+0xa40>
 8010918:	f000 fb04 	bl	8010f24 <__multadd>
 801091c:	4681      	mov	r9, r0
 801091e:	4607      	mov	r7, r0
 8010920:	9b05      	ldr	r3, [sp, #20]
 8010922:	3301      	adds	r3, #1
 8010924:	9305      	str	r3, [sp, #20]
 8010926:	e774      	b.n	8010812 <_dtoa_r+0x92a>
 8010928:	f000 fafc 	bl	8010f24 <__multadd>
 801092c:	4639      	mov	r1, r7
 801092e:	4681      	mov	r9, r0
 8010930:	2300      	movs	r3, #0
 8010932:	220a      	movs	r2, #10
 8010934:	4630      	mov	r0, r6
 8010936:	f000 faf5 	bl	8010f24 <__multadd>
 801093a:	4607      	mov	r7, r0
 801093c:	e7f0      	b.n	8010920 <_dtoa_r+0xa38>
 801093e:	f1ba 0f00 	cmp.w	sl, #0
 8010942:	9a00      	ldr	r2, [sp, #0]
 8010944:	bfcc      	ite	gt
 8010946:	46d0      	movgt	r8, sl
 8010948:	f04f 0801 	movle.w	r8, #1
 801094c:	4490      	add	r8, r2
 801094e:	f04f 0900 	mov.w	r9, #0
 8010952:	4629      	mov	r1, r5
 8010954:	2201      	movs	r2, #1
 8010956:	4630      	mov	r0, r6
 8010958:	9302      	str	r3, [sp, #8]
 801095a:	f000 fc93 	bl	8011284 <__lshift>
 801095e:	4621      	mov	r1, r4
 8010960:	4605      	mov	r5, r0
 8010962:	f000 fcfb 	bl	801135c <__mcmp>
 8010966:	2800      	cmp	r0, #0
 8010968:	dcb1      	bgt.n	80108ce <_dtoa_r+0x9e6>
 801096a:	d102      	bne.n	8010972 <_dtoa_r+0xa8a>
 801096c:	9b02      	ldr	r3, [sp, #8]
 801096e:	07db      	lsls	r3, r3, #31
 8010970:	d4ad      	bmi.n	80108ce <_dtoa_r+0x9e6>
 8010972:	4643      	mov	r3, r8
 8010974:	4698      	mov	r8, r3
 8010976:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801097a:	2a30      	cmp	r2, #48	; 0x30
 801097c:	d0fa      	beq.n	8010974 <_dtoa_r+0xa8c>
 801097e:	e6f6      	b.n	801076e <_dtoa_r+0x886>
 8010980:	9a00      	ldr	r2, [sp, #0]
 8010982:	429a      	cmp	r2, r3
 8010984:	d1a4      	bne.n	80108d0 <_dtoa_r+0x9e8>
 8010986:	f10b 0b01 	add.w	fp, fp, #1
 801098a:	2331      	movs	r3, #49	; 0x31
 801098c:	e778      	b.n	8010880 <_dtoa_r+0x998>
 801098e:	4b15      	ldr	r3, [pc, #84]	; (80109e4 <_dtoa_r+0xafc>)
 8010990:	f7ff bb12 	b.w	800ffb8 <_dtoa_r+0xd0>
 8010994:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010996:	2b00      	cmp	r3, #0
 8010998:	f47f aaee 	bne.w	800ff78 <_dtoa_r+0x90>
 801099c:	4b12      	ldr	r3, [pc, #72]	; (80109e8 <_dtoa_r+0xb00>)
 801099e:	f7ff bb0b 	b.w	800ffb8 <_dtoa_r+0xd0>
 80109a2:	f1ba 0f00 	cmp.w	sl, #0
 80109a6:	dc03      	bgt.n	80109b0 <_dtoa_r+0xac8>
 80109a8:	9b07      	ldr	r3, [sp, #28]
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	f73f aec7 	bgt.w	801073e <_dtoa_r+0x856>
 80109b0:	f8dd 8000 	ldr.w	r8, [sp]
 80109b4:	4621      	mov	r1, r4
 80109b6:	4628      	mov	r0, r5
 80109b8:	f7ff fa0a 	bl	800fdd0 <quorem>
 80109bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80109c0:	f808 3b01 	strb.w	r3, [r8], #1
 80109c4:	9a00      	ldr	r2, [sp, #0]
 80109c6:	eba8 0202 	sub.w	r2, r8, r2
 80109ca:	4592      	cmp	sl, r2
 80109cc:	ddb7      	ble.n	801093e <_dtoa_r+0xa56>
 80109ce:	4629      	mov	r1, r5
 80109d0:	2300      	movs	r3, #0
 80109d2:	220a      	movs	r2, #10
 80109d4:	4630      	mov	r0, r6
 80109d6:	f000 faa5 	bl	8010f24 <__multadd>
 80109da:	4605      	mov	r5, r0
 80109dc:	e7ea      	b.n	80109b4 <_dtoa_r+0xacc>
 80109de:	bf00      	nop
 80109e0:	08013843 	.word	0x08013843
 80109e4:	0801379c 	.word	0x0801379c
 80109e8:	080137c0 	.word	0x080137c0

080109ec <__sflush_r>:
 80109ec:	898a      	ldrh	r2, [r1, #12]
 80109ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f2:	4605      	mov	r5, r0
 80109f4:	0710      	lsls	r0, r2, #28
 80109f6:	460c      	mov	r4, r1
 80109f8:	d458      	bmi.n	8010aac <__sflush_r+0xc0>
 80109fa:	684b      	ldr	r3, [r1, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	dc05      	bgt.n	8010a0c <__sflush_r+0x20>
 8010a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	dc02      	bgt.n	8010a0c <__sflush_r+0x20>
 8010a06:	2000      	movs	r0, #0
 8010a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a0e:	2e00      	cmp	r6, #0
 8010a10:	d0f9      	beq.n	8010a06 <__sflush_r+0x1a>
 8010a12:	2300      	movs	r3, #0
 8010a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a18:	682f      	ldr	r7, [r5, #0]
 8010a1a:	602b      	str	r3, [r5, #0]
 8010a1c:	d032      	beq.n	8010a84 <__sflush_r+0x98>
 8010a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a20:	89a3      	ldrh	r3, [r4, #12]
 8010a22:	075a      	lsls	r2, r3, #29
 8010a24:	d505      	bpl.n	8010a32 <__sflush_r+0x46>
 8010a26:	6863      	ldr	r3, [r4, #4]
 8010a28:	1ac0      	subs	r0, r0, r3
 8010a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a2c:	b10b      	cbz	r3, 8010a32 <__sflush_r+0x46>
 8010a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a30:	1ac0      	subs	r0, r0, r3
 8010a32:	2300      	movs	r3, #0
 8010a34:	4602      	mov	r2, r0
 8010a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a38:	6a21      	ldr	r1, [r4, #32]
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	47b0      	blx	r6
 8010a3e:	1c43      	adds	r3, r0, #1
 8010a40:	89a3      	ldrh	r3, [r4, #12]
 8010a42:	d106      	bne.n	8010a52 <__sflush_r+0x66>
 8010a44:	6829      	ldr	r1, [r5, #0]
 8010a46:	291d      	cmp	r1, #29
 8010a48:	d82c      	bhi.n	8010aa4 <__sflush_r+0xb8>
 8010a4a:	4a2a      	ldr	r2, [pc, #168]	; (8010af4 <__sflush_r+0x108>)
 8010a4c:	40ca      	lsrs	r2, r1
 8010a4e:	07d6      	lsls	r6, r2, #31
 8010a50:	d528      	bpl.n	8010aa4 <__sflush_r+0xb8>
 8010a52:	2200      	movs	r2, #0
 8010a54:	6062      	str	r2, [r4, #4]
 8010a56:	04d9      	lsls	r1, r3, #19
 8010a58:	6922      	ldr	r2, [r4, #16]
 8010a5a:	6022      	str	r2, [r4, #0]
 8010a5c:	d504      	bpl.n	8010a68 <__sflush_r+0x7c>
 8010a5e:	1c42      	adds	r2, r0, #1
 8010a60:	d101      	bne.n	8010a66 <__sflush_r+0x7a>
 8010a62:	682b      	ldr	r3, [r5, #0]
 8010a64:	b903      	cbnz	r3, 8010a68 <__sflush_r+0x7c>
 8010a66:	6560      	str	r0, [r4, #84]	; 0x54
 8010a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a6a:	602f      	str	r7, [r5, #0]
 8010a6c:	2900      	cmp	r1, #0
 8010a6e:	d0ca      	beq.n	8010a06 <__sflush_r+0x1a>
 8010a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a74:	4299      	cmp	r1, r3
 8010a76:	d002      	beq.n	8010a7e <__sflush_r+0x92>
 8010a78:	4628      	mov	r0, r5
 8010a7a:	f000 fd7f 	bl	801157c <_free_r>
 8010a7e:	2000      	movs	r0, #0
 8010a80:	6360      	str	r0, [r4, #52]	; 0x34
 8010a82:	e7c1      	b.n	8010a08 <__sflush_r+0x1c>
 8010a84:	6a21      	ldr	r1, [r4, #32]
 8010a86:	2301      	movs	r3, #1
 8010a88:	4628      	mov	r0, r5
 8010a8a:	47b0      	blx	r6
 8010a8c:	1c41      	adds	r1, r0, #1
 8010a8e:	d1c7      	bne.n	8010a20 <__sflush_r+0x34>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d0c4      	beq.n	8010a20 <__sflush_r+0x34>
 8010a96:	2b1d      	cmp	r3, #29
 8010a98:	d001      	beq.n	8010a9e <__sflush_r+0xb2>
 8010a9a:	2b16      	cmp	r3, #22
 8010a9c:	d101      	bne.n	8010aa2 <__sflush_r+0xb6>
 8010a9e:	602f      	str	r7, [r5, #0]
 8010aa0:	e7b1      	b.n	8010a06 <__sflush_r+0x1a>
 8010aa2:	89a3      	ldrh	r3, [r4, #12]
 8010aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aa8:	81a3      	strh	r3, [r4, #12]
 8010aaa:	e7ad      	b.n	8010a08 <__sflush_r+0x1c>
 8010aac:	690f      	ldr	r7, [r1, #16]
 8010aae:	2f00      	cmp	r7, #0
 8010ab0:	d0a9      	beq.n	8010a06 <__sflush_r+0x1a>
 8010ab2:	0793      	lsls	r3, r2, #30
 8010ab4:	680e      	ldr	r6, [r1, #0]
 8010ab6:	bf08      	it	eq
 8010ab8:	694b      	ldreq	r3, [r1, #20]
 8010aba:	600f      	str	r7, [r1, #0]
 8010abc:	bf18      	it	ne
 8010abe:	2300      	movne	r3, #0
 8010ac0:	eba6 0807 	sub.w	r8, r6, r7
 8010ac4:	608b      	str	r3, [r1, #8]
 8010ac6:	f1b8 0f00 	cmp.w	r8, #0
 8010aca:	dd9c      	ble.n	8010a06 <__sflush_r+0x1a>
 8010acc:	6a21      	ldr	r1, [r4, #32]
 8010ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ad0:	4643      	mov	r3, r8
 8010ad2:	463a      	mov	r2, r7
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	47b0      	blx	r6
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	dc06      	bgt.n	8010aea <__sflush_r+0xfe>
 8010adc:	89a3      	ldrh	r3, [r4, #12]
 8010ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ae2:	81a3      	strh	r3, [r4, #12]
 8010ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae8:	e78e      	b.n	8010a08 <__sflush_r+0x1c>
 8010aea:	4407      	add	r7, r0
 8010aec:	eba8 0800 	sub.w	r8, r8, r0
 8010af0:	e7e9      	b.n	8010ac6 <__sflush_r+0xda>
 8010af2:	bf00      	nop
 8010af4:	20400001 	.word	0x20400001

08010af8 <_fflush_r>:
 8010af8:	b538      	push	{r3, r4, r5, lr}
 8010afa:	690b      	ldr	r3, [r1, #16]
 8010afc:	4605      	mov	r5, r0
 8010afe:	460c      	mov	r4, r1
 8010b00:	b913      	cbnz	r3, 8010b08 <_fflush_r+0x10>
 8010b02:	2500      	movs	r5, #0
 8010b04:	4628      	mov	r0, r5
 8010b06:	bd38      	pop	{r3, r4, r5, pc}
 8010b08:	b118      	cbz	r0, 8010b12 <_fflush_r+0x1a>
 8010b0a:	6983      	ldr	r3, [r0, #24]
 8010b0c:	b90b      	cbnz	r3, 8010b12 <_fflush_r+0x1a>
 8010b0e:	f000 f887 	bl	8010c20 <__sinit>
 8010b12:	4b14      	ldr	r3, [pc, #80]	; (8010b64 <_fflush_r+0x6c>)
 8010b14:	429c      	cmp	r4, r3
 8010b16:	d11b      	bne.n	8010b50 <_fflush_r+0x58>
 8010b18:	686c      	ldr	r4, [r5, #4]
 8010b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d0ef      	beq.n	8010b02 <_fflush_r+0xa>
 8010b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b24:	07d0      	lsls	r0, r2, #31
 8010b26:	d404      	bmi.n	8010b32 <_fflush_r+0x3a>
 8010b28:	0599      	lsls	r1, r3, #22
 8010b2a:	d402      	bmi.n	8010b32 <_fflush_r+0x3a>
 8010b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b2e:	f000 f91a 	bl	8010d66 <__retarget_lock_acquire_recursive>
 8010b32:	4628      	mov	r0, r5
 8010b34:	4621      	mov	r1, r4
 8010b36:	f7ff ff59 	bl	80109ec <__sflush_r>
 8010b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b3c:	07da      	lsls	r2, r3, #31
 8010b3e:	4605      	mov	r5, r0
 8010b40:	d4e0      	bmi.n	8010b04 <_fflush_r+0xc>
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	059b      	lsls	r3, r3, #22
 8010b46:	d4dd      	bmi.n	8010b04 <_fflush_r+0xc>
 8010b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b4a:	f000 f90d 	bl	8010d68 <__retarget_lock_release_recursive>
 8010b4e:	e7d9      	b.n	8010b04 <_fflush_r+0xc>
 8010b50:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <_fflush_r+0x70>)
 8010b52:	429c      	cmp	r4, r3
 8010b54:	d101      	bne.n	8010b5a <_fflush_r+0x62>
 8010b56:	68ac      	ldr	r4, [r5, #8]
 8010b58:	e7df      	b.n	8010b1a <_fflush_r+0x22>
 8010b5a:	4b04      	ldr	r3, [pc, #16]	; (8010b6c <_fflush_r+0x74>)
 8010b5c:	429c      	cmp	r4, r3
 8010b5e:	bf08      	it	eq
 8010b60:	68ec      	ldreq	r4, [r5, #12]
 8010b62:	e7da      	b.n	8010b1a <_fflush_r+0x22>
 8010b64:	08013874 	.word	0x08013874
 8010b68:	08013894 	.word	0x08013894
 8010b6c:	08013854 	.word	0x08013854

08010b70 <std>:
 8010b70:	2300      	movs	r3, #0
 8010b72:	b510      	push	{r4, lr}
 8010b74:	4604      	mov	r4, r0
 8010b76:	e9c0 3300 	strd	r3, r3, [r0]
 8010b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b7e:	6083      	str	r3, [r0, #8]
 8010b80:	8181      	strh	r1, [r0, #12]
 8010b82:	6643      	str	r3, [r0, #100]	; 0x64
 8010b84:	81c2      	strh	r2, [r0, #14]
 8010b86:	6183      	str	r3, [r0, #24]
 8010b88:	4619      	mov	r1, r3
 8010b8a:	2208      	movs	r2, #8
 8010b8c:	305c      	adds	r0, #92	; 0x5c
 8010b8e:	f7fe fb9f 	bl	800f2d0 <memset>
 8010b92:	4b05      	ldr	r3, [pc, #20]	; (8010ba8 <std+0x38>)
 8010b94:	6263      	str	r3, [r4, #36]	; 0x24
 8010b96:	4b05      	ldr	r3, [pc, #20]	; (8010bac <std+0x3c>)
 8010b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b9a:	4b05      	ldr	r3, [pc, #20]	; (8010bb0 <std+0x40>)
 8010b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b9e:	4b05      	ldr	r3, [pc, #20]	; (8010bb4 <std+0x44>)
 8010ba0:	6224      	str	r4, [r4, #32]
 8010ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8010ba4:	bd10      	pop	{r4, pc}
 8010ba6:	bf00      	nop
 8010ba8:	080116f1 	.word	0x080116f1
 8010bac:	08011713 	.word	0x08011713
 8010bb0:	0801174b 	.word	0x0801174b
 8010bb4:	0801176f 	.word	0x0801176f

08010bb8 <_cleanup_r>:
 8010bb8:	4901      	ldr	r1, [pc, #4]	; (8010bc0 <_cleanup_r+0x8>)
 8010bba:	f000 b8af 	b.w	8010d1c <_fwalk_reent>
 8010bbe:	bf00      	nop
 8010bc0:	08010af9 	.word	0x08010af9

08010bc4 <__sfmoreglue>:
 8010bc4:	b570      	push	{r4, r5, r6, lr}
 8010bc6:	1e4a      	subs	r2, r1, #1
 8010bc8:	2568      	movs	r5, #104	; 0x68
 8010bca:	4355      	muls	r5, r2
 8010bcc:	460e      	mov	r6, r1
 8010bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010bd2:	f000 fd23 	bl	801161c <_malloc_r>
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	b140      	cbz	r0, 8010bec <__sfmoreglue+0x28>
 8010bda:	2100      	movs	r1, #0
 8010bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8010be0:	300c      	adds	r0, #12
 8010be2:	60a0      	str	r0, [r4, #8]
 8010be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010be8:	f7fe fb72 	bl	800f2d0 <memset>
 8010bec:	4620      	mov	r0, r4
 8010bee:	bd70      	pop	{r4, r5, r6, pc}

08010bf0 <__sfp_lock_acquire>:
 8010bf0:	4801      	ldr	r0, [pc, #4]	; (8010bf8 <__sfp_lock_acquire+0x8>)
 8010bf2:	f000 b8b8 	b.w	8010d66 <__retarget_lock_acquire_recursive>
 8010bf6:	bf00      	nop
 8010bf8:	2400147c 	.word	0x2400147c

08010bfc <__sfp_lock_release>:
 8010bfc:	4801      	ldr	r0, [pc, #4]	; (8010c04 <__sfp_lock_release+0x8>)
 8010bfe:	f000 b8b3 	b.w	8010d68 <__retarget_lock_release_recursive>
 8010c02:	bf00      	nop
 8010c04:	2400147c 	.word	0x2400147c

08010c08 <__sinit_lock_acquire>:
 8010c08:	4801      	ldr	r0, [pc, #4]	; (8010c10 <__sinit_lock_acquire+0x8>)
 8010c0a:	f000 b8ac 	b.w	8010d66 <__retarget_lock_acquire_recursive>
 8010c0e:	bf00      	nop
 8010c10:	24001477 	.word	0x24001477

08010c14 <__sinit_lock_release>:
 8010c14:	4801      	ldr	r0, [pc, #4]	; (8010c1c <__sinit_lock_release+0x8>)
 8010c16:	f000 b8a7 	b.w	8010d68 <__retarget_lock_release_recursive>
 8010c1a:	bf00      	nop
 8010c1c:	24001477 	.word	0x24001477

08010c20 <__sinit>:
 8010c20:	b510      	push	{r4, lr}
 8010c22:	4604      	mov	r4, r0
 8010c24:	f7ff fff0 	bl	8010c08 <__sinit_lock_acquire>
 8010c28:	69a3      	ldr	r3, [r4, #24]
 8010c2a:	b11b      	cbz	r3, 8010c34 <__sinit+0x14>
 8010c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c30:	f7ff bff0 	b.w	8010c14 <__sinit_lock_release>
 8010c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c38:	6523      	str	r3, [r4, #80]	; 0x50
 8010c3a:	4b13      	ldr	r3, [pc, #76]	; (8010c88 <__sinit+0x68>)
 8010c3c:	4a13      	ldr	r2, [pc, #76]	; (8010c8c <__sinit+0x6c>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c42:	42a3      	cmp	r3, r4
 8010c44:	bf04      	itt	eq
 8010c46:	2301      	moveq	r3, #1
 8010c48:	61a3      	streq	r3, [r4, #24]
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 f820 	bl	8010c90 <__sfp>
 8010c50:	6060      	str	r0, [r4, #4]
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 f81c 	bl	8010c90 <__sfp>
 8010c58:	60a0      	str	r0, [r4, #8]
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f000 f818 	bl	8010c90 <__sfp>
 8010c60:	2200      	movs	r2, #0
 8010c62:	60e0      	str	r0, [r4, #12]
 8010c64:	2104      	movs	r1, #4
 8010c66:	6860      	ldr	r0, [r4, #4]
 8010c68:	f7ff ff82 	bl	8010b70 <std>
 8010c6c:	68a0      	ldr	r0, [r4, #8]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	2109      	movs	r1, #9
 8010c72:	f7ff ff7d 	bl	8010b70 <std>
 8010c76:	68e0      	ldr	r0, [r4, #12]
 8010c78:	2202      	movs	r2, #2
 8010c7a:	2112      	movs	r1, #18
 8010c7c:	f7ff ff78 	bl	8010b70 <std>
 8010c80:	2301      	movs	r3, #1
 8010c82:	61a3      	str	r3, [r4, #24]
 8010c84:	e7d2      	b.n	8010c2c <__sinit+0xc>
 8010c86:	bf00      	nop
 8010c88:	08013788 	.word	0x08013788
 8010c8c:	08010bb9 	.word	0x08010bb9

08010c90 <__sfp>:
 8010c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c92:	4607      	mov	r7, r0
 8010c94:	f7ff ffac 	bl	8010bf0 <__sfp_lock_acquire>
 8010c98:	4b1e      	ldr	r3, [pc, #120]	; (8010d14 <__sfp+0x84>)
 8010c9a:	681e      	ldr	r6, [r3, #0]
 8010c9c:	69b3      	ldr	r3, [r6, #24]
 8010c9e:	b913      	cbnz	r3, 8010ca6 <__sfp+0x16>
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f7ff ffbd 	bl	8010c20 <__sinit>
 8010ca6:	3648      	adds	r6, #72	; 0x48
 8010ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	d503      	bpl.n	8010cb8 <__sfp+0x28>
 8010cb0:	6833      	ldr	r3, [r6, #0]
 8010cb2:	b30b      	cbz	r3, 8010cf8 <__sfp+0x68>
 8010cb4:	6836      	ldr	r6, [r6, #0]
 8010cb6:	e7f7      	b.n	8010ca8 <__sfp+0x18>
 8010cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010cbc:	b9d5      	cbnz	r5, 8010cf4 <__sfp+0x64>
 8010cbe:	4b16      	ldr	r3, [pc, #88]	; (8010d18 <__sfp+0x88>)
 8010cc0:	60e3      	str	r3, [r4, #12]
 8010cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8010cc8:	f000 f84c 	bl	8010d64 <__retarget_lock_init_recursive>
 8010ccc:	f7ff ff96 	bl	8010bfc <__sfp_lock_release>
 8010cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010cd8:	6025      	str	r5, [r4, #0]
 8010cda:	61a5      	str	r5, [r4, #24]
 8010cdc:	2208      	movs	r2, #8
 8010cde:	4629      	mov	r1, r5
 8010ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ce4:	f7fe faf4 	bl	800f2d0 <memset>
 8010ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cf4:	3468      	adds	r4, #104	; 0x68
 8010cf6:	e7d9      	b.n	8010cac <__sfp+0x1c>
 8010cf8:	2104      	movs	r1, #4
 8010cfa:	4638      	mov	r0, r7
 8010cfc:	f7ff ff62 	bl	8010bc4 <__sfmoreglue>
 8010d00:	4604      	mov	r4, r0
 8010d02:	6030      	str	r0, [r6, #0]
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d1d5      	bne.n	8010cb4 <__sfp+0x24>
 8010d08:	f7ff ff78 	bl	8010bfc <__sfp_lock_release>
 8010d0c:	230c      	movs	r3, #12
 8010d0e:	603b      	str	r3, [r7, #0]
 8010d10:	e7ee      	b.n	8010cf0 <__sfp+0x60>
 8010d12:	bf00      	nop
 8010d14:	08013788 	.word	0x08013788
 8010d18:	ffff0001 	.word	0xffff0001

08010d1c <_fwalk_reent>:
 8010d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d20:	4606      	mov	r6, r0
 8010d22:	4688      	mov	r8, r1
 8010d24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d28:	2700      	movs	r7, #0
 8010d2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d2e:	f1b9 0901 	subs.w	r9, r9, #1
 8010d32:	d505      	bpl.n	8010d40 <_fwalk_reent+0x24>
 8010d34:	6824      	ldr	r4, [r4, #0]
 8010d36:	2c00      	cmp	r4, #0
 8010d38:	d1f7      	bne.n	8010d2a <_fwalk_reent+0xe>
 8010d3a:	4638      	mov	r0, r7
 8010d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d40:	89ab      	ldrh	r3, [r5, #12]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d907      	bls.n	8010d56 <_fwalk_reent+0x3a>
 8010d46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	d003      	beq.n	8010d56 <_fwalk_reent+0x3a>
 8010d4e:	4629      	mov	r1, r5
 8010d50:	4630      	mov	r0, r6
 8010d52:	47c0      	blx	r8
 8010d54:	4307      	orrs	r7, r0
 8010d56:	3568      	adds	r5, #104	; 0x68
 8010d58:	e7e9      	b.n	8010d2e <_fwalk_reent+0x12>
	...

08010d5c <_localeconv_r>:
 8010d5c:	4800      	ldr	r0, [pc, #0]	; (8010d60 <_localeconv_r+0x4>)
 8010d5e:	4770      	bx	lr
 8010d60:	24000374 	.word	0x24000374

08010d64 <__retarget_lock_init_recursive>:
 8010d64:	4770      	bx	lr

08010d66 <__retarget_lock_acquire_recursive>:
 8010d66:	4770      	bx	lr

08010d68 <__retarget_lock_release_recursive>:
 8010d68:	4770      	bx	lr

08010d6a <__swhatbuf_r>:
 8010d6a:	b570      	push	{r4, r5, r6, lr}
 8010d6c:	460e      	mov	r6, r1
 8010d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d72:	2900      	cmp	r1, #0
 8010d74:	b096      	sub	sp, #88	; 0x58
 8010d76:	4614      	mov	r4, r2
 8010d78:	461d      	mov	r5, r3
 8010d7a:	da07      	bge.n	8010d8c <__swhatbuf_r+0x22>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	602b      	str	r3, [r5, #0]
 8010d80:	89b3      	ldrh	r3, [r6, #12]
 8010d82:	061a      	lsls	r2, r3, #24
 8010d84:	d410      	bmi.n	8010da8 <__swhatbuf_r+0x3e>
 8010d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d8a:	e00e      	b.n	8010daa <__swhatbuf_r+0x40>
 8010d8c:	466a      	mov	r2, sp
 8010d8e:	f000 fd45 	bl	801181c <_fstat_r>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	dbf2      	blt.n	8010d7c <__swhatbuf_r+0x12>
 8010d96:	9a01      	ldr	r2, [sp, #4]
 8010d98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010da0:	425a      	negs	r2, r3
 8010da2:	415a      	adcs	r2, r3
 8010da4:	602a      	str	r2, [r5, #0]
 8010da6:	e7ee      	b.n	8010d86 <__swhatbuf_r+0x1c>
 8010da8:	2340      	movs	r3, #64	; 0x40
 8010daa:	2000      	movs	r0, #0
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	b016      	add	sp, #88	; 0x58
 8010db0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010db4 <__smakebuf_r>:
 8010db4:	898b      	ldrh	r3, [r1, #12]
 8010db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010db8:	079d      	lsls	r5, r3, #30
 8010dba:	4606      	mov	r6, r0
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	d507      	bpl.n	8010dd0 <__smakebuf_r+0x1c>
 8010dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010dc4:	6023      	str	r3, [r4, #0]
 8010dc6:	6123      	str	r3, [r4, #16]
 8010dc8:	2301      	movs	r3, #1
 8010dca:	6163      	str	r3, [r4, #20]
 8010dcc:	b002      	add	sp, #8
 8010dce:	bd70      	pop	{r4, r5, r6, pc}
 8010dd0:	ab01      	add	r3, sp, #4
 8010dd2:	466a      	mov	r2, sp
 8010dd4:	f7ff ffc9 	bl	8010d6a <__swhatbuf_r>
 8010dd8:	9900      	ldr	r1, [sp, #0]
 8010dda:	4605      	mov	r5, r0
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f000 fc1d 	bl	801161c <_malloc_r>
 8010de2:	b948      	cbnz	r0, 8010df8 <__smakebuf_r+0x44>
 8010de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010de8:	059a      	lsls	r2, r3, #22
 8010dea:	d4ef      	bmi.n	8010dcc <__smakebuf_r+0x18>
 8010dec:	f023 0303 	bic.w	r3, r3, #3
 8010df0:	f043 0302 	orr.w	r3, r3, #2
 8010df4:	81a3      	strh	r3, [r4, #12]
 8010df6:	e7e3      	b.n	8010dc0 <__smakebuf_r+0xc>
 8010df8:	4b0d      	ldr	r3, [pc, #52]	; (8010e30 <__smakebuf_r+0x7c>)
 8010dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8010dfc:	89a3      	ldrh	r3, [r4, #12]
 8010dfe:	6020      	str	r0, [r4, #0]
 8010e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e04:	81a3      	strh	r3, [r4, #12]
 8010e06:	9b00      	ldr	r3, [sp, #0]
 8010e08:	6163      	str	r3, [r4, #20]
 8010e0a:	9b01      	ldr	r3, [sp, #4]
 8010e0c:	6120      	str	r0, [r4, #16]
 8010e0e:	b15b      	cbz	r3, 8010e28 <__smakebuf_r+0x74>
 8010e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e14:	4630      	mov	r0, r6
 8010e16:	f000 fd13 	bl	8011840 <_isatty_r>
 8010e1a:	b128      	cbz	r0, 8010e28 <__smakebuf_r+0x74>
 8010e1c:	89a3      	ldrh	r3, [r4, #12]
 8010e1e:	f023 0303 	bic.w	r3, r3, #3
 8010e22:	f043 0301 	orr.w	r3, r3, #1
 8010e26:	81a3      	strh	r3, [r4, #12]
 8010e28:	89a0      	ldrh	r0, [r4, #12]
 8010e2a:	4305      	orrs	r5, r0
 8010e2c:	81a5      	strh	r5, [r4, #12]
 8010e2e:	e7cd      	b.n	8010dcc <__smakebuf_r+0x18>
 8010e30:	08010bb9 	.word	0x08010bb9

08010e34 <malloc>:
 8010e34:	4b02      	ldr	r3, [pc, #8]	; (8010e40 <malloc+0xc>)
 8010e36:	4601      	mov	r1, r0
 8010e38:	6818      	ldr	r0, [r3, #0]
 8010e3a:	f000 bbef 	b.w	801161c <_malloc_r>
 8010e3e:	bf00      	nop
 8010e40:	24000220 	.word	0x24000220

08010e44 <memcpy>:
 8010e44:	440a      	add	r2, r1
 8010e46:	4291      	cmp	r1, r2
 8010e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e4c:	d100      	bne.n	8010e50 <memcpy+0xc>
 8010e4e:	4770      	bx	lr
 8010e50:	b510      	push	{r4, lr}
 8010e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e5a:	4291      	cmp	r1, r2
 8010e5c:	d1f9      	bne.n	8010e52 <memcpy+0xe>
 8010e5e:	bd10      	pop	{r4, pc}

08010e60 <_Balloc>:
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e64:	4604      	mov	r4, r0
 8010e66:	460d      	mov	r5, r1
 8010e68:	b976      	cbnz	r6, 8010e88 <_Balloc+0x28>
 8010e6a:	2010      	movs	r0, #16
 8010e6c:	f7ff ffe2 	bl	8010e34 <malloc>
 8010e70:	4602      	mov	r2, r0
 8010e72:	6260      	str	r0, [r4, #36]	; 0x24
 8010e74:	b920      	cbnz	r0, 8010e80 <_Balloc+0x20>
 8010e76:	4b18      	ldr	r3, [pc, #96]	; (8010ed8 <_Balloc+0x78>)
 8010e78:	4818      	ldr	r0, [pc, #96]	; (8010edc <_Balloc+0x7c>)
 8010e7a:	2166      	movs	r1, #102	; 0x66
 8010e7c:	f000 fc8e 	bl	801179c <__assert_func>
 8010e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e84:	6006      	str	r6, [r0, #0]
 8010e86:	60c6      	str	r6, [r0, #12]
 8010e88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010e8a:	68f3      	ldr	r3, [r6, #12]
 8010e8c:	b183      	cbz	r3, 8010eb0 <_Balloc+0x50>
 8010e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e96:	b9b8      	cbnz	r0, 8010ec8 <_Balloc+0x68>
 8010e98:	2101      	movs	r1, #1
 8010e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8010e9e:	1d72      	adds	r2, r6, #5
 8010ea0:	0092      	lsls	r2, r2, #2
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 fb5a 	bl	801155c <_calloc_r>
 8010ea8:	b160      	cbz	r0, 8010ec4 <_Balloc+0x64>
 8010eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010eae:	e00e      	b.n	8010ece <_Balloc+0x6e>
 8010eb0:	2221      	movs	r2, #33	; 0x21
 8010eb2:	2104      	movs	r1, #4
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f000 fb51 	bl	801155c <_calloc_r>
 8010eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ebc:	60f0      	str	r0, [r6, #12]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d1e4      	bne.n	8010e8e <_Balloc+0x2e>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	bd70      	pop	{r4, r5, r6, pc}
 8010ec8:	6802      	ldr	r2, [r0, #0]
 8010eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ed4:	e7f7      	b.n	8010ec6 <_Balloc+0x66>
 8010ed6:	bf00      	nop
 8010ed8:	080137cd 	.word	0x080137cd
 8010edc:	080138b4 	.word	0x080138b4

08010ee0 <_Bfree>:
 8010ee0:	b570      	push	{r4, r5, r6, lr}
 8010ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	b976      	cbnz	r6, 8010f08 <_Bfree+0x28>
 8010eea:	2010      	movs	r0, #16
 8010eec:	f7ff ffa2 	bl	8010e34 <malloc>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	6268      	str	r0, [r5, #36]	; 0x24
 8010ef4:	b920      	cbnz	r0, 8010f00 <_Bfree+0x20>
 8010ef6:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <_Bfree+0x3c>)
 8010ef8:	4809      	ldr	r0, [pc, #36]	; (8010f20 <_Bfree+0x40>)
 8010efa:	218a      	movs	r1, #138	; 0x8a
 8010efc:	f000 fc4e 	bl	801179c <__assert_func>
 8010f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f04:	6006      	str	r6, [r0, #0]
 8010f06:	60c6      	str	r6, [r0, #12]
 8010f08:	b13c      	cbz	r4, 8010f1a <_Bfree+0x3a>
 8010f0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010f0c:	6862      	ldr	r2, [r4, #4]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f14:	6021      	str	r1, [r4, #0]
 8010f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	080137cd 	.word	0x080137cd
 8010f20:	080138b4 	.word	0x080138b4

08010f24 <__multadd>:
 8010f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f28:	690e      	ldr	r6, [r1, #16]
 8010f2a:	4607      	mov	r7, r0
 8010f2c:	4698      	mov	r8, r3
 8010f2e:	460c      	mov	r4, r1
 8010f30:	f101 0014 	add.w	r0, r1, #20
 8010f34:	2300      	movs	r3, #0
 8010f36:	6805      	ldr	r5, [r0, #0]
 8010f38:	b2a9      	uxth	r1, r5
 8010f3a:	fb02 8101 	mla	r1, r2, r1, r8
 8010f3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010f42:	0c2d      	lsrs	r5, r5, #16
 8010f44:	fb02 c505 	mla	r5, r2, r5, ip
 8010f48:	b289      	uxth	r1, r1
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010f50:	429e      	cmp	r6, r3
 8010f52:	f840 1b04 	str.w	r1, [r0], #4
 8010f56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010f5a:	dcec      	bgt.n	8010f36 <__multadd+0x12>
 8010f5c:	f1b8 0f00 	cmp.w	r8, #0
 8010f60:	d022      	beq.n	8010fa8 <__multadd+0x84>
 8010f62:	68a3      	ldr	r3, [r4, #8]
 8010f64:	42b3      	cmp	r3, r6
 8010f66:	dc19      	bgt.n	8010f9c <__multadd+0x78>
 8010f68:	6861      	ldr	r1, [r4, #4]
 8010f6a:	4638      	mov	r0, r7
 8010f6c:	3101      	adds	r1, #1
 8010f6e:	f7ff ff77 	bl	8010e60 <_Balloc>
 8010f72:	4605      	mov	r5, r0
 8010f74:	b928      	cbnz	r0, 8010f82 <__multadd+0x5e>
 8010f76:	4602      	mov	r2, r0
 8010f78:	4b0d      	ldr	r3, [pc, #52]	; (8010fb0 <__multadd+0x8c>)
 8010f7a:	480e      	ldr	r0, [pc, #56]	; (8010fb4 <__multadd+0x90>)
 8010f7c:	21b5      	movs	r1, #181	; 0xb5
 8010f7e:	f000 fc0d 	bl	801179c <__assert_func>
 8010f82:	6922      	ldr	r2, [r4, #16]
 8010f84:	3202      	adds	r2, #2
 8010f86:	f104 010c 	add.w	r1, r4, #12
 8010f8a:	0092      	lsls	r2, r2, #2
 8010f8c:	300c      	adds	r0, #12
 8010f8e:	f7ff ff59 	bl	8010e44 <memcpy>
 8010f92:	4621      	mov	r1, r4
 8010f94:	4638      	mov	r0, r7
 8010f96:	f7ff ffa3 	bl	8010ee0 <_Bfree>
 8010f9a:	462c      	mov	r4, r5
 8010f9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010fa0:	3601      	adds	r6, #1
 8010fa2:	f8c3 8014 	str.w	r8, [r3, #20]
 8010fa6:	6126      	str	r6, [r4, #16]
 8010fa8:	4620      	mov	r0, r4
 8010faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fae:	bf00      	nop
 8010fb0:	08013843 	.word	0x08013843
 8010fb4:	080138b4 	.word	0x080138b4

08010fb8 <__hi0bits>:
 8010fb8:	0c03      	lsrs	r3, r0, #16
 8010fba:	041b      	lsls	r3, r3, #16
 8010fbc:	b9d3      	cbnz	r3, 8010ff4 <__hi0bits+0x3c>
 8010fbe:	0400      	lsls	r0, r0, #16
 8010fc0:	2310      	movs	r3, #16
 8010fc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010fc6:	bf04      	itt	eq
 8010fc8:	0200      	lsleq	r0, r0, #8
 8010fca:	3308      	addeq	r3, #8
 8010fcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010fd0:	bf04      	itt	eq
 8010fd2:	0100      	lsleq	r0, r0, #4
 8010fd4:	3304      	addeq	r3, #4
 8010fd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010fda:	bf04      	itt	eq
 8010fdc:	0080      	lsleq	r0, r0, #2
 8010fde:	3302      	addeq	r3, #2
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	db05      	blt.n	8010ff0 <__hi0bits+0x38>
 8010fe4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010fe8:	f103 0301 	add.w	r3, r3, #1
 8010fec:	bf08      	it	eq
 8010fee:	2320      	moveq	r3, #32
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	4770      	bx	lr
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	e7e4      	b.n	8010fc2 <__hi0bits+0xa>

08010ff8 <__lo0bits>:
 8010ff8:	6803      	ldr	r3, [r0, #0]
 8010ffa:	f013 0207 	ands.w	r2, r3, #7
 8010ffe:	4601      	mov	r1, r0
 8011000:	d00b      	beq.n	801101a <__lo0bits+0x22>
 8011002:	07da      	lsls	r2, r3, #31
 8011004:	d424      	bmi.n	8011050 <__lo0bits+0x58>
 8011006:	0798      	lsls	r0, r3, #30
 8011008:	bf49      	itett	mi
 801100a:	085b      	lsrmi	r3, r3, #1
 801100c:	089b      	lsrpl	r3, r3, #2
 801100e:	2001      	movmi	r0, #1
 8011010:	600b      	strmi	r3, [r1, #0]
 8011012:	bf5c      	itt	pl
 8011014:	600b      	strpl	r3, [r1, #0]
 8011016:	2002      	movpl	r0, #2
 8011018:	4770      	bx	lr
 801101a:	b298      	uxth	r0, r3
 801101c:	b9b0      	cbnz	r0, 801104c <__lo0bits+0x54>
 801101e:	0c1b      	lsrs	r3, r3, #16
 8011020:	2010      	movs	r0, #16
 8011022:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011026:	bf04      	itt	eq
 8011028:	0a1b      	lsreq	r3, r3, #8
 801102a:	3008      	addeq	r0, #8
 801102c:	071a      	lsls	r2, r3, #28
 801102e:	bf04      	itt	eq
 8011030:	091b      	lsreq	r3, r3, #4
 8011032:	3004      	addeq	r0, #4
 8011034:	079a      	lsls	r2, r3, #30
 8011036:	bf04      	itt	eq
 8011038:	089b      	lsreq	r3, r3, #2
 801103a:	3002      	addeq	r0, #2
 801103c:	07da      	lsls	r2, r3, #31
 801103e:	d403      	bmi.n	8011048 <__lo0bits+0x50>
 8011040:	085b      	lsrs	r3, r3, #1
 8011042:	f100 0001 	add.w	r0, r0, #1
 8011046:	d005      	beq.n	8011054 <__lo0bits+0x5c>
 8011048:	600b      	str	r3, [r1, #0]
 801104a:	4770      	bx	lr
 801104c:	4610      	mov	r0, r2
 801104e:	e7e8      	b.n	8011022 <__lo0bits+0x2a>
 8011050:	2000      	movs	r0, #0
 8011052:	4770      	bx	lr
 8011054:	2020      	movs	r0, #32
 8011056:	4770      	bx	lr

08011058 <__i2b>:
 8011058:	b510      	push	{r4, lr}
 801105a:	460c      	mov	r4, r1
 801105c:	2101      	movs	r1, #1
 801105e:	f7ff feff 	bl	8010e60 <_Balloc>
 8011062:	4602      	mov	r2, r0
 8011064:	b928      	cbnz	r0, 8011072 <__i2b+0x1a>
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <__i2b+0x24>)
 8011068:	4805      	ldr	r0, [pc, #20]	; (8011080 <__i2b+0x28>)
 801106a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801106e:	f000 fb95 	bl	801179c <__assert_func>
 8011072:	2301      	movs	r3, #1
 8011074:	6144      	str	r4, [r0, #20]
 8011076:	6103      	str	r3, [r0, #16]
 8011078:	bd10      	pop	{r4, pc}
 801107a:	bf00      	nop
 801107c:	08013843 	.word	0x08013843
 8011080:	080138b4 	.word	0x080138b4

08011084 <__multiply>:
 8011084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011088:	4614      	mov	r4, r2
 801108a:	690a      	ldr	r2, [r1, #16]
 801108c:	6923      	ldr	r3, [r4, #16]
 801108e:	429a      	cmp	r2, r3
 8011090:	bfb8      	it	lt
 8011092:	460b      	movlt	r3, r1
 8011094:	460d      	mov	r5, r1
 8011096:	bfbc      	itt	lt
 8011098:	4625      	movlt	r5, r4
 801109a:	461c      	movlt	r4, r3
 801109c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80110a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80110a4:	68ab      	ldr	r3, [r5, #8]
 80110a6:	6869      	ldr	r1, [r5, #4]
 80110a8:	eb0a 0709 	add.w	r7, sl, r9
 80110ac:	42bb      	cmp	r3, r7
 80110ae:	b085      	sub	sp, #20
 80110b0:	bfb8      	it	lt
 80110b2:	3101      	addlt	r1, #1
 80110b4:	f7ff fed4 	bl	8010e60 <_Balloc>
 80110b8:	b930      	cbnz	r0, 80110c8 <__multiply+0x44>
 80110ba:	4602      	mov	r2, r0
 80110bc:	4b42      	ldr	r3, [pc, #264]	; (80111c8 <__multiply+0x144>)
 80110be:	4843      	ldr	r0, [pc, #268]	; (80111cc <__multiply+0x148>)
 80110c0:	f240 115d 	movw	r1, #349	; 0x15d
 80110c4:	f000 fb6a 	bl	801179c <__assert_func>
 80110c8:	f100 0614 	add.w	r6, r0, #20
 80110cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80110d0:	4633      	mov	r3, r6
 80110d2:	2200      	movs	r2, #0
 80110d4:	4543      	cmp	r3, r8
 80110d6:	d31e      	bcc.n	8011116 <__multiply+0x92>
 80110d8:	f105 0c14 	add.w	ip, r5, #20
 80110dc:	f104 0314 	add.w	r3, r4, #20
 80110e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80110e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80110e8:	9202      	str	r2, [sp, #8]
 80110ea:	ebac 0205 	sub.w	r2, ip, r5
 80110ee:	3a15      	subs	r2, #21
 80110f0:	f022 0203 	bic.w	r2, r2, #3
 80110f4:	3204      	adds	r2, #4
 80110f6:	f105 0115 	add.w	r1, r5, #21
 80110fa:	458c      	cmp	ip, r1
 80110fc:	bf38      	it	cc
 80110fe:	2204      	movcc	r2, #4
 8011100:	9201      	str	r2, [sp, #4]
 8011102:	9a02      	ldr	r2, [sp, #8]
 8011104:	9303      	str	r3, [sp, #12]
 8011106:	429a      	cmp	r2, r3
 8011108:	d808      	bhi.n	801111c <__multiply+0x98>
 801110a:	2f00      	cmp	r7, #0
 801110c:	dc55      	bgt.n	80111ba <__multiply+0x136>
 801110e:	6107      	str	r7, [r0, #16]
 8011110:	b005      	add	sp, #20
 8011112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011116:	f843 2b04 	str.w	r2, [r3], #4
 801111a:	e7db      	b.n	80110d4 <__multiply+0x50>
 801111c:	f8b3 a000 	ldrh.w	sl, [r3]
 8011120:	f1ba 0f00 	cmp.w	sl, #0
 8011124:	d020      	beq.n	8011168 <__multiply+0xe4>
 8011126:	f105 0e14 	add.w	lr, r5, #20
 801112a:	46b1      	mov	r9, r6
 801112c:	2200      	movs	r2, #0
 801112e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011132:	f8d9 b000 	ldr.w	fp, [r9]
 8011136:	b2a1      	uxth	r1, r4
 8011138:	fa1f fb8b 	uxth.w	fp, fp
 801113c:	fb0a b101 	mla	r1, sl, r1, fp
 8011140:	4411      	add	r1, r2
 8011142:	f8d9 2000 	ldr.w	r2, [r9]
 8011146:	0c24      	lsrs	r4, r4, #16
 8011148:	0c12      	lsrs	r2, r2, #16
 801114a:	fb0a 2404 	mla	r4, sl, r4, r2
 801114e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011152:	b289      	uxth	r1, r1
 8011154:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011158:	45f4      	cmp	ip, lr
 801115a:	f849 1b04 	str.w	r1, [r9], #4
 801115e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011162:	d8e4      	bhi.n	801112e <__multiply+0xaa>
 8011164:	9901      	ldr	r1, [sp, #4]
 8011166:	5072      	str	r2, [r6, r1]
 8011168:	9a03      	ldr	r2, [sp, #12]
 801116a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801116e:	3304      	adds	r3, #4
 8011170:	f1b9 0f00 	cmp.w	r9, #0
 8011174:	d01f      	beq.n	80111b6 <__multiply+0x132>
 8011176:	6834      	ldr	r4, [r6, #0]
 8011178:	f105 0114 	add.w	r1, r5, #20
 801117c:	46b6      	mov	lr, r6
 801117e:	f04f 0a00 	mov.w	sl, #0
 8011182:	880a      	ldrh	r2, [r1, #0]
 8011184:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011188:	fb09 b202 	mla	r2, r9, r2, fp
 801118c:	4492      	add	sl, r2
 801118e:	b2a4      	uxth	r4, r4
 8011190:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011194:	f84e 4b04 	str.w	r4, [lr], #4
 8011198:	f851 4b04 	ldr.w	r4, [r1], #4
 801119c:	f8be 2000 	ldrh.w	r2, [lr]
 80111a0:	0c24      	lsrs	r4, r4, #16
 80111a2:	fb09 2404 	mla	r4, r9, r4, r2
 80111a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80111aa:	458c      	cmp	ip, r1
 80111ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80111b0:	d8e7      	bhi.n	8011182 <__multiply+0xfe>
 80111b2:	9a01      	ldr	r2, [sp, #4]
 80111b4:	50b4      	str	r4, [r6, r2]
 80111b6:	3604      	adds	r6, #4
 80111b8:	e7a3      	b.n	8011102 <__multiply+0x7e>
 80111ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1a5      	bne.n	801110e <__multiply+0x8a>
 80111c2:	3f01      	subs	r7, #1
 80111c4:	e7a1      	b.n	801110a <__multiply+0x86>
 80111c6:	bf00      	nop
 80111c8:	08013843 	.word	0x08013843
 80111cc:	080138b4 	.word	0x080138b4

080111d0 <__pow5mult>:
 80111d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d4:	4615      	mov	r5, r2
 80111d6:	f012 0203 	ands.w	r2, r2, #3
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	d007      	beq.n	80111f0 <__pow5mult+0x20>
 80111e0:	4c25      	ldr	r4, [pc, #148]	; (8011278 <__pow5mult+0xa8>)
 80111e2:	3a01      	subs	r2, #1
 80111e4:	2300      	movs	r3, #0
 80111e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111ea:	f7ff fe9b 	bl	8010f24 <__multadd>
 80111ee:	4607      	mov	r7, r0
 80111f0:	10ad      	asrs	r5, r5, #2
 80111f2:	d03d      	beq.n	8011270 <__pow5mult+0xa0>
 80111f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80111f6:	b97c      	cbnz	r4, 8011218 <__pow5mult+0x48>
 80111f8:	2010      	movs	r0, #16
 80111fa:	f7ff fe1b 	bl	8010e34 <malloc>
 80111fe:	4602      	mov	r2, r0
 8011200:	6270      	str	r0, [r6, #36]	; 0x24
 8011202:	b928      	cbnz	r0, 8011210 <__pow5mult+0x40>
 8011204:	4b1d      	ldr	r3, [pc, #116]	; (801127c <__pow5mult+0xac>)
 8011206:	481e      	ldr	r0, [pc, #120]	; (8011280 <__pow5mult+0xb0>)
 8011208:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801120c:	f000 fac6 	bl	801179c <__assert_func>
 8011210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011214:	6004      	str	r4, [r0, #0]
 8011216:	60c4      	str	r4, [r0, #12]
 8011218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801121c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011220:	b94c      	cbnz	r4, 8011236 <__pow5mult+0x66>
 8011222:	f240 2171 	movw	r1, #625	; 0x271
 8011226:	4630      	mov	r0, r6
 8011228:	f7ff ff16 	bl	8011058 <__i2b>
 801122c:	2300      	movs	r3, #0
 801122e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011232:	4604      	mov	r4, r0
 8011234:	6003      	str	r3, [r0, #0]
 8011236:	f04f 0900 	mov.w	r9, #0
 801123a:	07eb      	lsls	r3, r5, #31
 801123c:	d50a      	bpl.n	8011254 <__pow5mult+0x84>
 801123e:	4639      	mov	r1, r7
 8011240:	4622      	mov	r2, r4
 8011242:	4630      	mov	r0, r6
 8011244:	f7ff ff1e 	bl	8011084 <__multiply>
 8011248:	4639      	mov	r1, r7
 801124a:	4680      	mov	r8, r0
 801124c:	4630      	mov	r0, r6
 801124e:	f7ff fe47 	bl	8010ee0 <_Bfree>
 8011252:	4647      	mov	r7, r8
 8011254:	106d      	asrs	r5, r5, #1
 8011256:	d00b      	beq.n	8011270 <__pow5mult+0xa0>
 8011258:	6820      	ldr	r0, [r4, #0]
 801125a:	b938      	cbnz	r0, 801126c <__pow5mult+0x9c>
 801125c:	4622      	mov	r2, r4
 801125e:	4621      	mov	r1, r4
 8011260:	4630      	mov	r0, r6
 8011262:	f7ff ff0f 	bl	8011084 <__multiply>
 8011266:	6020      	str	r0, [r4, #0]
 8011268:	f8c0 9000 	str.w	r9, [r0]
 801126c:	4604      	mov	r4, r0
 801126e:	e7e4      	b.n	801123a <__pow5mult+0x6a>
 8011270:	4638      	mov	r0, r7
 8011272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011276:	bf00      	nop
 8011278:	08013a08 	.word	0x08013a08
 801127c:	080137cd 	.word	0x080137cd
 8011280:	080138b4 	.word	0x080138b4

08011284 <__lshift>:
 8011284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011288:	460c      	mov	r4, r1
 801128a:	6849      	ldr	r1, [r1, #4]
 801128c:	6923      	ldr	r3, [r4, #16]
 801128e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011292:	68a3      	ldr	r3, [r4, #8]
 8011294:	4607      	mov	r7, r0
 8011296:	4691      	mov	r9, r2
 8011298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801129c:	f108 0601 	add.w	r6, r8, #1
 80112a0:	42b3      	cmp	r3, r6
 80112a2:	db0b      	blt.n	80112bc <__lshift+0x38>
 80112a4:	4638      	mov	r0, r7
 80112a6:	f7ff fddb 	bl	8010e60 <_Balloc>
 80112aa:	4605      	mov	r5, r0
 80112ac:	b948      	cbnz	r0, 80112c2 <__lshift+0x3e>
 80112ae:	4602      	mov	r2, r0
 80112b0:	4b28      	ldr	r3, [pc, #160]	; (8011354 <__lshift+0xd0>)
 80112b2:	4829      	ldr	r0, [pc, #164]	; (8011358 <__lshift+0xd4>)
 80112b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80112b8:	f000 fa70 	bl	801179c <__assert_func>
 80112bc:	3101      	adds	r1, #1
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	e7ee      	b.n	80112a0 <__lshift+0x1c>
 80112c2:	2300      	movs	r3, #0
 80112c4:	f100 0114 	add.w	r1, r0, #20
 80112c8:	f100 0210 	add.w	r2, r0, #16
 80112cc:	4618      	mov	r0, r3
 80112ce:	4553      	cmp	r3, sl
 80112d0:	db33      	blt.n	801133a <__lshift+0xb6>
 80112d2:	6920      	ldr	r0, [r4, #16]
 80112d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112d8:	f104 0314 	add.w	r3, r4, #20
 80112dc:	f019 091f 	ands.w	r9, r9, #31
 80112e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112e8:	d02b      	beq.n	8011342 <__lshift+0xbe>
 80112ea:	f1c9 0e20 	rsb	lr, r9, #32
 80112ee:	468a      	mov	sl, r1
 80112f0:	2200      	movs	r2, #0
 80112f2:	6818      	ldr	r0, [r3, #0]
 80112f4:	fa00 f009 	lsl.w	r0, r0, r9
 80112f8:	4302      	orrs	r2, r0
 80112fa:	f84a 2b04 	str.w	r2, [sl], #4
 80112fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011302:	459c      	cmp	ip, r3
 8011304:	fa22 f20e 	lsr.w	r2, r2, lr
 8011308:	d8f3      	bhi.n	80112f2 <__lshift+0x6e>
 801130a:	ebac 0304 	sub.w	r3, ip, r4
 801130e:	3b15      	subs	r3, #21
 8011310:	f023 0303 	bic.w	r3, r3, #3
 8011314:	3304      	adds	r3, #4
 8011316:	f104 0015 	add.w	r0, r4, #21
 801131a:	4584      	cmp	ip, r0
 801131c:	bf38      	it	cc
 801131e:	2304      	movcc	r3, #4
 8011320:	50ca      	str	r2, [r1, r3]
 8011322:	b10a      	cbz	r2, 8011328 <__lshift+0xa4>
 8011324:	f108 0602 	add.w	r6, r8, #2
 8011328:	3e01      	subs	r6, #1
 801132a:	4638      	mov	r0, r7
 801132c:	612e      	str	r6, [r5, #16]
 801132e:	4621      	mov	r1, r4
 8011330:	f7ff fdd6 	bl	8010ee0 <_Bfree>
 8011334:	4628      	mov	r0, r5
 8011336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133a:	f842 0f04 	str.w	r0, [r2, #4]!
 801133e:	3301      	adds	r3, #1
 8011340:	e7c5      	b.n	80112ce <__lshift+0x4a>
 8011342:	3904      	subs	r1, #4
 8011344:	f853 2b04 	ldr.w	r2, [r3], #4
 8011348:	f841 2f04 	str.w	r2, [r1, #4]!
 801134c:	459c      	cmp	ip, r3
 801134e:	d8f9      	bhi.n	8011344 <__lshift+0xc0>
 8011350:	e7ea      	b.n	8011328 <__lshift+0xa4>
 8011352:	bf00      	nop
 8011354:	08013843 	.word	0x08013843
 8011358:	080138b4 	.word	0x080138b4

0801135c <__mcmp>:
 801135c:	b530      	push	{r4, r5, lr}
 801135e:	6902      	ldr	r2, [r0, #16]
 8011360:	690c      	ldr	r4, [r1, #16]
 8011362:	1b12      	subs	r2, r2, r4
 8011364:	d10e      	bne.n	8011384 <__mcmp+0x28>
 8011366:	f100 0314 	add.w	r3, r0, #20
 801136a:	3114      	adds	r1, #20
 801136c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011374:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011378:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801137c:	42a5      	cmp	r5, r4
 801137e:	d003      	beq.n	8011388 <__mcmp+0x2c>
 8011380:	d305      	bcc.n	801138e <__mcmp+0x32>
 8011382:	2201      	movs	r2, #1
 8011384:	4610      	mov	r0, r2
 8011386:	bd30      	pop	{r4, r5, pc}
 8011388:	4283      	cmp	r3, r0
 801138a:	d3f3      	bcc.n	8011374 <__mcmp+0x18>
 801138c:	e7fa      	b.n	8011384 <__mcmp+0x28>
 801138e:	f04f 32ff 	mov.w	r2, #4294967295
 8011392:	e7f7      	b.n	8011384 <__mcmp+0x28>

08011394 <__mdiff>:
 8011394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	460c      	mov	r4, r1
 801139a:	4606      	mov	r6, r0
 801139c:	4611      	mov	r1, r2
 801139e:	4620      	mov	r0, r4
 80113a0:	4617      	mov	r7, r2
 80113a2:	f7ff ffdb 	bl	801135c <__mcmp>
 80113a6:	1e05      	subs	r5, r0, #0
 80113a8:	d110      	bne.n	80113cc <__mdiff+0x38>
 80113aa:	4629      	mov	r1, r5
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ff fd57 	bl	8010e60 <_Balloc>
 80113b2:	b930      	cbnz	r0, 80113c2 <__mdiff+0x2e>
 80113b4:	4b39      	ldr	r3, [pc, #228]	; (801149c <__mdiff+0x108>)
 80113b6:	4602      	mov	r2, r0
 80113b8:	f240 2132 	movw	r1, #562	; 0x232
 80113bc:	4838      	ldr	r0, [pc, #224]	; (80114a0 <__mdiff+0x10c>)
 80113be:	f000 f9ed 	bl	801179c <__assert_func>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113cc:	bfa4      	itt	ge
 80113ce:	463b      	movge	r3, r7
 80113d0:	4627      	movge	r7, r4
 80113d2:	4630      	mov	r0, r6
 80113d4:	6879      	ldr	r1, [r7, #4]
 80113d6:	bfa6      	itte	ge
 80113d8:	461c      	movge	r4, r3
 80113da:	2500      	movge	r5, #0
 80113dc:	2501      	movlt	r5, #1
 80113de:	f7ff fd3f 	bl	8010e60 <_Balloc>
 80113e2:	b920      	cbnz	r0, 80113ee <__mdiff+0x5a>
 80113e4:	4b2d      	ldr	r3, [pc, #180]	; (801149c <__mdiff+0x108>)
 80113e6:	4602      	mov	r2, r0
 80113e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80113ec:	e7e6      	b.n	80113bc <__mdiff+0x28>
 80113ee:	693e      	ldr	r6, [r7, #16]
 80113f0:	60c5      	str	r5, [r0, #12]
 80113f2:	6925      	ldr	r5, [r4, #16]
 80113f4:	f107 0114 	add.w	r1, r7, #20
 80113f8:	f104 0914 	add.w	r9, r4, #20
 80113fc:	f100 0e14 	add.w	lr, r0, #20
 8011400:	f107 0210 	add.w	r2, r7, #16
 8011404:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011408:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801140c:	46f2      	mov	sl, lr
 801140e:	2700      	movs	r7, #0
 8011410:	f859 3b04 	ldr.w	r3, [r9], #4
 8011414:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011418:	fa1f f883 	uxth.w	r8, r3
 801141c:	fa17 f78b 	uxtah	r7, r7, fp
 8011420:	0c1b      	lsrs	r3, r3, #16
 8011422:	eba7 0808 	sub.w	r8, r7, r8
 8011426:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801142a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801142e:	fa1f f888 	uxth.w	r8, r8
 8011432:	141f      	asrs	r7, r3, #16
 8011434:	454d      	cmp	r5, r9
 8011436:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801143a:	f84a 3b04 	str.w	r3, [sl], #4
 801143e:	d8e7      	bhi.n	8011410 <__mdiff+0x7c>
 8011440:	1b2b      	subs	r3, r5, r4
 8011442:	3b15      	subs	r3, #21
 8011444:	f023 0303 	bic.w	r3, r3, #3
 8011448:	3304      	adds	r3, #4
 801144a:	3415      	adds	r4, #21
 801144c:	42a5      	cmp	r5, r4
 801144e:	bf38      	it	cc
 8011450:	2304      	movcc	r3, #4
 8011452:	4419      	add	r1, r3
 8011454:	4473      	add	r3, lr
 8011456:	469e      	mov	lr, r3
 8011458:	460d      	mov	r5, r1
 801145a:	4565      	cmp	r5, ip
 801145c:	d30e      	bcc.n	801147c <__mdiff+0xe8>
 801145e:	f10c 0203 	add.w	r2, ip, #3
 8011462:	1a52      	subs	r2, r2, r1
 8011464:	f022 0203 	bic.w	r2, r2, #3
 8011468:	3903      	subs	r1, #3
 801146a:	458c      	cmp	ip, r1
 801146c:	bf38      	it	cc
 801146e:	2200      	movcc	r2, #0
 8011470:	441a      	add	r2, r3
 8011472:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011476:	b17b      	cbz	r3, 8011498 <__mdiff+0x104>
 8011478:	6106      	str	r6, [r0, #16]
 801147a:	e7a5      	b.n	80113c8 <__mdiff+0x34>
 801147c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011480:	fa17 f488 	uxtah	r4, r7, r8
 8011484:	1422      	asrs	r2, r4, #16
 8011486:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801148a:	b2a4      	uxth	r4, r4
 801148c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011490:	f84e 4b04 	str.w	r4, [lr], #4
 8011494:	1417      	asrs	r7, r2, #16
 8011496:	e7e0      	b.n	801145a <__mdiff+0xc6>
 8011498:	3e01      	subs	r6, #1
 801149a:	e7ea      	b.n	8011472 <__mdiff+0xde>
 801149c:	08013843 	.word	0x08013843
 80114a0:	080138b4 	.word	0x080138b4

080114a4 <__d2b>:
 80114a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114a8:	4689      	mov	r9, r1
 80114aa:	2101      	movs	r1, #1
 80114ac:	ec57 6b10 	vmov	r6, r7, d0
 80114b0:	4690      	mov	r8, r2
 80114b2:	f7ff fcd5 	bl	8010e60 <_Balloc>
 80114b6:	4604      	mov	r4, r0
 80114b8:	b930      	cbnz	r0, 80114c8 <__d2b+0x24>
 80114ba:	4602      	mov	r2, r0
 80114bc:	4b25      	ldr	r3, [pc, #148]	; (8011554 <__d2b+0xb0>)
 80114be:	4826      	ldr	r0, [pc, #152]	; (8011558 <__d2b+0xb4>)
 80114c0:	f240 310a 	movw	r1, #778	; 0x30a
 80114c4:	f000 f96a 	bl	801179c <__assert_func>
 80114c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80114cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114d0:	bb35      	cbnz	r5, 8011520 <__d2b+0x7c>
 80114d2:	2e00      	cmp	r6, #0
 80114d4:	9301      	str	r3, [sp, #4]
 80114d6:	d028      	beq.n	801152a <__d2b+0x86>
 80114d8:	4668      	mov	r0, sp
 80114da:	9600      	str	r6, [sp, #0]
 80114dc:	f7ff fd8c 	bl	8010ff8 <__lo0bits>
 80114e0:	9900      	ldr	r1, [sp, #0]
 80114e2:	b300      	cbz	r0, 8011526 <__d2b+0x82>
 80114e4:	9a01      	ldr	r2, [sp, #4]
 80114e6:	f1c0 0320 	rsb	r3, r0, #32
 80114ea:	fa02 f303 	lsl.w	r3, r2, r3
 80114ee:	430b      	orrs	r3, r1
 80114f0:	40c2      	lsrs	r2, r0
 80114f2:	6163      	str	r3, [r4, #20]
 80114f4:	9201      	str	r2, [sp, #4]
 80114f6:	9b01      	ldr	r3, [sp, #4]
 80114f8:	61a3      	str	r3, [r4, #24]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	bf14      	ite	ne
 80114fe:	2202      	movne	r2, #2
 8011500:	2201      	moveq	r2, #1
 8011502:	6122      	str	r2, [r4, #16]
 8011504:	b1d5      	cbz	r5, 801153c <__d2b+0x98>
 8011506:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801150a:	4405      	add	r5, r0
 801150c:	f8c9 5000 	str.w	r5, [r9]
 8011510:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011514:	f8c8 0000 	str.w	r0, [r8]
 8011518:	4620      	mov	r0, r4
 801151a:	b003      	add	sp, #12
 801151c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011524:	e7d5      	b.n	80114d2 <__d2b+0x2e>
 8011526:	6161      	str	r1, [r4, #20]
 8011528:	e7e5      	b.n	80114f6 <__d2b+0x52>
 801152a:	a801      	add	r0, sp, #4
 801152c:	f7ff fd64 	bl	8010ff8 <__lo0bits>
 8011530:	9b01      	ldr	r3, [sp, #4]
 8011532:	6163      	str	r3, [r4, #20]
 8011534:	2201      	movs	r2, #1
 8011536:	6122      	str	r2, [r4, #16]
 8011538:	3020      	adds	r0, #32
 801153a:	e7e3      	b.n	8011504 <__d2b+0x60>
 801153c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011544:	f8c9 0000 	str.w	r0, [r9]
 8011548:	6918      	ldr	r0, [r3, #16]
 801154a:	f7ff fd35 	bl	8010fb8 <__hi0bits>
 801154e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011552:	e7df      	b.n	8011514 <__d2b+0x70>
 8011554:	08013843 	.word	0x08013843
 8011558:	080138b4 	.word	0x080138b4

0801155c <_calloc_r>:
 801155c:	b513      	push	{r0, r1, r4, lr}
 801155e:	434a      	muls	r2, r1
 8011560:	4611      	mov	r1, r2
 8011562:	9201      	str	r2, [sp, #4]
 8011564:	f000 f85a 	bl	801161c <_malloc_r>
 8011568:	4604      	mov	r4, r0
 801156a:	b118      	cbz	r0, 8011574 <_calloc_r+0x18>
 801156c:	9a01      	ldr	r2, [sp, #4]
 801156e:	2100      	movs	r1, #0
 8011570:	f7fd feae 	bl	800f2d0 <memset>
 8011574:	4620      	mov	r0, r4
 8011576:	b002      	add	sp, #8
 8011578:	bd10      	pop	{r4, pc}
	...

0801157c <_free_r>:
 801157c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801157e:	2900      	cmp	r1, #0
 8011580:	d048      	beq.n	8011614 <_free_r+0x98>
 8011582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011586:	9001      	str	r0, [sp, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	f1a1 0404 	sub.w	r4, r1, #4
 801158e:	bfb8      	it	lt
 8011590:	18e4      	addlt	r4, r4, r3
 8011592:	f000 f989 	bl	80118a8 <__malloc_lock>
 8011596:	4a20      	ldr	r2, [pc, #128]	; (8011618 <_free_r+0x9c>)
 8011598:	9801      	ldr	r0, [sp, #4]
 801159a:	6813      	ldr	r3, [r2, #0]
 801159c:	4615      	mov	r5, r2
 801159e:	b933      	cbnz	r3, 80115ae <_free_r+0x32>
 80115a0:	6063      	str	r3, [r4, #4]
 80115a2:	6014      	str	r4, [r2, #0]
 80115a4:	b003      	add	sp, #12
 80115a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115aa:	f000 b983 	b.w	80118b4 <__malloc_unlock>
 80115ae:	42a3      	cmp	r3, r4
 80115b0:	d90b      	bls.n	80115ca <_free_r+0x4e>
 80115b2:	6821      	ldr	r1, [r4, #0]
 80115b4:	1862      	adds	r2, r4, r1
 80115b6:	4293      	cmp	r3, r2
 80115b8:	bf04      	itt	eq
 80115ba:	681a      	ldreq	r2, [r3, #0]
 80115bc:	685b      	ldreq	r3, [r3, #4]
 80115be:	6063      	str	r3, [r4, #4]
 80115c0:	bf04      	itt	eq
 80115c2:	1852      	addeq	r2, r2, r1
 80115c4:	6022      	streq	r2, [r4, #0]
 80115c6:	602c      	str	r4, [r5, #0]
 80115c8:	e7ec      	b.n	80115a4 <_free_r+0x28>
 80115ca:	461a      	mov	r2, r3
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	b10b      	cbz	r3, 80115d4 <_free_r+0x58>
 80115d0:	42a3      	cmp	r3, r4
 80115d2:	d9fa      	bls.n	80115ca <_free_r+0x4e>
 80115d4:	6811      	ldr	r1, [r2, #0]
 80115d6:	1855      	adds	r5, r2, r1
 80115d8:	42a5      	cmp	r5, r4
 80115da:	d10b      	bne.n	80115f4 <_free_r+0x78>
 80115dc:	6824      	ldr	r4, [r4, #0]
 80115de:	4421      	add	r1, r4
 80115e0:	1854      	adds	r4, r2, r1
 80115e2:	42a3      	cmp	r3, r4
 80115e4:	6011      	str	r1, [r2, #0]
 80115e6:	d1dd      	bne.n	80115a4 <_free_r+0x28>
 80115e8:	681c      	ldr	r4, [r3, #0]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	6053      	str	r3, [r2, #4]
 80115ee:	4421      	add	r1, r4
 80115f0:	6011      	str	r1, [r2, #0]
 80115f2:	e7d7      	b.n	80115a4 <_free_r+0x28>
 80115f4:	d902      	bls.n	80115fc <_free_r+0x80>
 80115f6:	230c      	movs	r3, #12
 80115f8:	6003      	str	r3, [r0, #0]
 80115fa:	e7d3      	b.n	80115a4 <_free_r+0x28>
 80115fc:	6825      	ldr	r5, [r4, #0]
 80115fe:	1961      	adds	r1, r4, r5
 8011600:	428b      	cmp	r3, r1
 8011602:	bf04      	itt	eq
 8011604:	6819      	ldreq	r1, [r3, #0]
 8011606:	685b      	ldreq	r3, [r3, #4]
 8011608:	6063      	str	r3, [r4, #4]
 801160a:	bf04      	itt	eq
 801160c:	1949      	addeq	r1, r1, r5
 801160e:	6021      	streq	r1, [r4, #0]
 8011610:	6054      	str	r4, [r2, #4]
 8011612:	e7c7      	b.n	80115a4 <_free_r+0x28>
 8011614:	b003      	add	sp, #12
 8011616:	bd30      	pop	{r4, r5, pc}
 8011618:	24000c24 	.word	0x24000c24

0801161c <_malloc_r>:
 801161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161e:	1ccd      	adds	r5, r1, #3
 8011620:	f025 0503 	bic.w	r5, r5, #3
 8011624:	3508      	adds	r5, #8
 8011626:	2d0c      	cmp	r5, #12
 8011628:	bf38      	it	cc
 801162a:	250c      	movcc	r5, #12
 801162c:	2d00      	cmp	r5, #0
 801162e:	4606      	mov	r6, r0
 8011630:	db01      	blt.n	8011636 <_malloc_r+0x1a>
 8011632:	42a9      	cmp	r1, r5
 8011634:	d903      	bls.n	801163e <_malloc_r+0x22>
 8011636:	230c      	movs	r3, #12
 8011638:	6033      	str	r3, [r6, #0]
 801163a:	2000      	movs	r0, #0
 801163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801163e:	f000 f933 	bl	80118a8 <__malloc_lock>
 8011642:	4921      	ldr	r1, [pc, #132]	; (80116c8 <_malloc_r+0xac>)
 8011644:	680a      	ldr	r2, [r1, #0]
 8011646:	4614      	mov	r4, r2
 8011648:	b99c      	cbnz	r4, 8011672 <_malloc_r+0x56>
 801164a:	4f20      	ldr	r7, [pc, #128]	; (80116cc <_malloc_r+0xb0>)
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	b923      	cbnz	r3, 801165a <_malloc_r+0x3e>
 8011650:	4621      	mov	r1, r4
 8011652:	4630      	mov	r0, r6
 8011654:	f000 f83c 	bl	80116d0 <_sbrk_r>
 8011658:	6038      	str	r0, [r7, #0]
 801165a:	4629      	mov	r1, r5
 801165c:	4630      	mov	r0, r6
 801165e:	f000 f837 	bl	80116d0 <_sbrk_r>
 8011662:	1c43      	adds	r3, r0, #1
 8011664:	d123      	bne.n	80116ae <_malloc_r+0x92>
 8011666:	230c      	movs	r3, #12
 8011668:	6033      	str	r3, [r6, #0]
 801166a:	4630      	mov	r0, r6
 801166c:	f000 f922 	bl	80118b4 <__malloc_unlock>
 8011670:	e7e3      	b.n	801163a <_malloc_r+0x1e>
 8011672:	6823      	ldr	r3, [r4, #0]
 8011674:	1b5b      	subs	r3, r3, r5
 8011676:	d417      	bmi.n	80116a8 <_malloc_r+0x8c>
 8011678:	2b0b      	cmp	r3, #11
 801167a:	d903      	bls.n	8011684 <_malloc_r+0x68>
 801167c:	6023      	str	r3, [r4, #0]
 801167e:	441c      	add	r4, r3
 8011680:	6025      	str	r5, [r4, #0]
 8011682:	e004      	b.n	801168e <_malloc_r+0x72>
 8011684:	6863      	ldr	r3, [r4, #4]
 8011686:	42a2      	cmp	r2, r4
 8011688:	bf0c      	ite	eq
 801168a:	600b      	streq	r3, [r1, #0]
 801168c:	6053      	strne	r3, [r2, #4]
 801168e:	4630      	mov	r0, r6
 8011690:	f000 f910 	bl	80118b4 <__malloc_unlock>
 8011694:	f104 000b 	add.w	r0, r4, #11
 8011698:	1d23      	adds	r3, r4, #4
 801169a:	f020 0007 	bic.w	r0, r0, #7
 801169e:	1ac2      	subs	r2, r0, r3
 80116a0:	d0cc      	beq.n	801163c <_malloc_r+0x20>
 80116a2:	1a1b      	subs	r3, r3, r0
 80116a4:	50a3      	str	r3, [r4, r2]
 80116a6:	e7c9      	b.n	801163c <_malloc_r+0x20>
 80116a8:	4622      	mov	r2, r4
 80116aa:	6864      	ldr	r4, [r4, #4]
 80116ac:	e7cc      	b.n	8011648 <_malloc_r+0x2c>
 80116ae:	1cc4      	adds	r4, r0, #3
 80116b0:	f024 0403 	bic.w	r4, r4, #3
 80116b4:	42a0      	cmp	r0, r4
 80116b6:	d0e3      	beq.n	8011680 <_malloc_r+0x64>
 80116b8:	1a21      	subs	r1, r4, r0
 80116ba:	4630      	mov	r0, r6
 80116bc:	f000 f808 	bl	80116d0 <_sbrk_r>
 80116c0:	3001      	adds	r0, #1
 80116c2:	d1dd      	bne.n	8011680 <_malloc_r+0x64>
 80116c4:	e7cf      	b.n	8011666 <_malloc_r+0x4a>
 80116c6:	bf00      	nop
 80116c8:	24000c24 	.word	0x24000c24
 80116cc:	24000c28 	.word	0x24000c28

080116d0 <_sbrk_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4d06      	ldr	r5, [pc, #24]	; (80116ec <_sbrk_r+0x1c>)
 80116d4:	2300      	movs	r3, #0
 80116d6:	4604      	mov	r4, r0
 80116d8:	4608      	mov	r0, r1
 80116da:	602b      	str	r3, [r5, #0]
 80116dc:	f7f1 ff54 	bl	8003588 <_sbrk>
 80116e0:	1c43      	adds	r3, r0, #1
 80116e2:	d102      	bne.n	80116ea <_sbrk_r+0x1a>
 80116e4:	682b      	ldr	r3, [r5, #0]
 80116e6:	b103      	cbz	r3, 80116ea <_sbrk_r+0x1a>
 80116e8:	6023      	str	r3, [r4, #0]
 80116ea:	bd38      	pop	{r3, r4, r5, pc}
 80116ec:	24001480 	.word	0x24001480

080116f0 <__sread>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	460c      	mov	r4, r1
 80116f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f8:	f000 fa3c 	bl	8011b74 <_read_r>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	bfab      	itete	ge
 8011700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011702:	89a3      	ldrhlt	r3, [r4, #12]
 8011704:	181b      	addge	r3, r3, r0
 8011706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801170a:	bfac      	ite	ge
 801170c:	6563      	strge	r3, [r4, #84]	; 0x54
 801170e:	81a3      	strhlt	r3, [r4, #12]
 8011710:	bd10      	pop	{r4, pc}

08011712 <__swrite>:
 8011712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011716:	461f      	mov	r7, r3
 8011718:	898b      	ldrh	r3, [r1, #12]
 801171a:	05db      	lsls	r3, r3, #23
 801171c:	4605      	mov	r5, r0
 801171e:	460c      	mov	r4, r1
 8011720:	4616      	mov	r6, r2
 8011722:	d505      	bpl.n	8011730 <__swrite+0x1e>
 8011724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011728:	2302      	movs	r3, #2
 801172a:	2200      	movs	r2, #0
 801172c:	f000 f898 	bl	8011860 <_lseek_r>
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	4632      	mov	r2, r6
 801173e:	463b      	mov	r3, r7
 8011740:	4628      	mov	r0, r5
 8011742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011746:	f000 b817 	b.w	8011778 <_write_r>

0801174a <__sseek>:
 801174a:	b510      	push	{r4, lr}
 801174c:	460c      	mov	r4, r1
 801174e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011752:	f000 f885 	bl	8011860 <_lseek_r>
 8011756:	1c43      	adds	r3, r0, #1
 8011758:	89a3      	ldrh	r3, [r4, #12]
 801175a:	bf15      	itete	ne
 801175c:	6560      	strne	r0, [r4, #84]	; 0x54
 801175e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011766:	81a3      	strheq	r3, [r4, #12]
 8011768:	bf18      	it	ne
 801176a:	81a3      	strhne	r3, [r4, #12]
 801176c:	bd10      	pop	{r4, pc}

0801176e <__sclose>:
 801176e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011772:	f000 b831 	b.w	80117d8 <_close_r>
	...

08011778 <_write_r>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	4d07      	ldr	r5, [pc, #28]	; (8011798 <_write_r+0x20>)
 801177c:	4604      	mov	r4, r0
 801177e:	4608      	mov	r0, r1
 8011780:	4611      	mov	r1, r2
 8011782:	2200      	movs	r2, #0
 8011784:	602a      	str	r2, [r5, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	f7f1 fead 	bl	80034e6 <_write>
 801178c:	1c43      	adds	r3, r0, #1
 801178e:	d102      	bne.n	8011796 <_write_r+0x1e>
 8011790:	682b      	ldr	r3, [r5, #0]
 8011792:	b103      	cbz	r3, 8011796 <_write_r+0x1e>
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	bd38      	pop	{r3, r4, r5, pc}
 8011798:	24001480 	.word	0x24001480

0801179c <__assert_func>:
 801179c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801179e:	4614      	mov	r4, r2
 80117a0:	461a      	mov	r2, r3
 80117a2:	4b09      	ldr	r3, [pc, #36]	; (80117c8 <__assert_func+0x2c>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	4605      	mov	r5, r0
 80117a8:	68d8      	ldr	r0, [r3, #12]
 80117aa:	b14c      	cbz	r4, 80117c0 <__assert_func+0x24>
 80117ac:	4b07      	ldr	r3, [pc, #28]	; (80117cc <__assert_func+0x30>)
 80117ae:	9100      	str	r1, [sp, #0]
 80117b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117b4:	4906      	ldr	r1, [pc, #24]	; (80117d0 <__assert_func+0x34>)
 80117b6:	462b      	mov	r3, r5
 80117b8:	f000 f81e 	bl	80117f8 <fiprintf>
 80117bc:	f000 f9f9 	bl	8011bb2 <abort>
 80117c0:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <__assert_func+0x38>)
 80117c2:	461c      	mov	r4, r3
 80117c4:	e7f3      	b.n	80117ae <__assert_func+0x12>
 80117c6:	bf00      	nop
 80117c8:	24000220 	.word	0x24000220
 80117cc:	08013a14 	.word	0x08013a14
 80117d0:	08013a21 	.word	0x08013a21
 80117d4:	08013a4f 	.word	0x08013a4f

080117d8 <_close_r>:
 80117d8:	b538      	push	{r3, r4, r5, lr}
 80117da:	4d06      	ldr	r5, [pc, #24]	; (80117f4 <_close_r+0x1c>)
 80117dc:	2300      	movs	r3, #0
 80117de:	4604      	mov	r4, r0
 80117e0:	4608      	mov	r0, r1
 80117e2:	602b      	str	r3, [r5, #0]
 80117e4:	f7f1 fe9b 	bl	800351e <_close>
 80117e8:	1c43      	adds	r3, r0, #1
 80117ea:	d102      	bne.n	80117f2 <_close_r+0x1a>
 80117ec:	682b      	ldr	r3, [r5, #0]
 80117ee:	b103      	cbz	r3, 80117f2 <_close_r+0x1a>
 80117f0:	6023      	str	r3, [r4, #0]
 80117f2:	bd38      	pop	{r3, r4, r5, pc}
 80117f4:	24001480 	.word	0x24001480

080117f8 <fiprintf>:
 80117f8:	b40e      	push	{r1, r2, r3}
 80117fa:	b503      	push	{r0, r1, lr}
 80117fc:	4601      	mov	r1, r0
 80117fe:	ab03      	add	r3, sp, #12
 8011800:	4805      	ldr	r0, [pc, #20]	; (8011818 <fiprintf+0x20>)
 8011802:	f853 2b04 	ldr.w	r2, [r3], #4
 8011806:	6800      	ldr	r0, [r0, #0]
 8011808:	9301      	str	r3, [sp, #4]
 801180a:	f000 f883 	bl	8011914 <_vfiprintf_r>
 801180e:	b002      	add	sp, #8
 8011810:	f85d eb04 	ldr.w	lr, [sp], #4
 8011814:	b003      	add	sp, #12
 8011816:	4770      	bx	lr
 8011818:	24000220 	.word	0x24000220

0801181c <_fstat_r>:
 801181c:	b538      	push	{r3, r4, r5, lr}
 801181e:	4d07      	ldr	r5, [pc, #28]	; (801183c <_fstat_r+0x20>)
 8011820:	2300      	movs	r3, #0
 8011822:	4604      	mov	r4, r0
 8011824:	4608      	mov	r0, r1
 8011826:	4611      	mov	r1, r2
 8011828:	602b      	str	r3, [r5, #0]
 801182a:	f7f1 fe84 	bl	8003536 <_fstat>
 801182e:	1c43      	adds	r3, r0, #1
 8011830:	d102      	bne.n	8011838 <_fstat_r+0x1c>
 8011832:	682b      	ldr	r3, [r5, #0]
 8011834:	b103      	cbz	r3, 8011838 <_fstat_r+0x1c>
 8011836:	6023      	str	r3, [r4, #0]
 8011838:	bd38      	pop	{r3, r4, r5, pc}
 801183a:	bf00      	nop
 801183c:	24001480 	.word	0x24001480

08011840 <_isatty_r>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	4d06      	ldr	r5, [pc, #24]	; (801185c <_isatty_r+0x1c>)
 8011844:	2300      	movs	r3, #0
 8011846:	4604      	mov	r4, r0
 8011848:	4608      	mov	r0, r1
 801184a:	602b      	str	r3, [r5, #0]
 801184c:	f7f1 fe83 	bl	8003556 <_isatty>
 8011850:	1c43      	adds	r3, r0, #1
 8011852:	d102      	bne.n	801185a <_isatty_r+0x1a>
 8011854:	682b      	ldr	r3, [r5, #0]
 8011856:	b103      	cbz	r3, 801185a <_isatty_r+0x1a>
 8011858:	6023      	str	r3, [r4, #0]
 801185a:	bd38      	pop	{r3, r4, r5, pc}
 801185c:	24001480 	.word	0x24001480

08011860 <_lseek_r>:
 8011860:	b538      	push	{r3, r4, r5, lr}
 8011862:	4d07      	ldr	r5, [pc, #28]	; (8011880 <_lseek_r+0x20>)
 8011864:	4604      	mov	r4, r0
 8011866:	4608      	mov	r0, r1
 8011868:	4611      	mov	r1, r2
 801186a:	2200      	movs	r2, #0
 801186c:	602a      	str	r2, [r5, #0]
 801186e:	461a      	mov	r2, r3
 8011870:	f7f1 fe7c 	bl	800356c <_lseek>
 8011874:	1c43      	adds	r3, r0, #1
 8011876:	d102      	bne.n	801187e <_lseek_r+0x1e>
 8011878:	682b      	ldr	r3, [r5, #0]
 801187a:	b103      	cbz	r3, 801187e <_lseek_r+0x1e>
 801187c:	6023      	str	r3, [r4, #0]
 801187e:	bd38      	pop	{r3, r4, r5, pc}
 8011880:	24001480 	.word	0x24001480

08011884 <__ascii_mbtowc>:
 8011884:	b082      	sub	sp, #8
 8011886:	b901      	cbnz	r1, 801188a <__ascii_mbtowc+0x6>
 8011888:	a901      	add	r1, sp, #4
 801188a:	b142      	cbz	r2, 801189e <__ascii_mbtowc+0x1a>
 801188c:	b14b      	cbz	r3, 80118a2 <__ascii_mbtowc+0x1e>
 801188e:	7813      	ldrb	r3, [r2, #0]
 8011890:	600b      	str	r3, [r1, #0]
 8011892:	7812      	ldrb	r2, [r2, #0]
 8011894:	1e10      	subs	r0, r2, #0
 8011896:	bf18      	it	ne
 8011898:	2001      	movne	r0, #1
 801189a:	b002      	add	sp, #8
 801189c:	4770      	bx	lr
 801189e:	4610      	mov	r0, r2
 80118a0:	e7fb      	b.n	801189a <__ascii_mbtowc+0x16>
 80118a2:	f06f 0001 	mvn.w	r0, #1
 80118a6:	e7f8      	b.n	801189a <__ascii_mbtowc+0x16>

080118a8 <__malloc_lock>:
 80118a8:	4801      	ldr	r0, [pc, #4]	; (80118b0 <__malloc_lock+0x8>)
 80118aa:	f7ff ba5c 	b.w	8010d66 <__retarget_lock_acquire_recursive>
 80118ae:	bf00      	nop
 80118b0:	24001478 	.word	0x24001478

080118b4 <__malloc_unlock>:
 80118b4:	4801      	ldr	r0, [pc, #4]	; (80118bc <__malloc_unlock+0x8>)
 80118b6:	f7ff ba57 	b.w	8010d68 <__retarget_lock_release_recursive>
 80118ba:	bf00      	nop
 80118bc:	24001478 	.word	0x24001478

080118c0 <__sfputc_r>:
 80118c0:	6893      	ldr	r3, [r2, #8]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	b410      	push	{r4}
 80118c8:	6093      	str	r3, [r2, #8]
 80118ca:	da08      	bge.n	80118de <__sfputc_r+0x1e>
 80118cc:	6994      	ldr	r4, [r2, #24]
 80118ce:	42a3      	cmp	r3, r4
 80118d0:	db01      	blt.n	80118d6 <__sfputc_r+0x16>
 80118d2:	290a      	cmp	r1, #10
 80118d4:	d103      	bne.n	80118de <__sfputc_r+0x1e>
 80118d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118da:	f7fe b9b9 	b.w	800fc50 <__swbuf_r>
 80118de:	6813      	ldr	r3, [r2, #0]
 80118e0:	1c58      	adds	r0, r3, #1
 80118e2:	6010      	str	r0, [r2, #0]
 80118e4:	7019      	strb	r1, [r3, #0]
 80118e6:	4608      	mov	r0, r1
 80118e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ec:	4770      	bx	lr

080118ee <__sfputs_r>:
 80118ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f0:	4606      	mov	r6, r0
 80118f2:	460f      	mov	r7, r1
 80118f4:	4614      	mov	r4, r2
 80118f6:	18d5      	adds	r5, r2, r3
 80118f8:	42ac      	cmp	r4, r5
 80118fa:	d101      	bne.n	8011900 <__sfputs_r+0x12>
 80118fc:	2000      	movs	r0, #0
 80118fe:	e007      	b.n	8011910 <__sfputs_r+0x22>
 8011900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011904:	463a      	mov	r2, r7
 8011906:	4630      	mov	r0, r6
 8011908:	f7ff ffda 	bl	80118c0 <__sfputc_r>
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	d1f3      	bne.n	80118f8 <__sfputs_r+0xa>
 8011910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011914 <_vfiprintf_r>:
 8011914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011918:	460d      	mov	r5, r1
 801191a:	b09d      	sub	sp, #116	; 0x74
 801191c:	4614      	mov	r4, r2
 801191e:	4698      	mov	r8, r3
 8011920:	4606      	mov	r6, r0
 8011922:	b118      	cbz	r0, 801192c <_vfiprintf_r+0x18>
 8011924:	6983      	ldr	r3, [r0, #24]
 8011926:	b90b      	cbnz	r3, 801192c <_vfiprintf_r+0x18>
 8011928:	f7ff f97a 	bl	8010c20 <__sinit>
 801192c:	4b89      	ldr	r3, [pc, #548]	; (8011b54 <_vfiprintf_r+0x240>)
 801192e:	429d      	cmp	r5, r3
 8011930:	d11b      	bne.n	801196a <_vfiprintf_r+0x56>
 8011932:	6875      	ldr	r5, [r6, #4]
 8011934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011936:	07d9      	lsls	r1, r3, #31
 8011938:	d405      	bmi.n	8011946 <_vfiprintf_r+0x32>
 801193a:	89ab      	ldrh	r3, [r5, #12]
 801193c:	059a      	lsls	r2, r3, #22
 801193e:	d402      	bmi.n	8011946 <_vfiprintf_r+0x32>
 8011940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011942:	f7ff fa10 	bl	8010d66 <__retarget_lock_acquire_recursive>
 8011946:	89ab      	ldrh	r3, [r5, #12]
 8011948:	071b      	lsls	r3, r3, #28
 801194a:	d501      	bpl.n	8011950 <_vfiprintf_r+0x3c>
 801194c:	692b      	ldr	r3, [r5, #16]
 801194e:	b9eb      	cbnz	r3, 801198c <_vfiprintf_r+0x78>
 8011950:	4629      	mov	r1, r5
 8011952:	4630      	mov	r0, r6
 8011954:	f7fe f9ce 	bl	800fcf4 <__swsetup_r>
 8011958:	b1c0      	cbz	r0, 801198c <_vfiprintf_r+0x78>
 801195a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801195c:	07dc      	lsls	r4, r3, #31
 801195e:	d50e      	bpl.n	801197e <_vfiprintf_r+0x6a>
 8011960:	f04f 30ff 	mov.w	r0, #4294967295
 8011964:	b01d      	add	sp, #116	; 0x74
 8011966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196a:	4b7b      	ldr	r3, [pc, #492]	; (8011b58 <_vfiprintf_r+0x244>)
 801196c:	429d      	cmp	r5, r3
 801196e:	d101      	bne.n	8011974 <_vfiprintf_r+0x60>
 8011970:	68b5      	ldr	r5, [r6, #8]
 8011972:	e7df      	b.n	8011934 <_vfiprintf_r+0x20>
 8011974:	4b79      	ldr	r3, [pc, #484]	; (8011b5c <_vfiprintf_r+0x248>)
 8011976:	429d      	cmp	r5, r3
 8011978:	bf08      	it	eq
 801197a:	68f5      	ldreq	r5, [r6, #12]
 801197c:	e7da      	b.n	8011934 <_vfiprintf_r+0x20>
 801197e:	89ab      	ldrh	r3, [r5, #12]
 8011980:	0598      	lsls	r0, r3, #22
 8011982:	d4ed      	bmi.n	8011960 <_vfiprintf_r+0x4c>
 8011984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011986:	f7ff f9ef 	bl	8010d68 <__retarget_lock_release_recursive>
 801198a:	e7e9      	b.n	8011960 <_vfiprintf_r+0x4c>
 801198c:	2300      	movs	r3, #0
 801198e:	9309      	str	r3, [sp, #36]	; 0x24
 8011990:	2320      	movs	r3, #32
 8011992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011996:	f8cd 800c 	str.w	r8, [sp, #12]
 801199a:	2330      	movs	r3, #48	; 0x30
 801199c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b60 <_vfiprintf_r+0x24c>
 80119a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119a4:	f04f 0901 	mov.w	r9, #1
 80119a8:	4623      	mov	r3, r4
 80119aa:	469a      	mov	sl, r3
 80119ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119b0:	b10a      	cbz	r2, 80119b6 <_vfiprintf_r+0xa2>
 80119b2:	2a25      	cmp	r2, #37	; 0x25
 80119b4:	d1f9      	bne.n	80119aa <_vfiprintf_r+0x96>
 80119b6:	ebba 0b04 	subs.w	fp, sl, r4
 80119ba:	d00b      	beq.n	80119d4 <_vfiprintf_r+0xc0>
 80119bc:	465b      	mov	r3, fp
 80119be:	4622      	mov	r2, r4
 80119c0:	4629      	mov	r1, r5
 80119c2:	4630      	mov	r0, r6
 80119c4:	f7ff ff93 	bl	80118ee <__sfputs_r>
 80119c8:	3001      	adds	r0, #1
 80119ca:	f000 80aa 	beq.w	8011b22 <_vfiprintf_r+0x20e>
 80119ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119d0:	445a      	add	r2, fp
 80119d2:	9209      	str	r2, [sp, #36]	; 0x24
 80119d4:	f89a 3000 	ldrb.w	r3, [sl]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 80a2 	beq.w	8011b22 <_vfiprintf_r+0x20e>
 80119de:	2300      	movs	r3, #0
 80119e0:	f04f 32ff 	mov.w	r2, #4294967295
 80119e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119e8:	f10a 0a01 	add.w	sl, sl, #1
 80119ec:	9304      	str	r3, [sp, #16]
 80119ee:	9307      	str	r3, [sp, #28]
 80119f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119f4:	931a      	str	r3, [sp, #104]	; 0x68
 80119f6:	4654      	mov	r4, sl
 80119f8:	2205      	movs	r2, #5
 80119fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119fe:	4858      	ldr	r0, [pc, #352]	; (8011b60 <_vfiprintf_r+0x24c>)
 8011a00:	f7ee fc76 	bl	80002f0 <memchr>
 8011a04:	9a04      	ldr	r2, [sp, #16]
 8011a06:	b9d8      	cbnz	r0, 8011a40 <_vfiprintf_r+0x12c>
 8011a08:	06d1      	lsls	r1, r2, #27
 8011a0a:	bf44      	itt	mi
 8011a0c:	2320      	movmi	r3, #32
 8011a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a12:	0713      	lsls	r3, r2, #28
 8011a14:	bf44      	itt	mi
 8011a16:	232b      	movmi	r3, #43	; 0x2b
 8011a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a20:	2b2a      	cmp	r3, #42	; 0x2a
 8011a22:	d015      	beq.n	8011a50 <_vfiprintf_r+0x13c>
 8011a24:	9a07      	ldr	r2, [sp, #28]
 8011a26:	4654      	mov	r4, sl
 8011a28:	2000      	movs	r0, #0
 8011a2a:	f04f 0c0a 	mov.w	ip, #10
 8011a2e:	4621      	mov	r1, r4
 8011a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a34:	3b30      	subs	r3, #48	; 0x30
 8011a36:	2b09      	cmp	r3, #9
 8011a38:	d94e      	bls.n	8011ad8 <_vfiprintf_r+0x1c4>
 8011a3a:	b1b0      	cbz	r0, 8011a6a <_vfiprintf_r+0x156>
 8011a3c:	9207      	str	r2, [sp, #28]
 8011a3e:	e014      	b.n	8011a6a <_vfiprintf_r+0x156>
 8011a40:	eba0 0308 	sub.w	r3, r0, r8
 8011a44:	fa09 f303 	lsl.w	r3, r9, r3
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	46a2      	mov	sl, r4
 8011a4e:	e7d2      	b.n	80119f6 <_vfiprintf_r+0xe2>
 8011a50:	9b03      	ldr	r3, [sp, #12]
 8011a52:	1d19      	adds	r1, r3, #4
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	9103      	str	r1, [sp, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	bfbb      	ittet	lt
 8011a5c:	425b      	neglt	r3, r3
 8011a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8011a62:	9307      	strge	r3, [sp, #28]
 8011a64:	9307      	strlt	r3, [sp, #28]
 8011a66:	bfb8      	it	lt
 8011a68:	9204      	strlt	r2, [sp, #16]
 8011a6a:	7823      	ldrb	r3, [r4, #0]
 8011a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8011a6e:	d10c      	bne.n	8011a8a <_vfiprintf_r+0x176>
 8011a70:	7863      	ldrb	r3, [r4, #1]
 8011a72:	2b2a      	cmp	r3, #42	; 0x2a
 8011a74:	d135      	bne.n	8011ae2 <_vfiprintf_r+0x1ce>
 8011a76:	9b03      	ldr	r3, [sp, #12]
 8011a78:	1d1a      	adds	r2, r3, #4
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	9203      	str	r2, [sp, #12]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	bfb8      	it	lt
 8011a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a86:	3402      	adds	r4, #2
 8011a88:	9305      	str	r3, [sp, #20]
 8011a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b70 <_vfiprintf_r+0x25c>
 8011a8e:	7821      	ldrb	r1, [r4, #0]
 8011a90:	2203      	movs	r2, #3
 8011a92:	4650      	mov	r0, sl
 8011a94:	f7ee fc2c 	bl	80002f0 <memchr>
 8011a98:	b140      	cbz	r0, 8011aac <_vfiprintf_r+0x198>
 8011a9a:	2340      	movs	r3, #64	; 0x40
 8011a9c:	eba0 000a 	sub.w	r0, r0, sl
 8011aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8011aa4:	9b04      	ldr	r3, [sp, #16]
 8011aa6:	4303      	orrs	r3, r0
 8011aa8:	3401      	adds	r4, #1
 8011aaa:	9304      	str	r3, [sp, #16]
 8011aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab0:	482c      	ldr	r0, [pc, #176]	; (8011b64 <_vfiprintf_r+0x250>)
 8011ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ab6:	2206      	movs	r2, #6
 8011ab8:	f7ee fc1a 	bl	80002f0 <memchr>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d03f      	beq.n	8011b40 <_vfiprintf_r+0x22c>
 8011ac0:	4b29      	ldr	r3, [pc, #164]	; (8011b68 <_vfiprintf_r+0x254>)
 8011ac2:	bb1b      	cbnz	r3, 8011b0c <_vfiprintf_r+0x1f8>
 8011ac4:	9b03      	ldr	r3, [sp, #12]
 8011ac6:	3307      	adds	r3, #7
 8011ac8:	f023 0307 	bic.w	r3, r3, #7
 8011acc:	3308      	adds	r3, #8
 8011ace:	9303      	str	r3, [sp, #12]
 8011ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ad2:	443b      	add	r3, r7
 8011ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ad6:	e767      	b.n	80119a8 <_vfiprintf_r+0x94>
 8011ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011adc:	460c      	mov	r4, r1
 8011ade:	2001      	movs	r0, #1
 8011ae0:	e7a5      	b.n	8011a2e <_vfiprintf_r+0x11a>
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	3401      	adds	r4, #1
 8011ae6:	9305      	str	r3, [sp, #20]
 8011ae8:	4619      	mov	r1, r3
 8011aea:	f04f 0c0a 	mov.w	ip, #10
 8011aee:	4620      	mov	r0, r4
 8011af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011af4:	3a30      	subs	r2, #48	; 0x30
 8011af6:	2a09      	cmp	r2, #9
 8011af8:	d903      	bls.n	8011b02 <_vfiprintf_r+0x1ee>
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d0c5      	beq.n	8011a8a <_vfiprintf_r+0x176>
 8011afe:	9105      	str	r1, [sp, #20]
 8011b00:	e7c3      	b.n	8011a8a <_vfiprintf_r+0x176>
 8011b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b06:	4604      	mov	r4, r0
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e7f0      	b.n	8011aee <_vfiprintf_r+0x1da>
 8011b0c:	ab03      	add	r3, sp, #12
 8011b0e:	9300      	str	r3, [sp, #0]
 8011b10:	462a      	mov	r2, r5
 8011b12:	4b16      	ldr	r3, [pc, #88]	; (8011b6c <_vfiprintf_r+0x258>)
 8011b14:	a904      	add	r1, sp, #16
 8011b16:	4630      	mov	r0, r6
 8011b18:	f7fd fc72 	bl	800f400 <_printf_float>
 8011b1c:	4607      	mov	r7, r0
 8011b1e:	1c78      	adds	r0, r7, #1
 8011b20:	d1d6      	bne.n	8011ad0 <_vfiprintf_r+0x1bc>
 8011b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b24:	07d9      	lsls	r1, r3, #31
 8011b26:	d405      	bmi.n	8011b34 <_vfiprintf_r+0x220>
 8011b28:	89ab      	ldrh	r3, [r5, #12]
 8011b2a:	059a      	lsls	r2, r3, #22
 8011b2c:	d402      	bmi.n	8011b34 <_vfiprintf_r+0x220>
 8011b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b30:	f7ff f91a 	bl	8010d68 <__retarget_lock_release_recursive>
 8011b34:	89ab      	ldrh	r3, [r5, #12]
 8011b36:	065b      	lsls	r3, r3, #25
 8011b38:	f53f af12 	bmi.w	8011960 <_vfiprintf_r+0x4c>
 8011b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b3e:	e711      	b.n	8011964 <_vfiprintf_r+0x50>
 8011b40:	ab03      	add	r3, sp, #12
 8011b42:	9300      	str	r3, [sp, #0]
 8011b44:	462a      	mov	r2, r5
 8011b46:	4b09      	ldr	r3, [pc, #36]	; (8011b6c <_vfiprintf_r+0x258>)
 8011b48:	a904      	add	r1, sp, #16
 8011b4a:	4630      	mov	r0, r6
 8011b4c:	f7fd fee4 	bl	800f918 <_printf_i>
 8011b50:	e7e4      	b.n	8011b1c <_vfiprintf_r+0x208>
 8011b52:	bf00      	nop
 8011b54:	08013874 	.word	0x08013874
 8011b58:	08013894 	.word	0x08013894
 8011b5c:	08013854 	.word	0x08013854
 8011b60:	08013a5a 	.word	0x08013a5a
 8011b64:	08013a64 	.word	0x08013a64
 8011b68:	0800f401 	.word	0x0800f401
 8011b6c:	080118ef 	.word	0x080118ef
 8011b70:	08013a60 	.word	0x08013a60

08011b74 <_read_r>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4d07      	ldr	r5, [pc, #28]	; (8011b94 <_read_r+0x20>)
 8011b78:	4604      	mov	r4, r0
 8011b7a:	4608      	mov	r0, r1
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	2200      	movs	r2, #0
 8011b80:	602a      	str	r2, [r5, #0]
 8011b82:	461a      	mov	r2, r3
 8011b84:	f7f1 fc92 	bl	80034ac <_read>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d102      	bne.n	8011b92 <_read_r+0x1e>
 8011b8c:	682b      	ldr	r3, [r5, #0]
 8011b8e:	b103      	cbz	r3, 8011b92 <_read_r+0x1e>
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	bd38      	pop	{r3, r4, r5, pc}
 8011b94:	24001480 	.word	0x24001480

08011b98 <__ascii_wctomb>:
 8011b98:	b149      	cbz	r1, 8011bae <__ascii_wctomb+0x16>
 8011b9a:	2aff      	cmp	r2, #255	; 0xff
 8011b9c:	bf85      	ittet	hi
 8011b9e:	238a      	movhi	r3, #138	; 0x8a
 8011ba0:	6003      	strhi	r3, [r0, #0]
 8011ba2:	700a      	strbls	r2, [r1, #0]
 8011ba4:	f04f 30ff 	movhi.w	r0, #4294967295
 8011ba8:	bf98      	it	ls
 8011baa:	2001      	movls	r0, #1
 8011bac:	4770      	bx	lr
 8011bae:	4608      	mov	r0, r1
 8011bb0:	4770      	bx	lr

08011bb2 <abort>:
 8011bb2:	b508      	push	{r3, lr}
 8011bb4:	2006      	movs	r0, #6
 8011bb6:	f000 f82b 	bl	8011c10 <raise>
 8011bba:	2001      	movs	r0, #1
 8011bbc:	f7f1 fc6c 	bl	8003498 <_exit>

08011bc0 <_raise_r>:
 8011bc0:	291f      	cmp	r1, #31
 8011bc2:	b538      	push	{r3, r4, r5, lr}
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	460d      	mov	r5, r1
 8011bc8:	d904      	bls.n	8011bd4 <_raise_r+0x14>
 8011bca:	2316      	movs	r3, #22
 8011bcc:	6003      	str	r3, [r0, #0]
 8011bce:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd2:	bd38      	pop	{r3, r4, r5, pc}
 8011bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011bd6:	b112      	cbz	r2, 8011bde <_raise_r+0x1e>
 8011bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bdc:	b94b      	cbnz	r3, 8011bf2 <_raise_r+0x32>
 8011bde:	4620      	mov	r0, r4
 8011be0:	f000 f830 	bl	8011c44 <_getpid_r>
 8011be4:	462a      	mov	r2, r5
 8011be6:	4601      	mov	r1, r0
 8011be8:	4620      	mov	r0, r4
 8011bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bee:	f000 b817 	b.w	8011c20 <_kill_r>
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d00a      	beq.n	8011c0c <_raise_r+0x4c>
 8011bf6:	1c59      	adds	r1, r3, #1
 8011bf8:	d103      	bne.n	8011c02 <_raise_r+0x42>
 8011bfa:	2316      	movs	r3, #22
 8011bfc:	6003      	str	r3, [r0, #0]
 8011bfe:	2001      	movs	r0, #1
 8011c00:	e7e7      	b.n	8011bd2 <_raise_r+0x12>
 8011c02:	2400      	movs	r4, #0
 8011c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c08:	4628      	mov	r0, r5
 8011c0a:	4798      	blx	r3
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e7e0      	b.n	8011bd2 <_raise_r+0x12>

08011c10 <raise>:
 8011c10:	4b02      	ldr	r3, [pc, #8]	; (8011c1c <raise+0xc>)
 8011c12:	4601      	mov	r1, r0
 8011c14:	6818      	ldr	r0, [r3, #0]
 8011c16:	f7ff bfd3 	b.w	8011bc0 <_raise_r>
 8011c1a:	bf00      	nop
 8011c1c:	24000220 	.word	0x24000220

08011c20 <_kill_r>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	4d07      	ldr	r5, [pc, #28]	; (8011c40 <_kill_r+0x20>)
 8011c24:	2300      	movs	r3, #0
 8011c26:	4604      	mov	r4, r0
 8011c28:	4608      	mov	r0, r1
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	602b      	str	r3, [r5, #0]
 8011c2e:	f7f1 fc23 	bl	8003478 <_kill>
 8011c32:	1c43      	adds	r3, r0, #1
 8011c34:	d102      	bne.n	8011c3c <_kill_r+0x1c>
 8011c36:	682b      	ldr	r3, [r5, #0]
 8011c38:	b103      	cbz	r3, 8011c3c <_kill_r+0x1c>
 8011c3a:	6023      	str	r3, [r4, #0]
 8011c3c:	bd38      	pop	{r3, r4, r5, pc}
 8011c3e:	bf00      	nop
 8011c40:	24001480 	.word	0x24001480

08011c44 <_getpid_r>:
 8011c44:	f7f1 bc10 	b.w	8003468 <_getpid>

08011c48 <_init>:
 8011c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4a:	bf00      	nop
 8011c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c4e:	bc08      	pop	{r3}
 8011c50:	469e      	mov	lr, r3
 8011c52:	4770      	bx	lr

08011c54 <_fini>:
 8011c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c56:	bf00      	nop
 8011c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c5a:	bc08      	pop	{r3}
 8011c5c:	469e      	mov	lr, r3
 8011c5e:	4770      	bx	lr
