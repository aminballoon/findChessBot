
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba98  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800bd38  0800bd38  0001bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be24  0800be24  0001be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be30  0800be30  0001be30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800be34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008c8  20000078  0800bea8  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000940  0800bea8  00020940  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a5f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003975  00000000  00000000  00043b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001428  00000000  00000000  00047478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001310  00000000  00000000  000488a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000439c  00000000  00000000  00049bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019c3b  00000000  00000000  0004df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c33  00000000  00000000  00067b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf7ba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d38  00000000  00000000  001cf810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd20 	.word	0x0800bd20

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	0800bd20 	.word	0x0800bd20

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f001 ff53 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f8df 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 feff 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 800068a:	f000 fdad 	bl	80011e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800068e:	f000 fd5f 	bl	8001150 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000692:	f000 fa79 	bl	8000b88 <MX_TIM2_Init>
  MX_UART4_Init();
 8000696:	f000 fd0b 	bl	80010b0 <MX_UART4_Init>
  MX_TIM4_Init();
 800069a:	f000 fb65 	bl	8000d68 <MX_TIM4_Init>
  MX_SPI3_Init();
 800069e:	f000 f96f 	bl	8000980 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006a2:	f000 f9c3 	bl	8000a2c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006a6:	f000 fae7 	bl	8000c78 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006aa:	f000 fbd5 	bl	8000e58 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006ae:	f000 fc5b 	bl	8000f68 <MX_TIM15_Init>
  MX_TIM12_Init();
 80006b2:	f000 fc1f 	bl	8000ef4 <MX_TIM12_Init>
  MX_CRC_Init();
 80006b6:	f000 f941 	bl	800093c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2101      	movs	r1, #1
 80006be:	484f      	ldr	r0, [pc, #316]	; (80007fc <main+0x184>)
 80006c0:	f004 fd9e 	bl	8005200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	484d      	ldr	r0, [pc, #308]	; (8000800 <main+0x188>)
 80006ca:	f004 fd99 	bl	8005200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	4849      	ldr	r0, [pc, #292]	; (80007fc <main+0x184>)
 80006d6:	f004 fd93 	bl	8005200 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <main+0x18c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <main+0x18c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f042 0220 	orr.w	r2, r2, #32
 80006e8:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <main+0x18c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <main+0x18c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006f8:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 80006fa:	2204      	movs	r2, #4
 80006fc:	4942      	ldr	r1, [pc, #264]	; (8000808 <main+0x190>)
 80006fe:	4841      	ldr	r0, [pc, #260]	; (8000804 <main+0x18c>)
 8000700:	f008 fc1a 	bl	8008f38 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(State_Checksum_Error)
 8000704:	4b41      	ldr	r3, [pc, #260]	; (800080c <main+0x194>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00b      	beq.n	8000724 <main+0xac>
	  {
		  State_Checksum_Error = 0;
 800070c:	4b3f      	ldr	r3, [pc, #252]	; (800080c <main+0x194>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 8000712:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <main+0x198>)
 8000714:	22ee      	movs	r2, #238	; 0xee
 8000716:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2201      	movs	r2, #1
 800071c:	493c      	ldr	r1, [pc, #240]	; (8000810 <main+0x198>)
 800071e:	4839      	ldr	r0, [pc, #228]	; (8000804 <main+0x18c>)
 8000720:	f008 fb74 	bl	8008e0c <HAL_UART_Transmit>
	  }
	  if(State_Input_Joint_State)
 8000724:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <main+0x19c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00b      	beq.n	8000744 <main+0xcc>
	  {
		  State_Input_Joint_State = 0;
 800072c:	4b39      	ldr	r3, [pc, #228]	; (8000814 <main+0x19c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <main+0x198>)
 8000734:	22ad      	movs	r2, #173	; 0xad
 8000736:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	2201      	movs	r2, #1
 800073c:	4934      	ldr	r1, [pc, #208]	; (8000810 <main+0x198>)
 800073e:	4831      	ldr	r0, [pc, #196]	; (8000804 <main+0x18c>)
 8000740:	f008 fb64 	bl	8008e0c <HAL_UART_Transmit>
	  }
	  if(State_Print_4_Joint_State)
 8000744:	4b34      	ldr	r3, [pc, #208]	; (8000818 <main+0x1a0>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d018      	beq.n	800077e <main+0x106>
	  {
		  State_Print_4_Joint_State = 0;
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <main+0x1a0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
		  printf("\n%3d %3d %3d %3d\n\r", q1, q2, q3, q4);
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <main+0x1a4>)
 8000754:	6819      	ldr	r1, [r3, #0]
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <main+0x1a8>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <main+0x1ac>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	4b32      	ldr	r3, [pc, #200]	; (8000828 <main+0x1b0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4603      	mov	r3, r0
 8000766:	4831      	ldr	r0, [pc, #196]	; (800082c <main+0x1b4>)
 8000768:	f00a fb84 	bl	800ae74 <iprintf>
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <main+0x198>)
 800076e:	22ad      	movs	r2, #173	; 0xad
 8000770:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	2201      	movs	r2, #1
 8000776:	4926      	ldr	r1, [pc, #152]	; (8000810 <main+0x198>)
 8000778:	4822      	ldr	r0, [pc, #136]	; (8000804 <main+0x18c>)
 800077a:	f008 fb47 	bl	8008e0c <HAL_UART_Transmit>
	  }
	  if(State_Activate_Gripper)
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <main+0x1b8>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00b      	beq.n	800079e <main+0x126>
	  {
		  State_Activate_Gripper = 0;
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <main+0x1b8>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <main+0x198>)
 800078e:	22ad      	movs	r2, #173	; 0xad
 8000790:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	2201      	movs	r2, #1
 8000796:	491e      	ldr	r1, [pc, #120]	; (8000810 <main+0x198>)
 8000798:	481a      	ldr	r0, [pc, #104]	; (8000804 <main+0x18c>)
 800079a:	f008 fb37 	bl	8008e0c <HAL_UART_Transmit>
	  }
	  if(State_Deactivate_Gripper)
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <main+0x1bc>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00b      	beq.n	80007be <main+0x146>
	  {
		  State_Deactivate_Gripper = 0;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <main+0x1bc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <main+0x198>)
 80007ae:	22ad      	movs	r2, #173	; 0xad
 80007b0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	2201      	movs	r2, #1
 80007b6:	4916      	ldr	r1, [pc, #88]	; (8000810 <main+0x198>)
 80007b8:	4812      	ldr	r0, [pc, #72]	; (8000804 <main+0x18c>)
 80007ba:	f008 fb27 	bl	8008e0c <HAL_UART_Transmit>
	  }
	  if(State_Set_Home)
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <main+0x1c0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <main+0x166>
	  {
		  State_Set_Home = 0;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <main+0x1c0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <main+0x198>)
 80007ce:	22ad      	movs	r2, #173	; 0xad
 80007d0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	2201      	movs	r2, #1
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <main+0x198>)
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <main+0x18c>)
 80007da:	f008 fb17 	bl	8008e0c <HAL_UART_Transmit>
	  }
	  if(State_PID_Control_Timer)
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <main+0x1c4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <main+0x174>
	  {
//		  HAL_TIM_Base_Start_IT(&htim5);
		  State_PID_Control_Timer = 0;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <main+0x1c4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
	  }
	  if(State_Casade_Control_Timer)
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <main+0x1c8>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d087      	beq.n	8000704 <main+0x8c>
	  {
//		  HAL_TIM_Base_Start_IT(&htim12);
		  State_Casade_Control_Timer = 0;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <main+0x1c8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	  if(State_Checksum_Error)
 80007fa:	e783      	b.n	8000704 <main+0x8c>
 80007fc:	58020400 	.word	0x58020400
 8000800:	58021000 	.word	0x58021000
 8000804:	200002d0 	.word	0x200002d0
 8000808:	20000928 	.word	0x20000928
 800080c:	200008a4 	.word	0x200008a4
 8000810:	2000069c 	.word	0x2000069c
 8000814:	20000530 	.word	0x20000530
 8000818:	2000069e 	.word	0x2000069e
 800081c:	20000698 	.word	0x20000698
 8000820:	20000460 	.word	0x20000460
 8000824:	20000690 	.word	0x20000690
 8000828:	200008a8 	.word	0x200008a8
 800082c:	0800bd38 	.word	0x0800bd38
 8000830:	20000924 	.word	0x20000924
 8000834:	2000045c 	.word	0x2000045c
 8000838:	2000069d 	.word	0x2000069d
 800083c:	20000694 	.word	0x20000694
 8000840:	20000800 	.word	0x20000800

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09c      	sub	sp, #112	; 0x70
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	224c      	movs	r2, #76	; 0x4c
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f00a fb06 	bl	800ae64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f00a fb00 	bl	800ae64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000864:	2002      	movs	r0, #2
 8000866:	f004 fcff 	bl	8005268 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <SystemClock_Config+0xf0>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a30      	ldr	r2, [pc, #192]	; (8000934 <SystemClock_Config+0xf0>)
 8000874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <SystemClock_Config+0xf0>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <SystemClock_Config+0xf4>)
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <SystemClock_Config+0xf4>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <SystemClock_Config+0xf4>)
 8000892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089c:	bf00      	nop
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xf0>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008aa:	d1f8      	bne.n	800089e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008c4:	233c      	movs	r3, #60	; 0x3c
 80008c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008cc:	2306      	movs	r3, #6
 80008ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d8:	2300      	movs	r3, #0
 80008da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fcf9 	bl	80052dc <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008f0:	f001 f827 	bl	8001942 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	233f      	movs	r3, #63	; 0x3f
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2303      	movs	r3, #3
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000900:	2308      	movs	r3, #8
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f005 f8ee 	bl	8005afc <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000926:	f001 f80c 	bl	8001942 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3770      	adds	r7, #112	; 0x70
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58024800 	.word	0x58024800
 8000938:	58000400 	.word	0x58000400

0800093c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_CRC_Init+0x3c>)
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <MX_CRC_Init+0x40>)
 8000944:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_CRC_Init+0x3c>)
 8000948:	2200      	movs	r2, #0
 800094a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_CRC_Init+0x3c>)
 800094e:	2200      	movs	r2, #0
 8000950:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_CRC_Init+0x3c>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_CRC_Init+0x3c>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_CRC_Init+0x3c>)
 8000960:	2201      	movs	r2, #1
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_CRC_Init+0x3c>)
 8000966:	f001 ff8d 	bl	8002884 <HAL_CRC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000970:	f000 ffe7 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000438 	.word	0x20000438
 800097c:	58024c00 	.word	0x58024c00

08000980 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_SPI3_Init+0xa4>)
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_SPI3_Init+0xa8>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_SPI3_Init+0xa4>)
 800098c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000990:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_SPI3_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_SPI3_Init+0xa4>)
 800099a:	2203      	movs	r2, #3
 800099c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI3_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI3_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI3_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_SPI3_Init+0xa4>)
 8000a10:	f006 ff62 	bl	80078d8 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000a1a:	f000 ff92 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000580 	.word	0x20000580
 8000a28:	40003c00 	.word	0x40003c00

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09a      	sub	sp, #104	; 0x68
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	222c      	movs	r2, #44	; 0x2c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00a f9fc 	bl	800ae64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6c:	4b44      	ldr	r3, [pc, #272]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a6e:	4a45      	ldr	r2, [pc, #276]	; (8000b84 <MX_TIM1_Init+0x158>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000a72:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a74:	22ef      	movs	r2, #239	; 0xef
 8000a76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000a7e:	4b40      	ldr	r3, [pc, #256]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a80:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a98:	4839      	ldr	r0, [pc, #228]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a9a:	f007 f83a 	bl	8007b12 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 ff4d 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4832      	ldr	r0, [pc, #200]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000ab6:	f007 fb13 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ac0:	f000 ff3f 	bl	8001942 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac4:	482e      	ldr	r0, [pc, #184]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000ac6:	f007 f87b 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ad0:	f000 ff37 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4826      	ldr	r0, [pc, #152]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000ae8:	f008 f81c 	bl	8008b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000af2:	f000 ff26 	bl	8001942 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af6:	2360      	movs	r3, #96	; 0x60
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000afa:	f240 1339 	movw	r3, #313	; 0x139
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b18:	2204      	movs	r2, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4818      	ldr	r0, [pc, #96]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000b1e:	f007 f9cf 	bl	8007ec0 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b28:	f000 ff0b 	bl	8001942 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000b62:	f008 f867 	bl	8008c34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000b6c:	f000 fee9 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000b72:	f001 f84d 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000b76:	bf00      	nop
 8000b78:	3768      	adds	r7, #104	; 0x68
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200006a0 	.word	0x200006a0
 8000b84:	40010000 	.word	0x40010000

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000bc4:	22ef      	movs	r2, #239	; 0xef
 8000bc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000bd0:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	4824      	ldr	r0, [pc, #144]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000be4:	f006 ff95 	bl	8007b12 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fea8 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481d      	ldr	r0, [pc, #116]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000c00:	f007 fa6e 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c0a:	f000 fe9a 	bl	8001942 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0e:	4819      	ldr	r0, [pc, #100]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000c10:	f006 ffd6 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 fe92 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000c2e:	f007 ff79 	bl	8008b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c38:	f000 fe83 	bl	8001942 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c40:	f240 1339 	movw	r3, #313	; 0x139
 8000c44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2208      	movs	r2, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000c56:	f007 f933 	bl	8007ec0 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c60:	f000 fe6f 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <MX_TIM2_Init+0xec>)
 8000c66:	f000 ffd3 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	; 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000804 	.word	0x20000804

08000c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cac:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <MX_TIM3_Init+0xec>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cb2:	22ef      	movs	r2, #239	; 0xef
 8000cb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cbe:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000cc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc4:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd0:	4823      	ldr	r0, [pc, #140]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cd2:	f006 ff1e 	bl	8007b12 <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cdc:	f000 fe31 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	4619      	mov	r1, r3
 8000cec:	481c      	ldr	r0, [pc, #112]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cee:	f007 f9f7 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000cf8:	f000 fe23 	bl	8001942 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000cfe:	f006 ff5f 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d08:	f000 fe1b 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000d1c:	f007 ff02 	bl	8008b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d26:	f000 fe0c 	bl	8001942 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2a:	2360      	movs	r3, #96	; 0x60
 8000d2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d2e:	f240 1339 	movw	r3, #313	; 0x139
 8000d32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000d44:	f007 f8bc 	bl	8007ec0 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d4e:	f000 fdf8 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM3_Init+0xe8>)
 8000d54:	f000 ff5c 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000534 	.word	0x20000534
 8000d64:	40000400 	.word	0x40000400

08000d68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08e      	sub	sp, #56	; 0x38
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000d9c:	4a2d      	ldr	r2, [pc, #180]	; (8000e54 <MX_TIM4_Init+0xec>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000da2:	22ef      	movs	r2, #239	; 0xef
 8000da4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000dae:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000dc2:	f006 fea6 	bl	8007b12 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000dcc:	f000 fdb9 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481c      	ldr	r0, [pc, #112]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000dde:	f007 f97f 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000de8:	f000 fdab 	bl	8001942 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dec:	4818      	ldr	r0, [pc, #96]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000dee:	f006 fee7 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000df8:	f000 fda3 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000e0c:	f007 fe8a 	bl	8008b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e16:	f000 fd94 	bl	8001942 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000e1e:	f240 1339 	movw	r3, #313	; 0x139
 8000e22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2208      	movs	r2, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000e34:	f007 f844 	bl	8007ec0 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e3e:	f000 fd80 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e42:	4803      	ldr	r0, [pc, #12]	; (8000e50 <MX_TIM4_Init+0xe8>)
 8000e44:	f000 fee4 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000e48:	bf00      	nop
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000020c 	.word	0x2000020c
 8000e54:	40000800 	.word	0x40000800

08000e58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <MX_TIM5_Init+0x98>)
 8000e7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e7e:	22ef      	movs	r2, #239	; 0xef
 8000e80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e8a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <MX_TIM5_Init+0x94>)
 8000e9e:	f006 fe38 	bl	8007b12 <HAL_TIM_Base_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ea8:	f000 fd4b 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM5_Init+0x94>)
 8000eba:	f007 f911 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ec4:	f000 fd3d 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_TIM5_Init+0x94>)
 8000ed6:	f007 fe25 	bl	8008b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 fd2f 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200004e4 	.word	0x200004e4
 8000ef0:	40000c00 	.word	0x40000c00

08000ef4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f08:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <MX_TIM12_Init+0x70>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f0e:	22ef      	movs	r2, #239	; 0xef
 8000f10:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f1a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f1e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f2e:	f006 fdf0 	bl	8007b12 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000f38:	f000 fd03 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <MX_TIM12_Init+0x6c>)
 8000f48:	f007 f8ca 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000f52:	f000 fcf6 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000858 	.word	0x20000858
 8000f64:	40001800 	.word	0x40001800

08000f68 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b09a      	sub	sp, #104	; 0x68
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	222c      	movs	r2, #44	; 0x2c
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f009 ff5e 	bl	800ae64 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000faa:	4a40      	ldr	r2, [pc, #256]	; (80010ac <MX_TIM15_Init+0x144>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fb0:	22ef      	movs	r2, #239	; 0xef
 8000fb2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fbc:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000fc0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fd4:	4834      	ldr	r0, [pc, #208]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000fd6:	f006 fd9c 	bl	8007b12 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f000 fcaf 	bl	8001942 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482d      	ldr	r0, [pc, #180]	; (80010a8 <MX_TIM15_Init+0x140>)
 8000ff2:	f007 f875 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000ffc:	f000 fca1 	bl	8001942 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001000:	4829      	ldr	r0, [pc, #164]	; (80010a8 <MX_TIM15_Init+0x140>)
 8001002:	f006 fddd 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800100c:	f000 fc99 	bl	8001942 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800101c:	4619      	mov	r1, r3
 800101e:	4822      	ldr	r0, [pc, #136]	; (80010a8 <MX_TIM15_Init+0x140>)
 8001020:	f007 fd80 	bl	8008b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800102a:	f000 fc8a 	bl	8001942 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001032:	f240 1339 	movw	r3, #313	; 0x139
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001038:	2300      	movs	r3, #0
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001050:	2204      	movs	r2, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_TIM15_Init+0x140>)
 8001056:	f006 ff33 	bl	8007ec0 <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001060:	f000 fc6f 	bl	8001942 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM15_Init+0x140>)
 800108c:	f007 fdd2 	bl	8008c34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001096:	f000 fc54 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM15_Init+0x140>)
 800109c:	f000 fdb8 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3768      	adds	r7, #104	; 0x68
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003e0 	.word	0x200003e0
 80010ac:	40014000 	.word	0x40014000

080010b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <MX_UART4_Init+0x94>)
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <MX_UART4_Init+0x98>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <MX_UART4_Init+0x94>)
 80010bc:	4a23      	ldr	r2, [pc, #140]	; (800114c <MX_UART4_Init+0x9c>)
 80010be:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MX_UART4_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_UART4_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_UART4_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_UART4_Init+0x94>)
 80010d4:	220c      	movs	r2, #12
 80010d6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_UART4_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_UART4_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_UART4_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_UART4_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_UART4_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_UART4_Init+0x94>)
 80010fe:	f009 fcfb 	bl	800aaf8 <HAL_RS485Ex_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 fc1b 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110c:	2100      	movs	r1, #0
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_UART4_Init+0x94>)
 8001110:	f009 fdb3 	bl	800ac7a <HAL_UARTEx_SetTxFifoThreshold>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 fc12 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111e:	2100      	movs	r1, #0
 8001120:	4808      	ldr	r0, [pc, #32]	; (8001144 <MX_UART4_Init+0x94>)
 8001122:	f009 fde8 	bl	800acf6 <HAL_UARTEx_SetRxFifoThreshold>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 800112c:	f000 fc09 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_UART4_Init+0x94>)
 8001132:	f009 fd69 	bl	800ac08 <HAL_UARTEx_DisableFifoMode>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 800113c:	f000 fc01 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200006ec 	.word	0x200006ec
 8001148:	40004c00 	.word	0x40004c00
 800114c:	001e8480 	.word	0x001e8480

08001150 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <MX_USART3_UART_Init+0x94>)
 8001158:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001198:	4811      	ldr	r0, [pc, #68]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 800119a:	f007 fde7 	bl	8008d6c <HAL_UART_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011a4:	f000 fbcd 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a8:	2100      	movs	r1, #0
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 80011ac:	f009 fd65 	bl	800ac7a <HAL_UARTEx_SetTxFifoThreshold>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011b6:	f000 fbc4 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 80011be:	f009 fd9a 	bl	800acf6 <HAL_UARTEx_SetRxFifoThreshold>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f000 fbbb 	bl	8001942 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_USART3_UART_Init+0x90>)
 80011ce:	f009 fd1b 	bl	800ac08 <HAL_UARTEx_DisableFifoMode>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 fbb3 	bl	8001942 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200002d0 	.word	0x200002d0
 80011e4:	40004800 	.word	0x40004800

080011e8 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <MX_DMA_Init+0x274>)
 80011f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011f4:	4a99      	ldr	r2, [pc, #612]	; (800145c <MX_DMA_Init+0x274>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011fe:	4b97      	ldr	r3, [pc, #604]	; (800145c <MX_DMA_Init+0x274>)
 8001200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120c:	4b93      	ldr	r3, [pc, #588]	; (800145c <MX_DMA_Init+0x274>)
 800120e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001212:	4a92      	ldr	r2, [pc, #584]	; (800145c <MX_DMA_Init+0x274>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800121c:	4b8f      	ldr	r3, [pc, #572]	; (800145c <MX_DMA_Init+0x274>)
 800121e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 800122a:	4b8d      	ldr	r3, [pc, #564]	; (8001460 <MX_DMA_Init+0x278>)
 800122c:	4a8d      	ldr	r2, [pc, #564]	; (8001464 <MX_DMA_Init+0x27c>)
 800122e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001230:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <MX_DMA_Init+0x278>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001236:	4b8a      	ldr	r3, [pc, #552]	; (8001460 <MX_DMA_Init+0x278>)
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <MX_DMA_Init+0x278>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001244:	4b86      	ldr	r3, [pc, #536]	; (8001460 <MX_DMA_Init+0x278>)
 8001246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800124c:	4b84      	ldr	r3, [pc, #528]	; (8001460 <MX_DMA_Init+0x278>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001252:	4b83      	ldr	r3, [pc, #524]	; (8001460 <MX_DMA_Init+0x278>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 8001258:	4b81      	ldr	r3, [pc, #516]	; (8001460 <MX_DMA_Init+0x278>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 800125e:	4b80      	ldr	r3, [pc, #512]	; (8001460 <MX_DMA_Init+0x278>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001264:	4b7e      	ldr	r3, [pc, #504]	; (8001460 <MX_DMA_Init+0x278>)
 8001266:	2204      	movs	r2, #4
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800126a:	4b7d      	ldr	r3, [pc, #500]	; (8001460 <MX_DMA_Init+0x278>)
 800126c:	2203      	movs	r2, #3
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001270:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <MX_DMA_Init+0x278>)
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001276:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <MX_DMA_Init+0x278>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 800127c:	4878      	ldr	r0, [pc, #480]	; (8001460 <MX_DMA_Init+0x278>)
 800127e:	f001 fbeb 	bl	8002a58 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8001288:	f000 fb5b 	bl	8001942 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <MX_DMA_Init+0x280>)
 800128e:	4a77      	ldr	r2, [pc, #476]	; (800146c <MX_DMA_Init+0x284>)
 8001290:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 8001292:	4b75      	ldr	r3, [pc, #468]	; (8001468 <MX_DMA_Init+0x280>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001298:	4b73      	ldr	r3, [pc, #460]	; (8001468 <MX_DMA_Init+0x280>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 800129e:	4b72      	ldr	r3, [pc, #456]	; (8001468 <MX_DMA_Init+0x280>)
 80012a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a4:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b70      	ldr	r3, [pc, #448]	; (8001468 <MX_DMA_Init+0x280>)
 80012a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ac:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ae:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <MX_DMA_Init+0x280>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b4:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <MX_DMA_Init+0x280>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 80012ba:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <MX_DMA_Init+0x280>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 80012c0:	4b69      	ldr	r3, [pc, #420]	; (8001468 <MX_DMA_Init+0x280>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012c6:	4b68      	ldr	r3, [pc, #416]	; (8001468 <MX_DMA_Init+0x280>)
 80012c8:	2204      	movs	r2, #4
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012cc:	4b66      	ldr	r3, [pc, #408]	; (8001468 <MX_DMA_Init+0x280>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 80012d2:	4b65      	ldr	r3, [pc, #404]	; (8001468 <MX_DMA_Init+0x280>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012d8:	4b63      	ldr	r3, [pc, #396]	; (8001468 <MX_DMA_Init+0x280>)
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 80012de:	4862      	ldr	r0, [pc, #392]	; (8001468 <MX_DMA_Init+0x280>)
 80012e0:	f001 fbba 	bl	8002a58 <HAL_DMA_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 80012ea:	f000 fb2a 	bl	8001942 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 80012ee:	4b60      	ldr	r3, [pc, #384]	; (8001470 <MX_DMA_Init+0x288>)
 80012f0:	4a60      	ldr	r2, [pc, #384]	; (8001474 <MX_DMA_Init+0x28c>)
 80012f2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 80012f4:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <MX_DMA_Init+0x288>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012fa:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <MX_DMA_Init+0x288>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <MX_DMA_Init+0x288>)
 8001302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001306:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001308:	4b59      	ldr	r3, [pc, #356]	; (8001470 <MX_DMA_Init+0x288>)
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001310:	4b57      	ldr	r3, [pc, #348]	; (8001470 <MX_DMA_Init+0x288>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <MX_DMA_Init+0x288>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <MX_DMA_Init+0x288>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8001322:	4b53      	ldr	r3, [pc, #332]	; (8001470 <MX_DMA_Init+0x288>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001328:	4b51      	ldr	r3, [pc, #324]	; (8001470 <MX_DMA_Init+0x288>)
 800132a:	2204      	movs	r2, #4
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <MX_DMA_Init+0x288>)
 8001330:	2203      	movs	r2, #3
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001334:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <MX_DMA_Init+0x288>)
 8001336:	2200      	movs	r2, #0
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <MX_DMA_Init+0x288>)
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 8001340:	484b      	ldr	r0, [pc, #300]	; (8001470 <MX_DMA_Init+0x288>)
 8001342:	f001 fb89 	bl	8002a58 <HAL_DMA_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 800134c:	f000 faf9 	bl	8001942 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <MX_DMA_Init+0x290>)
 8001352:	4a4a      	ldr	r2, [pc, #296]	; (800147c <MX_DMA_Init+0x294>)
 8001354:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 8001356:	4b48      	ldr	r3, [pc, #288]	; (8001478 <MX_DMA_Init+0x290>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <MX_DMA_Init+0x290>)
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <MX_DMA_Init+0x290>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <MX_DMA_Init+0x290>)
 800136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001370:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <MX_DMA_Init+0x290>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <MX_DMA_Init+0x290>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <MX_DMA_Init+0x290>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_DMA_Init+0x290>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <MX_DMA_Init+0x290>)
 800138c:	2204      	movs	r2, #4
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MX_DMA_Init+0x290>)
 8001392:	2203      	movs	r2, #3
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_DMA_Init+0x290>)
 8001398:	2200      	movs	r2, #0
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_DMA_Init+0x290>)
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 80013a2:	4835      	ldr	r0, [pc, #212]	; (8001478 <MX_DMA_Init+0x290>)
 80013a4:	f001 fb58 	bl	8002a58 <HAL_DMA_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 80013ae:	f000 fac8 	bl	8001942 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 80013b2:	4b33      	ldr	r3, [pc, #204]	; (8001480 <MX_DMA_Init+0x298>)
 80013b4:	4a33      	ldr	r2, [pc, #204]	; (8001484 <MX_DMA_Init+0x29c>)
 80013b6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <MX_DMA_Init+0x298>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <MX_DMA_Init+0x298>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_DMA_Init+0x298>)
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_DMA_Init+0x298>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_DMA_Init+0x298>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_DMA_Init+0x298>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_DMA_Init+0x298>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_DMA_Init+0x298>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_DMA_Init+0x298>)
 80013ee:	2204      	movs	r2, #4
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_DMA_Init+0x298>)
 80013f4:	2203      	movs	r2, #3
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_DMA_Init+0x298>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_DMA_Init+0x298>)
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 8001404:	481e      	ldr	r0, [pc, #120]	; (8001480 <MX_DMA_Init+0x298>)
 8001406:	f001 fb27 	bl	8002a58 <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 8001410:	f000 fa97 	bl	8001942 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	200c      	movs	r0, #12
 800141a:	f001 f9fe 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800141e:	200c      	movs	r0, #12
 8001420:	f001 fa15 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	200d      	movs	r0, #13
 800142a:	f001 f9f6 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800142e:	200d      	movs	r0, #13
 8001430:	f001 fa0d 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	2038      	movs	r0, #56	; 0x38
 800143a:	f001 f9ee 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800143e:	2038      	movs	r0, #56	; 0x38
 8001440:	f001 fa05 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2039      	movs	r0, #57	; 0x39
 800144a:	f001 f9e6 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800144e:	2039      	movs	r0, #57	; 0x39
 8001450:	f001 f9fd 	bl	800284e <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400
 8001460:	20000360 	.word	0x20000360
 8001464:	40020058 	.word	0x40020058
 8001468:	20000788 	.word	0x20000788
 800146c:	40020440 	.word	0x40020440
 8001470:	20000608 	.word	0x20000608
 8001474:	40020458 	.word	0x40020458
 8001478:	200000a4 	.word	0x200000a4
 800147c:	40020470 	.word	0x40020470
 8001480:	2000011c 	.word	0x2000011c
 8001484:	40020488 	.word	0x40020488

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <MX_GPIO_Init+0x204>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4a79      	ldr	r2, [pc, #484]	; (800168c <MX_GPIO_Init+0x204>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <MX_GPIO_Init+0x204>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <MX_GPIO_Init+0x204>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	4a72      	ldr	r2, [pc, #456]	; (800168c <MX_GPIO_Init+0x204>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014cc:	4b6f      	ldr	r3, [pc, #444]	; (800168c <MX_GPIO_Init+0x204>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4b6c      	ldr	r3, [pc, #432]	; (800168c <MX_GPIO_Init+0x204>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	4a6a      	ldr	r2, [pc, #424]	; (800168c <MX_GPIO_Init+0x204>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ea:	4b68      	ldr	r3, [pc, #416]	; (800168c <MX_GPIO_Init+0x204>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <MX_GPIO_Init+0x204>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a63      	ldr	r2, [pc, #396]	; (800168c <MX_GPIO_Init+0x204>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b60      	ldr	r3, [pc, #384]	; (800168c <MX_GPIO_Init+0x204>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <MX_GPIO_Init+0x204>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a5b      	ldr	r2, [pc, #364]	; (800168c <MX_GPIO_Init+0x204>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <MX_GPIO_Init+0x204>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b55      	ldr	r3, [pc, #340]	; (800168c <MX_GPIO_Init+0x204>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a54      	ldr	r2, [pc, #336]	; (800168c <MX_GPIO_Init+0x204>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <MX_GPIO_Init+0x204>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <MX_GPIO_Init+0x204>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4a4c      	ldr	r2, [pc, #304]	; (800168c <MX_GPIO_Init+0x204>)
 800155a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <MX_GPIO_Init+0x204>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001570:	2200      	movs	r2, #0
 8001572:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001576:	4846      	ldr	r0, [pc, #280]	; (8001690 <MX_GPIO_Init+0x208>)
 8001578:	f003 fe42 	bl	8005200 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001582:	4844      	ldr	r0, [pc, #272]	; (8001694 <MX_GPIO_Init+0x20c>)
 8001584:	f003 fe3c 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158e:	4842      	ldr	r0, [pc, #264]	; (8001698 <MX_GPIO_Init+0x210>)
 8001590:	f003 fe36 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159a:	4840      	ldr	r0, [pc, #256]	; (800169c <MX_GPIO_Init+0x214>)
 800159c:	f003 fe30 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80015a0:	f644 2321 	movw	r3, #18977	; 0x4a21
 80015a4:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4835      	ldr	r0, [pc, #212]	; (8001690 <MX_GPIO_Init+0x208>)
 80015ba:	f003 fc71 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 80015be:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <MX_GPIO_Init+0x218>)
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4830      	ldr	r0, [pc, #192]	; (8001694 <MX_GPIO_Init+0x20c>)
 80015d4:	f003 fc64 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80015d8:	f24c 0302 	movw	r3, #49154	; 0xc002
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4828      	ldr	r0, [pc, #160]	; (8001694 <MX_GPIO_Init+0x20c>)
 80015f2:	f003 fc55 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4822      	ldr	r0, [pc, #136]	; (8001698 <MX_GPIO_Init+0x210>)
 8001610:	f003 fc46 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <MX_GPIO_Init+0x214>)
 800162e:	f003 fc37 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_GPIO_Init+0x218>)
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_GPIO_Init+0x21c>)
 8001648:	f003 fc2a 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_GPIO_Init+0x218>)
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_GPIO_Init+0x208>)
 8001660:	f003 fc1e 	bl	8004ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2103      	movs	r1, #3
 8001668:	2017      	movs	r0, #23
 800166a:	f001 f8d6 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800166e:	2017      	movs	r0, #23
 8001670:	f001 f8ed 	bl	800284e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2103      	movs	r1, #3
 8001678:	2028      	movs	r0, #40	; 0x28
 800167a:	f001 f8ce 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800167e:	2028      	movs	r0, #40	; 0x28
 8001680:	f001 f8e5 	bl	800284e <HAL_NVIC_EnableIRQ>

}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400
 8001690:	58020400 	.word	0x58020400
 8001694:	58021000 	.word	0x58021000
 8001698:	58020c00 	.word	0x58020c00
 800169c:	58020800 	.word	0x58020800
 80016a0:	11110000 	.word	0x11110000
 80016a4:	58021800 	.word	0x58021800

080016a8 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80016b0:	1d39      	adds	r1, r7, #4
 80016b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b6:	2201      	movs	r2, #1
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <__io_putchar+0x20>)
 80016ba:	f007 fba7 	bl	8008e0c <HAL_UART_Transmit>

return ch;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200002d0 	.word	0x200002d0

080016cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a7b      	ldr	r2, [pc, #492]	; (80018c4 <HAL_UART_RxCpltCallback+0x1f8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	f040 80ef 	bne.w	80018bc <HAL_UART_RxCpltCallback+0x1f0>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 80016de:	4b7a      	ldr	r3, [pc, #488]	; (80018c8 <HAL_UART_RxCpltCallback+0x1fc>)
 80016e0:	22ac      	movs	r2, #172	; 0xac
 80016e2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80016e4:	2364      	movs	r3, #100	; 0x64
 80016e6:	2201      	movs	r2, #1
 80016e8:	4977      	ldr	r1, [pc, #476]	; (80018c8 <HAL_UART_RxCpltCallback+0x1fc>)
 80016ea:	4876      	ldr	r0, [pc, #472]	; (80018c4 <HAL_UART_RxCpltCallback+0x1f8>)
 80016ec:	f007 fb8e 	bl	8008e0c <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2101      	movs	r1, #1
 80016f4:	4875      	ldr	r0, [pc, #468]	; (80018cc <HAL_UART_RxCpltCallback+0x200>)
 80016f6:	f003 fd83 	bl	8005200 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2102      	movs	r1, #2
 80016fe:	4874      	ldr	r0, [pc, #464]	; (80018d0 <HAL_UART_RxCpltCallback+0x204>)
 8001700:	f003 fd7e 	bl	8005200 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800170a:	4870      	ldr	r0, [pc, #448]	; (80018cc <HAL_UART_RxCpltCallback+0x200>)
 800170c:	f003 fd78 	bl	8005200 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8001710:	4b70      	ldr	r3, [pc, #448]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2db      	uxtb	r3, r3
 800171a:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 800171c:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 800171e:	78db      	ldrb	r3, [r3, #3]
 8001720:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001726:	2400      	movs	r4, #0
 8001728:	e006      	b.n	8001738 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 800172a:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 800172c:	5d1b      	ldrb	r3, [r3, r4]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001736:	3401      	adds	r4, #1
 8001738:	2c02      	cmp	r4, #2
 800173a:	ddf6      	ble.n	800172a <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 809d 	bne.w	800188c <HAL_UART_RxCpltCallback+0x1c0>
		{
			switch(num_mode)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	2b0e      	cmp	r3, #14
 800175a:	f200 8085 	bhi.w	8001868 <HAL_UART_RxCpltCallback+0x19c>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_UART_RxCpltCallback+0x98>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001869 	.word	0x08001869
 8001768:	08001869 	.word	0x08001869
 800176c:	08001869 	.word	0x08001869
 8001770:	08001869 	.word	0x08001869
 8001774:	08001869 	.word	0x08001869
 8001778:	080017a1 	.word	0x080017a1
 800177c:	080017c9 	.word	0x080017c9
 8001780:	080017f1 	.word	0x080017f1
 8001784:	08001819 	.word	0x08001819
 8001788:	08001841 	.word	0x08001841
 800178c:	08001849 	.word	0x08001849
 8001790:	08001851 	.word	0x08001851
 8001794:	08001859 	.word	0x08001859
 8001798:	08001861 	.word	0x08001861
 800179c:	08001869 	.word	0x08001869
			{
				case 6:		// q1 Mode
				{
					q1 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 80017a0:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 80017b0:	789b      	ldrb	r3, [r3, #2]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <HAL_UART_RxCpltCallback+0x20c>)
 80017be:	601a      	str	r2, [r3, #0]
					State_Input_Joint_State = 1;
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_UART_RxCpltCallback+0x210>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
					break;
 80017c6:	e050      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 7:		// q2 Mode
				{
					q2 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 80017c8:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_UART_RxCpltCallback+0x214>)
 80017e6:	601a      	str	r2, [r3, #0]
					State_Input_Joint_State = 1;
 80017e8:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <HAL_UART_RxCpltCallback+0x210>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
					break;
 80017ee:	e03c      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 8:		// q3 Mode
				{
					q3 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 8001800:	789b      	ldrb	r3, [r3, #2]
 8001802:	b29b      	uxth	r3, r3
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	b21b      	sxth	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_UART_RxCpltCallback+0x218>)
 800180e:	601a      	str	r2, [r3, #0]
					State_Input_Joint_State = 1;
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <HAL_UART_RxCpltCallback+0x210>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
					break;
 8001816:	e028      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 9:		// q4 Mode
				{
					q4 = (int16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4413      	add	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	b21b      	sxth	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <HAL_UART_RxCpltCallback+0x21c>)
 8001836:	601a      	str	r2, [r3, #0]
					State_Input_Joint_State = 1;
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_UART_RxCpltCallback+0x210>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
					break;
 800183e:	e014      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_UART_RxCpltCallback+0x220>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
					break;
 8001846:	e010      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 8001848:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_UART_RxCpltCallback+0x224>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
					break;
 800184e:	e00c      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <HAL_UART_RxCpltCallback+0x228>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
					break;
 8001856:	e008      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_UART_RxCpltCallback+0x22c>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
					break;
 800185e:	e004      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_UART_RxCpltCallback+0x230>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
					break;
 8001866:	e000      	b.n	800186a <HAL_UART_RxCpltCallback+0x19e>
				{
					break;
				}
				default:
				{
					break;
 8001868:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2101      	movs	r1, #1
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <HAL_UART_RxCpltCallback+0x200>)
 8001870:	f003 fcc6 	bl	8005200 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2102      	movs	r1, #2
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <HAL_UART_RxCpltCallback+0x204>)
 800187a:	f003 fcc1 	bl	8005200 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <HAL_UART_RxCpltCallback+0x200>)
 8001886:	f003 fcbb 	bl	8005200 <HAL_GPIO_WritePin>
 800188a:	e012      	b.n	80018b2 <HAL_UART_RxCpltCallback+0x1e6>
		}
		else
		{
			  State_Checksum_Error = 1;
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_UART_RxCpltCallback+0x234>)
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <HAL_UART_RxCpltCallback+0x200>)
 8001898:	f003 fcb2 	bl	8005200 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2102      	movs	r1, #2
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_UART_RxCpltCallback+0x204>)
 80018a2:	f003 fcad 	bl	8005200 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <HAL_UART_RxCpltCallback+0x200>)
 80018ae:	f003 fca7 	bl	8005200 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 80018b2:	2204      	movs	r2, #4
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <HAL_UART_RxCpltCallback+0x208>)
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <HAL_UART_RxCpltCallback+0x1f8>)
 80018b8:	f007 fb3e 	bl	8008f38 <HAL_UART_Receive_IT>
	}
}
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	200002d0 	.word	0x200002d0
 80018c8:	2000069c 	.word	0x2000069c
 80018cc:	58020400 	.word	0x58020400
 80018d0:	58021000 	.word	0x58021000
 80018d4:	20000928 	.word	0x20000928
 80018d8:	20000698 	.word	0x20000698
 80018dc:	20000530 	.word	0x20000530
 80018e0:	20000460 	.word	0x20000460
 80018e4:	20000690 	.word	0x20000690
 80018e8:	200008a8 	.word	0x200008a8
 80018ec:	2000069d 	.word	0x2000069d
 80018f0:	2000069e 	.word	0x2000069e
 80018f4:	200000a0 	.word	0x200000a0
 80018f8:	20000924 	.word	0x20000924
 80018fc:	2000045c 	.word	0x2000045c
 8001900:	200008a4 	.word	0x200008a4

08001904 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]


}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001946:	b672      	cpsid	i
}
 8001948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194a:	e7fe      	b.n	800194a <Error_Handler+0x8>

0800194c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_MspInit+0x30>)
 8001954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x30>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x30>)
 8001964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58024400 	.word	0x58024400

08001980 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_CRC_MspInit+0x3c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10e      	bne.n	80019b0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_CRC_MspInit+0x40>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_CRC_MspInit+0x40>)
 800199a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800199e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_CRC_MspInit+0x40>)
 80019a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	58024c00 	.word	0x58024c00
 80019c0:	58024400 	.word	0x58024400

080019c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0b8      	sub	sp, #224	; 0xe0
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	22bc      	movs	r2, #188	; 0xbc
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f009 fa3d 	bl	800ae64 <memset>
  if(hspi->Instance==SPI3)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a25      	ldr	r2, [pc, #148]	; (8001a84 <HAL_SPI_MspInit+0xc0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d142      	bne.n	8001a7a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fc06 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a0e:	f7ff ff98 	bl	8001942 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_SPI_MspInit+0xc4>)
 8001a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_SPI_MspInit+0xc4>)
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_SPI_MspInit+0xc4>)
 8001a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_SPI_MspInit+0xc4>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_SPI_MspInit+0xc4>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_SPI_MspInit+0xc4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a68:	2306      	movs	r3, #6
 8001a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <HAL_SPI_MspInit+0xc8>)
 8001a76:	f003 fa13 	bl	8004ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	37e0      	adds	r7, #224	; 0xe0
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40003c00 	.word	0x40003c00
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	58020800 	.word	0x58020800

08001a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a55      	ldr	r2, [pc, #340]	; (8001bf4 <HAL_TIM_Base_MspInit+0x164>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa8:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ac0:	e094      	b.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aca:	d10f      	bne.n	8001aec <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001acc:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad2:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001adc:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
}
 8001aea:	e07f      	b.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_TIM_Base_MspInit+0x16c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10f      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afc:	4a3e      	ldr	r2, [pc, #248]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b06:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	69fb      	ldr	r3, [r7, #28]
}
 8001b14:	e06a      	b.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a39      	ldr	r2, [pc, #228]	; (8001c00 <HAL_TIM_Base_MspInit+0x170>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d10f      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
}
 8001b3e:	e055      	b.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <HAL_TIM_Base_MspInit+0x174>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d117      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b50:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2032      	movs	r0, #50	; 0x32
 8001b6e:	f000 fe54 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b72:	2032      	movs	r0, #50	; 0x32
 8001b74:	f000 fe6b 	bl	800284e <HAL_NVIC_EnableIRQ>
}
 8001b78:	e038      	b.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_TIM_Base_MspInit+0x178>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d117      	bne.n	8001bb4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	202b      	movs	r0, #43	; 0x2b
 8001ba8:	f000 fe37 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001bac:	202b      	movs	r0, #43	; 0x2b
 8001bae:	f000 fe4e 	bl	800284e <HAL_NVIC_EnableIRQ>
}
 8001bb2:	e01b      	b.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_TIM_Base_MspInit+0x17c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d116      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_TIM_Base_MspInit+0x168>)
 8001bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2074      	movs	r0, #116	; 0x74
 8001be2:	f000 fe1a 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001be6:	2074      	movs	r0, #116	; 0x74
 8001be8:	f000 fe31 	bl	800284e <HAL_NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	; 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40001800 	.word	0x40001800
 8001c0c:	40014000 	.word	0x40014000

08001c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <HAL_TIM_MspPostInit+0x198>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d120      	bne.n	8001c74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	4b5e      	ldr	r3, [pc, #376]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	4a5c      	ldr	r2, [pc, #368]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4850      	ldr	r0, [pc, #320]	; (8001db0 <HAL_TIM_MspPostInit+0x1a0>)
 8001c6e:	f003 f917 	bl	8004ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c72:	e094      	b.n	8001d9e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d120      	bne.n	8001cc0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	483e      	ldr	r0, [pc, #248]	; (8001db4 <HAL_TIM_MspPostInit+0x1a4>)
 8001cba:	f003 f8f1 	bl	8004ea0 <HAL_GPIO_Init>
}
 8001cbe:	e06e      	b.n	8001d9e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3c      	ldr	r2, [pc, #240]	; (8001db8 <HAL_TIM_MspPostInit+0x1a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d11f      	bne.n	8001d0a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	4a36      	ldr	r2, [pc, #216]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001ce8:	2340      	movs	r3, #64	; 0x40
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	482e      	ldr	r0, [pc, #184]	; (8001dbc <HAL_TIM_MspPostInit+0x1ac>)
 8001d04:	f003 f8cc 	bl	8004ea0 <HAL_GPIO_Init>
}
 8001d08:	e049      	b.n	8001d9e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <HAL_TIM_MspPostInit+0x1b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d120      	bne.n	8001d56 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d44:	2302      	movs	r3, #2
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4819      	ldr	r0, [pc, #100]	; (8001db4 <HAL_TIM_MspPostInit+0x1a4>)
 8001d50:	f003 f8a6 	bl	8004ea0 <HAL_GPIO_Init>
}
 8001d54:	e023      	b.n	8001d9e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_TIM_MspPostInit+0x1b4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d11e      	bne.n	8001d9e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_TIM_MspPostInit+0x19c>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_TIM_MspPostInit+0x1a0>)
 8001d9a:	f003 f881 	bl	8004ea0 <HAL_GPIO_Init>
}
 8001d9e:	bf00      	nop
 8001da0:	3730      	adds	r7, #48	; 0x30
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010000 	.word	0x40010000
 8001dac:	58024400 	.word	0x58024400
 8001db0:	58021000 	.word	0x58021000
 8001db4:	58020400 	.word	0x58020400
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	58020000 	.word	0x58020000
 8001dc0:	40000800 	.word	0x40000800
 8001dc4:	40014000 	.word	0x40014000

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0bc      	sub	sp, #240	; 0xf0
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	22bc      	movs	r2, #188	; 0xbc
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f009 f83b 	bl	800ae64 <memset>
  if(huart->Instance==UART4)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a67      	ldr	r2, [pc, #412]	; (8001f90 <HAL_UART_MspInit+0x1c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	f040 80db 	bne.w	8001fb0 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 fa03 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001e14:	f7ff fd95 	bl	8001942 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e18:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e1e:	4a5d      	ldr	r2, [pc, #372]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3c:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e54:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5a:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_UART_MspInit+0x1cc>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e96:	4619      	mov	r1, r3
 8001e98:	483f      	ldr	r0, [pc, #252]	; (8001f98 <HAL_UART_MspInit+0x1d0>)
 8001e9a:	f003 f801 	bl	8004ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4836      	ldr	r0, [pc, #216]	; (8001f9c <HAL_UART_MspInit+0x1d4>)
 8001ec4:	f002 ffec 	bl	8004ea0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001ec8:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001eca:	4a36      	ldr	r2, [pc, #216]	; (8001fa4 <HAL_UART_MspInit+0x1dc>)
 8001ecc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001ed0:	223f      	movs	r2, #63	; 0x3f
 8001ed2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed4:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f06:	4826      	ldr	r0, [pc, #152]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001f08:	f000 fda6 	bl	8002a58 <HAL_DMA_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001f12:	f7ff fd16 	bl	8001942 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001f1a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f1c:	4a20      	ldr	r2, [pc, #128]	; (8001fa0 <HAL_UART_MspInit+0x1d8>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_UART_MspInit+0x1e4>)
 8001f26:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f40:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001f60:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f62:	f000 fd79 	bl	8002a58 <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001f6c:	f7ff fce9 	bl	8001942 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f74:	679a      	str	r2, [r3, #120]	; 0x78
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_UART_MspInit+0x1e0>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2034      	movs	r0, #52	; 0x34
 8001f82:	f000 fc4a 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f86:	2034      	movs	r0, #52	; 0x34
 8001f88:	f000 fc61 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8c:	e0bd      	b.n	800210a <HAL_UART_MspInit+0x342>
 8001f8e:	bf00      	nop
 8001f90:	40004c00 	.word	0x40004c00
 8001f94:	58024400 	.word	0x58024400
 8001f98:	58020000 	.word	0x58020000
 8001f9c:	58020c00 	.word	0x58020c00
 8001fa0:	20000194 	.word	0x20000194
 8001fa4:	40020410 	.word	0x40020410
 8001fa8:	200008ac 	.word	0x200008ac
 8001fac:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_UART_MspInit+0x34c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 80a7 	bne.w	800210a <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 f922 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001fd6:	f7ff fcb4 	bl	8001942 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fda:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <HAL_UART_MspInit+0x350>)
 8001fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <HAL_UART_MspInit+0x350>)
 8001fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fea:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_UART_MspInit+0x350>)
 8001fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff8:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_UART_MspInit+0x350>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffe:	4a46      	ldr	r2, [pc, #280]	; (8002118 <HAL_UART_MspInit+0x350>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_UART_MspInit+0x350>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002030:	2307      	movs	r3, #7
 8002032:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002036:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800203a:	4619      	mov	r1, r3
 800203c:	4837      	ldr	r0, [pc, #220]	; (800211c <HAL_UART_MspInit+0x354>)
 800203e:	f002 ff2f 	bl	8004ea0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002044:	4a37      	ldr	r2, [pc, #220]	; (8002124 <HAL_UART_MspInit+0x35c>)
 8002046:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_UART_MspInit+0x358>)
 800204a:	222d      	movs	r2, #45	; 0x2d
 800204c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_UART_MspInit+0x358>)
 800205c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002060:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_UART_MspInit+0x358>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002070:	2200      	movs	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002076:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800207a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <HAL_UART_MspInit+0x358>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002082:	4827      	ldr	r0, [pc, #156]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002084:	f000 fce8 	bl	8002a58 <HAL_DMA_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 800208e:	f7ff fc58 	bl	8001942 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_UART_MspInit+0x358>)
 8002096:	67da      	str	r2, [r3, #124]	; 0x7c
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_UART_MspInit+0x358>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <HAL_UART_MspInit+0x364>)
 80020a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020a6:	222e      	movs	r2, #46	; 0x2e
 80020a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80020de:	4812      	ldr	r0, [pc, #72]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020e0:	f000 fcba 	bl	8002a58 <HAL_DMA_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_UART_MspInit+0x326>
      Error_Handler();
 80020ea:	f7ff fc2a 	bl	8001942 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020f2:	679a      	str	r2, [r3, #120]	; 0x78
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_UART_MspInit+0x360>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2027      	movs	r0, #39	; 0x27
 8002100:	f000 fb8b 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002104:	2027      	movs	r0, #39	; 0x27
 8002106:	f000 fba2 	bl	800284e <HAL_NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	37f0      	adds	r7, #240	; 0xf0
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40004800 	.word	0x40004800
 8002118:	58024400 	.word	0x58024400
 800211c:	58020c00 	.word	0x58020c00
 8002120:	20000258 	.word	0x20000258
 8002124:	40020028 	.word	0x40020028
 8002128:	2000046c 	.word	0x2000046c
 800212c:	40020040 	.word	0x40020040

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <NMI_Handler+0x4>

08002136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler+0x4>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <BusFault_Handler+0x4>

08002148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler+0x4>

0800214e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 fa46 	bl	800260c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <DMA1_Stream1_IRQHandler+0x10>)
 800218a:	f001 fd23 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000258 	.word	0x20000258

08002198 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA1_Stream2_IRQHandler+0x10>)
 800219e:	f001 fd19 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000046c 	.word	0x2000046c

080021ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021b0:	2040      	movs	r0, #64	; 0x40
 80021b2:	f003 f83e 	bl	8005232 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021b6:	2080      	movs	r0, #128	; 0x80
 80021b8:	f003 f83b 	bl	8005232 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <USART3_IRQHandler+0x10>)
 80021c6:	f006 fefd 	bl	8008fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002d0 	.word	0x200002d0

080021d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021dc:	f003 f829 	bl	8005232 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021e4:	f003 f825 	bl	8005232 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021ec:	f003 f821 	bl	8005232 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021f4:	f003 f81d 	bl	8005232 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002202:	f005 fd3e 	bl	8007c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000858 	.word	0x20000858

08002210 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <TIM5_IRQHandler+0x10>)
 8002216:	f005 fd34 	bl	8007c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200004e4 	.word	0x200004e4

08002224 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <UART4_IRQHandler+0x10>)
 800222a:	f006 fecb 	bl	8008fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200006ec 	.word	0x200006ec

08002238 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <DMA2_Stream0_IRQHandler+0x10>)
 800223e:	f001 fcc9 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000194 	.word	0x20000194

0800224c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <DMA2_Stream1_IRQHandler+0x10>)
 8002252:	f001 fcbf 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200008ac 	.word	0x200008ac

08002260 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <TIM15_IRQHandler+0x10>)
 8002266:	f005 fd0c 	bl	8007c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	200003e0 	.word	0x200003e0

08002274 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e00a      	b.n	800229c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002286:	f3af 8000 	nop.w
 800228a:	4601      	mov	r1, r0
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	60ba      	str	r2, [r7, #8]
 8002292:	b2ca      	uxtb	r2, r1
 8002294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3301      	adds	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dbf0      	blt.n	8002286 <_read+0x12>
	}

return len;
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e009      	b.n	80022d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	60ba      	str	r2, [r7, #8]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f9ed 	bl	80016a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	dbf1      	blt.n	80022c0 <_write+0x12>
	}
	return len;
 80022dc:	687b      	ldr	r3, [r7, #4]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_close>:

int _close(int file)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	return -1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230e:	605a      	str	r2, [r3, #4]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_isatty>:

int _isatty(int file)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	return 1;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
	return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <_sbrk+0x5c>)
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <_sbrk+0x60>)
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <_sbrk+0x64>)
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <_sbrk+0x68>)
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	429a      	cmp	r2, r3
 800237e:	d207      	bcs.n	8002390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002380:	f008 fd46 	bl	800ae10 <__errno>
 8002384:	4603      	mov	r3, r0
 8002386:	220c      	movs	r2, #12
 8002388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	e009      	b.n	80023a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <_sbrk+0x64>)
 80023a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20020000 	.word	0x20020000
 80023b0:	00000400 	.word	0x00000400
 80023b4:	20000094 	.word	0x20000094
 80023b8:	20000940 	.word	0x20000940

080023bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <SystemInit+0xec>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <SystemInit+0xec>)
 80023c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <SystemInit+0xf0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d807      	bhi.n	80023ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023dc:	4b33      	ldr	r3, [pc, #204]	; (80024ac <SystemInit+0xf0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 030f 	bic.w	r3, r3, #15
 80023e4:	4a31      	ldr	r2, [pc, #196]	; (80024ac <SystemInit+0xf0>)
 80023e6:	f043 0307 	orr.w	r3, r3, #7
 80023ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <SystemInit+0xf4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <SystemInit+0xf4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <SystemInit+0xf4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <SystemInit+0xf4>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	492b      	ldr	r1, [pc, #172]	; (80024b0 <SystemInit+0xf4>)
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <SystemInit+0xf8>)
 8002406:	4013      	ands	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <SystemInit+0xf0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002416:	4b25      	ldr	r3, [pc, #148]	; (80024ac <SystemInit+0xf0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 030f 	bic.w	r3, r3, #15
 800241e:	4a23      	ldr	r2, [pc, #140]	; (80024ac <SystemInit+0xf0>)
 8002420:	f043 0307 	orr.w	r3, r3, #7
 8002424:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <SystemInit+0xf4>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <SystemInit+0xf4>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <SystemInit+0xf4>)
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <SystemInit+0xf4>)
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <SystemInit+0xfc>)
 800243c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <SystemInit+0xf4>)
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <SystemInit+0x100>)
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <SystemInit+0xf4>)
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <SystemInit+0x104>)
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <SystemInit+0xf4>)
 800244c:	2200      	movs	r2, #0
 800244e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <SystemInit+0xf4>)
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <SystemInit+0x104>)
 8002454:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <SystemInit+0xf4>)
 8002458:	2200      	movs	r2, #0
 800245a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <SystemInit+0xf4>)
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <SystemInit+0x104>)
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <SystemInit+0xf4>)
 8002464:	2200      	movs	r2, #0
 8002466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <SystemInit+0xf4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <SystemInit+0xf4>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <SystemInit+0xf4>)
 8002476:	2200      	movs	r2, #0
 8002478:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <SystemInit+0x108>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <SystemInit+0x10c>)
 8002480:	4013      	ands	r3, r2
 8002482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002486:	d202      	bcs.n	800248e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <SystemInit+0x110>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <SystemInit+0x114>)
 8002490:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002494:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <SystemInit+0xec>)
 8002498:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800249c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	52002000 	.word	0x52002000
 80024b0:	58024400 	.word	0x58024400
 80024b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80024b8:	02020200 	.word	0x02020200
 80024bc:	01ff0000 	.word	0x01ff0000
 80024c0:	01010280 	.word	0x01010280
 80024c4:	5c001000 	.word	0x5c001000
 80024c8:	ffff0000 	.word	0xffff0000
 80024cc:	51008108 	.word	0x51008108
 80024d0:	52004000 	.word	0x52004000

080024d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800250c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d8:	f7ff ff70 	bl	80023bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	; (8002514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	; (8002518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	; (8002520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002502:	f008 fc8b 	bl	800ae1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002506:	f7fe f8b7 	bl	8000678 <main>
  bx  lr
 800250a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800250c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002518:	0800be34 	.word	0x0800be34
  ldr r2, =_sbss
 800251c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002520:	20000940 	.word	0x20000940

08002524 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC3_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252e:	2003      	movs	r0, #3
 8002530:	f000 f968 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002534:	f003 fc98 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_Init+0x68>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	4913      	ldr	r1, [pc, #76]	; (8002594 <HAL_Init+0x6c>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_Init+0x68>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_Init+0x6c>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <HAL_Init+0x70>)
 800256a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800256c:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_Init+0x74>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f814 	bl	80025a0 <HAL_InitTick>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e002      	b.n	8002588 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002582:	f7ff f9e3 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	58024400 	.word	0x58024400
 8002594:	0800bd4c 	.word	0x0800bd4c
 8002598:	20000004 	.word	0x20000004
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_InitTick+0x60>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e021      	b.n	80025f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_InitTick+0x64>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_InitTick+0x60>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f94d 	bl	800286a <HAL_SYSTICK_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00e      	b.n	80025f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0f      	cmp	r3, #15
 80025de:	d80a      	bhi.n	80025f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e0:	2200      	movs	r2, #0
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f000 f917 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ec:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_InitTick+0x68>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000000c 	.word	0x2000000c
 8002604:	20000000 	.word	0x20000000
 8002608:	20000008 	.word	0x20000008

0800260c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_IncTick+0x20>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x24>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_IncTick+0x24>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	2000000c 	.word	0x2000000c
 8002630:	2000092c 	.word	0x2000092c

08002634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return uwTick;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_GetTick+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	2000092c 	.word	0x2000092c

0800264c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_GetREVID+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0c1b      	lsrs	r3, r3, #16
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	5c001000 	.word	0x5c001000

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00
 80026a8:	05fa0000 	.word	0x05fa0000

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff40 	bl	80026ac <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff90 	bl	8002758 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5f 	bl	8002704 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff33 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa4 	bl	80027c0 <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e054      	b.n	8002940 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7f5b      	ldrb	r3, [r3, #29]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff f86a 	bl	8001980 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	791b      	ldrb	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_CRC_Init+0xc4>)
 80028c0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0218 	bic.w	r2, r2, #24
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	e00c      	b.n	80028ee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	461a      	mov	r2, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f834 	bl	800294c <HAL_CRCEx_Polynomial_Set>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e028      	b.n	8002940 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	795b      	ldrb	r3, [r3, #5]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f04f 32ff 	mov.w	r2, #4294967295
 80028fe:	611a      	str	r2, [r3, #16]
 8002900:	e004      	b.n	800290c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6912      	ldr	r2, [r2, #16]
 800290a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	04c11db7 	.word	0x04c11db7

0800294c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800295c:	231f      	movs	r3, #31
 800295e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002960:	bf00      	nop
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	613a      	str	r2, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_CRCEx_Polynomial_Set+0x34>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_CRCEx_Polynomial_Set+0x16>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b18      	cmp	r3, #24
 8002984:	d846      	bhi.n	8002a14 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	08002a1b 	.word	0x08002a1b
 8002990:	08002a15 	.word	0x08002a15
 8002994:	08002a15 	.word	0x08002a15
 8002998:	08002a15 	.word	0x08002a15
 800299c:	08002a15 	.word	0x08002a15
 80029a0:	08002a15 	.word	0x08002a15
 80029a4:	08002a15 	.word	0x08002a15
 80029a8:	08002a15 	.word	0x08002a15
 80029ac:	08002a09 	.word	0x08002a09
 80029b0:	08002a15 	.word	0x08002a15
 80029b4:	08002a15 	.word	0x08002a15
 80029b8:	08002a15 	.word	0x08002a15
 80029bc:	08002a15 	.word	0x08002a15
 80029c0:	08002a15 	.word	0x08002a15
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002a15 	.word	0x08002a15
 80029cc:	080029fd 	.word	0x080029fd
 80029d0:	08002a15 	.word	0x08002a15
 80029d4:	08002a15 	.word	0x08002a15
 80029d8:	08002a15 	.word	0x08002a15
 80029dc:	08002a15 	.word	0x08002a15
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002a15 	.word	0x08002a15
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	080029f1 	.word	0x080029f1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d913      	bls.n	8002a1e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029fa:	e010      	b.n	8002a1e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b07      	cmp	r3, #7
 8002a00:	d90f      	bls.n	8002a22 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a06:	e00c      	b.n	8002a22 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	d90b      	bls.n	8002a26 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002a12:	e008      	b.n	8002a26 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	75fb      	strb	r3, [r7, #23]
      break;
 8002a18:	e006      	b.n	8002a28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e004      	b.n	8002a28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002a26:	bf00      	nop
  }
  if (status == HAL_OK)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 0118 	bic.w	r1, r3, #24
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff fde8 	bl	8002634 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e316      	b.n	800309e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a66      	ldr	r2, [pc, #408]	; (8002c10 <HAL_DMA_Init+0x1b8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d04a      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a65      	ldr	r2, [pc, #404]	; (8002c14 <HAL_DMA_Init+0x1bc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d045      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a63      	ldr	r2, [pc, #396]	; (8002c18 <HAL_DMA_Init+0x1c0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d040      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a62      	ldr	r2, [pc, #392]	; (8002c1c <HAL_DMA_Init+0x1c4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d03b      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a60      	ldr	r2, [pc, #384]	; (8002c20 <HAL_DMA_Init+0x1c8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d036      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5f      	ldr	r2, [pc, #380]	; (8002c24 <HAL_DMA_Init+0x1cc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d031      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_DMA_Init+0x1d0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d02c      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <HAL_DMA_Init+0x1d4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d027      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5a      	ldr	r2, [pc, #360]	; (8002c30 <HAL_DMA_Init+0x1d8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d022      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a59      	ldr	r2, [pc, #356]	; (8002c34 <HAL_DMA_Init+0x1dc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d01d      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a57      	ldr	r2, [pc, #348]	; (8002c38 <HAL_DMA_Init+0x1e0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d018      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a56      	ldr	r2, [pc, #344]	; (8002c3c <HAL_DMA_Init+0x1e4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a54      	ldr	r2, [pc, #336]	; (8002c40 <HAL_DMA_Init+0x1e8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a53      	ldr	r2, [pc, #332]	; (8002c44 <HAL_DMA_Init+0x1ec>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a51      	ldr	r2, [pc, #324]	; (8002c48 <HAL_DMA_Init+0x1f0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_DMA_Init+0xb8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a50      	ldr	r2, [pc, #320]	; (8002c4c <HAL_DMA_Init+0x1f4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Init+0xbc>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_Init+0xbe>
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 813b 	beq.w	8002d92 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a37      	ldr	r2, [pc, #220]	; (8002c10 <HAL_DMA_Init+0x1b8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d04a      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a36      	ldr	r2, [pc, #216]	; (8002c14 <HAL_DMA_Init+0x1bc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d045      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <HAL_DMA_Init+0x1c0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d040      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <HAL_DMA_Init+0x1c4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d03b      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_DMA_Init+0x1c8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d036      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a30      	ldr	r2, [pc, #192]	; (8002c24 <HAL_DMA_Init+0x1cc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d031      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	; (8002c28 <HAL_DMA_Init+0x1d0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02c      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_DMA_Init+0x1d4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d027      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2b      	ldr	r2, [pc, #172]	; (8002c30 <HAL_DMA_Init+0x1d8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d022      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <HAL_DMA_Init+0x1dc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d01d      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a28      	ldr	r2, [pc, #160]	; (8002c38 <HAL_DMA_Init+0x1e0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d018      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <HAL_DMA_Init+0x1e4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_DMA_Init+0x1e8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00e      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <HAL_DMA_Init+0x1ec>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_DMA_Init+0x1f0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_DMA_Init+0x174>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <HAL_DMA_Init+0x1f4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <HAL_DMA_Init+0x186>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e007      	b.n	8002bee <HAL_DMA_Init+0x196>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bee:	e02f      	b.n	8002c50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf0:	f7ff fd20 	bl	8002634 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d928      	bls.n	8002c50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e246      	b.n	800309e <HAL_DMA_Init+0x646>
 8002c10:	40020010 	.word	0x40020010
 8002c14:	40020028 	.word	0x40020028
 8002c18:	40020040 	.word	0x40020040
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	40020070 	.word	0x40020070
 8002c24:	40020088 	.word	0x40020088
 8002c28:	400200a0 	.word	0x400200a0
 8002c2c:	400200b8 	.word	0x400200b8
 8002c30:	40020410 	.word	0x40020410
 8002c34:	40020428 	.word	0x40020428
 8002c38:	40020440 	.word	0x40020440
 8002c3c:	40020458 	.word	0x40020458
 8002c40:	40020470 	.word	0x40020470
 8002c44:	40020488 	.word	0x40020488
 8002c48:	400204a0 	.word	0x400204a0
 8002c4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1c8      	bne.n	8002bf0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <HAL_DMA_Init+0x420>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d107      	bne.n	8002cb4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	4313      	orrs	r3, r2
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002cb4:	4b71      	ldr	r3, [pc, #452]	; (8002e7c <HAL_DMA_Init+0x424>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_DMA_Init+0x428>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc0:	d328      	bcc.n	8002d14 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b28      	cmp	r3, #40	; 0x28
 8002cc8:	d903      	bls.n	8002cd2 <HAL_DMA_Init+0x27a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b2e      	cmp	r3, #46	; 0x2e
 8002cd0:	d917      	bls.n	8002d02 <HAL_DMA_Init+0x2aa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd8:	d903      	bls.n	8002ce2 <HAL_DMA_Init+0x28a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b42      	cmp	r3, #66	; 0x42
 8002ce0:	d90f      	bls.n	8002d02 <HAL_DMA_Init+0x2aa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b46      	cmp	r3, #70	; 0x46
 8002ce8:	d903      	bls.n	8002cf2 <HAL_DMA_Init+0x29a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b48      	cmp	r3, #72	; 0x48
 8002cf0:	d907      	bls.n	8002d02 <HAL_DMA_Init+0x2aa>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b4e      	cmp	r3, #78	; 0x4e
 8002cf8:	d905      	bls.n	8002d06 <HAL_DMA_Init+0x2ae>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b52      	cmp	r3, #82	; 0x52
 8002d00:	d801      	bhi.n	8002d06 <HAL_DMA_Init+0x2ae>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_DMA_Init+0x2b0>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d12:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0307 	bic.w	r3, r3, #7
 8002d2a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d117      	bne.n	8002d6e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f001 ff1b 	bl	8004b8c <DMA_CheckFifoParam>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2240      	movs	r2, #64	; 0x40
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e197      	b.n	800309e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f001 fe56 	bl	8004a28 <DMA_CalcBaseAndBitshift>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	223f      	movs	r2, #63	; 0x3f
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	e0cd      	b.n	8002f2e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3b      	ldr	r2, [pc, #236]	; (8002e84 <HAL_DMA_Init+0x42c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d022      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a39      	ldr	r2, [pc, #228]	; (8002e88 <HAL_DMA_Init+0x430>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <HAL_DMA_Init+0x434>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a36      	ldr	r2, [pc, #216]	; (8002e90 <HAL_DMA_Init+0x438>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_DMA_Init+0x43c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a33      	ldr	r2, [pc, #204]	; (8002e98 <HAL_DMA_Init+0x440>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_DMA_Init+0x444>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Init+0x38a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <HAL_DMA_Init+0x448>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <HAL_DMA_Init+0x38e>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_DMA_Init+0x390>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8097 	beq.w	8002f1c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <HAL_DMA_Init+0x42c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d021      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_DMA_Init+0x430>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01c      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_DMA_Init+0x434>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d017      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <HAL_DMA_Init+0x438>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d012      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <HAL_DMA_Init+0x43c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <HAL_DMA_Init+0x440>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d008      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_DMA_Init+0x444>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <HAL_DMA_Init+0x3e4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <HAL_DMA_Init+0x448>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_DMA_Init+0x44c>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d020      	beq.n	8002ea8 <HAL_DMA_Init+0x450>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	d102      	bne.n	8002e74 <HAL_DMA_Init+0x41c>
 8002e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e72:	e01a      	b.n	8002eaa <HAL_DMA_Init+0x452>
 8002e74:	2300      	movs	r3, #0
 8002e76:	e018      	b.n	8002eaa <HAL_DMA_Init+0x452>
 8002e78:	fe10803f 	.word	0xfe10803f
 8002e7c:	5c001000 	.word	0x5c001000
 8002e80:	ffff0000 	.word	0xffff0000
 8002e84:	58025408 	.word	0x58025408
 8002e88:	5802541c 	.word	0x5802541c
 8002e8c:	58025430 	.word	0x58025430
 8002e90:	58025444 	.word	0x58025444
 8002e94:	58025458 	.word	0x58025458
 8002e98:	5802546c 	.word	0x5802546c
 8002e9c:	58025480 	.word	0x58025480
 8002ea0:	58025494 	.word	0x58025494
 8002ea4:	fffe000f 	.word	0xfffe000f
 8002ea8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002eb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ed8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b6e      	ldr	r3, [pc, #440]	; (80030a8 <HAL_DMA_Init+0x650>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	4a6e      	ldr	r2, [pc, #440]	; (80030ac <HAL_DMA_Init+0x654>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	009a      	lsls	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f001 fd91 	bl	8004a28 <DMA_CalcBaseAndBitshift>
 8002f06:	4603      	mov	r3, r0
 8002f08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	2201      	movs	r2, #1
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	e008      	b.n	8002f2e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0b7      	b.n	800309e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5f      	ldr	r2, [pc, #380]	; (80030b0 <HAL_DMA_Init+0x658>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d072      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5d      	ldr	r2, [pc, #372]	; (80030b4 <HAL_DMA_Init+0x65c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d06d      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <HAL_DMA_Init+0x660>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d068      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5a      	ldr	r2, [pc, #360]	; (80030bc <HAL_DMA_Init+0x664>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d063      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a59      	ldr	r2, [pc, #356]	; (80030c0 <HAL_DMA_Init+0x668>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d05e      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a57      	ldr	r2, [pc, #348]	; (80030c4 <HAL_DMA_Init+0x66c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d059      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a56      	ldr	r2, [pc, #344]	; (80030c8 <HAL_DMA_Init+0x670>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d054      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a54      	ldr	r2, [pc, #336]	; (80030cc <HAL_DMA_Init+0x674>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d04f      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a53      	ldr	r2, [pc, #332]	; (80030d0 <HAL_DMA_Init+0x678>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d04a      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a51      	ldr	r2, [pc, #324]	; (80030d4 <HAL_DMA_Init+0x67c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d045      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a50      	ldr	r2, [pc, #320]	; (80030d8 <HAL_DMA_Init+0x680>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d040      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a4e      	ldr	r2, [pc, #312]	; (80030dc <HAL_DMA_Init+0x684>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d03b      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <HAL_DMA_Init+0x688>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d036      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <HAL_DMA_Init+0x68c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_DMA_Init+0x690>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d02c      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a48      	ldr	r2, [pc, #288]	; (80030ec <HAL_DMA_Init+0x694>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d027      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a47      	ldr	r2, [pc, #284]	; (80030f0 <HAL_DMA_Init+0x698>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_DMA_Init+0x69c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01d      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a44      	ldr	r2, [pc, #272]	; (80030f8 <HAL_DMA_Init+0x6a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d018      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a42      	ldr	r2, [pc, #264]	; (80030fc <HAL_DMA_Init+0x6a4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a41      	ldr	r2, [pc, #260]	; (8003100 <HAL_DMA_Init+0x6a8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00e      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3f      	ldr	r2, [pc, #252]	; (8003104 <HAL_DMA_Init+0x6ac>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a3e      	ldr	r2, [pc, #248]	; (8003108 <HAL_DMA_Init+0x6b0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_DMA_Init+0x5c6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3c      	ldr	r2, [pc, #240]	; (800310c <HAL_DMA_Init+0x6b4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_DMA_Init+0x5ca>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_DMA_Init+0x5cc>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d032      	beq.n	800308e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f001 fe2b 	bl	8004c84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b80      	cmp	r3, #128	; 0x80
 8003034:	d102      	bne.n	800303c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003050:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_DMA_Init+0x624>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d80c      	bhi.n	800307c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 fea8 	bl	8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	e008      	b.n	800308e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	a7fdabf8 	.word	0xa7fdabf8
 80030ac:	cccccccd 	.word	0xcccccccd
 80030b0:	40020010 	.word	0x40020010
 80030b4:	40020028 	.word	0x40020028
 80030b8:	40020040 	.word	0x40020040
 80030bc:	40020058 	.word	0x40020058
 80030c0:	40020070 	.word	0x40020070
 80030c4:	40020088 	.word	0x40020088
 80030c8:	400200a0 	.word	0x400200a0
 80030cc:	400200b8 	.word	0x400200b8
 80030d0:	40020410 	.word	0x40020410
 80030d4:	40020428 	.word	0x40020428
 80030d8:	40020440 	.word	0x40020440
 80030dc:	40020458 	.word	0x40020458
 80030e0:	40020470 	.word	0x40020470
 80030e4:	40020488 	.word	0x40020488
 80030e8:	400204a0 	.word	0x400204a0
 80030ec:	400204b8 	.word	0x400204b8
 80030f0:	58025408 	.word	0x58025408
 80030f4:	5802541c 	.word	0x5802541c
 80030f8:	58025430 	.word	0x58025430
 80030fc:	58025444 	.word	0x58025444
 8003100:	58025458 	.word	0x58025458
 8003104:	5802546c 	.word	0x5802546c
 8003108:	58025480 	.word	0x58025480
 800310c:	58025494 	.word	0x58025494

08003110 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff fa8c 	bl	8002634 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e2dc      	b.n	80036e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e2cd      	b.n	80036e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a76      	ldr	r2, [pc, #472]	; (8003324 <HAL_DMA_Abort+0x214>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04a      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a74      	ldr	r2, [pc, #464]	; (8003328 <HAL_DMA_Abort+0x218>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d045      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a73      	ldr	r2, [pc, #460]	; (800332c <HAL_DMA_Abort+0x21c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d040      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a71      	ldr	r2, [pc, #452]	; (8003330 <HAL_DMA_Abort+0x220>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d03b      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a70      	ldr	r2, [pc, #448]	; (8003334 <HAL_DMA_Abort+0x224>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d036      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a6e      	ldr	r2, [pc, #440]	; (8003338 <HAL_DMA_Abort+0x228>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d031      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6d      	ldr	r2, [pc, #436]	; (800333c <HAL_DMA_Abort+0x22c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d02c      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6b      	ldr	r2, [pc, #428]	; (8003340 <HAL_DMA_Abort+0x230>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d027      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_DMA_Abort+0x234>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a68      	ldr	r2, [pc, #416]	; (8003348 <HAL_DMA_Abort+0x238>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a67      	ldr	r2, [pc, #412]	; (800334c <HAL_DMA_Abort+0x23c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d018      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_DMA_Abort+0x240>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a64      	ldr	r2, [pc, #400]	; (8003354 <HAL_DMA_Abort+0x244>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a62      	ldr	r2, [pc, #392]	; (8003358 <HAL_DMA_Abort+0x248>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a61      	ldr	r2, [pc, #388]	; (800335c <HAL_DMA_Abort+0x24c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_Abort+0xd6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <HAL_DMA_Abort+0x250>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_DMA_Abort+0xda>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_DMA_Abort+0xdc>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 021e 	bic.w	r2, r2, #30
 80031fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e00a      	b.n	800322e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 020e 	bic.w	r2, r2, #14
 8003226:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3c      	ldr	r2, [pc, #240]	; (8003324 <HAL_DMA_Abort+0x214>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d072      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <HAL_DMA_Abort+0x218>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d06d      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a39      	ldr	r2, [pc, #228]	; (800332c <HAL_DMA_Abort+0x21c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d068      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a37      	ldr	r2, [pc, #220]	; (8003330 <HAL_DMA_Abort+0x220>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d063      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a36      	ldr	r2, [pc, #216]	; (8003334 <HAL_DMA_Abort+0x224>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d05e      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a34      	ldr	r2, [pc, #208]	; (8003338 <HAL_DMA_Abort+0x228>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d059      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a33      	ldr	r2, [pc, #204]	; (800333c <HAL_DMA_Abort+0x22c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d054      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a31      	ldr	r2, [pc, #196]	; (8003340 <HAL_DMA_Abort+0x230>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d04f      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a30      	ldr	r2, [pc, #192]	; (8003344 <HAL_DMA_Abort+0x234>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2e      	ldr	r2, [pc, #184]	; (8003348 <HAL_DMA_Abort+0x238>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a2d      	ldr	r2, [pc, #180]	; (800334c <HAL_DMA_Abort+0x23c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <HAL_DMA_Abort+0x240>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <HAL_DMA_Abort+0x244>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <HAL_DMA_Abort+0x248>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a27      	ldr	r2, [pc, #156]	; (800335c <HAL_DMA_Abort+0x24c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_DMA_Abort+0x250>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a24      	ldr	r2, [pc, #144]	; (8003364 <HAL_DMA_Abort+0x254>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_DMA_Abort+0x258>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_DMA_Abort+0x25c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_DMA_Abort+0x260>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_DMA_Abort+0x264>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_DMA_Abort+0x268>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_DMA_Abort+0x26c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_Abort+0x20e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <HAL_DMA_Abort+0x270>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d132      	bne.n	8003384 <HAL_DMA_Abort+0x274>
 800331e:	2301      	movs	r3, #1
 8003320:	e031      	b.n	8003386 <HAL_DMA_Abort+0x276>
 8003322:	bf00      	nop
 8003324:	40020010 	.word	0x40020010
 8003328:	40020028 	.word	0x40020028
 800332c:	40020040 	.word	0x40020040
 8003330:	40020058 	.word	0x40020058
 8003334:	40020070 	.word	0x40020070
 8003338:	40020088 	.word	0x40020088
 800333c:	400200a0 	.word	0x400200a0
 8003340:	400200b8 	.word	0x400200b8
 8003344:	40020410 	.word	0x40020410
 8003348:	40020428 	.word	0x40020428
 800334c:	40020440 	.word	0x40020440
 8003350:	40020458 	.word	0x40020458
 8003354:	40020470 	.word	0x40020470
 8003358:	40020488 	.word	0x40020488
 800335c:	400204a0 	.word	0x400204a0
 8003360:	400204b8 	.word	0x400204b8
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	58025430 	.word	0x58025430
 8003370:	58025444 	.word	0x58025444
 8003374:	58025458 	.word	0x58025458
 8003378:	5802546c 	.word	0x5802546c
 800337c:	58025480 	.word	0x58025480
 8003380:	58025494 	.word	0x58025494
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003398:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6d      	ldr	r2, [pc, #436]	; (8003554 <HAL_DMA_Abort+0x444>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d04a      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6b      	ldr	r2, [pc, #428]	; (8003558 <HAL_DMA_Abort+0x448>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d045      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a6a      	ldr	r2, [pc, #424]	; (800355c <HAL_DMA_Abort+0x44c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d040      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_DMA_Abort+0x450>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d03b      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a67      	ldr	r2, [pc, #412]	; (8003564 <HAL_DMA_Abort+0x454>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d036      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a65      	ldr	r2, [pc, #404]	; (8003568 <HAL_DMA_Abort+0x458>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d031      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a64      	ldr	r2, [pc, #400]	; (800356c <HAL_DMA_Abort+0x45c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d02c      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a62      	ldr	r2, [pc, #392]	; (8003570 <HAL_DMA_Abort+0x460>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d027      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a61      	ldr	r2, [pc, #388]	; (8003574 <HAL_DMA_Abort+0x464>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d022      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5f      	ldr	r2, [pc, #380]	; (8003578 <HAL_DMA_Abort+0x468>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01d      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5e      	ldr	r2, [pc, #376]	; (800357c <HAL_DMA_Abort+0x46c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_DMA_Abort+0x470>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <HAL_DMA_Abort+0x474>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_DMA_Abort+0x478>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_DMA_Abort+0x47c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_DMA_Abort+0x32a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_DMA_Abort+0x480>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <HAL_DMA_Abort+0x33c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <HAL_DMA_Abort+0x34c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800345c:	e013      	b.n	8003486 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345e:	f7ff f8e9 	bl	8002634 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b05      	cmp	r3, #5
 800346a:	d90c      	bls.n	8003486 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e12d      	b.n	80036e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e5      	bne.n	800345e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <HAL_DMA_Abort+0x444>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_DMA_Abort+0x448>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	; (800355c <HAL_DMA_Abort+0x44c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <HAL_DMA_Abort+0x450>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_DMA_Abort+0x454>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <HAL_DMA_Abort+0x458>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_DMA_Abort+0x45c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a24      	ldr	r2, [pc, #144]	; (8003570 <HAL_DMA_Abort+0x460>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a23      	ldr	r2, [pc, #140]	; (8003574 <HAL_DMA_Abort+0x464>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <HAL_DMA_Abort+0x468>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_DMA_Abort+0x46c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_DMA_Abort+0x470>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_DMA_Abort+0x474>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_DMA_Abort+0x478>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_DMA_Abort+0x47c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Abort+0x422>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_DMA_Abort+0x480>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_DMA_Abort+0x426>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_DMA_Abort+0x428>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d02b      	beq.n	8003594 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	223f      	movs	r2, #63	; 0x3f
 800354c:	409a      	lsls	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	e02a      	b.n	80035aa <HAL_DMA_Abort+0x49a>
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2201      	movs	r2, #1
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4f      	ldr	r2, [pc, #316]	; (80036ec <HAL_DMA_Abort+0x5dc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d072      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a4d      	ldr	r2, [pc, #308]	; (80036f0 <HAL_DMA_Abort+0x5e0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d06d      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_DMA_Abort+0x5e4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d068      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4a      	ldr	r2, [pc, #296]	; (80036f8 <HAL_DMA_Abort+0x5e8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d063      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a49      	ldr	r2, [pc, #292]	; (80036fc <HAL_DMA_Abort+0x5ec>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d05e      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a47      	ldr	r2, [pc, #284]	; (8003700 <HAL_DMA_Abort+0x5f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d059      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <HAL_DMA_Abort+0x5f4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d054      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a44      	ldr	r2, [pc, #272]	; (8003708 <HAL_DMA_Abort+0x5f8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d04f      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a43      	ldr	r2, [pc, #268]	; (800370c <HAL_DMA_Abort+0x5fc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a41      	ldr	r2, [pc, #260]	; (8003710 <HAL_DMA_Abort+0x600>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a40      	ldr	r2, [pc, #256]	; (8003714 <HAL_DMA_Abort+0x604>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3e      	ldr	r2, [pc, #248]	; (8003718 <HAL_DMA_Abort+0x608>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3d      	ldr	r2, [pc, #244]	; (800371c <HAL_DMA_Abort+0x60c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3b      	ldr	r2, [pc, #236]	; (8003720 <HAL_DMA_Abort+0x610>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <HAL_DMA_Abort+0x614>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a38      	ldr	r2, [pc, #224]	; (8003728 <HAL_DMA_Abort+0x618>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a37      	ldr	r2, [pc, #220]	; (800372c <HAL_DMA_Abort+0x61c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a35      	ldr	r2, [pc, #212]	; (8003730 <HAL_DMA_Abort+0x620>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a34      	ldr	r2, [pc, #208]	; (8003734 <HAL_DMA_Abort+0x624>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a32      	ldr	r2, [pc, #200]	; (8003738 <HAL_DMA_Abort+0x628>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_DMA_Abort+0x62c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2f      	ldr	r2, [pc, #188]	; (8003740 <HAL_DMA_Abort+0x630>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <HAL_DMA_Abort+0x634>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_Abort+0x58a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_DMA_Abort+0x638>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_DMA_Abort+0x58e>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_DMA_Abort+0x590>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40020010 	.word	0x40020010
 80036f0:	40020028 	.word	0x40020028
 80036f4:	40020040 	.word	0x40020040
 80036f8:	40020058 	.word	0x40020058
 80036fc:	40020070 	.word	0x40020070
 8003700:	40020088 	.word	0x40020088
 8003704:	400200a0 	.word	0x400200a0
 8003708:	400200b8 	.word	0x400200b8
 800370c:	40020410 	.word	0x40020410
 8003710:	40020428 	.word	0x40020428
 8003714:	40020440 	.word	0x40020440
 8003718:	40020458 	.word	0x40020458
 800371c:	40020470 	.word	0x40020470
 8003720:	40020488 	.word	0x40020488
 8003724:	400204a0 	.word	0x400204a0
 8003728:	400204b8 	.word	0x400204b8
 800372c:	58025408 	.word	0x58025408
 8003730:	5802541c 	.word	0x5802541c
 8003734:	58025430 	.word	0x58025430
 8003738:	58025444 	.word	0x58025444
 800373c:	58025458 	.word	0x58025458
 8003740:	5802546c 	.word	0x5802546c
 8003744:	58025480 	.word	0x58025480
 8003748:	58025494 	.word	0x58025494

0800374c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e205      	b.n	8003b6a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e1fa      	b.n	8003b6a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a8c      	ldr	r2, [pc, #560]	; (80039ac <HAL_DMA_Abort_IT+0x260>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04a      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a8b      	ldr	r2, [pc, #556]	; (80039b0 <HAL_DMA_Abort_IT+0x264>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d045      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a89      	ldr	r2, [pc, #548]	; (80039b4 <HAL_DMA_Abort_IT+0x268>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d040      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a88      	ldr	r2, [pc, #544]	; (80039b8 <HAL_DMA_Abort_IT+0x26c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d03b      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a86      	ldr	r2, [pc, #536]	; (80039bc <HAL_DMA_Abort_IT+0x270>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d036      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a85      	ldr	r2, [pc, #532]	; (80039c0 <HAL_DMA_Abort_IT+0x274>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d031      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a83      	ldr	r2, [pc, #524]	; (80039c4 <HAL_DMA_Abort_IT+0x278>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02c      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a82      	ldr	r2, [pc, #520]	; (80039c8 <HAL_DMA_Abort_IT+0x27c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d027      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_DMA_Abort_IT+0x280>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7f      	ldr	r2, [pc, #508]	; (80039d0 <HAL_DMA_Abort_IT+0x284>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01d      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_DMA_Abort_IT+0x288>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7c      	ldr	r2, [pc, #496]	; (80039d8 <HAL_DMA_Abort_IT+0x28c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_DMA_Abort_IT+0x290>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a79      	ldr	r2, [pc, #484]	; (80039e0 <HAL_DMA_Abort_IT+0x294>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_DMA_Abort_IT+0x298>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a76      	ldr	r2, [pc, #472]	; (80039e8 <HAL_DMA_Abort_IT+0x29c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_DMA_Abort_IT+0xcc>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_DMA_Abort_IT+0xce>
 8003818:	2300      	movs	r3, #0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d065      	beq.n	80038ea <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2204      	movs	r2, #4
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a60      	ldr	r2, [pc, #384]	; (80039ac <HAL_DMA_Abort_IT+0x260>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d04a      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5e      	ldr	r2, [pc, #376]	; (80039b0 <HAL_DMA_Abort_IT+0x264>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d045      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5d      	ldr	r2, [pc, #372]	; (80039b4 <HAL_DMA_Abort_IT+0x268>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5b      	ldr	r2, [pc, #364]	; (80039b8 <HAL_DMA_Abort_IT+0x26c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d03b      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5a      	ldr	r2, [pc, #360]	; (80039bc <HAL_DMA_Abort_IT+0x270>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d036      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <HAL_DMA_Abort_IT+0x274>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a57      	ldr	r2, [pc, #348]	; (80039c4 <HAL_DMA_Abort_IT+0x278>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d02c      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a55      	ldr	r2, [pc, #340]	; (80039c8 <HAL_DMA_Abort_IT+0x27c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d027      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_DMA_Abort_IT+0x280>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_DMA_Abort_IT+0x284>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a51      	ldr	r2, [pc, #324]	; (80039d4 <HAL_DMA_Abort_IT+0x288>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4f      	ldr	r2, [pc, #316]	; (80039d8 <HAL_DMA_Abort_IT+0x28c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4e      	ldr	r2, [pc, #312]	; (80039dc <HAL_DMA_Abort_IT+0x290>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a4c      	ldr	r2, [pc, #304]	; (80039e0 <HAL_DMA_Abort_IT+0x294>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a4b      	ldr	r2, [pc, #300]	; (80039e4 <HAL_DMA_Abort_IT+0x298>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x17a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a49      	ldr	r2, [pc, #292]	; (80039e8 <HAL_DMA_Abort_IT+0x29c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <HAL_DMA_Abort_IT+0x18c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e147      	b.n	8003b68 <HAL_DMA_Abort_IT+0x41c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e13e      	b.n	8003b68 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 020e 	bic.w	r2, r2, #14
 80038f8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <HAL_DMA_Abort_IT+0x260>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d04a      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <HAL_DMA_Abort_IT+0x264>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d045      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_DMA_Abort_IT+0x268>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d040      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <HAL_DMA_Abort_IT+0x26c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d03b      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a25      	ldr	r2, [pc, #148]	; (80039bc <HAL_DMA_Abort_IT+0x270>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d036      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <HAL_DMA_Abort_IT+0x274>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d031      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_DMA_Abort_IT+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d02c      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_DMA_Abort_IT+0x27c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d027      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_DMA_Abort_IT+0x280>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d022      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1d      	ldr	r2, [pc, #116]	; (80039d0 <HAL_DMA_Abort_IT+0x284>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_DMA_Abort_IT+0x288>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d018      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_DMA_Abort_IT+0x28c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_DMA_Abort_IT+0x290>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <HAL_DMA_Abort_IT+0x294>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <HAL_DMA_Abort_IT+0x298>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_DMA_Abort_IT+0x24e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a14      	ldr	r2, [pc, #80]	; (80039e8 <HAL_DMA_Abort_IT+0x29c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d128      	bne.n	80039ec <HAL_DMA_Abort_IT+0x2a0>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e027      	b.n	80039fc <HAL_DMA_Abort_IT+0x2b0>
 80039ac:	40020010 	.word	0x40020010
 80039b0:	40020028 	.word	0x40020028
 80039b4:	40020040 	.word	0x40020040
 80039b8:	40020058 	.word	0x40020058
 80039bc:	40020070 	.word	0x40020070
 80039c0:	40020088 	.word	0x40020088
 80039c4:	400200a0 	.word	0x400200a0
 80039c8:	400200b8 	.word	0x400200b8
 80039cc:	40020410 	.word	0x40020410
 80039d0:	40020428 	.word	0x40020428
 80039d4:	40020440 	.word	0x40020440
 80039d8:	40020458 	.word	0x40020458
 80039dc:	40020470 	.word	0x40020470
 80039e0:	40020488 	.word	0x40020488
 80039e4:	400204a0 	.word	0x400204a0
 80039e8:	400204b8 	.word	0x400204b8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5c      	ldr	r2, [pc, #368]	; (8003b74 <HAL_DMA_Abort_IT+0x428>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d072      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5b      	ldr	r2, [pc, #364]	; (8003b78 <HAL_DMA_Abort_IT+0x42c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d06d      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a59      	ldr	r2, [pc, #356]	; (8003b7c <HAL_DMA_Abort_IT+0x430>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d068      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <HAL_DMA_Abort_IT+0x434>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d063      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a56      	ldr	r2, [pc, #344]	; (8003b84 <HAL_DMA_Abort_IT+0x438>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d05e      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a55      	ldr	r2, [pc, #340]	; (8003b88 <HAL_DMA_Abort_IT+0x43c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d059      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a53      	ldr	r2, [pc, #332]	; (8003b8c <HAL_DMA_Abort_IT+0x440>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d054      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_DMA_Abort_IT+0x444>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04f      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a50      	ldr	r2, [pc, #320]	; (8003b94 <HAL_DMA_Abort_IT+0x448>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d04a      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a4f      	ldr	r2, [pc, #316]	; (8003b98 <HAL_DMA_Abort_IT+0x44c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d045      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4d      	ldr	r2, [pc, #308]	; (8003b9c <HAL_DMA_Abort_IT+0x450>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d040      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4c      	ldr	r2, [pc, #304]	; (8003ba0 <HAL_DMA_Abort_IT+0x454>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d03b      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_DMA_Abort_IT+0x458>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d036      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a49      	ldr	r2, [pc, #292]	; (8003ba8 <HAL_DMA_Abort_IT+0x45c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d031      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a47      	ldr	r2, [pc, #284]	; (8003bac <HAL_DMA_Abort_IT+0x460>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02c      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a46      	ldr	r2, [pc, #280]	; (8003bb0 <HAL_DMA_Abort_IT+0x464>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d027      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a44      	ldr	r2, [pc, #272]	; (8003bb4 <HAL_DMA_Abort_IT+0x468>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a43      	ldr	r2, [pc, #268]	; (8003bb8 <HAL_DMA_Abort_IT+0x46c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d01d      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <HAL_DMA_Abort_IT+0x470>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <HAL_DMA_Abort_IT+0x474>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3e      	ldr	r2, [pc, #248]	; (8003bc4 <HAL_DMA_Abort_IT+0x478>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3d      	ldr	r2, [pc, #244]	; (8003bc8 <HAL_DMA_Abort_IT+0x47c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_DMA_Abort_IT+0x480>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_DMA_Abort_IT+0x3a0>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3a      	ldr	r2, [pc, #232]	; (8003bd0 <HAL_DMA_Abort_IT+0x484>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_DMA_Abort_IT+0x3a4>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_DMA_Abort_IT+0x3a6>
 8003af0:	2300      	movs	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d028      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	58025408 	.word	0x58025408
 8003bb8:	5802541c 	.word	0x5802541c
 8003bbc:	58025430 	.word	0x58025430
 8003bc0:	58025444 	.word	0x58025444
 8003bc4:	58025458 	.word	0x58025458
 8003bc8:	5802546c 	.word	0x5802546c
 8003bcc:	58025480 	.word	0x58025480
 8003bd0:	58025494 	.word	0x58025494

08003bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003be0:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <HAL_DMA_IRQHandler+0x1ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a67      	ldr	r2, [pc, #412]	; (8003d84 <HAL_DMA_IRQHandler+0x1b0>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a5f      	ldr	r2, [pc, #380]	; (8003d88 <HAL_DMA_IRQHandler+0x1b4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d04a      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a5d      	ldr	r2, [pc, #372]	; (8003d8c <HAL_DMA_IRQHandler+0x1b8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d045      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a5c      	ldr	r2, [pc, #368]	; (8003d90 <HAL_DMA_IRQHandler+0x1bc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d040      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <HAL_DMA_IRQHandler+0x1c0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d03b      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a59      	ldr	r2, [pc, #356]	; (8003d98 <HAL_DMA_IRQHandler+0x1c4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d036      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_DMA_IRQHandler+0x1c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a56      	ldr	r2, [pc, #344]	; (8003da0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d02c      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a54      	ldr	r2, [pc, #336]	; (8003da4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d027      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a53      	ldr	r2, [pc, #332]	; (8003da8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d022      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a51      	ldr	r2, [pc, #324]	; (8003dac <HAL_DMA_IRQHandler+0x1d8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a50      	ldr	r2, [pc, #320]	; (8003db0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d018      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a4e      	ldr	r2, [pc, #312]	; (8003db4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a4d      	ldr	r2, [pc, #308]	; (8003db8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a4b      	ldr	r2, [pc, #300]	; (8003dbc <HAL_DMA_IRQHandler+0x1e8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a4a      	ldr	r2, [pc, #296]	; (8003dc0 <HAL_DMA_IRQHandler+0x1ec>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xd2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a48      	ldr	r2, [pc, #288]	; (8003dc4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA_IRQHandler+0xd6>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_DMA_IRQHandler+0xd8>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 842b 	beq.w	8004508 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2208      	movs	r2, #8
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a2 	beq.w	8003e0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2e      	ldr	r2, [pc, #184]	; (8003d88 <HAL_DMA_IRQHandler+0x1b4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <HAL_DMA_IRQHandler+0x1b8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d045      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <HAL_DMA_IRQHandler+0x1bc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d040      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2a      	ldr	r2, [pc, #168]	; (8003d94 <HAL_DMA_IRQHandler+0x1c0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d03b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a28      	ldr	r2, [pc, #160]	; (8003d98 <HAL_DMA_IRQHandler+0x1c4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d036      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <HAL_DMA_IRQHandler+0x1c8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <HAL_DMA_IRQHandler+0x1d0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d027      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <HAL_DMA_IRQHandler+0x1d4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a21      	ldr	r2, [pc, #132]	; (8003dac <HAL_DMA_IRQHandler+0x1d8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d018      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <HAL_DMA_IRQHandler+0x1e4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_DMA_IRQHandler+0x1e8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_DMA_IRQHandler+0x1ec>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x194>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_DMA_IRQHandler+0x1f0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d12f      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x1f4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e02e      	b.n	8003ddc <HAL_DMA_IRQHandler+0x208>
 8003d7e:	bf00      	nop
 8003d80:	20000000 	.word	0x20000000
 8003d84:	1b4e81b5 	.word	0x1b4e81b5
 8003d88:	40020010 	.word	0x40020010
 8003d8c:	40020028 	.word	0x40020028
 8003d90:	40020040 	.word	0x40020040
 8003d94:	40020058 	.word	0x40020058
 8003d98:	40020070 	.word	0x40020070
 8003d9c:	40020088 	.word	0x40020088
 8003da0:	400200a0 	.word	0x400200a0
 8003da4:	400200b8 	.word	0x400200b8
 8003da8:	40020410 	.word	0x40020410
 8003dac:	40020428 	.word	0x40020428
 8003db0:	40020440 	.word	0x40020440
 8003db4:	40020458 	.word	0x40020458
 8003db8:	40020470 	.word	0x40020470
 8003dbc:	40020488 	.word	0x40020488
 8003dc0:	400204a0 	.word	0x400204a0
 8003dc4:	400204b8 	.word	0x400204b8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	2208      	movs	r2, #8
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d06e      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_DMA_IRQHandler+0x3f8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d04a      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d045      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a66      	ldr	r2, [pc, #408]	; (8003fd4 <HAL_DMA_IRQHandler+0x400>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d040      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a64      	ldr	r2, [pc, #400]	; (8003fd8 <HAL_DMA_IRQHandler+0x404>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d03b      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_DMA_IRQHandler+0x408>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d036      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <HAL_DMA_IRQHandler+0x40c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d031      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a60      	ldr	r2, [pc, #384]	; (8003fe4 <HAL_DMA_IRQHandler+0x410>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02c      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5e      	ldr	r2, [pc, #376]	; (8003fe8 <HAL_DMA_IRQHandler+0x414>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d027      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <HAL_DMA_IRQHandler+0x418>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a5b      	ldr	r2, [pc, #364]	; (8003ff0 <HAL_DMA_IRQHandler+0x41c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a5a      	ldr	r2, [pc, #360]	; (8003ff4 <HAL_DMA_IRQHandler+0x420>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_DMA_IRQHandler+0x424>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a57      	ldr	r2, [pc, #348]	; (8003ffc <HAL_DMA_IRQHandler+0x428>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a55      	ldr	r2, [pc, #340]	; (8004000 <HAL_DMA_IRQHandler+0x42c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a54      	ldr	r2, [pc, #336]	; (8004004 <HAL_DMA_IRQHandler+0x430>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x2ee>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_DMA_IRQHandler+0x434>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x304>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e003      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x30c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2201      	movs	r2, #1
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0202 	orr.w	r2, r3, #2
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2204      	movs	r2, #4
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 808f 	beq.w	8004034 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <HAL_DMA_IRQHandler+0x3f8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <HAL_DMA_IRQHandler+0x3fc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <HAL_DMA_IRQHandler+0x400>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_DMA_IRQHandler+0x404>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <HAL_DMA_IRQHandler+0x408>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_DMA_IRQHandler+0x40c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a23      	ldr	r2, [pc, #140]	; (8003fe4 <HAL_DMA_IRQHandler+0x410>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <HAL_DMA_IRQHandler+0x414>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	; (8003fec <HAL_DMA_IRQHandler+0x418>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <HAL_DMA_IRQHandler+0x41c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_DMA_IRQHandler+0x420>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_DMA_IRQHandler+0x424>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <HAL_DMA_IRQHandler+0x428>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_DMA_IRQHandler+0x42c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_DMA_IRQHandler+0x430>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x3e2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <HAL_DMA_IRQHandler+0x434>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d12a      	bne.n	800400c <HAL_DMA_IRQHandler+0x438>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e023      	b.n	8004014 <HAL_DMA_IRQHandler+0x440>
 8003fcc:	40020010 	.word	0x40020010
 8003fd0:	40020028 	.word	0x40020028
 8003fd4:	40020040 	.word	0x40020040
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020070 	.word	0x40020070
 8003fe0:	40020088 	.word	0x40020088
 8003fe4:	400200a0 	.word	0x400200a0
 8003fe8:	400200b8 	.word	0x400200b8
 8003fec:	40020410 	.word	0x40020410
 8003ff0:	40020428 	.word	0x40020428
 8003ff4:	40020440 	.word	0x40020440
 8003ff8:	40020458 	.word	0x40020458
 8003ffc:	40020470 	.word	0x40020470
 8004000:	40020488 	.word	0x40020488
 8004004:	400204a0 	.word	0x400204a0
 8004008:	400204b8 	.word	0x400204b8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2204      	movs	r2, #4
 8004022:	409a      	lsls	r2, r3
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2210      	movs	r2, #16
 800403e:	409a      	lsls	r2, r3
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a6 	beq.w	8004196 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a85      	ldr	r2, [pc, #532]	; (8004264 <HAL_DMA_IRQHandler+0x690>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d04a      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a83      	ldr	r2, [pc, #524]	; (8004268 <HAL_DMA_IRQHandler+0x694>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d045      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a82      	ldr	r2, [pc, #520]	; (800426c <HAL_DMA_IRQHandler+0x698>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d040      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a80      	ldr	r2, [pc, #512]	; (8004270 <HAL_DMA_IRQHandler+0x69c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d03b      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7f      	ldr	r2, [pc, #508]	; (8004274 <HAL_DMA_IRQHandler+0x6a0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d036      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a7d      	ldr	r2, [pc, #500]	; (8004278 <HAL_DMA_IRQHandler+0x6a4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d031      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7c      	ldr	r2, [pc, #496]	; (800427c <HAL_DMA_IRQHandler+0x6a8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d02c      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7a      	ldr	r2, [pc, #488]	; (8004280 <HAL_DMA_IRQHandler+0x6ac>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d027      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a79      	ldr	r2, [pc, #484]	; (8004284 <HAL_DMA_IRQHandler+0x6b0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a77      	ldr	r2, [pc, #476]	; (8004288 <HAL_DMA_IRQHandler+0x6b4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01d      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a76      	ldr	r2, [pc, #472]	; (800428c <HAL_DMA_IRQHandler+0x6b8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a74      	ldr	r2, [pc, #464]	; (8004290 <HAL_DMA_IRQHandler+0x6bc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a73      	ldr	r2, [pc, #460]	; (8004294 <HAL_DMA_IRQHandler+0x6c0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a71      	ldr	r2, [pc, #452]	; (8004298 <HAL_DMA_IRQHandler+0x6c4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a70      	ldr	r2, [pc, #448]	; (800429c <HAL_DMA_IRQHandler+0x6c8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_DMA_IRQHandler+0x516>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6e      	ldr	r2, [pc, #440]	; (80042a0 <HAL_DMA_IRQHandler+0x6cc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10a      	bne.n	8004100 <HAL_DMA_IRQHandler+0x52c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e009      	b.n	8004114 <HAL_DMA_IRQHandler+0x540>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d03e      	beq.n	8004196 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2210      	movs	r2, #16
 8004122:	409a      	lsls	r2, r3
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d024      	beq.n	8004196 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
 8004154:	e01f      	b.n	8004196 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01b      	beq.n	8004196 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e016      	b.n	8004196 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0208 	bic.w	r2, r2, #8
 8004184:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2220      	movs	r2, #32
 80041a0:	409a      	lsls	r2, r3
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8110 	beq.w	80043cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <HAL_DMA_IRQHandler+0x690>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d04a      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <HAL_DMA_IRQHandler+0x694>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d045      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a29      	ldr	r2, [pc, #164]	; (800426c <HAL_DMA_IRQHandler+0x698>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d040      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a28      	ldr	r2, [pc, #160]	; (8004270 <HAL_DMA_IRQHandler+0x69c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d03b      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <HAL_DMA_IRQHandler+0x6a0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d036      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <HAL_DMA_IRQHandler+0x6a4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d031      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a23      	ldr	r2, [pc, #140]	; (800427c <HAL_DMA_IRQHandler+0x6a8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02c      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a22      	ldr	r2, [pc, #136]	; (8004280 <HAL_DMA_IRQHandler+0x6ac>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d027      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_DMA_IRQHandler+0x6b0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d022      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_DMA_IRQHandler+0x6b4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d01d      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1d      	ldr	r2, [pc, #116]	; (800428c <HAL_DMA_IRQHandler+0x6b8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_DMA_IRQHandler+0x6bc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_DMA_IRQHandler+0x6c0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_DMA_IRQHandler+0x6c4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_DMA_IRQHandler+0x6c8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_DMA_IRQHandler+0x678>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <HAL_DMA_IRQHandler+0x6cc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d12b      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x6d0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e02a      	b.n	80042b8 <HAL_DMA_IRQHandler+0x6e4>
 8004262:	bf00      	nop
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8087 	beq.w	80043cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2220      	movs	r2, #32
 80042c8:	409a      	lsls	r2, r3
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d139      	bne.n	800434e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0216 	bic.w	r2, r2, #22
 80042e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <HAL_DMA_IRQHandler+0x736>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0208 	bic.w	r2, r2, #8
 8004318:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	223f      	movs	r2, #63	; 0x3f
 8004324:	409a      	lsls	r2, r3
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 834a 	beq.w	80049d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
          }
          return;
 800434c:	e344      	b.n	80049d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d018      	beq.n	800438e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	2b00      	cmp	r3, #0
 8004370:	d02c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
 800437a:	e027      	b.n	80043cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d023      	beq.n	80043cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
 800438c:	e01e      	b.n	80043cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0210 	bic.w	r2, r2, #16
 80043aa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8306 	beq.w	80049e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8088 	beq.w	80044f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2204      	movs	r2, #4
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7a      	ldr	r2, [pc, #488]	; (80045dc <HAL_DMA_IRQHandler+0xa08>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d04a      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a79      	ldr	r2, [pc, #484]	; (80045e0 <HAL_DMA_IRQHandler+0xa0c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d045      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a77      	ldr	r2, [pc, #476]	; (80045e4 <HAL_DMA_IRQHandler+0xa10>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d040      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a76      	ldr	r2, [pc, #472]	; (80045e8 <HAL_DMA_IRQHandler+0xa14>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d03b      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a74      	ldr	r2, [pc, #464]	; (80045ec <HAL_DMA_IRQHandler+0xa18>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d036      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a73      	ldr	r2, [pc, #460]	; (80045f0 <HAL_DMA_IRQHandler+0xa1c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d031      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a71      	ldr	r2, [pc, #452]	; (80045f4 <HAL_DMA_IRQHandler+0xa20>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d02c      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a70      	ldr	r2, [pc, #448]	; (80045f8 <HAL_DMA_IRQHandler+0xa24>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d027      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6e      	ldr	r2, [pc, #440]	; (80045fc <HAL_DMA_IRQHandler+0xa28>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d022      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6d      	ldr	r2, [pc, #436]	; (8004600 <HAL_DMA_IRQHandler+0xa2c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d01d      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6b      	ldr	r2, [pc, #428]	; (8004604 <HAL_DMA_IRQHandler+0xa30>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d018      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6a      	ldr	r2, [pc, #424]	; (8004608 <HAL_DMA_IRQHandler+0xa34>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a68      	ldr	r2, [pc, #416]	; (800460c <HAL_DMA_IRQHandler+0xa38>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a67      	ldr	r2, [pc, #412]	; (8004610 <HAL_DMA_IRQHandler+0xa3c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a65      	ldr	r2, [pc, #404]	; (8004614 <HAL_DMA_IRQHandler+0xa40>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_DMA_IRQHandler+0x8b8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a64      	ldr	r2, [pc, #400]	; (8004618 <HAL_DMA_IRQHandler+0xa44>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <HAL_DMA_IRQHandler+0x8ca>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e007      	b.n	80044ae <HAL_DMA_IRQHandler+0x8da>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d307      	bcc.n	80044ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f2      	bne.n	80044ae <HAL_DMA_IRQHandler+0x8da>
 80044c8:	e000      	b.n	80044cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044ca:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2203      	movs	r2, #3
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044ea:	e003      	b.n	80044f4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8272 	beq.w	80049e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
 8004506:	e26c      	b.n	80049e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a43      	ldr	r2, [pc, #268]	; (800461c <HAL_DMA_IRQHandler+0xa48>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a42      	ldr	r2, [pc, #264]	; (8004620 <HAL_DMA_IRQHandler+0xa4c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01d      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a40      	ldr	r2, [pc, #256]	; (8004624 <HAL_DMA_IRQHandler+0xa50>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3f      	ldr	r2, [pc, #252]	; (8004628 <HAL_DMA_IRQHandler+0xa54>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a3d      	ldr	r2, [pc, #244]	; (800462c <HAL_DMA_IRQHandler+0xa58>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a3c      	ldr	r2, [pc, #240]	; (8004630 <HAL_DMA_IRQHandler+0xa5c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_DMA_IRQHandler+0xa60>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_DMA_IRQHandler+0x984>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a39      	ldr	r2, [pc, #228]	; (8004638 <HAL_DMA_IRQHandler+0xa64>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_DMA_IRQHandler+0x988>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_DMA_IRQHandler+0x98a>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 823f 	beq.w	80049e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	2204      	movs	r2, #4
 8004576:	409a      	lsls	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80cd 	beq.w	800471c <HAL_DMA_IRQHandler+0xb48>
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80c7 	beq.w	800471c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2204      	movs	r2, #4
 8004598:	409a      	lsls	r2, r3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d049      	beq.n	800463c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8210 	beq.w	80049dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045c4:	e20a      	b.n	80049dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8206 	beq.w	80049dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d8:	e200      	b.n	80049dc <HAL_DMA_IRQHandler+0xe08>
 80045da:	bf00      	nop
 80045dc:	40020010 	.word	0x40020010
 80045e0:	40020028 	.word	0x40020028
 80045e4:	40020040 	.word	0x40020040
 80045e8:	40020058 	.word	0x40020058
 80045ec:	40020070 	.word	0x40020070
 80045f0:	40020088 	.word	0x40020088
 80045f4:	400200a0 	.word	0x400200a0
 80045f8:	400200b8 	.word	0x400200b8
 80045fc:	40020410 	.word	0x40020410
 8004600:	40020428 	.word	0x40020428
 8004604:	40020440 	.word	0x40020440
 8004608:	40020458 	.word	0x40020458
 800460c:	40020470 	.word	0x40020470
 8004610:	40020488 	.word	0x40020488
 8004614:	400204a0 	.word	0x400204a0
 8004618:	400204b8 	.word	0x400204b8
 800461c:	58025408 	.word	0x58025408
 8004620:	5802541c 	.word	0x5802541c
 8004624:	58025430 	.word	0x58025430
 8004628:	58025444 	.word	0x58025444
 800462c:	58025458 	.word	0x58025458
 8004630:	5802546c 	.word	0x5802546c
 8004634:	58025480 	.word	0x58025480
 8004638:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d160      	bne.n	8004708 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a8c      	ldr	r2, [pc, #560]	; (800487c <HAL_DMA_IRQHandler+0xca8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d04a      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a8a      	ldr	r2, [pc, #552]	; (8004880 <HAL_DMA_IRQHandler+0xcac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d045      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a89      	ldr	r2, [pc, #548]	; (8004884 <HAL_DMA_IRQHandler+0xcb0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d040      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a87      	ldr	r2, [pc, #540]	; (8004888 <HAL_DMA_IRQHandler+0xcb4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d03b      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a86      	ldr	r2, [pc, #536]	; (800488c <HAL_DMA_IRQHandler+0xcb8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d036      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a84      	ldr	r2, [pc, #528]	; (8004890 <HAL_DMA_IRQHandler+0xcbc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d031      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a83      	ldr	r2, [pc, #524]	; (8004894 <HAL_DMA_IRQHandler+0xcc0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d02c      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a81      	ldr	r2, [pc, #516]	; (8004898 <HAL_DMA_IRQHandler+0xcc4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d027      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a80      	ldr	r2, [pc, #512]	; (800489c <HAL_DMA_IRQHandler+0xcc8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a7e      	ldr	r2, [pc, #504]	; (80048a0 <HAL_DMA_IRQHandler+0xccc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7d      	ldr	r2, [pc, #500]	; (80048a4 <HAL_DMA_IRQHandler+0xcd0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7b      	ldr	r2, [pc, #492]	; (80048a8 <HAL_DMA_IRQHandler+0xcd4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7a      	ldr	r2, [pc, #488]	; (80048ac <HAL_DMA_IRQHandler+0xcd8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a78      	ldr	r2, [pc, #480]	; (80048b0 <HAL_DMA_IRQHandler+0xcdc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a77      	ldr	r2, [pc, #476]	; (80048b4 <HAL_DMA_IRQHandler+0xce0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xb12>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_DMA_IRQHandler+0xce4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <HAL_DMA_IRQHandler+0xb24>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e007      	b.n	8004708 <HAL_DMA_IRQHandler+0xb34>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8165 	beq.w	80049dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471a:	e15f      	b.n	80049dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2202      	movs	r2, #2
 8004726:	409a      	lsls	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80c5 	beq.w	80048bc <HAL_DMA_IRQHandler+0xce8>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80bf 	beq.w	80048bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2202      	movs	r2, #2
 8004748:	409a      	lsls	r2, r3
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d018      	beq.n	800478a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 813a 	beq.w	80049e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004774:	e134      	b.n	80049e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8130 	beq.w	80049e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004788:	e12a      	b.n	80049e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d168      	bne.n	8004866 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a38      	ldr	r2, [pc, #224]	; (800487c <HAL_DMA_IRQHandler+0xca8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d04a      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <HAL_DMA_IRQHandler+0xcac>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d045      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a35      	ldr	r2, [pc, #212]	; (8004884 <HAL_DMA_IRQHandler+0xcb0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d040      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a34      	ldr	r2, [pc, #208]	; (8004888 <HAL_DMA_IRQHandler+0xcb4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d03b      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a32      	ldr	r2, [pc, #200]	; (800488c <HAL_DMA_IRQHandler+0xcb8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d036      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a31      	ldr	r2, [pc, #196]	; (8004890 <HAL_DMA_IRQHandler+0xcbc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d031      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <HAL_DMA_IRQHandler+0xcc0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d02c      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <HAL_DMA_IRQHandler+0xcc4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d027      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	; (800489c <HAL_DMA_IRQHandler+0xcc8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2b      	ldr	r2, [pc, #172]	; (80048a0 <HAL_DMA_IRQHandler+0xccc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d01d      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <HAL_DMA_IRQHandler+0xcd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <HAL_DMA_IRQHandler+0xcd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_DMA_IRQHandler+0xcd8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <HAL_DMA_IRQHandler+0xcdc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <HAL_DMA_IRQHandler+0xce0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_DMA_IRQHandler+0xc60>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <HAL_DMA_IRQHandler+0xce4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <HAL_DMA_IRQHandler+0xc72>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0214 	bic.w	r2, r2, #20
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e007      	b.n	8004856 <HAL_DMA_IRQHandler+0xc82>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 020a 	bic.w	r2, r2, #10
 8004854:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80b8 	beq.w	80049e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004878:	e0b2      	b.n	80049e0 <HAL_DMA_IRQHandler+0xe0c>
 800487a:	bf00      	nop
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2208      	movs	r2, #8
 80048c6:	409a      	lsls	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8088 	beq.w	80049e2 <HAL_DMA_IRQHandler+0xe0e>
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8082 	beq.w	80049e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a41      	ldr	r2, [pc, #260]	; (80049e8 <HAL_DMA_IRQHandler+0xe14>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d04a      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3f      	ldr	r2, [pc, #252]	; (80049ec <HAL_DMA_IRQHandler+0xe18>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d045      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3e      	ldr	r2, [pc, #248]	; (80049f0 <HAL_DMA_IRQHandler+0xe1c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d040      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3c      	ldr	r2, [pc, #240]	; (80049f4 <HAL_DMA_IRQHandler+0xe20>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d03b      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3b      	ldr	r2, [pc, #236]	; (80049f8 <HAL_DMA_IRQHandler+0xe24>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d036      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a39      	ldr	r2, [pc, #228]	; (80049fc <HAL_DMA_IRQHandler+0xe28>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d031      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <HAL_DMA_IRQHandler+0xe2c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d02c      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a36      	ldr	r2, [pc, #216]	; (8004a04 <HAL_DMA_IRQHandler+0xe30>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d027      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a35      	ldr	r2, [pc, #212]	; (8004a08 <HAL_DMA_IRQHandler+0xe34>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a33      	ldr	r2, [pc, #204]	; (8004a0c <HAL_DMA_IRQHandler+0xe38>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01d      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <HAL_DMA_IRQHandler+0xe3c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a30      	ldr	r2, [pc, #192]	; (8004a14 <HAL_DMA_IRQHandler+0xe40>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2f      	ldr	r2, [pc, #188]	; (8004a18 <HAL_DMA_IRQHandler+0xe44>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_DMA_IRQHandler+0xe48>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_DMA_IRQHandler+0xe4c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_DMA_IRQHandler+0xdaa>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <HAL_DMA_IRQHandler+0xe50>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d108      	bne.n	8004990 <HAL_DMA_IRQHandler+0xdbc>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 021c 	bic.w	r2, r2, #28
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e007      	b.n	80049a0 <HAL_DMA_IRQHandler+0xdcc>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 020e 	bic.w	r2, r2, #14
 800499e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2201      	movs	r2, #1
 80049aa:	409a      	lsls	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
 80049d6:	e004      	b.n	80049e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049d8:	bf00      	nop
 80049da:	e002      	b.n	80049e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049dc:	bf00      	nop
 80049de:	e000      	b.n	80049e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8

08004a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a42      	ldr	r2, [pc, #264]	; (8004b40 <DMA_CalcBaseAndBitshift+0x118>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d04a      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a41      	ldr	r2, [pc, #260]	; (8004b44 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d045      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3f      	ldr	r2, [pc, #252]	; (8004b48 <DMA_CalcBaseAndBitshift+0x120>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d040      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3e      	ldr	r2, [pc, #248]	; (8004b4c <DMA_CalcBaseAndBitshift+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d03b      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <DMA_CalcBaseAndBitshift+0x128>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d036      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3b      	ldr	r2, [pc, #236]	; (8004b54 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d031      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <DMA_CalcBaseAndBitshift+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02c      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <DMA_CalcBaseAndBitshift+0x134>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d027      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a36      	ldr	r2, [pc, #216]	; (8004b60 <DMA_CalcBaseAndBitshift+0x138>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d01d      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a33      	ldr	r2, [pc, #204]	; (8004b68 <DMA_CalcBaseAndBitshift+0x140>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <DMA_CalcBaseAndBitshift+0x144>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <DMA_CalcBaseAndBitshift+0x148>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	; (8004b78 <DMA_CalcBaseAndBitshift+0x150>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2c      	ldr	r2, [pc, #176]	; (8004b7c <DMA_CalcBaseAndBitshift+0x154>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <DMA_CalcBaseAndBitshift+0xac>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <DMA_CalcBaseAndBitshift+0xae>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d024      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	3b10      	subs	r3, #16
 8004ae2:	4a27      	ldr	r2, [pc, #156]	; (8004b80 <DMA_CalcBaseAndBitshift+0x158>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <DMA_CalcBaseAndBitshift+0x15c>)
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d908      	bls.n	8004b14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <DMA_CalcBaseAndBitshift+0x160>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	659a      	str	r2, [r3, #88]	; 0x58
 8004b12:	e00d      	b.n	8004b30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <DMA_CalcBaseAndBitshift+0x160>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6593      	str	r3, [r2, #88]	; 0x58
 8004b22:	e005      	b.n	8004b30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40020010 	.word	0x40020010
 8004b44:	40020028 	.word	0x40020028
 8004b48:	40020040 	.word	0x40020040
 8004b4c:	40020058 	.word	0x40020058
 8004b50:	40020070 	.word	0x40020070
 8004b54:	40020088 	.word	0x40020088
 8004b58:	400200a0 	.word	0x400200a0
 8004b5c:	400200b8 	.word	0x400200b8
 8004b60:	40020410 	.word	0x40020410
 8004b64:	40020428 	.word	0x40020428
 8004b68:	40020440 	.word	0x40020440
 8004b6c:	40020458 	.word	0x40020458
 8004b70:	40020470 	.word	0x40020470
 8004b74:	40020488 	.word	0x40020488
 8004b78:	400204a0 	.word	0x400204a0
 8004b7c:	400204b8 	.word	0x400204b8
 8004b80:	aaaaaaab 	.word	0xaaaaaaab
 8004b84:	0800bd5c 	.word	0x0800bd5c
 8004b88:	fffffc00 	.word	0xfffffc00

08004b8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d120      	bne.n	8004be2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d858      	bhi.n	8004c5a <DMA_CheckFifoParam+0xce>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <DMA_CheckFifoParam+0x24>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bd3 	.word	0x08004bd3
 8004bb8:	08004bc1 	.word	0x08004bc1
 8004bbc:	08004c5b 	.word	0x08004c5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d048      	beq.n	8004c5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bd0:	e045      	b.n	8004c5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bda:	d142      	bne.n	8004c62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004be0:	e03f      	b.n	8004c62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bea:	d123      	bne.n	8004c34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d838      	bhi.n	8004c66 <DMA_CheckFifoParam+0xda>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <DMA_CheckFifoParam+0x70>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c13 	.word	0x08004c13
 8004c04:	08004c0d 	.word	0x08004c0d
 8004c08:	08004c25 	.word	0x08004c25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8004c10:	e030      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d025      	beq.n	8004c6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c22:	e022      	b.n	8004c6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c2c:	d11f      	bne.n	8004c6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c32:	e01c      	b.n	8004c6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d902      	bls.n	8004c42 <DMA_CheckFifoParam+0xb6>
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d003      	beq.n	8004c48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c40:	e018      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
        break;
 8004c46:	e015      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00e      	beq.n	8004c72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
    break;
 8004c58:	e00b      	b.n	8004c72 <DMA_CheckFifoParam+0xe6>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e00a      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e008      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        break;
 8004c62:	bf00      	nop
 8004c64:	e006      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        break;
 8004c66:	bf00      	nop
 8004c68:	e004      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        break;
 8004c6a:	bf00      	nop
 8004c6c:	e002      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
        break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
    break;
 8004c72:	bf00      	nop
    }
  }

  return status;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop

08004c84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a38      	ldr	r2, [pc, #224]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d022      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a36      	ldr	r2, [pc, #216]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01d      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d018      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a30      	ldr	r2, [pc, #192]	; (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2f      	ldr	r2, [pc, #188]	; (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01a      	beq.n	8004d22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3b08      	subs	r3, #8
 8004cf4:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d20:	e024      	b.n	8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3b10      	subs	r3, #16
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	; (8004da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a1c      	ldr	r2, [pc, #112]	; (8004da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d806      	bhi.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d902      	bls.n	8004d4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3308      	adds	r3, #8
 8004d48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a16      	ldr	r2, [pc, #88]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2201      	movs	r2, #1
 8004d66:	409a      	lsls	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	58025408 	.word	0x58025408
 8004d7c:	5802541c 	.word	0x5802541c
 8004d80:	58025430 	.word	0x58025430
 8004d84:	58025444 	.word	0x58025444
 8004d88:	58025458 	.word	0x58025458
 8004d8c:	5802546c 	.word	0x5802546c
 8004d90:	58025480 	.word	0x58025480
 8004d94:	58025494 	.word	0x58025494
 8004d98:	cccccccd 	.word	0xcccccccd
 8004d9c:	16009600 	.word	0x16009600
 8004da0:	58025880 	.word	0x58025880
 8004da4:	aaaaaaab 	.word	0xaaaaaaab
 8004da8:	400204b8 	.word	0x400204b8
 8004dac:	4002040f 	.word	0x4002040f
 8004db0:	10008200 	.word	0x10008200
 8004db4:	40020880 	.word	0x40020880

08004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d04a      	beq.n	8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d847      	bhi.n	8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d022      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01d      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d101      	bne.n	8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	461a      	mov	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e40:	671a      	str	r2, [r3, #112]	; 0x70
 8004e42:	e009      	b.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	58025408 	.word	0x58025408
 8004e74:	5802541c 	.word	0x5802541c
 8004e78:	58025430 	.word	0x58025430
 8004e7c:	58025444 	.word	0x58025444
 8004e80:	58025458 	.word	0x58025458
 8004e84:	5802546c 	.word	0x5802546c
 8004e88:	58025480 	.word	0x58025480
 8004e8c:	58025494 	.word	0x58025494
 8004e90:	1600963f 	.word	0x1600963f
 8004e94:	58025940 	.word	0x58025940
 8004e98:	1000823f 	.word	0x1000823f
 8004e9c:	40020940 	.word	0x40020940

08004ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004eae:	4b89      	ldr	r3, [pc, #548]	; (80050d4 <HAL_GPIO_Init+0x234>)
 8004eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eb2:	e194      	b.n	80051de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8186 	beq.w	80051d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d00b      	beq.n	8004eec <HAL_GPIO_Init+0x4c>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d007      	beq.n	8004eec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ee0:	2b11      	cmp	r3, #17
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b12      	cmp	r3, #18
 8004eea:	d130      	bne.n	8004f4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f22:	2201      	movs	r2, #1
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	f003 0201 	and.w	r2, r3, #1
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0xee>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b12      	cmp	r3, #18
 8004f8c:	d123      	bne.n	8004fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	08da      	lsrs	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3208      	adds	r2, #8
 8004f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	220f      	movs	r2, #15
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	08da      	lsrs	r2, r3, #3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3208      	adds	r2, #8
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 0203 	and.w	r2, r3, #3
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80e0 	beq.w	80051d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005018:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <HAL_GPIO_Init+0x238>)
 800501a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800501e:	4a2e      	ldr	r2, [pc, #184]	; (80050d8 <HAL_GPIO_Init+0x238>)
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_GPIO_Init+0x238>)
 800502a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005036:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_GPIO_Init+0x23c>)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	3302      	adds	r3, #2
 800503e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	220f      	movs	r2, #15
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <HAL_GPIO_Init+0x240>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d052      	beq.n	8005108 <HAL_GPIO_Init+0x268>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_GPIO_Init+0x244>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d031      	beq.n	80050ce <HAL_GPIO_Init+0x22e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_GPIO_Init+0x248>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02b      	beq.n	80050ca <HAL_GPIO_Init+0x22a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_GPIO_Init+0x24c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d025      	beq.n	80050c6 <HAL_GPIO_Init+0x226>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <HAL_GPIO_Init+0x250>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01f      	beq.n	80050c2 <HAL_GPIO_Init+0x222>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_GPIO_Init+0x254>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d019      	beq.n	80050be <HAL_GPIO_Init+0x21e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_GPIO_Init+0x258>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_GPIO_Init+0x21a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_GPIO_Init+0x25c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00d      	beq.n	80050b6 <HAL_GPIO_Init+0x216>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a18      	ldr	r2, [pc, #96]	; (8005100 <HAL_GPIO_Init+0x260>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <HAL_GPIO_Init+0x212>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a17      	ldr	r2, [pc, #92]	; (8005104 <HAL_GPIO_Init+0x264>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d101      	bne.n	80050ae <HAL_GPIO_Init+0x20e>
 80050aa:	2309      	movs	r3, #9
 80050ac:	e02d      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050ae:	230a      	movs	r3, #10
 80050b0:	e02b      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050b2:	2308      	movs	r3, #8
 80050b4:	e029      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050b6:	2307      	movs	r3, #7
 80050b8:	e027      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050ba:	2306      	movs	r3, #6
 80050bc:	e025      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050be:	2305      	movs	r3, #5
 80050c0:	e023      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050c2:	2304      	movs	r3, #4
 80050c4:	e021      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050c6:	2303      	movs	r3, #3
 80050c8:	e01f      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e01d      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e01b      	b.n	800510a <HAL_GPIO_Init+0x26a>
 80050d2:	bf00      	nop
 80050d4:	58000080 	.word	0x58000080
 80050d8:	58024400 	.word	0x58024400
 80050dc:	58000400 	.word	0x58000400
 80050e0:	58020000 	.word	0x58020000
 80050e4:	58020400 	.word	0x58020400
 80050e8:	58020800 	.word	0x58020800
 80050ec:	58020c00 	.word	0x58020c00
 80050f0:	58021000 	.word	0x58021000
 80050f4:	58021400 	.word	0x58021400
 80050f8:	58021800 	.word	0x58021800
 80050fc:	58021c00 	.word	0x58021c00
 8005100:	58022000 	.word	0x58022000
 8005104:	58022400 	.word	0x58022400
 8005108:	2300      	movs	r3, #0
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	f002 0203 	and.w	r2, r2, #3
 8005110:	0092      	lsls	r2, r2, #2
 8005112:	4093      	lsls	r3, r2
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800511a:	4938      	ldr	r1, [pc, #224]	; (80051fc <HAL_GPIO_Init+0x35c>)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	089b      	lsrs	r3, r3, #2
 8005120:	3302      	adds	r3, #2
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80051a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	3301      	adds	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f47f ae63 	bne.w	8004eb4 <HAL_GPIO_Init+0x14>
  }
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	3724      	adds	r7, #36	; 0x24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	58000400 	.word	0x58000400

08005200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
 800520c:	4613      	mov	r3, r2
 800520e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005210:	787b      	ldrb	r3, [r7, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800521c:	e003      	b.n	8005226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800521e:	887b      	ldrh	r3, [r7, #2]
 8005220:	041a      	lsls	r2, r3, #16
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	619a      	str	r2, [r3, #24]
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800524c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	4618      	mov	r0, r3
 800525a:	f7fc fb5d 	bl	8001918 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_PWREx_ConfigSupply+0x70>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d00a      	beq.n	8005292 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_PWREx_ConfigSupply+0x70>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d001      	beq.n	800528e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e01f      	b.n	80052ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	e01d      	b.n	80052ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_PWREx_ConfigSupply+0x70>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f023 0207 	bic.w	r2, r3, #7
 800529a:	490f      	ldr	r1, [pc, #60]	; (80052d8 <HAL_PWREx_ConfigSupply+0x70>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052a2:	f7fd f9c7 	bl	8002634 <HAL_GetTick>
 80052a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052a8:	e009      	b.n	80052be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052aa:	f7fd f9c3 	bl	8002634 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b8:	d901      	bls.n	80052be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e007      	b.n	80052ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_PWREx_ConfigSupply+0x70>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ca:	d1ee      	bne.n	80052aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	58024800 	.word	0x58024800

080052dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	; 0x30
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e3ff      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8087 	beq.w	800540a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fc:	4b99      	ldr	r3, [pc, #612]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005306:	4b97      	ldr	r3, [pc, #604]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b10      	cmp	r3, #16
 8005310:	d007      	beq.n	8005322 <HAL_RCC_OscConfig+0x46>
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	2b18      	cmp	r3, #24
 8005316:	d110      	bne.n	800533a <HAL_RCC_OscConfig+0x5e>
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d10b      	bne.n	800533a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005322:	4b90      	ldr	r3, [pc, #576]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d06c      	beq.n	8005408 <HAL_RCC_OscConfig+0x12c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d168      	bne.n	8005408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e3d9      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005342:	d106      	bne.n	8005352 <HAL_RCC_OscConfig+0x76>
 8005344:	4b87      	ldr	r3, [pc, #540]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a86      	ldr	r2, [pc, #536]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	e02e      	b.n	80053b0 <HAL_RCC_OscConfig+0xd4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0x98>
 800535a:	4b82      	ldr	r3, [pc, #520]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a81      	ldr	r2, [pc, #516]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b7f      	ldr	r3, [pc, #508]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a7e      	ldr	r2, [pc, #504]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800536c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e01d      	b.n	80053b0 <HAL_RCC_OscConfig+0xd4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0xbc>
 800537e:	4b79      	ldr	r3, [pc, #484]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a78      	ldr	r2, [pc, #480]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b76      	ldr	r3, [pc, #472]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a75      	ldr	r2, [pc, #468]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e00b      	b.n	80053b0 <HAL_RCC_OscConfig+0xd4>
 8005398:	4b72      	ldr	r3, [pc, #456]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a71      	ldr	r2, [pc, #452]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800539e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	4b6f      	ldr	r3, [pc, #444]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6e      	ldr	r2, [pc, #440]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80053aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fd f93c 	bl	8002634 <HAL_GetTick>
 80053bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c0:	f7fd f938 	bl	8002634 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b64      	cmp	r3, #100	; 0x64
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e38d      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053d2:	4b64      	ldr	r3, [pc, #400]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0xe4>
 80053de:	e014      	b.n	800540a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fd f928 	bl	8002634 <HAL_GetTick>
 80053e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e8:	f7fd f924 	bl	8002634 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b64      	cmp	r3, #100	; 0x64
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e379      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053fa:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x10c>
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80ae 	beq.w	8005574 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005418:	4b52      	ldr	r3, [pc, #328]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005420:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005422:	4b50      	ldr	r3, [pc, #320]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <HAL_RCC_OscConfig+0x162>
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	2b18      	cmp	r3, #24
 8005432:	d13a      	bne.n	80054aa <HAL_RCC_OscConfig+0x1ce>
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d135      	bne.n	80054aa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800543e:	4b49      	ldr	r3, [pc, #292]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_RCC_OscConfig+0x17a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e34b      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005456:	f7fd f8f9 	bl	800264c <HAL_GetREVID>
 800545a:	4603      	mov	r3, r0
 800545c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005460:	4293      	cmp	r3, r2
 8005462:	d817      	bhi.n	8005494 <HAL_RCC_OscConfig+0x1b8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d108      	bne.n	800547e <HAL_RCC_OscConfig+0x1a2>
 800546c:	4b3d      	ldr	r3, [pc, #244]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005474:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800547c:	e07a      	b.n	8005574 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547e:	4b39      	ldr	r3, [pc, #228]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	031b      	lsls	r3, r3, #12
 800548c:	4935      	ldr	r1, [pc, #212]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800548e:	4313      	orrs	r3, r2
 8005490:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005492:	e06f      	b.n	8005574 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005494:	4b33      	ldr	r3, [pc, #204]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	4930      	ldr	r1, [pc, #192]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a8:	e064      	b.n	8005574 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d045      	beq.n	800553e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054b2:	4b2c      	ldr	r3, [pc, #176]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 0219 	bic.w	r2, r3, #25
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4929      	ldr	r1, [pc, #164]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fd f8b6 	bl	8002634 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fd f8b2 	bl	8002634 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e307      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054de:	4b21      	ldr	r3, [pc, #132]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ea:	f7fd f8af 	bl	800264c <HAL_GetREVID>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d817      	bhi.n	8005528 <HAL_RCC_OscConfig+0x24c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d108      	bne.n	8005512 <HAL_RCC_OscConfig+0x236>
 8005500:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005508:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550e:	6053      	str	r3, [r2, #4]
 8005510:	e030      	b.n	8005574 <HAL_RCC_OscConfig+0x298>
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	031b      	lsls	r3, r3, #12
 8005520:	4910      	ldr	r1, [pc, #64]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005522:	4313      	orrs	r3, r2
 8005524:	604b      	str	r3, [r1, #4]
 8005526:	e025      	b.n	8005574 <HAL_RCC_OscConfig+0x298>
 8005528:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	490b      	ldr	r1, [pc, #44]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
 800553c:	e01a      	b.n	8005574 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a08      	ldr	r2, [pc, #32]	; (8005564 <HAL_RCC_OscConfig+0x288>)
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554a:	f7fd f873 	bl	8002634 <HAL_GetTick>
 800554e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005550:	e00a      	b.n	8005568 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005552:	f7fd f86f 	bl	8002634 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d903      	bls.n	8005568 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e2c4      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
 8005564:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005568:	4ba4      	ldr	r3, [pc, #656]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ee      	bne.n	8005552 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80a9 	beq.w	80056d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005582:	4b9e      	ldr	r3, [pc, #632]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800558a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800558c:	4b9b      	ldr	r3, [pc, #620]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d007      	beq.n	80055a8 <HAL_RCC_OscConfig+0x2cc>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b18      	cmp	r3, #24
 800559c:	d13a      	bne.n	8005614 <HAL_RCC_OscConfig+0x338>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d135      	bne.n	8005614 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055a8:	4b94      	ldr	r3, [pc, #592]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_OscConfig+0x2e4>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b80      	cmp	r3, #128	; 0x80
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e296      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c0:	f7fd f844 	bl	800264c <HAL_GetREVID>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d817      	bhi.n	80055fe <HAL_RCC_OscConfig+0x322>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d108      	bne.n	80055e8 <HAL_RCC_OscConfig+0x30c>
 80055d6:	4b89      	ldr	r3, [pc, #548]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055de:	4a87      	ldr	r2, [pc, #540]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80055e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055e6:	e075      	b.n	80056d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055e8:	4b84      	ldr	r3, [pc, #528]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	069b      	lsls	r3, r3, #26
 80055f6:	4981      	ldr	r1, [pc, #516]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055fc:	e06a      	b.n	80056d4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055fe:	4b7f      	ldr	r3, [pc, #508]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	061b      	lsls	r3, r3, #24
 800560c:	497b      	ldr	r1, [pc, #492]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800560e:	4313      	orrs	r3, r2
 8005610:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005612:	e05f      	b.n	80056d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d042      	beq.n	80056a2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800561c:	4b77      	ldr	r3, [pc, #476]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a76      	ldr	r2, [pc, #472]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fd f804 	bl	8002634 <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005630:	f7fd f800 	bl	8002634 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e255      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005642:	4b6e      	ldr	r3, [pc, #440]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800564e:	f7fc fffd 	bl	800264c <HAL_GetREVID>
 8005652:	4603      	mov	r3, r0
 8005654:	f241 0203 	movw	r2, #4099	; 0x1003
 8005658:	4293      	cmp	r3, r2
 800565a:	d817      	bhi.n	800568c <HAL_RCC_OscConfig+0x3b0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2b20      	cmp	r3, #32
 8005662:	d108      	bne.n	8005676 <HAL_RCC_OscConfig+0x39a>
 8005664:	4b65      	ldr	r3, [pc, #404]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800566c:	4a63      	ldr	r2, [pc, #396]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800566e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005672:	6053      	str	r3, [r2, #4]
 8005674:	e02e      	b.n	80056d4 <HAL_RCC_OscConfig+0x3f8>
 8005676:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	069b      	lsls	r3, r3, #26
 8005684:	495d      	ldr	r1, [pc, #372]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
 800568a:	e023      	b.n	80056d4 <HAL_RCC_OscConfig+0x3f8>
 800568c:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	4958      	ldr	r1, [pc, #352]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800569c:	4313      	orrs	r3, r2
 800569e:	60cb      	str	r3, [r1, #12]
 80056a0:	e018      	b.n	80056d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056a2:	4b56      	ldr	r3, [pc, #344]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a55      	ldr	r2, [pc, #340]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80056a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ae:	f7fc ffc1 	bl	8002634 <HAL_GetTick>
 80056b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056b6:	f7fc ffbd 	bl	8002634 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e212      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80056c8:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d036      	beq.n	800574e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d019      	beq.n	800571c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056e8:	4b44      	ldr	r3, [pc, #272]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	4a43      	ldr	r2, [pc, #268]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fc ff9e 	bl	8002634 <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fc:	f7fc ff9a 	bl	8002634 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1ef      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800570e:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x420>
 800571a:	e018      	b.n	800574e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800571c:	4b37      	ldr	r3, [pc, #220]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	4a36      	ldr	r2, [pc, #216]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7fc ff84 	bl	8002634 <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005730:	f7fc ff80 	bl	8002634 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e1d5      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d036      	beq.n	80057c8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d019      	beq.n	8005796 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a25      	ldr	r2, [pc, #148]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800576c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800576e:	f7fc ff61 	bl	8002634 <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005776:	f7fc ff5d 	bl	8002634 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e1b2      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005788:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f0      	beq.n	8005776 <HAL_RCC_OscConfig+0x49a>
 8005794:	e018      	b.n	80057c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 800579c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057a2:	f7fc ff47 	bl	8002634 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057aa:	f7fc ff43 	bl	8002634 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e198      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <HAL_RCC_OscConfig+0x520>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8085 	beq.w	80058e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <HAL_RCC_OscConfig+0x524>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <HAL_RCC_OscConfig+0x524>)
 80057dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e2:	f7fc ff27 	bl	8002634 <HAL_GetTick>
 80057e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057e8:	e00c      	b.n	8005804 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ea:	f7fc ff23 	bl	8002634 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b64      	cmp	r3, #100	; 0x64
 80057f6:	d905      	bls.n	8005804 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e178      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
 80057fc:	58024400 	.word	0x58024400
 8005800:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005804:	4b96      	ldr	r3, [pc, #600]	; (8005a60 <HAL_RCC_OscConfig+0x784>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ec      	beq.n	80057ea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d106      	bne.n	8005826 <HAL_RCC_OscConfig+0x54a>
 8005818:	4b92      	ldr	r3, [pc, #584]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a91      	ldr	r2, [pc, #580]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	e02d      	b.n	8005882 <HAL_RCC_OscConfig+0x5a6>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0x56c>
 800582e:	4b8d      	ldr	r3, [pc, #564]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a8c      	ldr	r2, [pc, #560]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
 800583a:	4b8a      	ldr	r3, [pc, #552]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a89      	ldr	r2, [pc, #548]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005840:	f023 0304 	bic.w	r3, r3, #4
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	e01c      	b.n	8005882 <HAL_RCC_OscConfig+0x5a6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b05      	cmp	r3, #5
 800584e:	d10c      	bne.n	800586a <HAL_RCC_OscConfig+0x58e>
 8005850:	4b84      	ldr	r3, [pc, #528]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a83      	ldr	r2, [pc, #524]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6713      	str	r3, [r2, #112]	; 0x70
 800585c:	4b81      	ldr	r3, [pc, #516]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	4a80      	ldr	r2, [pc, #512]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	6713      	str	r3, [r2, #112]	; 0x70
 8005868:	e00b      	b.n	8005882 <HAL_RCC_OscConfig+0x5a6>
 800586a:	4b7e      	ldr	r3, [pc, #504]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a7d      	ldr	r2, [pc, #500]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6713      	str	r3, [r2, #112]	; 0x70
 8005876:	4b7b      	ldr	r3, [pc, #492]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a7a      	ldr	r2, [pc, #488]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fc fed3 	bl	8002634 <HAL_GetTick>
 800588e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fc fecf 	bl	8002634 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e122      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a8:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ee      	beq.n	8005892 <HAL_RCC_OscConfig+0x5b6>
 80058b4:	e014      	b.n	80058e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fc febd 	bl	8002634 <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fc feb9 	bl	8002634 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e10c      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058d4:	4b63      	ldr	r3, [pc, #396]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ee      	bne.n	80058be <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8101 	beq.w	8005aec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058ea:	4b5e      	ldr	r3, [pc, #376]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f2:	2b18      	cmp	r3, #24
 80058f4:	f000 80bc 	beq.w	8005a70 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	f040 8095 	bne.w	8005a2c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a57      	ldr	r2, [pc, #348]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fc fe91 	bl	8002634 <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005916:	f7fc fe8d 	bl	8002634 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0e2      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005928:	4b4e      	ldr	r3, [pc, #312]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005934:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005938:	4b4b      	ldr	r3, [pc, #300]	; (8005a68 <HAL_RCC_OscConfig+0x78c>)
 800593a:	4013      	ands	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005944:	0112      	lsls	r2, r2, #4
 8005946:	430a      	orrs	r2, r1
 8005948:	4946      	ldr	r1, [pc, #280]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800594a:	4313      	orrs	r3, r2
 800594c:	628b      	str	r3, [r1, #40]	; 0x28
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	3b01      	subs	r3, #1
 8005954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	3b01      	subs	r3, #1
 800595e:	025b      	lsls	r3, r3, #9
 8005960:	b29b      	uxth	r3, r3
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	3b01      	subs	r3, #1
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	3b01      	subs	r3, #1
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800597e:	4939      	ldr	r1, [pc, #228]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005980:	4313      	orrs	r3, r2
 8005982:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005984:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a36      	ldr	r2, [pc, #216]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005990:	4b34      	ldr	r3, [pc, #208]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <HAL_RCC_OscConfig+0x790>)
 8005996:	4013      	ands	r3, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800599c:	00d2      	lsls	r2, r2, #3
 800599e:	4931      	ldr	r1, [pc, #196]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80059a4:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	f023 020c 	bic.w	r2, r3, #12
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	492c      	ldr	r1, [pc, #176]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80059b6:	4b2b      	ldr	r3, [pc, #172]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	f023 0202 	bic.w	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c2:	4928      	ldr	r1, [pc, #160]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059c8:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a25      	ldr	r2, [pc, #148]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d4:	4b23      	ldr	r3, [pc, #140]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a22      	ldr	r2, [pc, #136]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059ec:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 80059fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fc fe16 	bl	8002634 <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fc fe12 	bl	8002634 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e067      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x730>
 8005a2a:	e05f      	b.n	8005aec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a38:	f7fc fdfc 	bl	8002634 <HAL_GetTick>
 8005a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a40:	f7fc fdf8 	bl	8002634 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e04d      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a52:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <HAL_RCC_OscConfig+0x788>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1f0      	bne.n	8005a40 <HAL_RCC_OscConfig+0x764>
 8005a5e:	e045      	b.n	8005aec <HAL_RCC_OscConfig+0x810>
 8005a60:	58024800 	.word	0x58024800
 8005a64:	58024400 	.word	0x58024400
 8005a68:	fffffc0c 	.word	0xfffffc0c
 8005a6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCC_OscConfig+0x81c>)
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_RCC_OscConfig+0x81c>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d031      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f003 0203 	and.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d12a      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d122      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d11a      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	0a5b      	lsrs	r3, r3, #9
 8005ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d111      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d108      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3730      	adds	r7, #48	; 0x30
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400

08005afc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e19c      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d910      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	4b87      	ldr	r3, [pc, #540]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 020f 	bic.w	r2, r3, #15
 8005b26:	4985      	ldr	r1, [pc, #532]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b83      	ldr	r3, [pc, #524]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e184      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	4b7b      	ldr	r3, [pc, #492]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d908      	bls.n	8005b6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b5c:	4b78      	ldr	r3, [pc, #480]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	4975      	ldr	r1, [pc, #468]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d010      	beq.n	8005b9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695a      	ldr	r2, [r3, #20]
 8005b7e:	4b70      	ldr	r3, [pc, #448]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d908      	bls.n	8005b9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b8a:	4b6d      	ldr	r3, [pc, #436]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	496a      	ldr	r1, [pc, #424]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d010      	beq.n	8005bca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	4b64      	ldr	r3, [pc, #400]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d908      	bls.n	8005bca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	495e      	ldr	r1, [pc, #376]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	4b59      	ldr	r3, [pc, #356]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d908      	bls.n	8005bf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005be6:	4b56      	ldr	r3, [pc, #344]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4953      	ldr	r1, [pc, #332]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d010      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	4b4d      	ldr	r3, [pc, #308]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d908      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c14:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f023 020f 	bic.w	r2, r3, #15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4947      	ldr	r1, [pc, #284]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d055      	beq.n	8005cde <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c32:	4b43      	ldr	r3, [pc, #268]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4940      	ldr	r1, [pc, #256]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c4c:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d121      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0f6      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d107      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d115      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0ea      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c7c:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0de      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0d6      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c9c:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f023 0207 	bic.w	r2, r3, #7
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4925      	ldr	r1, [pc, #148]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cae:	f7fc fcc1 	bl	8002634 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb6:	f7fc fcbd 	bl	8002634 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0be      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d1eb      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d010      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	4b14      	ldr	r3, [pc, #80]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d208      	bcs.n	8005d0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f023 020f 	bic.w	r2, r3, #15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	490e      	ldr	r1, [pc, #56]	; (8005d40 <HAL_RCC_ClockConfig+0x244>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d214      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 020f 	bic.w	r2, r3, #15
 8005d22:	4906      	ldr	r1, [pc, #24]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_RCC_ClockConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d005      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e086      	b.n	8005e4a <HAL_RCC_ClockConfig+0x34e>
 8005d3c:	52002000 	.word	0x52002000
 8005d40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	4b3f      	ldr	r3, [pc, #252]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d208      	bcs.n	8005d72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d60:	4b3c      	ldr	r3, [pc, #240]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	4939      	ldr	r1, [pc, #228]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d010      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d208      	bcs.n	8005da0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d8e:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	492e      	ldr	r1, [pc, #184]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d010      	beq.n	8005dce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	4b28      	ldr	r3, [pc, #160]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d208      	bcs.n	8005dce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005dbc:	4b25      	ldr	r3, [pc, #148]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	4922      	ldr	r1, [pc, #136]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d208      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dea:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4917      	ldr	r1, [pc, #92]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dfc:	f000 f834 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	4912      	ldr	r1, [pc, #72]	; (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <HAL_RCC_ClockConfig+0x358>)
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <HAL_RCC_ClockConfig+0x35c>)
 8005e24:	5cd3      	ldrb	r3, [r2, r3]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <HAL_RCC_ClockConfig+0x360>)
 8005e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e34:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <HAL_RCC_ClockConfig+0x364>)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_RCC_ClockConfig+0x368>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fc fbae 	bl	80025a0 <HAL_InitTick>
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	58024400 	.word	0x58024400
 8005e58:	0800bd4c 	.word	0x0800bd4c
 8005e5c:	20000004 	.word	0x20000004
 8005e60:	20000000 	.word	0x20000000
 8005e64:	20000008 	.word	0x20000008

08005e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e6e:	4bb3      	ldr	r3, [pc, #716]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e76:	2b18      	cmp	r3, #24
 8005e78:	f200 8155 	bhi.w	8006126 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005ee9 	.word	0x08005ee9
 8005e88:	08006127 	.word	0x08006127
 8005e8c:	08006127 	.word	0x08006127
 8005e90:	08006127 	.word	0x08006127
 8005e94:	08006127 	.word	0x08006127
 8005e98:	08006127 	.word	0x08006127
 8005e9c:	08006127 	.word	0x08006127
 8005ea0:	08006127 	.word	0x08006127
 8005ea4:	08005f0f 	.word	0x08005f0f
 8005ea8:	08006127 	.word	0x08006127
 8005eac:	08006127 	.word	0x08006127
 8005eb0:	08006127 	.word	0x08006127
 8005eb4:	08006127 	.word	0x08006127
 8005eb8:	08006127 	.word	0x08006127
 8005ebc:	08006127 	.word	0x08006127
 8005ec0:	08006127 	.word	0x08006127
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08006127 	.word	0x08006127
 8005ecc:	08006127 	.word	0x08006127
 8005ed0:	08006127 	.word	0x08006127
 8005ed4:	08006127 	.word	0x08006127
 8005ed8:	08006127 	.word	0x08006127
 8005edc:	08006127 	.word	0x08006127
 8005ee0:	08006127 	.word	0x08006127
 8005ee4:	08005f1b 	.word	0x08005f1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee8:	4b94      	ldr	r3, [pc, #592]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d009      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ef4:	4b91      	ldr	r3, [pc, #580]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	4a90      	ldr	r2, [pc, #576]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f06:	e111      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f08:	4b8d      	ldr	r3, [pc, #564]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f0a:	61bb      	str	r3, [r7, #24]
    break;
 8005f0c:	e10e      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f0e:	4b8d      	ldr	r3, [pc, #564]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f10:	61bb      	str	r3, [r7, #24]
    break;
 8005f12:	e10b      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f14:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f16:	61bb      	str	r3, [r7, #24]
    break;
 8005f18:	e108      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f1a:	4b88      	ldr	r3, [pc, #544]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f24:	4b85      	ldr	r3, [pc, #532]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f30:	4b82      	ldr	r3, [pc, #520]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f3a:	4b80      	ldr	r3, [pc, #512]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	08db      	lsrs	r3, r3, #3
 8005f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80e1 	beq.w	8006120 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	f000 8083 	beq.w	800606c <HAL_RCC_GetSysClockFreq+0x204>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	f200 80a1 	bhi.w	80060b0 <HAL_RCC_GetSysClockFreq+0x248>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x114>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d056      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f7a:	e099      	b.n	80060b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f7c:	4b6f      	ldr	r3, [pc, #444]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02d      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f88:	4b6c      	ldr	r3, [pc, #432]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	4a6b      	ldr	r2, [pc, #428]	; (8006140 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b62      	ldr	r3, [pc, #392]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fe2:	e087      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006150 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b51      	ldr	r3, [pc, #324]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a02 	vldr	s12, [r7, #8]
 800600a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006026:	e065      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006154 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b40      	ldr	r3, [pc, #256]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a02 	vldr	s12, [r7, #8]
 800604e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	e043      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006158 <HAL_RCC_GetSysClockFreq+0x2f0>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b2f      	ldr	r3, [pc, #188]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006092:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	e021      	b.n	80060f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006154 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b1e      	ldr	r3, [pc, #120]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800614c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	0a5b      	lsrs	r3, r3, #9
 80060fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fe:	3301      	adds	r3, #1
 8006100:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800610c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006118:	ee17 3a90 	vmov	r3, s15
 800611c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800611e:	e005      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	61bb      	str	r3, [r7, #24]
    break;
 8006124:	e002      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006128:	61bb      	str	r3, [r7, #24]
    break;
 800612a:	bf00      	nop
  }

  return sysclockfreq;
 800612c:	69bb      	ldr	r3, [r7, #24]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3724      	adds	r7, #36	; 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	58024400 	.word	0x58024400
 8006140:	03d09000 	.word	0x03d09000
 8006144:	003d0900 	.word	0x003d0900
 8006148:	02dc6c00 	.word	0x02dc6c00
 800614c:	46000000 	.word	0x46000000
 8006150:	4c742400 	.word	0x4c742400
 8006154:	4a742400 	.word	0x4a742400
 8006158:	4c371b00 	.word	0x4c371b00

0800615c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006162:	f7ff fe81 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8006166:	4602      	mov	r2, r0
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <HAL_RCC_GetHCLKFreq+0x50>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	0a1b      	lsrs	r3, r3, #8
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	490f      	ldr	r1, [pc, #60]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006174:	5ccb      	ldrb	r3, [r1, r3]
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	fa22 f303 	lsr.w	r3, r2, r3
 800617e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <HAL_RCC_GetHCLKFreq+0x50>)
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	fa22 f303 	lsr.w	r3, r2, r3
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006198:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800619a:	4a07      	ldr	r2, [pc, #28]	; (80061b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	58024400 	.word	0x58024400
 80061b0:	0800bd4c 	.word	0x0800bd4c
 80061b4:	20000004 	.word	0x20000004
 80061b8:	20000000 	.word	0x20000000

080061bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061c0:	f7ff ffcc 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4904      	ldr	r1, [pc, #16]	; (80061e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	58024400 	.word	0x58024400
 80061e4:	0800bd4c 	.word	0x0800bd4c

080061e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061ec:	f7ff ffb6 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4904      	ldr	r1, [pc, #16]	; (8006210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006208:	4618      	mov	r0, r3
 800620a:	bd80      	pop	{r7, pc}
 800620c:	58024400 	.word	0x58024400
 8006210:	0800bd4c 	.word	0x0800bd4c

08006214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800621c:	2300      	movs	r3, #0
 800621e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006220:	2300      	movs	r3, #0
 8006222:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d03f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006238:	d02a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800623a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800623e:	d824      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006244:	d018      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800624a:	d81e      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006254:	d007      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006256:	e018      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006258:	4bab      	ldr	r3, [pc, #684]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	4aaa      	ldr	r2, [pc, #680]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800625e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006264:	e015      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f001 f9cf 	bl	8007610 <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006276:	e00c      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	2102      	movs	r1, #2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fa78 	bl	8007774 <RCCEx_PLL3_Config>
 8006284:	4603      	mov	r3, r0
 8006286:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006288:	e003      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
      break;
 800628e:	e000      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d109      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006298:	4b9b      	ldr	r3, [pc, #620]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a4:	4998      	ldr	r1, [pc, #608]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	650b      	str	r3, [r1, #80]	; 0x50
 80062aa:	e001      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03d      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d826      	bhi.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062e1 	.word	0x080062e1
 80062d0:	080062ef 	.word	0x080062ef
 80062d4:	08006301 	.word	0x08006301
 80062d8:	08006319 	.word	0x08006319
 80062dc:	08006319 	.word	0x08006319
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e0:	4b89      	ldr	r3, [pc, #548]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a88      	ldr	r2, [pc, #544]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ec:	e015      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f98b 	bl	8007610 <RCCEx_PLL2_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062fe:	e00c      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3324      	adds	r3, #36	; 0x24
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fa34 	bl	8007774 <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	e000      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006320:	4b79      	ldr	r3, [pc, #484]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	f023 0207 	bic.w	r2, r3, #7
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632c:	4976      	ldr	r1, [pc, #472]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	650b      	str	r3, [r1, #80]	; 0x50
 8006332:	e001      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006340:	2b00      	cmp	r3, #0
 8006342:	d042      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634c:	d02b      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800634e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006352:	d825      	bhi.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006354:	2bc0      	cmp	r3, #192	; 0xc0
 8006356:	d028      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006358:	2bc0      	cmp	r3, #192	; 0xc0
 800635a:	d821      	bhi.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800635c:	2b80      	cmp	r3, #128	; 0x80
 800635e:	d016      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006360:	2b80      	cmp	r3, #128	; 0x80
 8006362:	d81d      	bhi.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d007      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800636c:	e018      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636e:	4b66      	ldr	r3, [pc, #408]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	4a65      	ldr	r2, [pc, #404]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800637a:	e017      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 f944 	bl	8007610 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800638c:	e00e      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3324      	adds	r3, #36	; 0x24
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f001 f9ed 	bl	8007774 <RCCEx_PLL3_Config>
 800639a:	4603      	mov	r3, r0
 800639c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800639e:	e005      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	75fb      	strb	r3, [r7, #23]
      break;
 80063a4:	e002      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80063aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063b2:	4b55      	ldr	r3, [pc, #340]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	4952      	ldr	r1, [pc, #328]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	650b      	str	r3, [r1, #80]	; 0x50
 80063c4:	e001      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d049      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063e0:	d030      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80063e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063e6:	d82a      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063ec:	d02c      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80063ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063f2:	d824      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f8:	d018      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80063fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063fe:	d81e      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006408:	d007      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800640a:	e018      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4b3e      	ldr	r3, [pc, #248]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	4a3d      	ldr	r2, [pc, #244]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006418:	e017      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3304      	adds	r3, #4
 800641e:	2100      	movs	r1, #0
 8006420:	4618      	mov	r0, r3
 8006422:	f001 f8f5 	bl	8007610 <RCCEx_PLL2_Config>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800642a:	e00e      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3324      	adds	r3, #36	; 0x24
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f99e 	bl	8007774 <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800643c:	e005      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
      break;
 8006442:	e002      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006450:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800645e:	492a      	ldr	r1, [pc, #168]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006460:	4313      	orrs	r3, r2
 8006462:	658b      	str	r3, [r1, #88]	; 0x58
 8006464:	e001      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006472:	2b00      	cmp	r3, #0
 8006474:	d04c      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800647c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006480:	d030      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006486:	d82a      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006488:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800648c:	d02c      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800648e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006492:	d824      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006498:	d018      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800649a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800649e:	d81e      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064a8:	d007      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80064aa:	e018      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ac:	4b16      	ldr	r3, [pc, #88]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064b8:	e017      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3304      	adds	r3, #4
 80064be:	2100      	movs	r1, #0
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 f8a5 	bl	8007610 <RCCEx_PLL2_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064ca:	e00e      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3324      	adds	r3, #36	; 0x24
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 f94e 	bl	8007774 <RCCEx_PLL3_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064dc:	e005      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
      break;
 80064e2:	e002      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10d      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064fe:	4902      	ldr	r1, [pc, #8]	; (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006500:	4313      	orrs	r3, r2
 8006502:	658b      	str	r3, [r1, #88]	; 0x58
 8006504:	e004      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d032      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006520:	2b30      	cmp	r3, #48	; 0x30
 8006522:	d01c      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006524:	2b30      	cmp	r3, #48	; 0x30
 8006526:	d817      	bhi.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d00c      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d813      	bhi.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d016      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d10f      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006538:	4baf      	ldr	r3, [pc, #700]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4aae      	ldr	r2, [pc, #696]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800653e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006544:	e00e      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	2102      	movs	r1, #2
 800654c:	4618      	mov	r0, r3
 800654e:	f001 f85f 	bl	8007610 <RCCEx_PLL2_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006556:	e005      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
      break;
 800655c:	e002      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800656a:	4ba3      	ldr	r3, [pc, #652]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006576:	49a0      	ldr	r1, [pc, #640]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006578:	4313      	orrs	r3, r2
 800657a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800657c:	e001      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d047      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006596:	d030      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800659c:	d82a      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800659e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a2:	d02c      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80065a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065a8:	d824      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ae:	d018      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b4:	d81e      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	d007      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065c0:	e018      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c2:	4b8d      	ldr	r3, [pc, #564]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	4a8c      	ldr	r2, [pc, #560]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065ce:	e017      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	2100      	movs	r1, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 f81a 	bl	8007610 <RCCEx_PLL2_Config>
 80065dc:	4603      	mov	r3, r0
 80065de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065e0:	e00e      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3324      	adds	r3, #36	; 0x24
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 f8c3 	bl	8007774 <RCCEx_PLL3_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065f2:	e005      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
      break;
 80065f8:	e002      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065fa:	bf00      	nop
 80065fc:	e000      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006606:	4b7c      	ldr	r3, [pc, #496]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006612:	4979      	ldr	r1, [pc, #484]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006614:	4313      	orrs	r3, r2
 8006616:	650b      	str	r3, [r1, #80]	; 0x50
 8006618:	e001      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d049      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006632:	d02e      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006638:	d828      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800663a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800663e:	d02a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006640:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006644:	d822      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006646:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800664a:	d026      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800664c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006650:	d81c      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006656:	d010      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665c:	d816      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01d      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006666:	d111      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	2101      	movs	r1, #1
 800666e:	4618      	mov	r0, r3
 8006670:	f000 ffce 	bl	8007610 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006678:	e012      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3324      	adds	r3, #36	; 0x24
 800667e:	2101      	movs	r1, #1
 8006680:	4618      	mov	r0, r3
 8006682:	f001 f877 	bl	8007774 <RCCEx_PLL3_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800668a:	e009      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
      break;
 8006690:	e006      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006692:	bf00      	nop
 8006694:	e004      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800669e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066a6:	4b54      	ldr	r3, [pc, #336]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b2:	4951      	ldr	r1, [pc, #324]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	650b      	str	r3, [r1, #80]	; 0x50
 80066b8:	e001      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d04b      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066d4:	d02e      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80066d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066da:	d828      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e0:	d02a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e6:	d822      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066ec:	d026      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066f2:	d81c      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f8:	d010      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80066fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fe:	d816      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01d      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006708:	d111      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3304      	adds	r3, #4
 800670e:	2101      	movs	r1, #1
 8006710:	4618      	mov	r0, r3
 8006712:	f000 ff7d 	bl	8007610 <RCCEx_PLL2_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800671a:	e012      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f826 	bl	8007774 <RCCEx_PLL3_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800672c:	e009      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
      break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006734:	bf00      	nop
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006738:	bf00      	nop
 800673a:	e002      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006748:	4b2b      	ldr	r3, [pc, #172]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800674a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006756:	4928      	ldr	r1, [pc, #160]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006758:	4313      	orrs	r3, r2
 800675a:	658b      	str	r3, [r1, #88]	; 0x58
 800675c:	e001      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02f      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006776:	d00e      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677c:	d814      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d015      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006786:	d10f      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006794:	e00c      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f000 ff37 	bl	8007610 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80067ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c2:	490d      	ldr	r1, [pc, #52]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	650b      	str	r3, [r1, #80]	; 0x50
 80067c8:	e001      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d033      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d81c      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	08006823 	.word	0x08006823
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	0800680b 	.word	0x0800680b
 80067f4:	08006823 	.word	0x08006823
 80067f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fc:	4bb8      	ldr	r3, [pc, #736]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	4ab7      	ldr	r2, [pc, #732]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006808:	e00c      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3304      	adds	r3, #4
 800680e:	2102      	movs	r1, #2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fefd 	bl	8007610 <RCCEx_PLL2_Config>
 8006816:	4603      	mov	r3, r0
 8006818:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800681a:	e003      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
      break;
 8006820:	e000      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800682a:	4bad      	ldr	r3, [pc, #692]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800682c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682e:	f023 0203 	bic.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	49aa      	ldr	r1, [pc, #680]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006838:	4313      	orrs	r3, r2
 800683a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800683c:	e001      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8086 	beq.w	800695c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006850:	4ba4      	ldr	r3, [pc, #656]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4aa3      	ldr	r2, [pc, #652]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800685c:	f7fb feea 	bl	8002634 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006862:	e009      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006864:	f7fb fee6 	bl	8002634 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	; 0x64
 8006870:	d902      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	75fb      	strb	r3, [r7, #23]
        break;
 8006876:	e005      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006878:	4b9a      	ldr	r3, [pc, #616]	; (8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ef      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d166      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800688a:	4b95      	ldr	r3, [pc, #596]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006894:	4053      	eors	r3, r2
 8006896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689a:	2b00      	cmp	r3, #0
 800689c:	d013      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800689e:	4b90      	ldr	r3, [pc, #576]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a8:	4b8d      	ldr	r3, [pc, #564]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	4a8c      	ldr	r2, [pc, #560]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068b4:	4b8a      	ldr	r3, [pc, #552]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	4a89      	ldr	r2, [pc, #548]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068c0:	4a87      	ldr	r2, [pc, #540]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d0:	d115      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d2:	f7fb feaf 	bl	8002634 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068d8:	e00b      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068da:	f7fb feab 	bl	8002634 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d902      	bls.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	75fb      	strb	r3, [r7, #23]
            break;
 80068f0:	e005      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068f2:	4b7b      	ldr	r3, [pc, #492]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0ed      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d126      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800690a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006912:	d10d      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006914:	4b72      	ldr	r3, [pc, #456]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006922:	0919      	lsrs	r1, r3, #4
 8006924:	4b70      	ldr	r3, [pc, #448]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006926:	400b      	ands	r3, r1
 8006928:	496d      	ldr	r1, [pc, #436]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	610b      	str	r3, [r1, #16]
 800692e:	e005      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006930:	4b6b      	ldr	r3, [pc, #428]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	4a6a      	ldr	r2, [pc, #424]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006936:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800693a:	6113      	str	r3, [r2, #16]
 800693c:	4b68      	ldr	r3, [pc, #416]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800693e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800694a:	4965      	ldr	r1, [pc, #404]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	670b      	str	r3, [r1, #112]	; 0x70
 8006950:	e004      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	75bb      	strb	r3, [r7, #22]
 8006956:	e001      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d07e      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696c:	2b28      	cmp	r3, #40	; 0x28
 800696e:	d867      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	08006a47 	.word	0x08006a47
 800697c:	08006a41 	.word	0x08006a41
 8006980:	08006a41 	.word	0x08006a41
 8006984:	08006a41 	.word	0x08006a41
 8006988:	08006a41 	.word	0x08006a41
 800698c:	08006a41 	.word	0x08006a41
 8006990:	08006a41 	.word	0x08006a41
 8006994:	08006a41 	.word	0x08006a41
 8006998:	08006a1d 	.word	0x08006a1d
 800699c:	08006a41 	.word	0x08006a41
 80069a0:	08006a41 	.word	0x08006a41
 80069a4:	08006a41 	.word	0x08006a41
 80069a8:	08006a41 	.word	0x08006a41
 80069ac:	08006a41 	.word	0x08006a41
 80069b0:	08006a41 	.word	0x08006a41
 80069b4:	08006a41 	.word	0x08006a41
 80069b8:	08006a2f 	.word	0x08006a2f
 80069bc:	08006a41 	.word	0x08006a41
 80069c0:	08006a41 	.word	0x08006a41
 80069c4:	08006a41 	.word	0x08006a41
 80069c8:	08006a41 	.word	0x08006a41
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a41 	.word	0x08006a41
 80069d4:	08006a41 	.word	0x08006a41
 80069d8:	08006a47 	.word	0x08006a47
 80069dc:	08006a41 	.word	0x08006a41
 80069e0:	08006a41 	.word	0x08006a41
 80069e4:	08006a41 	.word	0x08006a41
 80069e8:	08006a41 	.word	0x08006a41
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	08006a41 	.word	0x08006a41
 80069f4:	08006a41 	.word	0x08006a41
 80069f8:	08006a47 	.word	0x08006a47
 80069fc:	08006a41 	.word	0x08006a41
 8006a00:	08006a41 	.word	0x08006a41
 8006a04:	08006a41 	.word	0x08006a41
 8006a08:	08006a41 	.word	0x08006a41
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a41 	.word	0x08006a41
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	08006a47 	.word	0x08006a47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	2101      	movs	r1, #1
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fdf4 	bl	8007610 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a2c:	e00c      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fe9d 	bl	8007774 <RCCEx_PLL3_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a3e:	e003      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	75fb      	strb	r3, [r7, #23]
      break;
 8006a44:	e000      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a4e:	4b24      	ldr	r3, [pc, #144]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a5a:	4921      	ldr	r1, [pc, #132]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a60:	e001      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03e      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a76:	2b05      	cmp	r3, #5
 8006a78:	d820      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006ac3 	.word	0x08006ac3
 8006a84:	08006a99 	.word	0x08006a99
 8006a88:	08006aab 	.word	0x08006aab
 8006a8c:	08006ac3 	.word	0x08006ac3
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006ac3 	.word	0x08006ac3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fdb6 	bl	8007610 <RCCEx_PLL2_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006aa8:	e00c      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3324      	adds	r3, #36	; 0x24
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fe5f 	bl	8007774 <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006aba:	e003      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac0:	e000      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006ac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d110      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f023 0207 	bic.w	r2, r3, #7
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad6:	4902      	ldr	r1, [pc, #8]	; (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	654b      	str	r3, [r1, #84]	; 0x54
 8006adc:	e008      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006ade:	bf00      	nop
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	58024800 	.word	0x58024800
 8006ae8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d039      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d820      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b4f 	.word	0x08006b4f
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b37 	.word	0x08006b37
 8006b18:	08006b4f 	.word	0x08006b4f
 8006b1c:	08006b4f 	.word	0x08006b4f
 8006b20:	08006b4f 	.word	0x08006b4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fd70 	bl	8007610 <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b34:	e00c      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3324      	adds	r3, #36	; 0x24
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fe19 	bl	8007774 <RCCEx_PLL3_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b46:	e003      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4c:	e000      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10a      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b56:	4bb7      	ldr	r3, [pc, #732]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5a:	f023 0207 	bic.w	r2, r3, #7
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b64:	49b3      	ldr	r1, [pc, #716]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	658b      	str	r3, [r1, #88]	; 0x58
 8006b6a:	e001      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d04b      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b86:	d02e      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b8c:	d828      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b92:	d02a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b98:	d822      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b9e:	d026      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ba4:	d81c      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006baa:	d010      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb0:	d816      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bba:	d111      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fd24 	bl	8007610 <RCCEx_PLL2_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bcc:	e012      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fdcd 	bl	8007774 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bde:	e009      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006be6:	bf00      	nop
 8006be8:	e004      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bea:	bf00      	nop
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bfa:	4b8e      	ldr	r3, [pc, #568]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c08:	498a      	ldr	r1, [pc, #552]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	654b      	str	r3, [r1, #84]	; 0x54
 8006c0e:	e001      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d04b      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c2a:	d02e      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006c2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c30:	d828      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c36:	d02a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d822      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c42:	d026      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c48:	d81c      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d816      	bhi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01d      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5e:	d111      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fcd2 	bl	8007610 <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c70:	e012      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3324      	adds	r3, #36	; 0x24
 8006c76:	2102      	movs	r1, #2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fd7b 	bl	8007774 <RCCEx_PLL3_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c82:	e009      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
      break;
 8006c88:	e006      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c9e:	4b65      	ldr	r3, [pc, #404]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cac:	4961      	ldr	r1, [pc, #388]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cb2:	e001      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d04b      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cce:	d02e      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006cd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cd4:	d828      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cda:	d02a      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	d822      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006ce2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ce6:	d026      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006ce8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cec:	d81c      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf2:	d010      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf8:	d816      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01d      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d02:	d111      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3304      	adds	r3, #4
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fc80 	bl	8007610 <RCCEx_PLL2_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d14:	e012      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3324      	adds	r3, #36	; 0x24
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fd29 	bl	8007774 <RCCEx_PLL3_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d26:	e009      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2c:	e006      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d2e:	bf00      	nop
 8006d30:	e004      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d32:	bf00      	nop
 8006d34:	e002      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d36:	bf00      	nop
 8006d38:	e000      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d42:	4b3c      	ldr	r3, [pc, #240]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d50:	4938      	ldr	r1, [pc, #224]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	658b      	str	r3, [r1, #88]	; 0x58
 8006d56:	e001      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01a      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	d10a      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fcfa 	bl	8007774 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d8a:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d98:	4926      	ldr	r1, [pc, #152]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db4:	d10a      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3324      	adds	r3, #36	; 0x24
 8006dba:	2102      	movs	r1, #2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fcd9 	bl	8007774 <RCCEx_PLL3_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dda:	4916      	ldr	r1, [pc, #88]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d036      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df6:	d01f      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfc:	d817      	bhi.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e06:	d009      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006e08:	e011      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fbfd 	bl	8007610 <RCCEx_PLL2_Config>
 8006e16:	4603      	mov	r3, r0
 8006e18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e1a:	e00e      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3324      	adds	r3, #36	; 0x24
 8006e20:	2102      	movs	r1, #2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fca6 	bl	8007774 <RCCEx_PLL3_Config>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e2c:	e005      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	75fb      	strb	r3, [r7, #23]
      break;
 8006e32:	e002      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e34:	58024400 	.word	0x58024400
      break;
 8006e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e40:	4b93      	ldr	r3, [pc, #588]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e4e:	4990      	ldr	r1, [pc, #576]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	658b      	str	r3, [r1, #88]	; 0x58
 8006e54:	e001      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d033      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e70:	d01c      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e76:	d816      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e82:	d007      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e84:	e00f      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e86:	4b82      	ldr	r3, [pc, #520]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4a81      	ldr	r2, [pc, #516]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e92:	e00c      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3324      	adds	r3, #36	; 0x24
 8006e98:	2101      	movs	r1, #1
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fc6a 	bl	8007774 <RCCEx_PLL3_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ea4:	e003      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006eb4:	4b76      	ldr	r3, [pc, #472]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec2:	4973      	ldr	r1, [pc, #460]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ec8:	e001      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d029      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee6:	d007      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006ee8:	e00f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eea:	4b69      	ldr	r3, [pc, #420]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	4a68      	ldr	r2, [pc, #416]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ef6:	e00b      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	2102      	movs	r1, #2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fb86 	bl	8007610 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f08:	e002      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f16:	4b5e      	ldr	r3, [pc, #376]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f22:	495b      	ldr	r1, [pc, #364]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f28:	e001      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	2102      	movs	r1, #2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fc17 	bl	8007774 <RCCEx_PLL3_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d030      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f64:	d017      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f6a:	d811      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f70:	d013      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f76:	d80b      	bhi.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f80:	d106      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f82:	4b43      	ldr	r3, [pc, #268]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	4a42      	ldr	r2, [pc, #264]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f8e:	e007      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	75fb      	strb	r3, [r7, #23]
      break;
 8006f94:	e004      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f96:	bf00      	nop
 8006f98:	e002      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e000      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fa6:	4b3a      	ldr	r3, [pc, #232]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb2:	4937      	ldr	r1, [pc, #220]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	654b      	str	r3, [r1, #84]	; 0x54
 8006fb8:	e001      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d008      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fca:	4b31      	ldr	r3, [pc, #196]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	492e      	ldr	r1, [pc, #184]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fe8:	4b29      	ldr	r3, [pc, #164]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ff6:	4926      	ldr	r1, [pc, #152]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007014:	491e      	ldr	r1, [pc, #120]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007016:	4313      	orrs	r3, r2
 8007018:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007026:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	4a19      	ldr	r2, [pc, #100]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800702c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007030:	6113      	str	r3, [r2, #16]
 8007032:	4b17      	ldr	r3, [pc, #92]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800703c:	4914      	ldr	r1, [pc, #80]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	da08      	bge.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007056:	490e      	ldr	r1, [pc, #56]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007058:	4313      	orrs	r3, r2
 800705a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d009      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007068:	4b09      	ldr	r3, [pc, #36]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007076:	4906      	ldr	r1, [pc, #24]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007078:	4313      	orrs	r3, r2
 800707a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800707c:	7dbb      	ldrb	r3, [r7, #22]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e000      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	58024400 	.word	0x58024400

08007094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007098:	f7ff f860 	bl	800615c <HAL_RCC_GetHCLKFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	091b      	lsrs	r3, r3, #4
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	4904      	ldr	r1, [pc, #16]	; (80070bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	58024400 	.word	0x58024400
 80070bc:	0800bd4c 	.word	0x0800bd4c

080070c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	; 0x24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070c8:	4ba1      	ldr	r3, [pc, #644]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070d2:	4b9f      	ldr	r3, [pc, #636]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	0b1b      	lsrs	r3, r3, #12
 80070d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070de:	4b9c      	ldr	r3, [pc, #624]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	091b      	lsrs	r3, r3, #4
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070ea:	4b99      	ldr	r3, [pc, #612]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	08db      	lsrs	r3, r3, #3
 80070f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8111 	beq.w	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b02      	cmp	r3, #2
 8007112:	f000 8083 	beq.w	800721c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b02      	cmp	r3, #2
 800711a:	f200 80a1 	bhi.w	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d056      	beq.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800712a:	e099      	b.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800712c:	4b88      	ldr	r3, [pc, #544]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02d      	beq.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007138:	4b85      	ldr	r3, [pc, #532]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	08db      	lsrs	r3, r3, #3
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	4a84      	ldr	r2, [pc, #528]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b7b      	ldr	r3, [pc, #492]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007192:	e087      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b6a      	ldr	r3, [pc, #424]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d6:	e065      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ea:	4b59      	ldr	r3, [pc, #356]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800721a:	e043      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b48      	ldr	r3, [pc, #288]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725e:	e021      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b37      	ldr	r3, [pc, #220]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072a4:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	0a5b      	lsrs	r3, r3, #9
 80072aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072be:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ca:	ee17 2a90 	vmov	r2, s15
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072d2:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f8:	ee17 2a90 	vmov	r2, s15
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007300:	4b13      	ldr	r3, [pc, #76]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	0e1b      	lsrs	r3, r3, #24
 8007306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731a:	edd7 6a07 	vldr	s13, [r7, #28]
 800731e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007326:	ee17 2a90 	vmov	r2, s15
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800732e:	e008      	b.n	8007342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	609a      	str	r2, [r3, #8]
}
 8007342:	bf00      	nop
 8007344:	3724      	adds	r7, #36	; 0x24
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	58024400 	.word	0x58024400
 8007354:	03d09000 	.word	0x03d09000
 8007358:	46000000 	.word	0x46000000
 800735c:	4c742400 	.word	0x4c742400
 8007360:	4a742400 	.word	0x4a742400
 8007364:	4c371b00 	.word	0x4c371b00

08007368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007370:	4ba1      	ldr	r3, [pc, #644]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800737a:	4b9f      	ldr	r3, [pc, #636]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	0d1b      	lsrs	r3, r3, #20
 8007380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007386:	4b9c      	ldr	r3, [pc, #624]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	0a1b      	lsrs	r3, r3, #8
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007392:	4b99      	ldr	r3, [pc, #612]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	08db      	lsrs	r3, r3, #3
 8007398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8111 	beq.w	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f000 8083 	beq.w	80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f200 80a1 	bhi.w	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d056      	beq.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073d2:	e099      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d4:	4b88      	ldr	r3, [pc, #544]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d02d      	beq.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e0:	4b85      	ldr	r3, [pc, #532]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	4a84      	ldr	r2, [pc, #528]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	ee07 3a90 	vmov	s15, r3
 80073f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800743a:	e087      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b6a      	ldr	r3, [pc, #424]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800747e:	e065      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c2:	e043      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800760c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b48      	ldr	r3, [pc, #288]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007506:	e021      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b37      	ldr	r3, [pc, #220]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a03 	vldr	s12, [r7, #12]
 800752e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800754c:	4b2a      	ldr	r3, [pc, #168]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	0a5b      	lsrs	r3, r3, #9
 8007552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007566:	edd7 6a07 	vldr	s13, [r7, #28]
 800756a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007572:	ee17 2a90 	vmov	r2, s15
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800757a:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007594:	edd7 6a07 	vldr	s13, [r7, #28]
 8007598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a0:	ee17 2a90 	vmov	r2, s15
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	0e1b      	lsrs	r3, r3, #24
 80075ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ce:	ee17 2a90 	vmov	r2, s15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075d6:	e008      	b.n	80075ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
}
 80075ea:	bf00      	nop
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	58024400 	.word	0x58024400
 80075fc:	03d09000 	.word	0x03d09000
 8007600:	46000000 	.word	0x46000000
 8007604:	4c742400 	.word	0x4c742400
 8007608:	4a742400 	.word	0x4a742400
 800760c:	4c371b00 	.word	0x4c371b00

08007610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800761e:	4b53      	ldr	r3, [pc, #332]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d101      	bne.n	800762e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e099      	b.n	8007762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800762e:	4b4f      	ldr	r3, [pc, #316]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a4e      	ldr	r2, [pc, #312]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800763a:	f7fa fffb 	bl	8002634 <HAL_GetTick>
 800763e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007640:	e008      	b.n	8007654 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007642:	f7fa fff7 	bl	8002634 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e086      	b.n	8007762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007654:	4b45      	ldr	r3, [pc, #276]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007660:	4b42      	ldr	r3, [pc, #264]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	493f      	ldr	r1, [pc, #252]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	628b      	str	r3, [r1, #40]	; 0x28
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	3b01      	subs	r3, #1
 8007684:	025b      	lsls	r3, r3, #9
 8007686:	b29b      	uxth	r3, r3
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	3b01      	subs	r3, #1
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	3b01      	subs	r3, #1
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076a4:	4931      	ldr	r1, [pc, #196]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076aa:	4b30      	ldr	r3, [pc, #192]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	492d      	ldr	r1, [pc, #180]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076bc:	4b2b      	ldr	r3, [pc, #172]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	f023 0220 	bic.w	r2, r3, #32
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	4928      	ldr	r1, [pc, #160]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076ce:	4b27      	ldr	r3, [pc, #156]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a26      	ldr	r2, [pc, #152]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076d4:	f023 0310 	bic.w	r3, r3, #16
 80076d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <RCCEx_PLL2_Config+0x160>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	69d2      	ldr	r2, [r2, #28]
 80076e6:	00d2      	lsls	r2, r2, #3
 80076e8:	4920      	ldr	r1, [pc, #128]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076ee:	4b1f      	ldr	r3, [pc, #124]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	4a1e      	ldr	r2, [pc, #120]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076f4:	f043 0310 	orr.w	r3, r3, #16
 80076f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007700:	4b1a      	ldr	r3, [pc, #104]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	4a19      	ldr	r2, [pc, #100]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800770a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800770c:	e00f      	b.n	800772e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 800771a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800771e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007720:	e005      	b.n	800772e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a11      	ldr	r2, [pc, #68]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a0e      	ldr	r2, [pc, #56]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7fa ff7b 	bl	8002634 <HAL_GetTick>
 800773e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007740:	e008      	b.n	8007754 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007742:	f7fa ff77 	bl	8002634 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e006      	b.n	8007762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	58024400 	.word	0x58024400
 8007770:	ffff0007 	.word	0xffff0007

08007774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007782:	4b53      	ldr	r3, [pc, #332]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d101      	bne.n	8007792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e099      	b.n	80078c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007792:	4b4f      	ldr	r3, [pc, #316]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a4e      	ldr	r2, [pc, #312]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800779c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779e:	f7fa ff49 	bl	8002634 <HAL_GetTick>
 80077a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077a4:	e008      	b.n	80077b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077a6:	f7fa ff45 	bl	8002634 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e086      	b.n	80078c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077b8:	4b45      	ldr	r3, [pc, #276]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077c4:	4b42      	ldr	r3, [pc, #264]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	051b      	lsls	r3, r3, #20
 80077d2:	493f      	ldr	r1, [pc, #252]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	628b      	str	r3, [r1, #40]	; 0x28
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	3b01      	subs	r3, #1
 80077de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	025b      	lsls	r3, r3, #9
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	3b01      	subs	r3, #1
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007808:	4931      	ldr	r1, [pc, #196]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800780e:	4b30      	ldr	r3, [pc, #192]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	492d      	ldr	r1, [pc, #180]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800781c:	4313      	orrs	r3, r2
 800781e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007820:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	4928      	ldr	r1, [pc, #160]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007832:	4b27      	ldr	r3, [pc, #156]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	4a26      	ldr	r2, [pc, #152]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <RCCEx_PLL3_Config+0x160>)
 8007844:	4013      	ands	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	69d2      	ldr	r2, [r2, #28]
 800784a:	00d2      	lsls	r2, r2, #3
 800784c:	4920      	ldr	r1, [pc, #128]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007852:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007864:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800786a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800786e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007870:	e00f      	b.n	8007892 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007878:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800787e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007884:	e005      	b.n	8007892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	4a11      	ldr	r2, [pc, #68]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a0e      	ldr	r2, [pc, #56]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789e:	f7fa fec9 	bl	8002634 <HAL_GetTick>
 80078a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078a4:	e008      	b.n	80078b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078a6:	f7fa fec5 	bl	8002634 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e006      	b.n	80078c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	58024400 	.word	0x58024400
 80078d4:	ffff0007 	.word	0xffff0007

080078d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e0eb      	b.n	8007ac6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a75      	ldr	r2, [pc, #468]	; (8007ad0 <HAL_SPI_Init+0x1f8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00f      	beq.n	800791e <HAL_SPI_Init+0x46>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a74      	ldr	r2, [pc, #464]	; (8007ad4 <HAL_SPI_Init+0x1fc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00a      	beq.n	800791e <HAL_SPI_Init+0x46>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a72      	ldr	r2, [pc, #456]	; (8007ad8 <HAL_SPI_Init+0x200>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d005      	beq.n	800791e <HAL_SPI_Init+0x46>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	d901      	bls.n	800791e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e0d3      	b.n	8007ac6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f8dc 	bl	8007adc <SPI_GetPacketSize>
 8007924:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a69      	ldr	r2, [pc, #420]	; (8007ad0 <HAL_SPI_Init+0x1f8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00c      	beq.n	800794a <HAL_SPI_Init+0x72>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a67      	ldr	r2, [pc, #412]	; (8007ad4 <HAL_SPI_Init+0x1fc>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d007      	beq.n	800794a <HAL_SPI_Init+0x72>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a66      	ldr	r2, [pc, #408]	; (8007ad8 <HAL_SPI_Init+0x200>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d002      	beq.n	800794a <HAL_SPI_Init+0x72>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b08      	cmp	r3, #8
 8007948:	d811      	bhi.n	800796e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800794e:	4a60      	ldr	r2, [pc, #384]	; (8007ad0 <HAL_SPI_Init+0x1f8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d009      	beq.n	8007968 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a5e      	ldr	r2, [pc, #376]	; (8007ad4 <HAL_SPI_Init+0x1fc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <HAL_SPI_Init+0x90>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5d      	ldr	r2, [pc, #372]	; (8007ad8 <HAL_SPI_Init+0x200>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d104      	bne.n	8007972 <HAL_SPI_Init+0x9a>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b10      	cmp	r3, #16
 800796c:	d901      	bls.n	8007972 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e0a9      	b.n	8007ac6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fa f81c 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079ac:	d119      	bne.n	80079e2 <HAL_SPI_Init+0x10a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b6:	d103      	bne.n	80079c0 <HAL_SPI_Init+0xe8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d008      	beq.n	80079d2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10c      	bne.n	80079e2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d0:	d107      	bne.n	80079e2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69da      	ldr	r2, [r3, #28]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	ea42 0103 	orr.w	r1, r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	ea42 0103 	orr.w	r1, r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d113      	bne.n	8007a82 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0201 	bic.w	r2, r2, #1
 8007a90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40013000 	.word	0x40013000
 8007ad4:	40003800 	.word	0x40003800
 8007ad8:	40003c00 	.word	0x40003c00

08007adc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	3307      	adds	r3, #7
 8007afa:	08db      	lsrs	r3, r3, #3
 8007afc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	fb02 f303 	mul.w	r3, r2, r3
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e049      	b.n	8007bb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7f9 ffa9 	bl	8001a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f000 fbe1 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e049      	b.n	8007c66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f841 	bl	8007c6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f000 fb8a 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d122      	bne.n	8007cde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d11b      	bne.n	8007cde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f06f 0202 	mvn.w	r2, #2
 8007cae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	f003 0303 	and.w	r3, r3, #3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb09 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007cca:	e005      	b.n	8007cd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fafb 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fb0c 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d122      	bne.n	8007d32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d11b      	bne.n	8007d32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f06f 0204 	mvn.w	r2, #4
 8007d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fadf 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007d1e:	e005      	b.n	8007d2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fad1 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fae2 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d122      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b08      	cmp	r3, #8
 8007d4c:	d11b      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f06f 0208 	mvn.w	r2, #8
 8007d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fab5 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007d72:	e005      	b.n	8007d80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 faa7 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fab8 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f003 0310 	and.w	r3, r3, #16
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d122      	bne.n	8007dda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b10      	cmp	r3, #16
 8007da0:	d11b      	bne.n	8007dda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f06f 0210 	mvn.w	r2, #16
 8007daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2208      	movs	r2, #8
 8007db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa8b 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007dc6:	e005      	b.n	8007dd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fa7d 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa8e 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d10e      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d107      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f06f 0201 	mvn.w	r2, #1
 8007dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7f9 fd94 	bl	800192e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d10e      	bne.n	8007e32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1e:	2b80      	cmp	r3, #128	; 0x80
 8007e20:	d107      	bne.n	8007e32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 ff89 	bl	8008d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e40:	d10e      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d107      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 ff7c 	bl	8008d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	d10e      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e78:	2b40      	cmp	r3, #64	; 0x40
 8007e7a:	d107      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa3c 	bl	8008304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d10e      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d107      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0220 	mvn.w	r2, #32
 8007eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 ff3c 	bl	8008d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e0fd      	b.n	80080d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b14      	cmp	r3, #20
 8007ee6:	f200 80f0 	bhi.w	80080ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	080080cb 	.word	0x080080cb
 8007ef8:	080080cb 	.word	0x080080cb
 8007efc:	080080cb 	.word	0x080080cb
 8007f00:	08007f85 	.word	0x08007f85
 8007f04:	080080cb 	.word	0x080080cb
 8007f08:	080080cb 	.word	0x080080cb
 8007f0c:	080080cb 	.word	0x080080cb
 8007f10:	08007fc7 	.word	0x08007fc7
 8007f14:	080080cb 	.word	0x080080cb
 8007f18:	080080cb 	.word	0x080080cb
 8007f1c:	080080cb 	.word	0x080080cb
 8007f20:	08008007 	.word	0x08008007
 8007f24:	080080cb 	.word	0x080080cb
 8007f28:	080080cb 	.word	0x080080cb
 8007f2c:	080080cb 	.word	0x080080cb
 8007f30:	08008049 	.word	0x08008049
 8007f34:	080080cb 	.word	0x080080cb
 8007f38:	080080cb 	.word	0x080080cb
 8007f3c:	080080cb 	.word	0x080080cb
 8007f40:	08008089 	.word	0x08008089
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fa7e 	bl	800844c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0208 	orr.w	r2, r2, #8
 8007f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0204 	bic.w	r2, r2, #4
 8007f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6999      	ldr	r1, [r3, #24]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	619a      	str	r2, [r3, #24]
      break;
 8007f82:	e0a3      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 faee 	bl	800856c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6999      	ldr	r1, [r3, #24]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	021a      	lsls	r2, r3, #8
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	619a      	str	r2, [r3, #24]
      break;
 8007fc4:	e082      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fb57 	bl	8008680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69da      	ldr	r2, [r3, #28]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0208 	orr.w	r2, r2, #8
 8007fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0204 	bic.w	r2, r2, #4
 8007ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69d9      	ldr	r1, [r3, #28]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	61da      	str	r2, [r3, #28]
      break;
 8008004:	e062      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 fbbd 	bl	800878c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69d9      	ldr	r1, [r3, #28]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	021a      	lsls	r2, r3, #8
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	61da      	str	r2, [r3, #28]
      break;
 8008046:	e041      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fc04 	bl	800885c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0208 	orr.w	r2, r2, #8
 8008062:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0204 	bic.w	r2, r2, #4
 8008072:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008086:	e021      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fc46 	bl	8008920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	021a      	lsls	r2, r3, #8
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080c8:	e000      	b.n	80080cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80080ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop

080080e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_TIM_ConfigClockSource+0x18>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e0db      	b.n	80082b0 <HAL_TIM_ConfigClockSource+0x1d0>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4b69      	ldr	r3, [pc, #420]	; (80082b8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008114:	4013      	ands	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800811e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a63      	ldr	r2, [pc, #396]	; (80082bc <HAL_TIM_ConfigClockSource+0x1dc>)
 800812e:	4293      	cmp	r3, r2
 8008130:	f000 80a9 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 8008134:	4a61      	ldr	r2, [pc, #388]	; (80082bc <HAL_TIM_ConfigClockSource+0x1dc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	f200 80ae 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 800813c:	4a60      	ldr	r2, [pc, #384]	; (80082c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	f000 80a1 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 8008144:	4a5e      	ldr	r2, [pc, #376]	; (80082c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	f200 80a6 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 800814c:	4a5d      	ldr	r2, [pc, #372]	; (80082c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	f000 8099 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 8008154:	4a5b      	ldr	r2, [pc, #364]	; (80082c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f200 809e 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 800815c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008160:	f000 8091 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 8008164:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008168:	f200 8096 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 800816c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008170:	f000 8089 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 8008174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008178:	f200 808e 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 800817c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008180:	d03e      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x120>
 8008182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008186:	f200 8087 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818e:	f000 8085 	beq.w	800829c <HAL_TIM_ConfigClockSource+0x1bc>
 8008192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008196:	d87f      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 8008198:	2b70      	cmp	r3, #112	; 0x70
 800819a:	d01a      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0xf2>
 800819c:	2b70      	cmp	r3, #112	; 0x70
 800819e:	d87b      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 80081a0:	2b60      	cmp	r3, #96	; 0x60
 80081a2:	d050      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x166>
 80081a4:	2b60      	cmp	r3, #96	; 0x60
 80081a6:	d877      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 80081a8:	2b50      	cmp	r3, #80	; 0x50
 80081aa:	d03c      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x146>
 80081ac:	2b50      	cmp	r3, #80	; 0x50
 80081ae:	d873      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	d058      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x186>
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d86f      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 80081b8:	2b30      	cmp	r3, #48	; 0x30
 80081ba:	d064      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 80081bc:	2b30      	cmp	r3, #48	; 0x30
 80081be:	d86b      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d060      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d867      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d05c      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d05a      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80081d0:	e062      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6899      	ldr	r1, [r3, #8]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f000 fc7f 	bl	8008ae4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	609a      	str	r2, [r3, #8]
      break;
 80081fe:	e04e      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6899      	ldr	r1, [r3, #8]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f000 fc68 	bl	8008ae4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008222:	609a      	str	r2, [r3, #8]
      break;
 8008224:	e03b      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6859      	ldr	r1, [r3, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	461a      	mov	r2, r3
 8008234:	f000 fbd8 	bl	80089e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2150      	movs	r1, #80	; 0x50
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fc32 	bl	8008aa8 <TIM_ITRx_SetConfig>
      break;
 8008244:	e02b      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6859      	ldr	r1, [r3, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	461a      	mov	r2, r3
 8008254:	f000 fbf7 	bl	8008a46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2160      	movs	r1, #96	; 0x60
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fc22 	bl	8008aa8 <TIM_ITRx_SetConfig>
      break;
 8008264:	e01b      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6859      	ldr	r1, [r3, #4]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	461a      	mov	r2, r3
 8008274:	f000 fbb8 	bl	80089e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2140      	movs	r1, #64	; 0x40
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fc12 	bl	8008aa8 <TIM_ITRx_SetConfig>
      break;
 8008284:	e00b      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f000 fc09 	bl	8008aa8 <TIM_ITRx_SetConfig>
        break;
 8008296:	e002      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800829c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	ffceff88 	.word	0xffceff88
 80082bc:	00100040 	.word	0x00100040
 80082c0:	00100030 	.word	0x00100030
 80082c4:	00100020 	.word	0x00100020

080082c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a40      	ldr	r2, [pc, #256]	; (800842c <TIM_Base_SetConfig+0x114>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008336:	d00f      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3d      	ldr	r2, [pc, #244]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00b      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a3c      	ldr	r2, [pc, #240]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a3b      	ldr	r2, [pc, #236]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a3a      	ldr	r2, [pc, #232]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d108      	bne.n	800836a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	; (800842c <TIM_Base_SetConfig+0x114>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01f      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d01b      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d017      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00f      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a29      	ldr	r2, [pc, #164]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00b      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a28      	ldr	r2, [pc, #160]	; (8008440 <TIM_Base_SetConfig+0x128>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d007      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d003      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a26      	ldr	r2, [pc, #152]	; (8008448 <TIM_Base_SetConfig+0x130>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d108      	bne.n	80083c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <TIM_Base_SetConfig+0x114>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a12      	ldr	r2, [pc, #72]	; (800843c <TIM_Base_SetConfig+0x124>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a11      	ldr	r2, [pc, #68]	; (8008440 <TIM_Base_SetConfig+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a0f      	ldr	r2, [pc, #60]	; (8008448 <TIM_Base_SetConfig+0x130>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d103      	bne.n	8008418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	615a      	str	r2, [r3, #20]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800

0800844c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4b37      	ldr	r3, [pc, #220]	; (8008554 <TIM_OC1_SetConfig+0x108>)
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0302 	bic.w	r3, r3, #2
 8008494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00f      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a2c      	ldr	r2, [pc, #176]	; (800855c <TIM_OC1_SetConfig+0x110>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00b      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a2b      	ldr	r2, [pc, #172]	; (8008560 <TIM_OC1_SetConfig+0x114>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d007      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <TIM_OC1_SetConfig+0x118>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a29      	ldr	r2, [pc, #164]	; (8008568 <TIM_OC1_SetConfig+0x11c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d10c      	bne.n	80084e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f023 0308 	bic.w	r3, r3, #8
 80084ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f023 0304 	bic.w	r3, r3, #4
 80084e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00f      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1b      	ldr	r2, [pc, #108]	; (800855c <TIM_OC1_SetConfig+0x110>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1a      	ldr	r2, [pc, #104]	; (8008560 <TIM_OC1_SetConfig+0x114>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a19      	ldr	r2, [pc, #100]	; (8008564 <TIM_OC1_SetConfig+0x118>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a18      	ldr	r2, [pc, #96]	; (8008568 <TIM_OC1_SetConfig+0x11c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d111      	bne.n	800852e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	fffeff8f 	.word	0xfffeff8f
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0210 	bic.w	r2, r3, #16
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b34      	ldr	r3, [pc, #208]	; (8008668 <TIM_OC2_SetConfig+0xfc>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f023 0320 	bic.w	r3, r3, #32
 80085b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a29      	ldr	r2, [pc, #164]	; (800866c <TIM_OC2_SetConfig+0x100>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d003      	beq.n	80085d4 <TIM_OC2_SetConfig+0x68>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a28      	ldr	r2, [pc, #160]	; (8008670 <TIM_OC2_SetConfig+0x104>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d10d      	bne.n	80085f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a1e      	ldr	r2, [pc, #120]	; (800866c <TIM_OC2_SetConfig+0x100>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00f      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a1d      	ldr	r2, [pc, #116]	; (8008670 <TIM_OC2_SetConfig+0x104>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00b      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a1c      	ldr	r2, [pc, #112]	; (8008674 <TIM_OC2_SetConfig+0x108>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <TIM_OC2_SetConfig+0x10c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a1a      	ldr	r2, [pc, #104]	; (800867c <TIM_OC2_SetConfig+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d113      	bne.n	8008640 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	feff8fff 	.word	0xfeff8fff
 800866c:	40010000 	.word	0x40010000
 8008670:	40010400 	.word	0x40010400
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a27      	ldr	r2, [pc, #156]	; (8008778 <TIM_OC3_SetConfig+0xf8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_OC3_SetConfig+0x66>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a26      	ldr	r2, [pc, #152]	; (800877c <TIM_OC3_SetConfig+0xfc>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10d      	bne.n	8008702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1c      	ldr	r2, [pc, #112]	; (8008778 <TIM_OC3_SetConfig+0xf8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a1b      	ldr	r2, [pc, #108]	; (800877c <TIM_OC3_SetConfig+0xfc>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a1a      	ldr	r2, [pc, #104]	; (8008780 <TIM_OC3_SetConfig+0x100>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a19      	ldr	r2, [pc, #100]	; (8008784 <TIM_OC3_SetConfig+0x104>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a18      	ldr	r2, [pc, #96]	; (8008788 <TIM_OC3_SetConfig+0x108>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d113      	bne.n	8008752 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	40010000 	.word	0x40010000
 800877c:	40010400 	.word	0x40010400
 8008780:	40014000 	.word	0x40014000
 8008784:	40014400 	.word	0x40014400
 8008788:	40014800 	.word	0x40014800

0800878c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	031b      	lsls	r3, r3, #12
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a18      	ldr	r2, [pc, #96]	; (8008848 <TIM_OC4_SetConfig+0xbc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00f      	beq.n	800880c <TIM_OC4_SetConfig+0x80>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a17      	ldr	r2, [pc, #92]	; (800884c <TIM_OC4_SetConfig+0xc0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00b      	beq.n	800880c <TIM_OC4_SetConfig+0x80>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a16      	ldr	r2, [pc, #88]	; (8008850 <TIM_OC4_SetConfig+0xc4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d007      	beq.n	800880c <TIM_OC4_SetConfig+0x80>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a15      	ldr	r2, [pc, #84]	; (8008854 <TIM_OC4_SetConfig+0xc8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d003      	beq.n	800880c <TIM_OC4_SetConfig+0x80>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a14      	ldr	r2, [pc, #80]	; (8008858 <TIM_OC4_SetConfig+0xcc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d109      	bne.n	8008820 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	019b      	lsls	r3, r3, #6
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40010000 	.word	0x40010000
 800884c:	40010400 	.word	0x40010400
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400
 8008858:	40014800 	.word	0x40014800

0800885c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800889c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a17      	ldr	r2, [pc, #92]	; (800890c <TIM_OC5_SetConfig+0xb0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00f      	beq.n	80088d2 <TIM_OC5_SetConfig+0x76>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a16      	ldr	r2, [pc, #88]	; (8008910 <TIM_OC5_SetConfig+0xb4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00b      	beq.n	80088d2 <TIM_OC5_SetConfig+0x76>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <TIM_OC5_SetConfig+0xb8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d007      	beq.n	80088d2 <TIM_OC5_SetConfig+0x76>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a14      	ldr	r2, [pc, #80]	; (8008918 <TIM_OC5_SetConfig+0xbc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <TIM_OC5_SetConfig+0x76>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a13      	ldr	r2, [pc, #76]	; (800891c <TIM_OC5_SetConfig+0xc0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d109      	bne.n	80088e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	621a      	str	r2, [r3, #32]
}
 8008900:	bf00      	nop
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	40010000 	.word	0x40010000
 8008910:	40010400 	.word	0x40010400
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400
 800891c:	40014800 	.word	0x40014800

08008920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	051b      	lsls	r3, r3, #20
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <TIM_OC6_SetConfig+0xb4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00f      	beq.n	8008998 <TIM_OC6_SetConfig+0x78>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <TIM_OC6_SetConfig+0xb8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00b      	beq.n	8008998 <TIM_OC6_SetConfig+0x78>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a16      	ldr	r2, [pc, #88]	; (80089dc <TIM_OC6_SetConfig+0xbc>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d007      	beq.n	8008998 <TIM_OC6_SetConfig+0x78>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <TIM_OC6_SetConfig+0xc0>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d003      	beq.n	8008998 <TIM_OC6_SetConfig+0x78>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a14      	ldr	r2, [pc, #80]	; (80089e4 <TIM_OC6_SetConfig+0xc4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d109      	bne.n	80089ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800899e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	621a      	str	r2, [r3, #32]
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40010400 	.word	0x40010400
 80089dc:	40014000 	.word	0x40014000
 80089e0:	40014400 	.word	0x40014400
 80089e4:	40014800 	.word	0x40014800

080089e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f023 0201 	bic.w	r2, r3, #1
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f023 030a 	bic.w	r3, r3, #10
 8008a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b087      	sub	sp, #28
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	f023 0210 	bic.w	r2, r3, #16
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	031b      	lsls	r3, r3, #12
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	621a      	str	r2, [r3, #32]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <TIM_ITRx_SetConfig+0x38>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	f043 0307 	orr.w	r3, r3, #7
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	609a      	str	r2, [r3, #8]
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	ffcfff8f 	.word	0xffcfff8f

08008ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	021a      	lsls	r2, r3, #8
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	609a      	str	r2, [r3, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e068      	b.n	8008c0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2e      	ldr	r2, [pc, #184]	; (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a2d      	ldr	r2, [pc, #180]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d108      	bne.n	8008b82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1e      	ldr	r2, [pc, #120]	; (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d01d      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bae:	d018      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	; (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a1a      	ldr	r2, [pc, #104]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00e      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a18      	ldr	r2, [pc, #96]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d009      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d004      	beq.n	8008be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a14      	ldr	r2, [pc, #80]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d10c      	bne.n	8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40010000 	.word	0x40010000
 8008c20:	40010400 	.word	0x40010400
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40001800 	.word	0x40001800

08008c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e065      	b.n	8008d1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	041b      	lsls	r3, r3, #16
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a16      	ldr	r2, [pc, #88]	; (8008d28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a14      	ldr	r2, [pc, #80]	; (8008d2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d115      	bne.n	8008d0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	051b      	lsls	r3, r3, #20
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40010400 	.word	0x40010400

08008d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e042      	b.n	8008e04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d106      	bne.n	8008d96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7f9 f819 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2224      	movs	r2, #36	; 0x24
 8008d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0201 	bic.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fbd8 	bl	8009564 <UART_SetConfig>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e022      	b.n	8008e04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 f92c 	bl	800a024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f042 0201 	orr.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f9b3 	bl	800a168 <UART_CheckIdleState>
 8008e02:	4603      	mov	r3, r0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	; 0x28
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	f040 8083 	bne.w	8008f2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_UART_Transmit+0x28>
 8008e2e:	88fb      	ldrh	r3, [r7, #6]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e07b      	b.n	8008f30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Transmit+0x3a>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e074      	b.n	8008f30 <HAL_UART_Transmit+0x124>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2221      	movs	r2, #33	; 0x21
 8008e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e5e:	f7f9 fbe9 	bl	8002634 <HAL_GetTick>
 8008e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7c:	d108      	bne.n	8008e90 <HAL_UART_Transmit+0x84>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	e003      	b.n	8008e98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008ea0:	e02c      	b.n	8008efc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2180      	movs	r1, #128	; 0x80
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f001 f9a6 	bl	800a1fe <UART_WaitOnFlagUntilTimeout>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e039      	b.n	8008f30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ed0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	e007      	b.n	8008eea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1cc      	bne.n	8008ea2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2140      	movs	r1, #64	; 0x40
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f001 f973 	bl	800a1fe <UART_WaitOnFlagUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e006      	b.n	8008f30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008f2e:	2302      	movs	r3, #2
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3720      	adds	r7, #32
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d131      	bne.n	8008fb4 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <HAL_UART_Receive_IT+0x24>
 8008f56:	88fb      	ldrh	r3, [r7, #6]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e02a      	b.n	8008fb6 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Receive_IT+0x36>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e023      	b.n	8008fb6 <HAL_UART_Receive_IT+0x7e>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <HAL_UART_Receive_IT+0x88>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00e      	beq.n	8008fa4 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fa2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f001 f9a8 	bl	800a300 <UART_Start_Receive_IT>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	e000      	b.n	8008fb6 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008fb4:	2302      	movs	r3, #2
  }
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	58000c00 	.word	0x58000c00

08008fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fea:	4013      	ands	r3, r2
 8008fec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d118      	bne.n	8009026 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d013      	beq.n	8009026 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 8282 	beq.w	8009520 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	4798      	blx	r3
      }
      return;
 8009024:	e27c      	b.n	8009520 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80ef 	beq.w	800920c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4b73      	ldr	r3, [pc, #460]	; (8009200 <HAL_UART_IRQHandler+0x23c>)
 8009032:	4013      	ands	r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	4b72      	ldr	r3, [pc, #456]	; (8009204 <HAL_UART_IRQHandler+0x240>)
 800903c:	4013      	ands	r3, r2
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80e4 	beq.w	800920c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d010      	beq.n	8009070 <HAL_UART_IRQHandler+0xac>
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2201      	movs	r2, #1
 800905e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009066:	f043 0201 	orr.w	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d010      	beq.n	800909c <HAL_UART_IRQHandler+0xd8>
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2202      	movs	r2, #2
 800908a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009092:	f043 0204 	orr.w	r2, r3, #4
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d010      	beq.n	80090c8 <HAL_UART_IRQHandler+0x104>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2204      	movs	r2, #4
 80090b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090be:	f043 0202 	orr.w	r2, r3, #2
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	f003 0308 	and.w	r3, r3, #8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d015      	beq.n	80090fe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	f003 0320 	and.w	r3, r3, #32
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	4b48      	ldr	r3, [pc, #288]	; (8009200 <HAL_UART_IRQHandler+0x23c>)
 80090e0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2208      	movs	r2, #8
 80090ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f4:	f043 0208 	orr.w	r2, r3, #8
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009104:	2b00      	cmp	r3, #0
 8009106:	d011      	beq.n	800912c <HAL_UART_IRQHandler+0x168>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00c      	beq.n	800912c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800911a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009122:	f043 0220 	orr.w	r2, r3, #32
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 81f6 	beq.w	8009524 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d011      	beq.n	8009166 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800916c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009178:	2b40      	cmp	r3, #64	; 0x40
 800917a:	d004      	beq.n	8009186 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009182:	2b00      	cmp	r3, #0
 8009184:	d031      	beq.n	80091ea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 f978 	bl	800a47c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009196:	2b40      	cmp	r3, #64	; 0x40
 8009198:	d123      	bne.n	80091e2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d013      	beq.n	80091da <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <HAL_UART_IRQHandler+0x244>)
 80091b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fa fac4 	bl	800374c <HAL_DMA_Abort_IT>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d017      	beq.n	80091fa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d8:	e00f      	b.n	80091fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f9ac 	bl	8009538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e0:	e00b      	b.n	80091fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f9a8 	bl	8009538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e8:	e007      	b.n	80091fa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9a4 	bl	8009538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80091f8:	e194      	b.n	8009524 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091fa:	bf00      	nop
    return;
 80091fc:	e192      	b.n	8009524 <HAL_UART_IRQHandler+0x560>
 80091fe:	bf00      	nop
 8009200:	10000001 	.word	0x10000001
 8009204:	04000120 	.word	0x04000120
 8009208:	0800a4e1 	.word	0x0800a4e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 810f 	bne.w	8009434 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8109 	beq.w	8009434 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8103 	beq.w	8009434 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2210      	movs	r2, #16
 8009234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	f040 80bb 	bne.w	80093bc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a96      	ldr	r2, [pc, #600]	; (80094a8 <HAL_UART_IRQHandler+0x4e4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d059      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a94      	ldr	r2, [pc, #592]	; (80094ac <HAL_UART_IRQHandler+0x4e8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d053      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a92      	ldr	r2, [pc, #584]	; (80094b0 <HAL_UART_IRQHandler+0x4ec>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d04d      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a90      	ldr	r2, [pc, #576]	; (80094b4 <HAL_UART_IRQHandler+0x4f0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d047      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a8e      	ldr	r2, [pc, #568]	; (80094b8 <HAL_UART_IRQHandler+0x4f4>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d041      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a8c      	ldr	r2, [pc, #560]	; (80094bc <HAL_UART_IRQHandler+0x4f8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d03b      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a8a      	ldr	r2, [pc, #552]	; (80094c0 <HAL_UART_IRQHandler+0x4fc>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d035      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a88      	ldr	r2, [pc, #544]	; (80094c4 <HAL_UART_IRQHandler+0x500>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d02f      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a86      	ldr	r2, [pc, #536]	; (80094c8 <HAL_UART_IRQHandler+0x504>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d029      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a84      	ldr	r2, [pc, #528]	; (80094cc <HAL_UART_IRQHandler+0x508>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d023      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a82      	ldr	r2, [pc, #520]	; (80094d0 <HAL_UART_IRQHandler+0x50c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d01d      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a80      	ldr	r2, [pc, #512]	; (80094d4 <HAL_UART_IRQHandler+0x510>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d017      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a7e      	ldr	r2, [pc, #504]	; (80094d8 <HAL_UART_IRQHandler+0x514>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d011      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a7c      	ldr	r2, [pc, #496]	; (80094dc <HAL_UART_IRQHandler+0x518>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00b      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a7a      	ldr	r2, [pc, #488]	; (80094e0 <HAL_UART_IRQHandler+0x51c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d005      	beq.n	8009306 <HAL_UART_IRQHandler+0x342>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a78      	ldr	r2, [pc, #480]	; (80094e4 <HAL_UART_IRQHandler+0x520>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d105      	bne.n	8009312 <HAL_UART_IRQHandler+0x34e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	b29b      	uxth	r3, r3
 8009310:	e004      	b.n	800931c <HAL_UART_IRQHandler+0x358>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	b29b      	uxth	r3, r3
 800931c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800931e:	893b      	ldrh	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 8101 	beq.w	8009528 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800932c:	893a      	ldrh	r2, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	f080 80fa 	bcs.w	8009528 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	893a      	ldrh	r2, [r7, #8]
 8009338:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009346:	d02b      	beq.n	80093a0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009356:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0201 	bic.w	r2, r2, #1
 8009366:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009376:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 0210 	bic.w	r2, r2, #16
 8009394:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939a:	4618      	mov	r0, r3
 800939c:	f7f9 feb8 	bl	8003110 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f8c9 	bl	800954c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093ba:	e0b5      	b.n	8009528 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 80a8 	beq.w	800952c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80093dc:	897b      	ldrh	r3, [r7, #10]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 80a4 	beq.w	800952c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093f2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6899      	ldr	r1, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4b3a      	ldr	r3, [pc, #232]	; (80094e8 <HAL_UART_IRQHandler+0x524>)
 8009400:	400b      	ands	r3, r1
 8009402:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0210 	bic.w	r2, r2, #16
 8009426:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009428:	897b      	ldrh	r3, [r7, #10]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f88d 	bl	800954c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009432:	e07b      	b.n	800952c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <HAL_UART_IRQHandler+0x496>
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d008      	beq.n	800945a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 fbba 	bl	800abcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009458:	e06b      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d012      	beq.n	800948a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800947c:	2b00      	cmp	r3, #0
 800947e:	d057      	beq.n	8009530 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	4798      	blx	r3
    }
    return;
 8009488:	e052      	b.n	8009530 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d02b      	beq.n	80094ec <HAL_UART_IRQHandler+0x528>
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949a:	2b00      	cmp	r3, #0
 800949c:	d026      	beq.n	80094ec <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f001 f834 	bl	800a50c <UART_EndTransmit_IT>
    return;
 80094a4:	e045      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
 80094a6:	bf00      	nop
 80094a8:	40020010 	.word	0x40020010
 80094ac:	40020028 	.word	0x40020028
 80094b0:	40020040 	.word	0x40020040
 80094b4:	40020058 	.word	0x40020058
 80094b8:	40020070 	.word	0x40020070
 80094bc:	40020088 	.word	0x40020088
 80094c0:	400200a0 	.word	0x400200a0
 80094c4:	400200b8 	.word	0x400200b8
 80094c8:	40020410 	.word	0x40020410
 80094cc:	40020428 	.word	0x40020428
 80094d0:	40020440 	.word	0x40020440
 80094d4:	40020458 	.word	0x40020458
 80094d8:	40020470 	.word	0x40020470
 80094dc:	40020488 	.word	0x40020488
 80094e0:	400204a0 	.word	0x400204a0
 80094e4:	400204b8 	.word	0x400204b8
 80094e8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d008      	beq.n	8009508 <HAL_UART_IRQHandler+0x544>
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fb77 	bl	800abf4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009506:	e014      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00f      	beq.n	8009532 <HAL_UART_IRQHandler+0x56e>
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	da0c      	bge.n	8009532 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 fb61 	bl	800abe0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800951e:	e008      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
      return;
 8009520:	bf00      	nop
 8009522:	e006      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
    return;
 8009524:	bf00      	nop
 8009526:	e004      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
      return;
 8009528:	bf00      	nop
 800952a:	e002      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
      return;
 800952c:	bf00      	nop
 800952e:	e000      	b.n	8009532 <HAL_UART_IRQHandler+0x56e>
    return;
 8009530:	bf00      	nop
  }
}
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009564:	b5b0      	push	{r4, r5, r7, lr}
 8009566:	b08e      	sub	sp, #56	; 0x38
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	4313      	orrs	r3, r2
 8009588:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	4bbf      	ldr	r3, [pc, #764]	; (8009890 <UART_SetConfig+0x32c>)
 8009592:	4013      	ands	r3, r2
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800959a:	430b      	orrs	r3, r1
 800959c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4ab5      	ldr	r2, [pc, #724]	; (8009894 <UART_SetConfig+0x330>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d004      	beq.n	80095ce <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ca:	4313      	orrs	r3, r2
 80095cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	4bb0      	ldr	r3, [pc, #704]	; (8009898 <UART_SetConfig+0x334>)
 80095d6:	4013      	ands	r3, r2
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6812      	ldr	r2, [r2, #0]
 80095dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095de:	430b      	orrs	r3, r1
 80095e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	f023 010f 	bic.w	r1, r3, #15
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4aa7      	ldr	r2, [pc, #668]	; (800989c <UART_SetConfig+0x338>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d176      	bne.n	80096f0 <UART_SetConfig+0x18c>
 8009602:	4ba7      	ldr	r3, [pc, #668]	; (80098a0 <UART_SetConfig+0x33c>)
 8009604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800960a:	2b28      	cmp	r3, #40	; 0x28
 800960c:	d86c      	bhi.n	80096e8 <UART_SetConfig+0x184>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <UART_SetConfig+0xb0>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	080096b9 	.word	0x080096b9
 8009618:	080096e9 	.word	0x080096e9
 800961c:	080096e9 	.word	0x080096e9
 8009620:	080096e9 	.word	0x080096e9
 8009624:	080096e9 	.word	0x080096e9
 8009628:	080096e9 	.word	0x080096e9
 800962c:	080096e9 	.word	0x080096e9
 8009630:	080096e9 	.word	0x080096e9
 8009634:	080096c1 	.word	0x080096c1
 8009638:	080096e9 	.word	0x080096e9
 800963c:	080096e9 	.word	0x080096e9
 8009640:	080096e9 	.word	0x080096e9
 8009644:	080096e9 	.word	0x080096e9
 8009648:	080096e9 	.word	0x080096e9
 800964c:	080096e9 	.word	0x080096e9
 8009650:	080096e9 	.word	0x080096e9
 8009654:	080096c9 	.word	0x080096c9
 8009658:	080096e9 	.word	0x080096e9
 800965c:	080096e9 	.word	0x080096e9
 8009660:	080096e9 	.word	0x080096e9
 8009664:	080096e9 	.word	0x080096e9
 8009668:	080096e9 	.word	0x080096e9
 800966c:	080096e9 	.word	0x080096e9
 8009670:	080096e9 	.word	0x080096e9
 8009674:	080096d1 	.word	0x080096d1
 8009678:	080096e9 	.word	0x080096e9
 800967c:	080096e9 	.word	0x080096e9
 8009680:	080096e9 	.word	0x080096e9
 8009684:	080096e9 	.word	0x080096e9
 8009688:	080096e9 	.word	0x080096e9
 800968c:	080096e9 	.word	0x080096e9
 8009690:	080096e9 	.word	0x080096e9
 8009694:	080096d9 	.word	0x080096d9
 8009698:	080096e9 	.word	0x080096e9
 800969c:	080096e9 	.word	0x080096e9
 80096a0:	080096e9 	.word	0x080096e9
 80096a4:	080096e9 	.word	0x080096e9
 80096a8:	080096e9 	.word	0x080096e9
 80096ac:	080096e9 	.word	0x080096e9
 80096b0:	080096e9 	.word	0x080096e9
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e222      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096c0:	2304      	movs	r3, #4
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e21e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096c8:	2308      	movs	r3, #8
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e21a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096d0:	2310      	movs	r3, #16
 80096d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d6:	e216      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096d8:	2320      	movs	r3, #32
 80096da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096de:	e212      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e6:	e20e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096e8:	2380      	movs	r3, #128	; 0x80
 80096ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ee:	e20a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a6b      	ldr	r2, [pc, #428]	; (80098a4 <UART_SetConfig+0x340>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d130      	bne.n	800975c <UART_SetConfig+0x1f8>
 80096fa:	4b69      	ldr	r3, [pc, #420]	; (80098a0 <UART_SetConfig+0x33c>)
 80096fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fe:	f003 0307 	and.w	r3, r3, #7
 8009702:	2b05      	cmp	r3, #5
 8009704:	d826      	bhi.n	8009754 <UART_SetConfig+0x1f0>
 8009706:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x1a8>)
 8009708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970c:	08009725 	.word	0x08009725
 8009710:	0800972d 	.word	0x0800972d
 8009714:	08009735 	.word	0x08009735
 8009718:	0800973d 	.word	0x0800973d
 800971c:	08009745 	.word	0x08009745
 8009720:	0800974d 	.word	0x0800974d
 8009724:	2300      	movs	r3, #0
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e1ec      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800972c:	2304      	movs	r3, #4
 800972e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009732:	e1e8      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009734:	2308      	movs	r3, #8
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e1e4      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800973c:	2310      	movs	r3, #16
 800973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009742:	e1e0      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009744:	2320      	movs	r3, #32
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e1dc      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009752:	e1d8      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009754:	2380      	movs	r3, #128	; 0x80
 8009756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975a:	e1d4      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a51      	ldr	r2, [pc, #324]	; (80098a8 <UART_SetConfig+0x344>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d130      	bne.n	80097c8 <UART_SetConfig+0x264>
 8009766:	4b4e      	ldr	r3, [pc, #312]	; (80098a0 <UART_SetConfig+0x33c>)
 8009768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976a:	f003 0307 	and.w	r3, r3, #7
 800976e:	2b05      	cmp	r3, #5
 8009770:	d826      	bhi.n	80097c0 <UART_SetConfig+0x25c>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <UART_SetConfig+0x214>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	08009791 	.word	0x08009791
 800977c:	08009799 	.word	0x08009799
 8009780:	080097a1 	.word	0x080097a1
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097b1 	.word	0x080097b1
 800978c:	080097b9 	.word	0x080097b9
 8009790:	2300      	movs	r3, #0
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e1b6      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009798:	2304      	movs	r3, #4
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e1b2      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80097a0:	2308      	movs	r3, #8
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e1ae      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80097a8:	2310      	movs	r3, #16
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e1aa      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80097b0:	2320      	movs	r3, #32
 80097b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b6:	e1a6      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80097b8:	2340      	movs	r3, #64	; 0x40
 80097ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097be:	e1a2      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80097c0:	2380      	movs	r3, #128	; 0x80
 80097c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c6:	e19e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a37      	ldr	r2, [pc, #220]	; (80098ac <UART_SetConfig+0x348>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d130      	bne.n	8009834 <UART_SetConfig+0x2d0>
 80097d2:	4b33      	ldr	r3, [pc, #204]	; (80098a0 <UART_SetConfig+0x33c>)
 80097d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	2b05      	cmp	r3, #5
 80097dc:	d826      	bhi.n	800982c <UART_SetConfig+0x2c8>
 80097de:	a201      	add	r2, pc, #4	; (adr r2, 80097e4 <UART_SetConfig+0x280>)
 80097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e4:	080097fd 	.word	0x080097fd
 80097e8:	08009805 	.word	0x08009805
 80097ec:	0800980d 	.word	0x0800980d
 80097f0:	08009815 	.word	0x08009815
 80097f4:	0800981d 	.word	0x0800981d
 80097f8:	08009825 	.word	0x08009825
 80097fc:	2300      	movs	r3, #0
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e180      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009804:	2304      	movs	r3, #4
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e17c      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800980c:	2308      	movs	r3, #8
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e178      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009814:	2310      	movs	r3, #16
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e174      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800981c:	2320      	movs	r3, #32
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e170      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009824:	2340      	movs	r3, #64	; 0x40
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e16c      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800982c:	2380      	movs	r3, #128	; 0x80
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009832:	e168      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1d      	ldr	r2, [pc, #116]	; (80098b0 <UART_SetConfig+0x34c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d142      	bne.n	80098c4 <UART_SetConfig+0x360>
 800983e:	4b18      	ldr	r3, [pc, #96]	; (80098a0 <UART_SetConfig+0x33c>)
 8009840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009842:	f003 0307 	and.w	r3, r3, #7
 8009846:	2b05      	cmp	r3, #5
 8009848:	d838      	bhi.n	80098bc <UART_SetConfig+0x358>
 800984a:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <UART_SetConfig+0x2ec>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	08009869 	.word	0x08009869
 8009854:	08009871 	.word	0x08009871
 8009858:	08009879 	.word	0x08009879
 800985c:	08009881 	.word	0x08009881
 8009860:	08009889 	.word	0x08009889
 8009864:	080098b5 	.word	0x080098b5
 8009868:	2300      	movs	r3, #0
 800986a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986e:	e14a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009870:	2304      	movs	r3, #4
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009876:	e146      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009878:	2308      	movs	r3, #8
 800987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987e:	e142      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009880:	2310      	movs	r3, #16
 8009882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009886:	e13e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009888:	2320      	movs	r3, #32
 800988a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988e:	e13a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009890:	cfff69f3 	.word	0xcfff69f3
 8009894:	58000c00 	.word	0x58000c00
 8009898:	11fff4ff 	.word	0x11fff4ff
 800989c:	40011000 	.word	0x40011000
 80098a0:	58024400 	.word	0x58024400
 80098a4:	40004400 	.word	0x40004400
 80098a8:	40004800 	.word	0x40004800
 80098ac:	40004c00 	.word	0x40004c00
 80098b0:	40005000 	.word	0x40005000
 80098b4:	2340      	movs	r3, #64	; 0x40
 80098b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ba:	e124      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80098bc:	2380      	movs	r3, #128	; 0x80
 80098be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c2:	e120      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4acc      	ldr	r2, [pc, #816]	; (8009bfc <UART_SetConfig+0x698>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d176      	bne.n	80099bc <UART_SetConfig+0x458>
 80098ce:	4bcc      	ldr	r3, [pc, #816]	; (8009c00 <UART_SetConfig+0x69c>)
 80098d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098d6:	2b28      	cmp	r3, #40	; 0x28
 80098d8:	d86c      	bhi.n	80099b4 <UART_SetConfig+0x450>
 80098da:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <UART_SetConfig+0x37c>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	08009985 	.word	0x08009985
 80098e4:	080099b5 	.word	0x080099b5
 80098e8:	080099b5 	.word	0x080099b5
 80098ec:	080099b5 	.word	0x080099b5
 80098f0:	080099b5 	.word	0x080099b5
 80098f4:	080099b5 	.word	0x080099b5
 80098f8:	080099b5 	.word	0x080099b5
 80098fc:	080099b5 	.word	0x080099b5
 8009900:	0800998d 	.word	0x0800998d
 8009904:	080099b5 	.word	0x080099b5
 8009908:	080099b5 	.word	0x080099b5
 800990c:	080099b5 	.word	0x080099b5
 8009910:	080099b5 	.word	0x080099b5
 8009914:	080099b5 	.word	0x080099b5
 8009918:	080099b5 	.word	0x080099b5
 800991c:	080099b5 	.word	0x080099b5
 8009920:	08009995 	.word	0x08009995
 8009924:	080099b5 	.word	0x080099b5
 8009928:	080099b5 	.word	0x080099b5
 800992c:	080099b5 	.word	0x080099b5
 8009930:	080099b5 	.word	0x080099b5
 8009934:	080099b5 	.word	0x080099b5
 8009938:	080099b5 	.word	0x080099b5
 800993c:	080099b5 	.word	0x080099b5
 8009940:	0800999d 	.word	0x0800999d
 8009944:	080099b5 	.word	0x080099b5
 8009948:	080099b5 	.word	0x080099b5
 800994c:	080099b5 	.word	0x080099b5
 8009950:	080099b5 	.word	0x080099b5
 8009954:	080099b5 	.word	0x080099b5
 8009958:	080099b5 	.word	0x080099b5
 800995c:	080099b5 	.word	0x080099b5
 8009960:	080099a5 	.word	0x080099a5
 8009964:	080099b5 	.word	0x080099b5
 8009968:	080099b5 	.word	0x080099b5
 800996c:	080099b5 	.word	0x080099b5
 8009970:	080099b5 	.word	0x080099b5
 8009974:	080099b5 	.word	0x080099b5
 8009978:	080099b5 	.word	0x080099b5
 800997c:	080099b5 	.word	0x080099b5
 8009980:	080099ad 	.word	0x080099ad
 8009984:	2301      	movs	r3, #1
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e0bc      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800998c:	2304      	movs	r3, #4
 800998e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009992:	e0b8      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009994:	2308      	movs	r3, #8
 8009996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999a:	e0b4      	b.n	8009b06 <UART_SetConfig+0x5a2>
 800999c:	2310      	movs	r3, #16
 800999e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a2:	e0b0      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80099a4:	2320      	movs	r3, #32
 80099a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099aa:	e0ac      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80099ac:	2340      	movs	r3, #64	; 0x40
 80099ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b2:	e0a8      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80099b4:	2380      	movs	r3, #128	; 0x80
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e0a4      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a90      	ldr	r2, [pc, #576]	; (8009c04 <UART_SetConfig+0x6a0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d130      	bne.n	8009a28 <UART_SetConfig+0x4c4>
 80099c6:	4b8e      	ldr	r3, [pc, #568]	; (8009c00 <UART_SetConfig+0x69c>)
 80099c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ca:	f003 0307 	and.w	r3, r3, #7
 80099ce:	2b05      	cmp	r3, #5
 80099d0:	d826      	bhi.n	8009a20 <UART_SetConfig+0x4bc>
 80099d2:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <UART_SetConfig+0x474>)
 80099d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d8:	080099f1 	.word	0x080099f1
 80099dc:	080099f9 	.word	0x080099f9
 80099e0:	08009a01 	.word	0x08009a01
 80099e4:	08009a09 	.word	0x08009a09
 80099e8:	08009a11 	.word	0x08009a11
 80099ec:	08009a19 	.word	0x08009a19
 80099f0:	2300      	movs	r3, #0
 80099f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f6:	e086      	b.n	8009b06 <UART_SetConfig+0x5a2>
 80099f8:	2304      	movs	r3, #4
 80099fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fe:	e082      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a00:	2308      	movs	r3, #8
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e07e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a08:	2310      	movs	r3, #16
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	e07a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a10:	2320      	movs	r3, #32
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e076      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a18:	2340      	movs	r3, #64	; 0x40
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1e:	e072      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	e06e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a76      	ldr	r2, [pc, #472]	; (8009c08 <UART_SetConfig+0x6a4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d130      	bne.n	8009a94 <UART_SetConfig+0x530>
 8009a32:	4b73      	ldr	r3, [pc, #460]	; (8009c00 <UART_SetConfig+0x69c>)
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d826      	bhi.n	8009a8c <UART_SetConfig+0x528>
 8009a3e:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <UART_SetConfig+0x4e0>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009a5d 	.word	0x08009a5d
 8009a48:	08009a65 	.word	0x08009a65
 8009a4c:	08009a6d 	.word	0x08009a6d
 8009a50:	08009a75 	.word	0x08009a75
 8009a54:	08009a7d 	.word	0x08009a7d
 8009a58:	08009a85 	.word	0x08009a85
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e050      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a64:	2304      	movs	r3, #4
 8009a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6a:	e04c      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a72:	e048      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a74:	2310      	movs	r3, #16
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7a:	e044      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e040      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a84:	2340      	movs	r3, #64	; 0x40
 8009a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8a:	e03c      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a8c:	2380      	movs	r3, #128	; 0x80
 8009a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a92:	e038      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a5c      	ldr	r2, [pc, #368]	; (8009c0c <UART_SetConfig+0x6a8>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d130      	bne.n	8009b00 <UART_SetConfig+0x59c>
 8009a9e:	4b58      	ldr	r3, [pc, #352]	; (8009c00 <UART_SetConfig+0x69c>)
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d826      	bhi.n	8009af8 <UART_SetConfig+0x594>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <UART_SetConfig+0x54c>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009ad1 	.word	0x08009ad1
 8009ab8:	08009ad9 	.word	0x08009ad9
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	2302      	movs	r3, #2
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e01a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e016      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e012      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e00e      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e00a      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e006      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009af8:	2380      	movs	r3, #128	; 0x80
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e002      	b.n	8009b06 <UART_SetConfig+0x5a2>
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a40      	ldr	r2, [pc, #256]	; (8009c0c <UART_SetConfig+0x6a8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	f040 80ef 	bne.w	8009cf0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	dc46      	bgt.n	8009ba8 <UART_SetConfig+0x644>
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	f2c0 8081 	blt.w	8009c22 <UART_SetConfig+0x6be>
 8009b20:	3b02      	subs	r3, #2
 8009b22:	2b1e      	cmp	r3, #30
 8009b24:	d87d      	bhi.n	8009c22 <UART_SetConfig+0x6be>
 8009b26:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <UART_SetConfig+0x5c8>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009baf 	.word	0x08009baf
 8009b30:	08009c23 	.word	0x08009c23
 8009b34:	08009bb7 	.word	0x08009bb7
 8009b38:	08009c23 	.word	0x08009c23
 8009b3c:	08009c23 	.word	0x08009c23
 8009b40:	08009c23 	.word	0x08009c23
 8009b44:	08009bc7 	.word	0x08009bc7
 8009b48:	08009c23 	.word	0x08009c23
 8009b4c:	08009c23 	.word	0x08009c23
 8009b50:	08009c23 	.word	0x08009c23
 8009b54:	08009c23 	.word	0x08009c23
 8009b58:	08009c23 	.word	0x08009c23
 8009b5c:	08009c23 	.word	0x08009c23
 8009b60:	08009c23 	.word	0x08009c23
 8009b64:	08009bd7 	.word	0x08009bd7
 8009b68:	08009c23 	.word	0x08009c23
 8009b6c:	08009c23 	.word	0x08009c23
 8009b70:	08009c23 	.word	0x08009c23
 8009b74:	08009c23 	.word	0x08009c23
 8009b78:	08009c23 	.word	0x08009c23
 8009b7c:	08009c23 	.word	0x08009c23
 8009b80:	08009c23 	.word	0x08009c23
 8009b84:	08009c23 	.word	0x08009c23
 8009b88:	08009c23 	.word	0x08009c23
 8009b8c:	08009c23 	.word	0x08009c23
 8009b90:	08009c23 	.word	0x08009c23
 8009b94:	08009c23 	.word	0x08009c23
 8009b98:	08009c23 	.word	0x08009c23
 8009b9c:	08009c23 	.word	0x08009c23
 8009ba0:	08009c23 	.word	0x08009c23
 8009ba4:	08009c15 	.word	0x08009c15
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	d036      	beq.n	8009c1a <UART_SetConfig+0x6b6>
 8009bac:	e039      	b.n	8009c22 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bae:	f7fd fa71 	bl	8007094 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bb4:	e03b      	b.n	8009c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bb6:	f107 0314 	add.w	r3, r7, #20
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fd fa80 	bl	80070c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bc4:	e033      	b.n	8009c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fd fbcc 	bl	8007368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bd4:	e02b      	b.n	8009c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <UART_SetConfig+0x69c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009be2:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <UART_SetConfig+0x69c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	08db      	lsrs	r3, r3, #3
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <UART_SetConfig+0x6ac>)
 8009bee:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bf4:	e01b      	b.n	8009c2e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <UART_SetConfig+0x6ac>)
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bfa:	e018      	b.n	8009c2e <UART_SetConfig+0x6ca>
 8009bfc:	40011400 	.word	0x40011400
 8009c00:	58024400 	.word	0x58024400
 8009c04:	40007800 	.word	0x40007800
 8009c08:	40007c00 	.word	0x40007c00
 8009c0c:	58000c00 	.word	0x58000c00
 8009c10:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c14:	4bc4      	ldr	r3, [pc, #784]	; (8009f28 <UART_SetConfig+0x9c4>)
 8009c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c18:	e009      	b.n	8009c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c20:	e005      	b.n	8009c2e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 81da 	beq.w	8009fea <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	4abc      	ldr	r2, [pc, #752]	; (8009f2c <UART_SetConfig+0x9c8>)
 8009c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c40:	461a      	mov	r2, r3
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c48:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	4413      	add	r3, r2
 8009c54:	6a3a      	ldr	r2, [r7, #32]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d305      	bcc.n	8009c66 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c60:	6a3a      	ldr	r2, [r7, #32]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d903      	bls.n	8009c6e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c6c:	e1bd      	b.n	8009fea <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	4618      	mov	r0, r3
 8009c72:	f04f 0100 	mov.w	r1, #0
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	4aac      	ldr	r2, [pc, #688]	; (8009f2c <UART_SetConfig+0x9c8>)
 8009c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	f04f 0300 	mov.w	r3, #0
 8009c86:	f7f6 fb7b 	bl	8000380 <__aeabi_uldivmod>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4619      	mov	r1, r3
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	020b      	lsls	r3, r1, #8
 8009c9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ca0:	0202      	lsls	r2, r0, #8
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	6849      	ldr	r1, [r1, #4]
 8009ca6:	0849      	lsrs	r1, r1, #1
 8009ca8:	4608      	mov	r0, r1
 8009caa:	f04f 0100 	mov.w	r1, #0
 8009cae:	1814      	adds	r4, r2, r0
 8009cb0:	eb43 0501 	adc.w	r5, r3, r1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f04f 0300 	mov.w	r3, #0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7f6 fb5d 	bl	8000380 <__aeabi_uldivmod>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4613      	mov	r3, r2
 8009ccc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cd4:	d308      	bcc.n	8009ce8 <UART_SetConfig+0x784>
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cdc:	d204      	bcs.n	8009ce8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce4:	60da      	str	r2, [r3, #12]
 8009ce6:	e180      	b.n	8009fea <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cee:	e17c      	b.n	8009fea <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cf8:	f040 80bf 	bne.w	8009e7a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	dc49      	bgt.n	8009d98 <UART_SetConfig+0x834>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	db7c      	blt.n	8009e02 <UART_SetConfig+0x89e>
 8009d08:	2b20      	cmp	r3, #32
 8009d0a:	d87a      	bhi.n	8009e02 <UART_SetConfig+0x89e>
 8009d0c:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0x7b0>)
 8009d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d12:	bf00      	nop
 8009d14:	08009d9f 	.word	0x08009d9f
 8009d18:	08009da7 	.word	0x08009da7
 8009d1c:	08009e03 	.word	0x08009e03
 8009d20:	08009e03 	.word	0x08009e03
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009e03 	.word	0x08009e03
 8009d2c:	08009e03 	.word	0x08009e03
 8009d30:	08009e03 	.word	0x08009e03
 8009d34:	08009dbf 	.word	0x08009dbf
 8009d38:	08009e03 	.word	0x08009e03
 8009d3c:	08009e03 	.word	0x08009e03
 8009d40:	08009e03 	.word	0x08009e03
 8009d44:	08009e03 	.word	0x08009e03
 8009d48:	08009e03 	.word	0x08009e03
 8009d4c:	08009e03 	.word	0x08009e03
 8009d50:	08009e03 	.word	0x08009e03
 8009d54:	08009dcf 	.word	0x08009dcf
 8009d58:	08009e03 	.word	0x08009e03
 8009d5c:	08009e03 	.word	0x08009e03
 8009d60:	08009e03 	.word	0x08009e03
 8009d64:	08009e03 	.word	0x08009e03
 8009d68:	08009e03 	.word	0x08009e03
 8009d6c:	08009e03 	.word	0x08009e03
 8009d70:	08009e03 	.word	0x08009e03
 8009d74:	08009e03 	.word	0x08009e03
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e03 	.word	0x08009e03
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e03 	.word	0x08009e03
 8009d88:	08009e03 	.word	0x08009e03
 8009d8c:	08009e03 	.word	0x08009e03
 8009d90:	08009e03 	.word	0x08009e03
 8009d94:	08009df5 	.word	0x08009df5
 8009d98:	2b40      	cmp	r3, #64	; 0x40
 8009d9a:	d02e      	beq.n	8009dfa <UART_SetConfig+0x896>
 8009d9c:	e031      	b.n	8009e02 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9e:	f7fc fa0d 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 8009da2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009da4:	e033      	b.n	8009e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da6:	f7fc fa1f 	bl	80061e8 <HAL_RCC_GetPCLK2Freq>
 8009daa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009dac:	e02f      	b.n	8009e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0314 	add.w	r3, r7, #20
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd f984 	bl	80070c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dbc:	e027      	b.n	8009e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fd fad0 	bl	8007368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dcc:	e01f      	b.n	8009e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dce:	4b58      	ldr	r3, [pc, #352]	; (8009f30 <UART_SetConfig+0x9cc>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dda:	4b55      	ldr	r3, [pc, #340]	; (8009f30 <UART_SetConfig+0x9cc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	4a53      	ldr	r2, [pc, #332]	; (8009f34 <UART_SetConfig+0x9d0>)
 8009de6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dec:	e00f      	b.n	8009e0e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009dee:	4b51      	ldr	r3, [pc, #324]	; (8009f34 <UART_SetConfig+0x9d0>)
 8009df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df2:	e00c      	b.n	8009e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df4:	4b4c      	ldr	r3, [pc, #304]	; (8009f28 <UART_SetConfig+0x9c4>)
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009df8:	e009      	b.n	8009e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e00:	e005      	b.n	8009e0e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80ea 	beq.w	8009fea <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	4a44      	ldr	r2, [pc, #272]	; (8009f2c <UART_SetConfig+0x9c8>)
 8009e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e28:	005a      	lsls	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	085b      	lsrs	r3, r3, #1
 8009e30:	441a      	add	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	2b0f      	cmp	r3, #15
 8009e42:	d916      	bls.n	8009e72 <UART_SetConfig+0x90e>
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4a:	d212      	bcs.n	8009e72 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f023 030f 	bic.w	r3, r3, #15
 8009e54:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	085b      	lsrs	r3, r3, #1
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e64:	4313      	orrs	r3, r2
 8009e66:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	e0bb      	b.n	8009fea <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e78:	e0b7      	b.n	8009fea <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	dc4a      	bgt.n	8009f18 <UART_SetConfig+0x9b4>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f2c0 8086 	blt.w	8009f94 <UART_SetConfig+0xa30>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	f200 8083 	bhi.w	8009f94 <UART_SetConfig+0xa30>
 8009e8e:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0x930>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009f1f 	.word	0x08009f1f
 8009e98:	08009f39 	.word	0x08009f39
 8009e9c:	08009f95 	.word	0x08009f95
 8009ea0:	08009f95 	.word	0x08009f95
 8009ea4:	08009f41 	.word	0x08009f41
 8009ea8:	08009f95 	.word	0x08009f95
 8009eac:	08009f95 	.word	0x08009f95
 8009eb0:	08009f95 	.word	0x08009f95
 8009eb4:	08009f51 	.word	0x08009f51
 8009eb8:	08009f95 	.word	0x08009f95
 8009ebc:	08009f95 	.word	0x08009f95
 8009ec0:	08009f95 	.word	0x08009f95
 8009ec4:	08009f95 	.word	0x08009f95
 8009ec8:	08009f95 	.word	0x08009f95
 8009ecc:	08009f95 	.word	0x08009f95
 8009ed0:	08009f95 	.word	0x08009f95
 8009ed4:	08009f61 	.word	0x08009f61
 8009ed8:	08009f95 	.word	0x08009f95
 8009edc:	08009f95 	.word	0x08009f95
 8009ee0:	08009f95 	.word	0x08009f95
 8009ee4:	08009f95 	.word	0x08009f95
 8009ee8:	08009f95 	.word	0x08009f95
 8009eec:	08009f95 	.word	0x08009f95
 8009ef0:	08009f95 	.word	0x08009f95
 8009ef4:	08009f95 	.word	0x08009f95
 8009ef8:	08009f95 	.word	0x08009f95
 8009efc:	08009f95 	.word	0x08009f95
 8009f00:	08009f95 	.word	0x08009f95
 8009f04:	08009f95 	.word	0x08009f95
 8009f08:	08009f95 	.word	0x08009f95
 8009f0c:	08009f95 	.word	0x08009f95
 8009f10:	08009f95 	.word	0x08009f95
 8009f14:	08009f87 	.word	0x08009f87
 8009f18:	2b40      	cmp	r3, #64	; 0x40
 8009f1a:	d037      	beq.n	8009f8c <UART_SetConfig+0xa28>
 8009f1c:	e03a      	b.n	8009f94 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f1e:	f7fc f94d 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 8009f22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f24:	e03c      	b.n	8009fa0 <UART_SetConfig+0xa3c>
 8009f26:	bf00      	nop
 8009f28:	003d0900 	.word	0x003d0900
 8009f2c:	0800bd64 	.word	0x0800bd64
 8009f30:	58024400 	.word	0x58024400
 8009f34:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f38:	f7fc f956 	bl	80061e8 <HAL_RCC_GetPCLK2Freq>
 8009f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f3e:	e02f      	b.n	8009fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fd f8bb 	bl	80070c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f4e:	e027      	b.n	8009fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fd fa07 	bl	8007368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f5e:	e01f      	b.n	8009fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f60:	4b2c      	ldr	r3, [pc, #176]	; (800a014 <UART_SetConfig+0xab0>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f6c:	4b29      	ldr	r3, [pc, #164]	; (800a014 <UART_SetConfig+0xab0>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	08db      	lsrs	r3, r3, #3
 8009f72:	f003 0303 	and.w	r3, r3, #3
 8009f76:	4a28      	ldr	r2, [pc, #160]	; (800a018 <UART_SetConfig+0xab4>)
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f7e:	e00f      	b.n	8009fa0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009f80:	4b25      	ldr	r3, [pc, #148]	; (800a018 <UART_SetConfig+0xab4>)
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f84:	e00c      	b.n	8009fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f86:	4b25      	ldr	r3, [pc, #148]	; (800a01c <UART_SetConfig+0xab8>)
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f8a:	e009      	b.n	8009fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f92:	e005      	b.n	8009fa0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d021      	beq.n	8009fea <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	4a1d      	ldr	r2, [pc, #116]	; (800a020 <UART_SetConfig+0xabc>)
 8009fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	441a      	add	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	2b0f      	cmp	r3, #15
 8009fd0:	d908      	bls.n	8009fe4 <UART_SetConfig+0xa80>
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd8:	d204      	bcs.n	8009fe4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe0:	60da      	str	r2, [r3, #12]
 8009fe2:	e002      	b.n	8009fea <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a006:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3738      	adds	r7, #56	; 0x38
 800a00e:	46bd      	mov	sp, r7
 800a010:	bdb0      	pop	{r4, r5, r7, pc}
 800a012:	bf00      	nop
 800a014:	58024400 	.word	0x58024400
 800a018:	03d09000 	.word	0x03d09000
 800a01c:	003d0900 	.word	0x003d0900
 800a020:	0800bd64 	.word	0x0800bd64

0800a024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	f003 0308 	and.w	r3, r3, #8
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d01a      	beq.n	800a13a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a122:	d10a      	bne.n	800a13a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	605a      	str	r2, [r3, #4]
  }
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a178:	f7f8 fa5c 	bl	8002634 <HAL_GetTick>
 800a17c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0308 	and.w	r3, r3, #8
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d10e      	bne.n	800a1aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a18c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f82f 	bl	800a1fe <UART_WaitOnFlagUntilTimeout>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e025      	b.n	800a1f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d10e      	bne.n	800a1d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f819 	bl	800a1fe <UART_WaitOnFlagUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e00f      	b.n	800a1f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	603b      	str	r3, [r7, #0]
 800a20a:	4613      	mov	r3, r2
 800a20c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20e:	e062      	b.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a216:	d05e      	beq.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a218:	f7f8 fa0c 	bl	8002634 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	429a      	cmp	r2, r3
 800a226:	d302      	bcc.n	800a22e <UART_WaitOnFlagUntilTimeout+0x30>
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d11d      	bne.n	800a26a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a23c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 0201 	bic.w	r2, r2, #1
 800a24c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2220      	movs	r2, #32
 800a25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e045      	b.n	800a2f6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b00      	cmp	r3, #0
 800a276:	d02e      	beq.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a286:	d126      	bne.n	800a2d6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0201 	bic.w	r2, r2, #1
 800a2b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e00f      	b.n	800a2f6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	69da      	ldr	r2, [r3, #28]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	bf0c      	ite	eq
 800a2e6:	2301      	moveq	r3, #1
 800a2e8:	2300      	movne	r3, #0
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d08d      	beq.n	800a210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4613      	mov	r3, r2
 800a30c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	88fa      	ldrh	r2, [r7, #6]
 800a320:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a332:	d10e      	bne.n	800a352 <UART_Start_Receive_IT+0x52>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d105      	bne.n	800a348 <UART_Start_Receive_IT+0x48>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a342:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a346:	e02d      	b.n	800a3a4 <UART_Start_Receive_IT+0xa4>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	22ff      	movs	r2, #255	; 0xff
 800a34c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a350:	e028      	b.n	800a3a4 <UART_Start_Receive_IT+0xa4>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10d      	bne.n	800a376 <UART_Start_Receive_IT+0x76>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d104      	bne.n	800a36c <UART_Start_Receive_IT+0x6c>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	22ff      	movs	r2, #255	; 0xff
 800a366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a36a:	e01b      	b.n	800a3a4 <UART_Start_Receive_IT+0xa4>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	227f      	movs	r2, #127	; 0x7f
 800a370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a374:	e016      	b.n	800a3a4 <UART_Start_Receive_IT+0xa4>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a37e:	d10d      	bne.n	800a39c <UART_Start_Receive_IT+0x9c>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <UART_Start_Receive_IT+0x92>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	227f      	movs	r2, #127	; 0x7f
 800a38c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a390:	e008      	b.n	800a3a4 <UART_Start_Receive_IT+0xa4>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	223f      	movs	r2, #63	; 0x3f
 800a396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a39a:	e003      	b.n	800a3a4 <UART_Start_Receive_IT+0xa4>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2222      	movs	r2, #34	; 0x22
 800a3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0201 	orr.w	r2, r2, #1
 800a3c2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3cc:	d12a      	bne.n	800a424 <UART_Start_Receive_IT+0x124>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3d4:	88fa      	ldrh	r2, [r7, #6]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d324      	bcc.n	800a424 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e2:	d107      	bne.n	800a3f4 <UART_Start_Receive_IT+0xf4>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d103      	bne.n	800a3f4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a1f      	ldr	r2, [pc, #124]	; (800a46c <UART_Start_Receive_IT+0x16c>)
 800a3f0:	671a      	str	r2, [r3, #112]	; 0x70
 800a3f2:	e002      	b.n	800a3fa <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4a1e      	ldr	r2, [pc, #120]	; (800a470 <UART_Start_Receive_IT+0x170>)
 800a3f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a410:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a420:	609a      	str	r2, [r3, #8]
 800a422:	e01b      	b.n	800a45c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42c:	d107      	bne.n	800a43e <UART_Start_Receive_IT+0x13e>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d103      	bne.n	800a43e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a0e      	ldr	r2, [pc, #56]	; (800a474 <UART_Start_Receive_IT+0x174>)
 800a43a:	671a      	str	r2, [r3, #112]	; 0x70
 800a43c:	e002      	b.n	800a444 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a0d      	ldr	r2, [pc, #52]	; (800a478 <UART_Start_Receive_IT+0x178>)
 800a442:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a45a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	0800a8f5 	.word	0x0800a8f5
 800a470:	0800a6f1 	.word	0x0800a6f1
 800a474:	0800a619 	.word	0x0800a619
 800a478:	0800a541 	.word	0x0800a541

0800a47c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a492:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6899      	ldr	r1, [r3, #8]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <UART_EndRxTransfer+0x60>)
 800a4a0:	400b      	ands	r3, r1
 800a4a2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d107      	bne.n	800a4bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0210 	bic.w	r2, r2, #16
 800a4ba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	effffffe 	.word	0xeffffffe

0800a4e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff f81a 	bl	8009538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a522:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2220      	movs	r2, #32
 800a528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f7 f9e6 	bl	8001904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a54e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a556:	2b22      	cmp	r3, #34	; 0x22
 800a558:	d152      	bne.n	800a600 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a562:	89bb      	ldrh	r3, [r7, #12]
 800a564:	b2d9      	uxtb	r1, r3
 800a566:	89fb      	ldrh	r3, [r7, #14]
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56e:	400a      	ands	r2, r1
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a584:	b29b      	uxth	r3, r3
 800a586:	3b01      	subs	r3, #1
 800a588:	b29a      	uxth	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a596:	b29b      	uxth	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d139      	bne.n	800a610 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a5aa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689a      	ldr	r2, [r3, #8]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0201 	bic.w	r2, r2, #1
 800a5ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d10f      	bne.n	800a5f2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0210 	bic.w	r2, r2, #16
 800a5e0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7fe ffae 	bl	800954c <HAL_UARTEx_RxEventCallback>
 800a5f0:	e002      	b.n	800a5f8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7f7 f86a 	bl	80016cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5fe:	e007      	b.n	800a610 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699a      	ldr	r2, [r3, #24]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0208 	orr.w	r2, r2, #8
 800a60e:	619a      	str	r2, [r3, #24]
}
 800a610:	bf00      	nop
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a626:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62e:	2b22      	cmp	r3, #34	; 0x22
 800a630:	d152      	bne.n	800a6d8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a638:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a63e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a640:	89ba      	ldrh	r2, [r7, #12]
 800a642:	89fb      	ldrh	r3, [r7, #14]
 800a644:	4013      	ands	r3, r2
 800a646:	b29a      	uxth	r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a650:	1c9a      	adds	r2, r3, #2
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	b29a      	uxth	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a66e:	b29b      	uxth	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d139      	bne.n	800a6e8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a682:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0201 	bic.w	r2, r2, #1
 800a692:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d10f      	bne.n	800a6ca <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 0210 	bic.w	r2, r2, #16
 800a6b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7fe ff42 	bl	800954c <HAL_UARTEx_RxEventCallback>
 800a6c8:	e002      	b.n	800a6d0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7f6 fffe 	bl	80016cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6d6:	e007      	b.n	800a6e8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699a      	ldr	r2, [r3, #24]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0208 	orr.w	r2, r2, #8
 800a6e6:	619a      	str	r2, [r3, #24]
}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6fe:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71e:	2b22      	cmp	r3, #34	; 0x22
 800a720:	f040 80d8 	bne.w	800a8d4 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a72a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a72c:	e0a8      	b.n	800a880 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a736:	89bb      	ldrh	r3, [r7, #12]
 800a738:	b2d9      	uxtb	r1, r3
 800a73a:	8b7b      	ldrh	r3, [r7, #26]
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a742:	400a      	ands	r2, r1
 800a744:	b2d2      	uxtb	r2, r2
 800a746:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	f003 0307 	and.w	r3, r3, #7
 800a772:	2b00      	cmp	r3, #0
 800a774:	d04d      	beq.n	800a812 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d010      	beq.n	800a7a2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2201      	movs	r2, #1
 800a790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a798:	f043 0201 	orr.w	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d010      	beq.n	800a7ce <UART_RxISR_8BIT_FIFOEN+0xde>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00b      	beq.n	800a7ce <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7c4:	f043 0204 	orr.w	r2, r3, #4
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <UART_RxISR_8BIT_FIFOEN+0x10a>
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00b      	beq.n	800a7fa <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7f0:	f043 0202 	orr.w	r2, r3, #2
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7fe fe97 	bl	8009538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d130      	bne.n	800a880 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a82c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6899      	ldr	r1, [r3, #8]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a83a:	400b      	ands	r3, r1
 800a83c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a850:	2b01      	cmp	r3, #1
 800a852:	d10f      	bne.n	800a874 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0210 	bic.w	r2, r2, #16
 800a862:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7fe fe6d 	bl	800954c <HAL_UARTEx_RxEventCallback>
 800a872:	e002      	b.n	800a87a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7f6 ff29 	bl	80016cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a880:	89fb      	ldrh	r3, [r7, #14]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f003 0320 	and.w	r3, r3, #32
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f47f af4e 	bne.w	800a72e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a898:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a89a:	897b      	ldrh	r3, [r7, #10]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d021      	beq.n	800a8e4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8a6:	897a      	ldrh	r2, [r7, #10]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d21b      	bcs.n	800a8e4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a8ba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a0c      	ldr	r2, [pc, #48]	; (800a8f0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a8c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f042 0220 	orr.w	r2, r2, #32
 800a8d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8d2:	e007      	b.n	800a8e4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	699a      	ldr	r2, [r3, #24]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0208 	orr.w	r2, r2, #8
 800a8e2:	619a      	str	r2, [r3, #24]
}
 800a8e4:	bf00      	nop
 800a8e6:	3720      	adds	r7, #32
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	effffffe 	.word	0xeffffffe
 800a8f0:	0800a541 	.word	0x0800a541

0800a8f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08a      	sub	sp, #40	; 0x28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a902:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a922:	2b22      	cmp	r3, #34	; 0x22
 800a924:	f040 80d8 	bne.w	800aad8 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a92e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a930:	e0a8      	b.n	800aa84 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a940:	8aba      	ldrh	r2, [r7, #20]
 800a942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a944:	4013      	ands	r3, r2
 800a946:	b29a      	uxth	r2, r3
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a950:	1c9a      	adds	r2, r3, #2
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	b29a      	uxth	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	69db      	ldr	r3, [r3, #28]
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	2b00      	cmp	r3, #0
 800a978:	d04d      	beq.n	800aa16 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d010      	beq.n	800a9a6 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00b      	beq.n	800a9a6 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2201      	movs	r2, #1
 800a994:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a99c:	f043 0201 	orr.w	r2, r3, #1
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d010      	beq.n	800a9d2 <UART_RxISR_16BIT_FIFOEN+0xde>
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c8:	f043 0204 	orr.w	r2, r3, #4
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d010      	beq.n	800a9fe <UART_RxISR_16BIT_FIFOEN+0x10a>
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00b      	beq.n	800a9fe <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9f4:	f043 0202 	orr.w	r2, r3, #2
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d006      	beq.n	800aa16 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7fe fd95 	bl	8009538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d130      	bne.n	800aa84 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa30:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6899      	ldr	r1, [r3, #8]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	4b2c      	ldr	r3, [pc, #176]	; (800aaf0 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800aa3e:	400b      	ands	r3, r1
 800aa40:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d10f      	bne.n	800aa78 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0210 	bic.w	r2, r2, #16
 800aa66:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7fe fd6b 	bl	800954c <HAL_UARTEx_RxEventCallback>
 800aa76:	e002      	b.n	800aa7e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7f6 fe27 	bl	80016cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa84:	8afb      	ldrh	r3, [r7, #22]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d005      	beq.n	800aa96 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f47f af4e 	bne.w	800a932 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa9c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa9e:	89fb      	ldrh	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d021      	beq.n	800aae8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aaaa:	89fa      	ldrh	r2, [r7, #14]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d21b      	bcs.n	800aae8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689a      	ldr	r2, [r3, #8]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aabe:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a0c      	ldr	r2, [pc, #48]	; (800aaf4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800aac4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0220 	orr.w	r2, r2, #32
 800aad4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aad6:	e007      	b.n	800aae8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	699a      	ldr	r2, [r3, #24]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f042 0208 	orr.w	r2, r2, #8
 800aae6:	619a      	str	r2, [r3, #24]
}
 800aae8:	bf00      	nop
 800aaea:	3728      	adds	r7, #40	; 0x28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	effffffe 	.word	0xeffffffe
 800aaf4:	0800a619 	.word	0x0800a619

0800aaf8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e056      	b.n	800abbe <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d106      	bne.n	800ab28 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7f7 f950 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2224      	movs	r2, #36	; 0x24
 800ab2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f022 0201 	bic.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f7fe fd0f 	bl	8009564 <UART_SetConfig>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d101      	bne.n	800ab50 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e036      	b.n	800abbe <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f7ff fa63 	bl	800a024 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab6c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	055b      	lsls	r3, r3, #21
 800ab86:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	041b      	lsls	r3, r3, #16
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	4b0b      	ldr	r3, [pc, #44]	; (800abc8 <HAL_RS485Ex_Init+0xd0>)
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	6812      	ldr	r2, [r2, #0]
 800aba0:	6979      	ldr	r1, [r7, #20]
 800aba2:	430b      	orrs	r3, r1
 800aba4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0201 	orr.w	r2, r2, #1
 800abb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7ff fad6 	bl	800a168 <UART_CheckIdleState>
 800abbc:	4603      	mov	r3, r0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	fc00ffff 	.word	0xfc00ffff

0800abcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_UARTEx_DisableFifoMode+0x16>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e027      	b.n	800ac6e <HAL_UARTEx_DisableFifoMode+0x66>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2224      	movs	r2, #36	; 0x24
 800ac2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0201 	bic.w	r2, r2, #1
 800ac44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2220      	movs	r2, #32
 800ac60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
 800ac82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d101      	bne.n	800ac92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e02d      	b.n	800acee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2224      	movs	r2, #36	; 0x24
 800ac9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f022 0201 	bic.w	r2, r2, #1
 800acb8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	430a      	orrs	r2, r1
 800accc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f850 	bl	800ad74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2220      	movs	r2, #32
 800ace0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d101      	bne.n	800ad0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e02d      	b.n	800ad6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2224      	movs	r2, #36	; 0x24
 800ad1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f812 	bl	800ad74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d108      	bne.n	800ad96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad94:	e031      	b.n	800adfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad96:	2310      	movs	r3, #16
 800ad98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad9a:	2310      	movs	r3, #16
 800ad9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	0e5b      	lsrs	r3, r3, #25
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	0f5b      	lsrs	r3, r3, #29
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adbe:	7bbb      	ldrb	r3, [r7, #14]
 800adc0:	7b3a      	ldrb	r2, [r7, #12]
 800adc2:	4911      	ldr	r1, [pc, #68]	; (800ae08 <UARTEx_SetNbDataToProcess+0x94>)
 800adc4:	5c8a      	ldrb	r2, [r1, r2]
 800adc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adca:	7b3a      	ldrb	r2, [r7, #12]
 800adcc:	490f      	ldr	r1, [pc, #60]	; (800ae0c <UARTEx_SetNbDataToProcess+0x98>)
 800adce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800add0:	fb93 f3f2 	sdiv	r3, r3, r2
 800add4:	b29a      	uxth	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	7b7a      	ldrb	r2, [r7, #13]
 800ade0:	4909      	ldr	r1, [pc, #36]	; (800ae08 <UARTEx_SetNbDataToProcess+0x94>)
 800ade2:	5c8a      	ldrb	r2, [r1, r2]
 800ade4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ade8:	7b7a      	ldrb	r2, [r7, #13]
 800adea:	4908      	ldr	r1, [pc, #32]	; (800ae0c <UARTEx_SetNbDataToProcess+0x98>)
 800adec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adee:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800adfa:	bf00      	nop
 800adfc:	3714      	adds	r7, #20
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	0800bd7c 	.word	0x0800bd7c
 800ae0c:	0800bd84 	.word	0x0800bd84

0800ae10 <__errno>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	; (800ae18 <__errno+0x8>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20000010 	.word	0x20000010

0800ae1c <__libc_init_array>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4d0d      	ldr	r5, [pc, #52]	; (800ae54 <__libc_init_array+0x38>)
 800ae20:	4c0d      	ldr	r4, [pc, #52]	; (800ae58 <__libc_init_array+0x3c>)
 800ae22:	1b64      	subs	r4, r4, r5
 800ae24:	10a4      	asrs	r4, r4, #2
 800ae26:	2600      	movs	r6, #0
 800ae28:	42a6      	cmp	r6, r4
 800ae2a:	d109      	bne.n	800ae40 <__libc_init_array+0x24>
 800ae2c:	4d0b      	ldr	r5, [pc, #44]	; (800ae5c <__libc_init_array+0x40>)
 800ae2e:	4c0c      	ldr	r4, [pc, #48]	; (800ae60 <__libc_init_array+0x44>)
 800ae30:	f000 ff76 	bl	800bd20 <_init>
 800ae34:	1b64      	subs	r4, r4, r5
 800ae36:	10a4      	asrs	r4, r4, #2
 800ae38:	2600      	movs	r6, #0
 800ae3a:	42a6      	cmp	r6, r4
 800ae3c:	d105      	bne.n	800ae4a <__libc_init_array+0x2e>
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae44:	4798      	blx	r3
 800ae46:	3601      	adds	r6, #1
 800ae48:	e7ee      	b.n	800ae28 <__libc_init_array+0xc>
 800ae4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae4e:	4798      	blx	r3
 800ae50:	3601      	adds	r6, #1
 800ae52:	e7f2      	b.n	800ae3a <__libc_init_array+0x1e>
 800ae54:	0800be2c 	.word	0x0800be2c
 800ae58:	0800be2c 	.word	0x0800be2c
 800ae5c:	0800be2c 	.word	0x0800be2c
 800ae60:	0800be30 	.word	0x0800be30

0800ae64 <memset>:
 800ae64:	4402      	add	r2, r0
 800ae66:	4603      	mov	r3, r0
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d100      	bne.n	800ae6e <memset+0xa>
 800ae6c:	4770      	bx	lr
 800ae6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae72:	e7f9      	b.n	800ae68 <memset+0x4>

0800ae74 <iprintf>:
 800ae74:	b40f      	push	{r0, r1, r2, r3}
 800ae76:	4b0a      	ldr	r3, [pc, #40]	; (800aea0 <iprintf+0x2c>)
 800ae78:	b513      	push	{r0, r1, r4, lr}
 800ae7a:	681c      	ldr	r4, [r3, #0]
 800ae7c:	b124      	cbz	r4, 800ae88 <iprintf+0x14>
 800ae7e:	69a3      	ldr	r3, [r4, #24]
 800ae80:	b913      	cbnz	r3, 800ae88 <iprintf+0x14>
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f866 	bl	800af54 <__sinit>
 800ae88:	ab05      	add	r3, sp, #20
 800ae8a:	9a04      	ldr	r2, [sp, #16]
 800ae8c:	68a1      	ldr	r1, [r4, #8]
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 f983 	bl	800b19c <_vfiprintf_r>
 800ae96:	b002      	add	sp, #8
 800ae98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae9c:	b004      	add	sp, #16
 800ae9e:	4770      	bx	lr
 800aea0:	20000010 	.word	0x20000010

0800aea4 <std>:
 800aea4:	2300      	movs	r3, #0
 800aea6:	b510      	push	{r4, lr}
 800aea8:	4604      	mov	r4, r0
 800aeaa:	e9c0 3300 	strd	r3, r3, [r0]
 800aeae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeb2:	6083      	str	r3, [r0, #8]
 800aeb4:	8181      	strh	r1, [r0, #12]
 800aeb6:	6643      	str	r3, [r0, #100]	; 0x64
 800aeb8:	81c2      	strh	r2, [r0, #14]
 800aeba:	6183      	str	r3, [r0, #24]
 800aebc:	4619      	mov	r1, r3
 800aebe:	2208      	movs	r2, #8
 800aec0:	305c      	adds	r0, #92	; 0x5c
 800aec2:	f7ff ffcf 	bl	800ae64 <memset>
 800aec6:	4b05      	ldr	r3, [pc, #20]	; (800aedc <std+0x38>)
 800aec8:	6263      	str	r3, [r4, #36]	; 0x24
 800aeca:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <std+0x3c>)
 800aecc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aece:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <std+0x40>)
 800aed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <std+0x44>)
 800aed4:	6224      	str	r4, [r4, #32]
 800aed6:	6323      	str	r3, [r4, #48]	; 0x30
 800aed8:	bd10      	pop	{r4, pc}
 800aeda:	bf00      	nop
 800aedc:	0800b745 	.word	0x0800b745
 800aee0:	0800b767 	.word	0x0800b767
 800aee4:	0800b79f 	.word	0x0800b79f
 800aee8:	0800b7c3 	.word	0x0800b7c3

0800aeec <_cleanup_r>:
 800aeec:	4901      	ldr	r1, [pc, #4]	; (800aef4 <_cleanup_r+0x8>)
 800aeee:	f000 b8af 	b.w	800b050 <_fwalk_reent>
 800aef2:	bf00      	nop
 800aef4:	0800ba9d 	.word	0x0800ba9d

0800aef8 <__sfmoreglue>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	1e4a      	subs	r2, r1, #1
 800aefc:	2568      	movs	r5, #104	; 0x68
 800aefe:	4355      	muls	r5, r2
 800af00:	460e      	mov	r6, r1
 800af02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af06:	f000 f8c5 	bl	800b094 <_malloc_r>
 800af0a:	4604      	mov	r4, r0
 800af0c:	b140      	cbz	r0, 800af20 <__sfmoreglue+0x28>
 800af0e:	2100      	movs	r1, #0
 800af10:	e9c0 1600 	strd	r1, r6, [r0]
 800af14:	300c      	adds	r0, #12
 800af16:	60a0      	str	r0, [r4, #8]
 800af18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af1c:	f7ff ffa2 	bl	800ae64 <memset>
 800af20:	4620      	mov	r0, r4
 800af22:	bd70      	pop	{r4, r5, r6, pc}

0800af24 <__sfp_lock_acquire>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__sfp_lock_acquire+0x8>)
 800af26:	f000 b8b3 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000938 	.word	0x20000938

0800af30 <__sfp_lock_release>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__sfp_lock_release+0x8>)
 800af32:	f000 b8ae 	b.w	800b092 <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	20000938 	.word	0x20000938

0800af3c <__sinit_lock_acquire>:
 800af3c:	4801      	ldr	r0, [pc, #4]	; (800af44 <__sinit_lock_acquire+0x8>)
 800af3e:	f000 b8a7 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800af42:	bf00      	nop
 800af44:	20000933 	.word	0x20000933

0800af48 <__sinit_lock_release>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__sinit_lock_release+0x8>)
 800af4a:	f000 b8a2 	b.w	800b092 <__retarget_lock_release_recursive>
 800af4e:	bf00      	nop
 800af50:	20000933 	.word	0x20000933

0800af54 <__sinit>:
 800af54:	b510      	push	{r4, lr}
 800af56:	4604      	mov	r4, r0
 800af58:	f7ff fff0 	bl	800af3c <__sinit_lock_acquire>
 800af5c:	69a3      	ldr	r3, [r4, #24]
 800af5e:	b11b      	cbz	r3, 800af68 <__sinit+0x14>
 800af60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af64:	f7ff bff0 	b.w	800af48 <__sinit_lock_release>
 800af68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af6c:	6523      	str	r3, [r4, #80]	; 0x50
 800af6e:	4b13      	ldr	r3, [pc, #76]	; (800afbc <__sinit+0x68>)
 800af70:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <__sinit+0x6c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	62a2      	str	r2, [r4, #40]	; 0x28
 800af76:	42a3      	cmp	r3, r4
 800af78:	bf04      	itt	eq
 800af7a:	2301      	moveq	r3, #1
 800af7c:	61a3      	streq	r3, [r4, #24]
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 f820 	bl	800afc4 <__sfp>
 800af84:	6060      	str	r0, [r4, #4]
 800af86:	4620      	mov	r0, r4
 800af88:	f000 f81c 	bl	800afc4 <__sfp>
 800af8c:	60a0      	str	r0, [r4, #8]
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 f818 	bl	800afc4 <__sfp>
 800af94:	2200      	movs	r2, #0
 800af96:	60e0      	str	r0, [r4, #12]
 800af98:	2104      	movs	r1, #4
 800af9a:	6860      	ldr	r0, [r4, #4]
 800af9c:	f7ff ff82 	bl	800aea4 <std>
 800afa0:	68a0      	ldr	r0, [r4, #8]
 800afa2:	2201      	movs	r2, #1
 800afa4:	2109      	movs	r1, #9
 800afa6:	f7ff ff7d 	bl	800aea4 <std>
 800afaa:	68e0      	ldr	r0, [r4, #12]
 800afac:	2202      	movs	r2, #2
 800afae:	2112      	movs	r1, #18
 800afb0:	f7ff ff78 	bl	800aea4 <std>
 800afb4:	2301      	movs	r3, #1
 800afb6:	61a3      	str	r3, [r4, #24]
 800afb8:	e7d2      	b.n	800af60 <__sinit+0xc>
 800afba:	bf00      	nop
 800afbc:	0800bd8c 	.word	0x0800bd8c
 800afc0:	0800aeed 	.word	0x0800aeed

0800afc4 <__sfp>:
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc6:	4607      	mov	r7, r0
 800afc8:	f7ff ffac 	bl	800af24 <__sfp_lock_acquire>
 800afcc:	4b1e      	ldr	r3, [pc, #120]	; (800b048 <__sfp+0x84>)
 800afce:	681e      	ldr	r6, [r3, #0]
 800afd0:	69b3      	ldr	r3, [r6, #24]
 800afd2:	b913      	cbnz	r3, 800afda <__sfp+0x16>
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7ff ffbd 	bl	800af54 <__sinit>
 800afda:	3648      	adds	r6, #72	; 0x48
 800afdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	d503      	bpl.n	800afec <__sfp+0x28>
 800afe4:	6833      	ldr	r3, [r6, #0]
 800afe6:	b30b      	cbz	r3, 800b02c <__sfp+0x68>
 800afe8:	6836      	ldr	r6, [r6, #0]
 800afea:	e7f7      	b.n	800afdc <__sfp+0x18>
 800afec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aff0:	b9d5      	cbnz	r5, 800b028 <__sfp+0x64>
 800aff2:	4b16      	ldr	r3, [pc, #88]	; (800b04c <__sfp+0x88>)
 800aff4:	60e3      	str	r3, [r4, #12]
 800aff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800affa:	6665      	str	r5, [r4, #100]	; 0x64
 800affc:	f000 f847 	bl	800b08e <__retarget_lock_init_recursive>
 800b000:	f7ff ff96 	bl	800af30 <__sfp_lock_release>
 800b004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b00c:	6025      	str	r5, [r4, #0]
 800b00e:	61a5      	str	r5, [r4, #24]
 800b010:	2208      	movs	r2, #8
 800b012:	4629      	mov	r1, r5
 800b014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b018:	f7ff ff24 	bl	800ae64 <memset>
 800b01c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b024:	4620      	mov	r0, r4
 800b026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b028:	3468      	adds	r4, #104	; 0x68
 800b02a:	e7d9      	b.n	800afe0 <__sfp+0x1c>
 800b02c:	2104      	movs	r1, #4
 800b02e:	4638      	mov	r0, r7
 800b030:	f7ff ff62 	bl	800aef8 <__sfmoreglue>
 800b034:	4604      	mov	r4, r0
 800b036:	6030      	str	r0, [r6, #0]
 800b038:	2800      	cmp	r0, #0
 800b03a:	d1d5      	bne.n	800afe8 <__sfp+0x24>
 800b03c:	f7ff ff78 	bl	800af30 <__sfp_lock_release>
 800b040:	230c      	movs	r3, #12
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	e7ee      	b.n	800b024 <__sfp+0x60>
 800b046:	bf00      	nop
 800b048:	0800bd8c 	.word	0x0800bd8c
 800b04c:	ffff0001 	.word	0xffff0001

0800b050 <_fwalk_reent>:
 800b050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b054:	4606      	mov	r6, r0
 800b056:	4688      	mov	r8, r1
 800b058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b05c:	2700      	movs	r7, #0
 800b05e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b062:	f1b9 0901 	subs.w	r9, r9, #1
 800b066:	d505      	bpl.n	800b074 <_fwalk_reent+0x24>
 800b068:	6824      	ldr	r4, [r4, #0]
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	d1f7      	bne.n	800b05e <_fwalk_reent+0xe>
 800b06e:	4638      	mov	r0, r7
 800b070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b074:	89ab      	ldrh	r3, [r5, #12]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d907      	bls.n	800b08a <_fwalk_reent+0x3a>
 800b07a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b07e:	3301      	adds	r3, #1
 800b080:	d003      	beq.n	800b08a <_fwalk_reent+0x3a>
 800b082:	4629      	mov	r1, r5
 800b084:	4630      	mov	r0, r6
 800b086:	47c0      	blx	r8
 800b088:	4307      	orrs	r7, r0
 800b08a:	3568      	adds	r5, #104	; 0x68
 800b08c:	e7e9      	b.n	800b062 <_fwalk_reent+0x12>

0800b08e <__retarget_lock_init_recursive>:
 800b08e:	4770      	bx	lr

0800b090 <__retarget_lock_acquire_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_release_recursive>:
 800b092:	4770      	bx	lr

0800b094 <_malloc_r>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	1ccd      	adds	r5, r1, #3
 800b098:	f025 0503 	bic.w	r5, r5, #3
 800b09c:	3508      	adds	r5, #8
 800b09e:	2d0c      	cmp	r5, #12
 800b0a0:	bf38      	it	cc
 800b0a2:	250c      	movcc	r5, #12
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	db01      	blt.n	800b0ae <_malloc_r+0x1a>
 800b0aa:	42a9      	cmp	r1, r5
 800b0ac:	d903      	bls.n	800b0b6 <_malloc_r+0x22>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b6:	f000 fda3 	bl	800bc00 <__malloc_lock>
 800b0ba:	4921      	ldr	r1, [pc, #132]	; (800b140 <_malloc_r+0xac>)
 800b0bc:	680a      	ldr	r2, [r1, #0]
 800b0be:	4614      	mov	r4, r2
 800b0c0:	b99c      	cbnz	r4, 800b0ea <_malloc_r+0x56>
 800b0c2:	4f20      	ldr	r7, [pc, #128]	; (800b144 <_malloc_r+0xb0>)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	b923      	cbnz	r3, 800b0d2 <_malloc_r+0x3e>
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f000 fb2a 	bl	800b724 <_sbrk_r>
 800b0d0:	6038      	str	r0, [r7, #0]
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f000 fb25 	bl	800b724 <_sbrk_r>
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	d123      	bne.n	800b126 <_malloc_r+0x92>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	6033      	str	r3, [r6, #0]
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f000 fd92 	bl	800bc0c <__malloc_unlock>
 800b0e8:	e7e3      	b.n	800b0b2 <_malloc_r+0x1e>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	1b5b      	subs	r3, r3, r5
 800b0ee:	d417      	bmi.n	800b120 <_malloc_r+0x8c>
 800b0f0:	2b0b      	cmp	r3, #11
 800b0f2:	d903      	bls.n	800b0fc <_malloc_r+0x68>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	441c      	add	r4, r3
 800b0f8:	6025      	str	r5, [r4, #0]
 800b0fa:	e004      	b.n	800b106 <_malloc_r+0x72>
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	42a2      	cmp	r2, r4
 800b100:	bf0c      	ite	eq
 800b102:	600b      	streq	r3, [r1, #0]
 800b104:	6053      	strne	r3, [r2, #4]
 800b106:	4630      	mov	r0, r6
 800b108:	f000 fd80 	bl	800bc0c <__malloc_unlock>
 800b10c:	f104 000b 	add.w	r0, r4, #11
 800b110:	1d23      	adds	r3, r4, #4
 800b112:	f020 0007 	bic.w	r0, r0, #7
 800b116:	1ac2      	subs	r2, r0, r3
 800b118:	d0cc      	beq.n	800b0b4 <_malloc_r+0x20>
 800b11a:	1a1b      	subs	r3, r3, r0
 800b11c:	50a3      	str	r3, [r4, r2]
 800b11e:	e7c9      	b.n	800b0b4 <_malloc_r+0x20>
 800b120:	4622      	mov	r2, r4
 800b122:	6864      	ldr	r4, [r4, #4]
 800b124:	e7cc      	b.n	800b0c0 <_malloc_r+0x2c>
 800b126:	1cc4      	adds	r4, r0, #3
 800b128:	f024 0403 	bic.w	r4, r4, #3
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	d0e3      	beq.n	800b0f8 <_malloc_r+0x64>
 800b130:	1a21      	subs	r1, r4, r0
 800b132:	4630      	mov	r0, r6
 800b134:	f000 faf6 	bl	800b724 <_sbrk_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	d1dd      	bne.n	800b0f8 <_malloc_r+0x64>
 800b13c:	e7cf      	b.n	800b0de <_malloc_r+0x4a>
 800b13e:	bf00      	nop
 800b140:	20000098 	.word	0x20000098
 800b144:	2000009c 	.word	0x2000009c

0800b148 <__sfputc_r>:
 800b148:	6893      	ldr	r3, [r2, #8]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	b410      	push	{r4}
 800b150:	6093      	str	r3, [r2, #8]
 800b152:	da08      	bge.n	800b166 <__sfputc_r+0x1e>
 800b154:	6994      	ldr	r4, [r2, #24]
 800b156:	42a3      	cmp	r3, r4
 800b158:	db01      	blt.n	800b15e <__sfputc_r+0x16>
 800b15a:	290a      	cmp	r1, #10
 800b15c:	d103      	bne.n	800b166 <__sfputc_r+0x1e>
 800b15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b162:	f000 bb33 	b.w	800b7cc <__swbuf_r>
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	1c58      	adds	r0, r3, #1
 800b16a:	6010      	str	r0, [r2, #0]
 800b16c:	7019      	strb	r1, [r3, #0]
 800b16e:	4608      	mov	r0, r1
 800b170:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <__sfputs_r>:
 800b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b178:	4606      	mov	r6, r0
 800b17a:	460f      	mov	r7, r1
 800b17c:	4614      	mov	r4, r2
 800b17e:	18d5      	adds	r5, r2, r3
 800b180:	42ac      	cmp	r4, r5
 800b182:	d101      	bne.n	800b188 <__sfputs_r+0x12>
 800b184:	2000      	movs	r0, #0
 800b186:	e007      	b.n	800b198 <__sfputs_r+0x22>
 800b188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18c:	463a      	mov	r2, r7
 800b18e:	4630      	mov	r0, r6
 800b190:	f7ff ffda 	bl	800b148 <__sfputc_r>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d1f3      	bne.n	800b180 <__sfputs_r+0xa>
 800b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b19c <_vfiprintf_r>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	b09d      	sub	sp, #116	; 0x74
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	4698      	mov	r8, r3
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	b118      	cbz	r0, 800b1b4 <_vfiprintf_r+0x18>
 800b1ac:	6983      	ldr	r3, [r0, #24]
 800b1ae:	b90b      	cbnz	r3, 800b1b4 <_vfiprintf_r+0x18>
 800b1b0:	f7ff fed0 	bl	800af54 <__sinit>
 800b1b4:	4b89      	ldr	r3, [pc, #548]	; (800b3dc <_vfiprintf_r+0x240>)
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	d11b      	bne.n	800b1f2 <_vfiprintf_r+0x56>
 800b1ba:	6875      	ldr	r5, [r6, #4]
 800b1bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1be:	07d9      	lsls	r1, r3, #31
 800b1c0:	d405      	bmi.n	800b1ce <_vfiprintf_r+0x32>
 800b1c2:	89ab      	ldrh	r3, [r5, #12]
 800b1c4:	059a      	lsls	r2, r3, #22
 800b1c6:	d402      	bmi.n	800b1ce <_vfiprintf_r+0x32>
 800b1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ca:	f7ff ff61 	bl	800b090 <__retarget_lock_acquire_recursive>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	071b      	lsls	r3, r3, #28
 800b1d2:	d501      	bpl.n	800b1d8 <_vfiprintf_r+0x3c>
 800b1d4:	692b      	ldr	r3, [r5, #16]
 800b1d6:	b9eb      	cbnz	r3, 800b214 <_vfiprintf_r+0x78>
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f000 fb5a 	bl	800b894 <__swsetup_r>
 800b1e0:	b1c0      	cbz	r0, 800b214 <_vfiprintf_r+0x78>
 800b1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e4:	07dc      	lsls	r4, r3, #31
 800b1e6:	d50e      	bpl.n	800b206 <_vfiprintf_r+0x6a>
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	b01d      	add	sp, #116	; 0x74
 800b1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f2:	4b7b      	ldr	r3, [pc, #492]	; (800b3e0 <_vfiprintf_r+0x244>)
 800b1f4:	429d      	cmp	r5, r3
 800b1f6:	d101      	bne.n	800b1fc <_vfiprintf_r+0x60>
 800b1f8:	68b5      	ldr	r5, [r6, #8]
 800b1fa:	e7df      	b.n	800b1bc <_vfiprintf_r+0x20>
 800b1fc:	4b79      	ldr	r3, [pc, #484]	; (800b3e4 <_vfiprintf_r+0x248>)
 800b1fe:	429d      	cmp	r5, r3
 800b200:	bf08      	it	eq
 800b202:	68f5      	ldreq	r5, [r6, #12]
 800b204:	e7da      	b.n	800b1bc <_vfiprintf_r+0x20>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	0598      	lsls	r0, r3, #22
 800b20a:	d4ed      	bmi.n	800b1e8 <_vfiprintf_r+0x4c>
 800b20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20e:	f7ff ff40 	bl	800b092 <__retarget_lock_release_recursive>
 800b212:	e7e9      	b.n	800b1e8 <_vfiprintf_r+0x4c>
 800b214:	2300      	movs	r3, #0
 800b216:	9309      	str	r3, [sp, #36]	; 0x24
 800b218:	2320      	movs	r3, #32
 800b21a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b21e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b222:	2330      	movs	r3, #48	; 0x30
 800b224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3e8 <_vfiprintf_r+0x24c>
 800b228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b22c:	f04f 0901 	mov.w	r9, #1
 800b230:	4623      	mov	r3, r4
 800b232:	469a      	mov	sl, r3
 800b234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b238:	b10a      	cbz	r2, 800b23e <_vfiprintf_r+0xa2>
 800b23a:	2a25      	cmp	r2, #37	; 0x25
 800b23c:	d1f9      	bne.n	800b232 <_vfiprintf_r+0x96>
 800b23e:	ebba 0b04 	subs.w	fp, sl, r4
 800b242:	d00b      	beq.n	800b25c <_vfiprintf_r+0xc0>
 800b244:	465b      	mov	r3, fp
 800b246:	4622      	mov	r2, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff ff93 	bl	800b176 <__sfputs_r>
 800b250:	3001      	adds	r0, #1
 800b252:	f000 80aa 	beq.w	800b3aa <_vfiprintf_r+0x20e>
 800b256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b258:	445a      	add	r2, fp
 800b25a:	9209      	str	r2, [sp, #36]	; 0x24
 800b25c:	f89a 3000 	ldrb.w	r3, [sl]
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80a2 	beq.w	800b3aa <_vfiprintf_r+0x20e>
 800b266:	2300      	movs	r3, #0
 800b268:	f04f 32ff 	mov.w	r2, #4294967295
 800b26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b270:	f10a 0a01 	add.w	sl, sl, #1
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	9307      	str	r3, [sp, #28]
 800b278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b27c:	931a      	str	r3, [sp, #104]	; 0x68
 800b27e:	4654      	mov	r4, sl
 800b280:	2205      	movs	r2, #5
 800b282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b286:	4858      	ldr	r0, [pc, #352]	; (800b3e8 <_vfiprintf_r+0x24c>)
 800b288:	f7f5 f82a 	bl	80002e0 <memchr>
 800b28c:	9a04      	ldr	r2, [sp, #16]
 800b28e:	b9d8      	cbnz	r0, 800b2c8 <_vfiprintf_r+0x12c>
 800b290:	06d1      	lsls	r1, r2, #27
 800b292:	bf44      	itt	mi
 800b294:	2320      	movmi	r3, #32
 800b296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29a:	0713      	lsls	r3, r2, #28
 800b29c:	bf44      	itt	mi
 800b29e:	232b      	movmi	r3, #43	; 0x2b
 800b2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2aa:	d015      	beq.n	800b2d8 <_vfiprintf_r+0x13c>
 800b2ac:	9a07      	ldr	r2, [sp, #28]
 800b2ae:	4654      	mov	r4, sl
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	f04f 0c0a 	mov.w	ip, #10
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2bc:	3b30      	subs	r3, #48	; 0x30
 800b2be:	2b09      	cmp	r3, #9
 800b2c0:	d94e      	bls.n	800b360 <_vfiprintf_r+0x1c4>
 800b2c2:	b1b0      	cbz	r0, 800b2f2 <_vfiprintf_r+0x156>
 800b2c4:	9207      	str	r2, [sp, #28]
 800b2c6:	e014      	b.n	800b2f2 <_vfiprintf_r+0x156>
 800b2c8:	eba0 0308 	sub.w	r3, r0, r8
 800b2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	46a2      	mov	sl, r4
 800b2d6:	e7d2      	b.n	800b27e <_vfiprintf_r+0xe2>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	1d19      	adds	r1, r3, #4
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	9103      	str	r1, [sp, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bfbb      	ittet	lt
 800b2e4:	425b      	neglt	r3, r3
 800b2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ea:	9307      	strge	r3, [sp, #28]
 800b2ec:	9307      	strlt	r3, [sp, #28]
 800b2ee:	bfb8      	it	lt
 800b2f0:	9204      	strlt	r2, [sp, #16]
 800b2f2:	7823      	ldrb	r3, [r4, #0]
 800b2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f6:	d10c      	bne.n	800b312 <_vfiprintf_r+0x176>
 800b2f8:	7863      	ldrb	r3, [r4, #1]
 800b2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b2fc:	d135      	bne.n	800b36a <_vfiprintf_r+0x1ce>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	1d1a      	adds	r2, r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	9203      	str	r2, [sp, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	bfb8      	it	lt
 800b30a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b30e:	3402      	adds	r4, #2
 800b310:	9305      	str	r3, [sp, #20]
 800b312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3f8 <_vfiprintf_r+0x25c>
 800b316:	7821      	ldrb	r1, [r4, #0]
 800b318:	2203      	movs	r2, #3
 800b31a:	4650      	mov	r0, sl
 800b31c:	f7f4 ffe0 	bl	80002e0 <memchr>
 800b320:	b140      	cbz	r0, 800b334 <_vfiprintf_r+0x198>
 800b322:	2340      	movs	r3, #64	; 0x40
 800b324:	eba0 000a 	sub.w	r0, r0, sl
 800b328:	fa03 f000 	lsl.w	r0, r3, r0
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	4303      	orrs	r3, r0
 800b330:	3401      	adds	r4, #1
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	482c      	ldr	r0, [pc, #176]	; (800b3ec <_vfiprintf_r+0x250>)
 800b33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b33e:	2206      	movs	r2, #6
 800b340:	f7f4 ffce 	bl	80002e0 <memchr>
 800b344:	2800      	cmp	r0, #0
 800b346:	d03f      	beq.n	800b3c8 <_vfiprintf_r+0x22c>
 800b348:	4b29      	ldr	r3, [pc, #164]	; (800b3f0 <_vfiprintf_r+0x254>)
 800b34a:	bb1b      	cbnz	r3, 800b394 <_vfiprintf_r+0x1f8>
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	3307      	adds	r3, #7
 800b350:	f023 0307 	bic.w	r3, r3, #7
 800b354:	3308      	adds	r3, #8
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35a:	443b      	add	r3, r7
 800b35c:	9309      	str	r3, [sp, #36]	; 0x24
 800b35e:	e767      	b.n	800b230 <_vfiprintf_r+0x94>
 800b360:	fb0c 3202 	mla	r2, ip, r2, r3
 800b364:	460c      	mov	r4, r1
 800b366:	2001      	movs	r0, #1
 800b368:	e7a5      	b.n	800b2b6 <_vfiprintf_r+0x11a>
 800b36a:	2300      	movs	r3, #0
 800b36c:	3401      	adds	r4, #1
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	4619      	mov	r1, r3
 800b372:	f04f 0c0a 	mov.w	ip, #10
 800b376:	4620      	mov	r0, r4
 800b378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b37c:	3a30      	subs	r2, #48	; 0x30
 800b37e:	2a09      	cmp	r2, #9
 800b380:	d903      	bls.n	800b38a <_vfiprintf_r+0x1ee>
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0c5      	beq.n	800b312 <_vfiprintf_r+0x176>
 800b386:	9105      	str	r1, [sp, #20]
 800b388:	e7c3      	b.n	800b312 <_vfiprintf_r+0x176>
 800b38a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b38e:	4604      	mov	r4, r0
 800b390:	2301      	movs	r3, #1
 800b392:	e7f0      	b.n	800b376 <_vfiprintf_r+0x1da>
 800b394:	ab03      	add	r3, sp, #12
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	462a      	mov	r2, r5
 800b39a:	4b16      	ldr	r3, [pc, #88]	; (800b3f4 <_vfiprintf_r+0x258>)
 800b39c:	a904      	add	r1, sp, #16
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f3af 8000 	nop.w
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	1c78      	adds	r0, r7, #1
 800b3a8:	d1d6      	bne.n	800b358 <_vfiprintf_r+0x1bc>
 800b3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3ac:	07d9      	lsls	r1, r3, #31
 800b3ae:	d405      	bmi.n	800b3bc <_vfiprintf_r+0x220>
 800b3b0:	89ab      	ldrh	r3, [r5, #12]
 800b3b2:	059a      	lsls	r2, r3, #22
 800b3b4:	d402      	bmi.n	800b3bc <_vfiprintf_r+0x220>
 800b3b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b8:	f7ff fe6b 	bl	800b092 <__retarget_lock_release_recursive>
 800b3bc:	89ab      	ldrh	r3, [r5, #12]
 800b3be:	065b      	lsls	r3, r3, #25
 800b3c0:	f53f af12 	bmi.w	800b1e8 <_vfiprintf_r+0x4c>
 800b3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c6:	e711      	b.n	800b1ec <_vfiprintf_r+0x50>
 800b3c8:	ab03      	add	r3, sp, #12
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <_vfiprintf_r+0x258>)
 800b3d0:	a904      	add	r1, sp, #16
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f000 f880 	bl	800b4d8 <_printf_i>
 800b3d8:	e7e4      	b.n	800b3a4 <_vfiprintf_r+0x208>
 800b3da:	bf00      	nop
 800b3dc:	0800bdb0 	.word	0x0800bdb0
 800b3e0:	0800bdd0 	.word	0x0800bdd0
 800b3e4:	0800bd90 	.word	0x0800bd90
 800b3e8:	0800bdf0 	.word	0x0800bdf0
 800b3ec:	0800bdfa 	.word	0x0800bdfa
 800b3f0:	00000000 	.word	0x00000000
 800b3f4:	0800b177 	.word	0x0800b177
 800b3f8:	0800bdf6 	.word	0x0800bdf6

0800b3fc <_printf_common>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	4616      	mov	r6, r2
 800b402:	4699      	mov	r9, r3
 800b404:	688a      	ldr	r2, [r1, #8]
 800b406:	690b      	ldr	r3, [r1, #16]
 800b408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b40c:	4293      	cmp	r3, r2
 800b40e:	bfb8      	it	lt
 800b410:	4613      	movlt	r3, r2
 800b412:	6033      	str	r3, [r6, #0]
 800b414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b418:	4607      	mov	r7, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	b10a      	cbz	r2, 800b422 <_printf_common+0x26>
 800b41e:	3301      	adds	r3, #1
 800b420:	6033      	str	r3, [r6, #0]
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	0699      	lsls	r1, r3, #26
 800b426:	bf42      	ittt	mi
 800b428:	6833      	ldrmi	r3, [r6, #0]
 800b42a:	3302      	addmi	r3, #2
 800b42c:	6033      	strmi	r3, [r6, #0]
 800b42e:	6825      	ldr	r5, [r4, #0]
 800b430:	f015 0506 	ands.w	r5, r5, #6
 800b434:	d106      	bne.n	800b444 <_printf_common+0x48>
 800b436:	f104 0a19 	add.w	sl, r4, #25
 800b43a:	68e3      	ldr	r3, [r4, #12]
 800b43c:	6832      	ldr	r2, [r6, #0]
 800b43e:	1a9b      	subs	r3, r3, r2
 800b440:	42ab      	cmp	r3, r5
 800b442:	dc26      	bgt.n	800b492 <_printf_common+0x96>
 800b444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b448:	1e13      	subs	r3, r2, #0
 800b44a:	6822      	ldr	r2, [r4, #0]
 800b44c:	bf18      	it	ne
 800b44e:	2301      	movne	r3, #1
 800b450:	0692      	lsls	r2, r2, #26
 800b452:	d42b      	bmi.n	800b4ac <_printf_common+0xb0>
 800b454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b458:	4649      	mov	r1, r9
 800b45a:	4638      	mov	r0, r7
 800b45c:	47c0      	blx	r8
 800b45e:	3001      	adds	r0, #1
 800b460:	d01e      	beq.n	800b4a0 <_printf_common+0xa4>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	68e5      	ldr	r5, [r4, #12]
 800b466:	6832      	ldr	r2, [r6, #0]
 800b468:	f003 0306 	and.w	r3, r3, #6
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	bf08      	it	eq
 800b470:	1aad      	subeq	r5, r5, r2
 800b472:	68a3      	ldr	r3, [r4, #8]
 800b474:	6922      	ldr	r2, [r4, #16]
 800b476:	bf0c      	ite	eq
 800b478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b47c:	2500      	movne	r5, #0
 800b47e:	4293      	cmp	r3, r2
 800b480:	bfc4      	itt	gt
 800b482:	1a9b      	subgt	r3, r3, r2
 800b484:	18ed      	addgt	r5, r5, r3
 800b486:	2600      	movs	r6, #0
 800b488:	341a      	adds	r4, #26
 800b48a:	42b5      	cmp	r5, r6
 800b48c:	d11a      	bne.n	800b4c4 <_printf_common+0xc8>
 800b48e:	2000      	movs	r0, #0
 800b490:	e008      	b.n	800b4a4 <_printf_common+0xa8>
 800b492:	2301      	movs	r3, #1
 800b494:	4652      	mov	r2, sl
 800b496:	4649      	mov	r1, r9
 800b498:	4638      	mov	r0, r7
 800b49a:	47c0      	blx	r8
 800b49c:	3001      	adds	r0, #1
 800b49e:	d103      	bne.n	800b4a8 <_printf_common+0xac>
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	e7c6      	b.n	800b43a <_printf_common+0x3e>
 800b4ac:	18e1      	adds	r1, r4, r3
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	2030      	movs	r0, #48	; 0x30
 800b4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b6:	4422      	add	r2, r4
 800b4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	e7c7      	b.n	800b454 <_printf_common+0x58>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c0      	blx	r8
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d0e6      	beq.n	800b4a0 <_printf_common+0xa4>
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	e7d9      	b.n	800b48a <_printf_common+0x8e>
	...

0800b4d8 <_printf_i>:
 800b4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4dc:	460c      	mov	r4, r1
 800b4de:	4691      	mov	r9, r2
 800b4e0:	7e27      	ldrb	r7, [r4, #24]
 800b4e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4e4:	2f78      	cmp	r7, #120	; 0x78
 800b4e6:	4680      	mov	r8, r0
 800b4e8:	469a      	mov	sl, r3
 800b4ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4ee:	d807      	bhi.n	800b500 <_printf_i+0x28>
 800b4f0:	2f62      	cmp	r7, #98	; 0x62
 800b4f2:	d80a      	bhi.n	800b50a <_printf_i+0x32>
 800b4f4:	2f00      	cmp	r7, #0
 800b4f6:	f000 80d8 	beq.w	800b6aa <_printf_i+0x1d2>
 800b4fa:	2f58      	cmp	r7, #88	; 0x58
 800b4fc:	f000 80a3 	beq.w	800b646 <_printf_i+0x16e>
 800b500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b508:	e03a      	b.n	800b580 <_printf_i+0xa8>
 800b50a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50e:	2b15      	cmp	r3, #21
 800b510:	d8f6      	bhi.n	800b500 <_printf_i+0x28>
 800b512:	a001      	add	r0, pc, #4	; (adr r0, 800b518 <_printf_i+0x40>)
 800b514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b518:	0800b571 	.word	0x0800b571
 800b51c:	0800b585 	.word	0x0800b585
 800b520:	0800b501 	.word	0x0800b501
 800b524:	0800b501 	.word	0x0800b501
 800b528:	0800b501 	.word	0x0800b501
 800b52c:	0800b501 	.word	0x0800b501
 800b530:	0800b585 	.word	0x0800b585
 800b534:	0800b501 	.word	0x0800b501
 800b538:	0800b501 	.word	0x0800b501
 800b53c:	0800b501 	.word	0x0800b501
 800b540:	0800b501 	.word	0x0800b501
 800b544:	0800b691 	.word	0x0800b691
 800b548:	0800b5b5 	.word	0x0800b5b5
 800b54c:	0800b673 	.word	0x0800b673
 800b550:	0800b501 	.word	0x0800b501
 800b554:	0800b501 	.word	0x0800b501
 800b558:	0800b6b3 	.word	0x0800b6b3
 800b55c:	0800b501 	.word	0x0800b501
 800b560:	0800b5b5 	.word	0x0800b5b5
 800b564:	0800b501 	.word	0x0800b501
 800b568:	0800b501 	.word	0x0800b501
 800b56c:	0800b67b 	.word	0x0800b67b
 800b570:	680b      	ldr	r3, [r1, #0]
 800b572:	1d1a      	adds	r2, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	600a      	str	r2, [r1, #0]
 800b578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b580:	2301      	movs	r3, #1
 800b582:	e0a3      	b.n	800b6cc <_printf_i+0x1f4>
 800b584:	6825      	ldr	r5, [r4, #0]
 800b586:	6808      	ldr	r0, [r1, #0]
 800b588:	062e      	lsls	r6, r5, #24
 800b58a:	f100 0304 	add.w	r3, r0, #4
 800b58e:	d50a      	bpl.n	800b5a6 <_printf_i+0xce>
 800b590:	6805      	ldr	r5, [r0, #0]
 800b592:	600b      	str	r3, [r1, #0]
 800b594:	2d00      	cmp	r5, #0
 800b596:	da03      	bge.n	800b5a0 <_printf_i+0xc8>
 800b598:	232d      	movs	r3, #45	; 0x2d
 800b59a:	426d      	negs	r5, r5
 800b59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a0:	485e      	ldr	r0, [pc, #376]	; (800b71c <_printf_i+0x244>)
 800b5a2:	230a      	movs	r3, #10
 800b5a4:	e019      	b.n	800b5da <_printf_i+0x102>
 800b5a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5aa:	6805      	ldr	r5, [r0, #0]
 800b5ac:	600b      	str	r3, [r1, #0]
 800b5ae:	bf18      	it	ne
 800b5b0:	b22d      	sxthne	r5, r5
 800b5b2:	e7ef      	b.n	800b594 <_printf_i+0xbc>
 800b5b4:	680b      	ldr	r3, [r1, #0]
 800b5b6:	6825      	ldr	r5, [r4, #0]
 800b5b8:	1d18      	adds	r0, r3, #4
 800b5ba:	6008      	str	r0, [r1, #0]
 800b5bc:	0628      	lsls	r0, r5, #24
 800b5be:	d501      	bpl.n	800b5c4 <_printf_i+0xec>
 800b5c0:	681d      	ldr	r5, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <_printf_i+0xf2>
 800b5c4:	0669      	lsls	r1, r5, #25
 800b5c6:	d5fb      	bpl.n	800b5c0 <_printf_i+0xe8>
 800b5c8:	881d      	ldrh	r5, [r3, #0]
 800b5ca:	4854      	ldr	r0, [pc, #336]	; (800b71c <_printf_i+0x244>)
 800b5cc:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ce:	bf0c      	ite	eq
 800b5d0:	2308      	moveq	r3, #8
 800b5d2:	230a      	movne	r3, #10
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5da:	6866      	ldr	r6, [r4, #4]
 800b5dc:	60a6      	str	r6, [r4, #8]
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	bfa2      	ittt	ge
 800b5e2:	6821      	ldrge	r1, [r4, #0]
 800b5e4:	f021 0104 	bicge.w	r1, r1, #4
 800b5e8:	6021      	strge	r1, [r4, #0]
 800b5ea:	b90d      	cbnz	r5, 800b5f0 <_printf_i+0x118>
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	d04d      	beq.n	800b68c <_printf_i+0x1b4>
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5f6:	fb03 5711 	mls	r7, r3, r1, r5
 800b5fa:	5dc7      	ldrb	r7, [r0, r7]
 800b5fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b600:	462f      	mov	r7, r5
 800b602:	42bb      	cmp	r3, r7
 800b604:	460d      	mov	r5, r1
 800b606:	d9f4      	bls.n	800b5f2 <_printf_i+0x11a>
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d10b      	bne.n	800b624 <_printf_i+0x14c>
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	07df      	lsls	r7, r3, #31
 800b610:	d508      	bpl.n	800b624 <_printf_i+0x14c>
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	6861      	ldr	r1, [r4, #4]
 800b616:	4299      	cmp	r1, r3
 800b618:	bfde      	ittt	le
 800b61a:	2330      	movle	r3, #48	; 0x30
 800b61c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b620:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b624:	1b92      	subs	r2, r2, r6
 800b626:	6122      	str	r2, [r4, #16]
 800b628:	f8cd a000 	str.w	sl, [sp]
 800b62c:	464b      	mov	r3, r9
 800b62e:	aa03      	add	r2, sp, #12
 800b630:	4621      	mov	r1, r4
 800b632:	4640      	mov	r0, r8
 800b634:	f7ff fee2 	bl	800b3fc <_printf_common>
 800b638:	3001      	adds	r0, #1
 800b63a:	d14c      	bne.n	800b6d6 <_printf_i+0x1fe>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	b004      	add	sp, #16
 800b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b646:	4835      	ldr	r0, [pc, #212]	; (800b71c <_printf_i+0x244>)
 800b648:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	680e      	ldr	r6, [r1, #0]
 800b650:	061f      	lsls	r7, r3, #24
 800b652:	f856 5b04 	ldr.w	r5, [r6], #4
 800b656:	600e      	str	r6, [r1, #0]
 800b658:	d514      	bpl.n	800b684 <_printf_i+0x1ac>
 800b65a:	07d9      	lsls	r1, r3, #31
 800b65c:	bf44      	itt	mi
 800b65e:	f043 0320 	orrmi.w	r3, r3, #32
 800b662:	6023      	strmi	r3, [r4, #0]
 800b664:	b91d      	cbnz	r5, 800b66e <_printf_i+0x196>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	f023 0320 	bic.w	r3, r3, #32
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	2310      	movs	r3, #16
 800b670:	e7b0      	b.n	800b5d4 <_printf_i+0xfc>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	f043 0320 	orr.w	r3, r3, #32
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	2378      	movs	r3, #120	; 0x78
 800b67c:	4828      	ldr	r0, [pc, #160]	; (800b720 <_printf_i+0x248>)
 800b67e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b682:	e7e3      	b.n	800b64c <_printf_i+0x174>
 800b684:	065e      	lsls	r6, r3, #25
 800b686:	bf48      	it	mi
 800b688:	b2ad      	uxthmi	r5, r5
 800b68a:	e7e6      	b.n	800b65a <_printf_i+0x182>
 800b68c:	4616      	mov	r6, r2
 800b68e:	e7bb      	b.n	800b608 <_printf_i+0x130>
 800b690:	680b      	ldr	r3, [r1, #0]
 800b692:	6826      	ldr	r6, [r4, #0]
 800b694:	6960      	ldr	r0, [r4, #20]
 800b696:	1d1d      	adds	r5, r3, #4
 800b698:	600d      	str	r5, [r1, #0]
 800b69a:	0635      	lsls	r5, r6, #24
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	d501      	bpl.n	800b6a4 <_printf_i+0x1cc>
 800b6a0:	6018      	str	r0, [r3, #0]
 800b6a2:	e002      	b.n	800b6aa <_printf_i+0x1d2>
 800b6a4:	0671      	lsls	r1, r6, #25
 800b6a6:	d5fb      	bpl.n	800b6a0 <_printf_i+0x1c8>
 800b6a8:	8018      	strh	r0, [r3, #0]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	4616      	mov	r6, r2
 800b6b0:	e7ba      	b.n	800b628 <_printf_i+0x150>
 800b6b2:	680b      	ldr	r3, [r1, #0]
 800b6b4:	1d1a      	adds	r2, r3, #4
 800b6b6:	600a      	str	r2, [r1, #0]
 800b6b8:	681e      	ldr	r6, [r3, #0]
 800b6ba:	6862      	ldr	r2, [r4, #4]
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7f4 fe0e 	bl	80002e0 <memchr>
 800b6c4:	b108      	cbz	r0, 800b6ca <_printf_i+0x1f2>
 800b6c6:	1b80      	subs	r0, r0, r6
 800b6c8:	6060      	str	r0, [r4, #4]
 800b6ca:	6863      	ldr	r3, [r4, #4]
 800b6cc:	6123      	str	r3, [r4, #16]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d4:	e7a8      	b.n	800b628 <_printf_i+0x150>
 800b6d6:	6923      	ldr	r3, [r4, #16]
 800b6d8:	4632      	mov	r2, r6
 800b6da:	4649      	mov	r1, r9
 800b6dc:	4640      	mov	r0, r8
 800b6de:	47d0      	blx	sl
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d0ab      	beq.n	800b63c <_printf_i+0x164>
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	079b      	lsls	r3, r3, #30
 800b6e8:	d413      	bmi.n	800b712 <_printf_i+0x23a>
 800b6ea:	68e0      	ldr	r0, [r4, #12]
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	4298      	cmp	r0, r3
 800b6f0:	bfb8      	it	lt
 800b6f2:	4618      	movlt	r0, r3
 800b6f4:	e7a4      	b.n	800b640 <_printf_i+0x168>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	47d0      	blx	sl
 800b700:	3001      	adds	r0, #1
 800b702:	d09b      	beq.n	800b63c <_printf_i+0x164>
 800b704:	3501      	adds	r5, #1
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	9903      	ldr	r1, [sp, #12]
 800b70a:	1a5b      	subs	r3, r3, r1
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	dcf2      	bgt.n	800b6f6 <_printf_i+0x21e>
 800b710:	e7eb      	b.n	800b6ea <_printf_i+0x212>
 800b712:	2500      	movs	r5, #0
 800b714:	f104 0619 	add.w	r6, r4, #25
 800b718:	e7f5      	b.n	800b706 <_printf_i+0x22e>
 800b71a:	bf00      	nop
 800b71c:	0800be01 	.word	0x0800be01
 800b720:	0800be12 	.word	0x0800be12

0800b724 <_sbrk_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d06      	ldr	r5, [pc, #24]	; (800b740 <_sbrk_r+0x1c>)
 800b728:	2300      	movs	r3, #0
 800b72a:	4604      	mov	r4, r0
 800b72c:	4608      	mov	r0, r1
 800b72e:	602b      	str	r3, [r5, #0]
 800b730:	f7f6 fe0e 	bl	8002350 <_sbrk>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_sbrk_r+0x1a>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_sbrk_r+0x1a>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	2000093c 	.word	0x2000093c

0800b744 <__sread>:
 800b744:	b510      	push	{r4, lr}
 800b746:	460c      	mov	r4, r1
 800b748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74c:	f000 fab4 	bl	800bcb8 <_read_r>
 800b750:	2800      	cmp	r0, #0
 800b752:	bfab      	itete	ge
 800b754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b756:	89a3      	ldrhlt	r3, [r4, #12]
 800b758:	181b      	addge	r3, r3, r0
 800b75a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b75e:	bfac      	ite	ge
 800b760:	6563      	strge	r3, [r4, #84]	; 0x54
 800b762:	81a3      	strhlt	r3, [r4, #12]
 800b764:	bd10      	pop	{r4, pc}

0800b766 <__swrite>:
 800b766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b76a:	461f      	mov	r7, r3
 800b76c:	898b      	ldrh	r3, [r1, #12]
 800b76e:	05db      	lsls	r3, r3, #23
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	4616      	mov	r6, r2
 800b776:	d505      	bpl.n	800b784 <__swrite+0x1e>
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	2302      	movs	r3, #2
 800b77e:	2200      	movs	r2, #0
 800b780:	f000 f9c8 	bl	800bb14 <_lseek_r>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b78a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	4628      	mov	r0, r5
 800b796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b79a:	f000 b869 	b.w	800b870 <_write_r>

0800b79e <__sseek>:
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a6:	f000 f9b5 	bl	800bb14 <_lseek_r>
 800b7aa:	1c43      	adds	r3, r0, #1
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	bf15      	itete	ne
 800b7b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7ba:	81a3      	strheq	r3, [r4, #12]
 800b7bc:	bf18      	it	ne
 800b7be:	81a3      	strhne	r3, [r4, #12]
 800b7c0:	bd10      	pop	{r4, pc}

0800b7c2 <__sclose>:
 800b7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c6:	f000 b8d3 	b.w	800b970 <_close_r>
	...

0800b7cc <__swbuf_r>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	460e      	mov	r6, r1
 800b7d0:	4614      	mov	r4, r2
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	b118      	cbz	r0, 800b7de <__swbuf_r+0x12>
 800b7d6:	6983      	ldr	r3, [r0, #24]
 800b7d8:	b90b      	cbnz	r3, 800b7de <__swbuf_r+0x12>
 800b7da:	f7ff fbbb 	bl	800af54 <__sinit>
 800b7de:	4b21      	ldr	r3, [pc, #132]	; (800b864 <__swbuf_r+0x98>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	d12b      	bne.n	800b83c <__swbuf_r+0x70>
 800b7e4:	686c      	ldr	r4, [r5, #4]
 800b7e6:	69a3      	ldr	r3, [r4, #24]
 800b7e8:	60a3      	str	r3, [r4, #8]
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	071a      	lsls	r2, r3, #28
 800b7ee:	d52f      	bpl.n	800b850 <__swbuf_r+0x84>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	b36b      	cbz	r3, 800b850 <__swbuf_r+0x84>
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	6820      	ldr	r0, [r4, #0]
 800b7f8:	1ac0      	subs	r0, r0, r3
 800b7fa:	6963      	ldr	r3, [r4, #20]
 800b7fc:	b2f6      	uxtb	r6, r6
 800b7fe:	4283      	cmp	r3, r0
 800b800:	4637      	mov	r7, r6
 800b802:	dc04      	bgt.n	800b80e <__swbuf_r+0x42>
 800b804:	4621      	mov	r1, r4
 800b806:	4628      	mov	r0, r5
 800b808:	f000 f948 	bl	800ba9c <_fflush_r>
 800b80c:	bb30      	cbnz	r0, 800b85c <__swbuf_r+0x90>
 800b80e:	68a3      	ldr	r3, [r4, #8]
 800b810:	3b01      	subs	r3, #1
 800b812:	60a3      	str	r3, [r4, #8]
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	6022      	str	r2, [r4, #0]
 800b81a:	701e      	strb	r6, [r3, #0]
 800b81c:	6963      	ldr	r3, [r4, #20]
 800b81e:	3001      	adds	r0, #1
 800b820:	4283      	cmp	r3, r0
 800b822:	d004      	beq.n	800b82e <__swbuf_r+0x62>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	07db      	lsls	r3, r3, #31
 800b828:	d506      	bpl.n	800b838 <__swbuf_r+0x6c>
 800b82a:	2e0a      	cmp	r6, #10
 800b82c:	d104      	bne.n	800b838 <__swbuf_r+0x6c>
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	f000 f933 	bl	800ba9c <_fflush_r>
 800b836:	b988      	cbnz	r0, 800b85c <__swbuf_r+0x90>
 800b838:	4638      	mov	r0, r7
 800b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83c:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <__swbuf_r+0x9c>)
 800b83e:	429c      	cmp	r4, r3
 800b840:	d101      	bne.n	800b846 <__swbuf_r+0x7a>
 800b842:	68ac      	ldr	r4, [r5, #8]
 800b844:	e7cf      	b.n	800b7e6 <__swbuf_r+0x1a>
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <__swbuf_r+0xa0>)
 800b848:	429c      	cmp	r4, r3
 800b84a:	bf08      	it	eq
 800b84c:	68ec      	ldreq	r4, [r5, #12]
 800b84e:	e7ca      	b.n	800b7e6 <__swbuf_r+0x1a>
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	f000 f81e 	bl	800b894 <__swsetup_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0cb      	beq.n	800b7f4 <__swbuf_r+0x28>
 800b85c:	f04f 37ff 	mov.w	r7, #4294967295
 800b860:	e7ea      	b.n	800b838 <__swbuf_r+0x6c>
 800b862:	bf00      	nop
 800b864:	0800bdb0 	.word	0x0800bdb0
 800b868:	0800bdd0 	.word	0x0800bdd0
 800b86c:	0800bd90 	.word	0x0800bd90

0800b870 <_write_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d07      	ldr	r5, [pc, #28]	; (800b890 <_write_r+0x20>)
 800b874:	4604      	mov	r4, r0
 800b876:	4608      	mov	r0, r1
 800b878:	4611      	mov	r1, r2
 800b87a:	2200      	movs	r2, #0
 800b87c:	602a      	str	r2, [r5, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	f7f6 fd15 	bl	80022ae <_write>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_write_r+0x1e>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_write_r+0x1e>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	2000093c 	.word	0x2000093c

0800b894 <__swsetup_r>:
 800b894:	4b32      	ldr	r3, [pc, #200]	; (800b960 <__swsetup_r+0xcc>)
 800b896:	b570      	push	{r4, r5, r6, lr}
 800b898:	681d      	ldr	r5, [r3, #0]
 800b89a:	4606      	mov	r6, r0
 800b89c:	460c      	mov	r4, r1
 800b89e:	b125      	cbz	r5, 800b8aa <__swsetup_r+0x16>
 800b8a0:	69ab      	ldr	r3, [r5, #24]
 800b8a2:	b913      	cbnz	r3, 800b8aa <__swsetup_r+0x16>
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	f7ff fb55 	bl	800af54 <__sinit>
 800b8aa:	4b2e      	ldr	r3, [pc, #184]	; (800b964 <__swsetup_r+0xd0>)
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	d10f      	bne.n	800b8d0 <__swsetup_r+0x3c>
 800b8b0:	686c      	ldr	r4, [r5, #4]
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8b8:	0719      	lsls	r1, r3, #28
 800b8ba:	d42c      	bmi.n	800b916 <__swsetup_r+0x82>
 800b8bc:	06dd      	lsls	r5, r3, #27
 800b8be:	d411      	bmi.n	800b8e4 <__swsetup_r+0x50>
 800b8c0:	2309      	movs	r3, #9
 800b8c2:	6033      	str	r3, [r6, #0]
 800b8c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	e03e      	b.n	800b94e <__swsetup_r+0xba>
 800b8d0:	4b25      	ldr	r3, [pc, #148]	; (800b968 <__swsetup_r+0xd4>)
 800b8d2:	429c      	cmp	r4, r3
 800b8d4:	d101      	bne.n	800b8da <__swsetup_r+0x46>
 800b8d6:	68ac      	ldr	r4, [r5, #8]
 800b8d8:	e7eb      	b.n	800b8b2 <__swsetup_r+0x1e>
 800b8da:	4b24      	ldr	r3, [pc, #144]	; (800b96c <__swsetup_r+0xd8>)
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	bf08      	it	eq
 800b8e0:	68ec      	ldreq	r4, [r5, #12]
 800b8e2:	e7e6      	b.n	800b8b2 <__swsetup_r+0x1e>
 800b8e4:	0758      	lsls	r0, r3, #29
 800b8e6:	d512      	bpl.n	800b90e <__swsetup_r+0x7a>
 800b8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ea:	b141      	cbz	r1, 800b8fe <__swsetup_r+0x6a>
 800b8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8f0:	4299      	cmp	r1, r3
 800b8f2:	d002      	beq.n	800b8fa <__swsetup_r+0x66>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f000 f98f 	bl	800bc18 <_free_r>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	2300      	movs	r3, #0
 800b908:	6063      	str	r3, [r4, #4]
 800b90a:	6923      	ldr	r3, [r4, #16]
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0308 	orr.w	r3, r3, #8
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	6923      	ldr	r3, [r4, #16]
 800b918:	b94b      	cbnz	r3, 800b92e <__swsetup_r+0x9a>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b924:	d003      	beq.n	800b92e <__swsetup_r+0x9a>
 800b926:	4621      	mov	r1, r4
 800b928:	4630      	mov	r0, r6
 800b92a:	f000 f929 	bl	800bb80 <__smakebuf_r>
 800b92e:	89a0      	ldrh	r0, [r4, #12]
 800b930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b934:	f010 0301 	ands.w	r3, r0, #1
 800b938:	d00a      	beq.n	800b950 <__swsetup_r+0xbc>
 800b93a:	2300      	movs	r3, #0
 800b93c:	60a3      	str	r3, [r4, #8]
 800b93e:	6963      	ldr	r3, [r4, #20]
 800b940:	425b      	negs	r3, r3
 800b942:	61a3      	str	r3, [r4, #24]
 800b944:	6923      	ldr	r3, [r4, #16]
 800b946:	b943      	cbnz	r3, 800b95a <__swsetup_r+0xc6>
 800b948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b94c:	d1ba      	bne.n	800b8c4 <__swsetup_r+0x30>
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	0781      	lsls	r1, r0, #30
 800b952:	bf58      	it	pl
 800b954:	6963      	ldrpl	r3, [r4, #20]
 800b956:	60a3      	str	r3, [r4, #8]
 800b958:	e7f4      	b.n	800b944 <__swsetup_r+0xb0>
 800b95a:	2000      	movs	r0, #0
 800b95c:	e7f7      	b.n	800b94e <__swsetup_r+0xba>
 800b95e:	bf00      	nop
 800b960:	20000010 	.word	0x20000010
 800b964:	0800bdb0 	.word	0x0800bdb0
 800b968:	0800bdd0 	.word	0x0800bdd0
 800b96c:	0800bd90 	.word	0x0800bd90

0800b970 <_close_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d06      	ldr	r5, [pc, #24]	; (800b98c <_close_r+0x1c>)
 800b974:	2300      	movs	r3, #0
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f6 fcb3 	bl	80022e6 <_close>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_close_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_close_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	2000093c 	.word	0x2000093c

0800b990 <__sflush_r>:
 800b990:	898a      	ldrh	r2, [r1, #12]
 800b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	4605      	mov	r5, r0
 800b998:	0710      	lsls	r0, r2, #28
 800b99a:	460c      	mov	r4, r1
 800b99c:	d458      	bmi.n	800ba50 <__sflush_r+0xc0>
 800b99e:	684b      	ldr	r3, [r1, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	dc05      	bgt.n	800b9b0 <__sflush_r+0x20>
 800b9a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	dc02      	bgt.n	800b9b0 <__sflush_r+0x20>
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9b2:	2e00      	cmp	r6, #0
 800b9b4:	d0f9      	beq.n	800b9aa <__sflush_r+0x1a>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9bc:	682f      	ldr	r7, [r5, #0]
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	d032      	beq.n	800ba28 <__sflush_r+0x98>
 800b9c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	075a      	lsls	r2, r3, #29
 800b9c8:	d505      	bpl.n	800b9d6 <__sflush_r+0x46>
 800b9ca:	6863      	ldr	r3, [r4, #4]
 800b9cc:	1ac0      	subs	r0, r0, r3
 800b9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9d0:	b10b      	cbz	r3, 800b9d6 <__sflush_r+0x46>
 800b9d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9d4:	1ac0      	subs	r0, r0, r3
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4602      	mov	r2, r0
 800b9da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9dc:	6a21      	ldr	r1, [r4, #32]
 800b9de:	4628      	mov	r0, r5
 800b9e0:	47b0      	blx	r6
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	d106      	bne.n	800b9f6 <__sflush_r+0x66>
 800b9e8:	6829      	ldr	r1, [r5, #0]
 800b9ea:	291d      	cmp	r1, #29
 800b9ec:	d82c      	bhi.n	800ba48 <__sflush_r+0xb8>
 800b9ee:	4a2a      	ldr	r2, [pc, #168]	; (800ba98 <__sflush_r+0x108>)
 800b9f0:	40ca      	lsrs	r2, r1
 800b9f2:	07d6      	lsls	r6, r2, #31
 800b9f4:	d528      	bpl.n	800ba48 <__sflush_r+0xb8>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	6062      	str	r2, [r4, #4]
 800b9fa:	04d9      	lsls	r1, r3, #19
 800b9fc:	6922      	ldr	r2, [r4, #16]
 800b9fe:	6022      	str	r2, [r4, #0]
 800ba00:	d504      	bpl.n	800ba0c <__sflush_r+0x7c>
 800ba02:	1c42      	adds	r2, r0, #1
 800ba04:	d101      	bne.n	800ba0a <__sflush_r+0x7a>
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	b903      	cbnz	r3, 800ba0c <__sflush_r+0x7c>
 800ba0a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba0e:	602f      	str	r7, [r5, #0]
 800ba10:	2900      	cmp	r1, #0
 800ba12:	d0ca      	beq.n	800b9aa <__sflush_r+0x1a>
 800ba14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	d002      	beq.n	800ba22 <__sflush_r+0x92>
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f8fb 	bl	800bc18 <_free_r>
 800ba22:	2000      	movs	r0, #0
 800ba24:	6360      	str	r0, [r4, #52]	; 0x34
 800ba26:	e7c1      	b.n	800b9ac <__sflush_r+0x1c>
 800ba28:	6a21      	ldr	r1, [r4, #32]
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b0      	blx	r6
 800ba30:	1c41      	adds	r1, r0, #1
 800ba32:	d1c7      	bne.n	800b9c4 <__sflush_r+0x34>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0c4      	beq.n	800b9c4 <__sflush_r+0x34>
 800ba3a:	2b1d      	cmp	r3, #29
 800ba3c:	d001      	beq.n	800ba42 <__sflush_r+0xb2>
 800ba3e:	2b16      	cmp	r3, #22
 800ba40:	d101      	bne.n	800ba46 <__sflush_r+0xb6>
 800ba42:	602f      	str	r7, [r5, #0]
 800ba44:	e7b1      	b.n	800b9aa <__sflush_r+0x1a>
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4c:	81a3      	strh	r3, [r4, #12]
 800ba4e:	e7ad      	b.n	800b9ac <__sflush_r+0x1c>
 800ba50:	690f      	ldr	r7, [r1, #16]
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	d0a9      	beq.n	800b9aa <__sflush_r+0x1a>
 800ba56:	0793      	lsls	r3, r2, #30
 800ba58:	680e      	ldr	r6, [r1, #0]
 800ba5a:	bf08      	it	eq
 800ba5c:	694b      	ldreq	r3, [r1, #20]
 800ba5e:	600f      	str	r7, [r1, #0]
 800ba60:	bf18      	it	ne
 800ba62:	2300      	movne	r3, #0
 800ba64:	eba6 0807 	sub.w	r8, r6, r7
 800ba68:	608b      	str	r3, [r1, #8]
 800ba6a:	f1b8 0f00 	cmp.w	r8, #0
 800ba6e:	dd9c      	ble.n	800b9aa <__sflush_r+0x1a>
 800ba70:	6a21      	ldr	r1, [r4, #32]
 800ba72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba74:	4643      	mov	r3, r8
 800ba76:	463a      	mov	r2, r7
 800ba78:	4628      	mov	r0, r5
 800ba7a:	47b0      	blx	r6
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	dc06      	bgt.n	800ba8e <__sflush_r+0xfe>
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e78e      	b.n	800b9ac <__sflush_r+0x1c>
 800ba8e:	4407      	add	r7, r0
 800ba90:	eba8 0800 	sub.w	r8, r8, r0
 800ba94:	e7e9      	b.n	800ba6a <__sflush_r+0xda>
 800ba96:	bf00      	nop
 800ba98:	20400001 	.word	0x20400001

0800ba9c <_fflush_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	690b      	ldr	r3, [r1, #16]
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	b913      	cbnz	r3, 800baac <_fflush_r+0x10>
 800baa6:	2500      	movs	r5, #0
 800baa8:	4628      	mov	r0, r5
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	b118      	cbz	r0, 800bab6 <_fflush_r+0x1a>
 800baae:	6983      	ldr	r3, [r0, #24]
 800bab0:	b90b      	cbnz	r3, 800bab6 <_fflush_r+0x1a>
 800bab2:	f7ff fa4f 	bl	800af54 <__sinit>
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <_fflush_r+0x6c>)
 800bab8:	429c      	cmp	r4, r3
 800baba:	d11b      	bne.n	800baf4 <_fflush_r+0x58>
 800babc:	686c      	ldr	r4, [r5, #4]
 800babe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0ef      	beq.n	800baa6 <_fflush_r+0xa>
 800bac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bac8:	07d0      	lsls	r0, r2, #31
 800baca:	d404      	bmi.n	800bad6 <_fflush_r+0x3a>
 800bacc:	0599      	lsls	r1, r3, #22
 800bace:	d402      	bmi.n	800bad6 <_fflush_r+0x3a>
 800bad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bad2:	f7ff fadd 	bl	800b090 <__retarget_lock_acquire_recursive>
 800bad6:	4628      	mov	r0, r5
 800bad8:	4621      	mov	r1, r4
 800bada:	f7ff ff59 	bl	800b990 <__sflush_r>
 800bade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bae0:	07da      	lsls	r2, r3, #31
 800bae2:	4605      	mov	r5, r0
 800bae4:	d4e0      	bmi.n	800baa8 <_fflush_r+0xc>
 800bae6:	89a3      	ldrh	r3, [r4, #12]
 800bae8:	059b      	lsls	r3, r3, #22
 800baea:	d4dd      	bmi.n	800baa8 <_fflush_r+0xc>
 800baec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baee:	f7ff fad0 	bl	800b092 <__retarget_lock_release_recursive>
 800baf2:	e7d9      	b.n	800baa8 <_fflush_r+0xc>
 800baf4:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <_fflush_r+0x70>)
 800baf6:	429c      	cmp	r4, r3
 800baf8:	d101      	bne.n	800bafe <_fflush_r+0x62>
 800bafa:	68ac      	ldr	r4, [r5, #8]
 800bafc:	e7df      	b.n	800babe <_fflush_r+0x22>
 800bafe:	4b04      	ldr	r3, [pc, #16]	; (800bb10 <_fflush_r+0x74>)
 800bb00:	429c      	cmp	r4, r3
 800bb02:	bf08      	it	eq
 800bb04:	68ec      	ldreq	r4, [r5, #12]
 800bb06:	e7da      	b.n	800babe <_fflush_r+0x22>
 800bb08:	0800bdb0 	.word	0x0800bdb0
 800bb0c:	0800bdd0 	.word	0x0800bdd0
 800bb10:	0800bd90 	.word	0x0800bd90

0800bb14 <_lseek_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	; (800bb34 <_lseek_r+0x20>)
 800bb18:	4604      	mov	r4, r0
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	602a      	str	r2, [r5, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f7f6 fc06 	bl	8002334 <_lseek>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_lseek_r+0x1e>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_lseek_r+0x1e>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	2000093c 	.word	0x2000093c

0800bb38 <__swhatbuf_r>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	460e      	mov	r6, r1
 800bb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb40:	2900      	cmp	r1, #0
 800bb42:	b096      	sub	sp, #88	; 0x58
 800bb44:	4614      	mov	r4, r2
 800bb46:	461d      	mov	r5, r3
 800bb48:	da07      	bge.n	800bb5a <__swhatbuf_r+0x22>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	89b3      	ldrh	r3, [r6, #12]
 800bb50:	061a      	lsls	r2, r3, #24
 800bb52:	d410      	bmi.n	800bb76 <__swhatbuf_r+0x3e>
 800bb54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb58:	e00e      	b.n	800bb78 <__swhatbuf_r+0x40>
 800bb5a:	466a      	mov	r2, sp
 800bb5c:	f000 f8be 	bl	800bcdc <_fstat_r>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	dbf2      	blt.n	800bb4a <__swhatbuf_r+0x12>
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb6e:	425a      	negs	r2, r3
 800bb70:	415a      	adcs	r2, r3
 800bb72:	602a      	str	r2, [r5, #0]
 800bb74:	e7ee      	b.n	800bb54 <__swhatbuf_r+0x1c>
 800bb76:	2340      	movs	r3, #64	; 0x40
 800bb78:	2000      	movs	r0, #0
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	b016      	add	sp, #88	; 0x58
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}

0800bb80 <__smakebuf_r>:
 800bb80:	898b      	ldrh	r3, [r1, #12]
 800bb82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb84:	079d      	lsls	r5, r3, #30
 800bb86:	4606      	mov	r6, r0
 800bb88:	460c      	mov	r4, r1
 800bb8a:	d507      	bpl.n	800bb9c <__smakebuf_r+0x1c>
 800bb8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	6123      	str	r3, [r4, #16]
 800bb94:	2301      	movs	r3, #1
 800bb96:	6163      	str	r3, [r4, #20]
 800bb98:	b002      	add	sp, #8
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	ab01      	add	r3, sp, #4
 800bb9e:	466a      	mov	r2, sp
 800bba0:	f7ff ffca 	bl	800bb38 <__swhatbuf_r>
 800bba4:	9900      	ldr	r1, [sp, #0]
 800bba6:	4605      	mov	r5, r0
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f7ff fa73 	bl	800b094 <_malloc_r>
 800bbae:	b948      	cbnz	r0, 800bbc4 <__smakebuf_r+0x44>
 800bbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb4:	059a      	lsls	r2, r3, #22
 800bbb6:	d4ef      	bmi.n	800bb98 <__smakebuf_r+0x18>
 800bbb8:	f023 0303 	bic.w	r3, r3, #3
 800bbbc:	f043 0302 	orr.w	r3, r3, #2
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	e7e3      	b.n	800bb8c <__smakebuf_r+0xc>
 800bbc4:	4b0d      	ldr	r3, [pc, #52]	; (800bbfc <__smakebuf_r+0x7c>)
 800bbc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	6020      	str	r0, [r4, #0]
 800bbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	9b00      	ldr	r3, [sp, #0]
 800bbd4:	6163      	str	r3, [r4, #20]
 800bbd6:	9b01      	ldr	r3, [sp, #4]
 800bbd8:	6120      	str	r0, [r4, #16]
 800bbda:	b15b      	cbz	r3, 800bbf4 <__smakebuf_r+0x74>
 800bbdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f000 f88d 	bl	800bd00 <_isatty_r>
 800bbe6:	b128      	cbz	r0, 800bbf4 <__smakebuf_r+0x74>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f023 0303 	bic.w	r3, r3, #3
 800bbee:	f043 0301 	orr.w	r3, r3, #1
 800bbf2:	81a3      	strh	r3, [r4, #12]
 800bbf4:	89a0      	ldrh	r0, [r4, #12]
 800bbf6:	4305      	orrs	r5, r0
 800bbf8:	81a5      	strh	r5, [r4, #12]
 800bbfa:	e7cd      	b.n	800bb98 <__smakebuf_r+0x18>
 800bbfc:	0800aeed 	.word	0x0800aeed

0800bc00 <__malloc_lock>:
 800bc00:	4801      	ldr	r0, [pc, #4]	; (800bc08 <__malloc_lock+0x8>)
 800bc02:	f7ff ba45 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800bc06:	bf00      	nop
 800bc08:	20000934 	.word	0x20000934

0800bc0c <__malloc_unlock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <__malloc_unlock+0x8>)
 800bc0e:	f7ff ba40 	b.w	800b092 <__retarget_lock_release_recursive>
 800bc12:	bf00      	nop
 800bc14:	20000934 	.word	0x20000934

0800bc18 <_free_r>:
 800bc18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	d048      	beq.n	800bcb0 <_free_r+0x98>
 800bc1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc22:	9001      	str	r0, [sp, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f1a1 0404 	sub.w	r4, r1, #4
 800bc2a:	bfb8      	it	lt
 800bc2c:	18e4      	addlt	r4, r4, r3
 800bc2e:	f7ff ffe7 	bl	800bc00 <__malloc_lock>
 800bc32:	4a20      	ldr	r2, [pc, #128]	; (800bcb4 <_free_r+0x9c>)
 800bc34:	9801      	ldr	r0, [sp, #4]
 800bc36:	6813      	ldr	r3, [r2, #0]
 800bc38:	4615      	mov	r5, r2
 800bc3a:	b933      	cbnz	r3, 800bc4a <_free_r+0x32>
 800bc3c:	6063      	str	r3, [r4, #4]
 800bc3e:	6014      	str	r4, [r2, #0]
 800bc40:	b003      	add	sp, #12
 800bc42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc46:	f7ff bfe1 	b.w	800bc0c <__malloc_unlock>
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	d90b      	bls.n	800bc66 <_free_r+0x4e>
 800bc4e:	6821      	ldr	r1, [r4, #0]
 800bc50:	1862      	adds	r2, r4, r1
 800bc52:	4293      	cmp	r3, r2
 800bc54:	bf04      	itt	eq
 800bc56:	681a      	ldreq	r2, [r3, #0]
 800bc58:	685b      	ldreq	r3, [r3, #4]
 800bc5a:	6063      	str	r3, [r4, #4]
 800bc5c:	bf04      	itt	eq
 800bc5e:	1852      	addeq	r2, r2, r1
 800bc60:	6022      	streq	r2, [r4, #0]
 800bc62:	602c      	str	r4, [r5, #0]
 800bc64:	e7ec      	b.n	800bc40 <_free_r+0x28>
 800bc66:	461a      	mov	r2, r3
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	b10b      	cbz	r3, 800bc70 <_free_r+0x58>
 800bc6c:	42a3      	cmp	r3, r4
 800bc6e:	d9fa      	bls.n	800bc66 <_free_r+0x4e>
 800bc70:	6811      	ldr	r1, [r2, #0]
 800bc72:	1855      	adds	r5, r2, r1
 800bc74:	42a5      	cmp	r5, r4
 800bc76:	d10b      	bne.n	800bc90 <_free_r+0x78>
 800bc78:	6824      	ldr	r4, [r4, #0]
 800bc7a:	4421      	add	r1, r4
 800bc7c:	1854      	adds	r4, r2, r1
 800bc7e:	42a3      	cmp	r3, r4
 800bc80:	6011      	str	r1, [r2, #0]
 800bc82:	d1dd      	bne.n	800bc40 <_free_r+0x28>
 800bc84:	681c      	ldr	r4, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	6053      	str	r3, [r2, #4]
 800bc8a:	4421      	add	r1, r4
 800bc8c:	6011      	str	r1, [r2, #0]
 800bc8e:	e7d7      	b.n	800bc40 <_free_r+0x28>
 800bc90:	d902      	bls.n	800bc98 <_free_r+0x80>
 800bc92:	230c      	movs	r3, #12
 800bc94:	6003      	str	r3, [r0, #0]
 800bc96:	e7d3      	b.n	800bc40 <_free_r+0x28>
 800bc98:	6825      	ldr	r5, [r4, #0]
 800bc9a:	1961      	adds	r1, r4, r5
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	bf04      	itt	eq
 800bca0:	6819      	ldreq	r1, [r3, #0]
 800bca2:	685b      	ldreq	r3, [r3, #4]
 800bca4:	6063      	str	r3, [r4, #4]
 800bca6:	bf04      	itt	eq
 800bca8:	1949      	addeq	r1, r1, r5
 800bcaa:	6021      	streq	r1, [r4, #0]
 800bcac:	6054      	str	r4, [r2, #4]
 800bcae:	e7c7      	b.n	800bc40 <_free_r+0x28>
 800bcb0:	b003      	add	sp, #12
 800bcb2:	bd30      	pop	{r4, r5, pc}
 800bcb4:	20000098 	.word	0x20000098

0800bcb8 <_read_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4d07      	ldr	r5, [pc, #28]	; (800bcd8 <_read_r+0x20>)
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	602a      	str	r2, [r5, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f7f6 fad4 	bl	8002274 <_read>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d102      	bne.n	800bcd6 <_read_r+0x1e>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	b103      	cbz	r3, 800bcd6 <_read_r+0x1e>
 800bcd4:	6023      	str	r3, [r4, #0]
 800bcd6:	bd38      	pop	{r3, r4, r5, pc}
 800bcd8:	2000093c 	.word	0x2000093c

0800bcdc <_fstat_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d07      	ldr	r5, [pc, #28]	; (800bcfc <_fstat_r+0x20>)
 800bce0:	2300      	movs	r3, #0
 800bce2:	4604      	mov	r4, r0
 800bce4:	4608      	mov	r0, r1
 800bce6:	4611      	mov	r1, r2
 800bce8:	602b      	str	r3, [r5, #0]
 800bcea:	f7f6 fb08 	bl	80022fe <_fstat>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	d102      	bne.n	800bcf8 <_fstat_r+0x1c>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	b103      	cbz	r3, 800bcf8 <_fstat_r+0x1c>
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	bd38      	pop	{r3, r4, r5, pc}
 800bcfa:	bf00      	nop
 800bcfc:	2000093c 	.word	0x2000093c

0800bd00 <_isatty_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4d06      	ldr	r5, [pc, #24]	; (800bd1c <_isatty_r+0x1c>)
 800bd04:	2300      	movs	r3, #0
 800bd06:	4604      	mov	r4, r0
 800bd08:	4608      	mov	r0, r1
 800bd0a:	602b      	str	r3, [r5, #0]
 800bd0c:	f7f6 fb07 	bl	800231e <_isatty>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_isatty_r+0x1a>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_isatty_r+0x1a>
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	2000093c 	.word	0x2000093c

0800bd20 <_init>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	bf00      	nop
 800bd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd26:	bc08      	pop	{r3}
 800bd28:	469e      	mov	lr, r3
 800bd2a:	4770      	bx	lr

0800bd2c <_fini>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr
