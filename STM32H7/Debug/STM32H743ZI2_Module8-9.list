
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800c470  0800c470  0001c470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c54c  0800c54c  0001c54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c554  0800c554  0001c554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c558  0800c558  0001c558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800c55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007f8  20000074  0800c5d0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000086c  0800c5d0  0002086c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002189e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003454  00000000  00000000  00041940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001378  00000000  00000000  00044d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001280  00000000  00000000  00046110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003c9f  00000000  00000000  00047390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180c2  00000000  00000000  0004b02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166d6c  00000000  00000000  000630f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c9e5d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ac0  00000000  00000000  001c9eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c458 	.word	0x0800c458

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800c458 	.word	0x0800c458

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <DWT_Delay_us+0x40>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000686:	f005 fec1 	bl	800640c <HAL_RCC_GetHCLKFreq>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <DWT_Delay_us+0x44>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0c9b      	lsrs	r3, r3, #18
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800069c:	bf00      	nop
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <DWT_Delay_us+0x40>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f8      	bcc.n	800069e <DWT_Delay_us+0x26>
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e0001000 	.word	0xe0001000
 80006bc:	431bde83 	.word	0x431bde83

080006c0 <RS485_Encoder>:
				TIM15->CCR2 = 0;
			}
		}
}
uint16_t RS485_Encoder(uint8_t _address)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	uint8_t _buff[2];
	DWT_Delay_us(20);
 80006ca:	2014      	movs	r0, #20
 80006cc:	f7ff ffd4 	bl	8000678 <DWT_Delay_us>
	HAL_UART_Transmit_DMA(&huart4, &_address, 1);
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <RS485_Encoder+0x54>)
 80006d8:	f008 fdcc 	bl	8009274 <HAL_UART_Transmit_DMA>
	DWT_Delay_us(30);
 80006dc:	201e      	movs	r0, #30
 80006de:	f7ff ffcb 	bl	8000678 <DWT_Delay_us>
	HAL_UART_Receive_DMA(&huart4, _buff, 2);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2202      	movs	r2, #2
 80006e8:	4619      	mov	r1, r3
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <RS485_Encoder+0x54>)
 80006ec:	f008 fe42 	bl	8009374 <HAL_UART_Receive_DMA>
	DWT_Delay_us(40);
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f7ff ffc1 	bl	8000678 <DWT_Delay_us>
	return _buff[0] + (((_buff[1] & 0xFC) >> 2) << 8);
 80006f6:	7b3b      	ldrb	r3, [r7, #12]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	7b7b      	ldrb	r3, [r7, #13]
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	b29b      	uxth	r3, r3
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b29b      	uxth	r3, r3
 8000706:	4413      	add	r3, r2
 8000708:	b29b      	uxth	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000680 	.word	0x20000680

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 fd0c 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f852 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 fe16 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000728:	f000 fcc4 	bl	80010b4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800072c:	f000 fc76 	bl	800101c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000730:	f000 f9ca 	bl	8000ac8 <MX_TIM2_Init>
  MX_UART4_Init();
 8000734:	f000 fc22 	bl	8000f7c <MX_UART4_Init>
  MX_TIM4_Init();
 8000738:	f000 fab6 	bl	8000ca8 <MX_TIM4_Init>
  MX_SPI3_Init();
 800073c:	f000 f8c0 	bl	80008c0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000740:	f000 f914 	bl	800096c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000744:	f000 fa38 	bl	8000bb8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000748:	f000 fb26 	bl	8000d98 <MX_TIM5_Init>
  MX_TIM15_Init();
 800074c:	f000 fb72 	bl	8000e34 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <main+0x9c>)
 8000756:	f004 feab 	bl	80054b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2102      	movs	r1, #2
 800075e:	4816      	ldr	r0, [pc, #88]	; (80007b8 <main+0xa0>)
 8000760:	f004 fea6 	bl	80054b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <main+0x9c>)
 800076c:	f004 fea0 	bl	80054b0 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <main+0xa4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <main+0xa4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0220 	orr.w	r2, r2, #32
 800077e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <main+0xa4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <main+0xa4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800078e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000790:	2204      	movs	r2, #4
 8000792:	490b      	ldr	r1, [pc, #44]	; (80007c0 <main+0xa8>)
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <main+0xa4>)
 8000796:	f008 fd27 	bl	80091e8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      printf("%u", RS485_Encoder(0x2C));
 800079a:	202c      	movs	r0, #44	; 0x2c
 800079c:	f7ff ff90 	bl	80006c0 <RS485_Encoder>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <main+0xac>)
 80007a6:	f00a ff01 	bl	800b5ac <iprintf>
      HAL_Delay(100);
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f001 fd56 	bl	800225c <HAL_Delay>
      printf("%u", RS485_Encoder(0x2C));
 80007b0:	e7f3      	b.n	800079a <main+0x82>
 80007b2:	bf00      	nop
 80007b4:	58020400 	.word	0x58020400
 80007b8:	58021000 	.word	0x58021000
 80007bc:	200002c8 	.word	0x200002c8
 80007c0:	2000084c 	.word	0x2000084c
 80007c4:	0800c470 	.word	0x0800c470

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09c      	sub	sp, #112	; 0x70
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	224c      	movs	r2, #76	; 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f00a fee0 	bl	800b59c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a feda 	bl	800b59c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f004 fe95 	bl	8005518 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <SystemClock_Config+0xf0>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <SystemClock_Config+0xf0>)
 80007f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <SystemClock_Config+0xf0>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <SystemClock_Config+0xf4>)
 800080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080c:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <SystemClock_Config+0xf4>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xf4>)
 8000816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000820:	bf00      	nop
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <SystemClock_Config+0xf0>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082e:	d1f8      	bne.n	8000822 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000834:	2301      	movs	r3, #1
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000848:	233c      	movs	r3, #60	; 0x3c
 800084a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000850:	2306      	movs	r3, #6
 8000852:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000858:	230c      	movs	r3, #12
 800085a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085c:	2300      	movs	r3, #0
 800085e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	4618      	mov	r0, r3
 800086a:	f004 fe8f 	bl	800558c <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000874:	f000 fee5 	bl	8001642 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000878:	233f      	movs	r3, #63	; 0x3f
 800087a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2303      	movs	r3, #3
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000884:	2308      	movs	r3, #8
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000894:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2104      	movs	r1, #4
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fa84 	bl	8005dac <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008aa:	f000 feca 	bl	8001642 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3770      	adds	r7, #112	; 0x70
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	58024800 	.word	0x58024800
 80008bc:	58000400 	.word	0x58000400

080008c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_SPI3_Init+0xa8>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008da:	2203      	movs	r2, #3
 80008dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_SPI3_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI3_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI3_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI3_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI3_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI3_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_SPI3_Init+0xa4>)
 8000950:	f007 f91a 	bl	8007b88 <HAL_SPI_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800095a:	f000 fe72 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000530 	.word	0x20000530
 8000968:	40003c00 	.word	0x40003c00

0800096c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b09a      	sub	sp, #104	; 0x68
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	222c      	movs	r2, #44	; 0x2c
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f00a fdf8 	bl	800b59c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009ae:	4a45      	ldr	r2, [pc, #276]	; (8000ac4 <MX_TIM1_Init+0x158>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80009b2:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009b4:	22ef      	movs	r2, #239	; 0xef
 80009b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009c0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80009c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009cc:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d8:	4839      	ldr	r0, [pc, #228]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009da:	f007 f9f2 	bl	8007dc2 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 fe2d 	bl	8001642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009f2:	4619      	mov	r1, r3
 80009f4:	4832      	ldr	r0, [pc, #200]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009f6:	f007 fccb 	bl	8008390 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a00:	f000 fe1f 	bl	8001642 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a04:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <MX_TIM1_Init+0x154>)
 8000a06:	f007 fa33 	bl	8007e70 <HAL_TIM_PWM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a10:	f000 fe17 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a24:	4619      	mov	r1, r3
 8000a26:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <MX_TIM1_Init+0x154>)
 8000a28:	f008 f9d4 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a32:	f000 fe06 	bl	8001642 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a36:	2360      	movs	r3, #96	; 0x60
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000a3a:	f240 1339 	movw	r3, #313	; 0x139
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <MX_TIM1_Init+0x154>)
 8000a5e:	f007 fb87 	bl	8008170 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000a68:	f000 fdeb 	bl	8001642 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_TIM1_Init+0x154>)
 8000aa2:	f008 fa1f 	bl	8008ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000aac:	f000 fdc9 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <MX_TIM1_Init+0x154>)
 8000ab2:	f000 fee5 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8000ab6:	bf00      	nop
 8000ab8:	3768      	adds	r7, #104	; 0x68
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000634 	.word	0x20000634
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b04:	22ef      	movs	r2, #239	; 0xef
 8000b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b10:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b22:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b24:	f007 f94d 	bl	8007dc2 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 fd88 	bl	8001642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b40:	f007 fc26 	bl	8008390 <HAL_TIM_ConfigClockSource>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b4a:	f000 fd7a 	bl	8001642 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b4e:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b50:	f007 f98e 	bl	8007e70 <HAL_TIM_PWM_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b5a:	f000 fd72 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b6e:	f008 f931 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b78:	f000 fd63 	bl	8001642 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7c:	2360      	movs	r3, #96	; 0x60
 8000b7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000b80:	f240 1339 	movw	r3, #313	; 0x139
 8000b84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2208      	movs	r2, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000b96:	f007 faeb 	bl	8008170 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ba0:	f000 fd4f 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <MX_TIM2_Init+0xec>)
 8000ba6:	f000 fe6b 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8000baa:	bf00      	nop
 8000bac:	3738      	adds	r7, #56	; 0x38
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000788 	.word	0x20000788

08000bb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	615a      	str	r2, [r3, #20]
 8000be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000bec:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <MX_TIM3_Init+0xec>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000bf2:	22ef      	movs	r2, #239	; 0xef
 8000bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000bfe:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c10:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c12:	f007 f8d6 	bl	8007dc2 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c1c:	f000 fd11 	bl	8001642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c2e:	f007 fbaf 	bl	8008390 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c38:	f000 fd03 	bl	8001642 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c3c:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c3e:	f007 f917 	bl	8007e70 <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c48:	f000 fcfb 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c5c:	f008 f8ba 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c66:	f000 fcec 	bl	8001642 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6a:	2360      	movs	r3, #96	; 0x60
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c6e:	f240 1339 	movw	r3, #313	; 0x139
 8000c72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c84:	f007 fa74 	bl	8008170 <HAL_TIM_PWM_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c8e:	f000 fcd8 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <MX_TIM3_Init+0xe8>)
 8000c94:	f000 fdf4 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8000c98:	bf00      	nop
 8000c9a:	3738      	adds	r7, #56	; 0x38
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200004e4 	.word	0x200004e4
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000cdc:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <MX_TIM4_Init+0xec>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000ce2:	22ef      	movs	r2, #239	; 0xef
 8000ce4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000cee:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000cf2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d00:	4823      	ldr	r0, [pc, #140]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000d02:	f007 f85e 	bl	8007dc2 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d0c:	f000 fc99 	bl	8001642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481c      	ldr	r0, [pc, #112]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000d1e:	f007 fb37 	bl	8008390 <HAL_TIM_ConfigClockSource>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d28:	f000 fc8b 	bl	8001642 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d2c:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000d2e:	f007 f89f 	bl	8007e70 <HAL_TIM_PWM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d38:	f000 fc83 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000d4c:	f008 f842 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d56:	f000 fc74 	bl	8001642 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	; 0x60
 8000d5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d5e:	f240 1339 	movw	r3, #313	; 0x139
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2208      	movs	r2, #8
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000d74:	f007 f9fc 	bl	8008170 <HAL_TIM_PWM_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d7e:	f000 fc60 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM4_Init+0xe8>)
 8000d84:	f000 fd7c 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3738      	adds	r7, #56	; 0x38
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000204 	.word	0x20000204
 8000d94:	40000800 	.word	0x40000800

08000d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <MX_TIM5_Init+0x98>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dbe:	22ef      	movs	r2, #239	; 0xef
 8000dc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dde:	f006 fff0 	bl	8007dc2 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000de8:	f000 fc2b 	bl	8001642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000dfa:	f007 fac9 	bl	8008390 <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 fc1d 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM5_Init+0x94>)
 8000e16:	f007 ffdd 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 fc0f 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000498 	.word	0x20000498
 8000e30:	40000c00 	.word	0x40000c00

08000e34 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09a      	sub	sp, #104	; 0x68
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	222c      	movs	r2, #44	; 0x2c
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00a fb94 	bl	800b59c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e74:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <MX_TIM15_Init+0x144>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e7c:	22ef      	movs	r2, #239	; 0xef
 8000e7e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e88:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e8c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000ea0:	4834      	ldr	r0, [pc, #208]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000ea2:	f006 ff8e 	bl	8007dc2 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fbc9 	bl	8001642 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482d      	ldr	r0, [pc, #180]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000ebe:	f007 fa67 	bl	8008390 <HAL_TIM_ConfigClockSource>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000ec8:	f000 fbbb 	bl	8001642 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000ecc:	4829      	ldr	r0, [pc, #164]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000ece:	f006 ffcf 	bl	8007e70 <HAL_TIM_PWM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000ed8:	f000 fbb3 	bl	8001642 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ee4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000eec:	f007 ff72 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000ef6:	f000 fba4 	bl	8001642 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efa:	2360      	movs	r3, #96	; 0x60
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000efe:	f240 1339 	movw	r3, #313	; 0x139
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000f22:	f007 f925 	bl	8008170 <HAL_TIM_PWM_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000f2c:	f000 fb89 	bl	8001642 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000f58:	f007 ffc4 	bl	8008ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000f62:	f000 fb6e 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM15_Init+0x140>)
 8000f68:	f000 fc8a 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8000f6c:	bf00      	nop
 8000f6e:	3768      	adds	r7, #104	; 0x68
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200003d4 	.word	0x200003d4
 8000f78:	40014000 	.word	0x40014000

08000f7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_UART4_Init+0x98>)
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <MX_UART4_Init+0x9c>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_UART4_Init+0x98>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_UART4_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_UART4_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_UART4_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_UART4_Init+0x98>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_UART4_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_UART4_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_UART4_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_UART4_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_UART4_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <MX_UART4_Init+0x98>)
 8000fcc:	f00a f930 	bl	800b230 <HAL_RS485Ex_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8000fd6:	f000 fb34 	bl	8001642 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_UART4_Init+0x98>)
 8000fde:	f00a f9e8 	bl	800b3b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_UART4_Init+0x70>
  {
    Error_Handler();
 8000fe8:	f000 fb2b 	bl	8001642 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_UART4_Init+0x98>)
 8000ff0:	f00a fa1d 	bl	800b42e <HAL_UARTEx_SetRxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8000ffa:	f000 fb22 	bl	8001642 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_UART4_Init+0x98>)
 8001000:	f00a f99e 	bl	800b340 <HAL_UARTEx_DisableFifoMode>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_UART4_Init+0x92>
  {
    Error_Handler();
 800100a:	f000 fb1a 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000680 	.word	0x20000680
 8001018:	40004c00 	.word	0x40004c00

0800101c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <MX_USART3_UART_Init+0x94>)
 8001024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_USART3_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_USART3_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART3_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001064:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001066:	f007 ffd9 	bl	800901c <HAL_UART_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 fae7 	bl	8001642 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_USART3_UART_Init+0x90>)
 8001078:	f00a f99b 	bl	800b3b2 <HAL_UARTEx_SetTxFifoThreshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001082:	f000 fade 	bl	8001642 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <MX_USART3_UART_Init+0x90>)
 800108a:	f00a f9d0 	bl	800b42e <HAL_UARTEx_SetRxFifoThreshold>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001094:	f000 fad5 	bl	8001642 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_USART3_UART_Init+0x90>)
 800109a:	f00a f951 	bl	800b340 <HAL_UARTEx_DisableFifoMode>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010a4:	f000 facd 	bl	8001642 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200002c8 	.word	0x200002c8
 80010b0:	40004800 	.word	0x40004800

080010b4 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	4b9b      	ldr	r3, [pc, #620]	; (8001328 <MX_DMA_Init+0x274>)
 80010bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c0:	4a99      	ldr	r2, [pc, #612]	; (8001328 <MX_DMA_Init+0x274>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ca:	4b97      	ldr	r3, [pc, #604]	; (8001328 <MX_DMA_Init+0x274>)
 80010cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d8:	4b93      	ldr	r3, [pc, #588]	; (8001328 <MX_DMA_Init+0x274>)
 80010da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010de:	4a92      	ldr	r2, [pc, #584]	; (8001328 <MX_DMA_Init+0x274>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010e8:	4b8f      	ldr	r3, [pc, #572]	; (8001328 <MX_DMA_Init+0x274>)
 80010ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 80010f6:	4b8d      	ldr	r3, [pc, #564]	; (800132c <MX_DMA_Init+0x278>)
 80010f8:	4a8d      	ldr	r2, [pc, #564]	; (8001330 <MX_DMA_Init+0x27c>)
 80010fa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 80010fc:	4b8b      	ldr	r3, [pc, #556]	; (800132c <MX_DMA_Init+0x278>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001102:	4b8a      	ldr	r3, [pc, #552]	; (800132c <MX_DMA_Init+0x278>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001108:	4b88      	ldr	r3, [pc, #544]	; (800132c <MX_DMA_Init+0x278>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b86      	ldr	r3, [pc, #536]	; (800132c <MX_DMA_Init+0x278>)
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001118:	4b84      	ldr	r3, [pc, #528]	; (800132c <MX_DMA_Init+0x278>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111e:	4b83      	ldr	r3, [pc, #524]	; (800132c <MX_DMA_Init+0x278>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 8001124:	4b81      	ldr	r3, [pc, #516]	; (800132c <MX_DMA_Init+0x278>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b80      	ldr	r3, [pc, #512]	; (800132c <MX_DMA_Init+0x278>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001130:	4b7e      	ldr	r3, [pc, #504]	; (800132c <MX_DMA_Init+0x278>)
 8001132:	2204      	movs	r2, #4
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001136:	4b7d      	ldr	r3, [pc, #500]	; (800132c <MX_DMA_Init+0x278>)
 8001138:	2203      	movs	r2, #3
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <MX_DMA_Init+0x278>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001142:	4b7a      	ldr	r3, [pc, #488]	; (800132c <MX_DMA_Init+0x278>)
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 8001148:	4878      	ldr	r0, [pc, #480]	; (800132c <MX_DMA_Init+0x278>)
 800114a:	f001 f9c7 	bl	80024dc <HAL_DMA_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8001154:	f000 fa75 	bl	8001642 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8001158:	4b76      	ldr	r3, [pc, #472]	; (8001334 <MX_DMA_Init+0x280>)
 800115a:	4a77      	ldr	r2, [pc, #476]	; (8001338 <MX_DMA_Init+0x284>)
 800115c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 800115e:	4b75      	ldr	r3, [pc, #468]	; (8001334 <MX_DMA_Init+0x280>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001164:	4b73      	ldr	r3, [pc, #460]	; (8001334 <MX_DMA_Init+0x280>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 800116a:	4b72      	ldr	r3, [pc, #456]	; (8001334 <MX_DMA_Init+0x280>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	4b70      	ldr	r3, [pc, #448]	; (8001334 <MX_DMA_Init+0x280>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800117a:	4b6e      	ldr	r3, [pc, #440]	; (8001334 <MX_DMA_Init+0x280>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <MX_DMA_Init+0x280>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8001186:	4b6b      	ldr	r3, [pc, #428]	; (8001334 <MX_DMA_Init+0x280>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 800118c:	4b69      	ldr	r3, [pc, #420]	; (8001334 <MX_DMA_Init+0x280>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <MX_DMA_Init+0x280>)
 8001194:	2204      	movs	r2, #4
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <MX_DMA_Init+0x280>)
 800119a:	2203      	movs	r2, #3
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 800119e:	4b65      	ldr	r3, [pc, #404]	; (8001334 <MX_DMA_Init+0x280>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011a4:	4b63      	ldr	r3, [pc, #396]	; (8001334 <MX_DMA_Init+0x280>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 80011aa:	4862      	ldr	r0, [pc, #392]	; (8001334 <MX_DMA_Init+0x280>)
 80011ac:	f001 f996 	bl	80024dc <HAL_DMA_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 80011b6:	f000 fa44 	bl	8001642 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 80011ba:	4b60      	ldr	r3, [pc, #384]	; (800133c <MX_DMA_Init+0x288>)
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <MX_DMA_Init+0x28c>)
 80011be:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 80011c0:	4b5e      	ldr	r3, [pc, #376]	; (800133c <MX_DMA_Init+0x288>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <MX_DMA_Init+0x288>)
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 80011cc:	4b5b      	ldr	r3, [pc, #364]	; (800133c <MX_DMA_Init+0x288>)
 80011ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <MX_DMA_Init+0x288>)
 80011d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011da:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011dc:	4b57      	ldr	r3, [pc, #348]	; (800133c <MX_DMA_Init+0x288>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <MX_DMA_Init+0x288>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <MX_DMA_Init+0x288>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 80011ee:	4b53      	ldr	r3, [pc, #332]	; (800133c <MX_DMA_Init+0x288>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011f4:	4b51      	ldr	r3, [pc, #324]	; (800133c <MX_DMA_Init+0x288>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011fa:	4b50      	ldr	r3, [pc, #320]	; (800133c <MX_DMA_Init+0x288>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001200:	4b4e      	ldr	r3, [pc, #312]	; (800133c <MX_DMA_Init+0x288>)
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <MX_DMA_Init+0x288>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 800120c:	484b      	ldr	r0, [pc, #300]	; (800133c <MX_DMA_Init+0x288>)
 800120e:	f001 f965 	bl	80024dc <HAL_DMA_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 8001218:	f000 fa13 	bl	8001642 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 800121c:	4b49      	ldr	r3, [pc, #292]	; (8001344 <MX_DMA_Init+0x290>)
 800121e:	4a4a      	ldr	r2, [pc, #296]	; (8001348 <MX_DMA_Init+0x294>)
 8001220:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 8001222:	4b48      	ldr	r3, [pc, #288]	; (8001344 <MX_DMA_Init+0x290>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001228:	4b46      	ldr	r3, [pc, #280]	; (8001344 <MX_DMA_Init+0x290>)
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <MX_DMA_Init+0x290>)
 8001230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001234:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <MX_DMA_Init+0x290>)
 8001238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <MX_DMA_Init+0x290>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001244:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_DMA_Init+0x290>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <MX_DMA_Init+0x290>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <MX_DMA_Init+0x290>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_DMA_Init+0x290>)
 8001258:	2204      	movs	r2, #4
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <MX_DMA_Init+0x290>)
 800125e:	2203      	movs	r2, #3
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <MX_DMA_Init+0x290>)
 8001264:	2200      	movs	r2, #0
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <MX_DMA_Init+0x290>)
 800126a:	2200      	movs	r2, #0
 800126c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 800126e:	4835      	ldr	r0, [pc, #212]	; (8001344 <MX_DMA_Init+0x290>)
 8001270:	f001 f934 	bl	80024dc <HAL_DMA_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 800127a:	f000 f9e2 	bl	8001642 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <MX_DMA_Init+0x298>)
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <MX_DMA_Init+0x29c>)
 8001282:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <MX_DMA_Init+0x298>)
 8001286:	2200      	movs	r2, #0
 8001288:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_DMA_Init+0x298>)
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <MX_DMA_Init+0x298>)
 8001292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001296:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_DMA_Init+0x298>)
 800129a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_DMA_Init+0x298>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_DMA_Init+0x298>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_DMA_Init+0x298>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_DMA_Init+0x298>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_DMA_Init+0x298>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_DMA_Init+0x298>)
 80012c0:	2203      	movs	r2, #3
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_DMA_Init+0x298>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_DMA_Init+0x298>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <MX_DMA_Init+0x298>)
 80012d2:	f001 f903 	bl	80024dc <HAL_DMA_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 80012dc:	f000 f9b1 	bl	8001642 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	200c      	movs	r0, #12
 80012e6:	f001 f8c4 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012ea:	200c      	movs	r0, #12
 80012ec:	f001 f8db 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	200d      	movs	r0, #13
 80012f6:	f001 f8bc 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012fa:	200d      	movs	r0, #13
 80012fc:	f001 f8d3 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2038      	movs	r0, #56	; 0x38
 8001306:	f001 f8b4 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800130a:	2038      	movs	r0, #56	; 0x38
 800130c:	f001 f8cb 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2039      	movs	r0, #57	; 0x39
 8001316:	f001 f8ac 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800131a:	2039      	movs	r0, #57	; 0x39
 800131c:	f001 f8c3 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58024400 	.word	0x58024400
 800132c:	20000358 	.word	0x20000358
 8001330:	40020058 	.word	0x40020058
 8001334:	20000710 	.word	0x20000710
 8001338:	40020440 	.word	0x40020440
 800133c:	200005b8 	.word	0x200005b8
 8001340:	40020458 	.word	0x40020458
 8001344:	2000009c 	.word	0x2000009c
 8001348:	40020470 	.word	0x40020470
 800134c:	20000114 	.word	0x20000114
 8001350:	40020488 	.word	0x40020488

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	; 0x30
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <MX_GPIO_Init+0x204>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4a79      	ldr	r2, [pc, #484]	; (8001558 <MX_GPIO_Init+0x204>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b77      	ldr	r3, [pc, #476]	; (8001558 <MX_GPIO_Init+0x204>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4b73      	ldr	r3, [pc, #460]	; (8001558 <MX_GPIO_Init+0x204>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4a72      	ldr	r2, [pc, #456]	; (8001558 <MX_GPIO_Init+0x204>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <MX_GPIO_Init+0x204>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <MX_GPIO_Init+0x204>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a6a      	ldr	r2, [pc, #424]	; (8001558 <MX_GPIO_Init+0x204>)
 80013ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b68      	ldr	r3, [pc, #416]	; (8001558 <MX_GPIO_Init+0x204>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <MX_GPIO_Init+0x204>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a63      	ldr	r2, [pc, #396]	; (8001558 <MX_GPIO_Init+0x204>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b60      	ldr	r3, [pc, #384]	; (8001558 <MX_GPIO_Init+0x204>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <MX_GPIO_Init+0x204>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a5b      	ldr	r2, [pc, #364]	; (8001558 <MX_GPIO_Init+0x204>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <MX_GPIO_Init+0x204>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <MX_GPIO_Init+0x204>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a54      	ldr	r2, [pc, #336]	; (8001558 <MX_GPIO_Init+0x204>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b51      	ldr	r3, [pc, #324]	; (8001558 <MX_GPIO_Init+0x204>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <MX_GPIO_Init+0x204>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <MX_GPIO_Init+0x204>)
 8001426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <MX_GPIO_Init+0x204>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800143c:	2200      	movs	r2, #0
 800143e:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001442:	4846      	ldr	r0, [pc, #280]	; (800155c <MX_GPIO_Init+0x208>)
 8001444:	f004 f834 	bl	80054b0 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f24c 0102 	movw	r1, #49154	; 0xc002
 800144e:	4844      	ldr	r0, [pc, #272]	; (8001560 <MX_GPIO_Init+0x20c>)
 8001450:	f004 f82e 	bl	80054b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145a:	4842      	ldr	r0, [pc, #264]	; (8001564 <MX_GPIO_Init+0x210>)
 800145c:	f004 f828 	bl	80054b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	4840      	ldr	r0, [pc, #256]	; (8001568 <MX_GPIO_Init+0x214>)
 8001468:	f004 f822 	bl	80054b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800146c:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001470:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	4835      	ldr	r0, [pc, #212]	; (800155c <MX_GPIO_Init+0x208>)
 8001486:	f003 fe63 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 800148a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <MX_GPIO_Init+0x218>)
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4830      	ldr	r0, [pc, #192]	; (8001560 <MX_GPIO_Init+0x20c>)
 80014a0:	f003 fe56 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80014a4:	f24c 0302 	movw	r3, #49154	; 0xc002
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4828      	ldr	r0, [pc, #160]	; (8001560 <MX_GPIO_Init+0x20c>)
 80014be:	f003 fe47 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4822      	ldr	r0, [pc, #136]	; (8001564 <MX_GPIO_Init+0x210>)
 80014dc:	f003 fe38 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80014e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	481b      	ldr	r0, [pc, #108]	; (8001568 <MX_GPIO_Init+0x214>)
 80014fa:	f003 fe29 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80014fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_GPIO_Init+0x218>)
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <MX_GPIO_Init+0x21c>)
 8001514:	f003 fe1c 	bl	8005150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001518:	23c0      	movs	r3, #192	; 0xc0
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_GPIO_Init+0x218>)
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_GPIO_Init+0x208>)
 800152c:	f003 fe10 	bl	8005150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2103      	movs	r1, #3
 8001534:	2017      	movs	r0, #23
 8001536:	f000 ff9c 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800153a:	2017      	movs	r0, #23
 800153c:	f000 ffb3 	bl	80024a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2103      	movs	r1, #3
 8001544:	2028      	movs	r0, #40	; 0x28
 8001546:	f000 ff94 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800154a:	2028      	movs	r0, #40	; 0x28
 800154c:	f000 ffab 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 8001550:	bf00      	nop
 8001552:	3730      	adds	r7, #48	; 0x30
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	58024400 	.word	0x58024400
 800155c:	58020400 	.word	0x58020400
 8001560:	58021000 	.word	0x58021000
 8001564:	58020c00 	.word	0x58020c00
 8001568:	58020800 	.word	0x58020800
 800156c:	11110000 	.word	0x11110000
 8001570:	58021800 	.word	0x58021800

08001574 <__io_putchar>:
//	double err, errValue, diffValue;
//}

/** Usable for printf function **/
int __io_putchar(int ch)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &*c, 1, 10);
 8001582:	f107 010c 	add.w	r1, r7, #12
 8001586:	230a      	movs	r3, #10
 8001588:	2201      	movs	r2, #1
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <__io_putchar+0x28>)
 800158c:	f007 fd96 	bl	80090bc <HAL_UART_Transmit>
 return ch;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002c8 	.word	0x200002c8

080015a0 <_write>:

int _write(int file,char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e009      	b.n	80015c6 <_write+0x26>
 {
 __io_putchar(*ptr++);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	60ba      	str	r2, [r7, #8]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffda 	bl	8001574 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf1      	blt.n	80015b2 <_write+0x12>
 }
return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_UART_RxCpltCallback+0x24>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d104      	bne.n	80015f2 <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 80015e8:	2204      	movs	r2, #4
 80015ea:	4905      	ldr	r1, [pc, #20]	; (8001600 <HAL_UART_RxCpltCallback+0x28>)
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <HAL_UART_RxCpltCallback+0x24>)
 80015ee:	f007 fdfb 	bl	80091e8 <HAL_UART_Receive_IT>
	}
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002c8 	.word	0x200002c8
 8001600:	2000084c 	.word	0x2000084c

08001604 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]


}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  if (htim == &htim5)
  {

  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001646:	b672      	cpsid	i
}
 8001648:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164a:	e7fe      	b.n	800164a <Error_Handler+0x8>

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_MspInit+0x30>)
 8001654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x30>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x30>)
 8001664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	58024400 	.word	0x58024400

08001680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0b8      	sub	sp, #224	; 0xe0
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	22bc      	movs	r2, #188	; 0xbc
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f009 ff7b 	bl	800b59c <memset>
  if(hspi->Instance==SPI3)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a25      	ldr	r2, [pc, #148]	; (8001740 <HAL_SPI_MspInit+0xc0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d142      	bne.n	8001736 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f004 ff00 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016ca:	f7ff ffba 	bl	8001642 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_SPI_MspInit+0xc4>)
 80016d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_SPI_MspInit+0xc4>)
 80016d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_SPI_MspInit+0xc4>)
 80016e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_SPI_MspInit+0xc4>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_SPI_MspInit+0xc4>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_SPI_MspInit+0xc4>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800170a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800170e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001724:	2306      	movs	r3, #6
 8001726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_SPI_MspInit+0xc8>)
 8001732:	f003 fd0d 	bl	8005150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	37e0      	adds	r7, #224	; 0xe0
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40003c00 	.word	0x40003c00
 8001744:	58024400 	.word	0x58024400
 8001748:	58020800 	.word	0x58020800

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a43      	ldr	r2, [pc, #268]	; (8001868 <HAL_TIM_Base_MspInit+0x11c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10f      	bne.n	800177e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175e:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001764:	4a41      	ldr	r2, [pc, #260]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800177c:	e06f      	b.n	800185e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d10f      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 800178a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178e:	4a37      	ldr	r2, [pc, #220]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 800179a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
}
 80017a6:	e05a      	b.n	800185e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_TIM_Base_MspInit+0x124>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10f      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 80017b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b8:	4a2c      	ldr	r2, [pc, #176]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 80017ba:	f043 0302 	orr.w	r3, r3, #2
 80017be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
}
 80017d0:	e045      	b.n	800185e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_TIM_Base_MspInit+0x128>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10f      	bne.n	80017fc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 80017de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 80017ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
}
 80017fa:	e030      	b.n	800185e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_TIM_Base_MspInit+0x12c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d117      	bne.n	8001836 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f000 fe22 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800182e:	2032      	movs	r0, #50	; 0x32
 8001830:	f000 fe39 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001834:	e013      	b.n	800185e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_TIM_Base_MspInit+0x130>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d10e      	bne.n	800185e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_TIM_Base_MspInit+0x120>)
 8001852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40010000 	.word	0x40010000
 800186c:	58024400 	.word	0x58024400
 8001870:	40000400 	.word	0x40000400
 8001874:	40000800 	.word	0x40000800
 8001878:	40000c00 	.word	0x40000c00
 800187c:	40014000 	.word	0x40014000

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a5e      	ldr	r2, [pc, #376]	; (8001a18 <HAL_TIM_MspPostInit+0x198>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d120      	bne.n	80018e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a2:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80018c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4850      	ldr	r0, [pc, #320]	; (8001a20 <HAL_TIM_MspPostInit+0x1a0>)
 80018de:	f003 fc37 	bl	8005150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80018e2:	e094      	b.n	8001a0e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d120      	bne.n	8001930 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800190c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800191e:	2301      	movs	r3, #1
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4619      	mov	r1, r3
 8001928:	483e      	ldr	r0, [pc, #248]	; (8001a24 <HAL_TIM_MspPostInit+0x1a4>)
 800192a:	f003 fc11 	bl	8005150 <HAL_GPIO_Init>
}
 800192e:	e06e      	b.n	8001a0e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <HAL_TIM_MspPostInit+0x1a8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d11f      	bne.n	800197a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001958:	2340      	movs	r3, #64	; 0x40
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001968:	2302      	movs	r3, #2
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	482e      	ldr	r0, [pc, #184]	; (8001a2c <HAL_TIM_MspPostInit+0x1ac>)
 8001974:	f003 fbec 	bl	8005150 <HAL_GPIO_Init>
}
 8001978:	e049      	b.n	8001a0e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_TIM_MspPostInit+0x1b0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d120      	bne.n	80019c6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198a:	4a24      	ldr	r2, [pc, #144]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4819      	ldr	r0, [pc, #100]	; (8001a24 <HAL_TIM_MspPostInit+0x1a4>)
 80019c0:	f003 fbc6 	bl	8005150 <HAL_GPIO_Init>
}
 80019c4:	e023      	b.n	8001a0e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a1a      	ldr	r2, [pc, #104]	; (8001a34 <HAL_TIM_MspPostInit+0x1b4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d11e      	bne.n	8001a0e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_TIM_MspPostInit+0x19c>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80019fe:	2304      	movs	r3, #4
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_TIM_MspPostInit+0x1a0>)
 8001a0a:	f003 fba1 	bl	8005150 <HAL_GPIO_Init>
}
 8001a0e:	bf00      	nop
 8001a10:	3730      	adds	r7, #48	; 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	58021000 	.word	0x58021000
 8001a24:	58020400 	.word	0x58020400
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	58020000 	.word	0x58020000
 8001a30:	40000800 	.word	0x40000800
 8001a34:	40014000 	.word	0x40014000

08001a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0bc      	sub	sp, #240	; 0xf0
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	22bc      	movs	r2, #188	; 0xbc
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f009 fd9f 	bl	800b59c <memset>
  if(huart->Instance==UART4)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a67      	ldr	r2, [pc, #412]	; (8001c00 <HAL_UART_MspInit+0x1c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	f040 80db 	bne.w	8001c20 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 fd23 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a84:	f7ff fddd 	bl	8001642 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a88:	4b5e      	ldr	r3, [pc, #376]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8e:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001a90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a98:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4a55      	ldr	r2, [pc, #340]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac4:	4b4f      	ldr	r3, [pc, #316]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad4:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_UART_MspInit+0x1cc>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001afc:	2308      	movs	r3, #8
 8001afe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b06:	4619      	mov	r1, r3
 8001b08:	483f      	ldr	r0, [pc, #252]	; (8001c08 <HAL_UART_MspInit+0x1d0>)
 8001b0a:	f003 fb21 	bl	8005150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b26:	2308      	movs	r3, #8
 8001b28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b30:	4619      	mov	r1, r3
 8001b32:	4836      	ldr	r0, [pc, #216]	; (8001c0c <HAL_UART_MspInit+0x1d4>)
 8001b34:	f003 fb0c 	bl	8005150 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b3a:	4a36      	ldr	r2, [pc, #216]	; (8001c14 <HAL_UART_MspInit+0x1dc>)
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b40:	223f      	movs	r2, #63	; 0x3f
 8001b42:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b56:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b76:	4826      	ldr	r0, [pc, #152]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b78:	f000 fcb0 	bl	80024dc <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001b82:	f7ff fd5e 	bl	8001642 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b8a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b8c:	4a20      	ldr	r2, [pc, #128]	; (8001c10 <HAL_UART_MspInit+0x1d8>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_UART_MspInit+0x1e4>)
 8001b96:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bd0:	4811      	ldr	r0, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001bd2:	f000 fc83 	bl	80024dc <HAL_DMA_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001bdc:	f7ff fd31 	bl	8001642 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001be4:	679a      	str	r2, [r3, #120]	; 0x78
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_UART_MspInit+0x1e0>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2034      	movs	r0, #52	; 0x34
 8001bf2:	f000 fc3e 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bf6:	2034      	movs	r0, #52	; 0x34
 8001bf8:	f000 fc55 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bfc:	e0bd      	b.n	8001d7a <HAL_UART_MspInit+0x342>
 8001bfe:	bf00      	nop
 8001c00:	40004c00 	.word	0x40004c00
 8001c04:	58024400 	.word	0x58024400
 8001c08:	58020000 	.word	0x58020000
 8001c0c:	58020c00 	.word	0x58020c00
 8001c10:	2000018c 	.word	0x2000018c
 8001c14:	40020410 	.word	0x40020410
 8001c18:	200007d4 	.word	0x200007d4
 8001c1c:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a57      	ldr	r2, [pc, #348]	; (8001d84 <HAL_UART_MspInit+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	f040 80a7 	bne.w	8001d7a <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fc42 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001c46:	f7ff fcfc 	bl	8001642 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_UART_MspInit+0x350>)
 8001c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c50:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <HAL_UART_MspInit+0x350>)
 8001c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c5a:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <HAL_UART_MspInit+0x350>)
 8001c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_UART_MspInit+0x350>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_UART_MspInit+0x350>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_UART_MspInit+0x350>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001caa:	4619      	mov	r1, r3
 8001cac:	4837      	ldr	r0, [pc, #220]	; (8001d8c <HAL_UART_MspInit+0x354>)
 8001cae:	f003 fa4f 	bl	8005150 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cb4:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <HAL_UART_MspInit+0x35c>)
 8001cb6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cba:	222d      	movs	r2, #45	; 0x2d
 8001cbc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001cde:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001cf2:	4827      	ldr	r0, [pc, #156]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001cf4:	f000 fbf2 	bl	80024dc <HAL_DMA_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001cfe:	f7ff fca0 	bl	8001642 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001d06:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d08:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_UART_MspInit+0x358>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d10:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <HAL_UART_MspInit+0x364>)
 8001d12:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d16:	222e      	movs	r2, #46	; 0x2e
 8001d18:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d46:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d4e:	4812      	ldr	r0, [pc, #72]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d50:	f000 fbc4 	bl	80024dc <HAL_DMA_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x326>
      Error_Handler();
 8001d5a:	f7ff fc72 	bl	8001642 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d62:	679a      	str	r2, [r3, #120]	; 0x78
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_UART_MspInit+0x360>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2027      	movs	r0, #39	; 0x27
 8001d70:	f000 fb7f 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d74:	2027      	movs	r0, #39	; 0x27
 8001d76:	f000 fb96 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	37f0      	adds	r7, #240	; 0xf0
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40004800 	.word	0x40004800
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	58020c00 	.word	0x58020c00
 8001d90:	20000250 	.word	0x20000250
 8001d94:	40020028 	.word	0x40020028
 8001d98:	20000420 	.word	0x20000420
 8001d9c:	40020040 	.word	0x40020040

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 fa16 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <DMA1_Stream1_IRQHandler+0x10>)
 8001dfa:	f001 fe97 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000250 	.word	0x20000250

08001e08 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <DMA1_Stream2_IRQHandler+0x10>)
 8001e0e:	f001 fe8d 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000420 	.word	0x20000420

08001e1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e20:	2040      	movs	r0, #64	; 0x40
 8001e22:	f003 fb5e 	bl	80054e2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e26:	2080      	movs	r0, #128	; 0x80
 8001e28:	f003 fb5b 	bl	80054e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART3_IRQHandler+0x10>)
 8001e36:	f007 fae3 	bl	8009400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200002c8 	.word	0x200002c8

08001e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e4c:	f003 fb49 	bl	80054e2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e54:	f003 fb45 	bl	80054e2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e5c:	f003 fb41 	bl	80054e2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e64:	f003 fb3d 	bl	80054e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <TIM5_IRQHandler+0x10>)
 8001e72:	f006 f85e 	bl	8007f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000498 	.word	0x20000498

08001e80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <UART4_IRQHandler+0x10>)
 8001e86:	f007 fabb 	bl	8009400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000680 	.word	0x20000680

08001e94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <DMA2_Stream0_IRQHandler+0x10>)
 8001e9a:	f001 fe47 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000018c 	.word	0x2000018c

08001ea8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <DMA2_Stream1_IRQHandler+0x10>)
 8001eae:	f001 fe3d 	bl	8003b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200007d4 	.word	0x200007d4

08001ebc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00a      	b.n	8001ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf0      	blt.n	8001ece <_read+0x12>
	}

return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_isatty>:

int _isatty(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return 1;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f009 fada 	bl	800b548 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20020000 	.word	0x20020000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	20000090 	.word	0x20000090
 8001fc8:	20000870 	.word	0x20000870

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <SystemInit+0xec>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <SystemInit+0xec>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <SystemInit+0xf0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d807      	bhi.n	8001ffc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <SystemInit+0xf0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 030f 	bic.w	r3, r3, #15
 8001ff4:	4a31      	ldr	r2, [pc, #196]	; (80020bc <SystemInit+0xf0>)
 8001ff6:	f043 0307 	orr.w	r3, r3, #7
 8001ffa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <SystemInit+0xf4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <SystemInit+0xf4>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <SystemInit+0xf4>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <SystemInit+0xf4>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	492b      	ldr	r1, [pc, #172]	; (80020c0 <SystemInit+0xf4>)
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <SystemInit+0xf8>)
 8002016:	4013      	ands	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <SystemInit+0xf0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <SystemInit+0xf0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 030f 	bic.w	r3, r3, #15
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <SystemInit+0xf0>)
 8002030:	f043 0307 	orr.w	r3, r3, #7
 8002034:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <SystemInit+0xf4>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <SystemInit+0xf4>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <SystemInit+0xf4>)
 8002044:	2200      	movs	r2, #0
 8002046:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <SystemInit+0xf4>)
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <SystemInit+0xfc>)
 800204c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <SystemInit+0xf4>)
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <SystemInit+0x100>)
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <SystemInit+0xf4>)
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <SystemInit+0x104>)
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <SystemInit+0xf4>)
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <SystemInit+0xf4>)
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <SystemInit+0x104>)
 8002064:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <SystemInit+0xf4>)
 8002068:	2200      	movs	r2, #0
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <SystemInit+0xf4>)
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <SystemInit+0x104>)
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <SystemInit+0xf4>)
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <SystemInit+0xf4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <SystemInit+0xf4>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <SystemInit+0xf4>)
 8002086:	2200      	movs	r2, #0
 8002088:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <SystemInit+0x108>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <SystemInit+0x10c>)
 8002090:	4013      	ands	r3, r2
 8002092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002096:	d202      	bcs.n	800209e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <SystemInit+0x110>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <SystemInit+0x114>)
 80020a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SystemInit+0xec>)
 80020a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00
 80020bc:	52002000 	.word	0x52002000
 80020c0:	58024400 	.word	0x58024400
 80020c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80020c8:	02020200 	.word	0x02020200
 80020cc:	01ff0000 	.word	0x01ff0000
 80020d0:	01010280 	.word	0x01010280
 80020d4:	5c001000 	.word	0x5c001000
 80020d8:	ffff0000 	.word	0xffff0000
 80020dc:	51008108 	.word	0x51008108
 80020e0:	52004000 	.word	0x52004000

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800211c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e8:	f7ff ff70 	bl	8001fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ee:	490d      	ldr	r1, [pc, #52]	; (8002124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f4:	e002      	b.n	80020fc <LoopCopyDataInit>

080020f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fa:	3304      	adds	r3, #4

080020fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002100:	d3f9      	bcc.n	80020f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002104:	4c0a      	ldr	r4, [pc, #40]	; (8002130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002108:	e001      	b.n	800210e <LoopFillZerobss>

0800210a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800210c:	3204      	adds	r2, #4

0800210e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002110:	d3fb      	bcc.n	800210a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002112:	f009 fa1f 	bl	800b554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7fe faff 	bl	8000718 <main>
  bx  lr
 800211a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002128:	0800c55c 	.word	0x0800c55c
  ldr r2, =_sbss
 800212c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002130:	2000086c 	.word	0x2000086c

08002134 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC3_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213e:	2003      	movs	r0, #3
 8002140:	f000 f98c 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002144:	f003 ffe8 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_Init+0x68>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	4913      	ldr	r1, [pc, #76]	; (80021a4 <HAL_Init+0x6c>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_Init+0x68>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_Init+0x6c>)
 800216c:	5cd3      	ldrb	r3, [r2, r3]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_Init+0x70>)
 800217a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800217c:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <HAL_Init+0x74>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f814 	bl	80021b0 <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e002      	b.n	8002198 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002192:	f7ff fa5b 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	58024400 	.word	0x58024400
 80021a4:	0800c474 	.word	0x0800c474
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_InitTick+0x60>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e021      	b.n	8002208 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_InitTick+0x64>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_InitTick+0x60>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f971 	bl	80024c2 <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 f93b 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x68>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20000000 	.word	0x20000000
 8002218:	20000008 	.word	0x20000008

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2000000c 	.word	0x2000000c
 8002240:	20000858 	.word	0x20000858

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000858 	.word	0x20000858

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c

080022a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetREVID+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0c1b      	lsrs	r3, r3, #16
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	5c001000 	.word	0x5c001000

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	; (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	; (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	; (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	; 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff40 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff90 	bl	80023b0 <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5f 	bl	800235c <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff33 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa4 	bl	8002418 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff feae 	bl	8002244 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e316      	b.n	8002b22 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a66      	ldr	r2, [pc, #408]	; (8002694 <HAL_DMA_Init+0x1b8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d04a      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a65      	ldr	r2, [pc, #404]	; (8002698 <HAL_DMA_Init+0x1bc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d045      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a63      	ldr	r2, [pc, #396]	; (800269c <HAL_DMA_Init+0x1c0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d040      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a62      	ldr	r2, [pc, #392]	; (80026a0 <HAL_DMA_Init+0x1c4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d03b      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a60      	ldr	r2, [pc, #384]	; (80026a4 <HAL_DMA_Init+0x1c8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d036      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5f      	ldr	r2, [pc, #380]	; (80026a8 <HAL_DMA_Init+0x1cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d031      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5d      	ldr	r2, [pc, #372]	; (80026ac <HAL_DMA_Init+0x1d0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02c      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <HAL_DMA_Init+0x1d4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d027      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5a      	ldr	r2, [pc, #360]	; (80026b4 <HAL_DMA_Init+0x1d8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d022      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a59      	ldr	r2, [pc, #356]	; (80026b8 <HAL_DMA_Init+0x1dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d01d      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a57      	ldr	r2, [pc, #348]	; (80026bc <HAL_DMA_Init+0x1e0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d018      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a56      	ldr	r2, [pc, #344]	; (80026c0 <HAL_DMA_Init+0x1e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a54      	ldr	r2, [pc, #336]	; (80026c4 <HAL_DMA_Init+0x1e8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a53      	ldr	r2, [pc, #332]	; (80026c8 <HAL_DMA_Init+0x1ec>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a51      	ldr	r2, [pc, #324]	; (80026cc <HAL_DMA_Init+0x1f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d004      	beq.n	8002594 <HAL_DMA_Init+0xb8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a50      	ldr	r2, [pc, #320]	; (80026d0 <HAL_DMA_Init+0x1f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Init+0xbc>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_DMA_Init+0xbe>
 8002598:	2300      	movs	r3, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 813b 	beq.w	8002816 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a37      	ldr	r2, [pc, #220]	; (8002694 <HAL_DMA_Init+0x1b8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d04a      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a36      	ldr	r2, [pc, #216]	; (8002698 <HAL_DMA_Init+0x1bc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d045      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a34      	ldr	r2, [pc, #208]	; (800269c <HAL_DMA_Init+0x1c0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d040      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a33      	ldr	r2, [pc, #204]	; (80026a0 <HAL_DMA_Init+0x1c4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d03b      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <HAL_DMA_Init+0x1c8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d036      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <HAL_DMA_Init+0x1cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d031      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <HAL_DMA_Init+0x1d0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02c      	beq.n	8002650 <HAL_DMA_Init+0x174>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <HAL_DMA_Init+0x1d4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d027      	beq.n	8002650 <HAL_DMA_Init+0x174>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2b      	ldr	r2, [pc, #172]	; (80026b4 <HAL_DMA_Init+0x1d8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d022      	beq.n	8002650 <HAL_DMA_Init+0x174>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_DMA_Init+0x1dc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01d      	beq.n	8002650 <HAL_DMA_Init+0x174>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_DMA_Init+0x1e0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d018      	beq.n	8002650 <HAL_DMA_Init+0x174>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_DMA_Init+0x1e4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d013      	beq.n	8002650 <HAL_DMA_Init+0x174>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <HAL_DMA_Init+0x1e8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00e      	beq.n	8002650 <HAL_DMA_Init+0x174>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <HAL_DMA_Init+0x1ec>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_DMA_Init+0x174>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_DMA_Init+0x1f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d004      	beq.n	8002650 <HAL_DMA_Init+0x174>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <HAL_DMA_Init+0x1f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d108      	bne.n	8002662 <HAL_DMA_Init+0x186>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <HAL_DMA_Init+0x196>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002672:	e02f      	b.n	80026d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002674:	f7ff fde6 	bl	8002244 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b05      	cmp	r3, #5
 8002680:	d928      	bls.n	80026d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2203      	movs	r2, #3
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e246      	b.n	8002b22 <HAL_DMA_Init+0x646>
 8002694:	40020010 	.word	0x40020010
 8002698:	40020028 	.word	0x40020028
 800269c:	40020040 	.word	0x40020040
 80026a0:	40020058 	.word	0x40020058
 80026a4:	40020070 	.word	0x40020070
 80026a8:	40020088 	.word	0x40020088
 80026ac:	400200a0 	.word	0x400200a0
 80026b0:	400200b8 	.word	0x400200b8
 80026b4:	40020410 	.word	0x40020410
 80026b8:	40020428 	.word	0x40020428
 80026bc:	40020440 	.word	0x40020440
 80026c0:	40020458 	.word	0x40020458
 80026c4:	40020470 	.word	0x40020470
 80026c8:	40020488 	.word	0x40020488
 80026cc:	400204a0 	.word	0x400204a0
 80026d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1c8      	bne.n	8002674 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4b83      	ldr	r3, [pc, #524]	; (80028fc <HAL_DMA_Init+0x420>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002706:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002712:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b04      	cmp	r3, #4
 8002726:	d107      	bne.n	8002738 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4313      	orrs	r3, r2
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002738:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_DMA_Init+0x424>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <HAL_DMA_Init+0x428>)
 800273e:	4013      	ands	r3, r2
 8002740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002744:	d328      	bcc.n	8002798 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b28      	cmp	r3, #40	; 0x28
 800274c:	d903      	bls.n	8002756 <HAL_DMA_Init+0x27a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b2e      	cmp	r3, #46	; 0x2e
 8002754:	d917      	bls.n	8002786 <HAL_DMA_Init+0x2aa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b3e      	cmp	r3, #62	; 0x3e
 800275c:	d903      	bls.n	8002766 <HAL_DMA_Init+0x28a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b42      	cmp	r3, #66	; 0x42
 8002764:	d90f      	bls.n	8002786 <HAL_DMA_Init+0x2aa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b46      	cmp	r3, #70	; 0x46
 800276c:	d903      	bls.n	8002776 <HAL_DMA_Init+0x29a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b48      	cmp	r3, #72	; 0x48
 8002774:	d907      	bls.n	8002786 <HAL_DMA_Init+0x2aa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b4e      	cmp	r3, #78	; 0x4e
 800277c:	d905      	bls.n	800278a <HAL_DMA_Init+0x2ae>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b52      	cmp	r3, #82	; 0x52
 8002784:	d801      	bhi.n	800278a <HAL_DMA_Init+0x2ae>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_DMA_Init+0x2b0>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002796:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f023 0307 	bic.w	r3, r3, #7
 80027ae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d117      	bne.n	80027f2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00e      	beq.n	80027f2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f002 fb31 	bl	8004e3c <DMA_CheckFifoParam>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e197      	b.n	8002b22 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f002 fa6c 	bl	8004cd8 <DMA_CalcBaseAndBitshift>
 8002800:	4603      	mov	r3, r0
 8002802:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	223f      	movs	r2, #63	; 0x3f
 800280e:	409a      	lsls	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e0cd      	b.n	80029b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <HAL_DMA_Init+0x42c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a39      	ldr	r2, [pc, #228]	; (800290c <HAL_DMA_Init+0x430>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_DMA_Init+0x434>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_DMA_Init+0x438>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a35      	ldr	r2, [pc, #212]	; (8002918 <HAL_DMA_Init+0x43c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a33      	ldr	r2, [pc, #204]	; (800291c <HAL_DMA_Init+0x440>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a32      	ldr	r2, [pc, #200]	; (8002920 <HAL_DMA_Init+0x444>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Init+0x38a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_DMA_Init+0x448>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_DMA_Init+0x38e>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_DMA_Init+0x390>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8097 	beq.w	80029a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_DMA_Init+0x42c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d021      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_DMA_Init+0x430>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01c      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a21      	ldr	r2, [pc, #132]	; (8002910 <HAL_DMA_Init+0x434>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d017      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_DMA_Init+0x438>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d012      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_DMA_Init+0x43c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00d      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_DMA_Init+0x440>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d008      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_DMA_Init+0x444>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <HAL_DMA_Init+0x3e4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_DMA_Init+0x448>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_DMA_Init+0x44c>)
 80028de:	4013      	ands	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d020      	beq.n	800292c <HAL_DMA_Init+0x450>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b80      	cmp	r3, #128	; 0x80
 80028f0:	d102      	bne.n	80028f8 <HAL_DMA_Init+0x41c>
 80028f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028f6:	e01a      	b.n	800292e <HAL_DMA_Init+0x452>
 80028f8:	2300      	movs	r3, #0
 80028fa:	e018      	b.n	800292e <HAL_DMA_Init+0x452>
 80028fc:	fe10803f 	.word	0xfe10803f
 8002900:	5c001000 	.word	0x5c001000
 8002904:	ffff0000 	.word	0xffff0000
 8002908:	58025408 	.word	0x58025408
 800290c:	5802541c 	.word	0x5802541c
 8002910:	58025430 	.word	0x58025430
 8002914:	58025444 	.word	0x58025444
 8002918:	58025458 	.word	0x58025458
 800291c:	5802546c 	.word	0x5802546c
 8002920:	58025480 	.word	0x58025480
 8002924:	58025494 	.word	0x58025494
 8002928:	fffe000f 	.word	0xfffe000f
 800292c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800293c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800294c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800295c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b6e      	ldr	r3, [pc, #440]	; (8002b2c <HAL_DMA_Init+0x650>)
 8002974:	4413      	add	r3, r2
 8002976:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_DMA_Init+0x654>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f002 f9a7 	bl	8004cd8 <DMA_CalcBaseAndBitshift>
 800298a:	4603      	mov	r3, r0
 800298c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2201      	movs	r2, #1
 8002998:	409a      	lsls	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	e008      	b.n	80029b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2203      	movs	r2, #3
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0b7      	b.n	8002b22 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5f      	ldr	r2, [pc, #380]	; (8002b34 <HAL_DMA_Init+0x658>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d072      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5d      	ldr	r2, [pc, #372]	; (8002b38 <HAL_DMA_Init+0x65c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d06d      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a5c      	ldr	r2, [pc, #368]	; (8002b3c <HAL_DMA_Init+0x660>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d068      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <HAL_DMA_Init+0x664>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d063      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a59      	ldr	r2, [pc, #356]	; (8002b44 <HAL_DMA_Init+0x668>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d05e      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <HAL_DMA_Init+0x66c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d059      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a56      	ldr	r2, [pc, #344]	; (8002b4c <HAL_DMA_Init+0x670>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d054      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_DMA_Init+0x674>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d04f      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a53      	ldr	r2, [pc, #332]	; (8002b54 <HAL_DMA_Init+0x678>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04a      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a51      	ldr	r2, [pc, #324]	; (8002b58 <HAL_DMA_Init+0x67c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d045      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_DMA_Init+0x680>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a4e      	ldr	r2, [pc, #312]	; (8002b60 <HAL_DMA_Init+0x684>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03b      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <HAL_DMA_Init+0x688>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	; (8002b68 <HAL_DMA_Init+0x68c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_DMA_Init+0x690>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02c      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_DMA_Init+0x694>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <HAL_DMA_Init+0x698>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a45      	ldr	r2, [pc, #276]	; (8002b78 <HAL_DMA_Init+0x69c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a44      	ldr	r2, [pc, #272]	; (8002b7c <HAL_DMA_Init+0x6a0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a42      	ldr	r2, [pc, #264]	; (8002b80 <HAL_DMA_Init+0x6a4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_DMA_Init+0x6a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a3f      	ldr	r2, [pc, #252]	; (8002b88 <HAL_DMA_Init+0x6ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3e      	ldr	r2, [pc, #248]	; (8002b8c <HAL_DMA_Init+0x6b0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_Init+0x5c6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <HAL_DMA_Init+0x6b4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Init+0x5ca>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_DMA_Init+0x5cc>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d032      	beq.n	8002b12 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f002 fa41 	bl	8004f34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d102      	bne.n	8002ac0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ad4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_DMA_Init+0x624>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d80c      	bhi.n	8002b00 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f002 fabe 	bl	8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e008      	b.n	8002b12 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	a7fdabf8 	.word	0xa7fdabf8
 8002b30:	cccccccd 	.word	0xcccccccd
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028
 8002b3c:	40020040 	.word	0x40020040
 8002b40:	40020058 	.word	0x40020058
 8002b44:	40020070 	.word	0x40020070
 8002b48:	40020088 	.word	0x40020088
 8002b4c:	400200a0 	.word	0x400200a0
 8002b50:	400200b8 	.word	0x400200b8
 8002b54:	40020410 	.word	0x40020410
 8002b58:	40020428 	.word	0x40020428
 8002b5c:	40020440 	.word	0x40020440
 8002b60:	40020458 	.word	0x40020458
 8002b64:	40020470 	.word	0x40020470
 8002b68:	40020488 	.word	0x40020488
 8002b6c:	400204a0 	.word	0x400204a0
 8002b70:	400204b8 	.word	0x400204b8
 8002b74:	58025408 	.word	0x58025408
 8002b78:	5802541c 	.word	0x5802541c
 8002b7c:	58025430 	.word	0x58025430
 8002b80:	58025444 	.word	0x58025444
 8002b84:	58025458 	.word	0x58025458
 8002b88:	5802546c 	.word	0x5802546c
 8002b8c:	58025480 	.word	0x58025480
 8002b90:	58025494 	.word	0x58025494

08002b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e226      	b.n	8002ffe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_Start_IT+0x2a>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e21f      	b.n	8002ffe <HAL_DMA_Start_IT+0x46a>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	f040 820a 	bne.w	8002fe8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a68      	ldr	r2, [pc, #416]	; (8002d88 <HAL_DMA_Start_IT+0x1f4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04a      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <HAL_DMA_Start_IT+0x1f8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d045      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a65      	ldr	r2, [pc, #404]	; (8002d90 <HAL_DMA_Start_IT+0x1fc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_DMA_Start_IT+0x200>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d03b      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a62      	ldr	r2, [pc, #392]	; (8002d98 <HAL_DMA_Start_IT+0x204>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d036      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a60      	ldr	r2, [pc, #384]	; (8002d9c <HAL_DMA_Start_IT+0x208>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	; (8002da0 <HAL_DMA_Start_IT+0x20c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d02c      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5d      	ldr	r2, [pc, #372]	; (8002da4 <HAL_DMA_Start_IT+0x210>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d027      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	; (8002da8 <HAL_DMA_Start_IT+0x214>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5a      	ldr	r2, [pc, #360]	; (8002dac <HAL_DMA_Start_IT+0x218>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a59      	ldr	r2, [pc, #356]	; (8002db0 <HAL_DMA_Start_IT+0x21c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d018      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_DMA_Start_IT+0x220>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_DMA_Start_IT+0x224>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a54      	ldr	r2, [pc, #336]	; (8002dbc <HAL_DMA_Start_IT+0x228>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_DMA_Start_IT+0x22c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_DMA_Start_IT+0xee>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_DMA_Start_IT+0x230>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <HAL_DMA_Start_IT+0x100>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e007      	b.n	8002ca4 <HAL_DMA_Start_IT+0x110>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f001 fe68 	bl	8004980 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_DMA_Start_IT+0x1f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d04a      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <HAL_DMA_Start_IT+0x1f8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d045      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_DMA_Start_IT+0x1fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d040      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a30      	ldr	r2, [pc, #192]	; (8002d94 <HAL_DMA_Start_IT+0x200>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d03b      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2e      	ldr	r2, [pc, #184]	; (8002d98 <HAL_DMA_Start_IT+0x204>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d036      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <HAL_DMA_Start_IT+0x208>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d031      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <HAL_DMA_Start_IT+0x20c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d02c      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a2a      	ldr	r2, [pc, #168]	; (8002da4 <HAL_DMA_Start_IT+0x210>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d027      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <HAL_DMA_Start_IT+0x214>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_DMA_Start_IT+0x218>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d01d      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <HAL_DMA_Start_IT+0x21c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_DMA_Start_IT+0x220>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_DMA_Start_IT+0x224>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_DMA_Start_IT+0x228>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <HAL_DMA_Start_IT+0x22c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_DMA_Start_IT+0x1bc>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1e      	ldr	r2, [pc, #120]	; (8002dc4 <HAL_DMA_Start_IT+0x230>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_DMA_Start_IT+0x1c0>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_DMA_Start_IT+0x1c2>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d036      	beq.n	8002dc8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 021e 	bic.w	r2, r3, #30
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0216 	orr.w	r2, r2, #22
 8002d6c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d03e      	beq.n	8002df4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0208 	orr.w	r2, r2, #8
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e035      	b.n	8002df4 <HAL_DMA_Start_IT+0x260>
 8002d88:	40020010 	.word	0x40020010
 8002d8c:	40020028 	.word	0x40020028
 8002d90:	40020040 	.word	0x40020040
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020070 	.word	0x40020070
 8002d9c:	40020088 	.word	0x40020088
 8002da0:	400200a0 	.word	0x400200a0
 8002da4:	400200b8 	.word	0x400200b8
 8002da8:	40020410 	.word	0x40020410
 8002dac:	40020428 	.word	0x40020428
 8002db0:	40020440 	.word	0x40020440
 8002db4:	40020458 	.word	0x40020458
 8002db8:	40020470 	.word	0x40020470
 8002dbc:	40020488 	.word	0x40020488
 8002dc0:	400204a0 	.word	0x400204a0
 8002dc4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 020e 	bic.w	r2, r3, #14
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 020a 	orr.w	r2, r2, #10
 8002dda:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0204 	orr.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a83      	ldr	r2, [pc, #524]	; (8003008 <HAL_DMA_Start_IT+0x474>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d072      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a82      	ldr	r2, [pc, #520]	; (800300c <HAL_DMA_Start_IT+0x478>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d06d      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a80      	ldr	r2, [pc, #512]	; (8003010 <HAL_DMA_Start_IT+0x47c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d068      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a7f      	ldr	r2, [pc, #508]	; (8003014 <HAL_DMA_Start_IT+0x480>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d063      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a7d      	ldr	r2, [pc, #500]	; (8003018 <HAL_DMA_Start_IT+0x484>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d05e      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_DMA_Start_IT+0x488>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d059      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7a      	ldr	r2, [pc, #488]	; (8003020 <HAL_DMA_Start_IT+0x48c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d054      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a79      	ldr	r2, [pc, #484]	; (8003024 <HAL_DMA_Start_IT+0x490>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04f      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a77      	ldr	r2, [pc, #476]	; (8003028 <HAL_DMA_Start_IT+0x494>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a76      	ldr	r2, [pc, #472]	; (800302c <HAL_DMA_Start_IT+0x498>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a74      	ldr	r2, [pc, #464]	; (8003030 <HAL_DMA_Start_IT+0x49c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a73      	ldr	r2, [pc, #460]	; (8003034 <HAL_DMA_Start_IT+0x4a0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a71      	ldr	r2, [pc, #452]	; (8003038 <HAL_DMA_Start_IT+0x4a4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a70      	ldr	r2, [pc, #448]	; (800303c <HAL_DMA_Start_IT+0x4a8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6e      	ldr	r2, [pc, #440]	; (8003040 <HAL_DMA_Start_IT+0x4ac>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6d      	ldr	r2, [pc, #436]	; (8003044 <HAL_DMA_Start_IT+0x4b0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a6b      	ldr	r2, [pc, #428]	; (8003048 <HAL_DMA_Start_IT+0x4b4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6a      	ldr	r2, [pc, #424]	; (800304c <HAL_DMA_Start_IT+0x4b8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_DMA_Start_IT+0x4bc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a67      	ldr	r2, [pc, #412]	; (8003054 <HAL_DMA_Start_IT+0x4c0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_DMA_Start_IT+0x4c4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a64      	ldr	r2, [pc, #400]	; (800305c <HAL_DMA_Start_IT+0x4c8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a62      	ldr	r2, [pc, #392]	; (8003060 <HAL_DMA_Start_IT+0x4cc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Start_IT+0x350>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_DMA_Start_IT+0x4d0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DMA_Start_IT+0x354>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_Start_IT+0x356>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f22:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a37      	ldr	r2, [pc, #220]	; (8003008 <HAL_DMA_Start_IT+0x474>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a36      	ldr	r2, [pc, #216]	; (800300c <HAL_DMA_Start_IT+0x478>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a34      	ldr	r2, [pc, #208]	; (8003010 <HAL_DMA_Start_IT+0x47c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a33      	ldr	r2, [pc, #204]	; (8003014 <HAL_DMA_Start_IT+0x480>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a31      	ldr	r2, [pc, #196]	; (8003018 <HAL_DMA_Start_IT+0x484>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a30      	ldr	r2, [pc, #192]	; (800301c <HAL_DMA_Start_IT+0x488>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <HAL_DMA_Start_IT+0x48c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <HAL_DMA_Start_IT+0x490>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <HAL_DMA_Start_IT+0x494>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_DMA_Start_IT+0x498>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_DMA_Start_IT+0x49c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_DMA_Start_IT+0x4a0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	; (8003038 <HAL_DMA_Start_IT+0x4a4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a24      	ldr	r2, [pc, #144]	; (800303c <HAL_DMA_Start_IT+0x4a8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <HAL_DMA_Start_IT+0x4ac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_Start_IT+0x430>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a21      	ldr	r2, [pc, #132]	; (8003044 <HAL_DMA_Start_IT+0x4b0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d108      	bne.n	8002fd6 <HAL_DMA_Start_IT+0x442>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e012      	b.n	8002ffc <HAL_DMA_Start_IT+0x468>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e009      	b.n	8002ffc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40020010 	.word	0x40020010
 800300c:	40020028 	.word	0x40020028
 8003010:	40020040 	.word	0x40020040
 8003014:	40020058 	.word	0x40020058
 8003018:	40020070 	.word	0x40020070
 800301c:	40020088 	.word	0x40020088
 8003020:	400200a0 	.word	0x400200a0
 8003024:	400200b8 	.word	0x400200b8
 8003028:	40020410 	.word	0x40020410
 800302c:	40020428 	.word	0x40020428
 8003030:	40020440 	.word	0x40020440
 8003034:	40020458 	.word	0x40020458
 8003038:	40020470 	.word	0x40020470
 800303c:	40020488 	.word	0x40020488
 8003040:	400204a0 	.word	0x400204a0
 8003044:	400204b8 	.word	0x400204b8
 8003048:	58025408 	.word	0x58025408
 800304c:	5802541c 	.word	0x5802541c
 8003050:	58025430 	.word	0x58025430
 8003054:	58025444 	.word	0x58025444
 8003058:	58025458 	.word	0x58025458
 800305c:	5802546c 	.word	0x5802546c
 8003060:	58025480 	.word	0x58025480
 8003064:	58025494 	.word	0x58025494

08003068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff f8e8 	bl	8002244 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e2dc      	b.n	800363a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d008      	beq.n	800309e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e2cd      	b.n	800363a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a76      	ldr	r2, [pc, #472]	; (800327c <HAL_DMA_Abort+0x214>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04a      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a74      	ldr	r2, [pc, #464]	; (8003280 <HAL_DMA_Abort+0x218>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d045      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a73      	ldr	r2, [pc, #460]	; (8003284 <HAL_DMA_Abort+0x21c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d040      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a71      	ldr	r2, [pc, #452]	; (8003288 <HAL_DMA_Abort+0x220>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d03b      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a70      	ldr	r2, [pc, #448]	; (800328c <HAL_DMA_Abort+0x224>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d036      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_DMA_Abort+0x228>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6d      	ldr	r2, [pc, #436]	; (8003294 <HAL_DMA_Abort+0x22c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d02c      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6b      	ldr	r2, [pc, #428]	; (8003298 <HAL_DMA_Abort+0x230>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d027      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_DMA_Abort+0x234>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a68      	ldr	r2, [pc, #416]	; (80032a0 <HAL_DMA_Abort+0x238>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_DMA_Abort+0x23c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <HAL_DMA_Abort+0x240>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a64      	ldr	r2, [pc, #400]	; (80032ac <HAL_DMA_Abort+0x244>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a62      	ldr	r2, [pc, #392]	; (80032b0 <HAL_DMA_Abort+0x248>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a61      	ldr	r2, [pc, #388]	; (80032b4 <HAL_DMA_Abort+0x24c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_DMA_Abort+0xd6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5f      	ldr	r2, [pc, #380]	; (80032b8 <HAL_DMA_Abort+0x250>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_DMA_Abort+0xda>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_DMA_Abort+0xdc>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 021e 	bic.w	r2, r2, #30
 8003156:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003166:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e00a      	b.n	8003186 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 020e 	bic.w	r2, r2, #14
 800317e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3c      	ldr	r2, [pc, #240]	; (800327c <HAL_DMA_Abort+0x214>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d072      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3a      	ldr	r2, [pc, #232]	; (8003280 <HAL_DMA_Abort+0x218>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d06d      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a39      	ldr	r2, [pc, #228]	; (8003284 <HAL_DMA_Abort+0x21c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d068      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a37      	ldr	r2, [pc, #220]	; (8003288 <HAL_DMA_Abort+0x220>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d063      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a36      	ldr	r2, [pc, #216]	; (800328c <HAL_DMA_Abort+0x224>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d05e      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a34      	ldr	r2, [pc, #208]	; (8003290 <HAL_DMA_Abort+0x228>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d059      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a33      	ldr	r2, [pc, #204]	; (8003294 <HAL_DMA_Abort+0x22c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d054      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a31      	ldr	r2, [pc, #196]	; (8003298 <HAL_DMA_Abort+0x230>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d04f      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_DMA_Abort+0x234>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d04a      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2e      	ldr	r2, [pc, #184]	; (80032a0 <HAL_DMA_Abort+0x238>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d045      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2d      	ldr	r2, [pc, #180]	; (80032a4 <HAL_DMA_Abort+0x23c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d040      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <HAL_DMA_Abort+0x240>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d03b      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <HAL_DMA_Abort+0x244>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <HAL_DMA_Abort+0x248>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_DMA_Abort+0x24c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d02c      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_DMA_Abort+0x250>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d027      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <HAL_DMA_Abort+0x254>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <HAL_DMA_Abort+0x258>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <HAL_DMA_Abort+0x25c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <HAL_DMA_Abort+0x260>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <HAL_DMA_Abort+0x264>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_DMA_Abort+0x268>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <HAL_DMA_Abort+0x26c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_DMA_Abort+0x20e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <HAL_DMA_Abort+0x270>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d132      	bne.n	80032dc <HAL_DMA_Abort+0x274>
 8003276:	2301      	movs	r3, #1
 8003278:	e031      	b.n	80032de <HAL_DMA_Abort+0x276>
 800327a:	bf00      	nop
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
 80032bc:	58025408 	.word	0x58025408
 80032c0:	5802541c 	.word	0x5802541c
 80032c4:	58025430 	.word	0x58025430
 80032c8:	58025444 	.word	0x58025444
 80032cc:	58025458 	.word	0x58025458
 80032d0:	5802546c 	.word	0x5802546c
 80032d4:	58025480 	.word	0x58025480
 80032d8:	58025494 	.word	0x58025494
 80032dc:	2300      	movs	r3, #0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a6d      	ldr	r2, [pc, #436]	; (80034ac <HAL_DMA_Abort+0x444>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04a      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6b      	ldr	r2, [pc, #428]	; (80034b0 <HAL_DMA_Abort+0x448>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d045      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a6a      	ldr	r2, [pc, #424]	; (80034b4 <HAL_DMA_Abort+0x44c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a68      	ldr	r2, [pc, #416]	; (80034b8 <HAL_DMA_Abort+0x450>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d03b      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a67      	ldr	r2, [pc, #412]	; (80034bc <HAL_DMA_Abort+0x454>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d036      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a65      	ldr	r2, [pc, #404]	; (80034c0 <HAL_DMA_Abort+0x458>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a64      	ldr	r2, [pc, #400]	; (80034c4 <HAL_DMA_Abort+0x45c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a62      	ldr	r2, [pc, #392]	; (80034c8 <HAL_DMA_Abort+0x460>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d027      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a61      	ldr	r2, [pc, #388]	; (80034cc <HAL_DMA_Abort+0x464>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5f      	ldr	r2, [pc, #380]	; (80034d0 <HAL_DMA_Abort+0x468>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01d      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5e      	ldr	r2, [pc, #376]	; (80034d4 <HAL_DMA_Abort+0x46c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5c      	ldr	r2, [pc, #368]	; (80034d8 <HAL_DMA_Abort+0x470>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <HAL_DMA_Abort+0x474>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a59      	ldr	r2, [pc, #356]	; (80034e0 <HAL_DMA_Abort+0x478>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_DMA_Abort+0x47c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort+0x32a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a56      	ldr	r2, [pc, #344]	; (80034e8 <HAL_DMA_Abort+0x480>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <HAL_DMA_Abort+0x33c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e007      	b.n	80033b4 <HAL_DMA_Abort+0x34c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033b4:	e013      	b.n	80033de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b6:	f7fe ff45 	bl	8002244 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d90c      	bls.n	80033de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2203      	movs	r2, #3
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e12d      	b.n	800363a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <HAL_DMA_Abort+0x444>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04a      	beq.n	800348a <HAL_DMA_Abort+0x422>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <HAL_DMA_Abort+0x448>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d045      	beq.n	800348a <HAL_DMA_Abort+0x422>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_DMA_Abort+0x44c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d040      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_DMA_Abort+0x450>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d03b      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_DMA_Abort+0x454>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d036      	beq.n	800348a <HAL_DMA_Abort+0x422>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <HAL_DMA_Abort+0x458>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d031      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <HAL_DMA_Abort+0x45c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02c      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <HAL_DMA_Abort+0x460>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <HAL_DMA_Abort+0x422>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a23      	ldr	r2, [pc, #140]	; (80034cc <HAL_DMA_Abort+0x464>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <HAL_DMA_Abort+0x468>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <HAL_DMA_Abort+0x422>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_DMA_Abort+0x46c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_DMA_Abort+0x470>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_DMA_Abort+0x474>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_DMA_Abort+0x422>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_DMA_Abort+0x478>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_DMA_Abort+0x47c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_DMA_Abort+0x422>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_DMA_Abort+0x480>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_DMA_Abort+0x426>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_DMA_Abort+0x428>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02b      	beq.n	80034ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	223f      	movs	r2, #63	; 0x3f
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	e02a      	b.n	8003502 <HAL_DMA_Abort+0x49a>
 80034ac:	40020010 	.word	0x40020010
 80034b0:	40020028 	.word	0x40020028
 80034b4:	40020040 	.word	0x40020040
 80034b8:	40020058 	.word	0x40020058
 80034bc:	40020070 	.word	0x40020070
 80034c0:	40020088 	.word	0x40020088
 80034c4:	400200a0 	.word	0x400200a0
 80034c8:	400200b8 	.word	0x400200b8
 80034cc:	40020410 	.word	0x40020410
 80034d0:	40020428 	.word	0x40020428
 80034d4:	40020440 	.word	0x40020440
 80034d8:	40020458 	.word	0x40020458
 80034dc:	40020470 	.word	0x40020470
 80034e0:	40020488 	.word	0x40020488
 80034e4:	400204a0 	.word	0x400204a0
 80034e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2201      	movs	r2, #1
 80034fc:	409a      	lsls	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <HAL_DMA_Abort+0x5dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d072      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4d      	ldr	r2, [pc, #308]	; (8003648 <HAL_DMA_Abort+0x5e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d06d      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4c      	ldr	r2, [pc, #304]	; (800364c <HAL_DMA_Abort+0x5e4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d068      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <HAL_DMA_Abort+0x5e8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d063      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a49      	ldr	r2, [pc, #292]	; (8003654 <HAL_DMA_Abort+0x5ec>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d05e      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_DMA_Abort+0x5f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d059      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a46      	ldr	r2, [pc, #280]	; (800365c <HAL_DMA_Abort+0x5f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d054      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a44      	ldr	r2, [pc, #272]	; (8003660 <HAL_DMA_Abort+0x5f8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d04f      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a43      	ldr	r2, [pc, #268]	; (8003664 <HAL_DMA_Abort+0x5fc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d04a      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a41      	ldr	r2, [pc, #260]	; (8003668 <HAL_DMA_Abort+0x600>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d045      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a40      	ldr	r2, [pc, #256]	; (800366c <HAL_DMA_Abort+0x604>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d040      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <HAL_DMA_Abort+0x608>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d03b      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <HAL_DMA_Abort+0x60c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d036      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <HAL_DMA_Abort+0x610>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d031      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_DMA_Abort+0x614>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d02c      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a38      	ldr	r2, [pc, #224]	; (8003680 <HAL_DMA_Abort+0x618>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d027      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a37      	ldr	r2, [pc, #220]	; (8003684 <HAL_DMA_Abort+0x61c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d022      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a35      	ldr	r2, [pc, #212]	; (8003688 <HAL_DMA_Abort+0x620>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01d      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a34      	ldr	r2, [pc, #208]	; (800368c <HAL_DMA_Abort+0x624>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d018      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a32      	ldr	r2, [pc, #200]	; (8003690 <HAL_DMA_Abort+0x628>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a31      	ldr	r2, [pc, #196]	; (8003694 <HAL_DMA_Abort+0x62c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <HAL_DMA_Abort+0x630>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2e      	ldr	r2, [pc, #184]	; (800369c <HAL_DMA_Abort+0x634>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_Abort+0x58a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <HAL_DMA_Abort+0x638>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_DMA_Abort+0x58e>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_DMA_Abort+0x590>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003604:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003626:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40020010 	.word	0x40020010
 8003648:	40020028 	.word	0x40020028
 800364c:	40020040 	.word	0x40020040
 8003650:	40020058 	.word	0x40020058
 8003654:	40020070 	.word	0x40020070
 8003658:	40020088 	.word	0x40020088
 800365c:	400200a0 	.word	0x400200a0
 8003660:	400200b8 	.word	0x400200b8
 8003664:	40020410 	.word	0x40020410
 8003668:	40020428 	.word	0x40020428
 800366c:	40020440 	.word	0x40020440
 8003670:	40020458 	.word	0x40020458
 8003674:	40020470 	.word	0x40020470
 8003678:	40020488 	.word	0x40020488
 800367c:	400204a0 	.word	0x400204a0
 8003680:	400204b8 	.word	0x400204b8
 8003684:	58025408 	.word	0x58025408
 8003688:	5802541c 	.word	0x5802541c
 800368c:	58025430 	.word	0x58025430
 8003690:	58025444 	.word	0x58025444
 8003694:	58025458 	.word	0x58025458
 8003698:	5802546c 	.word	0x5802546c
 800369c:	58025480 	.word	0x58025480
 80036a0:	58025494 	.word	0x58025494

080036a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e205      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e1fa      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a8c      	ldr	r2, [pc, #560]	; (8003904 <HAL_DMA_Abort_IT+0x260>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04a      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a8b      	ldr	r2, [pc, #556]	; (8003908 <HAL_DMA_Abort_IT+0x264>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d045      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a89      	ldr	r2, [pc, #548]	; (800390c <HAL_DMA_Abort_IT+0x268>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d040      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a88      	ldr	r2, [pc, #544]	; (8003910 <HAL_DMA_Abort_IT+0x26c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d03b      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a86      	ldr	r2, [pc, #536]	; (8003914 <HAL_DMA_Abort_IT+0x270>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d036      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a85      	ldr	r2, [pc, #532]	; (8003918 <HAL_DMA_Abort_IT+0x274>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d031      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a83      	ldr	r2, [pc, #524]	; (800391c <HAL_DMA_Abort_IT+0x278>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02c      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a82      	ldr	r2, [pc, #520]	; (8003920 <HAL_DMA_Abort_IT+0x27c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d027      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a80      	ldr	r2, [pc, #512]	; (8003924 <HAL_DMA_Abort_IT+0x280>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7f      	ldr	r2, [pc, #508]	; (8003928 <HAL_DMA_Abort_IT+0x284>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d01d      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a7d      	ldr	r2, [pc, #500]	; (800392c <HAL_DMA_Abort_IT+0x288>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_DMA_Abort_IT+0x28c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a7a      	ldr	r2, [pc, #488]	; (8003934 <HAL_DMA_Abort_IT+0x290>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a79      	ldr	r2, [pc, #484]	; (8003938 <HAL_DMA_Abort_IT+0x294>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a77      	ldr	r2, [pc, #476]	; (800393c <HAL_DMA_Abort_IT+0x298>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_DMA_Abort_IT+0xc8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a76      	ldr	r2, [pc, #472]	; (8003940 <HAL_DMA_Abort_IT+0x29c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_DMA_Abort_IT+0xcc>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_DMA_Abort_IT+0xce>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d065      	beq.n	8003842 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2204      	movs	r2, #4
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a60      	ldr	r2, [pc, #384]	; (8003904 <HAL_DMA_Abort_IT+0x260>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_DMA_Abort_IT+0x264>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a5d      	ldr	r2, [pc, #372]	; (800390c <HAL_DMA_Abort_IT+0x268>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a5b      	ldr	r2, [pc, #364]	; (8003910 <HAL_DMA_Abort_IT+0x26c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	; (8003914 <HAL_DMA_Abort_IT+0x270>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a58      	ldr	r2, [pc, #352]	; (8003918 <HAL_DMA_Abort_IT+0x274>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_DMA_Abort_IT+0x278>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a55      	ldr	r2, [pc, #340]	; (8003920 <HAL_DMA_Abort_IT+0x27c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a54      	ldr	r2, [pc, #336]	; (8003924 <HAL_DMA_Abort_IT+0x280>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_DMA_Abort_IT+0x284>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_DMA_Abort_IT+0x288>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4f      	ldr	r2, [pc, #316]	; (8003930 <HAL_DMA_Abort_IT+0x28c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4e      	ldr	r2, [pc, #312]	; (8003934 <HAL_DMA_Abort_IT+0x290>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a4c      	ldr	r2, [pc, #304]	; (8003938 <HAL_DMA_Abort_IT+0x294>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a4b      	ldr	r2, [pc, #300]	; (800393c <HAL_DMA_Abort_IT+0x298>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_Abort_IT+0x17a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a49      	ldr	r2, [pc, #292]	; (8003940 <HAL_DMA_Abort_IT+0x29c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <HAL_DMA_Abort_IT+0x18c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e147      	b.n	8003ac0 <HAL_DMA_Abort_IT+0x41c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e13e      	b.n	8003ac0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 020e 	bic.w	r2, r2, #14
 8003850:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2b      	ldr	r2, [pc, #172]	; (8003904 <HAL_DMA_Abort_IT+0x260>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a29      	ldr	r2, [pc, #164]	; (8003908 <HAL_DMA_Abort_IT+0x264>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_DMA_Abort_IT+0x268>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <HAL_DMA_Abort_IT+0x26c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <HAL_DMA_Abort_IT+0x270>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a23      	ldr	r2, [pc, #140]	; (8003918 <HAL_DMA_Abort_IT+0x274>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a22      	ldr	r2, [pc, #136]	; (800391c <HAL_DMA_Abort_IT+0x278>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <HAL_DMA_Abort_IT+0x27c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <HAL_DMA_Abort_IT+0x280>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_DMA_Abort_IT+0x284>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_DMA_Abort_IT+0x288>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_DMA_Abort_IT+0x28c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <HAL_DMA_Abort_IT+0x290>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_DMA_Abort_IT+0x294>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_DMA_Abort_IT+0x298>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x24e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_DMA_Abort_IT+0x29c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d128      	bne.n	8003944 <HAL_DMA_Abort_IT+0x2a0>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e027      	b.n	8003954 <HAL_DMA_Abort_IT+0x2b0>
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5c      	ldr	r2, [pc, #368]	; (8003acc <HAL_DMA_Abort_IT+0x428>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d072      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5b      	ldr	r2, [pc, #364]	; (8003ad0 <HAL_DMA_Abort_IT+0x42c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d06d      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a59      	ldr	r2, [pc, #356]	; (8003ad4 <HAL_DMA_Abort_IT+0x430>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d068      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_DMA_Abort_IT+0x434>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d063      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a56      	ldr	r2, [pc, #344]	; (8003adc <HAL_DMA_Abort_IT+0x438>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d05e      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a55      	ldr	r2, [pc, #340]	; (8003ae0 <HAL_DMA_Abort_IT+0x43c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d059      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a53      	ldr	r2, [pc, #332]	; (8003ae4 <HAL_DMA_Abort_IT+0x440>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d054      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_DMA_Abort_IT+0x444>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d04f      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a50      	ldr	r2, [pc, #320]	; (8003aec <HAL_DMA_Abort_IT+0x448>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <HAL_DMA_Abort_IT+0x44c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a4d      	ldr	r2, [pc, #308]	; (8003af4 <HAL_DMA_Abort_IT+0x450>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a4c      	ldr	r2, [pc, #304]	; (8003af8 <HAL_DMA_Abort_IT+0x454>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_DMA_Abort_IT+0x458>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a49      	ldr	r2, [pc, #292]	; (8003b00 <HAL_DMA_Abort_IT+0x45c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a47      	ldr	r2, [pc, #284]	; (8003b04 <HAL_DMA_Abort_IT+0x460>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a46      	ldr	r2, [pc, #280]	; (8003b08 <HAL_DMA_Abort_IT+0x464>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <HAL_DMA_Abort_IT+0x468>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a43      	ldr	r2, [pc, #268]	; (8003b10 <HAL_DMA_Abort_IT+0x46c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a41      	ldr	r2, [pc, #260]	; (8003b14 <HAL_DMA_Abort_IT+0x470>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a40      	ldr	r2, [pc, #256]	; (8003b18 <HAL_DMA_Abort_IT+0x474>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <HAL_DMA_Abort_IT+0x478>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <HAL_DMA_Abort_IT+0x47c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <HAL_DMA_Abort_IT+0x480>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x3a0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_DMA_Abort_IT+0x484>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA_Abort_IT+0x3a4>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_Abort_IT+0x3a6>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d028      	beq.n	8003aa0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40020010 	.word	0x40020010
 8003ad0:	40020028 	.word	0x40020028
 8003ad4:	40020040 	.word	0x40020040
 8003ad8:	40020058 	.word	0x40020058
 8003adc:	40020070 	.word	0x40020070
 8003ae0:	40020088 	.word	0x40020088
 8003ae4:	400200a0 	.word	0x400200a0
 8003ae8:	400200b8 	.word	0x400200b8
 8003aec:	40020410 	.word	0x40020410
 8003af0:	40020428 	.word	0x40020428
 8003af4:	40020440 	.word	0x40020440
 8003af8:	40020458 	.word	0x40020458
 8003afc:	40020470 	.word	0x40020470
 8003b00:	40020488 	.word	0x40020488
 8003b04:	400204a0 	.word	0x400204a0
 8003b08:	400204b8 	.word	0x400204b8
 8003b0c:	58025408 	.word	0x58025408
 8003b10:	5802541c 	.word	0x5802541c
 8003b14:	58025430 	.word	0x58025430
 8003b18:	58025444 	.word	0x58025444
 8003b1c:	58025458 	.word	0x58025458
 8003b20:	5802546c 	.word	0x5802546c
 8003b24:	58025480 	.word	0x58025480
 8003b28:	58025494 	.word	0x58025494

08003b2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b38:	4b67      	ldr	r3, [pc, #412]	; (8003cd8 <HAL_DMA_IRQHandler+0x1ac>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a67      	ldr	r2, [pc, #412]	; (8003cdc <HAL_DMA_IRQHandler+0x1b0>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5f      	ldr	r2, [pc, #380]	; (8003ce0 <HAL_DMA_IRQHandler+0x1b4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d04a      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5d      	ldr	r2, [pc, #372]	; (8003ce4 <HAL_DMA_IRQHandler+0x1b8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d045      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <HAL_DMA_IRQHandler+0x1bc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d040      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a5a      	ldr	r2, [pc, #360]	; (8003cec <HAL_DMA_IRQHandler+0x1c0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d03b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a59      	ldr	r2, [pc, #356]	; (8003cf0 <HAL_DMA_IRQHandler+0x1c4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d036      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a57      	ldr	r2, [pc, #348]	; (8003cf4 <HAL_DMA_IRQHandler+0x1c8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d031      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a56      	ldr	r2, [pc, #344]	; (8003cf8 <HAL_DMA_IRQHandler+0x1cc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d02c      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a54      	ldr	r2, [pc, #336]	; (8003cfc <HAL_DMA_IRQHandler+0x1d0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d027      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a53      	ldr	r2, [pc, #332]	; (8003d00 <HAL_DMA_IRQHandler+0x1d4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a51      	ldr	r2, [pc, #324]	; (8003d04 <HAL_DMA_IRQHandler+0x1d8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01d      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a50      	ldr	r2, [pc, #320]	; (8003d08 <HAL_DMA_IRQHandler+0x1dc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4e      	ldr	r2, [pc, #312]	; (8003d0c <HAL_DMA_IRQHandler+0x1e0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4d      	ldr	r2, [pc, #308]	; (8003d10 <HAL_DMA_IRQHandler+0x1e4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <HAL_DMA_IRQHandler+0x1e8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a4a      	ldr	r2, [pc, #296]	; (8003d18 <HAL_DMA_IRQHandler+0x1ec>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xd2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a48      	ldr	r2, [pc, #288]	; (8003d1c <HAL_DMA_IRQHandler+0x1f0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_DMA_IRQHandler+0xd6>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <HAL_DMA_IRQHandler+0xd8>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 842b 	beq.w	8004460 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2208      	movs	r2, #8
 8003c14:	409a      	lsls	r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a2 	beq.w	8003d64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <HAL_DMA_IRQHandler+0x1b4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d04a      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <HAL_DMA_IRQHandler+0x1b8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d045      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <HAL_DMA_IRQHandler+0x1bc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d040      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2a      	ldr	r2, [pc, #168]	; (8003cec <HAL_DMA_IRQHandler+0x1c0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d03b      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <HAL_DMA_IRQHandler+0x1c4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d036      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <HAL_DMA_IRQHandler+0x1c8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d031      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <HAL_DMA_IRQHandler+0x1cc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d02c      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_DMA_IRQHandler+0x1d0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d027      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a22      	ldr	r2, [pc, #136]	; (8003d00 <HAL_DMA_IRQHandler+0x1d4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d022      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <HAL_DMA_IRQHandler+0x1d8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d01d      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_DMA_IRQHandler+0x1dc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d018      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <HAL_DMA_IRQHandler+0x1e0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_DMA_IRQHandler+0x1e4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_DMA_IRQHandler+0x1e8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_DMA_IRQHandler+0x1ec>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x194>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_DMA_IRQHandler+0x1f0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d12f      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x1f4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e02e      	b.n	8003d34 <HAL_DMA_IRQHandler+0x208>
 8003cd6:	bf00      	nop
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	1b4e81b5 	.word	0x1b4e81b5
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2208      	movs	r2, #8
 8003d52:	409a      	lsls	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d06e      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a69      	ldr	r2, [pc, #420]	; (8003f24 <HAL_DMA_IRQHandler+0x3f8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a67      	ldr	r2, [pc, #412]	; (8003f28 <HAL_DMA_IRQHandler+0x3fc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a66      	ldr	r2, [pc, #408]	; (8003f2c <HAL_DMA_IRQHandler+0x400>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a64      	ldr	r2, [pc, #400]	; (8003f30 <HAL_DMA_IRQHandler+0x404>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a63      	ldr	r2, [pc, #396]	; (8003f34 <HAL_DMA_IRQHandler+0x408>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a61      	ldr	r2, [pc, #388]	; (8003f38 <HAL_DMA_IRQHandler+0x40c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a60      	ldr	r2, [pc, #384]	; (8003f3c <HAL_DMA_IRQHandler+0x410>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a5e      	ldr	r2, [pc, #376]	; (8003f40 <HAL_DMA_IRQHandler+0x414>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5d      	ldr	r2, [pc, #372]	; (8003f44 <HAL_DMA_IRQHandler+0x418>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5b      	ldr	r2, [pc, #364]	; (8003f48 <HAL_DMA_IRQHandler+0x41c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a5a      	ldr	r2, [pc, #360]	; (8003f4c <HAL_DMA_IRQHandler+0x420>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_DMA_IRQHandler+0x424>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_DMA_IRQHandler+0x428>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a55      	ldr	r2, [pc, #340]	; (8003f58 <HAL_DMA_IRQHandler+0x42c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a54      	ldr	r2, [pc, #336]	; (8003f5c <HAL_DMA_IRQHandler+0x430>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2ee>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a52      	ldr	r2, [pc, #328]	; (8003f60 <HAL_DMA_IRQHandler+0x434>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10a      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x304>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e003      	b.n	8003e38 <HAL_DMA_IRQHandler+0x30c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f043 0202 	orr.w	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2204      	movs	r2, #4
 8003e62:	409a      	lsls	r2, r3
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 808f 	beq.w	8003f8c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <HAL_DMA_IRQHandler+0x3f8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d04a      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2a      	ldr	r2, [pc, #168]	; (8003f28 <HAL_DMA_IRQHandler+0x3fc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d045      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <HAL_DMA_IRQHandler+0x400>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d040      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <HAL_DMA_IRQHandler+0x404>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d03b      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <HAL_DMA_IRQHandler+0x408>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d036      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <HAL_DMA_IRQHandler+0x40c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d031      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_DMA_IRQHandler+0x410>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d02c      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_DMA_IRQHandler+0x414>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d027      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a20      	ldr	r2, [pc, #128]	; (8003f44 <HAL_DMA_IRQHandler+0x418>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d022      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_DMA_IRQHandler+0x41c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01d      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_DMA_IRQHandler+0x420>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d018      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_DMA_IRQHandler+0x424>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <HAL_DMA_IRQHandler+0x428>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00e      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_DMA_IRQHandler+0x42c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <HAL_DMA_IRQHandler+0x430>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x3e2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <HAL_DMA_IRQHandler+0x434>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d12a      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x438>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e023      	b.n	8003f6c <HAL_DMA_IRQHandler+0x440>
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2204      	movs	r2, #4
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2210      	movs	r2, #16
 8003f96:	409a      	lsls	r2, r3
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a6 	beq.w	80040ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a85      	ldr	r2, [pc, #532]	; (80041bc <HAL_DMA_IRQHandler+0x690>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a83      	ldr	r2, [pc, #524]	; (80041c0 <HAL_DMA_IRQHandler+0x694>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a82      	ldr	r2, [pc, #520]	; (80041c4 <HAL_DMA_IRQHandler+0x698>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a80      	ldr	r2, [pc, #512]	; (80041c8 <HAL_DMA_IRQHandler+0x69c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7f      	ldr	r2, [pc, #508]	; (80041cc <HAL_DMA_IRQHandler+0x6a0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a7d      	ldr	r2, [pc, #500]	; (80041d0 <HAL_DMA_IRQHandler+0x6a4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7c      	ldr	r2, [pc, #496]	; (80041d4 <HAL_DMA_IRQHandler+0x6a8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a7a      	ldr	r2, [pc, #488]	; (80041d8 <HAL_DMA_IRQHandler+0x6ac>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a79      	ldr	r2, [pc, #484]	; (80041dc <HAL_DMA_IRQHandler+0x6b0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a77      	ldr	r2, [pc, #476]	; (80041e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a76      	ldr	r2, [pc, #472]	; (80041e4 <HAL_DMA_IRQHandler+0x6b8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a74      	ldr	r2, [pc, #464]	; (80041e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a73      	ldr	r2, [pc, #460]	; (80041ec <HAL_DMA_IRQHandler+0x6c0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a71      	ldr	r2, [pc, #452]	; (80041f0 <HAL_DMA_IRQHandler+0x6c4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a70      	ldr	r2, [pc, #448]	; (80041f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0x516>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_DMA_IRQHandler+0x6cc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10a      	bne.n	8004058 <HAL_DMA_IRQHandler+0x52c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e009      	b.n	800406c <HAL_DMA_IRQHandler+0x540>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03e      	beq.n	80040ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	2210      	movs	r2, #16
 800407a:	409a      	lsls	r2, r3
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d018      	beq.n	80040c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d024      	beq.n	80040ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
 80040ac:	e01f      	b.n	80040ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01b      	beq.n	80040ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
 80040be:	e016      	b.n	80040ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0208 	bic.w	r2, r2, #8
 80040dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2220      	movs	r2, #32
 80040f8:	409a      	lsls	r2, r3
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 8110 	beq.w	8004324 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <HAL_DMA_IRQHandler+0x690>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d04a      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2b      	ldr	r2, [pc, #172]	; (80041c0 <HAL_DMA_IRQHandler+0x694>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d045      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <HAL_DMA_IRQHandler+0x698>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d040      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <HAL_DMA_IRQHandler+0x69c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d03b      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a26      	ldr	r2, [pc, #152]	; (80041cc <HAL_DMA_IRQHandler+0x6a0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d036      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a25      	ldr	r2, [pc, #148]	; (80041d0 <HAL_DMA_IRQHandler+0x6a4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d031      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <HAL_DMA_IRQHandler+0x6a8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02c      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_DMA_IRQHandler+0x6ac>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d027      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <HAL_DMA_IRQHandler+0x6b0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_DMA_IRQHandler+0x6b4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01d      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_DMA_IRQHandler+0x6b8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_DMA_IRQHandler+0x6bc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <HAL_DMA_IRQHandler+0x6c0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <HAL_DMA_IRQHandler+0x6c4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <HAL_DMA_IRQHandler+0x6c8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x678>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <HAL_DMA_IRQHandler+0x6cc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d12b      	bne.n	80041fc <HAL_DMA_IRQHandler+0x6d0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e02a      	b.n	8004210 <HAL_DMA_IRQHandler+0x6e4>
 80041ba:	bf00      	nop
 80041bc:	40020010 	.word	0x40020010
 80041c0:	40020028 	.word	0x40020028
 80041c4:	40020040 	.word	0x40020040
 80041c8:	40020058 	.word	0x40020058
 80041cc:	40020070 	.word	0x40020070
 80041d0:	40020088 	.word	0x40020088
 80041d4:	400200a0 	.word	0x400200a0
 80041d8:	400200b8 	.word	0x400200b8
 80041dc:	40020410 	.word	0x40020410
 80041e0:	40020428 	.word	0x40020428
 80041e4:	40020440 	.word	0x40020440
 80041e8:	40020458 	.word	0x40020458
 80041ec:	40020470 	.word	0x40020470
 80041f0:	40020488 	.word	0x40020488
 80041f4:	400204a0 	.word	0x400204a0
 80041f8:	400204b8 	.word	0x400204b8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8087 	beq.w	8004324 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2220      	movs	r2, #32
 8004220:	409a      	lsls	r2, r3
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b04      	cmp	r3, #4
 8004230:	d139      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0216 	bic.w	r2, r2, #22
 8004240:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004250:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_DMA_IRQHandler+0x736>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0208 	bic.w	r2, r2, #8
 8004270:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	223f      	movs	r2, #63	; 0x3f
 800427c:	409a      	lsls	r2, r3
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 834a 	beq.w	8004930 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
          }
          return;
 80042a4:	e344      	b.n	8004930 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d018      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d108      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02c      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	4798      	blx	r3
 80042d2:	e027      	b.n	8004324 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	e01e      	b.n	8004324 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10f      	bne.n	8004314 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0210 	bic.w	r2, r2, #16
 8004302:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8306 	beq.w	800493a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8088 	beq.w	800444c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2204      	movs	r2, #4
 8004340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7a      	ldr	r2, [pc, #488]	; (8004534 <HAL_DMA_IRQHandler+0xa08>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04a      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a79      	ldr	r2, [pc, #484]	; (8004538 <HAL_DMA_IRQHandler+0xa0c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d045      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a77      	ldr	r2, [pc, #476]	; (800453c <HAL_DMA_IRQHandler+0xa10>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d040      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a76      	ldr	r2, [pc, #472]	; (8004540 <HAL_DMA_IRQHandler+0xa14>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d03b      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a74      	ldr	r2, [pc, #464]	; (8004544 <HAL_DMA_IRQHandler+0xa18>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d036      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a73      	ldr	r2, [pc, #460]	; (8004548 <HAL_DMA_IRQHandler+0xa1c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d031      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a71      	ldr	r2, [pc, #452]	; (800454c <HAL_DMA_IRQHandler+0xa20>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02c      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a70      	ldr	r2, [pc, #448]	; (8004550 <HAL_DMA_IRQHandler+0xa24>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d027      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6e      	ldr	r2, [pc, #440]	; (8004554 <HAL_DMA_IRQHandler+0xa28>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6d      	ldr	r2, [pc, #436]	; (8004558 <HAL_DMA_IRQHandler+0xa2c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6b      	ldr	r2, [pc, #428]	; (800455c <HAL_DMA_IRQHandler+0xa30>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6a      	ldr	r2, [pc, #424]	; (8004560 <HAL_DMA_IRQHandler+0xa34>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a68      	ldr	r2, [pc, #416]	; (8004564 <HAL_DMA_IRQHandler+0xa38>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a67      	ldr	r2, [pc, #412]	; (8004568 <HAL_DMA_IRQHandler+0xa3c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a65      	ldr	r2, [pc, #404]	; (800456c <HAL_DMA_IRQHandler+0xa40>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_IRQHandler+0x8b8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a64      	ldr	r2, [pc, #400]	; (8004570 <HAL_DMA_IRQHandler+0xa44>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d108      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x8ca>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e007      	b.n	8004406 <HAL_DMA_IRQHandler+0x8da>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	429a      	cmp	r2, r3
 8004410:	d307      	bcc.n	8004422 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f2      	bne.n	8004406 <HAL_DMA_IRQHandler+0x8da>
 8004420:	e000      	b.n	8004424 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004422:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004442:	e003      	b.n	800444c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8272 	beq.w	800493a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
 800445e:	e26c      	b.n	800493a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a43      	ldr	r2, [pc, #268]	; (8004574 <HAL_DMA_IRQHandler+0xa48>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a42      	ldr	r2, [pc, #264]	; (8004578 <HAL_DMA_IRQHandler+0xa4c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01d      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a40      	ldr	r2, [pc, #256]	; (800457c <HAL_DMA_IRQHandler+0xa50>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3f      	ldr	r2, [pc, #252]	; (8004580 <HAL_DMA_IRQHandler+0xa54>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <HAL_DMA_IRQHandler+0xa58>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3c      	ldr	r2, [pc, #240]	; (8004588 <HAL_DMA_IRQHandler+0xa5c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3a      	ldr	r2, [pc, #232]	; (800458c <HAL_DMA_IRQHandler+0xa60>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x984>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a39      	ldr	r2, [pc, #228]	; (8004590 <HAL_DMA_IRQHandler+0xa64>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x988>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_DMA_IRQHandler+0x98a>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 823f 	beq.w	800493a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2204      	movs	r2, #4
 80044ce:	409a      	lsls	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80cd 	beq.w	8004674 <HAL_DMA_IRQHandler+0xb48>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80c7 	beq.w	8004674 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2204      	movs	r2, #4
 80044f0:	409a      	lsls	r2, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d049      	beq.n	8004594 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 8210 	beq.w	8004934 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451c:	e20a      	b.n	8004934 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8206 	beq.w	8004934 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004530:	e200      	b.n	8004934 <HAL_DMA_IRQHandler+0xe08>
 8004532:	bf00      	nop
 8004534:	40020010 	.word	0x40020010
 8004538:	40020028 	.word	0x40020028
 800453c:	40020040 	.word	0x40020040
 8004540:	40020058 	.word	0x40020058
 8004544:	40020070 	.word	0x40020070
 8004548:	40020088 	.word	0x40020088
 800454c:	400200a0 	.word	0x400200a0
 8004550:	400200b8 	.word	0x400200b8
 8004554:	40020410 	.word	0x40020410
 8004558:	40020428 	.word	0x40020428
 800455c:	40020440 	.word	0x40020440
 8004560:	40020458 	.word	0x40020458
 8004564:	40020470 	.word	0x40020470
 8004568:	40020488 	.word	0x40020488
 800456c:	400204a0 	.word	0x400204a0
 8004570:	400204b8 	.word	0x400204b8
 8004574:	58025408 	.word	0x58025408
 8004578:	5802541c 	.word	0x5802541c
 800457c:	58025430 	.word	0x58025430
 8004580:	58025444 	.word	0x58025444
 8004584:	58025458 	.word	0x58025458
 8004588:	5802546c 	.word	0x5802546c
 800458c:	58025480 	.word	0x58025480
 8004590:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d160      	bne.n	8004660 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a8c      	ldr	r2, [pc, #560]	; (80047d4 <HAL_DMA_IRQHandler+0xca8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04a      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a8a      	ldr	r2, [pc, #552]	; (80047d8 <HAL_DMA_IRQHandler+0xcac>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d045      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a89      	ldr	r2, [pc, #548]	; (80047dc <HAL_DMA_IRQHandler+0xcb0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d040      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a87      	ldr	r2, [pc, #540]	; (80047e0 <HAL_DMA_IRQHandler+0xcb4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03b      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a86      	ldr	r2, [pc, #536]	; (80047e4 <HAL_DMA_IRQHandler+0xcb8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d036      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a84      	ldr	r2, [pc, #528]	; (80047e8 <HAL_DMA_IRQHandler+0xcbc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a83      	ldr	r2, [pc, #524]	; (80047ec <HAL_DMA_IRQHandler+0xcc0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a81      	ldr	r2, [pc, #516]	; (80047f0 <HAL_DMA_IRQHandler+0xcc4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a80      	ldr	r2, [pc, #512]	; (80047f4 <HAL_DMA_IRQHandler+0xcc8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7e      	ldr	r2, [pc, #504]	; (80047f8 <HAL_DMA_IRQHandler+0xccc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a7d      	ldr	r2, [pc, #500]	; (80047fc <HAL_DMA_IRQHandler+0xcd0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a7b      	ldr	r2, [pc, #492]	; (8004800 <HAL_DMA_IRQHandler+0xcd4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a7a      	ldr	r2, [pc, #488]	; (8004804 <HAL_DMA_IRQHandler+0xcd8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a78      	ldr	r2, [pc, #480]	; (8004808 <HAL_DMA_IRQHandler+0xcdc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a77      	ldr	r2, [pc, #476]	; (800480c <HAL_DMA_IRQHandler+0xce0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_DMA_IRQHandler+0xb12>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a75      	ldr	r2, [pc, #468]	; (8004810 <HAL_DMA_IRQHandler+0xce4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d108      	bne.n	8004650 <HAL_DMA_IRQHandler+0xb24>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0208 	bic.w	r2, r2, #8
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e007      	b.n	8004660 <HAL_DMA_IRQHandler+0xb34>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0204 	bic.w	r2, r2, #4
 800465e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8165 	beq.w	8004934 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004672:	e15f      	b.n	8004934 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2202      	movs	r2, #2
 800467e:	409a      	lsls	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80c5 	beq.w	8004814 <HAL_DMA_IRQHandler+0xce8>
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80bf 	beq.w	8004814 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2202      	movs	r2, #2
 80046a0:	409a      	lsls	r2, r3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 813a 	beq.w	8004938 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046cc:	e134      	b.n	8004938 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8130 	beq.w	8004938 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e0:	e12a      	b.n	8004938 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d168      	bne.n	80047be <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a38      	ldr	r2, [pc, #224]	; (80047d4 <HAL_DMA_IRQHandler+0xca8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d04a      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a37      	ldr	r2, [pc, #220]	; (80047d8 <HAL_DMA_IRQHandler+0xcac>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d045      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a35      	ldr	r2, [pc, #212]	; (80047dc <HAL_DMA_IRQHandler+0xcb0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d040      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <HAL_DMA_IRQHandler+0xcb4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d03b      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a32      	ldr	r2, [pc, #200]	; (80047e4 <HAL_DMA_IRQHandler+0xcb8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d036      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_DMA_IRQHandler+0xcbc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d031      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <HAL_DMA_IRQHandler+0xcc0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d02c      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2e      	ldr	r2, [pc, #184]	; (80047f0 <HAL_DMA_IRQHandler+0xcc4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d027      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <HAL_DMA_IRQHandler+0xcc8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <HAL_DMA_IRQHandler+0xccc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01d      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a29      	ldr	r2, [pc, #164]	; (80047fc <HAL_DMA_IRQHandler+0xcd0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a28      	ldr	r2, [pc, #160]	; (8004800 <HAL_DMA_IRQHandler+0xcd4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a26      	ldr	r2, [pc, #152]	; (8004804 <HAL_DMA_IRQHandler+0xcd8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a25      	ldr	r2, [pc, #148]	; (8004808 <HAL_DMA_IRQHandler+0xcdc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a23      	ldr	r2, [pc, #140]	; (800480c <HAL_DMA_IRQHandler+0xce0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_DMA_IRQHandler+0xc60>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_DMA_IRQHandler+0xce4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d108      	bne.n	800479e <HAL_DMA_IRQHandler+0xc72>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0214 	bic.w	r2, r2, #20
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e007      	b.n	80047ae <HAL_DMA_IRQHandler+0xc82>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 020a 	bic.w	r2, r2, #10
 80047ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80b8 	beq.w	8004938 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047d0:	e0b2      	b.n	8004938 <HAL_DMA_IRQHandler+0xe0c>
 80047d2:	bf00      	nop
 80047d4:	40020010 	.word	0x40020010
 80047d8:	40020028 	.word	0x40020028
 80047dc:	40020040 	.word	0x40020040
 80047e0:	40020058 	.word	0x40020058
 80047e4:	40020070 	.word	0x40020070
 80047e8:	40020088 	.word	0x40020088
 80047ec:	400200a0 	.word	0x400200a0
 80047f0:	400200b8 	.word	0x400200b8
 80047f4:	40020410 	.word	0x40020410
 80047f8:	40020428 	.word	0x40020428
 80047fc:	40020440 	.word	0x40020440
 8004800:	40020458 	.word	0x40020458
 8004804:	40020470 	.word	0x40020470
 8004808:	40020488 	.word	0x40020488
 800480c:	400204a0 	.word	0x400204a0
 8004810:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2208      	movs	r2, #8
 800481e:	409a      	lsls	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8088 	beq.w	800493a <HAL_DMA_IRQHandler+0xe0e>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8082 	beq.w	800493a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_DMA_IRQHandler+0xe14>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d04a      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a3f      	ldr	r2, [pc, #252]	; (8004944 <HAL_DMA_IRQHandler+0xe18>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d045      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <HAL_DMA_IRQHandler+0xe1c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d040      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3c      	ldr	r2, [pc, #240]	; (800494c <HAL_DMA_IRQHandler+0xe20>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d03b      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <HAL_DMA_IRQHandler+0xe24>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d036      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a39      	ldr	r2, [pc, #228]	; (8004954 <HAL_DMA_IRQHandler+0xe28>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d031      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a38      	ldr	r2, [pc, #224]	; (8004958 <HAL_DMA_IRQHandler+0xe2c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d02c      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a36      	ldr	r2, [pc, #216]	; (800495c <HAL_DMA_IRQHandler+0xe30>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a35      	ldr	r2, [pc, #212]	; (8004960 <HAL_DMA_IRQHandler+0xe34>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a33      	ldr	r2, [pc, #204]	; (8004964 <HAL_DMA_IRQHandler+0xe38>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a32      	ldr	r2, [pc, #200]	; (8004968 <HAL_DMA_IRQHandler+0xe3c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a30      	ldr	r2, [pc, #192]	; (800496c <HAL_DMA_IRQHandler+0xe40>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2f      	ldr	r2, [pc, #188]	; (8004970 <HAL_DMA_IRQHandler+0xe44>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2d      	ldr	r2, [pc, #180]	; (8004974 <HAL_DMA_IRQHandler+0xe48>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2c      	ldr	r2, [pc, #176]	; (8004978 <HAL_DMA_IRQHandler+0xe4c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xdaa>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2a      	ldr	r2, [pc, #168]	; (800497c <HAL_DMA_IRQHandler+0xe50>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <HAL_DMA_IRQHandler+0xdbc>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 021c 	bic.w	r2, r2, #28
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e007      	b.n	80048f8 <HAL_DMA_IRQHandler+0xdcc>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 020e 	bic.w	r2, r2, #14
 80048f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2201      	movs	r2, #1
 8004902:	409a      	lsls	r2, r3
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
 800492e:	e004      	b.n	800493a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004930:	bf00      	nop
 8004932:	e002      	b.n	800493a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004938:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800493a:	3728      	adds	r7, #40	; 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40020010 	.word	0x40020010
 8004944:	40020028 	.word	0x40020028
 8004948:	40020040 	.word	0x40020040
 800494c:	40020058 	.word	0x40020058
 8004950:	40020070 	.word	0x40020070
 8004954:	40020088 	.word	0x40020088
 8004958:	400200a0 	.word	0x400200a0
 800495c:	400200b8 	.word	0x400200b8
 8004960:	40020410 	.word	0x40020410
 8004964:	40020428 	.word	0x40020428
 8004968:	40020440 	.word	0x40020440
 800496c:	40020458 	.word	0x40020458
 8004970:	40020470 	.word	0x40020470
 8004974:	40020488 	.word	0x40020488
 8004978:	400204a0 	.word	0x400204a0
 800497c:	400204b8 	.word	0x400204b8

08004980 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a84      	ldr	r2, [pc, #528]	; (8004bb0 <DMA_SetConfig+0x230>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d072      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a82      	ldr	r2, [pc, #520]	; (8004bb4 <DMA_SetConfig+0x234>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d06d      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a81      	ldr	r2, [pc, #516]	; (8004bb8 <DMA_SetConfig+0x238>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d068      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7f      	ldr	r2, [pc, #508]	; (8004bbc <DMA_SetConfig+0x23c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d063      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7e      	ldr	r2, [pc, #504]	; (8004bc0 <DMA_SetConfig+0x240>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d05e      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a7c      	ldr	r2, [pc, #496]	; (8004bc4 <DMA_SetConfig+0x244>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d059      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7b      	ldr	r2, [pc, #492]	; (8004bc8 <DMA_SetConfig+0x248>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d054      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a79      	ldr	r2, [pc, #484]	; (8004bcc <DMA_SetConfig+0x24c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04f      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a78      	ldr	r2, [pc, #480]	; (8004bd0 <DMA_SetConfig+0x250>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d04a      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a76      	ldr	r2, [pc, #472]	; (8004bd4 <DMA_SetConfig+0x254>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d045      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a75      	ldr	r2, [pc, #468]	; (8004bd8 <DMA_SetConfig+0x258>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d040      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a73      	ldr	r2, [pc, #460]	; (8004bdc <DMA_SetConfig+0x25c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d03b      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a72      	ldr	r2, [pc, #456]	; (8004be0 <DMA_SetConfig+0x260>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d036      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a70      	ldr	r2, [pc, #448]	; (8004be4 <DMA_SetConfig+0x264>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d031      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6f      	ldr	r2, [pc, #444]	; (8004be8 <DMA_SetConfig+0x268>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d02c      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a6d      	ldr	r2, [pc, #436]	; (8004bec <DMA_SetConfig+0x26c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d027      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6c      	ldr	r2, [pc, #432]	; (8004bf0 <DMA_SetConfig+0x270>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6a      	ldr	r2, [pc, #424]	; (8004bf4 <DMA_SetConfig+0x274>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01d      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a69      	ldr	r2, [pc, #420]	; (8004bf8 <DMA_SetConfig+0x278>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a67      	ldr	r2, [pc, #412]	; (8004bfc <DMA_SetConfig+0x27c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <DMA_SetConfig+0x280>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a64      	ldr	r2, [pc, #400]	; (8004c04 <DMA_SetConfig+0x284>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a63      	ldr	r2, [pc, #396]	; (8004c08 <DMA_SetConfig+0x288>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <DMA_SetConfig+0x10a>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a61      	ldr	r2, [pc, #388]	; (8004c0c <DMA_SetConfig+0x28c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <DMA_SetConfig+0x10e>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <DMA_SetConfig+0x110>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00d      	beq.n	8004ab0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a9c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a3e      	ldr	r2, [pc, #248]	; (8004bb0 <DMA_SetConfig+0x230>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d04a      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <DMA_SetConfig+0x234>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d045      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3b      	ldr	r2, [pc, #236]	; (8004bb8 <DMA_SetConfig+0x238>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d040      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3a      	ldr	r2, [pc, #232]	; (8004bbc <DMA_SetConfig+0x23c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d03b      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a38      	ldr	r2, [pc, #224]	; (8004bc0 <DMA_SetConfig+0x240>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d036      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <DMA_SetConfig+0x244>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d031      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a35      	ldr	r2, [pc, #212]	; (8004bc8 <DMA_SetConfig+0x248>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02c      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <DMA_SetConfig+0x24c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d027      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a32      	ldr	r2, [pc, #200]	; (8004bd0 <DMA_SetConfig+0x250>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <DMA_SetConfig+0x254>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d01d      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <DMA_SetConfig+0x258>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a2e      	ldr	r2, [pc, #184]	; (8004bdc <DMA_SetConfig+0x25c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <DMA_SetConfig+0x260>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <DMA_SetConfig+0x264>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <DMA_SetConfig+0x268>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <DMA_SetConfig+0x1d0>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a28      	ldr	r2, [pc, #160]	; (8004bec <DMA_SetConfig+0x26c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <DMA_SetConfig+0x1d4>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <DMA_SetConfig+0x1d6>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d05a      	beq.n	8004c10 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	223f      	movs	r2, #63	; 0x3f
 8004b64:	409a      	lsls	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b78:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d108      	bne.n	8004b9c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b9a:	e087      	b.n	8004cac <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
}
 8004bac:	e07e      	b.n	8004cac <DMA_SetConfig+0x32c>
 8004bae:	bf00      	nop
 8004bb0:	40020010 	.word	0x40020010
 8004bb4:	40020028 	.word	0x40020028
 8004bb8:	40020040 	.word	0x40020040
 8004bbc:	40020058 	.word	0x40020058
 8004bc0:	40020070 	.word	0x40020070
 8004bc4:	40020088 	.word	0x40020088
 8004bc8:	400200a0 	.word	0x400200a0
 8004bcc:	400200b8 	.word	0x400200b8
 8004bd0:	40020410 	.word	0x40020410
 8004bd4:	40020428 	.word	0x40020428
 8004bd8:	40020440 	.word	0x40020440
 8004bdc:	40020458 	.word	0x40020458
 8004be0:	40020470 	.word	0x40020470
 8004be4:	40020488 	.word	0x40020488
 8004be8:	400204a0 	.word	0x400204a0
 8004bec:	400204b8 	.word	0x400204b8
 8004bf0:	58025408 	.word	0x58025408
 8004bf4:	5802541c 	.word	0x5802541c
 8004bf8:	58025430 	.word	0x58025430
 8004bfc:	58025444 	.word	0x58025444
 8004c00:	58025458 	.word	0x58025458
 8004c04:	5802546c 	.word	0x5802546c
 8004c08:	58025480 	.word	0x58025480
 8004c0c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <DMA_SetConfig+0x338>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d022      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <DMA_SetConfig+0x33c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d01d      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <DMA_SetConfig+0x340>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d018      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a24      	ldr	r2, [pc, #144]	; (8004cc4 <DMA_SetConfig+0x344>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a22      	ldr	r2, [pc, #136]	; (8004cc8 <DMA_SetConfig+0x348>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00e      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a21      	ldr	r2, [pc, #132]	; (8004ccc <DMA_SetConfig+0x34c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <DMA_SetConfig+0x350>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <DMA_SetConfig+0x2e0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <DMA_SetConfig+0x354>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <DMA_SetConfig+0x2e4>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <DMA_SetConfig+0x2e6>
 8004c64:	2300      	movs	r3, #0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	409a      	lsls	r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d108      	bne.n	8004c9c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	60da      	str	r2, [r3, #12]
}
 8004c9a:	e007      	b.n	8004cac <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
}
 8004cac:	bf00      	nop
 8004cae:	371c      	adds	r7, #28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494

08004cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a42      	ldr	r2, [pc, #264]	; (8004df0 <DMA_CalcBaseAndBitshift+0x118>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a41      	ldr	r2, [pc, #260]	; (8004df4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3f      	ldr	r2, [pc, #252]	; (8004df8 <DMA_CalcBaseAndBitshift+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3e      	ldr	r2, [pc, #248]	; (8004dfc <DMA_CalcBaseAndBitshift+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <DMA_CalcBaseAndBitshift+0x128>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a39      	ldr	r2, [pc, #228]	; (8004e08 <DMA_CalcBaseAndBitshift+0x130>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a38      	ldr	r2, [pc, #224]	; (8004e0c <DMA_CalcBaseAndBitshift+0x134>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a36      	ldr	r2, [pc, #216]	; (8004e10 <DMA_CalcBaseAndBitshift+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a35      	ldr	r2, [pc, #212]	; (8004e14 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a33      	ldr	r2, [pc, #204]	; (8004e18 <DMA_CalcBaseAndBitshift+0x140>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a32      	ldr	r2, [pc, #200]	; (8004e1c <DMA_CalcBaseAndBitshift+0x144>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <DMA_CalcBaseAndBitshift+0x148>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <DMA_CalcBaseAndBitshift+0x150>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <DMA_CalcBaseAndBitshift+0x154>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <DMA_CalcBaseAndBitshift+0xac>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <DMA_CalcBaseAndBitshift+0xae>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d024      	beq.n	8004dd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3b10      	subs	r3, #16
 8004d92:	4a27      	ldr	r2, [pc, #156]	; (8004e30 <DMA_CalcBaseAndBitshift+0x158>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <DMA_CalcBaseAndBitshift+0x15c>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d908      	bls.n	8004dc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <DMA_CalcBaseAndBitshift+0x160>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	1d1a      	adds	r2, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	659a      	str	r2, [r3, #88]	; 0x58
 8004dc2:	e00d      	b.n	8004de0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <DMA_CalcBaseAndBitshift+0x160>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd2:	e005      	b.n	8004de0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40020010 	.word	0x40020010
 8004df4:	40020028 	.word	0x40020028
 8004df8:	40020040 	.word	0x40020040
 8004dfc:	40020058 	.word	0x40020058
 8004e00:	40020070 	.word	0x40020070
 8004e04:	40020088 	.word	0x40020088
 8004e08:	400200a0 	.word	0x400200a0
 8004e0c:	400200b8 	.word	0x400200b8
 8004e10:	40020410 	.word	0x40020410
 8004e14:	40020428 	.word	0x40020428
 8004e18:	40020440 	.word	0x40020440
 8004e1c:	40020458 	.word	0x40020458
 8004e20:	40020470 	.word	0x40020470
 8004e24:	40020488 	.word	0x40020488
 8004e28:	400204a0 	.word	0x400204a0
 8004e2c:	400204b8 	.word	0x400204b8
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	0800c484 	.word	0x0800c484
 8004e38:	fffffc00 	.word	0xfffffc00

08004e3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d120      	bne.n	8004e92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d858      	bhi.n	8004f0a <DMA_CheckFifoParam+0xce>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <DMA_CheckFifoParam+0x24>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e83 	.word	0x08004e83
 8004e68:	08004e71 	.word	0x08004e71
 8004e6c:	08004f0b 	.word	0x08004f0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d048      	beq.n	8004f0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e80:	e045      	b.n	8004f0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e8a:	d142      	bne.n	8004f12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e90:	e03f      	b.n	8004f12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9a:	d123      	bne.n	8004ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d838      	bhi.n	8004f16 <DMA_CheckFifoParam+0xda>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <DMA_CheckFifoParam+0x70>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ec3 	.word	0x08004ec3
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004ed5 	.word	0x08004ed5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec0:	e030      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d025      	beq.n	8004f1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed2:	e022      	b.n	8004f1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ee2:	e01c      	b.n	8004f1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d902      	bls.n	8004ef2 <DMA_CheckFifoParam+0xb6>
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ef0:	e018      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ef6:	e015      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
    break;
 8004f08:	e00b      	b.n	8004f22 <DMA_CheckFifoParam+0xe6>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e00a      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e008      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f12:	bf00      	nop
 8004f14:	e006      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
    break;
 8004f22:	bf00      	nop
    }
  }

  return status;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a38      	ldr	r2, [pc, #224]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a36      	ldr	r2, [pc, #216]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01d      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a35      	ldr	r2, [pc, #212]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a32      	ldr	r2, [pc, #200]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a30      	ldr	r2, [pc, #192]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3b08      	subs	r3, #8
 8004fa4:	4a28      	ldr	r2, [pc, #160]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4b26      	ldr	r3, [pc, #152]	; (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a24      	ldr	r2, [pc, #144]	; (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2201      	movs	r2, #1
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fd0:	e024      	b.n	800501c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	3b10      	subs	r3, #16
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d806      	bhi.n	8004ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d902      	bls.n	8004ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800500c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2201      	movs	r2, #1
 8005016:	409a      	lsls	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	58025408 	.word	0x58025408
 800502c:	5802541c 	.word	0x5802541c
 8005030:	58025430 	.word	0x58025430
 8005034:	58025444 	.word	0x58025444
 8005038:	58025458 	.word	0x58025458
 800503c:	5802546c 	.word	0x5802546c
 8005040:	58025480 	.word	0x58025480
 8005044:	58025494 	.word	0x58025494
 8005048:	cccccccd 	.word	0xcccccccd
 800504c:	16009600 	.word	0x16009600
 8005050:	58025880 	.word	0x58025880
 8005054:	aaaaaaab 	.word	0xaaaaaaab
 8005058:	400204b8 	.word	0x400204b8
 800505c:	4002040f 	.word	0x4002040f
 8005060:	10008200 	.word	0x10008200
 8005064:	40020880 	.word	0x40020880

08005068 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04a      	beq.n	8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d847      	bhi.n	8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d022      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d01d      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d018      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	; (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050f0:	671a      	str	r2, [r3, #112]	; 0x70
 80050f2:	e009      	b.n	8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005106:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3b01      	subs	r3, #1
 800510c:	2201      	movs	r2, #1
 800510e:	409a      	lsls	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	58025408 	.word	0x58025408
 8005124:	5802541c 	.word	0x5802541c
 8005128:	58025430 	.word	0x58025430
 800512c:	58025444 	.word	0x58025444
 8005130:	58025458 	.word	0x58025458
 8005134:	5802546c 	.word	0x5802546c
 8005138:	58025480 	.word	0x58025480
 800513c:	58025494 	.word	0x58025494
 8005140:	1600963f 	.word	0x1600963f
 8005144:	58025940 	.word	0x58025940
 8005148:	1000823f 	.word	0x1000823f
 800514c:	40020940 	.word	0x40020940

08005150 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800515e:	4b89      	ldr	r3, [pc, #548]	; (8005384 <HAL_GPIO_Init+0x234>)
 8005160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005162:	e194      	b.n	800548e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2101      	movs	r1, #1
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	4013      	ands	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8186 	beq.w	8005488 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d00b      	beq.n	800519c <HAL_GPIO_Init+0x4c>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d007      	beq.n	800519c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005190:	2b11      	cmp	r3, #17
 8005192:	d003      	beq.n	800519c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b12      	cmp	r3, #18
 800519a:	d130      	bne.n	80051fe <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051d2:	2201      	movs	r2, #1
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f003 0201 	and.w	r2, r3, #1
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	2203      	movs	r2, #3
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	43db      	mvns	r3, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0xee>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b12      	cmp	r3, #18
 800523c:	d123      	bne.n	8005286 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	08da      	lsrs	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3208      	adds	r2, #8
 8005246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	220f      	movs	r2, #15
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	08da      	lsrs	r2, r3, #3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3208      	adds	r2, #8
 8005280:	69b9      	ldr	r1, [r7, #24]
 8005282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	2203      	movs	r2, #3
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	43db      	mvns	r3, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4013      	ands	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 0203 	and.w	r2, r3, #3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80e0 	beq.w	8005488 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c8:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <HAL_GPIO_Init+0x238>)
 80052ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052ce:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <HAL_GPIO_Init+0x238>)
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_GPIO_Init+0x238>)
 80052da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052e6:	4a29      	ldr	r2, [pc, #164]	; (800538c <HAL_GPIO_Init+0x23c>)
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	3302      	adds	r3, #2
 80052ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	220f      	movs	r2, #15
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a20      	ldr	r2, [pc, #128]	; (8005390 <HAL_GPIO_Init+0x240>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d052      	beq.n	80053b8 <HAL_GPIO_Init+0x268>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_GPIO_Init+0x244>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d031      	beq.n	800537e <HAL_GPIO_Init+0x22e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_GPIO_Init+0x248>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d02b      	beq.n	800537a <HAL_GPIO_Init+0x22a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_GPIO_Init+0x24c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d025      	beq.n	8005376 <HAL_GPIO_Init+0x226>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_GPIO_Init+0x250>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01f      	beq.n	8005372 <HAL_GPIO_Init+0x222>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_GPIO_Init+0x254>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d019      	beq.n	800536e <HAL_GPIO_Init+0x21e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_GPIO_Init+0x258>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_GPIO_Init+0x21a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a19      	ldr	r2, [pc, #100]	; (80053ac <HAL_GPIO_Init+0x25c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00d      	beq.n	8005366 <HAL_GPIO_Init+0x216>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <HAL_GPIO_Init+0x260>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <HAL_GPIO_Init+0x212>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_GPIO_Init+0x264>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <HAL_GPIO_Init+0x20e>
 800535a:	2309      	movs	r3, #9
 800535c:	e02d      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 800535e:	230a      	movs	r3, #10
 8005360:	e02b      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 8005362:	2308      	movs	r3, #8
 8005364:	e029      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 8005366:	2307      	movs	r3, #7
 8005368:	e027      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 800536a:	2306      	movs	r3, #6
 800536c:	e025      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 800536e:	2305      	movs	r3, #5
 8005370:	e023      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 8005372:	2304      	movs	r3, #4
 8005374:	e021      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 8005376:	2303      	movs	r3, #3
 8005378:	e01f      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 800537a:	2302      	movs	r3, #2
 800537c:	e01d      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 800537e:	2301      	movs	r3, #1
 8005380:	e01b      	b.n	80053ba <HAL_GPIO_Init+0x26a>
 8005382:	bf00      	nop
 8005384:	58000080 	.word	0x58000080
 8005388:	58024400 	.word	0x58024400
 800538c:	58000400 	.word	0x58000400
 8005390:	58020000 	.word	0x58020000
 8005394:	58020400 	.word	0x58020400
 8005398:	58020800 	.word	0x58020800
 800539c:	58020c00 	.word	0x58020c00
 80053a0:	58021000 	.word	0x58021000
 80053a4:	58021400 	.word	0x58021400
 80053a8:	58021800 	.word	0x58021800
 80053ac:	58021c00 	.word	0x58021c00
 80053b0:	58022000 	.word	0x58022000
 80053b4:	58022400 	.word	0x58022400
 80053b8:	2300      	movs	r3, #0
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	f002 0203 	and.w	r2, r2, #3
 80053c0:	0092      	lsls	r2, r2, #2
 80053c2:	4093      	lsls	r3, r2
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053ca:	4938      	ldr	r1, [pc, #224]	; (80054ac <HAL_GPIO_Init+0x35c>)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	3302      	adds	r3, #2
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800545a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3301      	adds	r3, #1
 800548c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	f47f ae63 	bne.w	8005164 <HAL_GPIO_Init+0x14>
  }
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	3724      	adds	r7, #36	; 0x24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	58000400 	.word	0x58000400

080054b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
 80054bc:	4613      	mov	r3, r2
 80054be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054c0:	787b      	ldrb	r3, [r7, #1]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054c6:	887a      	ldrh	r2, [r7, #2]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054cc:	e003      	b.n	80054d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054ce:	887b      	ldrh	r3, [r7, #2]
 80054d0:	041a      	lsls	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	619a      	str	r2, [r3, #24]
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b082      	sub	sp, #8
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	4603      	mov	r3, r0
 80054ea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	4618      	mov	r0, r3
 800550a:	f7fc f885 	bl	8001618 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005520:	4b19      	ldr	r3, [pc, #100]	; (8005588 <HAL_PWREx_ConfigSupply+0x70>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d00a      	beq.n	8005542 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800552c:	4b16      	ldr	r3, [pc, #88]	; (8005588 <HAL_PWREx_ConfigSupply+0x70>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	429a      	cmp	r2, r3
 8005538:	d001      	beq.n	800553e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e01f      	b.n	800557e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e01d      	b.n	800557e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_PWREx_ConfigSupply+0x70>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f023 0207 	bic.w	r2, r3, #7
 800554a:	490f      	ldr	r1, [pc, #60]	; (8005588 <HAL_PWREx_ConfigSupply+0x70>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4313      	orrs	r3, r2
 8005550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005552:	f7fc fe77 	bl	8002244 <HAL_GetTick>
 8005556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005558:	e009      	b.n	800556e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800555a:	f7fc fe73 	bl	8002244 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005568:	d901      	bls.n	800556e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e007      	b.n	800557e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_PWREx_ConfigSupply+0x70>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557a:	d1ee      	bne.n	800555a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	58024800 	.word	0x58024800

0800558c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	; 0x30
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e3ff      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8087 	beq.w	80056ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ac:	4b99      	ldr	r3, [pc, #612]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055b6:	4b97      	ldr	r3, [pc, #604]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d007      	beq.n	80055d2 <HAL_RCC_OscConfig+0x46>
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	2b18      	cmp	r3, #24
 80055c6:	d110      	bne.n	80055ea <HAL_RCC_OscConfig+0x5e>
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d10b      	bne.n	80055ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d2:	4b90      	ldr	r3, [pc, #576]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d06c      	beq.n	80056b8 <HAL_RCC_OscConfig+0x12c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d168      	bne.n	80056b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e3d9      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f2:	d106      	bne.n	8005602 <HAL_RCC_OscConfig+0x76>
 80055f4:	4b87      	ldr	r3, [pc, #540]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a86      	ldr	r2, [pc, #536]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80055fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e02e      	b.n	8005660 <HAL_RCC_OscConfig+0xd4>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <HAL_RCC_OscConfig+0x98>
 800560a:	4b82      	ldr	r3, [pc, #520]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a81      	ldr	r2, [pc, #516]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b7f      	ldr	r3, [pc, #508]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7e      	ldr	r2, [pc, #504]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800561c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e01d      	b.n	8005660 <HAL_RCC_OscConfig+0xd4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800562c:	d10c      	bne.n	8005648 <HAL_RCC_OscConfig+0xbc>
 800562e:	4b79      	ldr	r3, [pc, #484]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a78      	ldr	r2, [pc, #480]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	4b76      	ldr	r3, [pc, #472]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a75      	ldr	r2, [pc, #468]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e00b      	b.n	8005660 <HAL_RCC_OscConfig+0xd4>
 8005648:	4b72      	ldr	r3, [pc, #456]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a71      	ldr	r2, [pc, #452]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6e      	ldr	r2, [pc, #440]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800565a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc fdec 	bl	8002244 <HAL_GetTick>
 800566c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005670:	f7fc fde8 	bl	8002244 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	; 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e38d      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005682:	4b64      	ldr	r3, [pc, #400]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0xe4>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fc fdd8 	bl	8002244 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005698:	f7fc fdd4 	bl	8002244 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	; 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e379      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056aa:	4b5a      	ldr	r3, [pc, #360]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x10c>
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80ae 	beq.w	8005824 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c8:	4b52      	ldr	r3, [pc, #328]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056d2:	4b50      	ldr	r3, [pc, #320]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_RCC_OscConfig+0x162>
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2b18      	cmp	r3, #24
 80056e2:	d13a      	bne.n	800575a <HAL_RCC_OscConfig+0x1ce>
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d135      	bne.n	800575a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ee:	4b49      	ldr	r3, [pc, #292]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_RCC_OscConfig+0x17a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e34b      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005706:	f7fc fdcd 	bl	80022a4 <HAL_GetREVID>
 800570a:	4603      	mov	r3, r0
 800570c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005710:	4293      	cmp	r3, r2
 8005712:	d817      	bhi.n	8005744 <HAL_RCC_OscConfig+0x1b8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d108      	bne.n	800572e <HAL_RCC_OscConfig+0x1a2>
 800571c:	4b3d      	ldr	r3, [pc, #244]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005724:	4a3b      	ldr	r2, [pc, #236]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800572c:	e07a      	b.n	8005824 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572e:	4b39      	ldr	r3, [pc, #228]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	4935      	ldr	r1, [pc, #212]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 800573e:	4313      	orrs	r3, r2
 8005740:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005742:	e06f      	b.n	8005824 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005744:	4b33      	ldr	r3, [pc, #204]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	4930      	ldr	r1, [pc, #192]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005758:	e064      	b.n	8005824 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d045      	beq.n	80057ee <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005762:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 0219 	bic.w	r2, r3, #25
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4929      	ldr	r1, [pc, #164]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005770:	4313      	orrs	r3, r2
 8005772:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fc fd66 	bl	8002244 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800577c:	f7fc fd62 	bl	8002244 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e307      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579a:	f7fc fd83 	bl	80022a4 <HAL_GetREVID>
 800579e:	4603      	mov	r3, r0
 80057a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d817      	bhi.n	80057d8 <HAL_RCC_OscConfig+0x24c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d108      	bne.n	80057c2 <HAL_RCC_OscConfig+0x236>
 80057b0:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057b8:	4a16      	ldr	r2, [pc, #88]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057be:	6053      	str	r3, [r2, #4]
 80057c0:	e030      	b.n	8005824 <HAL_RCC_OscConfig+0x298>
 80057c2:	4b14      	ldr	r3, [pc, #80]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	4910      	ldr	r1, [pc, #64]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
 80057d6:	e025      	b.n	8005824 <HAL_RCC_OscConfig+0x298>
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	490b      	ldr	r1, [pc, #44]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
 80057ec:	e01a      	b.n	8005824 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <HAL_RCC_OscConfig+0x288>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fc fd23 	bl	8002244 <HAL_GetTick>
 80057fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005802:	f7fc fd1f 	bl	8002244 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d903      	bls.n	8005818 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e2c4      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
 8005814:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005818:	4ba4      	ldr	r3, [pc, #656]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ee      	bne.n	8005802 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80a9 	beq.w	8005984 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005832:	4b9e      	ldr	r3, [pc, #632]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800583c:	4b9b      	ldr	r3, [pc, #620]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d007      	beq.n	8005858 <HAL_RCC_OscConfig+0x2cc>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b18      	cmp	r3, #24
 800584c:	d13a      	bne.n	80058c4 <HAL_RCC_OscConfig+0x338>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d135      	bne.n	80058c4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005858:	4b94      	ldr	r3, [pc, #592]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_OscConfig+0x2e4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2b80      	cmp	r3, #128	; 0x80
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e296      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005870:	f7fc fd18 	bl	80022a4 <HAL_GetREVID>
 8005874:	4603      	mov	r3, r0
 8005876:	f241 0203 	movw	r2, #4099	; 0x1003
 800587a:	4293      	cmp	r3, r2
 800587c:	d817      	bhi.n	80058ae <HAL_RCC_OscConfig+0x322>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	2b20      	cmp	r3, #32
 8005884:	d108      	bne.n	8005898 <HAL_RCC_OscConfig+0x30c>
 8005886:	4b89      	ldr	r3, [pc, #548]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800588e:	4a87      	ldr	r2, [pc, #540]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005894:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005896:	e075      	b.n	8005984 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005898:	4b84      	ldr	r3, [pc, #528]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	069b      	lsls	r3, r3, #26
 80058a6:	4981      	ldr	r1, [pc, #516]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058ac:	e06a      	b.n	8005984 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058ae:	4b7f      	ldr	r3, [pc, #508]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	497b      	ldr	r1, [pc, #492]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058c2:	e05f      	b.n	8005984 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d042      	beq.n	8005952 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058cc:	4b77      	ldr	r3, [pc, #476]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a76      	ldr	r2, [pc, #472]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fc fcb4 	bl	8002244 <HAL_GetTick>
 80058dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058e0:	f7fc fcb0 	bl	8002244 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e255      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f2:	4b6e      	ldr	r3, [pc, #440]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058fe:	f7fc fcd1 	bl	80022a4 <HAL_GetREVID>
 8005902:	4603      	mov	r3, r0
 8005904:	f241 0203 	movw	r2, #4099	; 0x1003
 8005908:	4293      	cmp	r3, r2
 800590a:	d817      	bhi.n	800593c <HAL_RCC_OscConfig+0x3b0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	2b20      	cmp	r3, #32
 8005912:	d108      	bne.n	8005926 <HAL_RCC_OscConfig+0x39a>
 8005914:	4b65      	ldr	r3, [pc, #404]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800591c:	4a63      	ldr	r2, [pc, #396]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800591e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005922:	6053      	str	r3, [r2, #4]
 8005924:	e02e      	b.n	8005984 <HAL_RCC_OscConfig+0x3f8>
 8005926:	4b61      	ldr	r3, [pc, #388]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	069b      	lsls	r3, r3, #26
 8005934:	495d      	ldr	r1, [pc, #372]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
 800593a:	e023      	b.n	8005984 <HAL_RCC_OscConfig+0x3f8>
 800593c:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	4958      	ldr	r1, [pc, #352]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800594c:	4313      	orrs	r3, r2
 800594e:	60cb      	str	r3, [r1, #12]
 8005950:	e018      	b.n	8005984 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005952:	4b56      	ldr	r3, [pc, #344]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a55      	ldr	r2, [pc, #340]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595e:	f7fc fc71 	bl	8002244 <HAL_GetTick>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005966:	f7fc fc6d 	bl	8002244 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e212      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005978:	4b4c      	ldr	r3, [pc, #304]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f0      	bne.n	8005966 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b00      	cmp	r3, #0
 800598e:	d036      	beq.n	80059fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005998:	4b44      	ldr	r3, [pc, #272]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	4a43      	ldr	r2, [pc, #268]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fc fc4e 	bl	8002244 <HAL_GetTick>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ac:	f7fc fc4a 	bl	8002244 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e1ef      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059be:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80059c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0x420>
 80059ca:	e018      	b.n	80059fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059cc:	4b37      	ldr	r3, [pc, #220]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80059ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d0:	4a36      	ldr	r2, [pc, #216]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fc fc34 	bl	8002244 <HAL_GetTick>
 80059dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059e0:	f7fc fc30 	bl	8002244 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e1d5      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059f2:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 80059f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d036      	beq.n	8005a78 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d019      	beq.n	8005a46 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a12:	4b26      	ldr	r3, [pc, #152]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a25      	ldr	r2, [pc, #148]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a1e:	f7fc fc11 	bl	8002244 <HAL_GetTick>
 8005a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a26:	f7fc fc0d 	bl	8002244 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e1b2      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x49a>
 8005a44:	e018      	b.n	8005a78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a46:	4b19      	ldr	r3, [pc, #100]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a18      	ldr	r2, [pc, #96]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a52:	f7fc fbf7 	bl	8002244 <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a5a:	f7fc fbf3 	bl	8002244 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e198      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <HAL_RCC_OscConfig+0x520>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8085 	beq.w	8005b90 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <HAL_RCC_OscConfig+0x524>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <HAL_RCC_OscConfig+0x524>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a92:	f7fc fbd7 	bl	8002244 <HAL_GetTick>
 8005a96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a98:	e00c      	b.n	8005ab4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a9a:	f7fc fbd3 	bl	8002244 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b64      	cmp	r3, #100	; 0x64
 8005aa6:	d905      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e178      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab4:	4b96      	ldr	r3, [pc, #600]	; (8005d10 <HAL_RCC_OscConfig+0x784>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ec      	beq.n	8005a9a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x54a>
 8005ac8:	4b92      	ldr	r3, [pc, #584]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a91      	ldr	r2, [pc, #580]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	e02d      	b.n	8005b32 <HAL_RCC_OscConfig+0x5a6>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x56c>
 8005ade:	4b8d      	ldr	r3, [pc, #564]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a8c      	ldr	r2, [pc, #560]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aea:	4b8a      	ldr	r3, [pc, #552]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	4a89      	ldr	r2, [pc, #548]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005af0:	f023 0304 	bic.w	r3, r3, #4
 8005af4:	6713      	str	r3, [r2, #112]	; 0x70
 8005af6:	e01c      	b.n	8005b32 <HAL_RCC_OscConfig+0x5a6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_OscConfig+0x58e>
 8005b00:	4b84      	ldr	r3, [pc, #528]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	4a83      	ldr	r2, [pc, #524]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b06:	f043 0304 	orr.w	r3, r3, #4
 8005b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0c:	4b81      	ldr	r3, [pc, #516]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	4a80      	ldr	r2, [pc, #512]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6713      	str	r3, [r2, #112]	; 0x70
 8005b18:	e00b      	b.n	8005b32 <HAL_RCC_OscConfig+0x5a6>
 8005b1a:	4b7e      	ldr	r3, [pc, #504]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4a7d      	ldr	r2, [pc, #500]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	6713      	str	r3, [r2, #112]	; 0x70
 8005b26:	4b7b      	ldr	r3, [pc, #492]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	4a7a      	ldr	r2, [pc, #488]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d015      	beq.n	8005b66 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3a:	f7fc fb83 	bl	8002244 <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fc fb7f 	bl	8002244 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e122      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b58:	4b6e      	ldr	r3, [pc, #440]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ee      	beq.n	8005b42 <HAL_RCC_OscConfig+0x5b6>
 8005b64:	e014      	b.n	8005b90 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fc fb6d 	bl	8002244 <HAL_GetTick>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fc fb69 	bl	8002244 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e10c      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b84:	4b63      	ldr	r3, [pc, #396]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1ee      	bne.n	8005b6e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8101 	beq.w	8005d9c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b9a:	4b5e      	ldr	r3, [pc, #376]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ba2:	2b18      	cmp	r3, #24
 8005ba4:	f000 80bc 	beq.w	8005d20 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	f040 8095 	bne.w	8005cdc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b58      	ldr	r3, [pc, #352]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a57      	ldr	r2, [pc, #348]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fc fb41 	bl	8002244 <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fc fb3d 	bl	8002244 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e0e2      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bd8:	4b4e      	ldr	r3, [pc, #312]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be4:	4b4b      	ldr	r3, [pc, #300]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be8:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <HAL_RCC_OscConfig+0x78c>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bf4:	0112      	lsls	r2, r2, #4
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	4946      	ldr	r1, [pc, #280]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	628b      	str	r3, [r1, #40]	; 0x28
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	3b01      	subs	r3, #1
 8005c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	025b      	lsls	r3, r3, #9
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c26:	3b01      	subs	r3, #1
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c2e:	4939      	ldr	r1, [pc, #228]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c34:	4b37      	ldr	r3, [pc, #220]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c40:	4b34      	ldr	r3, [pc, #208]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	4b35      	ldr	r3, [pc, #212]	; (8005d1c <HAL_RCC_OscConfig+0x790>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c4c:	00d2      	lsls	r2, r2, #3
 8005c4e:	4931      	ldr	r1, [pc, #196]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f023 020c 	bic.w	r2, r3, #12
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	492c      	ldr	r1, [pc, #176]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	f023 0202 	bic.w	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	4928      	ldr	r1, [pc, #160]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	4a25      	ldr	r2, [pc, #148]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c84:	4b23      	ldr	r3, [pc, #140]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	4a22      	ldr	r2, [pc, #136]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c90:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fc fac6 	bl	8002244 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc fac2 	bl	8002244 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e067      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x730>
 8005cda:	e05f      	b.n	8005d9c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0c      	ldr	r2, [pc, #48]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fc faac 	bl	8002244 <HAL_GetTick>
 8005cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fc faa8 	bl	8002244 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e04d      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <HAL_RCC_OscConfig+0x788>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x764>
 8005d0e:	e045      	b.n	8005d9c <HAL_RCC_OscConfig+0x810>
 8005d10:	58024800 	.word	0x58024800
 8005d14:	58024400 	.word	0x58024400
 8005d18:	fffffc0c 	.word	0xfffffc0c
 8005d1c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d20:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <HAL_RCC_OscConfig+0x81c>)
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_RCC_OscConfig+0x81c>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d031      	beq.n	8005d98 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f003 0203 	and.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d12a      	bne.n	8005d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d122      	bne.n	8005d98 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d11a      	bne.n	8005d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	0a5b      	lsrs	r3, r3, #9
 8005d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d111      	bne.n	8005d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	0c1b      	lsrs	r3, r3, #16
 8005d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d108      	bne.n	8005d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	0e1b      	lsrs	r3, r3, #24
 8005d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d001      	beq.n	8005d9c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3730      	adds	r7, #48	; 0x30
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	58024400 	.word	0x58024400

08005dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e19c      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b8a      	ldr	r3, [pc, #552]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d910      	bls.n	8005df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b87      	ldr	r3, [pc, #540]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020f 	bic.w	r2, r3, #15
 8005dd6:	4985      	ldr	r1, [pc, #532]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b83      	ldr	r3, [pc, #524]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e184      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	4b7b      	ldr	r3, [pc, #492]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d908      	bls.n	8005e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e0c:	4b78      	ldr	r3, [pc, #480]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4975      	ldr	r1, [pc, #468]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	4b70      	ldr	r3, [pc, #448]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d908      	bls.n	8005e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e3a:	4b6d      	ldr	r3, [pc, #436]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	496a      	ldr	r1, [pc, #424]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	4b64      	ldr	r3, [pc, #400]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d908      	bls.n	8005e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e68:	4b61      	ldr	r3, [pc, #388]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	495e      	ldr	r1, [pc, #376]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	4b59      	ldr	r3, [pc, #356]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d908      	bls.n	8005ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e96:	4b56      	ldr	r3, [pc, #344]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4953      	ldr	r1, [pc, #332]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d908      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f023 020f 	bic.w	r2, r3, #15
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4947      	ldr	r1, [pc, #284]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d055      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ee2:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4940      	ldr	r1, [pc, #256]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005efc:	4b3c      	ldr	r3, [pc, #240]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d121      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0f6      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f14:	4b36      	ldr	r3, [pc, #216]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d115      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0ea      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d107      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f2c:	4b30      	ldr	r3, [pc, #192]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0de      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0d6      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f4c:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f023 0207 	bic.w	r2, r3, #7
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4925      	ldr	r1, [pc, #148]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5e:	f7fc f971 	bl	8002244 <HAL_GetTick>
 8005f62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f64:	e00a      	b.n	8005f7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f66:	f7fc f96d 	bl	8002244 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e0be      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d1eb      	bne.n	8005f66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d208      	bcs.n	8005fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f023 020f 	bic.w	r2, r3, #15
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	490e      	ldr	r1, [pc, #56]	; (8005ff0 <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d214      	bcs.n	8005ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 020f 	bic.w	r2, r3, #15
 8005fd2:	4906      	ldr	r1, [pc, #24]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b04      	ldr	r3, [pc, #16]	; (8005fec <HAL_RCC_ClockConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e086      	b.n	80060fa <HAL_RCC_ClockConfig+0x34e>
 8005fec:	52002000 	.word	0x52002000
 8005ff0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d010      	beq.n	8006022 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	4b3f      	ldr	r3, [pc, #252]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800600c:	429a      	cmp	r2, r3
 800600e:	d208      	bcs.n	8006022 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006010:	4b3c      	ldr	r3, [pc, #240]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	4939      	ldr	r1, [pc, #228]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 800601e:	4313      	orrs	r3, r2
 8006020:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	4b34      	ldr	r3, [pc, #208]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800603a:	429a      	cmp	r2, r3
 800603c:	d208      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	492e      	ldr	r1, [pc, #184]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 800604c:	4313      	orrs	r3, r2
 800604e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006068:	429a      	cmp	r2, r3
 800606a:	d208      	bcs.n	800607e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800606c:	4b25      	ldr	r3, [pc, #148]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	4922      	ldr	r1, [pc, #136]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 800607a:	4313      	orrs	r3, r2
 800607c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69da      	ldr	r2, [r3, #28]
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006096:	429a      	cmp	r2, r3
 8006098:	d208      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4917      	ldr	r1, [pc, #92]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80060ac:	f000 f834 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	4912      	ldr	r1, [pc, #72]	; (8006108 <HAL_RCC_ClockConfig+0x35c>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <HAL_RCC_ClockConfig+0x358>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	4a0d      	ldr	r2, [pc, #52]	; (8006108 <HAL_RCC_ClockConfig+0x35c>)
 80060d4:	5cd3      	ldrb	r3, [r2, r3]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
 80060e0:	4a0a      	ldr	r2, [pc, #40]	; (800610c <HAL_RCC_ClockConfig+0x360>)
 80060e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060e4:	4a0a      	ldr	r2, [pc, #40]	; (8006110 <HAL_RCC_ClockConfig+0x364>)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <HAL_RCC_ClockConfig+0x368>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fc f85e 	bl	80021b0 <HAL_InitTick>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	58024400 	.word	0x58024400
 8006108:	0800c474 	.word	0x0800c474
 800610c:	20000004 	.word	0x20000004
 8006110:	20000000 	.word	0x20000000
 8006114:	20000008 	.word	0x20000008

08006118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800611e:	4bb3      	ldr	r3, [pc, #716]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006126:	2b18      	cmp	r3, #24
 8006128:	f200 8155 	bhi.w	80063d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006199 	.word	0x08006199
 8006138:	080063d7 	.word	0x080063d7
 800613c:	080063d7 	.word	0x080063d7
 8006140:	080063d7 	.word	0x080063d7
 8006144:	080063d7 	.word	0x080063d7
 8006148:	080063d7 	.word	0x080063d7
 800614c:	080063d7 	.word	0x080063d7
 8006150:	080063d7 	.word	0x080063d7
 8006154:	080061bf 	.word	0x080061bf
 8006158:	080063d7 	.word	0x080063d7
 800615c:	080063d7 	.word	0x080063d7
 8006160:	080063d7 	.word	0x080063d7
 8006164:	080063d7 	.word	0x080063d7
 8006168:	080063d7 	.word	0x080063d7
 800616c:	080063d7 	.word	0x080063d7
 8006170:	080063d7 	.word	0x080063d7
 8006174:	080061c5 	.word	0x080061c5
 8006178:	080063d7 	.word	0x080063d7
 800617c:	080063d7 	.word	0x080063d7
 8006180:	080063d7 	.word	0x080063d7
 8006184:	080063d7 	.word	0x080063d7
 8006188:	080063d7 	.word	0x080063d7
 800618c:	080063d7 	.word	0x080063d7
 8006190:	080063d7 	.word	0x080063d7
 8006194:	080061cb 	.word	0x080061cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006198:	4b94      	ldr	r3, [pc, #592]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061a4:	4b91      	ldr	r3, [pc, #580]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	08db      	lsrs	r3, r3, #3
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	4a90      	ldr	r2, [pc, #576]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80061b6:	e111      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80061b8:	4b8d      	ldr	r3, [pc, #564]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061ba:	61bb      	str	r3, [r7, #24]
    break;
 80061bc:	e10e      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80061be:	4b8d      	ldr	r3, [pc, #564]	; (80063f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061c0:	61bb      	str	r3, [r7, #24]
    break;
 80061c2:	e10b      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80061c4:	4b8c      	ldr	r3, [pc, #560]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80061c6:	61bb      	str	r3, [r7, #24]
    break;
 80061c8:	e108      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061ca:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80061d4:	4b85      	ldr	r3, [pc, #532]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061e0:	4b82      	ldr	r3, [pc, #520]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80061ea:	4b80      	ldr	r3, [pc, #512]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80e1 	beq.w	80063d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b02      	cmp	r3, #2
 8006212:	f000 8083 	beq.w	800631c <HAL_RCC_GetSysClockFreq+0x204>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b02      	cmp	r3, #2
 800621a:	f200 80a1 	bhi.w	8006360 <HAL_RCC_GetSysClockFreq+0x248>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x114>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d056      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800622a:	e099      	b.n	8006360 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800622c:	4b6f      	ldr	r3, [pc, #444]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02d      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006238:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	08db      	lsrs	r3, r3, #3
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	4a6b      	ldr	r2, [pc, #428]	; (80063f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
 8006248:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006262:	4b62      	ldr	r3, [pc, #392]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006272:	ed97 6a02 	vldr	s12, [r7, #8]
 8006276:	eddf 5a61 	vldr	s11, [pc, #388]	; 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800627a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006292:	e087      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80062a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a6:	4b51      	ldr	r3, [pc, #324]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80062be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062d6:	e065      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	4b40      	ldr	r3, [pc, #256]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80062fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631a:	e043      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800632a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632e:	4b2f      	ldr	r3, [pc, #188]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006342:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800635e:	e021      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800636e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006382:	ed97 6a02 	vldr	s12, [r7, #8]
 8006386:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80063fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800638a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	0a5b      	lsrs	r3, r3, #9
 80063aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ae:	3301      	adds	r3, #1
 80063b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c8:	ee17 3a90 	vmov	r3, s15
 80063cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80063ce:	e005      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61bb      	str	r3, [r7, #24]
    break;
 80063d4:	e002      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063d8:	61bb      	str	r3, [r7, #24]
    break;
 80063da:	bf00      	nop
  }

  return sysclockfreq;
 80063dc:	69bb      	ldr	r3, [r7, #24]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3724      	adds	r7, #36	; 0x24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	003d0900 	.word	0x003d0900
 80063f8:	02dc6c00 	.word	0x02dc6c00
 80063fc:	46000000 	.word	0x46000000
 8006400:	4c742400 	.word	0x4c742400
 8006404:	4a742400 	.word	0x4a742400
 8006408:	4c371b00 	.word	0x4c371b00

0800640c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006412:	f7ff fe81 	bl	8006118 <HAL_RCC_GetSysClockFreq>
 8006416:	4602      	mov	r2, r0
 8006418:	4b10      	ldr	r3, [pc, #64]	; (800645c <HAL_RCC_GetHCLKFreq+0x50>)
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	490f      	ldr	r1, [pc, #60]	; (8006460 <HAL_RCC_GetHCLKFreq+0x54>)
 8006424:	5ccb      	ldrb	r3, [r1, r3]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	fa22 f303 	lsr.w	r3, r2, r3
 800642e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <HAL_RCC_GetHCLKFreq+0x50>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <HAL_RCC_GetHCLKFreq+0x54>)
 800643a:	5cd3      	ldrb	r3, [r2, r3]
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	4a07      	ldr	r2, [pc, #28]	; (8006464 <HAL_RCC_GetHCLKFreq+0x58>)
 8006448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800644a:	4a07      	ldr	r2, [pc, #28]	; (8006468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <HAL_RCC_GetHCLKFreq+0x58>)
 8006452:	681b      	ldr	r3, [r3, #0]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	58024400 	.word	0x58024400
 8006460:	0800c474 	.word	0x0800c474
 8006464:	20000004 	.word	0x20000004
 8006468:	20000000 	.word	0x20000000

0800646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006470:	f7ff ffcc 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4904      	ldr	r1, [pc, #16]	; (8006494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd80      	pop	{r7, pc}
 8006490:	58024400 	.word	0x58024400
 8006494:	0800c474 	.word	0x0800c474

08006498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800649c:	f7ff ffb6 	bl	800640c <HAL_RCC_GetHCLKFreq>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b06      	ldr	r3, [pc, #24]	; (80064bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ae:	5ccb      	ldrb	r3, [r1, r3]
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	58024400 	.word	0x58024400
 80064c0:	0800c474 	.word	0x0800c474

080064c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064cc:	2300      	movs	r3, #0
 80064ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064d0:	2300      	movs	r3, #0
 80064d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d03f      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064e8:	d02a      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80064ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064ee:	d824      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064f4:	d018      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fa:	d81e      	bhi.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006504:	d007      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006506:	e018      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006508:	4bab      	ldr	r3, [pc, #684]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	4aaa      	ldr	r2, [pc, #680]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800650e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006514:	e015      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3304      	adds	r3, #4
 800651a:	2102      	movs	r1, #2
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f9cf 	bl	80078c0 <RCCEx_PLL2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006526:	e00c      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3324      	adds	r3, #36	; 0x24
 800652c:	2102      	movs	r1, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fa78 	bl	8007a24 <RCCEx_PLL3_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006538:	e003      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	75fb      	strb	r3, [r7, #23]
      break;
 800653e:	e000      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006548:	4b9b      	ldr	r3, [pc, #620]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800654a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006554:	4998      	ldr	r1, [pc, #608]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006556:	4313      	orrs	r3, r2
 8006558:	650b      	str	r3, [r1, #80]	; 0x50
 800655a:	e001      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d03d      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006570:	2b04      	cmp	r3, #4
 8006572:	d826      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	08006591 	.word	0x08006591
 8006580:	0800659f 	.word	0x0800659f
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006590:	4b89      	ldr	r3, [pc, #548]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	4a88      	ldr	r2, [pc, #544]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800659c:	e015      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3304      	adds	r3, #4
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 f98b 	bl	80078c0 <RCCEx_PLL2_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065ae:	e00c      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3324      	adds	r3, #36	; 0x24
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 fa34 	bl	8007a24 <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]
      break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80065c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065d0:	4b79      	ldr	r3, [pc, #484]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	f023 0207 	bic.w	r2, r3, #7
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065dc:	4976      	ldr	r1, [pc, #472]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	650b      	str	r3, [r1, #80]	; 0x50
 80065e2:	e001      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d042      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fc:	d02b      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006602:	d825      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006604:	2bc0      	cmp	r3, #192	; 0xc0
 8006606:	d028      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006608:	2bc0      	cmp	r3, #192	; 0xc0
 800660a:	d821      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800660c:	2b80      	cmp	r3, #128	; 0x80
 800660e:	d016      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006610:	2b80      	cmp	r3, #128	; 0x80
 8006612:	d81d      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d007      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800661c:	e018      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661e:	4b66      	ldr	r3, [pc, #408]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	4a65      	ldr	r2, [pc, #404]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800662a:	e017      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f001 f944 	bl	80078c0 <RCCEx_PLL2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800663c:	e00e      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3324      	adds	r3, #36	; 0x24
 8006642:	2100      	movs	r1, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f001 f9ed 	bl	8007a24 <RCCEx_PLL3_Config>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800664e:	e005      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
      break;
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800665a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006662:	4b55      	ldr	r3, [pc, #340]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666e:	4952      	ldr	r1, [pc, #328]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006670:	4313      	orrs	r3, r2
 8006672:	650b      	str	r3, [r1, #80]	; 0x50
 8006674:	e001      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006682:	2b00      	cmp	r3, #0
 8006684:	d049      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800668c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006690:	d030      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006696:	d82a      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006698:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800669c:	d02c      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800669e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066a2:	d824      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80066a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a8:	d018      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ae:	d81e      	bhi.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80066b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066b8:	d007      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80066ba:	e018      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066bc:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	4a3d      	ldr	r2, [pc, #244]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066c8:	e017      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 f8f5 	bl	80078c0 <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80066da:	e00e      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3324      	adds	r3, #36	; 0x24
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 f99e 	bl	8007a24 <RCCEx_PLL3_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066ec:	e005      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]
      break;
 80066f2:	e002      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80066f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006700:	4b2d      	ldr	r3, [pc, #180]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006704:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800670e:	492a      	ldr	r1, [pc, #168]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	658b      	str	r3, [r1, #88]	; 0x58
 8006714:	e001      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04c      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800672c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006730:	d030      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006736:	d82a      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800673c:	d02c      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800673e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006742:	d824      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006748:	d018      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800674a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800674e:	d81e      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006758:	d007      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800675a:	e018      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675c:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006768:	e017      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3304      	adds	r3, #4
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f8a5 	bl	80078c0 <RCCEx_PLL2_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800677a:	e00e      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3324      	adds	r3, #36	; 0x24
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f001 f94e 	bl	8007a24 <RCCEx_PLL3_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800678c:	e005      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	75fb      	strb	r3, [r7, #23]
      break;
 8006792:	e002      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006794:	bf00      	nop
 8006796:	e000      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10d      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067ae:	4902      	ldr	r1, [pc, #8]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	658b      	str	r3, [r1, #88]	; 0x58
 80067b4:	e004      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d032      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d0:	2b30      	cmp	r3, #48	; 0x30
 80067d2:	d01c      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067d4:	2b30      	cmp	r3, #48	; 0x30
 80067d6:	d817      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80067d8:	2b20      	cmp	r3, #32
 80067da:	d00c      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d813      	bhi.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d016      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d10f      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e8:	4baf      	ldr	r3, [pc, #700]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	4aae      	ldr	r2, [pc, #696]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80067f4:	e00e      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	2102      	movs	r1, #2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f85f 	bl	80078c0 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006806:	e005      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
      break;
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d109      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800681a:	4ba3      	ldr	r3, [pc, #652]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006826:	49a0      	ldr	r1, [pc, #640]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006828:	4313      	orrs	r3, r2
 800682a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800682c:	e001      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d047      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006846:	d030      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800684c:	d82a      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800684e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006852:	d02c      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006854:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006858:	d824      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685e:	d018      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006864:	d81e      	bhi.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686e:	d007      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006870:	e018      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006872:	4b8d      	ldr	r3, [pc, #564]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	4a8c      	ldr	r2, [pc, #560]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800687e:	e017      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f001 f81a 	bl	80078c0 <RCCEx_PLL2_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006890:	e00e      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3324      	adds	r3, #36	; 0x24
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f001 f8c3 	bl	8007a24 <RCCEx_PLL3_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068a2:	e005      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e002      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80068aa:	bf00      	nop
 80068ac:	e000      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80068ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80068b6:	4b7c      	ldr	r3, [pc, #496]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c2:	4979      	ldr	r1, [pc, #484]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	650b      	str	r3, [r1, #80]	; 0x50
 80068c8:	e001      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d049      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e2:	d02e      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e8:	d828      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068ee:	d02a      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80068f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068f4:	d822      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068fa:	d026      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80068fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006900:	d81c      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006906:	d010      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800690c:	d816      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01d      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d111      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	2101      	movs	r1, #1
 800691e:	4618      	mov	r0, r3
 8006920:	f000 ffce 	bl	80078c0 <RCCEx_PLL2_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006928:	e012      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3324      	adds	r3, #36	; 0x24
 800692e:	2101      	movs	r1, #1
 8006930:	4618      	mov	r0, r3
 8006932:	f001 f877 	bl	8007a24 <RCCEx_PLL3_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800693a:	e009      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	75fb      	strb	r3, [r7, #23]
      break;
 8006940:	e006      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006942:	bf00      	nop
 8006944:	e004      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006946:	bf00      	nop
 8006948:	e002      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800694a:	bf00      	nop
 800694c:	e000      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800694e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006956:	4b54      	ldr	r3, [pc, #336]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006962:	4951      	ldr	r1, [pc, #324]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	650b      	str	r3, [r1, #80]	; 0x50
 8006968:	e001      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d04b      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006984:	d02e      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800698a:	d828      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d02a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d822      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800699c:	d026      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800699e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069a2:	d81c      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a8:	d010      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80069aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ae:	d816      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01d      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80069b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b8:	d111      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	2101      	movs	r1, #1
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 ff7d 	bl	80078c0 <RCCEx_PLL2_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80069ca:	e012      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3324      	adds	r3, #36	; 0x24
 80069d0:	2101      	movs	r1, #1
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 f826 	bl	8007a24 <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80069dc:	e009      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
      break;
 80069e2:	e006      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069e4:	bf00      	nop
 80069e6:	e004      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069e8:	bf00      	nop
 80069ea:	e002      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80069f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069f8:	4b2b      	ldr	r3, [pc, #172]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a06:	4928      	ldr	r1, [pc, #160]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	658b      	str	r3, [r1, #88]	; 0x58
 8006a0c:	e001      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d02f      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a26:	d00e      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d814      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d015      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a36:	d10f      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a38:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	4a1a      	ldr	r2, [pc, #104]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a44:	e00c      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 ff37 	bl	80078c0 <RCCEx_PLL2_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a72:	490d      	ldr	r1, [pc, #52]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	650b      	str	r3, [r1, #80]	; 0x50
 8006a78:	e001      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d033      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d81c      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006ad3 	.word	0x08006ad3
 8006a9c:	08006aad 	.word	0x08006aad
 8006aa0:	08006abb 	.word	0x08006abb
 8006aa4:	08006ad3 	.word	0x08006ad3
 8006aa8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aac:	4bb8      	ldr	r3, [pc, #736]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	4ab7      	ldr	r2, [pc, #732]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ab8:	e00c      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	3304      	adds	r3, #4
 8006abe:	2102      	movs	r1, #2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fefd 	bl	80078c0 <RCCEx_PLL2_Config>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ada:	4bad      	ldr	r3, [pc, #692]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ade:	f023 0203 	bic.w	r2, r3, #3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	49aa      	ldr	r1, [pc, #680]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006aec:	e001      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8086 	beq.w	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b00:	4ba4      	ldr	r3, [pc, #656]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4aa3      	ldr	r2, [pc, #652]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b0c:	f7fb fb9a 	bl	8002244 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b12:	e009      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b14:	f7fb fb96 	bl	8002244 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b64      	cmp	r3, #100	; 0x64
 8006b20:	d902      	bls.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	75fb      	strb	r3, [r7, #23]
        break;
 8006b26:	e005      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b28:	4b9a      	ldr	r3, [pc, #616]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ef      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d166      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b3a:	4b95      	ldr	r3, [pc, #596]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b44:	4053      	eors	r3, r2
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d013      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b4e:	4b90      	ldr	r3, [pc, #576]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b58:	4b8d      	ldr	r3, [pc, #564]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	4a8c      	ldr	r2, [pc, #560]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b64:	4b8a      	ldr	r3, [pc, #552]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	4a89      	ldr	r2, [pc, #548]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b70:	4a87      	ldr	r2, [pc, #540]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b80:	d115      	bne.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b82:	f7fb fb5f 	bl	8002244 <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b88:	e00b      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8a:	f7fb fb5b 	bl	8002244 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d902      	bls.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8006ba0:	e005      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ba2:	4b7b      	ldr	r3, [pc, #492]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0ed      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d126      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc2:	d10d      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006bc4:	4b72      	ldr	r3, [pc, #456]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bd2:	0919      	lsrs	r1, r3, #4
 8006bd4:	4b70      	ldr	r3, [pc, #448]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006bd6:	400b      	ands	r3, r1
 8006bd8:	496d      	ldr	r1, [pc, #436]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	610b      	str	r3, [r1, #16]
 8006bde:	e005      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006be0:	4b6b      	ldr	r3, [pc, #428]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	4a6a      	ldr	r2, [pc, #424]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006be6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006bea:	6113      	str	r3, [r2, #16]
 8006bec:	4b68      	ldr	r3, [pc, #416]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bfa:	4965      	ldr	r1, [pc, #404]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	670b      	str	r3, [r1, #112]	; 0x70
 8006c00:	e004      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	75bb      	strb	r3, [r7, #22]
 8006c06:	e001      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d07e      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1c:	2b28      	cmp	r3, #40	; 0x28
 8006c1e:	d867      	bhi.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006cf7 	.word	0x08006cf7
 8006c2c:	08006cf1 	.word	0x08006cf1
 8006c30:	08006cf1 	.word	0x08006cf1
 8006c34:	08006cf1 	.word	0x08006cf1
 8006c38:	08006cf1 	.word	0x08006cf1
 8006c3c:	08006cf1 	.word	0x08006cf1
 8006c40:	08006cf1 	.word	0x08006cf1
 8006c44:	08006cf1 	.word	0x08006cf1
 8006c48:	08006ccd 	.word	0x08006ccd
 8006c4c:	08006cf1 	.word	0x08006cf1
 8006c50:	08006cf1 	.word	0x08006cf1
 8006c54:	08006cf1 	.word	0x08006cf1
 8006c58:	08006cf1 	.word	0x08006cf1
 8006c5c:	08006cf1 	.word	0x08006cf1
 8006c60:	08006cf1 	.word	0x08006cf1
 8006c64:	08006cf1 	.word	0x08006cf1
 8006c68:	08006cdf 	.word	0x08006cdf
 8006c6c:	08006cf1 	.word	0x08006cf1
 8006c70:	08006cf1 	.word	0x08006cf1
 8006c74:	08006cf1 	.word	0x08006cf1
 8006c78:	08006cf1 	.word	0x08006cf1
 8006c7c:	08006cf1 	.word	0x08006cf1
 8006c80:	08006cf1 	.word	0x08006cf1
 8006c84:	08006cf1 	.word	0x08006cf1
 8006c88:	08006cf7 	.word	0x08006cf7
 8006c8c:	08006cf1 	.word	0x08006cf1
 8006c90:	08006cf1 	.word	0x08006cf1
 8006c94:	08006cf1 	.word	0x08006cf1
 8006c98:	08006cf1 	.word	0x08006cf1
 8006c9c:	08006cf1 	.word	0x08006cf1
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	08006cf1 	.word	0x08006cf1
 8006ca8:	08006cf7 	.word	0x08006cf7
 8006cac:	08006cf1 	.word	0x08006cf1
 8006cb0:	08006cf1 	.word	0x08006cf1
 8006cb4:	08006cf1 	.word	0x08006cf1
 8006cb8:	08006cf1 	.word	0x08006cf1
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	08006cf7 	.word	0x08006cf7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fdf4 	bl	80078c0 <RCCEx_PLL2_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006cdc:	e00c      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3324      	adds	r3, #36	; 0x24
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fe9d 	bl	8007a24 <RCCEx_PLL3_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006cee:	e003      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006cfe:	4b24      	ldr	r3, [pc, #144]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d0a:	4921      	ldr	r1, [pc, #132]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	654b      	str	r3, [r1, #84]	; 0x54
 8006d10:	e001      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d03e      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d820      	bhi.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d73 	.word	0x08006d73
 8006d34:	08006d49 	.word	0x08006d49
 8006d38:	08006d5b 	.word	0x08006d5b
 8006d3c:	08006d73 	.word	0x08006d73
 8006d40:	08006d73 	.word	0x08006d73
 8006d44:	08006d73 	.word	0x08006d73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fdb6 	bl	80078c0 <RCCEx_PLL2_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d58:	e00c      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3324      	adds	r3, #36	; 0x24
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fe5f 	bl	8007a24 <RCCEx_PLL3_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d110      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f023 0207 	bic.w	r2, r3, #7
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	4902      	ldr	r1, [pc, #8]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d8c:	e008      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006d8e:	bf00      	nop
 8006d90:	58024400 	.word	0x58024400
 8006d94:	58024800 	.word	0x58024800
 8006d98:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d039      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d820      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006dff 	.word	0x08006dff
 8006dc0:	08006dd5 	.word	0x08006dd5
 8006dc4:	08006de7 	.word	0x08006de7
 8006dc8:	08006dff 	.word	0x08006dff
 8006dcc:	08006dff 	.word	0x08006dff
 8006dd0:	08006dff 	.word	0x08006dff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fd70 	bl	80078c0 <RCCEx_PLL2_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006de4:	e00c      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3324      	adds	r3, #36	; 0x24
 8006dea:	2101      	movs	r1, #1
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fe19 	bl	8007a24 <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006df6:	e003      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfc:	e000      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e06:	4bb7      	ldr	r3, [pc, #732]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	f023 0207 	bic.w	r2, r3, #7
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	49b3      	ldr	r1, [pc, #716]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	658b      	str	r3, [r1, #88]	; 0x58
 8006e1a:	e001      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d04b      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e36:	d02e      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e3c:	d828      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d02a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d822      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e4e:	d026      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e54:	d81c      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e60:	d816      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01d      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e6a:	d111      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fd24 	bl	80078c0 <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e7c:	e012      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3324      	adds	r3, #36	; 0x24
 8006e82:	2102      	movs	r1, #2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fdcd 	bl	8007a24 <RCCEx_PLL3_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e8e:	e009      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
      break;
 8006e94:	e006      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eaa:	4b8e      	ldr	r3, [pc, #568]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb8:	498a      	ldr	r1, [pc, #552]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	654b      	str	r3, [r1, #84]	; 0x54
 8006ebe:	e001      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d04b      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006eda:	d02e      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006edc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ee0:	d828      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee6:	d02a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eec:	d822      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ef2:	d026      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ef8:	d81c      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efe:	d010      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f04:	d816      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01d      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d111      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3304      	adds	r3, #4
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fcd2 	bl	80078c0 <RCCEx_PLL2_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f20:	e012      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3324      	adds	r3, #36	; 0x24
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fd7b 	bl	8007a24 <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f32:	e009      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
      break;
 8006f38:	e006      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e004      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f3e:	bf00      	nop
 8006f40:	e002      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f4e:	4b65      	ldr	r3, [pc, #404]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f5c:	4961      	ldr	r1, [pc, #388]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	658b      	str	r3, [r1, #88]	; 0x58
 8006f62:	e001      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d04b      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f7e:	d02e      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006f80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f84:	d828      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8a:	d02a      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f90:	d822      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f96:	d026      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006f98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f9c:	d81c      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa2:	d010      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa8:	d816      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01d      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb2:	d111      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fc80 	bl	80078c0 <RCCEx_PLL2_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006fc4:	e012      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3324      	adds	r3, #36	; 0x24
 8006fca:	2102      	movs	r1, #2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fd29 	bl	8007a24 <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006fd6:	e009      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]
      break;
 8006fdc:	e006      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e004      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ff2:	4b3c      	ldr	r3, [pc, #240]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007000:	4938      	ldr	r1, [pc, #224]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007002:	4313      	orrs	r3, r2
 8007004:	658b      	str	r3, [r1, #88]	; 0x58
 8007006:	e001      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007022:	d10a      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	2102      	movs	r1, #2
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fcfa 	bl	8007a24 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800703a:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007048:	4926      	ldr	r1, [pc, #152]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800704a:	4313      	orrs	r3, r2
 800704c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b00      	cmp	r3, #0
 8007058:	d01a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007064:	d10a      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3324      	adds	r3, #36	; 0x24
 800706a:	2102      	movs	r1, #2
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fcd9 	bl	8007a24 <RCCEx_PLL3_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800707c:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800708a:	4916      	ldr	r1, [pc, #88]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800708c:	4313      	orrs	r3, r2
 800708e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d036      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a6:	d01f      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80070a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ac:	d817      	bhi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b6:	d009      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80070b8:	e011      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3304      	adds	r3, #4
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fbfd 	bl	80078c0 <RCCEx_PLL2_Config>
 80070c6:	4603      	mov	r3, r0
 80070c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80070ca:	e00e      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	2102      	movs	r1, #2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fca6 	bl	8007a24 <RCCEx_PLL3_Config>
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80070dc:	e005      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]
      break;
 80070e2:	e002      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80070e4:	58024400 	.word	0x58024400
      break;
 80070e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070f0:	4b93      	ldr	r3, [pc, #588]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070fe:	4990      	ldr	r1, [pc, #576]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007100:	4313      	orrs	r3, r2
 8007102:	658b      	str	r3, [r1, #88]	; 0x58
 8007104:	e001      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d033      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007120:	d01c      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007122:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007126:	d816      	bhi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712c:	d003      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800712e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007132:	d007      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007136:	4b82      	ldr	r3, [pc, #520]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	4a81      	ldr	r2, [pc, #516]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800713c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007140:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007142:	e00c      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3324      	adds	r3, #36	; 0x24
 8007148:	2101      	movs	r1, #1
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fc6a 	bl	8007a24 <RCCEx_PLL3_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007154:	e003      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
      break;
 800715a:	e000      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800715c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007164:	4b76      	ldr	r3, [pc, #472]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007172:	4973      	ldr	r1, [pc, #460]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007174:	4313      	orrs	r3, r2
 8007176:	654b      	str	r3, [r1, #84]	; 0x54
 8007178:	e001      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d029      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007196:	d007      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007198:	e00f      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719a:	4b69      	ldr	r3, [pc, #420]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	4a68      	ldr	r2, [pc, #416]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071a6:	e00b      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	2102      	movs	r1, #2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fb86 	bl	80078c0 <RCCEx_PLL2_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071b8:	e002      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
      break;
 80071be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071c6:	4b5e      	ldr	r3, [pc, #376]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	495b      	ldr	r1, [pc, #364]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071d8:	e001      	b.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3324      	adds	r3, #36	; 0x24
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fc17 	bl	8007a24 <RCCEx_PLL3_Config>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d030      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007214:	d017      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721a:	d811      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800721c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007220:	d013      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007226:	d80b      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800722c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007230:	d106      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007232:	4b43      	ldr	r3, [pc, #268]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	4a42      	ldr	r2, [pc, #264]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800723e:	e007      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	e004      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800724e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007256:	4b3a      	ldr	r3, [pc, #232]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007262:	4937      	ldr	r1, [pc, #220]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007264:	4313      	orrs	r3, r2
 8007266:	654b      	str	r3, [r1, #84]	; 0x54
 8007268:	e001      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800727a:	4b31      	ldr	r3, [pc, #196]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800727c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	492e      	ldr	r1, [pc, #184]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007298:	4b29      	ldr	r3, [pc, #164]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072a6:	4926      	ldr	r1, [pc, #152]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c4:	491e      	ldr	r1, [pc, #120]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072d6:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	4a19      	ldr	r2, [pc, #100]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072e0:	6113      	str	r3, [r2, #16]
 80072e2:	4b17      	ldr	r3, [pc, #92]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072ec:	4914      	ldr	r1, [pc, #80]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da08      	bge.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	490e      	ldr	r1, [pc, #56]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007308:	4313      	orrs	r3, r2
 800730a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007318:	4b09      	ldr	r3, [pc, #36]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007326:	4906      	ldr	r1, [pc, #24]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007328:	4313      	orrs	r3, r2
 800732a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800732c:	7dbb      	ldrb	r3, [r7, #22]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	e000      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	58024400 	.word	0x58024400

08007344 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007348:	f7ff f860 	bl	800640c <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	58024400 	.word	0x58024400
 800736c:	0800c474 	.word	0x0800c474

08007370 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	; 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007378:	4ba1      	ldr	r3, [pc, #644]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007382:	4b9f      	ldr	r3, [pc, #636]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	0b1b      	lsrs	r3, r3, #12
 8007388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800738c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800738e:	4b9c      	ldr	r3, [pc, #624]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800739a:	4b99      	ldr	r3, [pc, #612]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	fb02 f303 	mul.w	r3, r2, r3
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8111 	beq.w	80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f000 8083 	beq.w	80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	f200 80a1 	bhi.w	8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d056      	beq.n	8007488 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073da:	e099      	b.n	8007510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073dc:	4b88      	ldr	r3, [pc, #544]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d02d      	beq.n	8007444 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e8:	4b85      	ldr	r3, [pc, #532]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	08db      	lsrs	r3, r3, #3
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	4a84      	ldr	r2, [pc, #528]	; (8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800740e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007412:	4b7b      	ldr	r3, [pc, #492]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007422:	ed97 6a03 	vldr	s12, [r7, #12]
 8007426:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007442:	e087      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007456:	4b6a      	ldr	r3, [pc, #424]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007466:	ed97 6a03 	vldr	s12, [r7, #12]
 800746a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800746e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007486:	e065      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b59      	ldr	r3, [pc, #356]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074ca:	e043      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b48      	ldr	r3, [pc, #288]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800750e:	e021      	b.n	8007554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b37      	ldr	r3, [pc, #220]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007552:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007554:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800756a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800756e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800757a:	ee17 2a90 	vmov	r2, s15
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007582:	4b1f      	ldr	r3, [pc, #124]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800759c:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a8:	ee17 2a90 	vmov	r2, s15
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80075b0:	4b13      	ldr	r3, [pc, #76]	; (8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	0e1b      	lsrs	r3, r3, #24
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	ee07 3a90 	vmov	s15, r3
 80075be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d6:	ee17 2a90 	vmov	r2, s15
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075de:	e008      	b.n	80075f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
}
 80075f2:	bf00      	nop
 80075f4:	3724      	adds	r7, #36	; 0x24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	58024400 	.word	0x58024400
 8007604:	03d09000 	.word	0x03d09000
 8007608:	46000000 	.word	0x46000000
 800760c:	4c742400 	.word	0x4c742400
 8007610:	4a742400 	.word	0x4a742400
 8007614:	4c371b00 	.word	0x4c371b00

08007618 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007620:	4ba1      	ldr	r3, [pc, #644]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800762a:	4b9f      	ldr	r3, [pc, #636]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	0d1b      	lsrs	r3, r3, #20
 8007630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007634:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007636:	4b9c      	ldr	r3, [pc, #624]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	0a1b      	lsrs	r3, r3, #8
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007642:	4b99      	ldr	r3, [pc, #612]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	08db      	lsrs	r3, r3, #3
 8007648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8111 	beq.w	8007888 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f000 8083 	beq.w	8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b02      	cmp	r3, #2
 8007672:	f200 80a1 	bhi.w	80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d056      	beq.n	8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007682:	e099      	b.n	80077b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007684:	4b88      	ldr	r3, [pc, #544]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02d      	beq.n	80076ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007690:	4b85      	ldr	r3, [pc, #532]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	08db      	lsrs	r3, r3, #3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	4a84      	ldr	r2, [pc, #528]	; (80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ba:	4b7b      	ldr	r3, [pc, #492]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076ea:	e087      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fe:	4b6a      	ldr	r3, [pc, #424]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007712:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800771a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800772e:	e065      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800773e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007742:	4b59      	ldr	r3, [pc, #356]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a03 	vldr	s12, [r7, #12]
 8007756:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007772:	e043      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007786:	4b48      	ldr	r3, [pc, #288]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778e:	ee07 3a90 	vmov	s15, r3
 8007792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007796:	ed97 6a03 	vldr	s12, [r7, #12]
 800779a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800779e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b6:	e021      	b.n	80077fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ca:	4b37      	ldr	r3, [pc, #220]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077da:	ed97 6a03 	vldr	s12, [r7, #12]
 80077de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	0a5b      	lsrs	r3, r3, #9
 8007802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007816:	edd7 6a07 	vldr	s13, [r7, #28]
 800781a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007822:	ee17 2a90 	vmov	r2, s15
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800782a:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	0c1b      	lsrs	r3, r3, #16
 8007830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007844:	edd7 6a07 	vldr	s13, [r7, #28]
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007850:	ee17 2a90 	vmov	r2, s15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007858:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007872:	edd7 6a07 	vldr	s13, [r7, #28]
 8007876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800787a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787e:	ee17 2a90 	vmov	r2, s15
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007886:	e008      	b.n	800789a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
}
 800789a:	bf00      	nop
 800789c:	3724      	adds	r7, #36	; 0x24
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	58024400 	.word	0x58024400
 80078ac:	03d09000 	.word	0x03d09000
 80078b0:	46000000 	.word	0x46000000
 80078b4:	4c742400 	.word	0x4c742400
 80078b8:	4a742400 	.word	0x4a742400
 80078bc:	4c371b00 	.word	0x4c371b00

080078c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ce:	4b53      	ldr	r3, [pc, #332]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d101      	bne.n	80078de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e099      	b.n	8007a12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078de:	4b4f      	ldr	r3, [pc, #316]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a4e      	ldr	r2, [pc, #312]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80078e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ea:	f7fa fcab 	bl	8002244 <HAL_GetTick>
 80078ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078f0:	e008      	b.n	8007904 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078f2:	f7fa fca7 	bl	8002244 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e086      	b.n	8007a12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007904:	4b45      	ldr	r3, [pc, #276]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f0      	bne.n	80078f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007910:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	031b      	lsls	r3, r3, #12
 800791e:	493f      	ldr	r1, [pc, #252]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007920:	4313      	orrs	r3, r2
 8007922:	628b      	str	r3, [r1, #40]	; 0x28
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	3b01      	subs	r3, #1
 800792a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	025b      	lsls	r3, r3, #9
 8007936:	b29b      	uxth	r3, r3
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	3b01      	subs	r3, #1
 8007940:	041b      	lsls	r3, r3, #16
 8007942:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	3b01      	subs	r3, #1
 800794e:	061b      	lsls	r3, r3, #24
 8007950:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007954:	4931      	ldr	r1, [pc, #196]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007956:	4313      	orrs	r3, r2
 8007958:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	492d      	ldr	r1, [pc, #180]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007968:	4313      	orrs	r3, r2
 800796a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800796c:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f023 0220 	bic.w	r2, r3, #32
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	4928      	ldr	r1, [pc, #160]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800797e:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007984:	f023 0310 	bic.w	r3, r3, #16
 8007988:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800798c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <RCCEx_PLL2_Config+0x160>)
 8007990:	4013      	ands	r3, r2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	69d2      	ldr	r2, [r2, #28]
 8007996:	00d2      	lsls	r2, r2, #3
 8007998:	4920      	ldr	r1, [pc, #128]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 800799a:	4313      	orrs	r3, r2
 800799c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a2:	4a1e      	ldr	r2, [pc, #120]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079a4:	f043 0310 	orr.w	r3, r3, #16
 80079a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079bc:	e00f      	b.n	80079de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d106      	bne.n	80079d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a14      	ldr	r2, [pc, #80]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079d0:	e005      	b.n	80079de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a0e      	ldr	r2, [pc, #56]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 80079e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ea:	f7fa fc2b 	bl	8002244 <HAL_GetTick>
 80079ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079f0:	e008      	b.n	8007a04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80079f2:	f7fa fc27 	bl	8002244 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e006      	b.n	8007a12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <RCCEx_PLL2_Config+0x15c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0f0      	beq.n	80079f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	ffff0007 	.word	0xffff0007

08007a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a32:	4b53      	ldr	r3, [pc, #332]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f003 0303 	and.w	r3, r3, #3
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d101      	bne.n	8007a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e099      	b.n	8007b76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a42:	4b4f      	ldr	r3, [pc, #316]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a4e      	ldr	r2, [pc, #312]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a4e:	f7fa fbf9 	bl	8002244 <HAL_GetTick>
 8007a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a54:	e008      	b.n	8007a68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a56:	f7fa fbf5 	bl	8002244 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e086      	b.n	8007b76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a68:	4b45      	ldr	r3, [pc, #276]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f0      	bne.n	8007a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a74:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	051b      	lsls	r3, r3, #20
 8007a82:	493f      	ldr	r1, [pc, #252]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	628b      	str	r3, [r1, #40]	; 0x28
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	025b      	lsls	r3, r3, #9
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	041b      	lsls	r3, r3, #16
 8007aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ab8:	4931      	ldr	r1, [pc, #196]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007abe:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	492d      	ldr	r1, [pc, #180]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ad0:	4b2b      	ldr	r3, [pc, #172]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	4928      	ldr	r1, [pc, #160]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ae2:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007aee:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <RCCEx_PLL3_Config+0x160>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	69d2      	ldr	r2, [r2, #28]
 8007afa:	00d2      	lsls	r2, r2, #3
 8007afc:	4920      	ldr	r1, [pc, #128]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b02:	4b1f      	ldr	r3, [pc, #124]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a1e      	ldr	r2, [pc, #120]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b14:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	4a19      	ldr	r2, [pc, #100]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b20:	e00f      	b.n	8007b42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d106      	bne.n	8007b36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b34:	e005      	b.n	8007b42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b36:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a11      	ldr	r2, [pc, #68]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b42:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a0e      	ldr	r2, [pc, #56]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4e:	f7fa fb79 	bl	8002244 <HAL_GetTick>
 8007b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b54:	e008      	b.n	8007b68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007b56:	f7fa fb75 	bl	8002244 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e006      	b.n	8007b76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <RCCEx_PLL3_Config+0x15c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	58024400 	.word	0x58024400
 8007b84:	ffff0007 	.word	0xffff0007

08007b88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e0eb      	b.n	8007d76 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a75      	ldr	r2, [pc, #468]	; (8007d80 <HAL_SPI_Init+0x1f8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00f      	beq.n	8007bce <HAL_SPI_Init+0x46>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a74      	ldr	r2, [pc, #464]	; (8007d84 <HAL_SPI_Init+0x1fc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00a      	beq.n	8007bce <HAL_SPI_Init+0x46>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a72      	ldr	r2, [pc, #456]	; (8007d88 <HAL_SPI_Init+0x200>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d005      	beq.n	8007bce <HAL_SPI_Init+0x46>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d901      	bls.n	8007bce <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e0d3      	b.n	8007d76 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f8dc 	bl	8007d8c <SPI_GetPacketSize>
 8007bd4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a69      	ldr	r2, [pc, #420]	; (8007d80 <HAL_SPI_Init+0x1f8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00c      	beq.n	8007bfa <HAL_SPI_Init+0x72>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a67      	ldr	r2, [pc, #412]	; (8007d84 <HAL_SPI_Init+0x1fc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d007      	beq.n	8007bfa <HAL_SPI_Init+0x72>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a66      	ldr	r2, [pc, #408]	; (8007d88 <HAL_SPI_Init+0x200>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d002      	beq.n	8007bfa <HAL_SPI_Init+0x72>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d811      	bhi.n	8007c1e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bfe:	4a60      	ldr	r2, [pc, #384]	; (8007d80 <HAL_SPI_Init+0x1f8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a5e      	ldr	r2, [pc, #376]	; (8007d84 <HAL_SPI_Init+0x1fc>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_SPI_Init+0x90>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a5d      	ldr	r2, [pc, #372]	; (8007d88 <HAL_SPI_Init+0x200>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d104      	bne.n	8007c22 <HAL_SPI_Init+0x9a>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d901      	bls.n	8007c22 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e0a9      	b.n	8007d76 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7f9 fd22 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0201 	bic.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c5c:	d119      	bne.n	8007c92 <HAL_SPI_Init+0x10a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c66:	d103      	bne.n	8007c70 <HAL_SPI_Init+0xe8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10c      	bne.n	8007c92 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c80:	d107      	bne.n	8007c92 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c90:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69da      	ldr	r2, [r3, #28]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca4:	ea42 0103 	orr.w	r1, r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf2:	ea42 0103 	orr.w	r1, r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d113      	bne.n	8007d32 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40013000 	.word	0x40013000
 8007d84:	40003800 	.word	0x40003800
 8007d88:	40003c00 	.word	0x40003c00

08007d8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	3307      	adds	r3, #7
 8007daa:	08db      	lsrs	r3, r3, #3
 8007dac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e049      	b.n	8007e68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7f9 fcaf 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f000 fbe1 	bl	80085c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e049      	b.n	8007f16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f841 	bl	8007f1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f000 fb8a 	bl	80085c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d122      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d11b      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f06f 0202 	mvn.w	r2, #2
 8007f5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fb09 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 8007f7a:	e005      	b.n	8007f88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fafb 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fb0c 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d122      	bne.n	8007fe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d11b      	bne.n	8007fe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f06f 0204 	mvn.w	r2, #4
 8007fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fadf 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 8007fce:	e005      	b.n	8007fdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fad1 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fae2 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d122      	bne.n	8008036 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d11b      	bne.n	8008036 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f06f 0208 	mvn.w	r2, #8
 8008006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2204      	movs	r2, #4
 800800c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fab5 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 8008022:	e005      	b.n	8008030 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 faa7 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fab8 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b10      	cmp	r3, #16
 8008042:	d122      	bne.n	800808a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0310 	and.w	r3, r3, #16
 800804e:	2b10      	cmp	r3, #16
 8008050:	d11b      	bne.n	800808a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f06f 0210 	mvn.w	r2, #16
 800805a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2208      	movs	r2, #8
 8008060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa8b 	bl	800858c <HAL_TIM_IC_CaptureCallback>
 8008076:	e005      	b.n	8008084 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fa7d 	bl	8008578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa8e 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10e      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d107      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f06f 0201 	mvn.w	r2, #1
 80080ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7f9 fabc 	bl	800162e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c0:	2b80      	cmp	r3, #128	; 0x80
 80080c2:	d10e      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ce:	2b80      	cmp	r3, #128	; 0x80
 80080d0:	d107      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 ff89 	bl	8008ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f0:	d10e      	bne.n	8008110 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fc:	2b80      	cmp	r3, #128	; 0x80
 80080fe:	d107      	bne.n	8008110 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 ff7c 	bl	8009008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811a:	2b40      	cmp	r3, #64	; 0x40
 800811c:	d10e      	bne.n	800813c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008128:	2b40      	cmp	r3, #64	; 0x40
 800812a:	d107      	bne.n	800813c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa3c 	bl	80085b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b20      	cmp	r3, #32
 8008148:	d10e      	bne.n	8008168 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b20      	cmp	r3, #32
 8008156:	d107      	bne.n	8008168 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0220 	mvn.w	r2, #32
 8008160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 ff3c 	bl	8008fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008186:	2302      	movs	r3, #2
 8008188:	e0fd      	b.n	8008386 <HAL_TIM_PWM_ConfigChannel+0x216>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b14      	cmp	r3, #20
 8008196:	f200 80f0 	bhi.w	800837a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	0800837b 	.word	0x0800837b
 80081a8:	0800837b 	.word	0x0800837b
 80081ac:	0800837b 	.word	0x0800837b
 80081b0:	08008235 	.word	0x08008235
 80081b4:	0800837b 	.word	0x0800837b
 80081b8:	0800837b 	.word	0x0800837b
 80081bc:	0800837b 	.word	0x0800837b
 80081c0:	08008277 	.word	0x08008277
 80081c4:	0800837b 	.word	0x0800837b
 80081c8:	0800837b 	.word	0x0800837b
 80081cc:	0800837b 	.word	0x0800837b
 80081d0:	080082b7 	.word	0x080082b7
 80081d4:	0800837b 	.word	0x0800837b
 80081d8:	0800837b 	.word	0x0800837b
 80081dc:	0800837b 	.word	0x0800837b
 80081e0:	080082f9 	.word	0x080082f9
 80081e4:	0800837b 	.word	0x0800837b
 80081e8:	0800837b 	.word	0x0800837b
 80081ec:	0800837b 	.word	0x0800837b
 80081f0:	08008339 	.word	0x08008339
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fa7e 	bl	80086fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0208 	orr.w	r2, r2, #8
 800820e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0204 	bic.w	r2, r2, #4
 800821e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6999      	ldr	r1, [r3, #24]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	619a      	str	r2, [r3, #24]
      break;
 8008232:	e0a3      	b.n	800837c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 faee 	bl	800881c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800824e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800825e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	021a      	lsls	r2, r3, #8
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	619a      	str	r2, [r3, #24]
      break;
 8008274:	e082      	b.n	800837c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fb57 	bl	8008930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f042 0208 	orr.w	r2, r2, #8
 8008290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69da      	ldr	r2, [r3, #28]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0204 	bic.w	r2, r2, #4
 80082a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69d9      	ldr	r1, [r3, #28]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	61da      	str	r2, [r3, #28]
      break;
 80082b4:	e062      	b.n	800837c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fbbd 	bl	8008a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69d9      	ldr	r1, [r3, #28]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	021a      	lsls	r2, r3, #8
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	61da      	str	r2, [r3, #28]
      break;
 80082f6:	e041      	b.n	800837c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fc04 	bl	8008b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008336:	e021      	b.n	800837c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fc46 	bl	8008bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008378:	e000      	b.n	800837c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800837a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop

08008390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_TIM_ConfigClockSource+0x18>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e0db      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1d0>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4b69      	ldr	r3, [pc, #420]	; (8008568 <HAL_TIM_ConfigClockSource+0x1d8>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a63      	ldr	r2, [pc, #396]	; (800856c <HAL_TIM_ConfigClockSource+0x1dc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	f000 80a9 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 80083e4:	4a61      	ldr	r2, [pc, #388]	; (800856c <HAL_TIM_ConfigClockSource+0x1dc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f200 80ae 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 80083ec:	4a60      	ldr	r2, [pc, #384]	; (8008570 <HAL_TIM_ConfigClockSource+0x1e0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	f000 80a1 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 80083f4:	4a5e      	ldr	r2, [pc, #376]	; (8008570 <HAL_TIM_ConfigClockSource+0x1e0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f200 80a6 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 80083fc:	4a5d      	ldr	r2, [pc, #372]	; (8008574 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f000 8099 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 8008404:	4a5b      	ldr	r2, [pc, #364]	; (8008574 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	f200 809e 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 800840c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008410:	f000 8091 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 8008414:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008418:	f200 8096 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 800841c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008420:	f000 8089 	beq.w	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 8008424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008428:	f200 808e 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 800842c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008430:	d03e      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0x120>
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008436:	f200 8087 	bhi.w	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	f000 8085 	beq.w	800854c <HAL_TIM_ConfigClockSource+0x1bc>
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008446:	d87f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008448:	2b70      	cmp	r3, #112	; 0x70
 800844a:	d01a      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0xf2>
 800844c:	2b70      	cmp	r3, #112	; 0x70
 800844e:	d87b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008450:	2b60      	cmp	r3, #96	; 0x60
 8008452:	d050      	beq.n	80084f6 <HAL_TIM_ConfigClockSource+0x166>
 8008454:	2b60      	cmp	r3, #96	; 0x60
 8008456:	d877      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008458:	2b50      	cmp	r3, #80	; 0x50
 800845a:	d03c      	beq.n	80084d6 <HAL_TIM_ConfigClockSource+0x146>
 800845c:	2b50      	cmp	r3, #80	; 0x50
 800845e:	d873      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d058      	beq.n	8008516 <HAL_TIM_ConfigClockSource+0x186>
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d86f      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008468:	2b30      	cmp	r3, #48	; 0x30
 800846a:	d064      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 800846c:	2b30      	cmp	r3, #48	; 0x30
 800846e:	d86b      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d060      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 8008474:	2b20      	cmp	r3, #32
 8008476:	d867      	bhi.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05c      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
 800847c:	2b10      	cmp	r3, #16
 800847e:	d05a      	beq.n	8008536 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008480:	e062      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6899      	ldr	r1, [r3, #8]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f000 fc7f 	bl	8008d94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	609a      	str	r2, [r3, #8]
      break;
 80084ae:	e04e      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f000 fc68 	bl	8008d94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084d2:	609a      	str	r2, [r3, #8]
      break;
 80084d4:	e03b      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6859      	ldr	r1, [r3, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f000 fbd8 	bl	8008c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2150      	movs	r1, #80	; 0x50
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fc32 	bl	8008d58 <TIM_ITRx_SetConfig>
      break;
 80084f4:	e02b      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6859      	ldr	r1, [r3, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	461a      	mov	r2, r3
 8008504:	f000 fbf7 	bl	8008cf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2160      	movs	r1, #96	; 0x60
 800850e:	4618      	mov	r0, r3
 8008510:	f000 fc22 	bl	8008d58 <TIM_ITRx_SetConfig>
      break;
 8008514:	e01b      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	6859      	ldr	r1, [r3, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	461a      	mov	r2, r3
 8008524:	f000 fbb8 	bl	8008c98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2140      	movs	r1, #64	; 0x40
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fc12 	bl	8008d58 <TIM_ITRx_SetConfig>
      break;
 8008534:	e00b      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f000 fc09 	bl	8008d58 <TIM_ITRx_SetConfig>
        break;
 8008546:	e002      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008548:	bf00      	nop
 800854a:	e000      	b.n	800854e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800854c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	ffceff88 	.word	0xffceff88
 800856c:	00100040 	.word	0x00100040
 8008570:	00100030 	.word	0x00100030
 8008574:	00100020 	.word	0x00100020

08008578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a40      	ldr	r2, [pc, #256]	; (80086dc <TIM_Base_SetConfig+0x114>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d013      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e6:	d00f      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a3d      	ldr	r2, [pc, #244]	; (80086e0 <TIM_Base_SetConfig+0x118>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00b      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a3c      	ldr	r2, [pc, #240]	; (80086e4 <TIM_Base_SetConfig+0x11c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d007      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a3b      	ldr	r2, [pc, #236]	; (80086e8 <TIM_Base_SetConfig+0x120>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a3a      	ldr	r2, [pc, #232]	; (80086ec <TIM_Base_SetConfig+0x124>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d108      	bne.n	800861a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	4313      	orrs	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a2f      	ldr	r2, [pc, #188]	; (80086dc <TIM_Base_SetConfig+0x114>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d01f      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008628:	d01b      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a2c      	ldr	r2, [pc, #176]	; (80086e0 <TIM_Base_SetConfig+0x118>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d017      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a2b      	ldr	r2, [pc, #172]	; (80086e4 <TIM_Base_SetConfig+0x11c>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a2a      	ldr	r2, [pc, #168]	; (80086e8 <TIM_Base_SetConfig+0x120>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00f      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a29      	ldr	r2, [pc, #164]	; (80086ec <TIM_Base_SetConfig+0x124>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00b      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a28      	ldr	r2, [pc, #160]	; (80086f0 <TIM_Base_SetConfig+0x128>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d007      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a27      	ldr	r2, [pc, #156]	; (80086f4 <TIM_Base_SetConfig+0x12c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d003      	beq.n	8008662 <TIM_Base_SetConfig+0x9a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a26      	ldr	r2, [pc, #152]	; (80086f8 <TIM_Base_SetConfig+0x130>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d108      	bne.n	8008674 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a10      	ldr	r2, [pc, #64]	; (80086dc <TIM_Base_SetConfig+0x114>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00f      	beq.n	80086c0 <TIM_Base_SetConfig+0xf8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a12      	ldr	r2, [pc, #72]	; (80086ec <TIM_Base_SetConfig+0x124>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d00b      	beq.n	80086c0 <TIM_Base_SetConfig+0xf8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a11      	ldr	r2, [pc, #68]	; (80086f0 <TIM_Base_SetConfig+0x128>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d007      	beq.n	80086c0 <TIM_Base_SetConfig+0xf8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <TIM_Base_SetConfig+0x12c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d003      	beq.n	80086c0 <TIM_Base_SetConfig+0xf8>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a0f      	ldr	r2, [pc, #60]	; (80086f8 <TIM_Base_SetConfig+0x130>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d103      	bne.n	80086c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	615a      	str	r2, [r3, #20]
}
 80086ce:	bf00      	nop
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	40010000 	.word	0x40010000
 80086e0:	40000400 	.word	0x40000400
 80086e4:	40000800 	.word	0x40000800
 80086e8:	40000c00 	.word	0x40000c00
 80086ec:	40010400 	.word	0x40010400
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800

080086fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f023 0201 	bic.w	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4b37      	ldr	r3, [pc, #220]	; (8008804 <TIM_OC1_SetConfig+0x108>)
 8008728:	4013      	ands	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0303 	bic.w	r3, r3, #3
 8008732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f023 0302 	bic.w	r3, r3, #2
 8008744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4313      	orrs	r3, r2
 800874e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a2d      	ldr	r2, [pc, #180]	; (8008808 <TIM_OC1_SetConfig+0x10c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00f      	beq.n	8008778 <TIM_OC1_SetConfig+0x7c>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a2c      	ldr	r2, [pc, #176]	; (800880c <TIM_OC1_SetConfig+0x110>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00b      	beq.n	8008778 <TIM_OC1_SetConfig+0x7c>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a2b      	ldr	r2, [pc, #172]	; (8008810 <TIM_OC1_SetConfig+0x114>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_OC1_SetConfig+0x7c>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a2a      	ldr	r2, [pc, #168]	; (8008814 <TIM_OC1_SetConfig+0x118>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_OC1_SetConfig+0x7c>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a29      	ldr	r2, [pc, #164]	; (8008818 <TIM_OC1_SetConfig+0x11c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d10c      	bne.n	8008792 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f023 0308 	bic.w	r3, r3, #8
 800877e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a1c      	ldr	r2, [pc, #112]	; (8008808 <TIM_OC1_SetConfig+0x10c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00f      	beq.n	80087ba <TIM_OC1_SetConfig+0xbe>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a1b      	ldr	r2, [pc, #108]	; (800880c <TIM_OC1_SetConfig+0x110>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00b      	beq.n	80087ba <TIM_OC1_SetConfig+0xbe>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a1a      	ldr	r2, [pc, #104]	; (8008810 <TIM_OC1_SetConfig+0x114>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d007      	beq.n	80087ba <TIM_OC1_SetConfig+0xbe>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a19      	ldr	r2, [pc, #100]	; (8008814 <TIM_OC1_SetConfig+0x118>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d003      	beq.n	80087ba <TIM_OC1_SetConfig+0xbe>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a18      	ldr	r2, [pc, #96]	; (8008818 <TIM_OC1_SetConfig+0x11c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d111      	bne.n	80087de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	621a      	str	r2, [r3, #32]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	fffeff8f 	.word	0xfffeff8f
 8008808:	40010000 	.word	0x40010000
 800880c:	40010400 	.word	0x40010400
 8008810:	40014000 	.word	0x40014000
 8008814:	40014400 	.word	0x40014400
 8008818:	40014800 	.word	0x40014800

0800881c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f023 0210 	bic.w	r2, r3, #16
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4b34      	ldr	r3, [pc, #208]	; (8008918 <TIM_OC2_SetConfig+0xfc>)
 8008848:	4013      	ands	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	021b      	lsls	r3, r3, #8
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f023 0320 	bic.w	r3, r3, #32
 8008866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	011b      	lsls	r3, r3, #4
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4313      	orrs	r3, r2
 8008872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a29      	ldr	r2, [pc, #164]	; (800891c <TIM_OC2_SetConfig+0x100>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_OC2_SetConfig+0x68>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a28      	ldr	r2, [pc, #160]	; (8008920 <TIM_OC2_SetConfig+0x104>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d10d      	bne.n	80088a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800888a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	011b      	lsls	r3, r3, #4
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800889e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <TIM_OC2_SetConfig+0x100>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00f      	beq.n	80088c8 <TIM_OC2_SetConfig+0xac>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a1d      	ldr	r2, [pc, #116]	; (8008920 <TIM_OC2_SetConfig+0x104>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00b      	beq.n	80088c8 <TIM_OC2_SetConfig+0xac>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a1c      	ldr	r2, [pc, #112]	; (8008924 <TIM_OC2_SetConfig+0x108>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d007      	beq.n	80088c8 <TIM_OC2_SetConfig+0xac>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a1b      	ldr	r2, [pc, #108]	; (8008928 <TIM_OC2_SetConfig+0x10c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d003      	beq.n	80088c8 <TIM_OC2_SetConfig+0xac>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a1a      	ldr	r2, [pc, #104]	; (800892c <TIM_OC2_SetConfig+0x110>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d113      	bne.n	80088f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	feff8fff 	.word	0xfeff8fff
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400
 800892c:	40014800 	.word	0x40014800

08008930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a27      	ldr	r2, [pc, #156]	; (8008a28 <TIM_OC3_SetConfig+0xf8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d003      	beq.n	8008996 <TIM_OC3_SetConfig+0x66>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <TIM_OC3_SetConfig+0xfc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d10d      	bne.n	80089b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800899c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <TIM_OC3_SetConfig+0xf8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00f      	beq.n	80089da <TIM_OC3_SetConfig+0xaa>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a1b      	ldr	r2, [pc, #108]	; (8008a2c <TIM_OC3_SetConfig+0xfc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00b      	beq.n	80089da <TIM_OC3_SetConfig+0xaa>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a1a      	ldr	r2, [pc, #104]	; (8008a30 <TIM_OC3_SetConfig+0x100>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d007      	beq.n	80089da <TIM_OC3_SetConfig+0xaa>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <TIM_OC3_SetConfig+0x104>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d003      	beq.n	80089da <TIM_OC3_SetConfig+0xaa>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a18      	ldr	r2, [pc, #96]	; (8008a38 <TIM_OC3_SetConfig+0x108>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d113      	bne.n	8008a02 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	621a      	str	r2, [r3, #32]
}
 8008a1c:	bf00      	nop
 8008a1e:	371c      	adds	r7, #28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40010400 	.word	0x40010400
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
 8008a38:	40014800 	.word	0x40014800

08008a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	031b      	lsls	r3, r3, #12
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <TIM_OC4_SetConfig+0xbc>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00f      	beq.n	8008abc <TIM_OC4_SetConfig+0x80>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a17      	ldr	r2, [pc, #92]	; (8008afc <TIM_OC4_SetConfig+0xc0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00b      	beq.n	8008abc <TIM_OC4_SetConfig+0x80>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <TIM_OC4_SetConfig+0xc4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d007      	beq.n	8008abc <TIM_OC4_SetConfig+0x80>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a15      	ldr	r2, [pc, #84]	; (8008b04 <TIM_OC4_SetConfig+0xc8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_OC4_SetConfig+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <TIM_OC4_SetConfig+0xcc>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d109      	bne.n	8008ad0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	019b      	lsls	r3, r3, #6
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	621a      	str	r2, [r3, #32]
}
 8008aea:	bf00      	nop
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	40010000 	.word	0x40010000
 8008afc:	40010400 	.word	0x40010400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800

08008b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a17      	ldr	r2, [pc, #92]	; (8008bbc <TIM_OC5_SetConfig+0xb0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00f      	beq.n	8008b82 <TIM_OC5_SetConfig+0x76>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a16      	ldr	r2, [pc, #88]	; (8008bc0 <TIM_OC5_SetConfig+0xb4>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00b      	beq.n	8008b82 <TIM_OC5_SetConfig+0x76>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a15      	ldr	r2, [pc, #84]	; (8008bc4 <TIM_OC5_SetConfig+0xb8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <TIM_OC5_SetConfig+0x76>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a14      	ldr	r2, [pc, #80]	; (8008bc8 <TIM_OC5_SetConfig+0xbc>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_OC5_SetConfig+0x76>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a13      	ldr	r2, [pc, #76]	; (8008bcc <TIM_OC5_SetConfig+0xc0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d109      	bne.n	8008b96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	621a      	str	r2, [r3, #32]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800

08008bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	051b      	lsls	r3, r3, #20
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a18      	ldr	r2, [pc, #96]	; (8008c84 <TIM_OC6_SetConfig+0xb4>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d00f      	beq.n	8008c48 <TIM_OC6_SetConfig+0x78>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a17      	ldr	r2, [pc, #92]	; (8008c88 <TIM_OC6_SetConfig+0xb8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00b      	beq.n	8008c48 <TIM_OC6_SetConfig+0x78>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a16      	ldr	r2, [pc, #88]	; (8008c8c <TIM_OC6_SetConfig+0xbc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d007      	beq.n	8008c48 <TIM_OC6_SetConfig+0x78>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <TIM_OC6_SetConfig+0xc0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d003      	beq.n	8008c48 <TIM_OC6_SetConfig+0x78>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a14      	ldr	r2, [pc, #80]	; (8008c94 <TIM_OC6_SetConfig+0xc4>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d109      	bne.n	8008c5c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	029b      	lsls	r3, r3, #10
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	621a      	str	r2, [r3, #32]
}
 8008c76:	bf00      	nop
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40010000 	.word	0x40010000
 8008c88:	40010400 	.word	0x40010400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	40014400 	.word	0x40014400
 8008c94:	40014800 	.word	0x40014800

08008c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f023 0201 	bic.w	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f023 030a 	bic.w	r3, r3, #10
 8008cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b087      	sub	sp, #28
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0210 	bic.w	r2, r3, #16
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	031b      	lsls	r3, r3, #12
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	621a      	str	r2, [r3, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
	...

08008d58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <TIM_ITRx_SetConfig+0x38>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f043 0307 	orr.w	r3, r3, #7
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	609a      	str	r2, [r3, #8]
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	ffcfff8f 	.word	0xffcfff8f

08008d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	021a      	lsls	r2, r3, #8
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	609a      	str	r2, [r3, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e068      	b.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a2e      	ldr	r2, [pc, #184]	; (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d004      	beq.n	8008e20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a2d      	ldr	r2, [pc, #180]	; (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d108      	bne.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1e      	ldr	r2, [pc, #120]	; (8008ecc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d01d      	beq.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5e:	d018      	beq.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d013      	beq.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d00e      	beq.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a18      	ldr	r2, [pc, #96]	; (8008edc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d009      	beq.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d004      	beq.n	8008e92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a14      	ldr	r2, [pc, #80]	; (8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d10c      	bne.n	8008eac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40010000 	.word	0x40010000
 8008ed0:	40010400 	.word	0x40010400
 8008ed4:	40000400 	.word	0x40000400
 8008ed8:	40000800 	.word	0x40000800
 8008edc:	40000c00 	.word	0x40000c00
 8008ee0:	40001800 	.word	0x40001800

08008ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e065      	b.n	8008fcc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	041b      	lsls	r3, r3, #16
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a16      	ldr	r2, [pc, #88]	; (8008fd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d004      	beq.n	8008f8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a14      	ldr	r2, [pc, #80]	; (8008fdc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d115      	bne.n	8008fba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	051b      	lsls	r3, r3, #20
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40010400 	.word	0x40010400

08008fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e042      	b.n	80090b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7f8 fcf9 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2224      	movs	r2, #36	; 0x24
 800904a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0201 	bic.w	r2, r2, #1
 800905c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fcb2 	bl	80099c8 <UART_SetConfig>
 8009064:	4603      	mov	r3, r0
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e022      	b.n	80090b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fa06 	bl	800a488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800908a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800909a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 fa8d 	bl	800a5cc <UART_CheckIdleState>
 80090b2:	4603      	mov	r3, r0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08a      	sub	sp, #40	; 0x28
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	603b      	str	r3, [r7, #0]
 80090c8:	4613      	mov	r3, r2
 80090ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	f040 8083 	bne.w	80091de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <HAL_UART_Transmit+0x28>
 80090de:	88fb      	ldrh	r3, [r7, #6]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e07b      	b.n	80091e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_UART_Transmit+0x3a>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e074      	b.n	80091e0 <HAL_UART_Transmit+0x124>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2221      	movs	r2, #33	; 0x21
 800910a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800910e:	f7f9 f899 	bl	8002244 <HAL_GetTick>
 8009112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	88fa      	ldrh	r2, [r7, #6]
 8009120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912c:	d108      	bne.n	8009140 <HAL_UART_Transmit+0x84>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009136:	2300      	movs	r3, #0
 8009138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	61bb      	str	r3, [r7, #24]
 800913e:	e003      	b.n	8009148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009150:	e02c      	b.n	80091ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2200      	movs	r2, #0
 800915a:	2180      	movs	r1, #128	; 0x80
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f001 fa80 	bl	800a662 <UART_WaitOnFlagUntilTimeout>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e039      	b.n	80091e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10b      	bne.n	800918a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	3302      	adds	r3, #2
 8009186:	61bb      	str	r3, [r7, #24]
 8009188:	e007      	b.n	800919a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1cc      	bne.n	8009152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	2200      	movs	r2, #0
 80091c0:	2140      	movs	r1, #64	; 0x40
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f001 fa4d 	bl	800a662 <UART_WaitOnFlagUntilTimeout>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e006      	b.n	80091e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	e000      	b.n	80091e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80091de:	2302      	movs	r3, #2
  }
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d131      	bne.n	8009264 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_UART_Receive_IT+0x24>
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e02a      	b.n	8009266 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_UART_Receive_IT+0x36>
 800921a:	2302      	movs	r3, #2
 800921c:	e023      	b.n	8009266 <HAL_UART_Receive_IT+0x7e>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a0f      	ldr	r2, [pc, #60]	; (8009270 <HAL_UART_Receive_IT+0x88>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00e      	beq.n	8009254 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009252:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009254:	88fb      	ldrh	r3, [r7, #6]
 8009256:	461a      	mov	r2, r3
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f001 fa82 	bl	800a764 <UART_Start_Receive_IT>
 8009260:	4603      	mov	r3, r0
 8009262:	e000      	b.n	8009266 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009264:	2302      	movs	r3, #2
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	58000c00 	.word	0x58000c00

08009274 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009288:	2b20      	cmp	r3, #32
 800928a:	d168      	bne.n	800935e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <HAL_UART_Transmit_DMA+0x24>
 8009292:	88fb      	ldrh	r3, [r7, #6]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e061      	b.n	8009360 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_UART_Transmit_DMA+0x36>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e05a      	b.n	8009360 <HAL_UART_Transmit_DMA+0xec>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2221      	movs	r2, #33	; 0x21
 80092d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d02c      	beq.n	800933a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e4:	4a20      	ldr	r2, [pc, #128]	; (8009368 <HAL_UART_Transmit_DMA+0xf4>)
 80092e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ec:	4a1f      	ldr	r2, [pc, #124]	; (800936c <HAL_UART_Transmit_DMA+0xf8>)
 80092ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092f4:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <HAL_UART_Transmit_DMA+0xfc>)
 80092f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092fc:	2200      	movs	r2, #0
 80092fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009308:	4619      	mov	r1, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3328      	adds	r3, #40	; 0x28
 8009310:	461a      	mov	r2, r3
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	f7f9 fc3e 	bl	8002b94 <HAL_DMA_Start_IT>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00d      	beq.n	800933a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2210      	movs	r2, #16
 8009322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2220      	movs	r2, #32
 8009332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e012      	b.n	8009360 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2240      	movs	r2, #64	; 0x40
 8009340:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009358:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e000      	b.n	8009360 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800935e:	2302      	movs	r3, #2
  }
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	0800aa5d 	.word	0x0800aa5d
 800936c:	0800aaad 	.word	0x0800aaad
 8009370:	0800ab97 	.word	0x0800ab97

08009374 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	2b20      	cmp	r3, #32
 800938a:	d131      	bne.n	80093f0 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <HAL_UART_Receive_DMA+0x24>
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e02a      	b.n	80093f2 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <HAL_UART_Receive_DMA+0x36>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e023      	b.n	80093f2 <HAL_UART_Receive_DMA+0x7e>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a0f      	ldr	r2, [pc, #60]	; (80093fc <HAL_UART_Receive_DMA+0x88>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00e      	beq.n	80093e0 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80093de:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	461a      	mov	r2, r3
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f001 fa7a 	bl	800a8e0 <UART_Start_Receive_DMA>
 80093ec:	4603      	mov	r3, r0
 80093ee:	e000      	b.n	80093f2 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	58000c00 	.word	0x58000c00

08009400 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	f640 030f 	movw	r3, #2063	; 0x80f
 8009426:	4013      	ands	r3, r2
 8009428:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d118      	bne.n	8009462 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d013      	beq.n	8009462 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8282 	beq.w	800995c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
      }
      return;
 8009460:	e27c      	b.n	800995c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 80ef 	beq.w	8009648 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4b73      	ldr	r3, [pc, #460]	; (800963c <HAL_UART_IRQHandler+0x23c>)
 800946e:	4013      	ands	r3, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	4b72      	ldr	r3, [pc, #456]	; (8009640 <HAL_UART_IRQHandler+0x240>)
 8009478:	4013      	ands	r3, r2
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80e4 	beq.w	8009648 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d010      	beq.n	80094ac <HAL_UART_IRQHandler+0xac>
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00b      	beq.n	80094ac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2201      	movs	r2, #1
 800949a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a2:	f043 0201 	orr.w	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d010      	beq.n	80094d8 <HAL_UART_IRQHandler+0xd8>
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2202      	movs	r2, #2
 80094c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ce:	f043 0204 	orr.w	r2, r3, #4
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	f003 0304 	and.w	r3, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d010      	beq.n	8009504 <HAL_UART_IRQHandler+0x104>
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00b      	beq.n	8009504 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2204      	movs	r2, #4
 80094f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fa:	f043 0202 	orr.w	r2, r3, #2
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d015      	beq.n	800953a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	2b00      	cmp	r3, #0
 8009516:	d104      	bne.n	8009522 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	4b48      	ldr	r3, [pc, #288]	; (800963c <HAL_UART_IRQHandler+0x23c>)
 800951c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2208      	movs	r2, #8
 8009528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009530:	f043 0208 	orr.w	r2, r3, #8
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009540:	2b00      	cmp	r3, #0
 8009542:	d011      	beq.n	8009568 <HAL_UART_IRQHandler+0x168>
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800955e:	f043 0220 	orr.w	r2, r3, #32
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 81f6 	beq.w	8009960 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	f003 0320 	and.w	r3, r3, #32
 800957a:	2b00      	cmp	r3, #0
 800957c:	d011      	beq.n	80095a2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d004      	beq.n	80095c2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d031      	beq.n	8009626 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fa18 	bl	800a9f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d2:	2b40      	cmp	r3, #64	; 0x40
 80095d4:	d123      	bne.n	800961e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d013      	beq.n	8009616 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f2:	4a14      	ldr	r2, [pc, #80]	; (8009644 <HAL_UART_IRQHandler+0x244>)
 80095f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fa f852 	bl	80036a4 <HAL_DMA_Abort_IT>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d017      	beq.n	8009636 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009610:	4610      	mov	r0, r2
 8009612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009614:	e00f      	b.n	8009636 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f9c0 	bl	800999c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961c:	e00b      	b.n	8009636 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f9bc 	bl	800999c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009624:	e007      	b.n	8009636 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9b8 	bl	800999c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009634:	e194      	b.n	8009960 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009636:	bf00      	nop
    return;
 8009638:	e192      	b.n	8009960 <HAL_UART_IRQHandler+0x560>
 800963a:	bf00      	nop
 800963c:	10000001 	.word	0x10000001
 8009640:	04000120 	.word	0x04000120
 8009644:	0800ac17 	.word	0x0800ac17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800964c:	2b01      	cmp	r3, #1
 800964e:	f040 810f 	bne.w	8009870 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 8109 	beq.w	8009870 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8103 	beq.w	8009870 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2210      	movs	r2, #16
 8009670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967c:	2b40      	cmp	r3, #64	; 0x40
 800967e:	f040 80bb 	bne.w	80097f8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a96      	ldr	r2, [pc, #600]	; (80098e4 <HAL_UART_IRQHandler+0x4e4>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d059      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a94      	ldr	r2, [pc, #592]	; (80098e8 <HAL_UART_IRQHandler+0x4e8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d053      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a92      	ldr	r2, [pc, #584]	; (80098ec <HAL_UART_IRQHandler+0x4ec>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d04d      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a90      	ldr	r2, [pc, #576]	; (80098f0 <HAL_UART_IRQHandler+0x4f0>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d047      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a8e      	ldr	r2, [pc, #568]	; (80098f4 <HAL_UART_IRQHandler+0x4f4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d041      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a8c      	ldr	r2, [pc, #560]	; (80098f8 <HAL_UART_IRQHandler+0x4f8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d03b      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a8a      	ldr	r2, [pc, #552]	; (80098fc <HAL_UART_IRQHandler+0x4fc>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d035      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a88      	ldr	r2, [pc, #544]	; (8009900 <HAL_UART_IRQHandler+0x500>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d02f      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a86      	ldr	r2, [pc, #536]	; (8009904 <HAL_UART_IRQHandler+0x504>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d029      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a84      	ldr	r2, [pc, #528]	; (8009908 <HAL_UART_IRQHandler+0x508>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d023      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a82      	ldr	r2, [pc, #520]	; (800990c <HAL_UART_IRQHandler+0x50c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d01d      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a80      	ldr	r2, [pc, #512]	; (8009910 <HAL_UART_IRQHandler+0x510>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d017      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a7e      	ldr	r2, [pc, #504]	; (8009914 <HAL_UART_IRQHandler+0x514>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d011      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a7c      	ldr	r2, [pc, #496]	; (8009918 <HAL_UART_IRQHandler+0x518>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d00b      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a7a      	ldr	r2, [pc, #488]	; (800991c <HAL_UART_IRQHandler+0x51c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d005      	beq.n	8009742 <HAL_UART_IRQHandler+0x342>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a78      	ldr	r2, [pc, #480]	; (8009920 <HAL_UART_IRQHandler+0x520>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d105      	bne.n	800974e <HAL_UART_IRQHandler+0x34e>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	b29b      	uxth	r3, r3
 800974c:	e004      	b.n	8009758 <HAL_UART_IRQHandler+0x358>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	b29b      	uxth	r3, r3
 8009758:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800975a:	893b      	ldrh	r3, [r7, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 8101 	beq.w	8009964 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009768:	893a      	ldrh	r2, [r7, #8]
 800976a:	429a      	cmp	r2, r3
 800976c:	f080 80fa 	bcs.w	8009964 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	893a      	ldrh	r2, [r7, #8]
 8009774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009782:	d02b      	beq.n	80097dc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009792:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 0201 	bic.w	r2, r2, #1
 80097a2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097b2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0210 	bic.w	r2, r2, #16
 80097d0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7f9 fc46 	bl	8003068 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f8dd 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097f6:	e0b5      	b.n	8009964 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009804:	b29b      	uxth	r3, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80a8 	beq.w	8009968 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009818:	897b      	ldrh	r3, [r7, #10]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80a4 	beq.w	8009968 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800982e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6899      	ldr	r1, [r3, #8]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b3a      	ldr	r3, [pc, #232]	; (8009924 <HAL_UART_IRQHandler+0x524>)
 800983c:	400b      	ands	r3, r1
 800983e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2220      	movs	r2, #32
 8009844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0210 	bic.w	r2, r2, #16
 8009862:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009864:	897b      	ldrh	r3, [r7, #10]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f8a1 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800986e:	e07b      	b.n	8009968 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <HAL_UART_IRQHandler+0x496>
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d008      	beq.n	8009896 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800988c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fd38 	bl	800b304 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009894:	e06b      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b00      	cmp	r3, #0
 800989e:	d012      	beq.n	80098c6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d104      	bne.n	80098b4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d057      	beq.n	800996c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	4798      	blx	r3
    }
    return;
 80098c4:	e052      	b.n	800996c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d02b      	beq.n	8009928 <HAL_UART_IRQHandler+0x528>
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d026      	beq.n	8009928 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 f9b1 	bl	800ac42 <UART_EndTransmit_IT>
    return;
 80098e0:	e045      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
 80098e2:	bf00      	nop
 80098e4:	40020010 	.word	0x40020010
 80098e8:	40020028 	.word	0x40020028
 80098ec:	40020040 	.word	0x40020040
 80098f0:	40020058 	.word	0x40020058
 80098f4:	40020070 	.word	0x40020070
 80098f8:	40020088 	.word	0x40020088
 80098fc:	400200a0 	.word	0x400200a0
 8009900:	400200b8 	.word	0x400200b8
 8009904:	40020410 	.word	0x40020410
 8009908:	40020428 	.word	0x40020428
 800990c:	40020440 	.word	0x40020440
 8009910:	40020458 	.word	0x40020458
 8009914:	40020470 	.word	0x40020470
 8009918:	40020488 	.word	0x40020488
 800991c:	400204a0 	.word	0x400204a0
 8009920:	400204b8 	.word	0x400204b8
 8009924:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d008      	beq.n	8009944 <HAL_UART_IRQHandler+0x544>
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 fcf5 	bl	800b32c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009942:	e014      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00f      	beq.n	800996e <HAL_UART_IRQHandler+0x56e>
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	da0c      	bge.n	800996e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 fcdf 	bl	800b318 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800995a:	e008      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
      return;
 800995c:	bf00      	nop
 800995e:	e006      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
    return;
 8009960:	bf00      	nop
 8009962:	e004      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
      return;
 8009964:	bf00      	nop
 8009966:	e002      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
      return;
 8009968:	bf00      	nop
 800996a:	e000      	b.n	800996e <HAL_UART_IRQHandler+0x56e>
    return;
 800996c:	bf00      	nop
  }
}
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099c8:	b5b0      	push	{r4, r5, r7, lr}
 80099ca:	b08e      	sub	sp, #56	; 0x38
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	4bbf      	ldr	r3, [pc, #764]	; (8009cf4 <UART_SetConfig+0x32c>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099fe:	430b      	orrs	r3, r1
 8009a00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4ab5      	ldr	r2, [pc, #724]	; (8009cf8 <UART_SetConfig+0x330>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d004      	beq.n	8009a32 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	4bb0      	ldr	r3, [pc, #704]	; (8009cfc <UART_SetConfig+0x334>)
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a42:	430b      	orrs	r3, r1
 8009a44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	f023 010f 	bic.w	r1, r3, #15
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4aa7      	ldr	r2, [pc, #668]	; (8009d00 <UART_SetConfig+0x338>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d176      	bne.n	8009b54 <UART_SetConfig+0x18c>
 8009a66:	4ba7      	ldr	r3, [pc, #668]	; (8009d04 <UART_SetConfig+0x33c>)
 8009a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a6e:	2b28      	cmp	r3, #40	; 0x28
 8009a70:	d86c      	bhi.n	8009b4c <UART_SetConfig+0x184>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0xb0>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009b1d 	.word	0x08009b1d
 8009a7c:	08009b4d 	.word	0x08009b4d
 8009a80:	08009b4d 	.word	0x08009b4d
 8009a84:	08009b4d 	.word	0x08009b4d
 8009a88:	08009b4d 	.word	0x08009b4d
 8009a8c:	08009b4d 	.word	0x08009b4d
 8009a90:	08009b4d 	.word	0x08009b4d
 8009a94:	08009b4d 	.word	0x08009b4d
 8009a98:	08009b25 	.word	0x08009b25
 8009a9c:	08009b4d 	.word	0x08009b4d
 8009aa0:	08009b4d 	.word	0x08009b4d
 8009aa4:	08009b4d 	.word	0x08009b4d
 8009aa8:	08009b4d 	.word	0x08009b4d
 8009aac:	08009b4d 	.word	0x08009b4d
 8009ab0:	08009b4d 	.word	0x08009b4d
 8009ab4:	08009b4d 	.word	0x08009b4d
 8009ab8:	08009b2d 	.word	0x08009b2d
 8009abc:	08009b4d 	.word	0x08009b4d
 8009ac0:	08009b4d 	.word	0x08009b4d
 8009ac4:	08009b4d 	.word	0x08009b4d
 8009ac8:	08009b4d 	.word	0x08009b4d
 8009acc:	08009b4d 	.word	0x08009b4d
 8009ad0:	08009b4d 	.word	0x08009b4d
 8009ad4:	08009b4d 	.word	0x08009b4d
 8009ad8:	08009b35 	.word	0x08009b35
 8009adc:	08009b4d 	.word	0x08009b4d
 8009ae0:	08009b4d 	.word	0x08009b4d
 8009ae4:	08009b4d 	.word	0x08009b4d
 8009ae8:	08009b4d 	.word	0x08009b4d
 8009aec:	08009b4d 	.word	0x08009b4d
 8009af0:	08009b4d 	.word	0x08009b4d
 8009af4:	08009b4d 	.word	0x08009b4d
 8009af8:	08009b3d 	.word	0x08009b3d
 8009afc:	08009b4d 	.word	0x08009b4d
 8009b00:	08009b4d 	.word	0x08009b4d
 8009b04:	08009b4d 	.word	0x08009b4d
 8009b08:	08009b4d 	.word	0x08009b4d
 8009b0c:	08009b4d 	.word	0x08009b4d
 8009b10:	08009b4d 	.word	0x08009b4d
 8009b14:	08009b4d 	.word	0x08009b4d
 8009b18:	08009b45 	.word	0x08009b45
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	e222      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b24:	2304      	movs	r3, #4
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e21e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b2c:	2308      	movs	r3, #8
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e21a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b34:	2310      	movs	r3, #16
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e216      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e212      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b44:	2340      	movs	r3, #64	; 0x40
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e20e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b4c:	2380      	movs	r3, #128	; 0x80
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e20a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a6b      	ldr	r2, [pc, #428]	; (8009d08 <UART_SetConfig+0x340>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d130      	bne.n	8009bc0 <UART_SetConfig+0x1f8>
 8009b5e:	4b69      	ldr	r3, [pc, #420]	; (8009d04 <UART_SetConfig+0x33c>)
 8009b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d826      	bhi.n	8009bb8 <UART_SetConfig+0x1f0>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <UART_SetConfig+0x1a8>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b91 	.word	0x08009b91
 8009b78:	08009b99 	.word	0x08009b99
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e1ec      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e1e8      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e1e4      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e1e0      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e1dc      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e1d8      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009bb8:	2380      	movs	r3, #128	; 0x80
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e1d4      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a51      	ldr	r2, [pc, #324]	; (8009d0c <UART_SetConfig+0x344>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d130      	bne.n	8009c2c <UART_SetConfig+0x264>
 8009bca:	4b4e      	ldr	r3, [pc, #312]	; (8009d04 <UART_SetConfig+0x33c>)
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d826      	bhi.n	8009c24 <UART_SetConfig+0x25c>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <UART_SetConfig+0x214>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009bf5 	.word	0x08009bf5
 8009be0:	08009bfd 	.word	0x08009bfd
 8009be4:	08009c05 	.word	0x08009c05
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009c15 	.word	0x08009c15
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e1b6      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e1b2      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e1ae      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e1aa      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e1a6      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e1a2      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e19e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a37      	ldr	r2, [pc, #220]	; (8009d10 <UART_SetConfig+0x348>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d130      	bne.n	8009c98 <UART_SetConfig+0x2d0>
 8009c36:	4b33      	ldr	r3, [pc, #204]	; (8009d04 <UART_SetConfig+0x33c>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d826      	bhi.n	8009c90 <UART_SetConfig+0x2c8>
 8009c42:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <UART_SetConfig+0x280>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c61 	.word	0x08009c61
 8009c4c:	08009c69 	.word	0x08009c69
 8009c50:	08009c71 	.word	0x08009c71
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c89 	.word	0x08009c89
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e180      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e17c      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e178      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e174      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c80:	2320      	movs	r3, #32
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e170      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c88:	2340      	movs	r3, #64	; 0x40
 8009c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8e:	e16c      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c90:	2380      	movs	r3, #128	; 0x80
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e168      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <UART_SetConfig+0x34c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d142      	bne.n	8009d28 <UART_SetConfig+0x360>
 8009ca2:	4b18      	ldr	r3, [pc, #96]	; (8009d04 <UART_SetConfig+0x33c>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d838      	bhi.n	8009d20 <UART_SetConfig+0x358>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <UART_SetConfig+0x2ec>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009ccd 	.word	0x08009ccd
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	08009cdd 	.word	0x08009cdd
 8009cc0:	08009ce5 	.word	0x08009ce5
 8009cc4:	08009ced 	.word	0x08009ced
 8009cc8:	08009d19 	.word	0x08009d19
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e14a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cda:	e146      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	e142      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cea:	e13e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009cec:	2320      	movs	r3, #32
 8009cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf2:	e13a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009cf4:	cfff69f3 	.word	0xcfff69f3
 8009cf8:	58000c00 	.word	0x58000c00
 8009cfc:	11fff4ff 	.word	0x11fff4ff
 8009d00:	40011000 	.word	0x40011000
 8009d04:	58024400 	.word	0x58024400
 8009d08:	40004400 	.word	0x40004400
 8009d0c:	40004800 	.word	0x40004800
 8009d10:	40004c00 	.word	0x40004c00
 8009d14:	40005000 	.word	0x40005000
 8009d18:	2340      	movs	r3, #64	; 0x40
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e124      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009d20:	2380      	movs	r3, #128	; 0x80
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e120      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4acc      	ldr	r2, [pc, #816]	; (800a060 <UART_SetConfig+0x698>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d176      	bne.n	8009e20 <UART_SetConfig+0x458>
 8009d32:	4bcc      	ldr	r3, [pc, #816]	; (800a064 <UART_SetConfig+0x69c>)
 8009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d3a:	2b28      	cmp	r3, #40	; 0x28
 8009d3c:	d86c      	bhi.n	8009e18 <UART_SetConfig+0x450>
 8009d3e:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <UART_SetConfig+0x37c>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009de9 	.word	0x08009de9
 8009d48:	08009e19 	.word	0x08009e19
 8009d4c:	08009e19 	.word	0x08009e19
 8009d50:	08009e19 	.word	0x08009e19
 8009d54:	08009e19 	.word	0x08009e19
 8009d58:	08009e19 	.word	0x08009e19
 8009d5c:	08009e19 	.word	0x08009e19
 8009d60:	08009e19 	.word	0x08009e19
 8009d64:	08009df1 	.word	0x08009df1
 8009d68:	08009e19 	.word	0x08009e19
 8009d6c:	08009e19 	.word	0x08009e19
 8009d70:	08009e19 	.word	0x08009e19
 8009d74:	08009e19 	.word	0x08009e19
 8009d78:	08009e19 	.word	0x08009e19
 8009d7c:	08009e19 	.word	0x08009e19
 8009d80:	08009e19 	.word	0x08009e19
 8009d84:	08009df9 	.word	0x08009df9
 8009d88:	08009e19 	.word	0x08009e19
 8009d8c:	08009e19 	.word	0x08009e19
 8009d90:	08009e19 	.word	0x08009e19
 8009d94:	08009e19 	.word	0x08009e19
 8009d98:	08009e19 	.word	0x08009e19
 8009d9c:	08009e19 	.word	0x08009e19
 8009da0:	08009e19 	.word	0x08009e19
 8009da4:	08009e01 	.word	0x08009e01
 8009da8:	08009e19 	.word	0x08009e19
 8009dac:	08009e19 	.word	0x08009e19
 8009db0:	08009e19 	.word	0x08009e19
 8009db4:	08009e19 	.word	0x08009e19
 8009db8:	08009e19 	.word	0x08009e19
 8009dbc:	08009e19 	.word	0x08009e19
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e09 	.word	0x08009e09
 8009dc8:	08009e19 	.word	0x08009e19
 8009dcc:	08009e19 	.word	0x08009e19
 8009dd0:	08009e19 	.word	0x08009e19
 8009dd4:	08009e19 	.word	0x08009e19
 8009dd8:	08009e19 	.word	0x08009e19
 8009ddc:	08009e19 	.word	0x08009e19
 8009de0:	08009e19 	.word	0x08009e19
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e0bc      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e0b8      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e0b4      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e0b0      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e08:	2320      	movs	r3, #32
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e0ac      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e0a8      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e18:	2380      	movs	r3, #128	; 0x80
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e0a4      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a90      	ldr	r2, [pc, #576]	; (800a068 <UART_SetConfig+0x6a0>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d130      	bne.n	8009e8c <UART_SetConfig+0x4c4>
 8009e2a:	4b8e      	ldr	r3, [pc, #568]	; (800a064 <UART_SetConfig+0x69c>)
 8009e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d826      	bhi.n	8009e84 <UART_SetConfig+0x4bc>
 8009e36:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <UART_SetConfig+0x474>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e55 	.word	0x08009e55
 8009e40:	08009e5d 	.word	0x08009e5d
 8009e44:	08009e65 	.word	0x08009e65
 8009e48:	08009e6d 	.word	0x08009e6d
 8009e4c:	08009e75 	.word	0x08009e75
 8009e50:	08009e7d 	.word	0x08009e7d
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5a:	e086      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e082      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e64:	2308      	movs	r3, #8
 8009e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6a:	e07e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e07a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e74:	2320      	movs	r3, #32
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e076      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e7c:	2340      	movs	r3, #64	; 0x40
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e82:	e072      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e84:	2380      	movs	r3, #128	; 0x80
 8009e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8a:	e06e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a76      	ldr	r2, [pc, #472]	; (800a06c <UART_SetConfig+0x6a4>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d130      	bne.n	8009ef8 <UART_SetConfig+0x530>
 8009e96:	4b73      	ldr	r3, [pc, #460]	; (800a064 <UART_SetConfig+0x69c>)
 8009e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	d826      	bhi.n	8009ef0 <UART_SetConfig+0x528>
 8009ea2:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <UART_SetConfig+0x4e0>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009ec1 	.word	0x08009ec1
 8009eac:	08009ec9 	.word	0x08009ec9
 8009eb0:	08009ed1 	.word	0x08009ed1
 8009eb4:	08009ed9 	.word	0x08009ed9
 8009eb8:	08009ee1 	.word	0x08009ee1
 8009ebc:	08009ee9 	.word	0x08009ee9
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e050      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ec8:	2304      	movs	r3, #4
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e04c      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e048      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e044      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e040      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ee8:	2340      	movs	r3, #64	; 0x40
 8009eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eee:	e03c      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ef0:	2380      	movs	r3, #128	; 0x80
 8009ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef6:	e038      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a5c      	ldr	r2, [pc, #368]	; (800a070 <UART_SetConfig+0x6a8>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d130      	bne.n	8009f64 <UART_SetConfig+0x59c>
 8009f02:	4b58      	ldr	r3, [pc, #352]	; (800a064 <UART_SetConfig+0x69c>)
 8009f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d826      	bhi.n	8009f5c <UART_SetConfig+0x594>
 8009f0e:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <UART_SetConfig+0x54c>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009f2d 	.word	0x08009f2d
 8009f18:	08009f35 	.word	0x08009f35
 8009f1c:	08009f3d 	.word	0x08009f3d
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f4d 	.word	0x08009f4d
 8009f28:	08009f55 	.word	0x08009f55
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e01a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f34:	2304      	movs	r3, #4
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e016      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e012      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f44:	2310      	movs	r3, #16
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e00e      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e00a      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5a:	e006      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f62:	e002      	b.n	8009f6a <UART_SetConfig+0x5a2>
 8009f64:	2380      	movs	r3, #128	; 0x80
 8009f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a40      	ldr	r2, [pc, #256]	; (800a070 <UART_SetConfig+0x6a8>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	f040 80ef 	bne.w	800a154 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	dc46      	bgt.n	800a00c <UART_SetConfig+0x644>
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	f2c0 8081 	blt.w	800a086 <UART_SetConfig+0x6be>
 8009f84:	3b02      	subs	r3, #2
 8009f86:	2b1e      	cmp	r3, #30
 8009f88:	d87d      	bhi.n	800a086 <UART_SetConfig+0x6be>
 8009f8a:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <UART_SetConfig+0x5c8>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	0800a013 	.word	0x0800a013
 8009f94:	0800a087 	.word	0x0800a087
 8009f98:	0800a01b 	.word	0x0800a01b
 8009f9c:	0800a087 	.word	0x0800a087
 8009fa0:	0800a087 	.word	0x0800a087
 8009fa4:	0800a087 	.word	0x0800a087
 8009fa8:	0800a02b 	.word	0x0800a02b
 8009fac:	0800a087 	.word	0x0800a087
 8009fb0:	0800a087 	.word	0x0800a087
 8009fb4:	0800a087 	.word	0x0800a087
 8009fb8:	0800a087 	.word	0x0800a087
 8009fbc:	0800a087 	.word	0x0800a087
 8009fc0:	0800a087 	.word	0x0800a087
 8009fc4:	0800a087 	.word	0x0800a087
 8009fc8:	0800a03b 	.word	0x0800a03b
 8009fcc:	0800a087 	.word	0x0800a087
 8009fd0:	0800a087 	.word	0x0800a087
 8009fd4:	0800a087 	.word	0x0800a087
 8009fd8:	0800a087 	.word	0x0800a087
 8009fdc:	0800a087 	.word	0x0800a087
 8009fe0:	0800a087 	.word	0x0800a087
 8009fe4:	0800a087 	.word	0x0800a087
 8009fe8:	0800a087 	.word	0x0800a087
 8009fec:	0800a087 	.word	0x0800a087
 8009ff0:	0800a087 	.word	0x0800a087
 8009ff4:	0800a087 	.word	0x0800a087
 8009ff8:	0800a087 	.word	0x0800a087
 8009ffc:	0800a087 	.word	0x0800a087
 800a000:	0800a087 	.word	0x0800a087
 800a004:	0800a087 	.word	0x0800a087
 800a008:	0800a079 	.word	0x0800a079
 800a00c:	2b40      	cmp	r3, #64	; 0x40
 800a00e:	d036      	beq.n	800a07e <UART_SetConfig+0x6b6>
 800a010:	e039      	b.n	800a086 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a012:	f7fd f997 	bl	8007344 <HAL_RCCEx_GetD3PCLK1Freq>
 800a016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a018:	e03b      	b.n	800a092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a01a:	f107 0314 	add.w	r3, r7, #20
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fd f9a6 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a028:	e033      	b.n	800a092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a02a:	f107 0308 	add.w	r3, r7, #8
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fd faf2 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a038:	e02b      	b.n	800a092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a03a:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <UART_SetConfig+0x69c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0320 	and.w	r3, r3, #32
 800a042:	2b00      	cmp	r3, #0
 800a044:	d009      	beq.n	800a05a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a046:	4b07      	ldr	r3, [pc, #28]	; (800a064 <UART_SetConfig+0x69c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	08db      	lsrs	r3, r3, #3
 800a04c:	f003 0303 	and.w	r3, r3, #3
 800a050:	4a08      	ldr	r2, [pc, #32]	; (800a074 <UART_SetConfig+0x6ac>)
 800a052:	fa22 f303 	lsr.w	r3, r2, r3
 800a056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a058:	e01b      	b.n	800a092 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a05a:	4b06      	ldr	r3, [pc, #24]	; (800a074 <UART_SetConfig+0x6ac>)
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a05e:	e018      	b.n	800a092 <UART_SetConfig+0x6ca>
 800a060:	40011400 	.word	0x40011400
 800a064:	58024400 	.word	0x58024400
 800a068:	40007800 	.word	0x40007800
 800a06c:	40007c00 	.word	0x40007c00
 800a070:	58000c00 	.word	0x58000c00
 800a074:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a078:	4bc4      	ldr	r3, [pc, #784]	; (800a38c <UART_SetConfig+0x9c4>)
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a07c:	e009      	b.n	800a092 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a07e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a084:	e005      	b.n	800a092 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 81da 	beq.w	800a44e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	4abc      	ldr	r2, [pc, #752]	; (800a390 <UART_SetConfig+0x9c8>)
 800a0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	6a3a      	ldr	r2, [r7, #32]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d305      	bcc.n	800a0ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0c4:	6a3a      	ldr	r2, [r7, #32]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d903      	bls.n	800a0d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0d0:	e1bd      	b.n	800a44e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f04f 0100 	mov.w	r1, #0
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	4aac      	ldr	r2, [pc, #688]	; (800a390 <UART_SetConfig+0x9c8>)
 800a0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	f7f6 f949 	bl	8000380 <__aeabi_uldivmod>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f04f 0200 	mov.w	r2, #0
 800a0fa:	f04f 0300 	mov.w	r3, #0
 800a0fe:	020b      	lsls	r3, r1, #8
 800a100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a104:	0202      	lsls	r2, r0, #8
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	6849      	ldr	r1, [r1, #4]
 800a10a:	0849      	lsrs	r1, r1, #1
 800a10c:	4608      	mov	r0, r1
 800a10e:	f04f 0100 	mov.w	r1, #0
 800a112:	1814      	adds	r4, r2, r0
 800a114:	eb43 0501 	adc.w	r5, r3, r1
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	461a      	mov	r2, r3
 800a11e:	f04f 0300 	mov.w	r3, #0
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 f92b 	bl	8000380 <__aeabi_uldivmod>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4613      	mov	r3, r2
 800a130:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a138:	d308      	bcc.n	800a14c <UART_SetConfig+0x784>
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a140:	d204      	bcs.n	800a14c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a148:	60da      	str	r2, [r3, #12]
 800a14a:	e180      	b.n	800a44e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a152:	e17c      	b.n	800a44e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a15c:	f040 80bf 	bne.w	800a2de <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a164:	2b20      	cmp	r3, #32
 800a166:	dc49      	bgt.n	800a1fc <UART_SetConfig+0x834>
 800a168:	2b00      	cmp	r3, #0
 800a16a:	db7c      	blt.n	800a266 <UART_SetConfig+0x89e>
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	d87a      	bhi.n	800a266 <UART_SetConfig+0x89e>
 800a170:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <UART_SetConfig+0x7b0>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a203 	.word	0x0800a203
 800a17c:	0800a20b 	.word	0x0800a20b
 800a180:	0800a267 	.word	0x0800a267
 800a184:	0800a267 	.word	0x0800a267
 800a188:	0800a213 	.word	0x0800a213
 800a18c:	0800a267 	.word	0x0800a267
 800a190:	0800a267 	.word	0x0800a267
 800a194:	0800a267 	.word	0x0800a267
 800a198:	0800a223 	.word	0x0800a223
 800a19c:	0800a267 	.word	0x0800a267
 800a1a0:	0800a267 	.word	0x0800a267
 800a1a4:	0800a267 	.word	0x0800a267
 800a1a8:	0800a267 	.word	0x0800a267
 800a1ac:	0800a267 	.word	0x0800a267
 800a1b0:	0800a267 	.word	0x0800a267
 800a1b4:	0800a267 	.word	0x0800a267
 800a1b8:	0800a233 	.word	0x0800a233
 800a1bc:	0800a267 	.word	0x0800a267
 800a1c0:	0800a267 	.word	0x0800a267
 800a1c4:	0800a267 	.word	0x0800a267
 800a1c8:	0800a267 	.word	0x0800a267
 800a1cc:	0800a267 	.word	0x0800a267
 800a1d0:	0800a267 	.word	0x0800a267
 800a1d4:	0800a267 	.word	0x0800a267
 800a1d8:	0800a267 	.word	0x0800a267
 800a1dc:	0800a267 	.word	0x0800a267
 800a1e0:	0800a267 	.word	0x0800a267
 800a1e4:	0800a267 	.word	0x0800a267
 800a1e8:	0800a267 	.word	0x0800a267
 800a1ec:	0800a267 	.word	0x0800a267
 800a1f0:	0800a267 	.word	0x0800a267
 800a1f4:	0800a267 	.word	0x0800a267
 800a1f8:	0800a259 	.word	0x0800a259
 800a1fc:	2b40      	cmp	r3, #64	; 0x40
 800a1fe:	d02e      	beq.n	800a25e <UART_SetConfig+0x896>
 800a200:	e031      	b.n	800a266 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a202:	f7fc f933 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 800a206:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a208:	e033      	b.n	800a272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a20a:	f7fc f945 	bl	8006498 <HAL_RCC_GetPCLK2Freq>
 800a20e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a210:	e02f      	b.n	800a272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	4618      	mov	r0, r3
 800a218:	f7fd f8aa 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a220:	e027      	b.n	800a272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4618      	mov	r0, r3
 800a228:	f7fd f9f6 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a230:	e01f      	b.n	800a272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a232:	4b58      	ldr	r3, [pc, #352]	; (800a394 <UART_SetConfig+0x9cc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a23e:	4b55      	ldr	r3, [pc, #340]	; (800a394 <UART_SetConfig+0x9cc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	08db      	lsrs	r3, r3, #3
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	4a53      	ldr	r2, [pc, #332]	; (800a398 <UART_SetConfig+0x9d0>)
 800a24a:	fa22 f303 	lsr.w	r3, r2, r3
 800a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a250:	e00f      	b.n	800a272 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a252:	4b51      	ldr	r3, [pc, #324]	; (800a398 <UART_SetConfig+0x9d0>)
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a256:	e00c      	b.n	800a272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a258:	4b4c      	ldr	r3, [pc, #304]	; (800a38c <UART_SetConfig+0x9c4>)
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a25c:	e009      	b.n	800a272 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a25e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a264:	e005      	b.n	800a272 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 80ea 	beq.w	800a44e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	4a44      	ldr	r2, [pc, #272]	; (800a390 <UART_SetConfig+0x9c8>)
 800a280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a284:	461a      	mov	r2, r3
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28c:	005a      	lsls	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	441a      	add	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d916      	bls.n	800a2d6 <UART_SetConfig+0x90e>
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ae:	d212      	bcs.n	800a2d6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f023 030f 	bic.w	r3, r3, #15
 800a2b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f003 0307 	and.w	r3, r3, #7
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a2d2:	60da      	str	r2, [r3, #12]
 800a2d4:	e0bb      	b.n	800a44e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a2dc:	e0b7      	b.n	800a44e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	dc4a      	bgt.n	800a37c <UART_SetConfig+0x9b4>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f2c0 8086 	blt.w	800a3f8 <UART_SetConfig+0xa30>
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	f200 8083 	bhi.w	800a3f8 <UART_SetConfig+0xa30>
 800a2f2:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0x930>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a383 	.word	0x0800a383
 800a2fc:	0800a39d 	.word	0x0800a39d
 800a300:	0800a3f9 	.word	0x0800a3f9
 800a304:	0800a3f9 	.word	0x0800a3f9
 800a308:	0800a3a5 	.word	0x0800a3a5
 800a30c:	0800a3f9 	.word	0x0800a3f9
 800a310:	0800a3f9 	.word	0x0800a3f9
 800a314:	0800a3f9 	.word	0x0800a3f9
 800a318:	0800a3b5 	.word	0x0800a3b5
 800a31c:	0800a3f9 	.word	0x0800a3f9
 800a320:	0800a3f9 	.word	0x0800a3f9
 800a324:	0800a3f9 	.word	0x0800a3f9
 800a328:	0800a3f9 	.word	0x0800a3f9
 800a32c:	0800a3f9 	.word	0x0800a3f9
 800a330:	0800a3f9 	.word	0x0800a3f9
 800a334:	0800a3f9 	.word	0x0800a3f9
 800a338:	0800a3c5 	.word	0x0800a3c5
 800a33c:	0800a3f9 	.word	0x0800a3f9
 800a340:	0800a3f9 	.word	0x0800a3f9
 800a344:	0800a3f9 	.word	0x0800a3f9
 800a348:	0800a3f9 	.word	0x0800a3f9
 800a34c:	0800a3f9 	.word	0x0800a3f9
 800a350:	0800a3f9 	.word	0x0800a3f9
 800a354:	0800a3f9 	.word	0x0800a3f9
 800a358:	0800a3f9 	.word	0x0800a3f9
 800a35c:	0800a3f9 	.word	0x0800a3f9
 800a360:	0800a3f9 	.word	0x0800a3f9
 800a364:	0800a3f9 	.word	0x0800a3f9
 800a368:	0800a3f9 	.word	0x0800a3f9
 800a36c:	0800a3f9 	.word	0x0800a3f9
 800a370:	0800a3f9 	.word	0x0800a3f9
 800a374:	0800a3f9 	.word	0x0800a3f9
 800a378:	0800a3eb 	.word	0x0800a3eb
 800a37c:	2b40      	cmp	r3, #64	; 0x40
 800a37e:	d037      	beq.n	800a3f0 <UART_SetConfig+0xa28>
 800a380:	e03a      	b.n	800a3f8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a382:	f7fc f873 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 800a386:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a388:	e03c      	b.n	800a404 <UART_SetConfig+0xa3c>
 800a38a:	bf00      	nop
 800a38c:	003d0900 	.word	0x003d0900
 800a390:	0800c48c 	.word	0x0800c48c
 800a394:	58024400 	.word	0x58024400
 800a398:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a39c:	f7fc f87c 	bl	8006498 <HAL_RCC_GetPCLK2Freq>
 800a3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3a2:	e02f      	b.n	800a404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a4:	f107 0314 	add.w	r3, r7, #20
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fc ffe1 	bl	8007370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3b2:	e027      	b.n	800a404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fd f92d 	bl	8007618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3c2:	e01f      	b.n	800a404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c4:	4b2c      	ldr	r3, [pc, #176]	; (800a478 <UART_SetConfig+0xab0>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3d0:	4b29      	ldr	r3, [pc, #164]	; (800a478 <UART_SetConfig+0xab0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	08db      	lsrs	r3, r3, #3
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	4a28      	ldr	r2, [pc, #160]	; (800a47c <UART_SetConfig+0xab4>)
 800a3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3e2:	e00f      	b.n	800a404 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a3e4:	4b25      	ldr	r3, [pc, #148]	; (800a47c <UART_SetConfig+0xab4>)
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3e8:	e00c      	b.n	800a404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3ea:	4b25      	ldr	r3, [pc, #148]	; (800a480 <UART_SetConfig+0xab8>)
 800a3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3ee:	e009      	b.n	800a404 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3f6:	e005      	b.n	800a404 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a402:	bf00      	nop
    }

    if (pclk != 0U)
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d021      	beq.n	800a44e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <UART_SetConfig+0xabc>)
 800a410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a414:	461a      	mov	r2, r3
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	fbb3 f2f2 	udiv	r2, r3, r2
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	085b      	lsrs	r3, r3, #1
 800a422:	441a      	add	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	2b0f      	cmp	r3, #15
 800a434:	d908      	bls.n	800a448 <UART_SetConfig+0xa80>
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43c:	d204      	bcs.n	800a448 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a444:	60da      	str	r2, [r3, #12]
 800a446:	e002      	b.n	800a44e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a46a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3738      	adds	r7, #56	; 0x38
 800a472:	46bd      	mov	sp, r7
 800a474:	bdb0      	pop	{r4, r5, r7, pc}
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400
 800a47c:	03d09000 	.word	0x03d09000
 800a480:	003d0900 	.word	0x003d0900
 800a484:	0800c48c 	.word	0x0800c48c

0800a488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00a      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	f003 0308 	and.w	r3, r3, #8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	f003 0310 	and.w	r3, r3, #16
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01a      	beq.n	800a59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a586:	d10a      	bne.n	800a59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5dc:	f7f7 fe32 	bl	8002244 <HAL_GetTick>
 800a5e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d10e      	bne.n	800a60e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f82f 	bl	800a662 <UART_WaitOnFlagUntilTimeout>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e025      	b.n	800a65a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d10e      	bne.n	800a63a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a61c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f819 	bl	800a662 <UART_WaitOnFlagUntilTimeout>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e00f      	b.n	800a65a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	603b      	str	r3, [r7, #0]
 800a66e:	4613      	mov	r3, r2
 800a670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a672:	e062      	b.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67a:	d05e      	beq.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a67c:	f7f7 fde2 	bl	8002244 <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d302      	bcc.n	800a692 <UART_WaitOnFlagUntilTimeout+0x30>
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d11d      	bne.n	800a6ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f022 0201 	bic.w	r2, r2, #1
 800a6b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e045      	b.n	800a75a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d02e      	beq.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ea:	d126      	bne.n	800a73a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a704:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0201 	bic.w	r2, r2, #1
 800a714:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2220      	movs	r2, #32
 800a722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	e00f      	b.n	800a75a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69da      	ldr	r2, [r3, #28]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4013      	ands	r3, r2
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	429a      	cmp	r2, r3
 800a748:	bf0c      	ite	eq
 800a74a:	2301      	moveq	r3, #1
 800a74c:	2300      	movne	r3, #0
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	461a      	mov	r2, r3
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	429a      	cmp	r2, r3
 800a756:	d08d      	beq.n	800a674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	4613      	mov	r3, r2
 800a770:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	88fa      	ldrh	r2, [r7, #6]
 800a77c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	88fa      	ldrh	r2, [r7, #6]
 800a784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a796:	d10e      	bne.n	800a7b6 <UART_Start_Receive_IT+0x52>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d105      	bne.n	800a7ac <UART_Start_Receive_IT+0x48>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a7a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7aa:	e02d      	b.n	800a808 <UART_Start_Receive_IT+0xa4>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	22ff      	movs	r2, #255	; 0xff
 800a7b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7b4:	e028      	b.n	800a808 <UART_Start_Receive_IT+0xa4>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10d      	bne.n	800a7da <UART_Start_Receive_IT+0x76>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d104      	bne.n	800a7d0 <UART_Start_Receive_IT+0x6c>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	22ff      	movs	r2, #255	; 0xff
 800a7ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7ce:	e01b      	b.n	800a808 <UART_Start_Receive_IT+0xa4>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	227f      	movs	r2, #127	; 0x7f
 800a7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7d8:	e016      	b.n	800a808 <UART_Start_Receive_IT+0xa4>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7e2:	d10d      	bne.n	800a800 <UART_Start_Receive_IT+0x9c>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <UART_Start_Receive_IT+0x92>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	227f      	movs	r2, #127	; 0x7f
 800a7f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7f4:	e008      	b.n	800a808 <UART_Start_Receive_IT+0xa4>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	223f      	movs	r2, #63	; 0x3f
 800a7fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7fe:	e003      	b.n	800a808 <UART_Start_Receive_IT+0xa4>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2222      	movs	r2, #34	; 0x22
 800a814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689a      	ldr	r2, [r3, #8]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f042 0201 	orr.w	r2, r2, #1
 800a826:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a82c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a830:	d12a      	bne.n	800a888 <UART_Start_Receive_IT+0x124>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a838:	88fa      	ldrh	r2, [r7, #6]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d324      	bcc.n	800a888 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a846:	d107      	bne.n	800a858 <UART_Start_Receive_IT+0xf4>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d103      	bne.n	800a858 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4a1f      	ldr	r2, [pc, #124]	; (800a8d0 <UART_Start_Receive_IT+0x16c>)
 800a854:	671a      	str	r2, [r3, #112]	; 0x70
 800a856:	e002      	b.n	800a85e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4a1e      	ldr	r2, [pc, #120]	; (800a8d4 <UART_Start_Receive_IT+0x170>)
 800a85c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a874:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a884:	609a      	str	r2, [r3, #8]
 800a886:	e01b      	b.n	800a8c0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a890:	d107      	bne.n	800a8a2 <UART_Start_Receive_IT+0x13e>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d103      	bne.n	800a8a2 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	4a0e      	ldr	r2, [pc, #56]	; (800a8d8 <UART_Start_Receive_IT+0x174>)
 800a89e:	671a      	str	r2, [r3, #112]	; 0x70
 800a8a0:	e002      	b.n	800a8a8 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4a0d      	ldr	r2, [pc, #52]	; (800a8dc <UART_Start_Receive_IT+0x178>)
 800a8a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a8be:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	0800b02d 	.word	0x0800b02d
 800a8d4:	0800ae29 	.word	0x0800ae29
 800a8d8:	0800ad4f 	.word	0x0800ad4f
 800a8dc:	0800ac77 	.word	0x0800ac77

0800a8e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	88fa      	ldrh	r2, [r7, #6]
 800a8f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2222      	movs	r2, #34	; 0x22
 800a908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a910:	2b00      	cmp	r3, #0
 800a912:	d02c      	beq.n	800a96e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a918:	4a25      	ldr	r2, [pc, #148]	; (800a9b0 <UART_Start_Receive_DMA+0xd0>)
 800a91a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a920:	4a24      	ldr	r2, [pc, #144]	; (800a9b4 <UART_Start_Receive_DMA+0xd4>)
 800a922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a928:	4a23      	ldr	r2, [pc, #140]	; (800a9b8 <UART_Start_Receive_DMA+0xd8>)
 800a92a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a930:	2200      	movs	r2, #0
 800a932:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3324      	adds	r3, #36	; 0x24
 800a93e:	4619      	mov	r1, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a944:	461a      	mov	r2, r3
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	f7f8 f924 	bl	8002b94 <HAL_DMA_Start_IT>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00d      	beq.n	800a96e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2210      	movs	r2, #16
 800a956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2220      	movs	r2, #32
 800a966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e01c      	b.n	800a9a8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a984:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f042 0201 	orr.w	r2, r2, #1
 800a994:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9a4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	0800aac9 	.word	0x0800aac9
 800a9b4:	0800ab5f 	.word	0x0800ab5f
 800a9b8:	0800ab97 	.word	0x0800ab97

0800a9bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a9d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a9e2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6899      	ldr	r1, [r3, #8]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <UART_EndRxTransfer+0x60>)
 800aa1c:	400b      	ands	r3, r1
 800aa1e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d107      	bne.n	800aa38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0210 	bic.w	r2, r2, #16
 800aa36:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	effffffe 	.word	0xeffffffe

0800aa5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa72:	d014      	beq.n	800aa9e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa8a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa9a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa9c:	e002      	b.n	800aaa4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7f6 fdb0 	bl	8001604 <HAL_UART_TxCpltCallback>
}
 800aaa4:	bf00      	nop
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f7fe ff5a 	bl	8009974 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aac0:	bf00      	nop
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aade:	d02b      	beq.n	800ab38 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aaf6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f022 0201 	bic.w	r2, r2, #1
 800ab06:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689a      	ldr	r2, [r3, #8]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab16:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d107      	bne.n	800ab38 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f022 0210 	bic.w	r2, r2, #16
 800ab36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d107      	bne.n	800ab50 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab46:	4619      	mov	r1, r3
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7fe ff31 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab4e:	e002      	b.n	800ab56 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7f6 fd41 	bl	80015d8 <HAL_UART_RxCpltCallback>
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d109      	bne.n	800ab88 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab7a:	085b      	lsrs	r3, r3, #1
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7fe ff15 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab86:	e002      	b.n	800ab8e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7fe fefd 	bl	8009988 <HAL_UART_RxHalfCpltCallback>
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b086      	sub	sp, #24
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abaa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abbe:	2b80      	cmp	r3, #128	; 0x80
 800abc0:	d109      	bne.n	800abd6 <UART_DMAError+0x40>
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b21      	cmp	r3, #33	; 0x21
 800abc6:	d106      	bne.n	800abd6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800abd0:	6978      	ldr	r0, [r7, #20]
 800abd2:	f7ff fef3 	bl	800a9bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe0:	2b40      	cmp	r3, #64	; 0x40
 800abe2:	d109      	bne.n	800abf8 <UART_DMAError+0x62>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b22      	cmp	r3, #34	; 0x22
 800abe8:	d106      	bne.n	800abf8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800abf2:	6978      	ldr	r0, [r7, #20]
 800abf4:	f7ff ff00 	bl	800a9f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abfe:	f043 0210 	orr.w	r2, r3, #16
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac08:	6978      	ldr	r0, [r7, #20]
 800ac0a:	f7fe fec7 	bl	800999c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac0e:	bf00      	nop
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7fe feb1 	bl	800999c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac3a:	bf00      	nop
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac58:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7f6 fccb 	bl	8001604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac84:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8c:	2b22      	cmp	r3, #34	; 0x22
 800ac8e:	d152      	bne.n	800ad36 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac98:	89bb      	ldrh	r3, [r7, #12]
 800ac9a:	b2d9      	uxtb	r1, r3
 800ac9c:	89fb      	ldrh	r3, [r7, #14]
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca4:	400a      	ands	r2, r1
 800aca6:	b2d2      	uxtb	r2, r2
 800aca8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acba:	b29b      	uxth	r3, r3
 800acbc:	3b01      	subs	r3, #1
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800accc:	b29b      	uxth	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d139      	bne.n	800ad46 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ace0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0201 	bic.w	r2, r2, #1
 800acf0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d10f      	bne.n	800ad28 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0210 	bic.w	r2, r2, #16
 800ad16:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7fe fe45 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
 800ad26:	e002      	b.n	800ad2e <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7f6 fc55 	bl	80015d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad34:	e007      	b.n	800ad46 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	699a      	ldr	r2, [r3, #24]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f042 0208 	orr.w	r2, r2, #8
 800ad44:	619a      	str	r2, [r3, #24]
}
 800ad46:	bf00      	nop
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b084      	sub	sp, #16
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad5c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad64:	2b22      	cmp	r3, #34	; 0x22
 800ad66:	d152      	bne.n	800ae0e <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad74:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ad76:	89ba      	ldrh	r2, [r7, #12]
 800ad78:	89fb      	ldrh	r3, [r7, #14]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad86:	1c9a      	adds	r2, r3, #2
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d139      	bne.n	800ae1e <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800adb8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 0201 	bic.w	r2, r2, #1
 800adc8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2220      	movs	r2, #32
 800adce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10f      	bne.n	800ae00 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0210 	bic.w	r2, r2, #16
 800adee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7fe fdd9 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
 800adfe:	e002      	b.n	800ae06 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7f6 fbe9 	bl	80015d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae0c:	e007      	b.n	800ae1e <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	699a      	ldr	r2, [r3, #24]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0208 	orr.w	r2, r2, #8
 800ae1c:	619a      	str	r2, [r3, #24]
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae36:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	69db      	ldr	r3, [r3, #28]
 800ae3e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae56:	2b22      	cmp	r3, #34	; 0x22
 800ae58:	f040 80d8 	bne.w	800b00c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ae62:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ae64:	e0a8      	b.n	800afb8 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ae6e:	89bb      	ldrh	r3, [r7, #12]
 800ae70:	b2d9      	uxtb	r1, r3
 800ae72:	8b7b      	ldrh	r3, [r7, #26]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae7a:	400a      	ands	r2, r1
 800ae7c:	b2d2      	uxtb	r2, r2
 800ae7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	3b01      	subs	r3, #1
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d04d      	beq.n	800af4a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d010      	beq.n	800aeda <UART_RxISR_8BIT_FIFOEN+0xb2>
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00b      	beq.n	800aeda <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2201      	movs	r2, #1
 800aec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed0:	f043 0201 	orr.w	r2, r3, #1
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d010      	beq.n	800af06 <UART_RxISR_8BIT_FIFOEN+0xde>
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00b      	beq.n	800af06 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2202      	movs	r2, #2
 800aef4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aefc:	f043 0204 	orr.w	r2, r3, #4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f003 0304 	and.w	r3, r3, #4
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d010      	beq.n	800af32 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2204      	movs	r2, #4
 800af20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af28:	f043 0202 	orr.w	r2, r3, #2
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d006      	beq.n	800af4a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7fe fd2d 	bl	800999c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af50:	b29b      	uxth	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d130      	bne.n	800afb8 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af64:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6899      	ldr	r1, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	4b2c      	ldr	r3, [pc, #176]	; (800b024 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800af72:	400b      	ands	r3, r1
 800af74:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d10f      	bne.n	800afac <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 0210 	bic.w	r2, r2, #16
 800af9a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7fe fd03 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
 800afaa:	e002      	b.n	800afb2 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7f6 fb13 	bl	80015d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	f003 0320 	and.w	r3, r3, #32
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f47f af4e 	bne.w	800ae66 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afd0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afd2:	897b      	ldrh	r3, [r7, #10]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d021      	beq.n	800b01c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800afde:	897a      	ldrh	r2, [r7, #10]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d21b      	bcs.n	800b01c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689a      	ldr	r2, [r3, #8]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aff2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a0c      	ldr	r2, [pc, #48]	; (800b028 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800aff8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f042 0220 	orr.w	r2, r2, #32
 800b008:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b00a:	e007      	b.n	800b01c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0208 	orr.w	r2, r2, #8
 800b01a:	619a      	str	r2, [r3, #24]
}
 800b01c:	bf00      	nop
 800b01e:	3720      	adds	r7, #32
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	effffffe 	.word	0xeffffffe
 800b028:	0800ac77 	.word	0x0800ac77

0800b02c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08a      	sub	sp, #40	; 0x28
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b03a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b05a:	2b22      	cmp	r3, #34	; 0x22
 800b05c:	f040 80d8 	bne.w	800b210 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b066:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b068:	e0a8      	b.n	800b1bc <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b076:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800b078:	8aba      	ldrh	r2, [r7, #20]
 800b07a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b07c:	4013      	ands	r3, r2
 800b07e:	b29a      	uxth	r2, r3
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b088:	1c9a      	adds	r2, r3, #2
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b094:	b29b      	uxth	r3, r3
 800b096:	3b01      	subs	r3, #1
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d04d      	beq.n	800b14e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d010      	beq.n	800b0de <UART_RxISR_16BIT_FIFOEN+0xb2>
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00b      	beq.n	800b0de <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d4:	f043 0201 	orr.w	r2, r3, #1
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d010      	beq.n	800b10a <UART_RxISR_16BIT_FIFOEN+0xde>
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b100:	f043 0204 	orr.w	r2, r3, #4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d010      	beq.n	800b136 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	f003 0301 	and.w	r3, r3, #1
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2204      	movs	r2, #4
 800b124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b12c:	f043 0202 	orr.w	r2, r3, #2
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fe fc2b 	bl	800999c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b154:	b29b      	uxth	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d130      	bne.n	800b1bc <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b168:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6899      	ldr	r1, [r3, #8]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	4b2c      	ldr	r3, [pc, #176]	; (800b228 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800b176:	400b      	ands	r3, r1
 800b178:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d10f      	bne.n	800b1b0 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f022 0210 	bic.w	r2, r2, #16
 800b19e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7fe fc01 	bl	80099b0 <HAL_UARTEx_RxEventCallback>
 800b1ae:	e002      	b.n	800b1b6 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7f6 fa11 	bl	80015d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b1bc:	8afb      	ldrh	r3, [r7, #22]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d005      	beq.n	800b1ce <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	f003 0320 	and.w	r3, r3, #32
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f47f af4e 	bne.w	800b06a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1d4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b1d6:	89fb      	ldrh	r3, [r7, #14]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d021      	beq.n	800b220 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b1e2:	89fa      	ldrh	r2, [r7, #14]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d21b      	bcs.n	800b220 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689a      	ldr	r2, [r3, #8]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b1f6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a0c      	ldr	r2, [pc, #48]	; (800b22c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800b1fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f042 0220 	orr.w	r2, r2, #32
 800b20c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b20e:	e007      	b.n	800b220 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	699a      	ldr	r2, [r3, #24]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0208 	orr.w	r2, r2, #8
 800b21e:	619a      	str	r2, [r3, #24]
}
 800b220:	bf00      	nop
 800b222:	3728      	adds	r7, #40	; 0x28
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	effffffe 	.word	0xeffffffe
 800b22c:	0800ad4f 	.word	0x0800ad4f

0800b230 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d101      	bne.n	800b248 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e056      	b.n	800b2f6 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d106      	bne.n	800b260 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7f6 fbec 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2224      	movs	r2, #36	; 0x24
 800b264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f022 0201 	bic.w	r2, r2, #1
 800b276:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7fe fba5 	bl	80099c8 <UART_SetConfig>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e036      	b.n	800b2f6 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff f8f9 	bl	800a488 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2a4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	055b      	lsls	r3, r3, #21
 800b2be:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	041b      	lsls	r3, r3, #16
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	4b0b      	ldr	r3, [pc, #44]	; (800b300 <HAL_RS485Ex_Init+0xd0>)
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	6979      	ldr	r1, [r7, #20]
 800b2da:	430b      	orrs	r3, r1
 800b2dc:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f042 0201 	orr.w	r2, r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f7ff f96c 	bl	800a5cc <UART_CheckIdleState>
 800b2f4:	4603      	mov	r3, r0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	fc00ffff 	.word	0xfc00ffff

0800b304 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d101      	bne.n	800b356 <HAL_UARTEx_DisableFifoMode+0x16>
 800b352:	2302      	movs	r3, #2
 800b354:	e027      	b.n	800b3a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2224      	movs	r2, #36	; 0x24
 800b362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 0201 	bic.w	r2, r2, #1
 800b37c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b384:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2220      	movs	r2, #32
 800b398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d101      	bne.n	800b3ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	e02d      	b.n	800b426 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2224      	movs	r2, #36	; 0x24
 800b3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0201 	bic.w	r2, r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f850 	bl	800b4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2220      	movs	r2, #32
 800b418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d101      	bne.n	800b446 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b442:	2302      	movs	r3, #2
 800b444:	e02d      	b.n	800b4a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2224      	movs	r2, #36	; 0x24
 800b452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f022 0201 	bic.w	r2, r2, #1
 800b46c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f812 	bl	800b4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2220      	movs	r2, #32
 800b494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d108      	bne.n	800b4ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4cc:	e031      	b.n	800b532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4d2:	2310      	movs	r3, #16
 800b4d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	0e5b      	lsrs	r3, r3, #25
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	0f5b      	lsrs	r3, r3, #29
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	7b3a      	ldrb	r2, [r7, #12]
 800b4fa:	4911      	ldr	r1, [pc, #68]	; (800b540 <UARTEx_SetNbDataToProcess+0x94>)
 800b4fc:	5c8a      	ldrb	r2, [r1, r2]
 800b4fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b502:	7b3a      	ldrb	r2, [r7, #12]
 800b504:	490f      	ldr	r1, [pc, #60]	; (800b544 <UARTEx_SetNbDataToProcess+0x98>)
 800b506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b508:	fb93 f3f2 	sdiv	r3, r3, r2
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	7b7a      	ldrb	r2, [r7, #13]
 800b518:	4909      	ldr	r1, [pc, #36]	; (800b540 <UARTEx_SetNbDataToProcess+0x94>)
 800b51a:	5c8a      	ldrb	r2, [r1, r2]
 800b51c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b520:	7b7a      	ldrb	r2, [r7, #13]
 800b522:	4908      	ldr	r1, [pc, #32]	; (800b544 <UARTEx_SetNbDataToProcess+0x98>)
 800b524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b526:	fb93 f3f2 	sdiv	r3, r3, r2
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	0800c4a4 	.word	0x0800c4a4
 800b544:	0800c4ac 	.word	0x0800c4ac

0800b548 <__errno>:
 800b548:	4b01      	ldr	r3, [pc, #4]	; (800b550 <__errno+0x8>)
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	20000010 	.word	0x20000010

0800b554 <__libc_init_array>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4d0d      	ldr	r5, [pc, #52]	; (800b58c <__libc_init_array+0x38>)
 800b558:	4c0d      	ldr	r4, [pc, #52]	; (800b590 <__libc_init_array+0x3c>)
 800b55a:	1b64      	subs	r4, r4, r5
 800b55c:	10a4      	asrs	r4, r4, #2
 800b55e:	2600      	movs	r6, #0
 800b560:	42a6      	cmp	r6, r4
 800b562:	d109      	bne.n	800b578 <__libc_init_array+0x24>
 800b564:	4d0b      	ldr	r5, [pc, #44]	; (800b594 <__libc_init_array+0x40>)
 800b566:	4c0c      	ldr	r4, [pc, #48]	; (800b598 <__libc_init_array+0x44>)
 800b568:	f000 ff76 	bl	800c458 <_init>
 800b56c:	1b64      	subs	r4, r4, r5
 800b56e:	10a4      	asrs	r4, r4, #2
 800b570:	2600      	movs	r6, #0
 800b572:	42a6      	cmp	r6, r4
 800b574:	d105      	bne.n	800b582 <__libc_init_array+0x2e>
 800b576:	bd70      	pop	{r4, r5, r6, pc}
 800b578:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57c:	4798      	blx	r3
 800b57e:	3601      	adds	r6, #1
 800b580:	e7ee      	b.n	800b560 <__libc_init_array+0xc>
 800b582:	f855 3b04 	ldr.w	r3, [r5], #4
 800b586:	4798      	blx	r3
 800b588:	3601      	adds	r6, #1
 800b58a:	e7f2      	b.n	800b572 <__libc_init_array+0x1e>
 800b58c:	0800c554 	.word	0x0800c554
 800b590:	0800c554 	.word	0x0800c554
 800b594:	0800c554 	.word	0x0800c554
 800b598:	0800c558 	.word	0x0800c558

0800b59c <memset>:
 800b59c:	4402      	add	r2, r0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d100      	bne.n	800b5a6 <memset+0xa>
 800b5a4:	4770      	bx	lr
 800b5a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5aa:	e7f9      	b.n	800b5a0 <memset+0x4>

0800b5ac <iprintf>:
 800b5ac:	b40f      	push	{r0, r1, r2, r3}
 800b5ae:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <iprintf+0x2c>)
 800b5b0:	b513      	push	{r0, r1, r4, lr}
 800b5b2:	681c      	ldr	r4, [r3, #0]
 800b5b4:	b124      	cbz	r4, 800b5c0 <iprintf+0x14>
 800b5b6:	69a3      	ldr	r3, [r4, #24]
 800b5b8:	b913      	cbnz	r3, 800b5c0 <iprintf+0x14>
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 f866 	bl	800b68c <__sinit>
 800b5c0:	ab05      	add	r3, sp, #20
 800b5c2:	9a04      	ldr	r2, [sp, #16]
 800b5c4:	68a1      	ldr	r1, [r4, #8]
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 f983 	bl	800b8d4 <_vfiprintf_r>
 800b5ce:	b002      	add	sp, #8
 800b5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d4:	b004      	add	sp, #16
 800b5d6:	4770      	bx	lr
 800b5d8:	20000010 	.word	0x20000010

0800b5dc <std>:
 800b5dc:	2300      	movs	r3, #0
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ea:	6083      	str	r3, [r0, #8]
 800b5ec:	8181      	strh	r1, [r0, #12]
 800b5ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b5f0:	81c2      	strh	r2, [r0, #14]
 800b5f2:	6183      	str	r3, [r0, #24]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	2208      	movs	r2, #8
 800b5f8:	305c      	adds	r0, #92	; 0x5c
 800b5fa:	f7ff ffcf 	bl	800b59c <memset>
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <std+0x38>)
 800b600:	6263      	str	r3, [r4, #36]	; 0x24
 800b602:	4b05      	ldr	r3, [pc, #20]	; (800b618 <std+0x3c>)
 800b604:	62a3      	str	r3, [r4, #40]	; 0x28
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <std+0x40>)
 800b608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <std+0x44>)
 800b60c:	6224      	str	r4, [r4, #32]
 800b60e:	6323      	str	r3, [r4, #48]	; 0x30
 800b610:	bd10      	pop	{r4, pc}
 800b612:	bf00      	nop
 800b614:	0800be7d 	.word	0x0800be7d
 800b618:	0800be9f 	.word	0x0800be9f
 800b61c:	0800bed7 	.word	0x0800bed7
 800b620:	0800befb 	.word	0x0800befb

0800b624 <_cleanup_r>:
 800b624:	4901      	ldr	r1, [pc, #4]	; (800b62c <_cleanup_r+0x8>)
 800b626:	f000 b8af 	b.w	800b788 <_fwalk_reent>
 800b62a:	bf00      	nop
 800b62c:	0800c1d5 	.word	0x0800c1d5

0800b630 <__sfmoreglue>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	1e4a      	subs	r2, r1, #1
 800b634:	2568      	movs	r5, #104	; 0x68
 800b636:	4355      	muls	r5, r2
 800b638:	460e      	mov	r6, r1
 800b63a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b63e:	f000 f8c5 	bl	800b7cc <_malloc_r>
 800b642:	4604      	mov	r4, r0
 800b644:	b140      	cbz	r0, 800b658 <__sfmoreglue+0x28>
 800b646:	2100      	movs	r1, #0
 800b648:	e9c0 1600 	strd	r1, r6, [r0]
 800b64c:	300c      	adds	r0, #12
 800b64e:	60a0      	str	r0, [r4, #8]
 800b650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b654:	f7ff ffa2 	bl	800b59c <memset>
 800b658:	4620      	mov	r0, r4
 800b65a:	bd70      	pop	{r4, r5, r6, pc}

0800b65c <__sfp_lock_acquire>:
 800b65c:	4801      	ldr	r0, [pc, #4]	; (800b664 <__sfp_lock_acquire+0x8>)
 800b65e:	f000 b8b3 	b.w	800b7c8 <__retarget_lock_acquire_recursive>
 800b662:	bf00      	nop
 800b664:	20000864 	.word	0x20000864

0800b668 <__sfp_lock_release>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__sfp_lock_release+0x8>)
 800b66a:	f000 b8ae 	b.w	800b7ca <__retarget_lock_release_recursive>
 800b66e:	bf00      	nop
 800b670:	20000864 	.word	0x20000864

0800b674 <__sinit_lock_acquire>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__sinit_lock_acquire+0x8>)
 800b676:	f000 b8a7 	b.w	800b7c8 <__retarget_lock_acquire_recursive>
 800b67a:	bf00      	nop
 800b67c:	2000085f 	.word	0x2000085f

0800b680 <__sinit_lock_release>:
 800b680:	4801      	ldr	r0, [pc, #4]	; (800b688 <__sinit_lock_release+0x8>)
 800b682:	f000 b8a2 	b.w	800b7ca <__retarget_lock_release_recursive>
 800b686:	bf00      	nop
 800b688:	2000085f 	.word	0x2000085f

0800b68c <__sinit>:
 800b68c:	b510      	push	{r4, lr}
 800b68e:	4604      	mov	r4, r0
 800b690:	f7ff fff0 	bl	800b674 <__sinit_lock_acquire>
 800b694:	69a3      	ldr	r3, [r4, #24]
 800b696:	b11b      	cbz	r3, 800b6a0 <__sinit+0x14>
 800b698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b69c:	f7ff bff0 	b.w	800b680 <__sinit_lock_release>
 800b6a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b6a6:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <__sinit+0x68>)
 800b6a8:	4a13      	ldr	r2, [pc, #76]	; (800b6f8 <__sinit+0x6c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	bf04      	itt	eq
 800b6b2:	2301      	moveq	r3, #1
 800b6b4:	61a3      	streq	r3, [r4, #24]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f000 f820 	bl	800b6fc <__sfp>
 800b6bc:	6060      	str	r0, [r4, #4]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 f81c 	bl	800b6fc <__sfp>
 800b6c4:	60a0      	str	r0, [r4, #8]
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 f818 	bl	800b6fc <__sfp>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	60e0      	str	r0, [r4, #12]
 800b6d0:	2104      	movs	r1, #4
 800b6d2:	6860      	ldr	r0, [r4, #4]
 800b6d4:	f7ff ff82 	bl	800b5dc <std>
 800b6d8:	68a0      	ldr	r0, [r4, #8]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	2109      	movs	r1, #9
 800b6de:	f7ff ff7d 	bl	800b5dc <std>
 800b6e2:	68e0      	ldr	r0, [r4, #12]
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	2112      	movs	r1, #18
 800b6e8:	f7ff ff78 	bl	800b5dc <std>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	61a3      	str	r3, [r4, #24]
 800b6f0:	e7d2      	b.n	800b698 <__sinit+0xc>
 800b6f2:	bf00      	nop
 800b6f4:	0800c4b4 	.word	0x0800c4b4
 800b6f8:	0800b625 	.word	0x0800b625

0800b6fc <__sfp>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	4607      	mov	r7, r0
 800b700:	f7ff ffac 	bl	800b65c <__sfp_lock_acquire>
 800b704:	4b1e      	ldr	r3, [pc, #120]	; (800b780 <__sfp+0x84>)
 800b706:	681e      	ldr	r6, [r3, #0]
 800b708:	69b3      	ldr	r3, [r6, #24]
 800b70a:	b913      	cbnz	r3, 800b712 <__sfp+0x16>
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff ffbd 	bl	800b68c <__sinit>
 800b712:	3648      	adds	r6, #72	; 0x48
 800b714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b718:	3b01      	subs	r3, #1
 800b71a:	d503      	bpl.n	800b724 <__sfp+0x28>
 800b71c:	6833      	ldr	r3, [r6, #0]
 800b71e:	b30b      	cbz	r3, 800b764 <__sfp+0x68>
 800b720:	6836      	ldr	r6, [r6, #0]
 800b722:	e7f7      	b.n	800b714 <__sfp+0x18>
 800b724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b728:	b9d5      	cbnz	r5, 800b760 <__sfp+0x64>
 800b72a:	4b16      	ldr	r3, [pc, #88]	; (800b784 <__sfp+0x88>)
 800b72c:	60e3      	str	r3, [r4, #12]
 800b72e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b732:	6665      	str	r5, [r4, #100]	; 0x64
 800b734:	f000 f847 	bl	800b7c6 <__retarget_lock_init_recursive>
 800b738:	f7ff ff96 	bl	800b668 <__sfp_lock_release>
 800b73c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b744:	6025      	str	r5, [r4, #0]
 800b746:	61a5      	str	r5, [r4, #24]
 800b748:	2208      	movs	r2, #8
 800b74a:	4629      	mov	r1, r5
 800b74c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b750:	f7ff ff24 	bl	800b59c <memset>
 800b754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b75c:	4620      	mov	r0, r4
 800b75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b760:	3468      	adds	r4, #104	; 0x68
 800b762:	e7d9      	b.n	800b718 <__sfp+0x1c>
 800b764:	2104      	movs	r1, #4
 800b766:	4638      	mov	r0, r7
 800b768:	f7ff ff62 	bl	800b630 <__sfmoreglue>
 800b76c:	4604      	mov	r4, r0
 800b76e:	6030      	str	r0, [r6, #0]
 800b770:	2800      	cmp	r0, #0
 800b772:	d1d5      	bne.n	800b720 <__sfp+0x24>
 800b774:	f7ff ff78 	bl	800b668 <__sfp_lock_release>
 800b778:	230c      	movs	r3, #12
 800b77a:	603b      	str	r3, [r7, #0]
 800b77c:	e7ee      	b.n	800b75c <__sfp+0x60>
 800b77e:	bf00      	nop
 800b780:	0800c4b4 	.word	0x0800c4b4
 800b784:	ffff0001 	.word	0xffff0001

0800b788 <_fwalk_reent>:
 800b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	4606      	mov	r6, r0
 800b78e:	4688      	mov	r8, r1
 800b790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b794:	2700      	movs	r7, #0
 800b796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b79a:	f1b9 0901 	subs.w	r9, r9, #1
 800b79e:	d505      	bpl.n	800b7ac <_fwalk_reent+0x24>
 800b7a0:	6824      	ldr	r4, [r4, #0]
 800b7a2:	2c00      	cmp	r4, #0
 800b7a4:	d1f7      	bne.n	800b796 <_fwalk_reent+0xe>
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ac:	89ab      	ldrh	r3, [r5, #12]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d907      	bls.n	800b7c2 <_fwalk_reent+0x3a>
 800b7b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	d003      	beq.n	800b7c2 <_fwalk_reent+0x3a>
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	4630      	mov	r0, r6
 800b7be:	47c0      	blx	r8
 800b7c0:	4307      	orrs	r7, r0
 800b7c2:	3568      	adds	r5, #104	; 0x68
 800b7c4:	e7e9      	b.n	800b79a <_fwalk_reent+0x12>

0800b7c6 <__retarget_lock_init_recursive>:
 800b7c6:	4770      	bx	lr

0800b7c8 <__retarget_lock_acquire_recursive>:
 800b7c8:	4770      	bx	lr

0800b7ca <__retarget_lock_release_recursive>:
 800b7ca:	4770      	bx	lr

0800b7cc <_malloc_r>:
 800b7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ce:	1ccd      	adds	r5, r1, #3
 800b7d0:	f025 0503 	bic.w	r5, r5, #3
 800b7d4:	3508      	adds	r5, #8
 800b7d6:	2d0c      	cmp	r5, #12
 800b7d8:	bf38      	it	cc
 800b7da:	250c      	movcc	r5, #12
 800b7dc:	2d00      	cmp	r5, #0
 800b7de:	4606      	mov	r6, r0
 800b7e0:	db01      	blt.n	800b7e6 <_malloc_r+0x1a>
 800b7e2:	42a9      	cmp	r1, r5
 800b7e4:	d903      	bls.n	800b7ee <_malloc_r+0x22>
 800b7e6:	230c      	movs	r3, #12
 800b7e8:	6033      	str	r3, [r6, #0]
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ee:	f000 fda3 	bl	800c338 <__malloc_lock>
 800b7f2:	4921      	ldr	r1, [pc, #132]	; (800b878 <_malloc_r+0xac>)
 800b7f4:	680a      	ldr	r2, [r1, #0]
 800b7f6:	4614      	mov	r4, r2
 800b7f8:	b99c      	cbnz	r4, 800b822 <_malloc_r+0x56>
 800b7fa:	4f20      	ldr	r7, [pc, #128]	; (800b87c <_malloc_r+0xb0>)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	b923      	cbnz	r3, 800b80a <_malloc_r+0x3e>
 800b800:	4621      	mov	r1, r4
 800b802:	4630      	mov	r0, r6
 800b804:	f000 fb2a 	bl	800be5c <_sbrk_r>
 800b808:	6038      	str	r0, [r7, #0]
 800b80a:	4629      	mov	r1, r5
 800b80c:	4630      	mov	r0, r6
 800b80e:	f000 fb25 	bl	800be5c <_sbrk_r>
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	d123      	bne.n	800b85e <_malloc_r+0x92>
 800b816:	230c      	movs	r3, #12
 800b818:	6033      	str	r3, [r6, #0]
 800b81a:	4630      	mov	r0, r6
 800b81c:	f000 fd92 	bl	800c344 <__malloc_unlock>
 800b820:	e7e3      	b.n	800b7ea <_malloc_r+0x1e>
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	1b5b      	subs	r3, r3, r5
 800b826:	d417      	bmi.n	800b858 <_malloc_r+0x8c>
 800b828:	2b0b      	cmp	r3, #11
 800b82a:	d903      	bls.n	800b834 <_malloc_r+0x68>
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	441c      	add	r4, r3
 800b830:	6025      	str	r5, [r4, #0]
 800b832:	e004      	b.n	800b83e <_malloc_r+0x72>
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	42a2      	cmp	r2, r4
 800b838:	bf0c      	ite	eq
 800b83a:	600b      	streq	r3, [r1, #0]
 800b83c:	6053      	strne	r3, [r2, #4]
 800b83e:	4630      	mov	r0, r6
 800b840:	f000 fd80 	bl	800c344 <__malloc_unlock>
 800b844:	f104 000b 	add.w	r0, r4, #11
 800b848:	1d23      	adds	r3, r4, #4
 800b84a:	f020 0007 	bic.w	r0, r0, #7
 800b84e:	1ac2      	subs	r2, r0, r3
 800b850:	d0cc      	beq.n	800b7ec <_malloc_r+0x20>
 800b852:	1a1b      	subs	r3, r3, r0
 800b854:	50a3      	str	r3, [r4, r2]
 800b856:	e7c9      	b.n	800b7ec <_malloc_r+0x20>
 800b858:	4622      	mov	r2, r4
 800b85a:	6864      	ldr	r4, [r4, #4]
 800b85c:	e7cc      	b.n	800b7f8 <_malloc_r+0x2c>
 800b85e:	1cc4      	adds	r4, r0, #3
 800b860:	f024 0403 	bic.w	r4, r4, #3
 800b864:	42a0      	cmp	r0, r4
 800b866:	d0e3      	beq.n	800b830 <_malloc_r+0x64>
 800b868:	1a21      	subs	r1, r4, r0
 800b86a:	4630      	mov	r0, r6
 800b86c:	f000 faf6 	bl	800be5c <_sbrk_r>
 800b870:	3001      	adds	r0, #1
 800b872:	d1dd      	bne.n	800b830 <_malloc_r+0x64>
 800b874:	e7cf      	b.n	800b816 <_malloc_r+0x4a>
 800b876:	bf00      	nop
 800b878:	20000094 	.word	0x20000094
 800b87c:	20000098 	.word	0x20000098

0800b880 <__sfputc_r>:
 800b880:	6893      	ldr	r3, [r2, #8]
 800b882:	3b01      	subs	r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	b410      	push	{r4}
 800b888:	6093      	str	r3, [r2, #8]
 800b88a:	da08      	bge.n	800b89e <__sfputc_r+0x1e>
 800b88c:	6994      	ldr	r4, [r2, #24]
 800b88e:	42a3      	cmp	r3, r4
 800b890:	db01      	blt.n	800b896 <__sfputc_r+0x16>
 800b892:	290a      	cmp	r1, #10
 800b894:	d103      	bne.n	800b89e <__sfputc_r+0x1e>
 800b896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b89a:	f000 bb33 	b.w	800bf04 <__swbuf_r>
 800b89e:	6813      	ldr	r3, [r2, #0]
 800b8a0:	1c58      	adds	r0, r3, #1
 800b8a2:	6010      	str	r0, [r2, #0]
 800b8a4:	7019      	strb	r1, [r3, #0]
 800b8a6:	4608      	mov	r0, r1
 800b8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ac:	4770      	bx	lr

0800b8ae <__sfputs_r>:
 800b8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	460f      	mov	r7, r1
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	18d5      	adds	r5, r2, r3
 800b8b8:	42ac      	cmp	r4, r5
 800b8ba:	d101      	bne.n	800b8c0 <__sfputs_r+0x12>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	e007      	b.n	800b8d0 <__sfputs_r+0x22>
 800b8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c4:	463a      	mov	r2, r7
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f7ff ffda 	bl	800b880 <__sfputc_r>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d1f3      	bne.n	800b8b8 <__sfputs_r+0xa>
 800b8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8d4 <_vfiprintf_r>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	460d      	mov	r5, r1
 800b8da:	b09d      	sub	sp, #116	; 0x74
 800b8dc:	4614      	mov	r4, r2
 800b8de:	4698      	mov	r8, r3
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	b118      	cbz	r0, 800b8ec <_vfiprintf_r+0x18>
 800b8e4:	6983      	ldr	r3, [r0, #24]
 800b8e6:	b90b      	cbnz	r3, 800b8ec <_vfiprintf_r+0x18>
 800b8e8:	f7ff fed0 	bl	800b68c <__sinit>
 800b8ec:	4b89      	ldr	r3, [pc, #548]	; (800bb14 <_vfiprintf_r+0x240>)
 800b8ee:	429d      	cmp	r5, r3
 800b8f0:	d11b      	bne.n	800b92a <_vfiprintf_r+0x56>
 800b8f2:	6875      	ldr	r5, [r6, #4]
 800b8f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f6:	07d9      	lsls	r1, r3, #31
 800b8f8:	d405      	bmi.n	800b906 <_vfiprintf_r+0x32>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	059a      	lsls	r2, r3, #22
 800b8fe:	d402      	bmi.n	800b906 <_vfiprintf_r+0x32>
 800b900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b902:	f7ff ff61 	bl	800b7c8 <__retarget_lock_acquire_recursive>
 800b906:	89ab      	ldrh	r3, [r5, #12]
 800b908:	071b      	lsls	r3, r3, #28
 800b90a:	d501      	bpl.n	800b910 <_vfiprintf_r+0x3c>
 800b90c:	692b      	ldr	r3, [r5, #16]
 800b90e:	b9eb      	cbnz	r3, 800b94c <_vfiprintf_r+0x78>
 800b910:	4629      	mov	r1, r5
 800b912:	4630      	mov	r0, r6
 800b914:	f000 fb5a 	bl	800bfcc <__swsetup_r>
 800b918:	b1c0      	cbz	r0, 800b94c <_vfiprintf_r+0x78>
 800b91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b91c:	07dc      	lsls	r4, r3, #31
 800b91e:	d50e      	bpl.n	800b93e <_vfiprintf_r+0x6a>
 800b920:	f04f 30ff 	mov.w	r0, #4294967295
 800b924:	b01d      	add	sp, #116	; 0x74
 800b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92a:	4b7b      	ldr	r3, [pc, #492]	; (800bb18 <_vfiprintf_r+0x244>)
 800b92c:	429d      	cmp	r5, r3
 800b92e:	d101      	bne.n	800b934 <_vfiprintf_r+0x60>
 800b930:	68b5      	ldr	r5, [r6, #8]
 800b932:	e7df      	b.n	800b8f4 <_vfiprintf_r+0x20>
 800b934:	4b79      	ldr	r3, [pc, #484]	; (800bb1c <_vfiprintf_r+0x248>)
 800b936:	429d      	cmp	r5, r3
 800b938:	bf08      	it	eq
 800b93a:	68f5      	ldreq	r5, [r6, #12]
 800b93c:	e7da      	b.n	800b8f4 <_vfiprintf_r+0x20>
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	0598      	lsls	r0, r3, #22
 800b942:	d4ed      	bmi.n	800b920 <_vfiprintf_r+0x4c>
 800b944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b946:	f7ff ff40 	bl	800b7ca <__retarget_lock_release_recursive>
 800b94a:	e7e9      	b.n	800b920 <_vfiprintf_r+0x4c>
 800b94c:	2300      	movs	r3, #0
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	2320      	movs	r3, #32
 800b952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b956:	f8cd 800c 	str.w	r8, [sp, #12]
 800b95a:	2330      	movs	r3, #48	; 0x30
 800b95c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb20 <_vfiprintf_r+0x24c>
 800b960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b964:	f04f 0901 	mov.w	r9, #1
 800b968:	4623      	mov	r3, r4
 800b96a:	469a      	mov	sl, r3
 800b96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b970:	b10a      	cbz	r2, 800b976 <_vfiprintf_r+0xa2>
 800b972:	2a25      	cmp	r2, #37	; 0x25
 800b974:	d1f9      	bne.n	800b96a <_vfiprintf_r+0x96>
 800b976:	ebba 0b04 	subs.w	fp, sl, r4
 800b97a:	d00b      	beq.n	800b994 <_vfiprintf_r+0xc0>
 800b97c:	465b      	mov	r3, fp
 800b97e:	4622      	mov	r2, r4
 800b980:	4629      	mov	r1, r5
 800b982:	4630      	mov	r0, r6
 800b984:	f7ff ff93 	bl	800b8ae <__sfputs_r>
 800b988:	3001      	adds	r0, #1
 800b98a:	f000 80aa 	beq.w	800bae2 <_vfiprintf_r+0x20e>
 800b98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b990:	445a      	add	r2, fp
 800b992:	9209      	str	r2, [sp, #36]	; 0x24
 800b994:	f89a 3000 	ldrb.w	r3, [sl]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 80a2 	beq.w	800bae2 <_vfiprintf_r+0x20e>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a8:	f10a 0a01 	add.w	sl, sl, #1
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b6:	4654      	mov	r4, sl
 800b9b8:	2205      	movs	r2, #5
 800b9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9be:	4858      	ldr	r0, [pc, #352]	; (800bb20 <_vfiprintf_r+0x24c>)
 800b9c0:	f7f4 fc8e 	bl	80002e0 <memchr>
 800b9c4:	9a04      	ldr	r2, [sp, #16]
 800b9c6:	b9d8      	cbnz	r0, 800ba00 <_vfiprintf_r+0x12c>
 800b9c8:	06d1      	lsls	r1, r2, #27
 800b9ca:	bf44      	itt	mi
 800b9cc:	2320      	movmi	r3, #32
 800b9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d2:	0713      	lsls	r3, r2, #28
 800b9d4:	bf44      	itt	mi
 800b9d6:	232b      	movmi	r3, #43	; 0x2b
 800b9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e2:	d015      	beq.n	800ba10 <_vfiprintf_r+0x13c>
 800b9e4:	9a07      	ldr	r2, [sp, #28]
 800b9e6:	4654      	mov	r4, sl
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	f04f 0c0a 	mov.w	ip, #10
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f4:	3b30      	subs	r3, #48	; 0x30
 800b9f6:	2b09      	cmp	r3, #9
 800b9f8:	d94e      	bls.n	800ba98 <_vfiprintf_r+0x1c4>
 800b9fa:	b1b0      	cbz	r0, 800ba2a <_vfiprintf_r+0x156>
 800b9fc:	9207      	str	r2, [sp, #28]
 800b9fe:	e014      	b.n	800ba2a <_vfiprintf_r+0x156>
 800ba00:	eba0 0308 	sub.w	r3, r0, r8
 800ba04:	fa09 f303 	lsl.w	r3, r9, r3
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	46a2      	mov	sl, r4
 800ba0e:	e7d2      	b.n	800b9b6 <_vfiprintf_r+0xe2>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	1d19      	adds	r1, r3, #4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	9103      	str	r1, [sp, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bfbb      	ittet	lt
 800ba1c:	425b      	neglt	r3, r3
 800ba1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba22:	9307      	strge	r3, [sp, #28]
 800ba24:	9307      	strlt	r3, [sp, #28]
 800ba26:	bfb8      	it	lt
 800ba28:	9204      	strlt	r2, [sp, #16]
 800ba2a:	7823      	ldrb	r3, [r4, #0]
 800ba2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2e:	d10c      	bne.n	800ba4a <_vfiprintf_r+0x176>
 800ba30:	7863      	ldrb	r3, [r4, #1]
 800ba32:	2b2a      	cmp	r3, #42	; 0x2a
 800ba34:	d135      	bne.n	800baa2 <_vfiprintf_r+0x1ce>
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	1d1a      	adds	r2, r3, #4
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	9203      	str	r2, [sp, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfb8      	it	lt
 800ba42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba46:	3402      	adds	r4, #2
 800ba48:	9305      	str	r3, [sp, #20]
 800ba4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb30 <_vfiprintf_r+0x25c>
 800ba4e:	7821      	ldrb	r1, [r4, #0]
 800ba50:	2203      	movs	r2, #3
 800ba52:	4650      	mov	r0, sl
 800ba54:	f7f4 fc44 	bl	80002e0 <memchr>
 800ba58:	b140      	cbz	r0, 800ba6c <_vfiprintf_r+0x198>
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	eba0 000a 	sub.w	r0, r0, sl
 800ba60:	fa03 f000 	lsl.w	r0, r3, r0
 800ba64:	9b04      	ldr	r3, [sp, #16]
 800ba66:	4303      	orrs	r3, r0
 800ba68:	3401      	adds	r4, #1
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba70:	482c      	ldr	r0, [pc, #176]	; (800bb24 <_vfiprintf_r+0x250>)
 800ba72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba76:	2206      	movs	r2, #6
 800ba78:	f7f4 fc32 	bl	80002e0 <memchr>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d03f      	beq.n	800bb00 <_vfiprintf_r+0x22c>
 800ba80:	4b29      	ldr	r3, [pc, #164]	; (800bb28 <_vfiprintf_r+0x254>)
 800ba82:	bb1b      	cbnz	r3, 800bacc <_vfiprintf_r+0x1f8>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	3307      	adds	r3, #7
 800ba88:	f023 0307 	bic.w	r3, r3, #7
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba92:	443b      	add	r3, r7
 800ba94:	9309      	str	r3, [sp, #36]	; 0x24
 800ba96:	e767      	b.n	800b968 <_vfiprintf_r+0x94>
 800ba98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7a5      	b.n	800b9ee <_vfiprintf_r+0x11a>
 800baa2:	2300      	movs	r3, #0
 800baa4:	3401      	adds	r4, #1
 800baa6:	9305      	str	r3, [sp, #20]
 800baa8:	4619      	mov	r1, r3
 800baaa:	f04f 0c0a 	mov.w	ip, #10
 800baae:	4620      	mov	r0, r4
 800bab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab4:	3a30      	subs	r2, #48	; 0x30
 800bab6:	2a09      	cmp	r2, #9
 800bab8:	d903      	bls.n	800bac2 <_vfiprintf_r+0x1ee>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0c5      	beq.n	800ba4a <_vfiprintf_r+0x176>
 800babe:	9105      	str	r1, [sp, #20]
 800bac0:	e7c3      	b.n	800ba4a <_vfiprintf_r+0x176>
 800bac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bac6:	4604      	mov	r4, r0
 800bac8:	2301      	movs	r3, #1
 800baca:	e7f0      	b.n	800baae <_vfiprintf_r+0x1da>
 800bacc:	ab03      	add	r3, sp, #12
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	462a      	mov	r2, r5
 800bad2:	4b16      	ldr	r3, [pc, #88]	; (800bb2c <_vfiprintf_r+0x258>)
 800bad4:	a904      	add	r1, sp, #16
 800bad6:	4630      	mov	r0, r6
 800bad8:	f3af 8000 	nop.w
 800badc:	4607      	mov	r7, r0
 800bade:	1c78      	adds	r0, r7, #1
 800bae0:	d1d6      	bne.n	800ba90 <_vfiprintf_r+0x1bc>
 800bae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae4:	07d9      	lsls	r1, r3, #31
 800bae6:	d405      	bmi.n	800baf4 <_vfiprintf_r+0x220>
 800bae8:	89ab      	ldrh	r3, [r5, #12]
 800baea:	059a      	lsls	r2, r3, #22
 800baec:	d402      	bmi.n	800baf4 <_vfiprintf_r+0x220>
 800baee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baf0:	f7ff fe6b 	bl	800b7ca <__retarget_lock_release_recursive>
 800baf4:	89ab      	ldrh	r3, [r5, #12]
 800baf6:	065b      	lsls	r3, r3, #25
 800baf8:	f53f af12 	bmi.w	800b920 <_vfiprintf_r+0x4c>
 800bafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bafe:	e711      	b.n	800b924 <_vfiprintf_r+0x50>
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	462a      	mov	r2, r5
 800bb06:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <_vfiprintf_r+0x258>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f000 f880 	bl	800bc10 <_printf_i>
 800bb10:	e7e4      	b.n	800badc <_vfiprintf_r+0x208>
 800bb12:	bf00      	nop
 800bb14:	0800c4d8 	.word	0x0800c4d8
 800bb18:	0800c4f8 	.word	0x0800c4f8
 800bb1c:	0800c4b8 	.word	0x0800c4b8
 800bb20:	0800c518 	.word	0x0800c518
 800bb24:	0800c522 	.word	0x0800c522
 800bb28:	00000000 	.word	0x00000000
 800bb2c:	0800b8af 	.word	0x0800b8af
 800bb30:	0800c51e 	.word	0x0800c51e

0800bb34 <_printf_common>:
 800bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	4616      	mov	r6, r2
 800bb3a:	4699      	mov	r9, r3
 800bb3c:	688a      	ldr	r2, [r1, #8]
 800bb3e:	690b      	ldr	r3, [r1, #16]
 800bb40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb44:	4293      	cmp	r3, r2
 800bb46:	bfb8      	it	lt
 800bb48:	4613      	movlt	r3, r2
 800bb4a:	6033      	str	r3, [r6, #0]
 800bb4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb50:	4607      	mov	r7, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b10a      	cbz	r2, 800bb5a <_printf_common+0x26>
 800bb56:	3301      	adds	r3, #1
 800bb58:	6033      	str	r3, [r6, #0]
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	0699      	lsls	r1, r3, #26
 800bb5e:	bf42      	ittt	mi
 800bb60:	6833      	ldrmi	r3, [r6, #0]
 800bb62:	3302      	addmi	r3, #2
 800bb64:	6033      	strmi	r3, [r6, #0]
 800bb66:	6825      	ldr	r5, [r4, #0]
 800bb68:	f015 0506 	ands.w	r5, r5, #6
 800bb6c:	d106      	bne.n	800bb7c <_printf_common+0x48>
 800bb6e:	f104 0a19 	add.w	sl, r4, #25
 800bb72:	68e3      	ldr	r3, [r4, #12]
 800bb74:	6832      	ldr	r2, [r6, #0]
 800bb76:	1a9b      	subs	r3, r3, r2
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dc26      	bgt.n	800bbca <_printf_common+0x96>
 800bb7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb80:	1e13      	subs	r3, r2, #0
 800bb82:	6822      	ldr	r2, [r4, #0]
 800bb84:	bf18      	it	ne
 800bb86:	2301      	movne	r3, #1
 800bb88:	0692      	lsls	r2, r2, #26
 800bb8a:	d42b      	bmi.n	800bbe4 <_printf_common+0xb0>
 800bb8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb90:	4649      	mov	r1, r9
 800bb92:	4638      	mov	r0, r7
 800bb94:	47c0      	blx	r8
 800bb96:	3001      	adds	r0, #1
 800bb98:	d01e      	beq.n	800bbd8 <_printf_common+0xa4>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	68e5      	ldr	r5, [r4, #12]
 800bb9e:	6832      	ldr	r2, [r6, #0]
 800bba0:	f003 0306 	and.w	r3, r3, #6
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	bf08      	it	eq
 800bba8:	1aad      	subeq	r5, r5, r2
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	6922      	ldr	r2, [r4, #16]
 800bbae:	bf0c      	ite	eq
 800bbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbb4:	2500      	movne	r5, #0
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	bfc4      	itt	gt
 800bbba:	1a9b      	subgt	r3, r3, r2
 800bbbc:	18ed      	addgt	r5, r5, r3
 800bbbe:	2600      	movs	r6, #0
 800bbc0:	341a      	adds	r4, #26
 800bbc2:	42b5      	cmp	r5, r6
 800bbc4:	d11a      	bne.n	800bbfc <_printf_common+0xc8>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e008      	b.n	800bbdc <_printf_common+0xa8>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	4649      	mov	r1, r9
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	47c0      	blx	r8
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d103      	bne.n	800bbe0 <_printf_common+0xac>
 800bbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	e7c6      	b.n	800bb72 <_printf_common+0x3e>
 800bbe4:	18e1      	adds	r1, r4, r3
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	2030      	movs	r0, #48	; 0x30
 800bbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbee:	4422      	add	r2, r4
 800bbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	e7c7      	b.n	800bb8c <_printf_common+0x58>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4649      	mov	r1, r9
 800bc02:	4638      	mov	r0, r7
 800bc04:	47c0      	blx	r8
 800bc06:	3001      	adds	r0, #1
 800bc08:	d0e6      	beq.n	800bbd8 <_printf_common+0xa4>
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7d9      	b.n	800bbc2 <_printf_common+0x8e>
	...

0800bc10 <_printf_i>:
 800bc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	460c      	mov	r4, r1
 800bc16:	4691      	mov	r9, r2
 800bc18:	7e27      	ldrb	r7, [r4, #24]
 800bc1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc1c:	2f78      	cmp	r7, #120	; 0x78
 800bc1e:	4680      	mov	r8, r0
 800bc20:	469a      	mov	sl, r3
 800bc22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc26:	d807      	bhi.n	800bc38 <_printf_i+0x28>
 800bc28:	2f62      	cmp	r7, #98	; 0x62
 800bc2a:	d80a      	bhi.n	800bc42 <_printf_i+0x32>
 800bc2c:	2f00      	cmp	r7, #0
 800bc2e:	f000 80d8 	beq.w	800bde2 <_printf_i+0x1d2>
 800bc32:	2f58      	cmp	r7, #88	; 0x58
 800bc34:	f000 80a3 	beq.w	800bd7e <_printf_i+0x16e>
 800bc38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc40:	e03a      	b.n	800bcb8 <_printf_i+0xa8>
 800bc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc46:	2b15      	cmp	r3, #21
 800bc48:	d8f6      	bhi.n	800bc38 <_printf_i+0x28>
 800bc4a:	a001      	add	r0, pc, #4	; (adr r0, 800bc50 <_printf_i+0x40>)
 800bc4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc50:	0800bca9 	.word	0x0800bca9
 800bc54:	0800bcbd 	.word	0x0800bcbd
 800bc58:	0800bc39 	.word	0x0800bc39
 800bc5c:	0800bc39 	.word	0x0800bc39
 800bc60:	0800bc39 	.word	0x0800bc39
 800bc64:	0800bc39 	.word	0x0800bc39
 800bc68:	0800bcbd 	.word	0x0800bcbd
 800bc6c:	0800bc39 	.word	0x0800bc39
 800bc70:	0800bc39 	.word	0x0800bc39
 800bc74:	0800bc39 	.word	0x0800bc39
 800bc78:	0800bc39 	.word	0x0800bc39
 800bc7c:	0800bdc9 	.word	0x0800bdc9
 800bc80:	0800bced 	.word	0x0800bced
 800bc84:	0800bdab 	.word	0x0800bdab
 800bc88:	0800bc39 	.word	0x0800bc39
 800bc8c:	0800bc39 	.word	0x0800bc39
 800bc90:	0800bdeb 	.word	0x0800bdeb
 800bc94:	0800bc39 	.word	0x0800bc39
 800bc98:	0800bced 	.word	0x0800bced
 800bc9c:	0800bc39 	.word	0x0800bc39
 800bca0:	0800bc39 	.word	0x0800bc39
 800bca4:	0800bdb3 	.word	0x0800bdb3
 800bca8:	680b      	ldr	r3, [r1, #0]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	600a      	str	r2, [r1, #0]
 800bcb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bcb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e0a3      	b.n	800be04 <_printf_i+0x1f4>
 800bcbc:	6825      	ldr	r5, [r4, #0]
 800bcbe:	6808      	ldr	r0, [r1, #0]
 800bcc0:	062e      	lsls	r6, r5, #24
 800bcc2:	f100 0304 	add.w	r3, r0, #4
 800bcc6:	d50a      	bpl.n	800bcde <_printf_i+0xce>
 800bcc8:	6805      	ldr	r5, [r0, #0]
 800bcca:	600b      	str	r3, [r1, #0]
 800bccc:	2d00      	cmp	r5, #0
 800bcce:	da03      	bge.n	800bcd8 <_printf_i+0xc8>
 800bcd0:	232d      	movs	r3, #45	; 0x2d
 800bcd2:	426d      	negs	r5, r5
 800bcd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcd8:	485e      	ldr	r0, [pc, #376]	; (800be54 <_printf_i+0x244>)
 800bcda:	230a      	movs	r3, #10
 800bcdc:	e019      	b.n	800bd12 <_printf_i+0x102>
 800bcde:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bce2:	6805      	ldr	r5, [r0, #0]
 800bce4:	600b      	str	r3, [r1, #0]
 800bce6:	bf18      	it	ne
 800bce8:	b22d      	sxthne	r5, r5
 800bcea:	e7ef      	b.n	800bccc <_printf_i+0xbc>
 800bcec:	680b      	ldr	r3, [r1, #0]
 800bcee:	6825      	ldr	r5, [r4, #0]
 800bcf0:	1d18      	adds	r0, r3, #4
 800bcf2:	6008      	str	r0, [r1, #0]
 800bcf4:	0628      	lsls	r0, r5, #24
 800bcf6:	d501      	bpl.n	800bcfc <_printf_i+0xec>
 800bcf8:	681d      	ldr	r5, [r3, #0]
 800bcfa:	e002      	b.n	800bd02 <_printf_i+0xf2>
 800bcfc:	0669      	lsls	r1, r5, #25
 800bcfe:	d5fb      	bpl.n	800bcf8 <_printf_i+0xe8>
 800bd00:	881d      	ldrh	r5, [r3, #0]
 800bd02:	4854      	ldr	r0, [pc, #336]	; (800be54 <_printf_i+0x244>)
 800bd04:	2f6f      	cmp	r7, #111	; 0x6f
 800bd06:	bf0c      	ite	eq
 800bd08:	2308      	moveq	r3, #8
 800bd0a:	230a      	movne	r3, #10
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd12:	6866      	ldr	r6, [r4, #4]
 800bd14:	60a6      	str	r6, [r4, #8]
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	bfa2      	ittt	ge
 800bd1a:	6821      	ldrge	r1, [r4, #0]
 800bd1c:	f021 0104 	bicge.w	r1, r1, #4
 800bd20:	6021      	strge	r1, [r4, #0]
 800bd22:	b90d      	cbnz	r5, 800bd28 <_printf_i+0x118>
 800bd24:	2e00      	cmp	r6, #0
 800bd26:	d04d      	beq.n	800bdc4 <_printf_i+0x1b4>
 800bd28:	4616      	mov	r6, r2
 800bd2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd2e:	fb03 5711 	mls	r7, r3, r1, r5
 800bd32:	5dc7      	ldrb	r7, [r0, r7]
 800bd34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd38:	462f      	mov	r7, r5
 800bd3a:	42bb      	cmp	r3, r7
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	d9f4      	bls.n	800bd2a <_printf_i+0x11a>
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d10b      	bne.n	800bd5c <_printf_i+0x14c>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	07df      	lsls	r7, r3, #31
 800bd48:	d508      	bpl.n	800bd5c <_printf_i+0x14c>
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	6861      	ldr	r1, [r4, #4]
 800bd4e:	4299      	cmp	r1, r3
 800bd50:	bfde      	ittt	le
 800bd52:	2330      	movle	r3, #48	; 0x30
 800bd54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd5c:	1b92      	subs	r2, r2, r6
 800bd5e:	6122      	str	r2, [r4, #16]
 800bd60:	f8cd a000 	str.w	sl, [sp]
 800bd64:	464b      	mov	r3, r9
 800bd66:	aa03      	add	r2, sp, #12
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	f7ff fee2 	bl	800bb34 <_printf_common>
 800bd70:	3001      	adds	r0, #1
 800bd72:	d14c      	bne.n	800be0e <_printf_i+0x1fe>
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	b004      	add	sp, #16
 800bd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7e:	4835      	ldr	r0, [pc, #212]	; (800be54 <_printf_i+0x244>)
 800bd80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	680e      	ldr	r6, [r1, #0]
 800bd88:	061f      	lsls	r7, r3, #24
 800bd8a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd8e:	600e      	str	r6, [r1, #0]
 800bd90:	d514      	bpl.n	800bdbc <_printf_i+0x1ac>
 800bd92:	07d9      	lsls	r1, r3, #31
 800bd94:	bf44      	itt	mi
 800bd96:	f043 0320 	orrmi.w	r3, r3, #32
 800bd9a:	6023      	strmi	r3, [r4, #0]
 800bd9c:	b91d      	cbnz	r5, 800bda6 <_printf_i+0x196>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f023 0320 	bic.w	r3, r3, #32
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	2310      	movs	r3, #16
 800bda8:	e7b0      	b.n	800bd0c <_printf_i+0xfc>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	f043 0320 	orr.w	r3, r3, #32
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	2378      	movs	r3, #120	; 0x78
 800bdb4:	4828      	ldr	r0, [pc, #160]	; (800be58 <_printf_i+0x248>)
 800bdb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdba:	e7e3      	b.n	800bd84 <_printf_i+0x174>
 800bdbc:	065e      	lsls	r6, r3, #25
 800bdbe:	bf48      	it	mi
 800bdc0:	b2ad      	uxthmi	r5, r5
 800bdc2:	e7e6      	b.n	800bd92 <_printf_i+0x182>
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	e7bb      	b.n	800bd40 <_printf_i+0x130>
 800bdc8:	680b      	ldr	r3, [r1, #0]
 800bdca:	6826      	ldr	r6, [r4, #0]
 800bdcc:	6960      	ldr	r0, [r4, #20]
 800bdce:	1d1d      	adds	r5, r3, #4
 800bdd0:	600d      	str	r5, [r1, #0]
 800bdd2:	0635      	lsls	r5, r6, #24
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	d501      	bpl.n	800bddc <_printf_i+0x1cc>
 800bdd8:	6018      	str	r0, [r3, #0]
 800bdda:	e002      	b.n	800bde2 <_printf_i+0x1d2>
 800bddc:	0671      	lsls	r1, r6, #25
 800bdde:	d5fb      	bpl.n	800bdd8 <_printf_i+0x1c8>
 800bde0:	8018      	strh	r0, [r3, #0]
 800bde2:	2300      	movs	r3, #0
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	4616      	mov	r6, r2
 800bde8:	e7ba      	b.n	800bd60 <_printf_i+0x150>
 800bdea:	680b      	ldr	r3, [r1, #0]
 800bdec:	1d1a      	adds	r2, r3, #4
 800bdee:	600a      	str	r2, [r1, #0]
 800bdf0:	681e      	ldr	r6, [r3, #0]
 800bdf2:	6862      	ldr	r2, [r4, #4]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7f4 fa72 	bl	80002e0 <memchr>
 800bdfc:	b108      	cbz	r0, 800be02 <_printf_i+0x1f2>
 800bdfe:	1b80      	subs	r0, r0, r6
 800be00:	6060      	str	r0, [r4, #4]
 800be02:	6863      	ldr	r3, [r4, #4]
 800be04:	6123      	str	r3, [r4, #16]
 800be06:	2300      	movs	r3, #0
 800be08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be0c:	e7a8      	b.n	800bd60 <_printf_i+0x150>
 800be0e:	6923      	ldr	r3, [r4, #16]
 800be10:	4632      	mov	r2, r6
 800be12:	4649      	mov	r1, r9
 800be14:	4640      	mov	r0, r8
 800be16:	47d0      	blx	sl
 800be18:	3001      	adds	r0, #1
 800be1a:	d0ab      	beq.n	800bd74 <_printf_i+0x164>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	079b      	lsls	r3, r3, #30
 800be20:	d413      	bmi.n	800be4a <_printf_i+0x23a>
 800be22:	68e0      	ldr	r0, [r4, #12]
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	4298      	cmp	r0, r3
 800be28:	bfb8      	it	lt
 800be2a:	4618      	movlt	r0, r3
 800be2c:	e7a4      	b.n	800bd78 <_printf_i+0x168>
 800be2e:	2301      	movs	r3, #1
 800be30:	4632      	mov	r2, r6
 800be32:	4649      	mov	r1, r9
 800be34:	4640      	mov	r0, r8
 800be36:	47d0      	blx	sl
 800be38:	3001      	adds	r0, #1
 800be3a:	d09b      	beq.n	800bd74 <_printf_i+0x164>
 800be3c:	3501      	adds	r5, #1
 800be3e:	68e3      	ldr	r3, [r4, #12]
 800be40:	9903      	ldr	r1, [sp, #12]
 800be42:	1a5b      	subs	r3, r3, r1
 800be44:	42ab      	cmp	r3, r5
 800be46:	dcf2      	bgt.n	800be2e <_printf_i+0x21e>
 800be48:	e7eb      	b.n	800be22 <_printf_i+0x212>
 800be4a:	2500      	movs	r5, #0
 800be4c:	f104 0619 	add.w	r6, r4, #25
 800be50:	e7f5      	b.n	800be3e <_printf_i+0x22e>
 800be52:	bf00      	nop
 800be54:	0800c529 	.word	0x0800c529
 800be58:	0800c53a 	.word	0x0800c53a

0800be5c <_sbrk_r>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4d06      	ldr	r5, [pc, #24]	; (800be78 <_sbrk_r+0x1c>)
 800be60:	2300      	movs	r3, #0
 800be62:	4604      	mov	r4, r0
 800be64:	4608      	mov	r0, r1
 800be66:	602b      	str	r3, [r5, #0]
 800be68:	f7f6 f87a 	bl	8001f60 <_sbrk>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d102      	bne.n	800be76 <_sbrk_r+0x1a>
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	b103      	cbz	r3, 800be76 <_sbrk_r+0x1a>
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	20000868 	.word	0x20000868

0800be7c <__sread>:
 800be7c:	b510      	push	{r4, lr}
 800be7e:	460c      	mov	r4, r1
 800be80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be84:	f000 fab4 	bl	800c3f0 <_read_r>
 800be88:	2800      	cmp	r0, #0
 800be8a:	bfab      	itete	ge
 800be8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be8e:	89a3      	ldrhlt	r3, [r4, #12]
 800be90:	181b      	addge	r3, r3, r0
 800be92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be96:	bfac      	ite	ge
 800be98:	6563      	strge	r3, [r4, #84]	; 0x54
 800be9a:	81a3      	strhlt	r3, [r4, #12]
 800be9c:	bd10      	pop	{r4, pc}

0800be9e <__swrite>:
 800be9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea2:	461f      	mov	r7, r3
 800bea4:	898b      	ldrh	r3, [r1, #12]
 800bea6:	05db      	lsls	r3, r3, #23
 800bea8:	4605      	mov	r5, r0
 800beaa:	460c      	mov	r4, r1
 800beac:	4616      	mov	r6, r2
 800beae:	d505      	bpl.n	800bebc <__swrite+0x1e>
 800beb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb4:	2302      	movs	r3, #2
 800beb6:	2200      	movs	r2, #0
 800beb8:	f000 f9c8 	bl	800c24c <_lseek_r>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bec6:	81a3      	strh	r3, [r4, #12]
 800bec8:	4632      	mov	r2, r6
 800beca:	463b      	mov	r3, r7
 800becc:	4628      	mov	r0, r5
 800bece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bed2:	f000 b869 	b.w	800bfa8 <_write_r>

0800bed6 <__sseek>:
 800bed6:	b510      	push	{r4, lr}
 800bed8:	460c      	mov	r4, r1
 800beda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bede:	f000 f9b5 	bl	800c24c <_lseek_r>
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	bf15      	itete	ne
 800bee8:	6560      	strne	r0, [r4, #84]	; 0x54
 800beea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800beee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bef2:	81a3      	strheq	r3, [r4, #12]
 800bef4:	bf18      	it	ne
 800bef6:	81a3      	strhne	r3, [r4, #12]
 800bef8:	bd10      	pop	{r4, pc}

0800befa <__sclose>:
 800befa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befe:	f000 b8d3 	b.w	800c0a8 <_close_r>
	...

0800bf04 <__swbuf_r>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	460e      	mov	r6, r1
 800bf08:	4614      	mov	r4, r2
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b118      	cbz	r0, 800bf16 <__swbuf_r+0x12>
 800bf0e:	6983      	ldr	r3, [r0, #24]
 800bf10:	b90b      	cbnz	r3, 800bf16 <__swbuf_r+0x12>
 800bf12:	f7ff fbbb 	bl	800b68c <__sinit>
 800bf16:	4b21      	ldr	r3, [pc, #132]	; (800bf9c <__swbuf_r+0x98>)
 800bf18:	429c      	cmp	r4, r3
 800bf1a:	d12b      	bne.n	800bf74 <__swbuf_r+0x70>
 800bf1c:	686c      	ldr	r4, [r5, #4]
 800bf1e:	69a3      	ldr	r3, [r4, #24]
 800bf20:	60a3      	str	r3, [r4, #8]
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	071a      	lsls	r2, r3, #28
 800bf26:	d52f      	bpl.n	800bf88 <__swbuf_r+0x84>
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	b36b      	cbz	r3, 800bf88 <__swbuf_r+0x84>
 800bf2c:	6923      	ldr	r3, [r4, #16]
 800bf2e:	6820      	ldr	r0, [r4, #0]
 800bf30:	1ac0      	subs	r0, r0, r3
 800bf32:	6963      	ldr	r3, [r4, #20]
 800bf34:	b2f6      	uxtb	r6, r6
 800bf36:	4283      	cmp	r3, r0
 800bf38:	4637      	mov	r7, r6
 800bf3a:	dc04      	bgt.n	800bf46 <__swbuf_r+0x42>
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f000 f948 	bl	800c1d4 <_fflush_r>
 800bf44:	bb30      	cbnz	r0, 800bf94 <__swbuf_r+0x90>
 800bf46:	68a3      	ldr	r3, [r4, #8]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	60a3      	str	r3, [r4, #8]
 800bf4c:	6823      	ldr	r3, [r4, #0]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	6022      	str	r2, [r4, #0]
 800bf52:	701e      	strb	r6, [r3, #0]
 800bf54:	6963      	ldr	r3, [r4, #20]
 800bf56:	3001      	adds	r0, #1
 800bf58:	4283      	cmp	r3, r0
 800bf5a:	d004      	beq.n	800bf66 <__swbuf_r+0x62>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	07db      	lsls	r3, r3, #31
 800bf60:	d506      	bpl.n	800bf70 <__swbuf_r+0x6c>
 800bf62:	2e0a      	cmp	r6, #10
 800bf64:	d104      	bne.n	800bf70 <__swbuf_r+0x6c>
 800bf66:	4621      	mov	r1, r4
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f000 f933 	bl	800c1d4 <_fflush_r>
 800bf6e:	b988      	cbnz	r0, 800bf94 <__swbuf_r+0x90>
 800bf70:	4638      	mov	r0, r7
 800bf72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf74:	4b0a      	ldr	r3, [pc, #40]	; (800bfa0 <__swbuf_r+0x9c>)
 800bf76:	429c      	cmp	r4, r3
 800bf78:	d101      	bne.n	800bf7e <__swbuf_r+0x7a>
 800bf7a:	68ac      	ldr	r4, [r5, #8]
 800bf7c:	e7cf      	b.n	800bf1e <__swbuf_r+0x1a>
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <__swbuf_r+0xa0>)
 800bf80:	429c      	cmp	r4, r3
 800bf82:	bf08      	it	eq
 800bf84:	68ec      	ldreq	r4, [r5, #12]
 800bf86:	e7ca      	b.n	800bf1e <__swbuf_r+0x1a>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f000 f81e 	bl	800bfcc <__swsetup_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d0cb      	beq.n	800bf2c <__swbuf_r+0x28>
 800bf94:	f04f 37ff 	mov.w	r7, #4294967295
 800bf98:	e7ea      	b.n	800bf70 <__swbuf_r+0x6c>
 800bf9a:	bf00      	nop
 800bf9c:	0800c4d8 	.word	0x0800c4d8
 800bfa0:	0800c4f8 	.word	0x0800c4f8
 800bfa4:	0800c4b8 	.word	0x0800c4b8

0800bfa8 <_write_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d07      	ldr	r5, [pc, #28]	; (800bfc8 <_write_r+0x20>)
 800bfac:	4604      	mov	r4, r0
 800bfae:	4608      	mov	r0, r1
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	602a      	str	r2, [r5, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f7f5 faf2 	bl	80015a0 <_write>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_write_r+0x1e>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_write_r+0x1e>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	20000868 	.word	0x20000868

0800bfcc <__swsetup_r>:
 800bfcc:	4b32      	ldr	r3, [pc, #200]	; (800c098 <__swsetup_r+0xcc>)
 800bfce:	b570      	push	{r4, r5, r6, lr}
 800bfd0:	681d      	ldr	r5, [r3, #0]
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	b125      	cbz	r5, 800bfe2 <__swsetup_r+0x16>
 800bfd8:	69ab      	ldr	r3, [r5, #24]
 800bfda:	b913      	cbnz	r3, 800bfe2 <__swsetup_r+0x16>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7ff fb55 	bl	800b68c <__sinit>
 800bfe2:	4b2e      	ldr	r3, [pc, #184]	; (800c09c <__swsetup_r+0xd0>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	d10f      	bne.n	800c008 <__swsetup_r+0x3c>
 800bfe8:	686c      	ldr	r4, [r5, #4]
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bff0:	0719      	lsls	r1, r3, #28
 800bff2:	d42c      	bmi.n	800c04e <__swsetup_r+0x82>
 800bff4:	06dd      	lsls	r5, r3, #27
 800bff6:	d411      	bmi.n	800c01c <__swsetup_r+0x50>
 800bff8:	2309      	movs	r3, #9
 800bffa:	6033      	str	r3, [r6, #0]
 800bffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	f04f 30ff 	mov.w	r0, #4294967295
 800c006:	e03e      	b.n	800c086 <__swsetup_r+0xba>
 800c008:	4b25      	ldr	r3, [pc, #148]	; (800c0a0 <__swsetup_r+0xd4>)
 800c00a:	429c      	cmp	r4, r3
 800c00c:	d101      	bne.n	800c012 <__swsetup_r+0x46>
 800c00e:	68ac      	ldr	r4, [r5, #8]
 800c010:	e7eb      	b.n	800bfea <__swsetup_r+0x1e>
 800c012:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <__swsetup_r+0xd8>)
 800c014:	429c      	cmp	r4, r3
 800c016:	bf08      	it	eq
 800c018:	68ec      	ldreq	r4, [r5, #12]
 800c01a:	e7e6      	b.n	800bfea <__swsetup_r+0x1e>
 800c01c:	0758      	lsls	r0, r3, #29
 800c01e:	d512      	bpl.n	800c046 <__swsetup_r+0x7a>
 800c020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c022:	b141      	cbz	r1, 800c036 <__swsetup_r+0x6a>
 800c024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c028:	4299      	cmp	r1, r3
 800c02a:	d002      	beq.n	800c032 <__swsetup_r+0x66>
 800c02c:	4630      	mov	r0, r6
 800c02e:	f000 f98f 	bl	800c350 <_free_r>
 800c032:	2300      	movs	r3, #0
 800c034:	6363      	str	r3, [r4, #52]	; 0x34
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	2300      	movs	r3, #0
 800c040:	6063      	str	r3, [r4, #4]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	f043 0308 	orr.w	r3, r3, #8
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	b94b      	cbnz	r3, 800c066 <__swsetup_r+0x9a>
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c05c:	d003      	beq.n	800c066 <__swsetup_r+0x9a>
 800c05e:	4621      	mov	r1, r4
 800c060:	4630      	mov	r0, r6
 800c062:	f000 f929 	bl	800c2b8 <__smakebuf_r>
 800c066:	89a0      	ldrh	r0, [r4, #12]
 800c068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c06c:	f010 0301 	ands.w	r3, r0, #1
 800c070:	d00a      	beq.n	800c088 <__swsetup_r+0xbc>
 800c072:	2300      	movs	r3, #0
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6963      	ldr	r3, [r4, #20]
 800c078:	425b      	negs	r3, r3
 800c07a:	61a3      	str	r3, [r4, #24]
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	b943      	cbnz	r3, 800c092 <__swsetup_r+0xc6>
 800c080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c084:	d1ba      	bne.n	800bffc <__swsetup_r+0x30>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	0781      	lsls	r1, r0, #30
 800c08a:	bf58      	it	pl
 800c08c:	6963      	ldrpl	r3, [r4, #20]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	e7f4      	b.n	800c07c <__swsetup_r+0xb0>
 800c092:	2000      	movs	r0, #0
 800c094:	e7f7      	b.n	800c086 <__swsetup_r+0xba>
 800c096:	bf00      	nop
 800c098:	20000010 	.word	0x20000010
 800c09c:	0800c4d8 	.word	0x0800c4d8
 800c0a0:	0800c4f8 	.word	0x0800c4f8
 800c0a4:	0800c4b8 	.word	0x0800c4b8

0800c0a8 <_close_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d06      	ldr	r5, [pc, #24]	; (800c0c4 <_close_r+0x1c>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	602b      	str	r3, [r5, #0]
 800c0b4:	f7f5 ff1f 	bl	8001ef6 <_close>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	d102      	bne.n	800c0c2 <_close_r+0x1a>
 800c0bc:	682b      	ldr	r3, [r5, #0]
 800c0be:	b103      	cbz	r3, 800c0c2 <_close_r+0x1a>
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	20000868 	.word	0x20000868

0800c0c8 <__sflush_r>:
 800c0c8:	898a      	ldrh	r2, [r1, #12]
 800c0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	0710      	lsls	r0, r2, #28
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	d458      	bmi.n	800c188 <__sflush_r+0xc0>
 800c0d6:	684b      	ldr	r3, [r1, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	dc05      	bgt.n	800c0e8 <__sflush_r+0x20>
 800c0dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dc02      	bgt.n	800c0e8 <__sflush_r+0x20>
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	d0f9      	beq.n	800c0e2 <__sflush_r+0x1a>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0f4:	682f      	ldr	r7, [r5, #0]
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	d032      	beq.n	800c160 <__sflush_r+0x98>
 800c0fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	075a      	lsls	r2, r3, #29
 800c100:	d505      	bpl.n	800c10e <__sflush_r+0x46>
 800c102:	6863      	ldr	r3, [r4, #4]
 800c104:	1ac0      	subs	r0, r0, r3
 800c106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c108:	b10b      	cbz	r3, 800c10e <__sflush_r+0x46>
 800c10a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c10c:	1ac0      	subs	r0, r0, r3
 800c10e:	2300      	movs	r3, #0
 800c110:	4602      	mov	r2, r0
 800c112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c114:	6a21      	ldr	r1, [r4, #32]
 800c116:	4628      	mov	r0, r5
 800c118:	47b0      	blx	r6
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	d106      	bne.n	800c12e <__sflush_r+0x66>
 800c120:	6829      	ldr	r1, [r5, #0]
 800c122:	291d      	cmp	r1, #29
 800c124:	d82c      	bhi.n	800c180 <__sflush_r+0xb8>
 800c126:	4a2a      	ldr	r2, [pc, #168]	; (800c1d0 <__sflush_r+0x108>)
 800c128:	40ca      	lsrs	r2, r1
 800c12a:	07d6      	lsls	r6, r2, #31
 800c12c:	d528      	bpl.n	800c180 <__sflush_r+0xb8>
 800c12e:	2200      	movs	r2, #0
 800c130:	6062      	str	r2, [r4, #4]
 800c132:	04d9      	lsls	r1, r3, #19
 800c134:	6922      	ldr	r2, [r4, #16]
 800c136:	6022      	str	r2, [r4, #0]
 800c138:	d504      	bpl.n	800c144 <__sflush_r+0x7c>
 800c13a:	1c42      	adds	r2, r0, #1
 800c13c:	d101      	bne.n	800c142 <__sflush_r+0x7a>
 800c13e:	682b      	ldr	r3, [r5, #0]
 800c140:	b903      	cbnz	r3, 800c144 <__sflush_r+0x7c>
 800c142:	6560      	str	r0, [r4, #84]	; 0x54
 800c144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c146:	602f      	str	r7, [r5, #0]
 800c148:	2900      	cmp	r1, #0
 800c14a:	d0ca      	beq.n	800c0e2 <__sflush_r+0x1a>
 800c14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c150:	4299      	cmp	r1, r3
 800c152:	d002      	beq.n	800c15a <__sflush_r+0x92>
 800c154:	4628      	mov	r0, r5
 800c156:	f000 f8fb 	bl	800c350 <_free_r>
 800c15a:	2000      	movs	r0, #0
 800c15c:	6360      	str	r0, [r4, #52]	; 0x34
 800c15e:	e7c1      	b.n	800c0e4 <__sflush_r+0x1c>
 800c160:	6a21      	ldr	r1, [r4, #32]
 800c162:	2301      	movs	r3, #1
 800c164:	4628      	mov	r0, r5
 800c166:	47b0      	blx	r6
 800c168:	1c41      	adds	r1, r0, #1
 800c16a:	d1c7      	bne.n	800c0fc <__sflush_r+0x34>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d0c4      	beq.n	800c0fc <__sflush_r+0x34>
 800c172:	2b1d      	cmp	r3, #29
 800c174:	d001      	beq.n	800c17a <__sflush_r+0xb2>
 800c176:	2b16      	cmp	r3, #22
 800c178:	d101      	bne.n	800c17e <__sflush_r+0xb6>
 800c17a:	602f      	str	r7, [r5, #0]
 800c17c:	e7b1      	b.n	800c0e2 <__sflush_r+0x1a>
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	e7ad      	b.n	800c0e4 <__sflush_r+0x1c>
 800c188:	690f      	ldr	r7, [r1, #16]
 800c18a:	2f00      	cmp	r7, #0
 800c18c:	d0a9      	beq.n	800c0e2 <__sflush_r+0x1a>
 800c18e:	0793      	lsls	r3, r2, #30
 800c190:	680e      	ldr	r6, [r1, #0]
 800c192:	bf08      	it	eq
 800c194:	694b      	ldreq	r3, [r1, #20]
 800c196:	600f      	str	r7, [r1, #0]
 800c198:	bf18      	it	ne
 800c19a:	2300      	movne	r3, #0
 800c19c:	eba6 0807 	sub.w	r8, r6, r7
 800c1a0:	608b      	str	r3, [r1, #8]
 800c1a2:	f1b8 0f00 	cmp.w	r8, #0
 800c1a6:	dd9c      	ble.n	800c0e2 <__sflush_r+0x1a>
 800c1a8:	6a21      	ldr	r1, [r4, #32]
 800c1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1ac:	4643      	mov	r3, r8
 800c1ae:	463a      	mov	r2, r7
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	47b0      	blx	r6
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	dc06      	bgt.n	800c1c6 <__sflush_r+0xfe>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	e78e      	b.n	800c0e4 <__sflush_r+0x1c>
 800c1c6:	4407      	add	r7, r0
 800c1c8:	eba8 0800 	sub.w	r8, r8, r0
 800c1cc:	e7e9      	b.n	800c1a2 <__sflush_r+0xda>
 800c1ce:	bf00      	nop
 800c1d0:	20400001 	.word	0x20400001

0800c1d4 <_fflush_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	690b      	ldr	r3, [r1, #16]
 800c1d8:	4605      	mov	r5, r0
 800c1da:	460c      	mov	r4, r1
 800c1dc:	b913      	cbnz	r3, 800c1e4 <_fflush_r+0x10>
 800c1de:	2500      	movs	r5, #0
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	b118      	cbz	r0, 800c1ee <_fflush_r+0x1a>
 800c1e6:	6983      	ldr	r3, [r0, #24]
 800c1e8:	b90b      	cbnz	r3, 800c1ee <_fflush_r+0x1a>
 800c1ea:	f7ff fa4f 	bl	800b68c <__sinit>
 800c1ee:	4b14      	ldr	r3, [pc, #80]	; (800c240 <_fflush_r+0x6c>)
 800c1f0:	429c      	cmp	r4, r3
 800c1f2:	d11b      	bne.n	800c22c <_fflush_r+0x58>
 800c1f4:	686c      	ldr	r4, [r5, #4]
 800c1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0ef      	beq.n	800c1de <_fflush_r+0xa>
 800c1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c200:	07d0      	lsls	r0, r2, #31
 800c202:	d404      	bmi.n	800c20e <_fflush_r+0x3a>
 800c204:	0599      	lsls	r1, r3, #22
 800c206:	d402      	bmi.n	800c20e <_fflush_r+0x3a>
 800c208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c20a:	f7ff fadd 	bl	800b7c8 <__retarget_lock_acquire_recursive>
 800c20e:	4628      	mov	r0, r5
 800c210:	4621      	mov	r1, r4
 800c212:	f7ff ff59 	bl	800c0c8 <__sflush_r>
 800c216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c218:	07da      	lsls	r2, r3, #31
 800c21a:	4605      	mov	r5, r0
 800c21c:	d4e0      	bmi.n	800c1e0 <_fflush_r+0xc>
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	059b      	lsls	r3, r3, #22
 800c222:	d4dd      	bmi.n	800c1e0 <_fflush_r+0xc>
 800c224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c226:	f7ff fad0 	bl	800b7ca <__retarget_lock_release_recursive>
 800c22a:	e7d9      	b.n	800c1e0 <_fflush_r+0xc>
 800c22c:	4b05      	ldr	r3, [pc, #20]	; (800c244 <_fflush_r+0x70>)
 800c22e:	429c      	cmp	r4, r3
 800c230:	d101      	bne.n	800c236 <_fflush_r+0x62>
 800c232:	68ac      	ldr	r4, [r5, #8]
 800c234:	e7df      	b.n	800c1f6 <_fflush_r+0x22>
 800c236:	4b04      	ldr	r3, [pc, #16]	; (800c248 <_fflush_r+0x74>)
 800c238:	429c      	cmp	r4, r3
 800c23a:	bf08      	it	eq
 800c23c:	68ec      	ldreq	r4, [r5, #12]
 800c23e:	e7da      	b.n	800c1f6 <_fflush_r+0x22>
 800c240:	0800c4d8 	.word	0x0800c4d8
 800c244:	0800c4f8 	.word	0x0800c4f8
 800c248:	0800c4b8 	.word	0x0800c4b8

0800c24c <_lseek_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4d07      	ldr	r5, [pc, #28]	; (800c26c <_lseek_r+0x20>)
 800c250:	4604      	mov	r4, r0
 800c252:	4608      	mov	r0, r1
 800c254:	4611      	mov	r1, r2
 800c256:	2200      	movs	r2, #0
 800c258:	602a      	str	r2, [r5, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	f7f5 fe72 	bl	8001f44 <_lseek>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_lseek_r+0x1e>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_lseek_r+0x1e>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20000868 	.word	0x20000868

0800c270 <__swhatbuf_r>:
 800c270:	b570      	push	{r4, r5, r6, lr}
 800c272:	460e      	mov	r6, r1
 800c274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c278:	2900      	cmp	r1, #0
 800c27a:	b096      	sub	sp, #88	; 0x58
 800c27c:	4614      	mov	r4, r2
 800c27e:	461d      	mov	r5, r3
 800c280:	da07      	bge.n	800c292 <__swhatbuf_r+0x22>
 800c282:	2300      	movs	r3, #0
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	89b3      	ldrh	r3, [r6, #12]
 800c288:	061a      	lsls	r2, r3, #24
 800c28a:	d410      	bmi.n	800c2ae <__swhatbuf_r+0x3e>
 800c28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c290:	e00e      	b.n	800c2b0 <__swhatbuf_r+0x40>
 800c292:	466a      	mov	r2, sp
 800c294:	f000 f8be 	bl	800c414 <_fstat_r>
 800c298:	2800      	cmp	r0, #0
 800c29a:	dbf2      	blt.n	800c282 <__swhatbuf_r+0x12>
 800c29c:	9a01      	ldr	r2, [sp, #4]
 800c29e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2a6:	425a      	negs	r2, r3
 800c2a8:	415a      	adcs	r2, r3
 800c2aa:	602a      	str	r2, [r5, #0]
 800c2ac:	e7ee      	b.n	800c28c <__swhatbuf_r+0x1c>
 800c2ae:	2340      	movs	r3, #64	; 0x40
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	b016      	add	sp, #88	; 0x58
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}

0800c2b8 <__smakebuf_r>:
 800c2b8:	898b      	ldrh	r3, [r1, #12]
 800c2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2bc:	079d      	lsls	r5, r3, #30
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	d507      	bpl.n	800c2d4 <__smakebuf_r+0x1c>
 800c2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	6123      	str	r3, [r4, #16]
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	6163      	str	r3, [r4, #20]
 800c2d0:	b002      	add	sp, #8
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	ab01      	add	r3, sp, #4
 800c2d6:	466a      	mov	r2, sp
 800c2d8:	f7ff ffca 	bl	800c270 <__swhatbuf_r>
 800c2dc:	9900      	ldr	r1, [sp, #0]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff fa73 	bl	800b7cc <_malloc_r>
 800c2e6:	b948      	cbnz	r0, 800c2fc <__smakebuf_r+0x44>
 800c2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ec:	059a      	lsls	r2, r3, #22
 800c2ee:	d4ef      	bmi.n	800c2d0 <__smakebuf_r+0x18>
 800c2f0:	f023 0303 	bic.w	r3, r3, #3
 800c2f4:	f043 0302 	orr.w	r3, r3, #2
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	e7e3      	b.n	800c2c4 <__smakebuf_r+0xc>
 800c2fc:	4b0d      	ldr	r3, [pc, #52]	; (800c334 <__smakebuf_r+0x7c>)
 800c2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	6020      	str	r0, [r4, #0]
 800c304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	9b00      	ldr	r3, [sp, #0]
 800c30c:	6163      	str	r3, [r4, #20]
 800c30e:	9b01      	ldr	r3, [sp, #4]
 800c310:	6120      	str	r0, [r4, #16]
 800c312:	b15b      	cbz	r3, 800c32c <__smakebuf_r+0x74>
 800c314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c318:	4630      	mov	r0, r6
 800c31a:	f000 f88d 	bl	800c438 <_isatty_r>
 800c31e:	b128      	cbz	r0, 800c32c <__smakebuf_r+0x74>
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	f043 0301 	orr.w	r3, r3, #1
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	89a0      	ldrh	r0, [r4, #12]
 800c32e:	4305      	orrs	r5, r0
 800c330:	81a5      	strh	r5, [r4, #12]
 800c332:	e7cd      	b.n	800c2d0 <__smakebuf_r+0x18>
 800c334:	0800b625 	.word	0x0800b625

0800c338 <__malloc_lock>:
 800c338:	4801      	ldr	r0, [pc, #4]	; (800c340 <__malloc_lock+0x8>)
 800c33a:	f7ff ba45 	b.w	800b7c8 <__retarget_lock_acquire_recursive>
 800c33e:	bf00      	nop
 800c340:	20000860 	.word	0x20000860

0800c344 <__malloc_unlock>:
 800c344:	4801      	ldr	r0, [pc, #4]	; (800c34c <__malloc_unlock+0x8>)
 800c346:	f7ff ba40 	b.w	800b7ca <__retarget_lock_release_recursive>
 800c34a:	bf00      	nop
 800c34c:	20000860 	.word	0x20000860

0800c350 <_free_r>:
 800c350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c352:	2900      	cmp	r1, #0
 800c354:	d048      	beq.n	800c3e8 <_free_r+0x98>
 800c356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c35a:	9001      	str	r0, [sp, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f1a1 0404 	sub.w	r4, r1, #4
 800c362:	bfb8      	it	lt
 800c364:	18e4      	addlt	r4, r4, r3
 800c366:	f7ff ffe7 	bl	800c338 <__malloc_lock>
 800c36a:	4a20      	ldr	r2, [pc, #128]	; (800c3ec <_free_r+0x9c>)
 800c36c:	9801      	ldr	r0, [sp, #4]
 800c36e:	6813      	ldr	r3, [r2, #0]
 800c370:	4615      	mov	r5, r2
 800c372:	b933      	cbnz	r3, 800c382 <_free_r+0x32>
 800c374:	6063      	str	r3, [r4, #4]
 800c376:	6014      	str	r4, [r2, #0]
 800c378:	b003      	add	sp, #12
 800c37a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c37e:	f7ff bfe1 	b.w	800c344 <__malloc_unlock>
 800c382:	42a3      	cmp	r3, r4
 800c384:	d90b      	bls.n	800c39e <_free_r+0x4e>
 800c386:	6821      	ldr	r1, [r4, #0]
 800c388:	1862      	adds	r2, r4, r1
 800c38a:	4293      	cmp	r3, r2
 800c38c:	bf04      	itt	eq
 800c38e:	681a      	ldreq	r2, [r3, #0]
 800c390:	685b      	ldreq	r3, [r3, #4]
 800c392:	6063      	str	r3, [r4, #4]
 800c394:	bf04      	itt	eq
 800c396:	1852      	addeq	r2, r2, r1
 800c398:	6022      	streq	r2, [r4, #0]
 800c39a:	602c      	str	r4, [r5, #0]
 800c39c:	e7ec      	b.n	800c378 <_free_r+0x28>
 800c39e:	461a      	mov	r2, r3
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	b10b      	cbz	r3, 800c3a8 <_free_r+0x58>
 800c3a4:	42a3      	cmp	r3, r4
 800c3a6:	d9fa      	bls.n	800c39e <_free_r+0x4e>
 800c3a8:	6811      	ldr	r1, [r2, #0]
 800c3aa:	1855      	adds	r5, r2, r1
 800c3ac:	42a5      	cmp	r5, r4
 800c3ae:	d10b      	bne.n	800c3c8 <_free_r+0x78>
 800c3b0:	6824      	ldr	r4, [r4, #0]
 800c3b2:	4421      	add	r1, r4
 800c3b4:	1854      	adds	r4, r2, r1
 800c3b6:	42a3      	cmp	r3, r4
 800c3b8:	6011      	str	r1, [r2, #0]
 800c3ba:	d1dd      	bne.n	800c378 <_free_r+0x28>
 800c3bc:	681c      	ldr	r4, [r3, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	6053      	str	r3, [r2, #4]
 800c3c2:	4421      	add	r1, r4
 800c3c4:	6011      	str	r1, [r2, #0]
 800c3c6:	e7d7      	b.n	800c378 <_free_r+0x28>
 800c3c8:	d902      	bls.n	800c3d0 <_free_r+0x80>
 800c3ca:	230c      	movs	r3, #12
 800c3cc:	6003      	str	r3, [r0, #0]
 800c3ce:	e7d3      	b.n	800c378 <_free_r+0x28>
 800c3d0:	6825      	ldr	r5, [r4, #0]
 800c3d2:	1961      	adds	r1, r4, r5
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	bf04      	itt	eq
 800c3d8:	6819      	ldreq	r1, [r3, #0]
 800c3da:	685b      	ldreq	r3, [r3, #4]
 800c3dc:	6063      	str	r3, [r4, #4]
 800c3de:	bf04      	itt	eq
 800c3e0:	1949      	addeq	r1, r1, r5
 800c3e2:	6021      	streq	r1, [r4, #0]
 800c3e4:	6054      	str	r4, [r2, #4]
 800c3e6:	e7c7      	b.n	800c378 <_free_r+0x28>
 800c3e8:	b003      	add	sp, #12
 800c3ea:	bd30      	pop	{r4, r5, pc}
 800c3ec:	20000094 	.word	0x20000094

0800c3f0 <_read_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d07      	ldr	r5, [pc, #28]	; (800c410 <_read_r+0x20>)
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	602a      	str	r2, [r5, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f7f5 fd5c 	bl	8001ebc <_read>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_read_r+0x1e>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_read_r+0x1e>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	20000868 	.word	0x20000868

0800c414 <_fstat_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d07      	ldr	r5, [pc, #28]	; (800c434 <_fstat_r+0x20>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	f7f5 fd74 	bl	8001f0e <_fstat>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d102      	bne.n	800c430 <_fstat_r+0x1c>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	b103      	cbz	r3, 800c430 <_fstat_r+0x1c>
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	bd38      	pop	{r3, r4, r5, pc}
 800c432:	bf00      	nop
 800c434:	20000868 	.word	0x20000868

0800c438 <_isatty_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	4d06      	ldr	r5, [pc, #24]	; (800c454 <_isatty_r+0x1c>)
 800c43c:	2300      	movs	r3, #0
 800c43e:	4604      	mov	r4, r0
 800c440:	4608      	mov	r0, r1
 800c442:	602b      	str	r3, [r5, #0]
 800c444:	f7f5 fd73 	bl	8001f2e <_isatty>
 800c448:	1c43      	adds	r3, r0, #1
 800c44a:	d102      	bne.n	800c452 <_isatty_r+0x1a>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	b103      	cbz	r3, 800c452 <_isatty_r+0x1a>
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	20000868 	.word	0x20000868

0800c458 <_init>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	bf00      	nop
 800c45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45e:	bc08      	pop	{r3}
 800c460:	469e      	mov	lr, r3
 800c462:	4770      	bx	lr

0800c464 <_fini>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	bf00      	nop
 800c468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c46a:	bc08      	pop	{r3}
 800c46c:	469e      	mov	lr, r3
 800c46e:	4770      	bx	lr
