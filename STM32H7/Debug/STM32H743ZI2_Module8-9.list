
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  080151f8  080151f8  000251f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017134  08017134  00027134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801713c  0801713c  0002713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08017144  08017144  00027144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000410  24000000  0801714c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001350  24000410  0801755c  00030410  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001760  0801755c  00031760  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030410  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c513  00000000  00000000  0003043e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049d0  00000000  00000000  0005c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00061328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  00062b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024fab  00000000  00000000  000a267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dd99  00000000  00000000  000c7625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002353be  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075ec  00000000  00000000  00235410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000410 	.word	0x24000410
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080151dc 	.word	0x080151dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000414 	.word	0x24000414
 80002dc:	080151dc 	.word	0x080151dc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e fc0e 	bl	800ef08 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fc9b 	bl	800f034 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00d f935 	bl	800dbe8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00d f92d 	bl	800dbe8 <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 360.0f;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009ec <_ZN10AS5047UABI11getDegAngleEv+0x38>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	44ffe000 	.word	0x44ffe000
 80009f0:	43b40000 	.word	0x43b40000

080009f4 <_ZN10AS5047UABI12getMRadAngleEv>:
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6280.0f;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a30 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	44ffe000 	.word	0x44ffe000
 8000a30:	45c44000 	.word	0x45c44000

08000a34 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a3e:	edc7 0a00 	vstr	s1, [r7]
 8000a42:	edd7 0a00 	vldr	s1, [r7]
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f010 fef9 	bl	8011840 <atan2f>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a6a:	f010 feeb 	bl	8011844 <sqrtf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	2002      	movs	r0, #2
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f000 fecb 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	2003      	movs	r0, #3
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f000 febc 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	2004      	movs	r0, #4
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	f000 fead 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <_ZN10RobotJointC1Ev+0xd8>)
 8000b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	3a83126f 	.word	0x3a83126f
 8000b54:	3dcccccd 	.word	0x3dcccccd

08000b58 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6278      	str	r0, [r7, #36]	; 0x24
 8000b78:	ed87 0a08 	vstr	s0, [r7, #32]
 8000b7c:	edc7 0a07 	vstr	s1, [r7, #28]
 8000b80:	ed87 1a06 	vstr	s2, [r7, #24]
 8000b84:	edc7 1a05 	vstr	s3, [r7, #20]
 8000b88:	ed87 2a04 	vstr	s4, [r7, #16]
 8000b8c:	edc7 2a03 	vstr	s5, [r7, #12]
 8000b90:	ed87 3a02 	vstr	s6, [r7, #8]
 8000b94:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)/1000.0);
 8000b98:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bac:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bb0:	eeb0 0b46 	vmov.f64	d0, d6
 8000bb4:	f010 fdf8 	bl	80117a8 <sin>
 8000bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)/1000.0);
 8000bc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000bc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bd8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000bdc:	eeb0 0b46 	vmov.f64	d0, d6
 8000be0:	f010 fd96 	bl	8011710 <cos>
 8000be4:	eeb0 7b40 	vmov.f64	d7, d0
 8000be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3/1000.0);
 8000bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf8:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000bfc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c00:	eeb0 0b46 	vmov.f64	d0, d6
 8000c04:	f010 fdd0 	bl	80117a8 <sin>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1/1000.0);
 8000c14:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c20:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c24:	eeb0 0b46 	vmov.f64	d0, d6
 8000c28:	f010 fdbe 	bl	80117a8 <sin>
 8000c2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c34:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1/1000.0);
 8000c38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c40:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8000da8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000c44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c48:	eeb0 0b46 	vmov.f64	d0, d6
 8000c4c:	f010 fd60 	bl	8011710 <cos>
 8000c50:	eeb0 7b40 	vmov.f64	d7, d0
 8000c54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000c5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c60:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12)) * 1000.0;
 8000c6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c84:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c88:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000c8c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 8000ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000caa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000cb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cbc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000cc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cc8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000ccc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000cd8:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cec:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000cf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d04:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d10:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8000dbc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000d14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d1c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d20:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000dc0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000d24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000d28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d38:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000db4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d40:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000d44:	ee77 7a67 	vsub.f32	s15, s14, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000d48:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d62:	edd7 6a03 	vldr	s13, [r7, #12]
 8000d66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d76:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000db0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000d7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000d7e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d86:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000d8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000da0:	bf00      	nop
 8000da2:	3740      	adds	r7, #64	; 0x40
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	00000000 	.word	0x00000000
 8000dac:	408f4000 	.word	0x408f4000
 8000db0:	439d8000 	.word	0x439d8000
 8000db4:	43bfa000 	.word	0x43bfa000
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	41540000 	.word	0x41540000
 8000dc0:	43b90000 	.word	0x43b90000

08000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b091      	sub	sp, #68	; 0x44
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	61f8      	str	r0, [r7, #28]
 8000dcc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000dd0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000dd4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000dd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ddc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000de0:	edc7 2a01 	vstr	s5, [r7, #4]
 8000de4:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000e0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000e1e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e32:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000e36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000e3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e46:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000e6a:	ed97 7a00 	vldr	s14, [r7]
 8000e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000eb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ebe:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ece:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000eda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ede:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ee6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000eea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ef6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efe:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f02:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000f16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f1a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f2a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000f3c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f44:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000f48:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000f4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f54:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f60:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000f64:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000f68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f70:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f78:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000f7c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f80:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000f96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000fa2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fa6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fae:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000fb2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fba:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000fbe:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000fc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fc6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fca:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fce:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fd6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000fda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fe2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000fe6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8001000:	bf00      	nop
 8001002:	3744      	adds	r7, #68	; 0x44
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 800100c:	b580      	push	{r7, lr}
 800100e:	ed2d 8b08 	vpush	{d8-d11}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800102a:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001032:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800103a:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001042:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800104a:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001052:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800105a:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	edd7 7a08 	vldr	s15, [r7, #32]
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8001076:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800107a:	edd7 7a00 	vldr	s15, [r7]
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 6a00 	vldr	s13, [r3]
 8001088:	edd7 7a08 	vldr	s15, [r7, #32]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	2004      	movs	r0, #4
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	f000 fbb3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ca:	eeb0 7b40 	vmov.f64	d7, d0
 80010ce:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80010d2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010da:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edd3 5a00 	vldr	s11, [r3]
 80010ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010f6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001106:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800110a:	ed97 7a07 	vldr	s14, [r7, #28]
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 6a00 	vldr	s13, [r3]
 800111c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800112c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001130:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	2004      	movs	r0, #4
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	f000 fb76 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001144:	eeb0 7b40 	vmov.f64	d7, d0
 8001148:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800114c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001150:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001154:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 5a00 	vldr	s11, [r3]
 8001164:	edd7 7a04 	vldr	s15, [r7, #16]
 8001168:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800116c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001170:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800117c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001180:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8001184:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8001192:	edd7 7a08 	vldr	s15, [r7, #32]
 8001196:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	2003      	movs	r0, #3
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	f000 fb3f 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011b2:	eeb0 7b40 	vmov.f64	d7, d0
 80011b6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80011ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011be:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80011e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011e8:	edd7 7a00 	vldr	s15, [r7]
 80011ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 5a00 	vldr	s11, [r3]
 80011f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80011fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001206:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800120a:	ed97 7a07 	vldr	s14, [r7, #28]
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 6a00 	vldr	s13, [r3]
 800121c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800122c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001230:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	2004      	movs	r0, #4
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	f000 faf6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001244:	eeb0 7b40 	vmov.f64	d7, d0
 8001248:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800124c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001254:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 5a00 	vldr	s11, [r3]
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800126c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001270:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001278:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800127c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001280:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001284:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	edd7 7a05 	vldr	s15, [r7, #20]
 800129c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	2004      	movs	r0, #4
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f000 fab6 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012c4:	eeb0 7b40 	vmov.f64	d7, d0
 80012c8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80012cc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012d4:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 5a00 	vldr	s11, [r3]
 80012e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80012f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fc:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001300:	ed97 7a07 	vldr	s14, [r7, #28]
 8001304:	edd7 7a02 	vldr	s15, [r7, #8]
 8001308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edd3 6a00 	vldr	s13, [r3]
 8001312:	edd7 7a05 	vldr	s15, [r7, #20]
 8001316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	2004      	movs	r0, #4
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	f000 fa7b 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800133a:	eeb0 7b40 	vmov.f64	d7, d0
 800133e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001342:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001346:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800134a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 5a00 	vldr	s11, [r3]
 800135a:	edd7 7a04 	vldr	s15, [r7, #16]
 800135e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001362:	edd7 7a06 	vldr	s15, [r7, #24]
 8001366:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001372:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001376:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800137a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800137e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001382:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	2004      	movs	r0, #4
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	f000 fa3c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013b8:	eeb0 7b40 	vmov.f64	d7, d0
 80013bc:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80013c0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013c8:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7a00 	vldr	s14, [r3]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 5a00 	vldr	s11, [r3]
 80013d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f0:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80013f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7a00 	vldr	s14, [r3]
 8001408:	edd7 7a05 	vldr	s15, [r7, #20]
 800140c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001410:	edd7 7a07 	vldr	s15, [r7, #28]
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	2004      	movs	r0, #4
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 f9fe 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001434:	eeb0 7b40 	vmov.f64	d7, d0
 8001438:	ee29 6b07 	vmul.f64	d6, d9, d7
 800143c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001444:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 5a00 	vldr	s11, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800146c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001470:	ed97 7a07 	vldr	s14, [r7, #28]
 8001474:	edd7 7a02 	vldr	s15, [r7, #8]
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a05 	vldr	s15, [r7, #20]
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001492:	edd7 7a03 	vldr	s15, [r7, #12]
 8001496:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	2004      	movs	r0, #4
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	f000 f9c3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014aa:	eeb0 7b40 	vmov.f64	d7, d0
 80014ae:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80014b2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ba:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	edd3 5a00 	vldr	s11, [r3]
 80014ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e2:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014e6:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80014ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80014ee:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014f2:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80014f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	2003      	movs	r0, #3
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	f000 f991 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800150e:	eeb0 7b40 	vmov.f64	d7, d0
 8001512:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001516:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800151a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001540:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001544:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	edd7 7a04 	vldr	s15, [r7, #16]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001568:	edd7 7a03 	vldr	s15, [r7, #12]
 800156c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	2003      	movs	r0, #3
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f000 f958 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	eeb0 7b40 	vmov.f64	d7, d0
 8001584:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	2003      	movs	r0, #3
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f000 f942 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015ac:	eeb0 7b40 	vmov.f64	d7, d0
 80015b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80015b8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015da:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	2004      	movs	r0, #4
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f000 f910 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001610:	eeb0 7b40 	vmov.f64	d7, d0
 8001614:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001618:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800161c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001620:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ed93 7a00 	vldr	s14, [r3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 5a00 	vldr	s11, [r3]
 8001630:	edd7 7a04 	vldr	s15, [r7, #16]
 8001634:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001638:	edd7 7a06 	vldr	s15, [r7, #24]
 800163c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001648:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800164c:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001650:	ed97 7a07 	vldr	s14, [r7, #28]
 8001654:	edd7 7a02 	vldr	s15, [r7, #8]
 8001658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 6a00 	vldr	s13, [r3]
 8001662:	edd7 7a05 	vldr	s15, [r7, #20]
 8001666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	2004      	movs	r0, #4
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	f000 f8d3 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800168a:	eeb0 7b40 	vmov.f64	d7, d0
 800168e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001692:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169a:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 5a00 	vldr	s11, [r3]
 80016aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016b6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c2:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016c6:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80016ca:	ee38 7b47 	vsub.f64	d7, d8, d7
 80016ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	2002      	movs	r0, #2
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	f000 f89c 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016f8:	eeb0 7b40 	vmov.f64	d7, d0
 80016fc:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001700:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	2003      	movs	r0, #3
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f000 f88a 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800171c:	eeb0 7b40 	vmov.f64	d7, d0
 8001720:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001724:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001728:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	edd7 7a04 	vldr	s15, [r7, #16]
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800173e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001742:	edd7 7a06 	vldr	s15, [r7, #24]
 8001746:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800174a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800174e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001752:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	2003      	movs	r0, #3
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f000 f865 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001766:	eeb0 7b40 	vmov.f64	d7, d0
 800176a:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800176e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001772:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001788:	ee36 6b07 	vadd.f64	d6, d6, d7
 800178c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001790:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001794:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001798:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800179c:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	2004      	movs	r0, #4
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	f000 f82d 	bl	8001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017d6:	eeb0 7b40 	vmov.f64	d7, d0
 80017da:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80017de:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80017e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e6:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 5a00 	vldr	s11, [r3]
 80017f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001802:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001812:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001816:	ee38 7b47 	vsub.f64	d7, d8, d7
 800181a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	ecbd 8b08 	vpop	{d8-d11}
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0a01 	vstr	s0, [r7, #4]
 800183a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800183c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	ee06 3a90 	vmov	s13, r3
 800184a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800184e:	eeb0 1b46 	vmov.f64	d1, d6
 8001852:	eeb0 0b47 	vmov.f64	d0, d7
 8001856:	f00f fd07 	bl	8011268 <pow>
 800185a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800185e:	eeb0 0b47 	vmov.f64	d0, d7
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001872:	edd7 7a01 	vldr	s15, [r7, #4]
 8001876:	fefb 7a67 	vrintm.f32	s15, s15
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001892:	edd7 7a01 	vldr	s15, [r7, #4]
 8001896:	fef8 7a67 	vrinta.f32	s15, s15
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	22b4      	movs	r2, #180	; 0xb4
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	761a      	strb	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	22ef      	movs	r2, #239	; 0xef
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
}
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f00b ffa5 	bl	800d880 <HAL_TIM_PWM_Start>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d13f      	bne.n	80019d2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691c      	ldr	r4, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	3301      	adds	r3, #1
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eeb0 0a67 	vmov.f32	s0, s15
 8001978:	f7ff ff86 	bl	8001888 <_ZSt5roundf>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	3301      	adds	r3, #1
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800199e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff ff5f 	bl	8001868 <_ZSt5floorf>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 3a90 	vmov	r3, s15
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	462b      	mov	r3, r5
 80019bc:	4622      	mov	r2, r4
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f9cf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80019d0:	e176      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d13f      	bne.n	8001a5a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691c      	ldr	r4, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f7ff ff42 	bl	8001888 <_ZSt5roundf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	3301      	adds	r3, #1
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	f7ff ff1b 	bl	8001868 <_ZSt5floorf>
 8001a32:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9600      	str	r6, [sp, #0]
 8001a42:	462b      	mov	r3, r5
 8001a44:	4622      	mov	r2, r4
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f98b 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a58:	e132      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d13f      	bne.n	8001ae2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691c      	ldr	r4, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	3301      	adds	r3, #1
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f7ff fefe 	bl	8001888 <_ZSt5roundf>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aaa:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	f7ff fed7 	bl	8001868 <_ZSt5floorf>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9600      	str	r6, [sp, #0]
 8001aca:	462b      	mov	r3, r5
 8001acc:	4622      	mov	r2, r4
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f947 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ae0:	e0ee      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d13f      	bne.n	8001b6a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691c      	ldr	r4, [r3, #16]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	3301      	adds	r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b10:	f7ff feba 	bl	8001888 <_ZSt5roundf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b32:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3e:	f7ff fe93 	bl	8001868 <_ZSt5floorf>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4a:	ee17 3a90 	vmov	r3, s15
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	9600      	str	r6, [sp, #0]
 8001b52:	462b      	mov	r3, r5
 8001b54:	4622      	mov	r2, r4
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f903 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b68:	e0aa      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d144      	bne.n	8001bfc <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691c      	ldr	r4, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	3301      	adds	r3, #1
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	f7ff fe76 	bl	8001888 <_ZSt5roundf>
 8001b9c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f7ff fe4f 	bl	8001868 <_ZSt5floorf>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	9600      	str	r6, [sp, #0]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	4622      	mov	r2, r4
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8bf 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bf0:	e066      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001bf2:	bf00      	nop
 8001bf4:	3d4ccccd 	.word	0x3d4ccccd
 8001bf8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b14      	cmp	r3, #20
 8001c02:	d13f      	bne.n	8001c84 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691c      	ldr	r4, [r3, #16]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	3301      	adds	r3, #1
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001bf4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f7ff fe2d 	bl	8001888 <_ZSt5roundf>
 8001c2e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c36:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	3301      	adds	r3, #1
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001bf8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	f7ff fe06 	bl	8001868 <_ZSt5floorf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9600      	str	r6, [sp, #0]
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	4622      	mov	r2, r4
 8001c70:	6839      	ldr	r1, [r7, #0]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f876 	bl	8001d64 <_ZN10ServoMotor10GripperMapElllll>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c82:	e01d      	b.n	8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	761a      	strb	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	765a      	strb	r2, [r3, #25]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e5b      	ldrb	r3, [r3, #25]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe09 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d2e:	e000      	b.n	8001d32 <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001d30:	bf00      	nop
}
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fdf3 	bl	8001940 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001d5a:	e000      	b.n	8001d5e <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001d5c:	bf00      	nop
}
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	69f9      	ldr	r1, [r7, #28]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	1a8a      	subs	r2, r1, r2
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ddc:	61da      	str	r2, [r3, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	22c7      	movs	r2, #199	; 0xc7
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e08:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001e0e:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001e10:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001e3c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f82f 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	60da      	str	r2, [r3, #12]
}
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	41a00000 	.word	0x41a00000
 8001e34:	469c4000 	.word	0x469c4000
 8001e38:	43480000 	.word	0x43480000
 8001e3c:	00000000 	.word	0x00000000

08001e40 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
}
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f00b fd09 	bl	800d880 <HAL_TIM_PWM_Start>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	ed2d 8b02 	vpush	{d8}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff80 	bl	8001d9c <_ZSt4fabsf>
 8001e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e01b      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7ff ff66 	bl	8001d9c <_ZSt4fabsf>
 8001ed0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	bfac      	ite	ge
 8001ee4:	2301      	movge	r3, #1
 8001ee6:	2300      	movlt	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e001      	b.n	8001efa <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f00:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800219c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	f2c0 80db 	blt.w	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f008 fbdd 	bl	800a6dc <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f50:	f7ff fc9a 	bl	8001888 <_ZSt5roundf>
 8001f54:	eef0 7a40 	vmov.f32	s15, s0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f62:	ee17 2a90 	vmov	r2, s15
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa5b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f82:	eeb0 7b40 	vmov.f64	d7, d0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f90:	ee17 2a90 	vmov	r2, s15
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001f96:	e1e0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d113      	bne.n	8001fc8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa43 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fc0:	ee17 2a90 	vmov	r2, s15
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fc6:	e1c8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d113      	bne.n	8001ff8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fa2b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ff0:	ee17 2a90 	vmov	r2, s15
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ff6:	e1b0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d113      	bne.n	8002028 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fa13 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002012:	eeb0 7b40 	vmov.f64	d7, d0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002020:	ee17 2a90 	vmov	r2, s15
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002026:	e198      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b10      	cmp	r3, #16
 800202e:	d113      	bne.n	8002058 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f9fb 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002042:	eeb0 7b40 	vmov.f64	d7, d0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002050:	ee17 2a90 	vmov	r2, s15
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002056:	e180      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b14      	cmp	r3, #20
 800205e:	d113      	bne.n	8002088 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f9e3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002072:	eeb0 7b40 	vmov.f64	d7, d0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002080:	ee17 2a90 	vmov	r2, s15
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002086:	e168      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020c4:	e149      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80020cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80021a4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	f200 80e5 	bhi.w	80022a6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f008 faf7 	bl	800a6dc <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	3301      	adds	r3, #1
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002100:	ed97 0a03 	vldr	s0, [r7, #12]
 8002104:	f7ff fe4a 	bl	8001d9c <_ZSt4fabsf>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002110:	eddf 6a23 	vldr	s13, [pc, #140]	; 80021a0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8002114:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	eeb0 0a67 	vmov.f32	s0, s15
 8002124:	f7ff fbb0 	bl	8001888 <_ZSt5roundf>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002136:	ee17 2a90 	vmov	r2, s15
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d113      	bne.n	800216c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f971 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002156:	eeb0 7b40 	vmov.f64	d7, d0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002164:	ee17 2a90 	vmov	r2, s15
 8002168:	635a      	str	r2, [r3, #52]	; 0x34
}
 800216a:	e0f6      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d119      	bne.n	80021a8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f959 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002186:	eeb0 7b40 	vmov.f64	d7, d0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
}
 800219a:	e0de      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 800219c:	3a83126f 	.word	0x3a83126f
 80021a0:	4d64e1c0 	.word	0x4d64e1c0
 80021a4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d113      	bne.n	80021d8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f93b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021c2:	eeb0 7b40 	vmov.f64	d7, d0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021d0:	ee17 2a90 	vmov	r2, s15
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021d6:	e0c0      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d113      	bne.n	8002208 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f923 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80021f2:	eeb0 7b40 	vmov.f64	d7, d0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002206:	e0a8      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b10      	cmp	r3, #16
 800220e:	d113      	bne.n	8002238 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f90b 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002222:	eeb0 7b40 	vmov.f64	d7, d0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002230:	ee17 2a90 	vmov	r2, s15
 8002234:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002236:	e090      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b14      	cmp	r3, #20
 800223e:	d113      	bne.n	8002268 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f8f3 	bl	8002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002252:	eeb0 7b40 	vmov.f64	d7, d0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002260:	ee17 2a90 	vmov	r2, s15
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002266:	e078      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80022a4:	e059      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022b8:	e04f      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d105      	bne.n	80022ce <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022cc:	e045      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d105      	bne.n	80022e2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022e0:	e03b      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d105      	bne.n	80022f6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022f4:	e031      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d105      	bne.n	800230a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002308:	e027      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b14      	cmp	r3, #20
 8002310:	d105      	bne.n	800231e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800231c:	e01d      	b.n	800235a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	ecbd 8b02 	vpop	{d8}
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002374:	ed97 0a00 	vldr	s0, [r7]
 8002378:	f7ff fd10 	bl	8001d9c <_ZSt4fabsf>
 800237c:	eef0 7a40 	vmov.f32	s15, s0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023a2:	eeb0 0b47 	vmov.f64	d0, d7
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffe5 	bl	800238e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80023c4:	eeb0 7b40 	vmov.f64	d7, d0
 80023c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	0000      	movs	r0, r0
 80023dc:	0000      	movs	r0, r0
	...

080023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80023f2:	edd7 7a00 	vldr	s15, [r7]
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	edd3 7a08 	vldr	s15, [r3, #32]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 8002412:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002430 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 8002416:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800241a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fd28 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	704a95d1 	.word	0x704a95d1
 8002434:	40b88b2f 	.word	0x40b88b2f

08002438 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800244a:	eeb0 0b47 	vmov.f64	d0, d7
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MX_CRC_Init+0x54>)
 800245e:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <MX_CRC_Init+0x58>)
 8002460:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <MX_CRC_Init+0x54>)
 8002464:	2201      	movs	r2, #1
 8002466:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_CRC_Init+0x54>)
 800246a:	2201      	movs	r2, #1
 800246c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <MX_CRC_Init+0x54>)
 8002470:	f248 0205 	movw	r2, #32773	; 0x8005
 8002474:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <MX_CRC_Init+0x54>)
 8002478:	2208      	movs	r2, #8
 800247a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_CRC_Init+0x54>)
 800247e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002482:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_CRC_Init+0x54>)
 8002486:	2220      	movs	r2, #32
 8002488:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_CRC_Init+0x54>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_CRC_Init+0x54>)
 8002492:	2201      	movs	r2, #1
 8002494:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_CRC_Init+0x54>)
 8002498:	f004 ff36 	bl	8007308 <HAL_CRC_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80024a2:	f002 fcdf 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2400042c 	.word	0x2400042c
 80024b0:	58024c00 	.word	0x58024c00

080024b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_CRC_MspInit+0x3c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <HAL_CRC_MspInit+0x40>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	58024c00 	.word	0x58024c00
 80024f4:	58024400 	.word	0x58024400

080024f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002504:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <MX_DMA_Init+0xdc>)
 800251e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002522:	4a2c      	ldr	r2, [pc, #176]	; (80025d4 <MX_DMA_Init+0xdc>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <MX_DMA_Init+0xdc>)
 800252e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200b      	movs	r0, #11
 8002540:	f004 fea1 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002544:	200b      	movs	r0, #11
 8002546:	f004 feb8 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	200c      	movs	r0, #12
 8002550:	f004 fe99 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002554:	200c      	movs	r0, #12
 8002556:	f004 feb0 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	200d      	movs	r0, #13
 8002560:	f004 fe91 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002564:	200d      	movs	r0, #13
 8002566:	f004 fea8 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200e      	movs	r0, #14
 8002570:	f004 fe89 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002574:	200e      	movs	r0, #14
 8002576:	f004 fea0 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200f      	movs	r0, #15
 8002580:	f004 fe81 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002584:	200f      	movs	r0, #15
 8002586:	f004 fe98 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2010      	movs	r0, #16
 8002590:	f004 fe79 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002594:	2010      	movs	r0, #16
 8002596:	f004 fe90 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2011      	movs	r0, #17
 80025a0:	f004 fe71 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80025a4:	2011      	movs	r0, #17
 80025a6:	f004 fe88 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	202f      	movs	r0, #47	; 0x2f
 80025b0:	f004 fe69 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80025b4:	202f      	movs	r0, #47	; 0x2f
 80025b6:	f004 fe80 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2038      	movs	r0, #56	; 0x38
 80025c0:	f004 fe61 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025c4:	2038      	movs	r0, #56	; 0x38
 80025c6:	f004 fe78 	bl	80072ba <HAL_NVIC_EnableIRQ>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400

080025d8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ee:	4b87      	ldr	r3, [pc, #540]	; (800280c <MX_GPIO_Init+0x234>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	4a85      	ldr	r2, [pc, #532]	; (800280c <MX_GPIO_Init+0x234>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fe:	4b83      	ldr	r3, [pc, #524]	; (800280c <MX_GPIO_Init+0x234>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	4b7f      	ldr	r3, [pc, #508]	; (800280c <MX_GPIO_Init+0x234>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	4a7e      	ldr	r2, [pc, #504]	; (800280c <MX_GPIO_Init+0x234>)
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <MX_GPIO_Init+0x234>)
 800261e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <MX_GPIO_Init+0x234>)
 800262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <MX_GPIO_Init+0x234>)
 8002632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800263a:	4b74      	ldr	r3, [pc, #464]	; (800280c <MX_GPIO_Init+0x234>)
 800263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b70      	ldr	r3, [pc, #448]	; (800280c <MX_GPIO_Init+0x234>)
 800264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264e:	4a6f      	ldr	r2, [pc, #444]	; (800280c <MX_GPIO_Init+0x234>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002658:	4b6c      	ldr	r3, [pc, #432]	; (800280c <MX_GPIO_Init+0x234>)
 800265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <MX_GPIO_Init+0x234>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <MX_GPIO_Init+0x234>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <MX_GPIO_Init+0x234>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <MX_GPIO_Init+0x234>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268a:	4a60      	ldr	r2, [pc, #384]	; (800280c <MX_GPIO_Init+0x234>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <MX_GPIO_Init+0x234>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026a2:	4b5a      	ldr	r3, [pc, #360]	; (800280c <MX_GPIO_Init+0x234>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <MX_GPIO_Init+0x234>)
 80026aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4b56      	ldr	r3, [pc, #344]	; (800280c <MX_GPIO_Init+0x234>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026c0:	2200      	movs	r2, #0
 80026c2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80026c6:	4852      	ldr	r0, [pc, #328]	; (8002810 <MX_GPIO_Init+0x238>)
 80026c8:	f008 f808 	bl	800a6dc <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f24c 0102 	movw	r1, #49154	; 0xc002
 80026d2:	4850      	ldr	r0, [pc, #320]	; (8002814 <MX_GPIO_Init+0x23c>)
 80026d4:	f008 f802 	bl	800a6dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026de:	484e      	ldr	r0, [pc, #312]	; (8002818 <MX_GPIO_Init+0x240>)
 80026e0:	f007 fffc 	bl	800a6dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	484c      	ldr	r0, [pc, #304]	; (800281c <MX_GPIO_Init+0x244>)
 80026ec:	f007 fff6 	bl	800a6dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f6:	484a      	ldr	r0, [pc, #296]	; (8002820 <MX_GPIO_Init+0x248>)
 80026f8:	f007 fff0 	bl	800a6dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80026fc:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002700:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	483e      	ldr	r0, [pc, #248]	; (8002810 <MX_GPIO_Init+0x238>)
 8002716:	f007 fe31 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 800271a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800271e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4838      	ldr	r0, [pc, #224]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002732:	f007 fe23 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002736:	f24c 0302 	movw	r3, #49154	; 0xc002
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4831      	ldr	r0, [pc, #196]	; (8002814 <MX_GPIO_Init+0x23c>)
 8002750:	f007 fe14 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	482a      	ldr	r0, [pc, #168]	; (8002818 <MX_GPIO_Init+0x240>)
 800276e:	f007 fe05 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4824      	ldr	r0, [pc, #144]	; (800281c <MX_GPIO_Init+0x244>)
 800278c:	f007 fdf6 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	481d      	ldr	r0, [pc, #116]	; (8002820 <MX_GPIO_Init+0x248>)
 80027aa:	f007 fde7 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 80027ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4817      	ldr	r0, [pc, #92]	; (8002824 <MX_GPIO_Init+0x24c>)
 80027c6:	f007 fdd9 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 80027ca:	23c0      	movs	r3, #192	; 0xc0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <MX_GPIO_Init+0x238>)
 80027e0:	f007 fdcc 	bl	800a37c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2017      	movs	r0, #23
 80027ea:	f004 fd4c 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ee:	2017      	movs	r0, #23
 80027f0:	f004 fd63 	bl	80072ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2028      	movs	r0, #40	; 0x28
 80027fa:	f004 fd44 	bl	8007286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027fe:	2028      	movs	r0, #40	; 0x28
 8002800:	f004 fd5b 	bl	80072ba <HAL_NVIC_EnableIRQ>

}
 8002804:	bf00      	nop
 8002806:	3730      	adds	r7, #48	; 0x30
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	58020400 	.word	0x58020400
 8002814:	58021000 	.word	0x58021000
 8002818:	58020c00 	.word	0x58020c00
 800281c:	58020800 	.word	0x58020800
 8002820:	58020000 	.word	0x58020000
 8002824:	58021800 	.word	0x58021800

08002828 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b13      	cmp	r3, #19
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <_Z12Insert_queueii+0x20>
		return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e01e      	b.n	8002886 <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_Z12Insert_queueii+0x70>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <_Z12Insert_queueii+0x3a>
			first = 0;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_Z12Insert_queueii+0x70>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
		}
		bot++;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <_Z12Insert_queueii+0x6c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286a:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	490a      	ldr	r1, [pc, #40]	; (800289c <_Z12Insert_queueii+0x74>)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <_Z12Insert_queueii+0x6c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4908      	ldr	r1, [pc, #32]	; (80028a0 <_Z12Insert_queueii+0x78>)
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8002884:	2301      	movs	r3, #1
	}
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2400000c 	.word	0x2400000c
 8002898:	24000008 	.word	0x24000008
 800289c:	24000b48 	.word	0x24000b48
 80028a0:	24000b98 	.word	0x24000b98

080028a4 <_Z10Call_queuev>:

int Call_queue() {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <_Z10Call_queuev+0x94>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b2:	d005      	beq.n	80028c0 <_Z10Call_queuev+0x1c>
 80028b4:	4b20      	ldr	r3, [pc, #128]	; (8002938 <_Z10Call_queuev+0x94>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <_Z10Call_queuev+0x98>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dd01      	ble.n	80028c4 <_Z10Call_queuev+0x20>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <_Z10Call_queuev+0x22>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d026      	beq.n	8002918 <_Z10Call_queuev+0x74>
		printf("Don't have stack in queue \n");
 80028ca:	481d      	ldr	r0, [pc, #116]	; (8002940 <_Z10Call_queuev+0x9c>)
 80028cc:	f010 fc54 	bl	8013178 <puts>
		for (int num = 0; num <= bot + 1; num++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <_Z10Call_queuev+0x98>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bfd4      	ite	le
 80028e0:	2301      	movle	r3, #1
 80028e2:	2300      	movgt	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <_Z10Call_queuev+0x58>
			queue[num] = 0;
 80028ea:	4a16      	ldr	r2, [pc, #88]	; (8002944 <_Z10Call_queuev+0xa0>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2100      	movs	r1, #0
 80028f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	e7eb      	b.n	80028d4 <_Z10Call_queuev+0x30>
		}
		first = -1;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <_Z10Call_queuev+0x94>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002902:	601a      	str	r2, [r3, #0]
		bot = -1;
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <_Z10Call_queuev+0x98>)
 8002906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290a:	601a      	str	r2, [r3, #0]
		printf("Clear queue \n");
 800290c:	480e      	ldr	r0, [pc, #56]	; (8002948 <_Z10Call_queuev+0xa4>)
 800290e:	f010 fc33 	bl	8013178 <puts>
		output = 255;
 8002912:	23ff      	movs	r3, #255	; 0xff
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e00a      	b.n	800292e <_Z10Call_queuev+0x8a>
	} else {
		output = queue[first];
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_Z10Call_queuev+0x94>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <_Z10Call_queuev+0xa0>)
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	607b      	str	r3, [r7, #4]
		first++;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <_Z10Call_queuev+0x94>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a03      	ldr	r2, [pc, #12]	; (8002938 <_Z10Call_queuev+0x94>)
 800292c:	6013      	str	r3, [r2, #0]
	}
	return output;
 800292e:	687b      	ldr	r3, [r7, #4]

}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	24000008 	.word	0x24000008
 800293c:	2400000c 	.word	0x2400000c
 8002940:	080151f8 	.word	0x080151f8
 8002944:	24000b48 	.word	0x24000b48
 8002948:	08015214 	.word	0x08015214

0800294c <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	; 0x48
 8002950:	af00      	add	r7, sp, #0
 8002952:	ed87 0a03 	vstr	s0, [r7, #12]
 8002956:	edc7 0a02 	vstr	s1, [r7, #8]
 800295a:	ed87 1a01 	vstr	s2, [r7, #4]
 800295e:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 8002962:	ed97 7a03 	vldr	s14, [r7, #12]
 8002966:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800296a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	eddf 6a74 	vldr	s13, [pc, #464]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800297a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800297e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 8002982:	ed97 7a01 	vldr	s14, [r7, #4]
 8002986:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 8002992:	ed97 7a00 	vldr	s14, [r7]
 8002996:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 800299a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 80029a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029b8:	edd3 6a00 	vldr	s13, [r3]
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ca:	4b61      	ldr	r3, [pc, #388]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029cc:	edd3 6a00 	vldr	s13, [r3]
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 80029fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	f7fe f825 	bl	8000a5c <_ZSt4sqrtf>
 8002a12:	eef0 7a40 	vmov.f32	s15, s0
 8002a16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1a:	eeb1 7b47 	vneg.f64	d7, d7
 8002a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a22:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 8002a26:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8002a2a:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002a2e:	f7fe f801 	bl	8000a34 <_ZSt5atan2ff>
 8002a32:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 8002a48:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <_Z6fcb_IKffff+0x204>)
 8002a4a:	ed93 7a00 	vldr	s14, [r3]
 8002a4e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <_Z6fcb_IKffff+0x200>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 8002a64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a68:	eeb1 7a67 	vneg.f32	s14, s15
 8002a6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a74:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a78:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002a88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002aa8:	edd7 0a07 	vldr	s1, [r7, #28]
 8002aac:	ed97 0a08 	vldr	s0, [r7, #32]
 8002ab0:	f7fd ffc0 	bl	8000a34 <_ZSt5atan2ff>
 8002ab4:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002ab8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002abc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <_Z6fcb_IKffff+0x208>)
 8002ad2:	ed93 7a00 	vldr	s14, [r3]
 8002ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <_Z6fcb_IKffff+0x20c>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <_Z6fcb_IKffff+0x210>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af2:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 8002af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <_Z6fcb_IKffff+0x214>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 8002b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b0c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_Z6fcb_IKffff+0x218>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 8002b1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b1e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <_Z6fcb_IKffff+0x21c>)
 8002b28:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 8002b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b30:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b48 <_Z6fcb_IKffff+0x1fc>
 8002b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <_Z6fcb_IKffff+0x220>)
 8002b3a:	edc3 7a00 	vstr	s15, [r3]

}
 8002b3e:	bf00      	nop
 8002b40:	3748      	adds	r7, #72	; 0x48
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	447a0000 	.word	0x447a0000
 8002b4c:	24000218 	.word	0x24000218
 8002b50:	24000214 	.word	0x24000214
 8002b54:	24000224 	.word	0x24000224
 8002b58:	24000220 	.word	0x24000220
 8002b5c:	2400021c 	.word	0x2400021c
 8002b60:	24000bfc 	.word	0x24000bfc
 8002b64:	24000c00 	.word	0x24000c00
 8002b68:	24000c04 	.word	0x24000c04
 8002b6c:	24000c08 	.word	0x24000c08

08002b70 <_Z20Update_State_Machinev>:
float offset_y = 9.5; //10.79371
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
void Update_State_Machine() {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	ed2d 8b02 	vpush	{d8}
 8002b76:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <_Z20Update_State_Machinev+0xac>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3b29      	subs	r3, #41	; 0x29
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	f200 83e0 	bhi.w	8003346 <_Z20Update_State_Machinev+0x7d6>
 8002b86:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <_Z20Update_State_Machinev+0x1c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002bcd 	.word	0x08002bcd
 8002b90:	08002eed 	.word	0x08002eed
 8002b94:	08002fe5 	.word	0x08002fe5
 8002b98:	08003347 	.word	0x08003347
 8002b9c:	08003347 	.word	0x08003347
 8002ba0:	08003347 	.word	0x08003347
 8002ba4:	08003347 	.word	0x08003347
 8002ba8:	08003347 	.word	0x08003347
 8002bac:	08003347 	.word	0x08003347
 8002bb0:	08003347 	.word	0x08003347
 8002bb4:	08003355 	.word	0x08003355
 8002bb8:	08003041 	.word	0x08003041
 8002bbc:	08003355 	.word	0x08003355
 8002bc0:	0800315d 	.word	0x0800315d
 8002bc4:	08003355 	.word	0x08003355
 8002bc8:	080032a1 	.word	0x080032a1
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002bcc:	f7ff fe6a 	bl	80028a4 <_Z10Call_queuev>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd4:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	f000 817d 	beq.w	8002eda <_Z20Update_State_Machinev+0x36a>
		{
			if (indexy == 99)
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b63      	cmp	r3, #99	; 0x63
 8002be6:	d10a      	bne.n	8002bfe <_Z20Update_State_Machinev+0x8e>
				{
					Planning_q1 = 1400;
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <_Z20Update_State_Machinev+0xb8>)
 8002bec:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1400;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <_Z20Update_State_Machinev+0xc0>)
 8002bf2:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e10e      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
				}
			else if (indexy == 123)
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <_Z20Update_State_Machinev+0xb0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b7b      	cmp	r3, #123	; 0x7b
 8002c04:	d11c      	bne.n	8002c40 <_Z20Update_State_Machinev+0xd0>
			{
					Planning_q1 = 1100;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_Z20Update_State_Machinev+0xb4>)
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <_Z20Update_State_Machinev+0xc8>)
 8002c0a:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_Z20Update_State_Machinev+0xbc>)
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <_Z20Update_State_Machinev+0xcc>)
 8002c10:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_Z20Update_State_Machinev+0xc4>)
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e0ff      	b.n	8002e1c <_Z20Update_State_Machinev+0x2ac>
 8002c1c:	24000bf0 	.word	0x24000bf0
 8002c20:	24000c14 	.word	0x24000c14
 8002c24:	24000bfc 	.word	0x24000bfc
 8002c28:	44af0000 	.word	0x44af0000
 8002c2c:	24000c04 	.word	0x24000c04
 8002c30:	c4af0000 	.word	0xc4af0000
 8002c34:	24000c08 	.word	0x24000c08
 8002c38:	44898000 	.word	0x44898000
 8002c3c:	c4160000 	.word	0xc4160000
			}
			else
				{
					test_value_r = radias[indexy];
 8002c40:	4bcb      	ldr	r3, [pc, #812]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4acb      	ldr	r2, [pc, #812]	; (8002f74 <_Z20Update_State_Machinev+0x404>)
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c52:	ee17 2a90 	vmov	r2, s15
 8002c56:	4bc8      	ldr	r3, [pc, #800]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c58:	601a      	str	r2, [r3, #0]
					test_value_theta = theta[indexy];
 8002c5a:	4bc5      	ldr	r3, [pc, #788]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4ac7      	ldr	r2, [pc, #796]	; (8002f7c <_Z20Update_State_Machinev+0x40c>)
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 2a90 	vmov	r2, s15
 8002c70:	4bc3      	ldr	r3, [pc, #780]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c72:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta + angle_chess) / 1000.0))) + 0.02289) / 10.0;
 8002c74:	4bc0      	ldr	r3, [pc, #768]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c80:	4bbf      	ldr	r3, [pc, #764]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8c:	4bbd      	ldr	r3, [pc, #756]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c9a:	ed9f 5bab 	vldr	d5, [pc, #684]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002c9e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ca2:	eeb0 0b46 	vmov.f64	d0, d6
 8002ca6:	f00e fd33 	bl	8011710 <cos>
 8002caa:	eeb0 7b40 	vmov.f64	d7, d0
 8002cae:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002cb2:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f50 <_Z20Update_State_Machinev+0x3e0>
 8002cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cba:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8002f58 <_Z20Update_State_Machinev+0x3e8>
 8002cbe:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002cc2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cce:	4bae      	ldr	r3, [pc, #696]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta + angle_chess) / 1000.0))) + 1.05911) / 10.0;
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ce0:	4ba7      	ldr	r3, [pc, #668]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	4ba5      	ldr	r3, [pc, #660]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfa:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002cfe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d02:	eeb0 0b46 	vmov.f64	d0, d6
 8002d06:	f00e fd4f 	bl	80117a8 <sin>
 8002d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002d12:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f60 <_Z20Update_State_Machinev+0x3f0>
 8002d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d1a:	ed9f 6b93 	vldr	d6, [pc, #588]	; 8002f68 <_Z20Update_State_Machinev+0x3f8>
 8002d1e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002d22:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d2e:	4b97      	ldr	r3, [pc, #604]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta + angle_chess) / 1000.0)) + offset_x + offset_x_new;
 8002d34:	4b90      	ldr	r3, [pc, #576]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d5a:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002d5e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d62:	eeb0 0b46 	vmov.f64	d0, d6
 8002d66:	f00e fcd3 	bl	8011710 <cos>
 8002d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d6e:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <_Z20Update_State_Machinev+0x420>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <_Z20Update_State_Machinev+0x418>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d92:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002d94:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta + angle_chess) / 1000.0)) + offset_y + offset_y_new;
 8002d98:	4b77      	ldr	r3, [pc, #476]	; (8002f78 <_Z20Update_State_Machinev+0x408>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002da4:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <_Z20Update_State_Machinev+0x410>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	ee07 3a90 	vmov	s15, r3
 8002dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db0:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <_Z20Update_State_Machinev+0x414>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dbe:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002f48 <_Z20Update_State_Machinev+0x3d8>
 8002dc2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002dc6:	eeb0 0b46 	vmov.f64	d0, d6
 8002dca:	f00e fced 	bl	80117a8 <sin>
 8002dce:	eeb0 7b40 	vmov.f64	d7, d0
 8002dd2:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002dd6:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <_Z20Update_State_Machinev+0x428>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002de0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002de4:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <_Z20Update_State_Machinev+0x41c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002df2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002df6:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002df8:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, 0);
 8002dfc:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <_Z20Update_State_Machinev+0x424>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <_Z20Update_State_Machinev+0x42c>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e0c:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f7ff fd98 	bl	800294c <_Z6fcb_IKffff>
				}
				Max_Time = 7;
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e1e:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <_Z20Update_State_Machinev+0x438>)
 8002e20:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e2a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e2e:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <_Z20Update_State_Machinev+0x440>)
 8002e30:	edd3 6a00 	vldr	s13, [r3]
 8002e34:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e38:	eddf 2a59 	vldr	s5, [pc, #356]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e3c:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e40:	eddf 1a57 	vldr	s3, [pc, #348]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e44:	eeb0 1a66 	vmov.f32	s2, s13
 8002e48:	eef0 0a47 	vmov.f32	s1, s14
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	4856      	ldr	r0, [pc, #344]	; (8002fac <_Z20Update_State_Machinev+0x43c>)
 8002e52:	f7fd ffb7 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e5e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e62:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <_Z20Update_State_Machinev+0x448>)
 8002e64:	edd3 6a00 	vldr	s13, [r3]
 8002e68:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e6c:	eddf 2a4c 	vldr	s5, [pc, #304]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e70:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e74:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002e78:	eeb0 1a66 	vmov.f32	s2, s13
 8002e7c:	eef0 0a47 	vmov.f32	s1, s14
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	484b      	ldr	r0, [pc, #300]	; (8002fb4 <_Z20Update_State_Machinev+0x444>)
 8002e86:	f7fd ff9d 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002e92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <_Z20Update_State_Machinev+0x450>)
 8002e98:	edd3 6a00 	vldr	s13, [r3]
 8002e9c:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea0:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea4:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002ea8:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002eac:	eeb0 1a66 	vmov.f32	s2, s13
 8002eb0:	eef0 0a47 	vmov.f32	s1, s14
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	4840      	ldr	r0, [pc, #256]	; (8002fbc <_Z20Update_State_Machinev+0x44c>)
 8002eba:	f7fd ff83 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002ecc:	483f      	ldr	r0, [pc, #252]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002ece:	f00a fbcf 	bl	800d670 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ed4:	2234      	movs	r2, #52	; 0x34
 8002ed6:	701a      	strb	r2, [r3, #0]
		}

//		Planning_q1
//		Planning_q3

		break;
 8002ed8:	e23e      	b.n	8003358 <_Z20Update_State_Machinev+0x7e8>
		else if (indexy == 255)
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <_Z20Update_State_Machinev+0x400>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2bff      	cmp	r3, #255	; 0xff
 8002ee0:	f040 823a 	bne.w	8003358 <_Z20Update_State_Machinev+0x7e8>
			control_state = 0;
 8002ee4:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
		break;
 8002eea:	e235      	b.n	8003358 <_Z20Update_State_Machinev+0x7e8>

	case 42:
		Max_Time = 12;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002eee:	4a39      	ldr	r2, [pc, #228]	; (8002fd4 <_Z20Update_State_Machinev+0x464>)
 8002ef0:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <_Z20Update_State_Machinev+0x458>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <_Z20Update_State_Machinev+0x434>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002f00:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <_Z20Update_State_Machinev+0x46c>)
 8002f06:	edd3 6a00 	vldr	s13, [r3]
 8002f0a:	ed9f 3a25 	vldr	s6, [pc, #148]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f0e:	eddf 2a24 	vldr	s5, [pc, #144]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f12:	ed9f 2a23 	vldr	s4, [pc, #140]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f16:	eddf 1a22 	vldr	s3, [pc, #136]	; 8002fa0 <_Z20Update_State_Machinev+0x430>
 8002f1a:	eeb0 1a66 	vmov.f32	s2, s13
 8002f1e:	eef0 0a47 	vmov.f32	s1, s14
 8002f22:	eeb0 0a67 	vmov.f32	s0, s15
 8002f26:	482c      	ldr	r0, [pc, #176]	; (8002fd8 <_Z20Update_State_Machinev+0x468>)
 8002f28:	f7fd ff4c 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Down, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <_Z20Update_State_Machinev+0x454>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002f34:	4825      	ldr	r0, [pc, #148]	; (8002fcc <_Z20Update_State_Machinev+0x45c>)
 8002f36:	f00a fb9b 	bl	800d670 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <_Z20Update_State_Machinev+0x460>)
 8002f3c:	2236      	movs	r2, #54	; 0x36
 8002f3e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <_Z20Update_State_Machinev+0x470>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
		break;
 8002f46:	e208      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	408f4000 	.word	0x408f4000
 8002f50:	bc6a7efa 	.word	0xbc6a7efa
 8002f54:	3fc49374 	.word	0x3fc49374
 8002f58:	e59f2baa 	.word	0xe59f2baa
 8002f5c:	3f977079 	.word	0x3f977079
 8002f60:	432ca57a 	.word	0x432ca57a
 8002f64:	3fd2eb1c 	.word	0x3fd2eb1c
 8002f68:	53cddd6e 	.word	0x53cddd6e
 8002f6c:	3ff0f21d 	.word	0x3ff0f21d
 8002f70:	24000c14 	.word	0x24000c14
 8002f74:	24000110 	.word	0x24000110
 8002f78:	24000be8 	.word	0x24000be8
 8002f7c:	24000010 	.word	0x24000010
 8002f80:	24000bec 	.word	0x24000bec
 8002f84:	24000ae8 	.word	0x24000ae8
 8002f88:	24000c0c 	.word	0x24000c0c
 8002f8c:	24000c10 	.word	0x24000c10
 8002f90:	24000228 	.word	0x24000228
 8002f94:	24000c18 	.word	0x24000c18
 8002f98:	2400022c 	.word	0x2400022c
 8002f9c:	24000c1c 	.word	0x24000c1c
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	24000af4 	.word	0x24000af4
 8002fa8:	40e00000 	.word	0x40e00000
 8002fac:	24000560 	.word	0x24000560
 8002fb0:	24000bfc 	.word	0x24000bfc
 8002fb4:	24000728 	.word	0x24000728
 8002fb8:	24000c04 	.word	0x24000c04
 8002fbc:	2400080c 	.word	0x2400080c
 8002fc0:	24000c08 	.word	0x24000c08
 8002fc4:	24000bf8 	.word	0x24000bf8
 8002fc8:	24000b46 	.word	0x24000b46
 8002fcc:	24001094 	.word	0x24001094
 8002fd0:	24000bf0 	.word	0x24000bf0
 8002fd4:	41400000 	.word	0x41400000
 8002fd8:	24000644 	.word	0x24000644
 8002fdc:	24000004 	.word	0x24000004
 8002fe0:	24000af0 	.word	0x24000af0

	case 43:
		Max_Time = 12;
 8002fe4:	4b9a      	ldr	r3, [pc, #616]	; (8003250 <_Z20Update_State_Machinev+0x6e0>)
 8002fe6:	4a9b      	ldr	r2, [pc, #620]	; (8003254 <_Z20Update_State_Machinev+0x6e4>)
 8002fe8:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002fea:	4b9b      	ldr	r3, [pc, #620]	; (8003258 <_Z20Update_State_Machinev+0x6e8>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ff0:	4b97      	ldr	r3, [pc, #604]	; (8003250 <_Z20Update_State_Machinev+0x6e0>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	4b99      	ldr	r3, [pc, #612]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8002ff8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ffc:	4b98      	ldr	r3, [pc, #608]	; (8003260 <_Z20Update_State_Machinev+0x6f0>)
 8002ffe:	edd3 6a00 	vldr	s13, [r3]
 8003002:	ed9f 3a98 	vldr	s6, [pc, #608]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003006:	eddf 2a97 	vldr	s5, [pc, #604]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800300a:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800300e:	eddf 1a95 	vldr	s3, [pc, #596]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003012:	eeb0 1a66 	vmov.f32	s2, s13
 8003016:	eef0 0a47 	vmov.f32	s1, s14
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	488f      	ldr	r0, [pc, #572]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003020:	f7fd fed0 	bl	8000dc4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <_Z20Update_State_Machinev+0x6f8>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 800302c:	488f      	ldr	r0, [pc, #572]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 800302e:	f00a fb1f 	bl	800d670 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8003032:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003034:	2238      	movs	r2, #56	; 0x38
 8003036:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003038:	4b8e      	ldr	r3, [pc, #568]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
		break;
 800303e:	e18c      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8003040:	488a      	ldr	r0, [pc, #552]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 8003042:	f00a fb8d 	bl	800d760 <HAL_TIM_Base_Stop_IT>
		fcb_joint1.Goal_Velocity = 0;
 8003046:	4b8c      	ldr	r3, [pc, #560]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 800304e:	4b8b      	ldr	r3, [pc, #556]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8003056:	4b8a      	ldr	r3, [pc, #552]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 800305e:	4b86      	ldr	r3, [pc, #536]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003068:	4b85      	ldr	r3, [pc, #532]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800307c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003080:	4880      	ldr	r0, [pc, #512]	; (8003284 <_Z20Update_State_Machinev+0x714>)
 8003082:	f7ff f9ad 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003086:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800308a:	487f      	ldr	r0, [pc, #508]	; (8003288 <_Z20Update_State_Machinev+0x718>)
 800308c:	f7ff f9a8 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003090:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 8003094:	487d      	ldr	r0, [pc, #500]	; (800328c <_Z20Update_State_Machinev+0x71c>)
 8003096:	f7ff f9a3 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a76      	ldr	r2, [pc, #472]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030a0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	4a74      	ldr	r2, [pc, #464]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 80030aa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 80030ae:	4b74      	ldr	r3, [pc, #464]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a73      	ldr	r2, [pc, #460]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030b4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
//		fcb_joint1.C0 = fcb_joint1.Goal_Position;
//		fcb_joint4.C0 = fcb_joint4.Goal_Position;
//		fcb_joint3.C0 = fcb_joint3.Goal_Position;

		fcb_joint1.C1 = 0;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 80030e0:	4b65      	ldr	r3, [pc, #404]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 80030f4:	4b60      	ldr	r3, [pc, #384]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 80030fe:	4b60      	ldr	r3, [pc, #384]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8003108:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 800311c:	4b57      	ldr	r3, [pc, #348]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8003126:	4b55      	ldr	r3, [pc, #340]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8003130:	4b52      	ldr	r3, [pc, #328]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003150:	222a      	movs	r2, #42	; 0x2a
 8003152:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
		break;
 800315a:	e0fe      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 800315c:	4843      	ldr	r0, [pc, #268]	; (800326c <_Z20Update_State_Machinev+0x6fc>)
 800315e:	f00a faff 	bl	800d760 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.Goal_Velocity = 0;
 8003162:	4b3e      	ldr	r3, [pc, #248]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 800316a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 800316e:	4848      	ldr	r0, [pc, #288]	; (8003290 <_Z20Update_State_Machinev+0x720>)
 8003170:	f7ff f936 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	4a38      	ldr	r2, [pc, #224]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800317a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 800317e:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <_Z20Update_State_Machinev+0x708>)
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <_Z20Update_State_Machinev+0x710>)
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003192:	4b3a      	ldr	r3, [pc, #232]	; (800327c <_Z20Update_State_Machinev+0x70c>)
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800319c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031a0:	4838      	ldr	r0, [pc, #224]	; (8003284 <_Z20Update_State_Machinev+0x714>)
 80031a2:	f7ff f91d 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80031a6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031aa:	4837      	ldr	r0, [pc, #220]	; (8003288 <_Z20Update_State_Machinev+0x718>)
 80031ac:	f7ff f918 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80031b0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003264 <_Z20Update_State_Machinev+0x6f4>
 80031b4:	4835      	ldr	r0, [pc, #212]	; (800328c <_Z20Update_State_Machinev+0x71c>)
 80031b6:	f7ff f913 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <_Z20Update_State_Machinev+0x724>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <_Z20Update_State_Machinev+0x728>)
 80031c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <_Z20Update_State_Machinev+0x66c>
			gripper.GripperClose();
 80031d4:	4831      	ldr	r0, [pc, #196]	; (800329c <_Z20Update_State_Machinev+0x72c>)
 80031d6:	f7fe fd99 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
 80031da:	e00f      	b.n	80031fc <_Z20Update_State_Machinev+0x68c>
		} else if (Gripper_State[first - 1] == 2) {
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <_Z20Update_State_Machinev+0x724>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <_Z20Update_State_Machinev+0x728>)
 80031e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <_Z20Update_State_Machinev+0x68c>
			gripper.GripperOpen();
 80031f6:	4829      	ldr	r0, [pc, #164]	; (800329c <_Z20Update_State_Machinev+0x72c>)
 80031f8:	f7fe fd9e 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_Z20Update_State_Machinev+0x6ec>)
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <_Z20Update_State_Machinev+0x700>)
 8003242:	222b      	movs	r2, #43	; 0x2b
 8003244:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <_Z20Update_State_Machinev+0x704>)
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
		break;
 800324c:	e085      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
 800324e:	bf00      	nop
 8003250:	24000af4 	.word	0x24000af4
 8003254:	41400000 	.word	0x41400000
 8003258:	24000b46 	.word	0x24000b46
 800325c:	24000644 	.word	0x24000644
 8003260:	24000000 	.word	0x24000000
 8003264:	00000000 	.word	0x00000000
 8003268:	24000bf8 	.word	0x24000bf8
 800326c:	24001094 	.word	0x24001094
 8003270:	24000bf0 	.word	0x24000bf0
 8003274:	24000af0 	.word	0x24000af0
 8003278:	24000560 	.word	0x24000560
 800327c:	2400080c 	.word	0x2400080c
 8003280:	24000728 	.word	0x24000728
 8003284:	240004c0 	.word	0x240004c0
 8003288:	24000538 	.word	0x24000538
 800328c:	24000510 	.word	0x24000510
 8003290:	240004e8 	.word	0x240004e8
 8003294:	24000008 	.word	0x24000008
 8003298:	24000b98 	.word	0x24000b98
 800329c:	24000ab8 	.word	0x24000ab8
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80032a8:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032ac:	482f      	ldr	r0, [pc, #188]	; (800336c <_Z20Update_State_Machinev+0x7fc>)
 80032ae:	f7ff f897 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 80032b8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <_Z20Update_State_Machinev+0x800>)
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80032c6:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <_Z20Update_State_Machinev+0x804>)
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <_Z20Update_State_Machinev+0x808>)
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80032da:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032de:	4827      	ldr	r0, [pc, #156]	; (800337c <_Z20Update_State_Machinev+0x80c>)
 80032e0:	f7ff f87e 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80032e4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <_Z20Update_State_Machinev+0x810>)
 80032ea:	f7ff f879 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80032ee:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8003368 <_Z20Update_State_Machinev+0x7f8>
 80032f2:	4824      	ldr	r0, [pc, #144]	; (8003384 <_Z20Update_State_Machinev+0x814>)
 80032f4:	f7ff f874 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80032f8:	4823      	ldr	r0, [pc, #140]	; (8003388 <_Z20Update_State_Machinev+0x818>)
 80032fa:	f00a fa31 	bl	800d760 <HAL_TIM_Base_Stop_IT>
		fcb_joint2.C1 = 0;
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <_Z20Update_State_Machinev+0x7f4>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <_Z20Update_State_Machinev+0x81c>)
 800333a:	2229      	movs	r2, #41	; 0x29
 800333c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <_Z20Update_State_Machinev+0x820>)
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
		break;
 8003344:	e009      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>

	default:
		control_state = 0;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <_Z20Update_State_Machinev+0x81c>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_Z20Update_State_Machinev+0x820>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
		break;
 8003352:	e002      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
		break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <_Z20Update_State_Machinev+0x7ea>
		break;
 8003358:	bf00      	nop
	}
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	ecbd 8b02 	vpop	{d8}
 8003362:	bd80      	pop	{r7, pc}
 8003364:	24000644 	.word	0x24000644
 8003368:	00000000 	.word	0x00000000
 800336c:	240004e8 	.word	0x240004e8
 8003370:	24000560 	.word	0x24000560
 8003374:	24000728 	.word	0x24000728
 8003378:	2400080c 	.word	0x2400080c
 800337c:	240004c0 	.word	0x240004c0
 8003380:	24000538 	.word	0x24000538
 8003384:	24000510 	.word	0x24000510
 8003388:	24001094 	.word	0x24001094
 800338c:	24000bf0 	.word	0x24000bf0
 8003390:	24000af0 	.word	0x24000af0

08003394 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a8f      	ldr	r2, [pc, #572]	; (80035e0 <HAL_UARTEx_RxEventCallback+0x24c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f040 8188 	bne.w	80036ba <HAL_UARTEx_RxEventCallback+0x326>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80033aa:	4a8e      	ldr	r2, [pc, #568]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80033ac:	4b8e      	ldr	r3, [pc, #568]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x254>)
 80033ae:	4614      	mov	r4, r2
 80033b0:	461d      	mov	r5, r3
 80033b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b6:	682b      	ldr	r3, [r5, #0]
 80033b8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80033ba:	2214      	movs	r2, #20
 80033bc:	2100      	movs	r1, #0
 80033be:	488a      	ldr	r0, [pc, #552]	; (80035e8 <HAL_UARTEx_RxEventCallback+0x254>)
 80033c0:	f00f fa22 	bl	8012808 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	f240 8166 	bls.w	8003698 <HAL_UARTEx_RxEventCallback+0x304>
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	2b14      	cmp	r3, #20
 80033d0:	f200 8162 	bhi.w	8003698 <HAL_UARTEx_RxEventCallback+0x304>
			cmdDataSize = Size - 2;	// Calculate data length.
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	3b02      	subs	r3, #2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033dc:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	497f      	ldr	r1, [pc, #508]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80033e8:	4881      	ldr	r0, [pc, #516]	; (80035f0 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033ea:	f003 fff1 	bl	80073d0 <HAL_CRC_Calculate>
 80033ee:	4603      	mov	r3, r0
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b80      	ldr	r3, [pc, #512]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x260>)
 80033f4:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80033f6:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b79      	ldr	r3, [pc, #484]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003400:	5c9b      	ldrb	r3, [r3, r2]
 8003402:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003404:	b21a      	sxth	r2, r3
 8003406:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	4975      	ldr	r1, [pc, #468]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	b21b      	sxth	r3, r3
 8003414:	4313      	orrs	r3, r2
 8003416:	b21b      	sxth	r3, r3
 8003418:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800341a:	4b77      	ldr	r3, [pc, #476]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x264>)
 800341c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800341e:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_UARTEx_RxEventCallback+0x260>)
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <HAL_UARTEx_RxEventCallback+0x264>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	429a      	cmp	r2, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8151 	beq.w	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	2102      	movs	r1, #2
 800343e:	486f      	ldr	r0, [pc, #444]	; (80035fc <HAL_UARTEx_RxEventCallback+0x268>)
 8003440:	f007 f94c 	bl	800a6dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344a:	486d      	ldr	r0, [pc, #436]	; (8003600 <HAL_UARTEx_RxEventCallback+0x26c>)
 800344c:	f007 f946 	bl	800a6dc <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003450:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b61      	cmp	r3, #97	; 0x61
 8003456:	d106      	bne.n	8003466 <HAL_UARTEx_RxEventCallback+0xd2>
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b05      	cmp	r3, #5
 8003460:	d101      	bne.n	8003466 <HAL_UARTEx_RxEventCallback+0xd2>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_UARTEx_RxEventCallback+0xd4>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 800346c:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	b25a      	sxtb	r2, r3
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_UARTEx_RxEventCallback+0x270>)
 8003474:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003478:	789b      	ldrb	r3, [r3, #2]
 800347a:	b25a      	sxtb	r2, r3
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_UARTEx_RxEventCallback+0x274>)
 800347e:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003480:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003482:	78db      	ldrb	r3, [r3, #3]
 8003484:	b25a      	sxtb	r2, r3
 8003486:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_UARTEx_RxEventCallback+0x278>)
 8003488:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 800348a:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	b25a      	sxtb	r2, r3
 8003490:	4b5f      	ldr	r3, [pc, #380]	; (8003610 <HAL_UARTEx_RxEventCallback+0x27c>)
 8003492:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8003494:	e122      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b71      	cmp	r3, #113	; 0x71
 800349c:	d106      	bne.n	80034ac <HAL_UARTEx_RxEventCallback+0x118>
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b05      	cmp	r3, #5
 80034a6:	d101      	bne.n	80034ac <HAL_UARTEx_RxEventCallback+0x118>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_UARTEx_RxEventCallback+0x11a>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	b25a      	sxtb	r2, r3
 80034b8:	4b56      	ldr	r3, [pc, #344]	; (8003614 <HAL_UARTEx_RxEventCallback+0x280>)
 80034ba:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80034bc:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	b25a      	sxtb	r2, r3
 80034c2:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_UARTEx_RxEventCallback+0x284>)
 80034c4:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034c8:	78db      	ldrb	r3, [r3, #3]
 80034ca:	b25a      	sxtb	r2, r3
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_UARTEx_RxEventCallback+0x288>)
 80034ce:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80034d0:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034d2:	791b      	ldrb	r3, [r3, #4]
 80034d4:	b25a      	sxtb	r2, r3
 80034d6:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_UARTEx_RxEventCallback+0x28c>)
 80034d8:	701a      	strb	r2, [r3, #0]
			}
 80034da:	e0ff      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b85      	cmp	r3, #133	; 0x85
 80034e2:	d106      	bne.n	80034f2 <HAL_UARTEx_RxEventCallback+0x15e>
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d101      	bne.n	80034f2 <HAL_UARTEx_RxEventCallback+0x15e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_UARTEx_RxEventCallback+0x160>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80034f8:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_UARTEx_RxEventCallback+0x290>)
 80034fa:	2233      	movs	r2, #51	; 0x33
 80034fc:	701a      	strb	r2, [r3, #0]
			}
 80034fe:	e0ed      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003500:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b86      	cmp	r3, #134	; 0x86
 8003506:	d106      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x182>
 8003508:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b03      	cmp	r3, #3
 8003510:	d101      	bne.n	8003516 <HAL_UARTEx_RxEventCallback+0x182>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_UARTEx_RxEventCallback+0x184>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	6938      	ldr	r0, [r7, #16]
 800352c:	f7ff f97c 	bl	8002828 <_Z12Insert_queueii>
			}
 8003530:	e0d4      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b87      	cmp	r3, #135	; 0x87
 8003538:	d106      	bne.n	8003548 <HAL_UARTEx_RxEventCallback+0x1b4>
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d101      	bne.n	8003548 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_UARTEx_RxEventCallback+0x1b6>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003554:	4a33      	ldr	r2, [pc, #204]	; (8003624 <HAL_UARTEx_RxEventCallback+0x290>)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 800355a:	f7ff fb09 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 800355e:	e0bd      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b89      	cmp	r3, #137	; 0x89
 8003566:	d106      	bne.n	8003576 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d101      	bne.n	8003576 <HAL_UARTEx_RxEventCallback+0x1e2>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_UARTEx_RxEventCallback+0x1e4>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 800357c:	f7ff faf8 	bl	8002b70 <_Z20Update_State_Machinev>
			}
 8003580:	e0ac      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b81      	cmp	r3, #129	; 0x81
 8003588:	d106      	bne.n	8003598 <HAL_UARTEx_RxEventCallback+0x204>
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d101      	bne.n	8003598 <HAL_UARTEx_RxEventCallback+0x204>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_UARTEx_RxEventCallback+0x206>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d015      	beq.n	80035ca <HAL_UARTEx_RxEventCallback+0x236>
					gripperstate = Old_Rx_Buffer[1];
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_UARTEx_RxEventCallback+0x294>)
 80035a6:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_UARTEx_RxEventCallback+0x294>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80035ba:	481c      	ldr	r0, [pc, #112]	; (800362c <HAL_UARTEx_RxEventCallback+0x298>)
 80035bc:	f7fe fbbc 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
			}
 80035c0:	e08c      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
						gripper.GripperClose();
 80035c2:	481a      	ldr	r0, [pc, #104]	; (800362c <HAL_UARTEx_RxEventCallback+0x298>)
 80035c4:	f7fe fba2 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
			}
 80035c8:	e088      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_UARTEx_RxEventCallback+0x250>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b91      	cmp	r3, #145	; 0x91
 80035d0:	d12e      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x29c>
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_UARTEx_RxEventCallback+0x258>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d129      	bne.n	8003630 <HAL_UARTEx_RxEventCallback+0x29c>
 80035dc:	2301      	movs	r3, #1
 80035de:	e028      	b.n	8003632 <HAL_UARTEx_RxEventCallback+0x29e>
 80035e0:	24001374 	.word	0x24001374
 80035e4:	24000b18 	.word	0x24000b18
 80035e8:	24000b2c 	.word	0x24000b2c
 80035ec:	24000b40 	.word	0x24000b40
 80035f0:	2400042c 	.word	0x2400042c
 80035f4:	24000b10 	.word	0x24000b10
 80035f8:	24000b12 	.word	0x24000b12
 80035fc:	58021000 	.word	0x58021000
 8003600:	58020400 	.word	0x58020400
 8003604:	24000af8 	.word	0x24000af8
 8003608:	24000af9 	.word	0x24000af9
 800360c:	24000afa 	.word	0x24000afa
 8003610:	24000afb 	.word	0x24000afb
 8003614:	24000afc 	.word	0x24000afc
 8003618:	24000afd 	.word	0x24000afd
 800361c:	24000afe 	.word	0x24000afe
 8003620:	24000aff 	.word	0x24000aff
 8003624:	24000bf0 	.word	0x24000bf0
 8003628:	24000b14 	.word	0x24000b14
 800362c:	24000ab8 	.word	0x24000ab8
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d052      	beq.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003638:	785b      	ldrb	r3, [r3, #1]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 800363e:	7892      	ldrb	r2, [r2, #2]
 8003640:	4313      	orrs	r3, r2
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_UARTEx_RxEventCallback+0x424>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
 8003650:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	4a57      	ldr	r2, [pc, #348]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003658:	7912      	ldrb	r2, [r2, #4]
 800365a:	4313      	orrs	r3, r2
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	4b55      	ldr	r3, [pc, #340]	; (80037bc <HAL_UARTEx_RxEventCallback+0x428>)
 8003666:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
 800366a:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 800366c:	795b      	ldrb	r3, [r3, #5]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003672:	7992      	ldrb	r2, [r2, #6]
 8003674:	4313      	orrs	r3, r2
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367e:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_UARTEx_RxEventCallback+0x42c>)
 8003680:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_UARTEx_RxEventCallback+0x420>)
 8003686:	79db      	ldrb	r3, [r3, #7]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003690:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_UARTEx_RxEventCallback+0x430>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
			}
 8003696:	e021      	b.n	80036dc <HAL_UARTEx_RxEventCallback+0x348>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003698:	2200      	movs	r2, #0
 800369a:	2102      	movs	r1, #2
 800369c:	484a      	ldr	r0, [pc, #296]	; (80037c8 <HAL_UARTEx_RxEventCallback+0x434>)
 800369e:	f007 f81d 	bl	800a6dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a8:	4848      	ldr	r0, [pc, #288]	; (80037cc <HAL_UARTEx_RxEventCallback+0x438>)
 80036aa:	f007 f817 	bl	800a6dc <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80036ae:	220c      	movs	r2, #12
 80036b0:	4947      	ldr	r1, [pc, #284]	; (80037d0 <HAL_UARTEx_RxEventCallback+0x43c>)
 80036b2:	4848      	ldr	r0, [pc, #288]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036b4:	f00b fd92 	bl	800f1dc <HAL_UART_Transmit_DMA>
 80036b8:	e011      	b.n	80036de <HAL_UARTEx_RxEventCallback+0x34a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2102      	movs	r1, #2
 80036be:	4842      	ldr	r0, [pc, #264]	; (80037c8 <HAL_UARTEx_RxEventCallback+0x434>)
 80036c0:	f007 f80c 	bl	800a6dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036ca:	4840      	ldr	r0, [pc, #256]	; (80037cc <HAL_UARTEx_RxEventCallback+0x438>)
 80036cc:	f007 f806 	bl	800a6dc <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 80036d0:	2215      	movs	r2, #21
 80036d2:	4941      	ldr	r1, [pc, #260]	; (80037d8 <HAL_UARTEx_RxEventCallback+0x444>)
 80036d4:	483f      	ldr	r0, [pc, #252]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036d6:	f00b fd81 	bl	800f1dc <HAL_UART_Transmit_DMA>
 80036da:	e000      	b.n	80036de <HAL_UARTEx_RxEventCallback+0x34a>
			}
 80036dc:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80036de:	2214      	movs	r2, #20
 80036e0:	493e      	ldr	r1, [pc, #248]	; (80037dc <HAL_UARTEx_RxEventCallback+0x448>)
 80036e2:	483c      	ldr	r0, [pc, #240]	; (80037d4 <HAL_UARTEx_RxEventCallback+0x440>)
 80036e4:	f00d fcdf 	bl	80110a6 <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80036e8:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3d      	ldr	r2, [pc, #244]	; (80037e4 <HAL_UARTEx_RxEventCallback+0x450>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a3c      	ldr	r2, [pc, #240]	; (80037e8 <HAL_UARTEx_RxEventCallback+0x454>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 80036fc:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_UARTEx_RxEventCallback+0x458>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <HAL_UARTEx_RxEventCallback+0x45c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003710:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <HAL_UARTEx_RxEventCallback+0x460>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a36      	ldr	r2, [pc, #216]	; (80037f8 <HAL_UARTEx_RxEventCallback+0x464>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a34      	ldr	r2, [pc, #208]	; (80037fc <HAL_UARTEx_RxEventCallback+0x468>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_UARTEx_RxEventCallback+0x46c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_UARTEx_RxEventCallback+0x470>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_UARTEx_RxEventCallback+0x474>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2e      	ldr	r2, [pc, #184]	; (800380c <HAL_UARTEx_RxEventCallback+0x478>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <HAL_UARTEx_RxEventCallback+0x47c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003760:	4b1f      	ldr	r3, [pc, #124]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <HAL_UARTEx_RxEventCallback+0x480>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_UARTEx_RxEventCallback+0x484>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_UARTEx_RxEventCallback+0x488>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_UARTEx_RxEventCallback+0x3f4>
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <HAL_UARTEx_RxEventCallback+0x48c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <HAL_UARTEx_RxEventCallback+0x406>
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0208 	bic.w	r2, r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e008      	b.n	80037ac <HAL_UARTEx_RxEventCallback+0x418>
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_UARTEx_RxEventCallback+0x44c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	24000b18 	.word	0x24000b18
 80037b8:	24000b00 	.word	0x24000b00
 80037bc:	24000b04 	.word	0x24000b04
 80037c0:	24000b08 	.word	0x24000b08
 80037c4:	24000b0c 	.word	0x24000b0c
 80037c8:	58021000 	.word	0x58021000
 80037cc:	58020400 	.word	0x58020400
 80037d0:	08015224 	.word	0x08015224
 80037d4:	24001374 	.word	0x24001374
 80037d8:	08015234 	.word	0x08015234
 80037dc:	24000b2c 	.word	0x24000b2c
 80037e0:	2400165c 	.word	0x2400165c
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	00000000 	.word	0x00000000

08003828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4ac5      	ldr	r2, [pc, #788]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003834:	4293      	cmp	r3, r2
 8003836:	f040 80cc 	bne.w	80039d2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		encoderJ1.AMT21_Read();
 800383a:	48c4      	ldr	r0, [pc, #784]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 800383c:	f7fc ff49 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003840:	48c2      	ldr	r0, [pc, #776]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003842:	f7fc ff75 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	4bc1      	ldr	r3, [pc, #772]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800384c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800384e:	4bc0      	ldr	r3, [pc, #768]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d110      	bne.n	8003878 <HAL_TIM_PeriodElapsedCallback+0x50>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8003856:	48bd      	ldr	r0, [pc, #756]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8003858:	f7fc ffd0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800385c:	4603      	mov	r3, r0
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003866:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 800386a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800386e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003872:	4bb8      	ldr	r3, [pc, #736]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003874:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003878:	48b7      	ldr	r0, [pc, #732]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800387a:	f7fc ff2a 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 800387e:	48b6      	ldr	r0, [pc, #728]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003880:	f7fc ff56 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4bb4      	ldr	r3, [pc, #720]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800388a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 800388c:	4bb3      	ldr	r3, [pc, #716]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d112      	bne.n	80038ba <HAL_TIM_PeriodElapsedCallback+0x92>
			encoderJ2.unwarp();
 8003894:	48b0      	ldr	r0, [pc, #704]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003896:	f7fc ffd3 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 800389a:	48af      	ldr	r0, [pc, #700]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800389c:	f7fd f82f 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 80038a0:	ee07 0a90 	vmov	s15, r0
 80038a4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038a8:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 80038ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038b4:	4baa      	ldr	r3, [pc, #680]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80038b6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 80038ba:	48aa      	ldr	r0, [pc, #680]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038bc:	f7fc ff09 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80038c0:	48a8      	ldr	r0, [pc, #672]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038c2:	f7fc ff35 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	4ba7      	ldr	r3, [pc, #668]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038cc:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80038ce:	4ba6      	ldr	r3, [pc, #664]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80038d6:	48a3      	ldr	r0, [pc, #652]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80038d8:	f7fc ff90 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80038dc:	4603      	mov	r3, r0
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80038e6:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 80038ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80038ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80038f2:	4b9e      	ldr	r3, [pc, #632]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80038f4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80038f8:	489d      	ldr	r0, [pc, #628]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80038fa:	f7fc feea 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80038fe:	489c      	ldr	r0, [pc, #624]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003900:	f7fc ff16 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800390a:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 800390c:	4b99      	ldr	r3, [pc, #612]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d110      	bne.n	8003936 <HAL_TIM_PeriodElapsedCallback+0x10e>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 8003914:	4896      	ldr	r0, [pc, #600]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003916:	f7fc ff71 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800391a:	4603      	mov	r3, r0
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003924:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003928:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800392c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003932:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003936:	4891      	ldr	r0, [pc, #580]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003938:	f7fd f85c 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 800393c:	eef0 7a40 	vmov.f32	s15, s0
 8003940:	4b8f      	ldr	r3, [pc, #572]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003942:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003946:	488d      	ldr	r0, [pc, #564]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003948:	f7fd f834 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 800394c:	eef0 7a40 	vmov.f32	s15, s0
 8003950:	4b8c      	ldr	r3, [pc, #560]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003952:	edc3 7a00 	vstr	s15, [r3]
//			stepperJ1.StepperSetFrequency(dq1);
//			stepperJ2.StepperSetFrequency(dq2*10.0);
//			stepperJ3.StepperSetFrequency(dq3);
//			stepperJ4.StepperSetFrequency(dq4);

		fcb_X.UpdateIVK(fcb_joint1.Encoder, 0.0, fcb_joint3.Encoder, 0.0, dx,
 8003956:	4b7f      	ldr	r3, [pc, #508]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003958:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800395c:	4b83      	ldr	r3, [pc, #524]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800395e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003962:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	ee06 3a90 	vmov	s13, r3
 800396c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b25b      	sxtb	r3, r3
 8003976:	ee06 3a10 	vmov	s12, r3
 800397a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800397e:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b25b      	sxtb	r3, r3
 8003984:	ee05 3a90 	vmov	s11, r3
 8003988:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800398c:	eddf 3a81 	vldr	s7, [pc, #516]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003990:	eeb0 3a65 	vmov.f32	s6, s11
 8003994:	eef0 2a46 	vmov.f32	s5, s12
 8003998:	eeb0 2a66 	vmov.f32	s4, s13
 800399c:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80039a0:	eeb0 1a47 	vmov.f32	s2, s14
 80039a4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8003b94 <HAL_TIM_PeriodElapsedCallback+0x36c>
 80039a8:	eeb0 0a67 	vmov.f32	s0, s15
 80039ac:	487a      	ldr	r0, [pc, #488]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039ae:	f7fd f8df 	bl	8000b70 <_ZN10RobotJoint9UpdateIVKEffffffff>
				dy, dz, 0.0);

		stepperJ1.StepperOpenLoopSpeedM(fcb_X.w_q1);
 80039b2:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039b4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80039b8:	eeb0 0a67 	vmov.f32	s0, s15
 80039bc:	4877      	ldr	r0, [pc, #476]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80039be:	f7fe fd0f 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
		stepperJ3.StepperOpenLoopSpeedM(fcb_X.w_q3);
 80039c2:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80039c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	4874      	ldr	r0, [pc, #464]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80039ce:	f7fe fd07 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
//					stepperJ4.StepperOpenLoopSpeed(u_q4/num);

	}

	if (htim == &htim16) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a73      	ldr	r2, [pc, #460]	; (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f040 8111 	bne.w	8003bfe <HAL_TIM_PeriodElapsedCallback+0x3d6>
		encoderJ1.AMT21_Read();
 80039dc:	485b      	ldr	r0, [pc, #364]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039de:	f7fc fe78 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80039e2:	485a      	ldr	r0, [pc, #360]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039e4:	f7fc fea4 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80039ee:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80039f0:	4b57      	ldr	r3, [pc, #348]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d110      	bne.n	8003a1a <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 80039f8:	4854      	ldr	r0, [pc, #336]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039fa:	f7fc feff 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80039fe:	4603      	mov	r3, r0
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a08:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003a0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003a16:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003a1a:	484f      	ldr	r0, [pc, #316]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a1c:	f7fc fe59 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003a20:	484d      	ldr	r0, [pc, #308]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a22:	f7fc fe85 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a2c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d112      	bne.n	8003a5c <HAL_TIM_PeriodElapsedCallback+0x234>
			encoderJ2.unwarp();
 8003a36:	4848      	ldr	r0, [pc, #288]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a38:	f7fc ff02 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003a3c:	4846      	ldr	r0, [pc, #280]	; (8003b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003a3e:	f7fc ff5e 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003a42:	ee07 0a90 	vmov	s15, r0
 8003a46:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a4a:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003a4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a56:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003a58:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 8003a5c:	4841      	ldr	r0, [pc, #260]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a5e:	f7fc fe38 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003a62:	4840      	ldr	r0, [pc, #256]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a64:	f7fc fe64 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003a6e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003a70:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d110      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0x272>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003a78:	483a      	ldr	r0, [pc, #232]	; (8003b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003a7a:	f7fc febf 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a88:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a94:	4b35      	ldr	r3, [pc, #212]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003a96:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003a9a:	4835      	ldr	r0, [pc, #212]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003a9c:	f7fc fe19 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003aa0:	4833      	ldr	r0, [pc, #204]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003aa2:	f7fc fe45 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003aac:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 8003ab6:	482e      	ldr	r0, [pc, #184]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003ab8:	f7fc fea0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003abc:	4603      	mov	r3, r0
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ac6:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8003b40 <HAL_TIM_PeriodElapsedCallback+0x318>
 8003aca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003ace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003ad4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 8003ad8:	4828      	ldr	r0, [pc, #160]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003ada:	f7fc ff8b 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 8003ade:	eef0 7a40 	vmov.f32	s15, s0
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003ae4:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 8003ae8:	4824      	ldr	r0, [pc, #144]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003aea:	f7fc ff63 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 8003aee:	eef0 7a40 	vmov.f32	s15, s0
 8003af2:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003af4:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003afa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003afe:	eeb0 0a67 	vmov.f32	s0, s15
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b04:	f7fd fa82 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b0e:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b10:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003b1c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	480d      	ldr	r0, [pc, #52]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b2c:	f7fd fa6e 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003b38:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003b3c:	e034      	b.n	8003ba8 <HAL_TIM_PeriodElapsedCallback+0x380>
 8003b3e:	bf00      	nop
 8003b40:	645a1cac 	.word	0x645a1cac
 8003b44:	4004df3b 	.word	0x4004df3b
 8003b48:	24000ecc 	.word	0x24000ecc
 8003b4c:	24000450 	.word	0x24000450
 8003b50:	24000ad4 	.word	0x24000ad4
 8003b54:	24000560 	.word	0x24000560
 8003b58:	2400046c 	.word	0x2400046c
 8003b5c:	24000ad5 	.word	0x24000ad5
 8003b60:	24000644 	.word	0x24000644
 8003b64:	24000488 	.word	0x24000488
 8003b68:	24000ad6 	.word	0x24000ad6
 8003b6c:	24000728 	.word	0x24000728
 8003b70:	240004a4 	.word	0x240004a4
 8003b74:	24000ad7 	.word	0x24000ad7
 8003b78:	2400080c 	.word	0x2400080c
 8003b7c:	24000ad8 	.word	0x24000ad8
 8003b80:	24000ae8 	.word	0x24000ae8
 8003b84:	24000aec 	.word	0x24000aec
 8003b88:	24000afc 	.word	0x24000afc
 8003b8c:	24000afd 	.word	0x24000afd
 8003b90:	24000afe 	.word	0x24000afe
 8003b94:	00000000 	.word	0x00000000
 8003b98:	240009d4 	.word	0x240009d4
 8003b9c:	240004c0 	.word	0x240004c0
 8003ba0:	24000510 	.word	0x24000510
 8003ba4:	2400112c 	.word	0x2400112c
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 8003ba8:	4bda      	ldr	r3, [pc, #872]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003baa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bae:	4ad9      	ldr	r2, [pc, #868]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003bb0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003bb4:	4bd8      	ldr	r3, [pc, #864]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bb6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003bba:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbe:	48d6      	ldr	r0, [pc, #856]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bc0:	f7fd fa24 	bl	800100c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003bc4:	4bd4      	ldr	r3, [pc, #848]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bca:	4ad3      	ldr	r2, [pc, #844]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bcc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003bd0:	4bd1      	ldr	r3, [pc, #836]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd6:	4ad0      	ldr	r2, [pc, #832]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003bd8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		if (State_FIN) {
 8003bdc:	4bcf      	ldr	r3, [pc, #828]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_TIM_PeriodElapsedCallback+0x3d6>
			Balloon++;
 8003be6:	4bce      	ldr	r3, [pc, #824]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3301      	adds	r3, #1
 8003bec:	4acc      	ldr	r2, [pc, #816]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8003bee:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 8003bf0:	f7fe ffbe 	bl	8002b70 <_Z20Update_State_Machinev>
			Update_State_Machine();
 8003bf4:	f7fe ffbc 	bl	8002b70 <_Z20Update_State_Machinev>
			State_FIN = false;
 8003bf8:	4bc8      	ldr	r3, [pc, #800]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim14) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4ac8      	ldr	r2, [pc, #800]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f040 8522 	bne.w	800464c <HAL_TIM_PeriodElapsedCallback+0xe24>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003c08:	4bc7      	ldr	r3, [pc, #796]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c0a:	ed93 7a00 	vldr	s14, [r3]
 8003c0e:	4bc6      	ldr	r3, [pc, #792]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float t3 = t * t * t;
 8003c1c:	4bc2      	ldr	r3, [pc, #776]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c1e:	ed93 7a00 	vldr	s14, [r3]
 8003c22:	4bc1      	ldr	r3, [pc, #772]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c2c:	4bbe      	ldr	r3, [pc, #760]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a08 	vstr	s15, [r7, #32]
		float t4 = t * t * t * t;
 8003c3a:	4bbb      	ldr	r3, [pc, #748]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c3c:	ed93 7a00 	vldr	s14, [r3]
 8003c40:	4bb9      	ldr	r3, [pc, #740]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4a:	4bb7      	ldr	r3, [pc, #732]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c54:	4bb4      	ldr	r3, [pc, #720]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	edc7 7a07 	vstr	s15, [r7, #28]
		float t5 = t * t * t * t * t;
 8003c62:	4bb1      	ldr	r3, [pc, #708]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c64:	ed93 7a00 	vldr	s14, [r3]
 8003c68:	4baf      	ldr	r3, [pc, #700]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c72:	4bad      	ldr	r3, [pc, #692]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c7c:	4baa      	ldr	r3, [pc, #680]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c7e:	edd3 7a00 	vldr	s15, [r3]
 8003c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c86:	4ba8      	ldr	r3, [pc, #672]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c90:	edc7 7a06 	vstr	s15, [r7, #24]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003c94:	4ba5      	ldr	r3, [pc, #660]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003c96:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c9e:	4ba3      	ldr	r3, [pc, #652]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003ca0:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca8:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003cac:	4b9e      	ldr	r3, [pc, #632]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cba:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003cbe:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003cc0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003cc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cc8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ccc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cdc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ce0:	4b92      	ldr	r3, [pc, #584]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003ce2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ce6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cea:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003cee:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cfe:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003d02:	4b8a      	ldr	r3, [pc, #552]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d04:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003d08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d0c:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003d10:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003d14:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d1c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003d20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003d28:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d2a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d30:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003d34:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d36:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d44:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 8003d48:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d4a:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5a:	4b74      	ldr	r3, [pc, #464]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d5c:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d60:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d68:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d6e:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d7e:	4b6b      	ldr	r3, [pc, #428]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d80:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_TIM_PeriodElapsedCallback+0x704>)
 8003d92:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003d96:	4b5f      	ldr	r3, [pc, #380]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003d98:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003d9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003da0:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003da2:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003da6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003daa:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003dae:	4b5e      	ldr	r3, [pc, #376]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003db8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dbc:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003dc0:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003dc2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dca:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003dce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003dd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003dde:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003de2:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003de4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003de8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003df0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003df4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003dfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e00:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003e04:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e06:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e0e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003e12:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003e16:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e2c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003e30:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e32:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e38:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003e3c:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e4c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003e50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e5e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003e6e:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e70:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003e74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e82:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8003e94:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003e98:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003e9a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003e9e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003ea4:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eac:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8003eb2:	edd3 7a00 	vldr	s15, [r3]
 8003eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ebe:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003ec4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ecc:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ed0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ed4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ed8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003edc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ee0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003ee6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eee:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ef2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ef6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003efa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003efe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f02:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint3.C5 * t4);
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8003f08:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f10:	e00e      	b.n	8003f30 <HAL_TIM_PeriodElapsedCallback+0x708>
 8003f12:	bf00      	nop
 8003f14:	24000644 	.word	0x24000644
 8003f18:	24000728 	.word	0x24000728
 8003f1c:	24000af0 	.word	0x24000af0
 8003f20:	24000bf4 	.word	0x24000bf4
 8003f24:	24001094 	.word	0x24001094
 8003f28:	24000bf8 	.word	0x24000bf8
 8003f2c:	24000560 	.word	0x24000560
 8003f30:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003f34:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003f38:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f40:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003f44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003f4c:	4bc8      	ldr	r3, [pc, #800]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f4e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003f52:	4bc7      	ldr	r3, [pc, #796]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f54:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003f58:	4bc5      	ldr	r3, [pc, #788]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f5a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003f5e:	4bc5      	ldr	r3, [pc, #788]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f60:	edd3 7a00 	vldr	s15, [r3]
 8003f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f68:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003f6c:	4bc0      	ldr	r3, [pc, #768]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f6e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f7e:	4bbc      	ldr	r3, [pc, #752]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f80:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003f84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003f90:	4bb7      	ldr	r3, [pc, #732]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003f92:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003f96:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fa2:	4bb3      	ldr	r3, [pc, #716]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fa4:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003fb4:	4bae      	ldr	r3, [pc, #696]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003fb6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003fba:	4baf      	ldr	r3, [pc, #700]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003fbc:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003fc0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003fc4:	4bac      	ldr	r3, [pc, #688]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003fc6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003fca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fce:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003fd2:	4ba8      	ldr	r3, [pc, #672]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fd4:	edd3 7a00 	vldr	s15, [r3]
 8003fd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fdc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003fe0:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003fe4:	4ba4      	ldr	r3, [pc, #656]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003fe6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003fea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fee:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ff2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ff6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ffa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ffe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004002:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004006:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004008:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800400c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004010:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8004014:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004018:	edd7 7a08 	vldr	s15, [r7, #32]
 800401c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004020:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004024:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 8004028:	4b93      	ldr	r3, [pc, #588]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 800402a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800402e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004032:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8004036:	ee27 5b05 	vmul.f64	d5, d7, d5
 800403a:	edd7 7a07 	vldr	s15, [r7, #28]
 800403e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004042:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004046:	ee36 7b07 	vadd.f64	d7, d6, d7
 800404a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 800404e:	4b8a      	ldr	r3, [pc, #552]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004050:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8004054:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004056:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 800405a:	4b87      	ldr	r3, [pc, #540]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 800405c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8004060:	4b84      	ldr	r3, [pc, #528]	; (8004274 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800406a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004070:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8004074:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004080:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004082:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8004086:	edd7 7a08 	vldr	s15, [r7, #32]
 800408a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8004092:	4b79      	ldr	r3, [pc, #484]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8004094:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8004098:	edd7 7a07 	vldr	s15, [r7, #28]
 800409c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040a4:	4b74      	ldr	r3, [pc, #464]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 80040a6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80040aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80040ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b2:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 80040b6:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 80040b8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.Kp_p = 0.4;
 80040bc:	4b6f      	ldr	r3, [pc, #444]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80040be:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 80040ca:	4b6c      	ldr	r3, [pc, #432]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 80040d2:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80040d4:	4a6c      	ldr	r2, [pc, #432]	; (8004288 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 80040e8:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040ea:	4a68      	ldr	r2, [pc, #416]	; (800428c <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 80040ee:	4b60      	ldr	r3, [pc, #384]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 80040f6:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 80040fe:	4b5f      	ldr	r3, [pc, #380]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8004106:	4b5d      	ldr	r3, [pc, #372]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8004136:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 800413e:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004148:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800414c:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800414e:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004156:	4b49      	ldr	r3, [pc, #292]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004158:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 800415c:	4b44      	ldr	r3, [pc, #272]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800415e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004162:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004164:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8004168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800416c:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800416e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8004172:	4b42      	ldr	r3, [pc, #264]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004174:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004178:	4b40      	ldr	r3, [pc, #256]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800417a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800417e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004182:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004184:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800418a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004190:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8004194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800419a:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041a0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041a6:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 80041aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ae:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041b0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041b6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80041ba:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041bc:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80041c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80041c6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80041ca:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041cc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041d2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041da:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041dc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80041e2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80041e8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80041ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f0:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80041f2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 80041f6:	4b21      	ldr	r3, [pc, #132]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041f8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80041fc:	4b1f      	ldr	r3, [pc, #124]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 80041fe:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004208:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800420e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8004214:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 800421e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004224:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800422a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800422e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004234:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800423a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8004240:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800424a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004250:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8004256:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800425c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004264:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800426a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800426e:	e00f      	b.n	8004290 <HAL_TIM_PeriodElapsedCallback+0xa68>
 8004270:	24000728 	.word	0x24000728
 8004274:	24000bf8 	.word	0x24000bf8
 8004278:	2400080c 	.word	0x2400080c
 800427c:	24000560 	.word	0x24000560
 8004280:	3ecccccd 	.word	0x3ecccccd
 8004284:	24000644 	.word	0x24000644
 8004288:	3cf5c28f 	.word	0x3cf5c28f
 800428c:	3e19999a 	.word	0x3e19999a
 8004290:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8004292:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p))
 800429e:	4b78      	ldr	r3, [pc, #480]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042a0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80042a4:	4b76      	ldr	r3, [pc, #472]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042a6:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80042aa:	4b75      	ldr	r3, [pc, #468]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042ac:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80042b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
 80042bc:	4b70      	ldr	r3, [pc, #448]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042be:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80042c2:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042c4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80042c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042cc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042d2:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80042d6:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042d8:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80042dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));
 80042e4:	4b66      	ldr	r3, [pc, #408]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042e6:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 80042ea:	4b65      	ldr	r3, [pc, #404]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042ec:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80042f0:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 80042f2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80042f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fe:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8004302:	4b5f      	ldr	r3, [pc, #380]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8004304:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8004308:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800430a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 800430e:	4b5d      	ldr	r3, [pc, #372]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004310:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004316:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800431a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800431e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004324:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8004328:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800432a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800432e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004332:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p))
 8004336:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004338:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800433c:	4b51      	ldr	r3, [pc, #324]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800433e:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8004342:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004344:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004348:	ee76 7a67 	vsub.f32	s15, s12, s15
 800434c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004350:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004356:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800435a:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800435c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004364:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800436a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800436e:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004370:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004378:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800437e:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8004382:	4b40      	ldr	r3, [pc, #256]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 8004384:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800438a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800438e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004396:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0xc5c>)
 800439c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 80043a0:	4b39      	ldr	r3, [pc, #228]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043a2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 80043a6:	4b38      	ldr	r3, [pc, #224]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043a8:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80043ac:	4b36      	ldr	r3, [pc, #216]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043ae:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80043b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 80043ba:	4b33      	ldr	r3, [pc, #204]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043bc:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043c2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80043c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043ca:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p))
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043d0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043d6:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043dc:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80043e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043e8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
 80043ec:	4b26      	ldr	r3, [pc, #152]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043ee:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 80043f4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80043f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043fc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004402:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004408:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800440c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004410:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004416:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800441c:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004422:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004426:	ee76 7a67 	vsub.f32	s15, s12, s15
 800442a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800442e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 8004434:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
		if (joint13_on) {
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_TIM_PeriodElapsedCallback+0xc64>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_TIM_PeriodElapsedCallback+0xc80>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8004442:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0xc58>)
 8004444:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004448:	eeb0 0a67 	vmov.f32	s0, s15
 800444c:	4810      	ldr	r0, [pc, #64]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0xc68>)
 800444e:	f7fd ffc7 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004452:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80044a4 <HAL_TIM_PeriodElapsedCallback+0xc7c>
 8004456:	480f      	ldr	r0, [pc, #60]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0xc6c>)
 8004458:	f7fd ffc2 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0xc60>)
 800445e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004462:	eeb0 0a67 	vmov.f32	s0, s15
 8004466:	480c      	ldr	r0, [pc, #48]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0xc70>)
 8004468:	f7fd ffba 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_TIM_PeriodElapsedCallback+0xc74>)
 800446e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004472:	eeb0 0a67 	vmov.f32	s0, s15
 8004476:	480a      	ldr	r0, [pc, #40]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0xc78>)
 8004478:	f7fd ffb2 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 800447c:	e02b      	b.n	80044d6 <HAL_TIM_PeriodElapsedCallback+0xcae>
 800447e:	bf00      	nop
 8004480:	24000560 	.word	0x24000560
 8004484:	24000644 	.word	0x24000644
 8004488:	24000728 	.word	0x24000728
 800448c:	24000b46 	.word	0x24000b46
 8004490:	240004c0 	.word	0x240004c0
 8004494:	240004e8 	.word	0x240004e8
 8004498:	24000510 	.word	0x24000510
 800449c:	2400080c 	.word	0x2400080c
 80044a0:	24000538 	.word	0x24000538
 80044a4:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 80044a8:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80044a4 <HAL_TIM_PeriodElapsedCallback+0xc7c>
 80044ac:	48a9      	ldr	r0, [pc, #676]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 80044ae:	f7fd ff97 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 80044b2:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8004758 <HAL_TIM_PeriodElapsedCallback+0xf30>
 80044b6:	48a9      	ldr	r0, [pc, #676]	; (800475c <HAL_TIM_PeriodElapsedCallback+0xf34>)
 80044b8:	f7fd ff92 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 80044bc:	4ba8      	ldr	r3, [pc, #672]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80044be:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80044c2:	eeb0 0a67 	vmov.f32	s0, s15
 80044c6:	48a7      	ldr	r0, [pc, #668]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 80044c8:	f7fd ff8a 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 80044cc:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8004758 <HAL_TIM_PeriodElapsedCallback+0xf30>
 80044d0:	48a5      	ldr	r0, [pc, #660]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 80044d2:	f7fd ff85 	bl	80023e0 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80044d6:	4ba5      	ldr	r3, [pc, #660]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80044d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044da:	4aa4      	ldr	r2, [pc, #656]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80044dc:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 80044de:	4ba0      	ldr	r3, [pc, #640]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80044e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e2:	4a9f      	ldr	r2, [pc, #636]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80044e4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80044e6:	4ba2      	ldr	r3, [pc, #648]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80044e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ea:	4aa1      	ldr	r2, [pc, #644]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80044ec:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 80044ee:	4b9f      	ldr	r3, [pc, #636]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	4a9d      	ldr	r2, [pc, #628]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80044f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 80044fa:	4b99      	ldr	r3, [pc, #612]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80044fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004500:	4a97      	ldr	r2, [pc, #604]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8004502:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8004506:	4b9a      	ldr	r3, [pc, #616]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	4a98      	ldr	r2, [pc, #608]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 800450e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 8004512:	4b96      	ldr	r3, [pc, #600]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 8004514:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004518:	4a94      	ldr	r2, [pc, #592]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 800451e:	4b94      	ldr	r3, [pc, #592]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8004520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004524:	4a92      	ldr	r2, [pc, #584]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 800452a:	4b8d      	ldr	r3, [pc, #564]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 800452c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004530:	4a8b      	ldr	r2, [pc, #556]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8004532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 8004536:	4b8a      	ldr	r3, [pc, #552]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8004538:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800453c:	4a88      	ldr	r2, [pc, #544]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 800453e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8004542:	4b8a      	ldr	r3, [pc, #552]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 8004544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004548:	4a88      	ldr	r2, [pc, #544]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800454a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 800454e:	4b87      	ldr	r3, [pc, #540]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 8004550:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004554:	4a86      	ldr	r2, [pc, #536]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8004556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 800455a:	4b86      	ldr	r3, [pc, #536]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800455c:	ed93 7a00 	vldr	s14, [r3]
 8004560:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8004562:	edd3 7a00 	vldr	s15, [r3]
 8004566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456a:	4b82      	ldr	r3, [pc, #520]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800456c:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 8004570:	4b80      	ldr	r3, [pc, #512]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004572:	ed93 7a00 	vldr	s14, [r3]
 8004576:	4b81      	ldr	r3, [pc, #516]	; (800477c <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004584:	bfac      	ite	ge
 8004586:	2301      	movge	r3, #1
 8004588:	2300      	movlt	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05d      	beq.n	800464c <HAL_TIM_PeriodElapsedCallback+0xe24>
			t = (int) 0;
 8004590:	4b78      	ldr	r3, [pc, #480]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004598:	4b74      	ldr	r3, [pc, #464]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 80045a2:	4b6f      	ldr	r3, [pc, #444]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 80045ac:	4b70      	ldr	r3, [pc, #448]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 80045b6:	4b6d      	ldr	r3, [pc, #436]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 80045c0:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 80045ca:	4b69      	ldr	r3, [pc, #420]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 80045d4:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 80045dc:	4b60      	ldr	r3, [pc, #384]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80045e4:	4b62      	ldr	r3, [pc, #392]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 80045ec:	4b5f      	ldr	r3, [pc, #380]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 80045f6:	4b5a      	ldr	r3, [pc, #360]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8004600:	4b5b      	ldr	r3, [pc, #364]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 800460a:	4b58      	ldr	r3, [pc, #352]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 8004614:	4b52      	ldr	r3, [pc, #328]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 800461e:	4b54      	ldr	r3, [pc, #336]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 8004632:	4b4b      	ldr	r3, [pc, #300]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 8004646:	4b4e      	ldr	r3, [pc, #312]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a4d      	ldr	r2, [pc, #308]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d17a      	bne.n	800474a <HAL_TIM_PeriodElapsedCallback+0xf22>
		uint8_t encoder_state[12] = { (uint8_t) (((int32_t) fcb_joint1.Encoder
 8004654:	4b45      	ldr	r3, [pc, #276]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 8004656:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800465a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800465e:	ee17 3a90 	vmov	r3, s15
				>> 16) & 0xFF), (uint8_t) (((int32_t) fcb_joint1.Encoder >> 8)
 8004662:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 16) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 8) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint3.Encoder) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 16) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 8) & 0xFF),
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 8004664:	b2db      	uxtb	r3, r3
 8004666:	733b      	strb	r3, [r7, #12]
				>> 16) & 0xFF), (uint8_t) (((int32_t) fcb_joint1.Encoder >> 8)
 8004668:	4b40      	ldr	r3, [pc, #256]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800466a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800466e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004672:	ee17 3a90 	vmov	r3, s15
 8004676:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 8004678:	b2db      	uxtb	r3, r3
 800467a:	737b      	strb	r3, [r7, #13]
				& 0xFF), (uint8_t) (((int32_t) fcb_joint1.Encoder) & 0xFF),
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_TIM_PeriodElapsedCallback+0xf44>)
 800467e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004686:	edc7 7a00 	vstr	s15, [r7]
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 800468a:	783b      	ldrb	r3, [r7, #0]
 800468c:	73bb      	strb	r3, [r7, #14]
				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
 800468e:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 8004690:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004698:	ee17 3a90 	vmov	r3, s15
 800469c:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	73fb      	strb	r3, [r7, #15]
				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80046a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ac:	ee17 3a90 	vmov	r3, s15
 80046b0:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	743b      	strb	r3, [r7, #16]
				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF),
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 80046b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046c0:	edc7 7a00 	vstr	s15, [r7]
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 80046c4:	783b      	ldrb	r3, [r7, #0]
 80046c6:	747b      	strb	r3, [r7, #17]
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 16) & 0xFF),
 80046c8:	4b29      	ldr	r3, [pc, #164]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80046ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046d2:	ee17 3a90 	vmov	r3, s15
 80046d6:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	74bb      	strb	r3, [r7, #18]
				(uint8_t) (((int32_t) fcb_joint3.Encoder >> 8) & 0xFF),
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80046de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e6:	ee17 3a90 	vmov	r3, s15
 80046ea:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	74fb      	strb	r3, [r7, #19]
				(uint8_t) (((int32_t) fcb_joint3.Encoder) & 0xFF),
 80046f0:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 80046f2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80046f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046fa:	edc7 7a00 	vstr	s15, [r7]
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 80046fe:	783b      	ldrb	r3, [r7, #0]
 8004700:	753b      	strb	r3, [r7, #20]
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 16) & 0xFF),
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8004704:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800470c:	ee17 3a90 	vmov	r3, s15
 8004710:	141b      	asrs	r3, r3, #16
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 8004712:	b2db      	uxtb	r3, r3
 8004714:	757b      	strb	r3, [r7, #21]
				(uint8_t) (((int32_t) fcb_joint4.Encoder >> 8) & 0xFF),
 8004716:	4b1c      	ldr	r3, [pc, #112]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8004718:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800471c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004720:	ee17 3a90 	vmov	r3, s15
 8004724:	121b      	asrs	r3, r3, #8
				(uint8_t) (((int32_t) fcb_joint4.Encoder) & 0xFF), };
 8004726:	b2db      	uxtb	r3, r3
 8004728:	75bb      	strb	r3, [r7, #22]
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 800472c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004734:	edc7 7a00 	vstr	s15, [r7]
 8004738:	783b      	ldrb	r3, [r7, #0]
 800473a:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 12);
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	220c      	movs	r2, #12
 8004742:	4619      	mov	r1, r3
 8004744:	4811      	ldr	r0, [pc, #68]	; (800478c <HAL_TIM_PeriodElapsedCallback+0xf64>)
 8004746:	f00a fd49 	bl	800f1dc <HAL_UART_Transmit_DMA>
	}
}
 800474a:	bf00      	nop
 800474c:	3728      	adds	r7, #40	; 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	240004c0 	.word	0x240004c0
 8004758:	00000000 	.word	0x00000000
 800475c:	24000510 	.word	0x24000510
 8004760:	24000644 	.word	0x24000644
 8004764:	240004e8 	.word	0x240004e8
 8004768:	24000538 	.word	0x24000538
 800476c:	24000560 	.word	0x24000560
 8004770:	24000728 	.word	0x24000728
 8004774:	24000bf8 	.word	0x24000bf8
 8004778:	24000210 	.word	0x24000210
 800477c:	24000af4 	.word	0x24000af4
 8004780:	24000af0 	.word	0x24000af0
 8004784:	24001178 	.word	0x24001178
 8004788:	2400080c 	.word	0x2400080c
 800478c:	240012e4 	.word	0x240012e4

08004790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004794:	f002 fbda 	bl	8006f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004798:	f000 faac 	bl	8004cf4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800479c:	f7fd ff1c 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80047a0:	f7fd feaa 	bl	80024f8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80047a4:	f002 f86c 	bl	8006880 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80047a8:	f001 f8d4 	bl	8005954 <MX_TIM2_Init>
  MX_UART4_Init();
 80047ac:	f001 ff7a 	bl	80066a4 <MX_UART4_Init>
  MX_TIM4_Init();
 80047b0:	f001 f9c0 	bl	8005b34 <MX_TIM4_Init>
  MX_SPI3_Init();
 80047b4:	f000 fc50 	bl	8005058 <MX_SPI3_Init>
  MX_TIM1_Init();
 80047b8:	f001 f81e 	bl	80057f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80047bc:	f001 f942 	bl	8005a44 <MX_TIM3_Init>
  MX_TIM5_Init();
 80047c0:	f001 fa30 	bl	8005c24 <MX_TIM5_Init>
  MX_TIM15_Init();
 80047c4:	f001 fbc4 	bl	8005f50 <MX_TIM15_Init>
  MX_CRC_Init();
 80047c8:	f7fd fe46 	bl	8002458 <MX_CRC_Init>
  MX_UART7_Init();
 80047cc:	f001 ffbe 	bl	800674c <MX_UART7_Init>
  MX_TIM6_Init();
 80047d0:	f001 fa76 	bl	8005cc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80047d4:	f001 faaa 	bl	8005d2c <MX_TIM7_Init>
  MX_TIM12_Init();
 80047d8:	f001 fb38 	bl	8005e4c <MX_TIM12_Init>
  MX_TIM13_Init();
 80047dc:	f001 fb70 	bl	8005ec0 <MX_TIM13_Init>
  MX_TIM14_Init();
 80047e0:	f001 fb92 	bl	8005f08 <MX_TIM14_Init>
  MX_TIM16_Init();
 80047e4:	f001 fc58 	bl	8006098 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80047e8:	f001 fffe 	bl	80067e8 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80047ec:	f001 fc7a 	bl	80060e4 <MX_TIM17_Init>
  MX_TIM8_Init();
 80047f0:	f001 fad2 	bl	8005d98 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80047f4:	2214      	movs	r2, #20
 80047f6:	496a      	ldr	r1, [pc, #424]	; (80049a0 <main+0x210>)
 80047f8:	486a      	ldr	r0, [pc, #424]	; (80049a4 <main+0x214>)
 80047fa:	f00c fc54 	bl	80110a6 <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80047fe:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <main+0x218>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6a      	ldr	r2, [pc, #424]	; (80049ac <main+0x21c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d04a      	beq.n	800489e <main+0x10e>
 8004808:	4b67      	ldr	r3, [pc, #412]	; (80049a8 <main+0x218>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a68      	ldr	r2, [pc, #416]	; (80049b0 <main+0x220>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d045      	beq.n	800489e <main+0x10e>
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <main+0x218>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a67      	ldr	r2, [pc, #412]	; (80049b4 <main+0x224>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d040      	beq.n	800489e <main+0x10e>
 800481c:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <main+0x218>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a65      	ldr	r2, [pc, #404]	; (80049b8 <main+0x228>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d03b      	beq.n	800489e <main+0x10e>
 8004826:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <main+0x218>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a64      	ldr	r2, [pc, #400]	; (80049bc <main+0x22c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d036      	beq.n	800489e <main+0x10e>
 8004830:	4b5d      	ldr	r3, [pc, #372]	; (80049a8 <main+0x218>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a62      	ldr	r2, [pc, #392]	; (80049c0 <main+0x230>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d031      	beq.n	800489e <main+0x10e>
 800483a:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <main+0x218>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <main+0x234>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d02c      	beq.n	800489e <main+0x10e>
 8004844:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <main+0x218>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <main+0x238>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d027      	beq.n	800489e <main+0x10e>
 800484e:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <main+0x218>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <main+0x23c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <main+0x10e>
 8004858:	4b53      	ldr	r3, [pc, #332]	; (80049a8 <main+0x218>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5c      	ldr	r2, [pc, #368]	; (80049d0 <main+0x240>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01d      	beq.n	800489e <main+0x10e>
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <main+0x218>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5b      	ldr	r2, [pc, #364]	; (80049d4 <main+0x244>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <main+0x10e>
 800486c:	4b4e      	ldr	r3, [pc, #312]	; (80049a8 <main+0x218>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a59      	ldr	r2, [pc, #356]	; (80049d8 <main+0x248>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <main+0x10e>
 8004876:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <main+0x218>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a58      	ldr	r2, [pc, #352]	; (80049dc <main+0x24c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <main+0x10e>
 8004880:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <main+0x218>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a56      	ldr	r2, [pc, #344]	; (80049e0 <main+0x250>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <main+0x10e>
 800488a:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <main+0x218>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <main+0x254>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <main+0x10e>
 8004894:	4b44      	ldr	r3, [pc, #272]	; (80049a8 <main+0x218>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a53      	ldr	r2, [pc, #332]	; (80049e8 <main+0x258>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <main+0x120>
 800489e:	4b42      	ldr	r3, [pc, #264]	; (80049a8 <main+0x218>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <main+0x218>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0208 	bic.w	r2, r2, #8
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e007      	b.n	80048c0 <main+0x130>
 80048b0:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <main+0x218>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <main+0x218>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80048c0:	2201      	movs	r2, #1
 80048c2:	2101      	movs	r1, #1
 80048c4:	4849      	ldr	r0, [pc, #292]	; (80049ec <main+0x25c>)
 80048c6:	f005 ff09 	bl	800a6dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80048ca:	2201      	movs	r2, #1
 80048cc:	2102      	movs	r1, #2
 80048ce:	4848      	ldr	r0, [pc, #288]	; (80049f0 <main+0x260>)
 80048d0:	f005 ff04 	bl	800a6dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048da:	4844      	ldr	r0, [pc, #272]	; (80049ec <main+0x25c>)
 80048dc:	f005 fefe 	bl	800a6dc <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80048e0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8004a14 <main+0x284>
 80048e4:	4843      	ldr	r0, [pc, #268]	; (80049f4 <main+0x264>)
 80048e6:	f7fd fac7 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 80048ea:	2108      	movs	r1, #8
 80048ec:	4841      	ldr	r0, [pc, #260]	; (80049f4 <main+0x264>)
 80048ee:	f7fd fd5f 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80048f2:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80049f8 <main+0x268>
 80048f6:	483f      	ldr	r0, [pc, #252]	; (80049f4 <main+0x264>)
 80048f8:	f7fd fd36 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80048fc:	483d      	ldr	r0, [pc, #244]	; (80049f4 <main+0x264>)
 80048fe:	f7fd faaa 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8004902:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004a14 <main+0x284>
 8004906:	483d      	ldr	r0, [pc, #244]	; (80049fc <main+0x26c>)
 8004908:	f7fd fab6 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 800490c:	2110      	movs	r1, #16
 800490e:	483b      	ldr	r0, [pc, #236]	; (80049fc <main+0x26c>)
 8004910:	f7fd fd4e 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8004914:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004918:	4838      	ldr	r0, [pc, #224]	; (80049fc <main+0x26c>)
 800491a:	f7fd fd25 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 800491e:	4837      	ldr	r0, [pc, #220]	; (80049fc <main+0x26c>)
 8004920:	f7fd fa99 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8004924:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004a14 <main+0x284>
 8004928:	4835      	ldr	r0, [pc, #212]	; (8004a00 <main+0x270>)
 800492a:	f7fd faa5 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 800492e:	2110      	movs	r1, #16
 8004930:	4833      	ldr	r0, [pc, #204]	; (8004a00 <main+0x270>)
 8004932:	f7fd fd3d 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8004936:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800493a:	4831      	ldr	r0, [pc, #196]	; (8004a00 <main+0x270>)
 800493c:	f7fd fd14 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004940:	482f      	ldr	r0, [pc, #188]	; (8004a00 <main+0x270>)
 8004942:	f7fd fa88 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8004946:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004a14 <main+0x284>
 800494a:	482e      	ldr	r0, [pc, #184]	; (8004a04 <main+0x274>)
 800494c:	f7fd fa94 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(16);
 8004950:	2110      	movs	r1, #16
 8004952:	482c      	ldr	r0, [pc, #176]	; (8004a04 <main+0x274>)
 8004954:	f7fd fd2c 	bl	80023b0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004958:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800495c:	4829      	ldr	r0, [pc, #164]	; (8004a04 <main+0x274>)
 800495e:	f7fd fd03 	bl	8002368 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8004962:	4828      	ldr	r0, [pc, #160]	; (8004a04 <main+0x274>)
 8004964:	f7fd fa77 	bl	8001e56 <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004968:	2191      	movs	r1, #145	; 0x91
 800496a:	4827      	ldr	r0, [pc, #156]	; (8004a08 <main+0x278>)
 800496c:	f7fd f9bd 	bl	8001cea <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004970:	2139      	movs	r1, #57	; 0x39
 8004972:	4825      	ldr	r0, [pc, #148]	; (8004a08 <main+0x278>)
 8004974:	f7fd f9a8 	bl	8001cc8 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004978:	4823      	ldr	r0, [pc, #140]	; (8004a08 <main+0x278>)
 800497a:	f7fc ffd0 	bl	800191e <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 800497e:	4822      	ldr	r0, [pc, #136]	; (8004a08 <main+0x278>)
 8004980:	f7fd f9c4 	bl	8001d0c <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <main+0x27c>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f083 0301 	eor.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d041      	beq.n	8004a18 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 8004994:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004a10 <main+0x280>
 8004998:	4818      	ldr	r0, [pc, #96]	; (80049fc <main+0x26c>)
 800499a:	f7fd fa6d 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 800499e:	e7f1      	b.n	8004984 <main+0x1f4>
 80049a0:	24000b2c 	.word	0x24000b2c
 80049a4:	24001374 	.word	0x24001374
 80049a8:	2400165c 	.word	0x2400165c
 80049ac:	40020010 	.word	0x40020010
 80049b0:	40020028 	.word	0x40020028
 80049b4:	40020040 	.word	0x40020040
 80049b8:	40020058 	.word	0x40020058
 80049bc:	40020070 	.word	0x40020070
 80049c0:	40020088 	.word	0x40020088
 80049c4:	400200a0 	.word	0x400200a0
 80049c8:	400200b8 	.word	0x400200b8
 80049cc:	40020410 	.word	0x40020410
 80049d0:	40020428 	.word	0x40020428
 80049d4:	40020440 	.word	0x40020440
 80049d8:	40020458 	.word	0x40020458
 80049dc:	40020470 	.word	0x40020470
 80049e0:	40020488 	.word	0x40020488
 80049e4:	400204a0 	.word	0x400204a0
 80049e8:	400204b8 	.word	0x400204b8
 80049ec:	58020400 	.word	0x58020400
 80049f0:	58021000 	.word	0x58021000
 80049f4:	240004c0 	.word	0x240004c0
 80049f8:	42280000 	.word	0x42280000
 80049fc:	240004e8 	.word	0x240004e8
 8004a00:	24000510 	.word	0x24000510
 8004a04:	24000538 	.word	0x24000538
 8004a08:	24000ab8 	.word	0x24000ab8
 8004a0c:	24000b43 	.word	0x24000b43
 8004a10:	44960000 	.word	0x44960000
 8004a14:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 8004a18:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004a14 <main+0x284>
 8004a1c:	489a      	ldr	r0, [pc, #616]	; (8004c88 <main+0x4f8>)
 8004a1e:	f7fd fa2b 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 8004a22:	20c8      	movs	r0, #200	; 0xc8
 8004a24:	f002 fb24 	bl	8007070 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 8004a28:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8004c8c <main+0x4fc>
 8004a2c:	4896      	ldr	r0, [pc, #600]	; (8004c88 <main+0x4f8>)
 8004a2e:	f7fd fa23 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004a32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a36:	f002 fb1b 	bl	8007070 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 8004a3a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8004c90 <main+0x500>
 8004a3e:	4892      	ldr	r0, [pc, #584]	; (8004c88 <main+0x4f8>)
 8004a40:	f7fd fa1a 	bl	8001e78 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a48:	f002 fb12 	bl	8007070 <HAL_Delay>
	gripper.GripperOpen();
 8004a4c:	4891      	ldr	r0, [pc, #580]	; (8004c94 <main+0x504>)
 8004a4e:	f7fd f973 	bl	8001d38 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004a52:	4b91      	ldr	r3, [pc, #580]	; (8004c98 <main+0x508>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004a58:	4890      	ldr	r0, [pc, #576]	; (8004c9c <main+0x50c>)
 8004a5a:	f7fb fe3a 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8004a5e:	488f      	ldr	r0, [pc, #572]	; (8004c9c <main+0x50c>)
 8004a60:	f7fb fe66 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b8d      	ldr	r3, [pc, #564]	; (8004ca0 <main+0x510>)
 8004a6a:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004a6c:	4b8c      	ldr	r3, [pc, #560]	; (8004ca0 <main+0x510>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d110      	bne.n	8004a96 <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8004a74:	4889      	ldr	r0, [pc, #548]	; (8004c9c <main+0x50c>)
 8004a76:	f7fb fec1 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004a84:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 8004c80 <main+0x4f0>
 8004a88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004a90:	4b84      	ldr	r3, [pc, #528]	; (8004ca4 <main+0x514>)
 8004a92:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 8004a96:	4884      	ldr	r0, [pc, #528]	; (8004ca8 <main+0x518>)
 8004a98:	f7fb fe1b 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004a9c:	4882      	ldr	r0, [pc, #520]	; (8004ca8 <main+0x518>)
 8004a9e:	f7fb fe47 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b81      	ldr	r3, [pc, #516]	; (8004cac <main+0x51c>)
 8004aa8:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004aaa:	4b80      	ldr	r3, [pc, #512]	; (8004cac <main+0x51c>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d115      	bne.n	8004ade <main+0x34e>
		encoderJ2.unwarp();
 8004ab2:	487d      	ldr	r0, [pc, #500]	; (8004ca8 <main+0x518>)
 8004ab4:	f7fb fec4 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004ab8:	487b      	ldr	r0, [pc, #492]	; (8004ca8 <main+0x518>)
 8004aba:	f7fb ff13 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8004abe:	487a      	ldr	r0, [pc, #488]	; (8004ca8 <main+0x518>)
 8004ac0:	f7fb ff1d 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8004ac4:	ee07 0a90 	vmov	s15, r0
 8004ac8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004acc:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8004c80 <main+0x4f0>
 8004ad0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ad4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ad8:	4b75      	ldr	r3, [pc, #468]	; (8004cb0 <main+0x520>)
 8004ada:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 8004ade:	4875      	ldr	r0, [pc, #468]	; (8004cb4 <main+0x524>)
 8004ae0:	f7fb fdf7 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8004ae4:	4873      	ldr	r0, [pc, #460]	; (8004cb4 <main+0x524>)
 8004ae6:	f7fb fe23 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4b72      	ldr	r3, [pc, #456]	; (8004cb8 <main+0x528>)
 8004af0:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8004af2:	4b71      	ldr	r3, [pc, #452]	; (8004cb8 <main+0x528>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d110      	bne.n	8004b1c <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8004afa:	486e      	ldr	r0, [pc, #440]	; (8004cb4 <main+0x524>)
 8004afc:	f7fb fe7e 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b00:	4603      	mov	r3, r0
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b0a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8004c80 <main+0x4f0>
 8004b0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b16:	4b69      	ldr	r3, [pc, #420]	; (8004cbc <main+0x52c>)
 8004b18:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 8004b1c:	4868      	ldr	r0, [pc, #416]	; (8004cc0 <main+0x530>)
 8004b1e:	f7fb fdd8 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8004b22:	4867      	ldr	r0, [pc, #412]	; (8004cc0 <main+0x530>)
 8004b24:	f7fb fe04 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <main+0x534>)
 8004b2e:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004b30:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <main+0x534>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d110      	bne.n	8004b5a <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609;
 8004b38:	4861      	ldr	r0, [pc, #388]	; (8004cc0 <main+0x530>)
 8004b3a:	f7fb fe5f 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b48:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8004c80 <main+0x4f0>
 8004b4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b54:	4b5c      	ldr	r3, [pc, #368]	; (8004cc8 <main+0x538>)
 8004b56:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 8004b5a:	4b52      	ldr	r3, [pc, #328]	; (8004ca4 <main+0x514>)
 8004b5c:	4a5b      	ldr	r2, [pc, #364]	; (8004ccc <main+0x53c>)
 8004b5e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004b62:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <main+0x514>)
 8004b64:	4a5a      	ldr	r2, [pc, #360]	; (8004cd0 <main+0x540>)
 8004b66:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004b6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ca4 <main+0x514>)
 8004b6c:	4a59      	ldr	r2, [pc, #356]	; (8004cd4 <main+0x544>)
 8004b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004b72:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <main+0x514>)
 8004b74:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <main+0x548>)
 8004b76:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004b7a:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <main+0x52c>)
 8004b7c:	4a53      	ldr	r2, [pc, #332]	; (8004ccc <main+0x53c>)
 8004b7e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004b82:	4b4e      	ldr	r3, [pc, #312]	; (8004cbc <main+0x52c>)
 8004b84:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <main+0x540>)
 8004b86:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004b8a:	4b4c      	ldr	r3, [pc, #304]	; (8004cbc <main+0x52c>)
 8004b8c:	4a51      	ldr	r2, [pc, #324]	; (8004cd4 <main+0x544>)
 8004b8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004b92:	4b4a      	ldr	r3, [pc, #296]	; (8004cbc <main+0x52c>)
 8004b94:	4a50      	ldr	r2, [pc, #320]	; (8004cd8 <main+0x548>)
 8004b96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <main+0x514>)
 8004b9c:	4a4f      	ldr	r2, [pc, #316]	; (8004cdc <main+0x54c>)
 8004b9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 8004ba2:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <main+0x514>)
 8004ba4:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <main+0x550>)
 8004ba6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <main+0x520>)
 8004bac:	4a4b      	ldr	r2, [pc, #300]	; (8004cdc <main+0x54c>)
 8004bae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <main+0x520>)
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	; (8004ce4 <main+0x554>)
 8004bb6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004bba:	4b40      	ldr	r3, [pc, #256]	; (8004cbc <main+0x52c>)
 8004bbc:	4a47      	ldr	r2, [pc, #284]	; (8004cdc <main+0x54c>)
 8004bbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <main+0x52c>)
 8004bc4:	4a46      	ldr	r2, [pc, #280]	; (8004ce0 <main+0x550>)
 8004bc6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <main+0x514>)
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	4a35      	ldr	r2, [pc, #212]	; (8004ca4 <main+0x514>)
 8004bd0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 8004bd4:	4b33      	ldr	r3, [pc, #204]	; (8004ca4 <main+0x514>)
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <main+0x514>)
 8004be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004be4:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <main+0x514>)
 8004be6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 8004bea:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <main+0x514>)
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <main+0x514>)
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	4a2a      	ldr	r2, [pc, #168]	; (8004ca4 <main+0x514>)
 8004bfa:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 8004bfc:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <main+0x520>)
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <main+0x520>)
 8004c02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <main+0x520>)
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <main+0x520>)
 8004c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c16:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <main+0x520>)
 8004c18:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <main+0x520>)
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <main+0x520>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <main+0x520>)
 8004c2c:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 8004c2e:	4b23      	ldr	r3, [pc, #140]	; (8004cbc <main+0x52c>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <main+0x52c>)
 8004c34:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004c38:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <main+0x52c>)
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <main+0x52c>)
 8004c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c48:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <main+0x52c>)
 8004c4a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004c4e:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <main+0x52c>)
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004c58:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <main+0x52c>)
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <main+0x52c>)
 8004c5e:	6493      	str	r3, [r2, #72]	; 0x48
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 8004c60:	4821      	ldr	r0, [pc, #132]	; (8004ce8 <main+0x558>)
 8004c62:	f7fb fe98 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 8004c66:	4820      	ldr	r0, [pc, #128]	; (8004ce8 <main+0x558>)
 8004c68:	f7fb fe7d 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 8004c6c:	481e      	ldr	r0, [pc, #120]	; (8004ce8 <main+0x558>)
 8004c6e:	f7fb fe92 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004c72:	481e      	ldr	r0, [pc, #120]	; (8004cec <main+0x55c>)
 8004c74:	f008 fcfc 	bl	800d670 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004c78:	481d      	ldr	r0, [pc, #116]	; (8004cf0 <main+0x560>)
 8004c7a:	f008 fcf9 	bl	800d670 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004c7e:	e7fe      	b.n	8004c7e <main+0x4ee>
 8004c80:	645a1cac 	.word	0x645a1cac
 8004c84:	4004df3b 	.word	0x4004df3b
 8004c88:	240004e8 	.word	0x240004e8
 8004c8c:	c4480000 	.word	0xc4480000
 8004c90:	00000000 	.word	0x00000000
 8004c94:	24000ab8 	.word	0x24000ab8
 8004c98:	24000b43 	.word	0x24000b43
 8004c9c:	24000450 	.word	0x24000450
 8004ca0:	24000ad4 	.word	0x24000ad4
 8004ca4:	24000560 	.word	0x24000560
 8004ca8:	2400046c 	.word	0x2400046c
 8004cac:	24000ad5 	.word	0x24000ad5
 8004cb0:	24000644 	.word	0x24000644
 8004cb4:	24000488 	.word	0x24000488
 8004cb8:	24000ad6 	.word	0x24000ad6
 8004cbc:	24000728 	.word	0x24000728
 8004cc0:	240004a4 	.word	0x240004a4
 8004cc4:	24000ad7 	.word	0x24000ad7
 8004cc8:	2400080c 	.word	0x2400080c
 8004ccc:	331ac86b 	.word	0x331ac86b
 8004cd0:	33e9d3b8 	.word	0x33e9d3b8
 8004cd4:	33e9d3bd 	.word	0x33e9d3bd
 8004cd8:	3531278c 	.word	0x3531278c
 8004cdc:	3a83126f 	.word	0x3a83126f
 8004ce0:	358637bd 	.word	0x358637bd
 8004ce4:	37fba882 	.word	0x37fba882
 8004ce8:	24000ad8 	.word	0x24000ad8
 8004cec:	2400112c 	.word	0x2400112c
 8004cf0:	24001178 	.word	0x24001178

08004cf4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b09c      	sub	sp, #112	; 0x70
 8004cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cfe:	224c      	movs	r2, #76	; 0x4c
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f00d fd80 	bl	8012808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f00d fd7a 	bl	8012808 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004d14:	2002      	movs	r0, #2
 8004d16:	f005 fd15 	bl	800a744 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <_Z18SystemClock_Configv+0x10c>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	4a37      	ldr	r2, [pc, #220]	; (8004e00 <_Z18SystemClock_Configv+0x10c>)
 8004d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d28:	6193      	str	r3, [r2, #24]
 8004d2a:	4b35      	ldr	r3, [pc, #212]	; (8004e00 <_Z18SystemClock_Configv+0x10c>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <_Z18SystemClock_Configv+0x110>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	4a32      	ldr	r2, [pc, #200]	; (8004e04 <_Z18SystemClock_Configv+0x110>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d40:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <_Z18SystemClock_Configv+0x110>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <_Z18SystemClock_Configv+0x10c>)
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d000      	beq.n	8004d66 <_Z18SystemClock_Configv+0x72>
 8004d64:	e7f2      	b.n	8004d4c <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d66:	2302      	movs	r3, #2
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d6e:	2340      	movs	r3, #64	; 0x40
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d72:	2302      	movs	r3, #2
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d76:	2300      	movs	r3, #0
 8004d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004d7e:	233c      	movs	r3, #60	; 0x3c
 8004d80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004d82:	2302      	movs	r3, #2
 8004d84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004d86:	2360      	movs	r3, #96	; 0x60
 8004d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004d8e:	230c      	movs	r3, #12
 8004d90:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f005 fd0a 	bl	800a7b8 <HAL_RCC_OscConfig>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004db4:	f000 f856 	bl	8004e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004db8:	233f      	movs	r3, #63	; 0x3f
 8004dba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004dc8:	2340      	movs	r3, #64	; 0x40
 8004dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004dda:	1d3b      	adds	r3, r7, #4
 8004ddc:	2104      	movs	r1, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f006 f918 	bl	800b014 <HAL_RCC_ClockConfig>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8004df4:	f000 f836 	bl	8004e64 <Error_Handler>
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3770      	adds	r7, #112	; 0x70
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58024800 	.word	0x58024800
 8004e04:	58000400 	.word	0x58000400

08004e08 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d102      	bne.n	8004e20 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e26:	d102      	bne.n	8004e2e <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004e28:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_GPIO_EXTI_Callback+0x50>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d102      	bne.n	8004e3a <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_GPIO_EXTI_Callback+0x54>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d102      	bne.n	8004e46 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_GPIO_EXTI_Callback+0x58>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
	}

}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	24000b42 	.word	0x24000b42
 8004e58:	24000b43 	.word	0x24000b43
 8004e5c:	24000b44 	.word	0x24000b44
 8004e60:	24000b45 	.word	0x24000b45

08004e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4808      	ldr	r0, [pc, #32]	; (8004e90 <Error_Handler+0x2c>)
 8004e6e:	f005 fc35 	bl	800a6dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004e72:	2200      	movs	r2, #0
 8004e74:	2102      	movs	r1, #2
 8004e76:	4807      	ldr	r0, [pc, #28]	; (8004e94 <Error_Handler+0x30>)
 8004e78:	f005 fc30 	bl	800a6dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e82:	4803      	ldr	r0, [pc, #12]	; (8004e90 <Error_Handler+0x2c>)
 8004e84:	f005 fc2a 	bl	800a6dc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e88:	b672      	cpsid	i
}
 8004e8a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004e8c:	e7fe      	b.n	8004e8c <Error_Handler+0x28>
 8004e8e:	bf00      	nop
 8004e90:	58020400 	.word	0x58020400
 8004e94:	58021000 	.word	0x58021000

08004e98 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d158      	bne.n	8004f5a <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d153      	bne.n	8004f5a <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004eb2:	22d4      	movs	r2, #212	; 0xd4
 8004eb4:	4947      	ldr	r1, [pc, #284]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004eb6:	4848      	ldr	r0, [pc, #288]	; (8004fd8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004eb8:	f7fb fbec 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004ebc:	22b4      	movs	r2, #180	; 0xb4
 8004ebe:	4945      	ldr	r1, [pc, #276]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ec0:	4846      	ldr	r0, [pc, #280]	; (8004fdc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004ec2:	f7fb fbe7 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004ec6:	22c4      	movs	r2, #196	; 0xc4
 8004ec8:	4942      	ldr	r1, [pc, #264]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004eca:	4845      	ldr	r0, [pc, #276]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004ecc:	f7fb fbe2 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004ed0:	22a4      	movs	r2, #164	; 0xa4
 8004ed2:	4940      	ldr	r1, [pc, #256]	; (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ed4:	4843      	ldr	r0, [pc, #268]	; (8004fe4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004ed6:	f7fb fbdd 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004eda:	2320      	movs	r3, #32
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4b42      	ldr	r3, [pc, #264]	; (8004fe8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4942      	ldr	r1, [pc, #264]	; (8004fec <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004ee4:	4842      	ldr	r0, [pc, #264]	; (8004ff0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004ee6:	f7fc ff69 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4b40      	ldr	r3, [pc, #256]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	4940      	ldr	r1, [pc, #256]	; (8004ff8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004ef6:	4841      	ldr	r0, [pc, #260]	; (8004ffc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004ef8:	f7fc ff60 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004f04:	2204      	movs	r2, #4
 8004f06:	493e      	ldr	r1, [pc, #248]	; (8005000 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004f08:	483e      	ldr	r0, [pc, #248]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004f0a:	f7fc ff57 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	4b34      	ldr	r3, [pc, #208]	; (8004fe8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004f16:	2208      	movs	r2, #8
 8004f18:	493b      	ldr	r1, [pc, #236]	; (8005008 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004f1a:	483c      	ldr	r0, [pc, #240]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004f1c:	f7fc ff4e 	bl	8001dbc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004f20:	483b      	ldr	r0, [pc, #236]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004f22:	f7fb fdab 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004f26:	483b      	ldr	r0, [pc, #236]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004f28:	f7fb fda8 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004f2c:	483a      	ldr	r0, [pc, #232]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004f2e:	f7fb fda5 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004f32:	483a      	ldr	r0, [pc, #232]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004f34:	f7fb fda2 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004f38:	4839      	ldr	r0, [pc, #228]	; (8005020 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004f3a:	f7fb fd9f 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004f3e:	4839      	ldr	r0, [pc, #228]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f40:	f7fb fd9c 	bl	8000a7c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004f44:	2208      	movs	r2, #8
 8004f46:	4938      	ldr	r1, [pc, #224]	; (8005028 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004f48:	4838      	ldr	r0, [pc, #224]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f4a:	f7fc fcad 	bl	80018a8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004f4e:	2304      	movs	r3, #4
 8004f50:	2200      	movs	r2, #0
 8004f52:	4937      	ldr	r1, [pc, #220]	; (8005030 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004f54:	4837      	ldr	r0, [pc, #220]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004f56:	f7fb fcde 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d134      	bne.n	8004fca <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d12f      	bne.n	8004fca <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004f6a:	4832      	ldr	r0, [pc, #200]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004f6c:	f7fb fcf0 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004f70:	482e      	ldr	r0, [pc, #184]	; (800502c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004f72:	f7fc fcc9 	bl	8001908 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004f76:	482b      	ldr	r0, [pc, #172]	; (8005024 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004f78:	f7fb fdee 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004f7c:	4828      	ldr	r0, [pc, #160]	; (8005020 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004f7e:	f7fb fdeb 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004f82:	4826      	ldr	r0, [pc, #152]	; (800501c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004f84:	f7fb fde8 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004f88:	4823      	ldr	r0, [pc, #140]	; (8005018 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004f8a:	f7fb fde5 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004f8e:	4821      	ldr	r0, [pc, #132]	; (8005014 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004f90:	f7fb fde2 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004f94:	481e      	ldr	r0, [pc, #120]	; (8005010 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004f96:	f7fb fddf 	bl	8000b58 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004f9a:	481c      	ldr	r0, [pc, #112]	; (800500c <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004f9c:	f7fc ff50 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004fa0:	4818      	ldr	r0, [pc, #96]	; (8005004 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004fa2:	f7fc ff4d 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004fa6:	4815      	ldr	r0, [pc, #84]	; (8004ffc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004fa8:	f7fc ff4a 	bl	8001e40 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004fac:	4810      	ldr	r0, [pc, #64]	; (8004ff0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004fae:	f7fc ff47 	bl	8001e40 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004fb2:	480c      	ldr	r0, [pc, #48]	; (8004fe4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004fb4:	f7fb fb82 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004fb8:	4809      	ldr	r0, [pc, #36]	; (8004fe0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004fba:	f7fb fb7f 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004fbe:	4807      	ldr	r0, [pc, #28]	; (8004fdc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004fc0:	f7fb fb7c 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004fc4:	4804      	ldr	r0, [pc, #16]	; (8004fd8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004fc6:	f7fb fb79 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	240011c4 	.word	0x240011c4
 8004fd8:	24000450 	.word	0x24000450
 8004fdc:	2400046c 	.word	0x2400046c
 8004fe0:	24000488 	.word	0x24000488
 8004fe4:	240004a4 	.word	0x240004a4
 8004fe8:	58020400 	.word	0x58020400
 8004fec:	24000e34 	.word	0x24000e34
 8004ff0:	240004c0 	.word	0x240004c0
 8004ff4:	58021000 	.word	0x58021000
 8004ff8:	24000d9c 	.word	0x24000d9c
 8004ffc:	240004e8 	.word	0x240004e8
 8005000:	240010e0 	.word	0x240010e0
 8005004:	24000510 	.word	0x24000510
 8005008:	24000de8 	.word	0x24000de8
 800500c:	24000538 	.word	0x24000538
 8005010:	24000560 	.word	0x24000560
 8005014:	24000644 	.word	0x24000644
 8005018:	24000728 	.word	0x24000728
 800501c:	2400080c 	.word	0x2400080c
 8005020:	240008f0 	.word	0x240008f0
 8005024:	240009d4 	.word	0x240009d4
 8005028:	24000e80 	.word	0x24000e80
 800502c:	24000ab8 	.word	0x24000ab8
 8005030:	24000fb0 	.word	0x24000fb0
 8005034:	24000ad8 	.word	0x24000ad8

08005038 <_GLOBAL__sub_I_TIM_MS>:
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
 800503c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005040:	2001      	movs	r0, #1
 8005042:	f7ff ff29 	bl	8004e98 <_Z41__static_initialization_and_destruction_0ii>
 8005046:	bd80      	pop	{r7, pc}

08005048 <_GLOBAL__sub_D_TIM_MS>:
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
 800504c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005050:	2000      	movs	r0, #0
 8005052:	f7ff ff21 	bl	8004e98 <_Z41__static_initialization_and_destruction_0ii>
 8005056:	bd80      	pop	{r7, pc}

08005058 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <MX_SPI3_Init+0xa8>)
 800505e:	4a29      	ldr	r2, [pc, #164]	; (8005104 <MX_SPI3_Init+0xac>)
 8005060:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005062:	4b27      	ldr	r3, [pc, #156]	; (8005100 <MX_SPI3_Init+0xa8>)
 8005064:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005068:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800506a:	4b25      	ldr	r3, [pc, #148]	; (8005100 <MX_SPI3_Init+0xa8>)
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005070:	4b23      	ldr	r3, [pc, #140]	; (8005100 <MX_SPI3_Init+0xa8>)
 8005072:	2207      	movs	r2, #7
 8005074:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <MX_SPI3_Init+0xa8>)
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <MX_SPI3_Init+0xa8>)
 800507e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005082:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <MX_SPI3_Init+0xa8>)
 8005086:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800508a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <MX_SPI3_Init+0xa8>)
 800508e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005092:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <MX_SPI3_Init+0xa8>)
 8005096:	2200      	movs	r2, #0
 8005098:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800509a:	4b19      	ldr	r3, [pc, #100]	; (8005100 <MX_SPI3_Init+0xa8>)
 800509c:	2200      	movs	r2, #0
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a0:	4b17      	ldr	r3, [pc, #92]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050bc:	2200      	movs	r2, #0
 80050be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050da:	2200      	movs	r2, #0
 80050dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <MX_SPI3_Init+0xa8>)
 80050ec:	f007 fe86 	bl	800cdfc <HAL_SPI_Init>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80050f6:	f7ff feb5 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	24000c20 	.word	0x24000c20
 8005104:	40003c00 	.word	0x40003c00

08005108 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b0b8      	sub	sp, #224	; 0xe0
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005120:	f107 0310 	add.w	r3, r7, #16
 8005124:	22bc      	movs	r2, #188	; 0xbc
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f00d fb6d 	bl	8012808 <memset>
  if(spiHandle->Instance==SPI3)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a56      	ldr	r2, [pc, #344]	; (800528c <HAL_SPI_MspInit+0x184>)
 8005134:	4293      	cmp	r3, r2
 8005136:	f040 80a5 	bne.w	8005284 <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800513a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800513e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005140:	2300      	movs	r3, #0
 8005142:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	4618      	mov	r0, r3
 800514a:	f006 faef 	bl	800b72c <HAL_RCCEx_PeriphCLKConfig>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8005154:	f7ff fe86 	bl	8004e64 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005158:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <HAL_SPI_MspInit+0x188>)
 800515a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800515e:	4a4c      	ldr	r2, [pc, #304]	; (8005290 <HAL_SPI_MspInit+0x188>)
 8005160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005164:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005168:	4b49      	ldr	r3, [pc, #292]	; (8005290 <HAL_SPI_MspInit+0x188>)
 800516a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800516e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005176:	4b46      	ldr	r3, [pc, #280]	; (8005290 <HAL_SPI_MspInit+0x188>)
 8005178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517c:	4a44      	ldr	r2, [pc, #272]	; (8005290 <HAL_SPI_MspInit+0x188>)
 800517e:	f043 0304 	orr.w	r3, r3, #4
 8005182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005186:	4b42      	ldr	r3, [pc, #264]	; (8005290 <HAL_SPI_MspInit+0x188>)
 8005188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005194:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519c:	2302      	movs	r3, #2
 800519e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051ae:	2306      	movs	r3, #6
 80051b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051b8:	4619      	mov	r1, r3
 80051ba:	4836      	ldr	r0, [pc, #216]	; (8005294 <HAL_SPI_MspInit+0x18c>)
 80051bc:	f005 f8de 	bl	800a37c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80051c0:	4b35      	ldr	r3, [pc, #212]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051c2:	4a36      	ldr	r2, [pc, #216]	; (800529c <HAL_SPI_MspInit+0x194>)
 80051c4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80051c6:	4b34      	ldr	r3, [pc, #208]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051c8:	223e      	movs	r2, #62	; 0x3e
 80051ca:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051cc:	4b32      	ldr	r3, [pc, #200]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051d8:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051de:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051e0:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051e6:	4b2c      	ldr	r3, [pc, #176]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80051ec:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051f8:	4b27      	ldr	r3, [pc, #156]	; (8005298 <HAL_SPI_MspInit+0x190>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80051fe:	4826      	ldr	r0, [pc, #152]	; (8005298 <HAL_SPI_MspInit+0x190>)
 8005200:	f002 fa80 	bl	8007704 <HAL_DMA_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800520a:	f7ff fe2b 	bl	8004e64 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a21      	ldr	r2, [pc, #132]	; (8005298 <HAL_SPI_MspInit+0x190>)
 8005212:	679a      	str	r2, [r3, #120]	; 0x78
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_SPI_MspInit+0x190>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 800521a:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_SPI_MspInit+0x19c>)
 800521e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8005220:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005222:	223d      	movs	r2, #61	; 0x3d
 8005224:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005238:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 800523c:	2200      	movs	r2, #0
 800523e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005248:	2200      	movs	r2, #0
 800524a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 800524e:	2200      	movs	r2, #0
 8005250:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005258:	4811      	ldr	r0, [pc, #68]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 800525a:	f002 fa53 	bl	8007704 <HAL_DMA_Init>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8005264:	f7ff fdfe 	bl	8004e64 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c
 800526e:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <HAL_SPI_MspInit+0x198>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005274:	2200      	movs	r2, #0
 8005276:	2100      	movs	r1, #0
 8005278:	2033      	movs	r0, #51	; 0x33
 800527a:	f002 f804 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800527e:	2033      	movs	r0, #51	; 0x33
 8005280:	f002 f81b 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005284:	bf00      	nop
 8005286:	37e0      	adds	r7, #224	; 0xe0
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40003c00 	.word	0x40003c00
 8005290:	58024400 	.word	0x58024400
 8005294:	58020800 	.word	0x58020800
 8005298:	24000ca8 	.word	0x24000ca8
 800529c:	400200b8 	.word	0x400200b8
 80052a0:	24000d20 	.word	0x24000d20
 80052a4:	40020410 	.word	0x40020410

080052a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_MspInit+0x30>)
 80052b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052b4:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <HAL_MspInit+0x30>)
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_MspInit+0x30>)
 80052c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	58024400 	.word	0x58024400

080052dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052e0:	e7fe      	b.n	80052e0 <NMI_Handler+0x4>

080052e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052e6:	e7fe      	b.n	80052e6 <HardFault_Handler+0x4>

080052e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052ec:	e7fe      	b.n	80052ec <MemManage_Handler+0x4>

080052ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052f2:	e7fe      	b.n	80052f2 <BusFault_Handler+0x4>

080052f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f8:	e7fe      	b.n	80052f8 <UsageFault_Handler+0x4>

080052fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005328:	f001 fe82 	bl	8007030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800532c:	f001 ffdf 	bl	80072ee <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}

08005334 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005338:	4802      	ldr	r0, [pc, #8]	; (8005344 <DMA1_Stream0_IRQHandler+0x10>)
 800533a:	f003 fd0d 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	240014f4 	.word	0x240014f4

08005348 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800534c:	4802      	ldr	r0, [pc, #8]	; (8005358 <DMA1_Stream1_IRQHandler+0x10>)
 800534e:	f003 fd03 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2400165c 	.word	0x2400165c

0800535c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <DMA1_Stream2_IRQHandler+0x10>)
 8005362:	f003 fcf9 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	240016d4 	.word	0x240016d4

08005370 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005374:	4802      	ldr	r0, [pc, #8]	; (8005380 <DMA1_Stream3_IRQHandler+0x10>)
 8005376:	f003 fcef 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	24001404 	.word	0x24001404

08005384 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005388:	4802      	ldr	r0, [pc, #8]	; (8005394 <DMA1_Stream4_IRQHandler+0x10>)
 800538a:	f003 fce5 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800538e:	bf00      	nop
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	2400147c 	.word	0x2400147c

08005398 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800539c:	4802      	ldr	r0, [pc, #8]	; (80053a8 <DMA1_Stream5_IRQHandler+0x10>)
 800539e:	f003 fcdb 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2400156c 	.word	0x2400156c

080053ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80053b0:	4802      	ldr	r0, [pc, #8]	; (80053bc <DMA1_Stream6_IRQHandler+0x10>)
 80053b2:	f003 fcd1 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	240015e4 	.word	0x240015e4

080053c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80053c4:	2040      	movs	r0, #64	; 0x40
 80053c6:	f005 f9a2 	bl	800a70e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 80053ca:	2080      	movs	r0, #128	; 0x80
 80053cc:	f005 f99f 	bl	800a70e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053d0:	bf00      	nop
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053d8:	4802      	ldr	r0, [pc, #8]	; (80053e4 <USART2_IRQHandler+0x10>)
 80053da:	f009 ff91 	bl	800f300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	240012e4 	.word	0x240012e4

080053e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053ec:	4802      	ldr	r0, [pc, #8]	; (80053f8 <USART3_IRQHandler+0x10>)
 80053ee:	f009 ff87 	bl	800f300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	24001374 	.word	0x24001374

080053fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8005400:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005404:	f005 f983 	bl	800a70e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8005408:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800540c:	f005 f97f 	bl	800a70e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8005410:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005414:	f005 f97b 	bl	800a70e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8005418:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800541c:	f005 f977 	bl	800a70e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}

08005424 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005428:	4803      	ldr	r0, [pc, #12]	; (8005438 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800542a:	f008 fc6b 	bl	800dd04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800542e:	4803      	ldr	r0, [pc, #12]	; (800543c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005430:	f008 fc68 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005434:	bf00      	nop
 8005436:	bd80      	pop	{r7, pc}
 8005438:	24000fb0 	.word	0x24000fb0
 800543c:	24000ffc 	.word	0x24000ffc

08005440 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005444:	4803      	ldr	r0, [pc, #12]	; (8005454 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005446:	f008 fc5d 	bl	800dd04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800544a:	4803      	ldr	r0, [pc, #12]	; (8005458 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800544c:	f008 fc5a 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005450:	bf00      	nop
 8005452:	bd80      	pop	{r7, pc}
 8005454:	24000fb0 	.word	0x24000fb0
 8005458:	24001048 	.word	0x24001048

0800545c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8005462:	f008 fc4f 	bl	800dd04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8005466:	4803      	ldr	r0, [pc, #12]	; (8005474 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8005468:	f008 fc4c 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}
 8005470:	24000fb0 	.word	0x24000fb0
 8005474:	24001094 	.word	0x24001094

08005478 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800547c:	4802      	ldr	r0, [pc, #8]	; (8005488 <TIM8_CC_IRQHandler+0x10>)
 800547e:	f008 fc41 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	24000fb0 	.word	0x24000fb0

0800548c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005490:	4802      	ldr	r0, [pc, #8]	; (800549c <DMA1_Stream7_IRQHandler+0x10>)
 8005492:	f003 fc61 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	24000ca8 	.word	0x24000ca8

080054a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80054a4:	4802      	ldr	r0, [pc, #8]	; (80054b0 <TIM5_IRQHandler+0x10>)
 80054a6:	f008 fc2d 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	24000ecc 	.word	0x24000ecc

080054b4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <SPI3_IRQHandler+0x10>)
 80054ba:	f007 fda5 	bl	800d008 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	24000c20 	.word	0x24000c20

080054c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80054cc:	4802      	ldr	r0, [pc, #8]	; (80054d8 <UART4_IRQHandler+0x10>)
 80054ce:	f009 ff17 	bl	800f300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	240011c4 	.word	0x240011c4

080054dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80054e0:	4802      	ldr	r0, [pc, #8]	; (80054ec <TIM6_DAC_IRQHandler+0x10>)
 80054e2:	f008 fc0f 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	24000f18 	.word	0x24000f18

080054f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80054f4:	4802      	ldr	r0, [pc, #8]	; (8005500 <TIM7_IRQHandler+0x10>)
 80054f6:	f008 fc05 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	24000f64 	.word	0x24000f64

08005504 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005508:	4802      	ldr	r0, [pc, #8]	; (8005514 <DMA2_Stream0_IRQHandler+0x10>)
 800550a:	f003 fc25 	bl	8008d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	24000d20 	.word	0x24000d20

08005518 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800551c:	4802      	ldr	r0, [pc, #8]	; (8005528 <UART7_IRQHandler+0x10>)
 800551e:	f009 feef 	bl	800f300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	24001254 	.word	0x24001254

0800552c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005530:	4802      	ldr	r0, [pc, #8]	; (800553c <TIM16_IRQHandler+0x10>)
 8005532:	f008 fbe7 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	2400112c 	.word	0x2400112c

08005540 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005544:	4802      	ldr	r0, [pc, #8]	; (8005550 <TIM17_IRQHandler+0x10>)
 8005546:	f008 fbdd 	bl	800dd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	24001178 	.word	0x24001178

08005554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
	return 1;
 8005558:	2301      	movs	r3, #1
}
 800555a:	4618      	mov	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <_kill>:

int _kill(int pid, int sig)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800556e:	f00d f921 	bl	80127b4 <__errno>
 8005572:	4603      	mov	r3, r0
 8005574:	2216      	movs	r2, #22
 8005576:	601a      	str	r2, [r3, #0]
	return -1;
 8005578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <_exit>:

void _exit (int status)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800558c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ffe7 	bl	8005564 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005596:	e7fe      	b.n	8005596 <_exit+0x12>

08005598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e00a      	b.n	80055c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055aa:	f3af 8000 	nop.w
 80055ae:	4601      	mov	r1, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	60ba      	str	r2, [r7, #8]
 80055b6:	b2ca      	uxtb	r2, r1
 80055b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	3301      	adds	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	dbf0      	blt.n	80055aa <_read+0x12>
	}

return len;
 80055c8:	687b      	ldr	r3, [r7, #4]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e009      	b.n	80055f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	60ba      	str	r2, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	3301      	adds	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	dbf1      	blt.n	80055e4 <_write+0x12>
	}
	return len;
 8005600:	687b      	ldr	r3, [r7, #4]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <_close>:

int _close(int file)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
	return -1;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005632:	605a      	str	r2, [r3, #4]
	return 0;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <_isatty>:

int _isatty(int file)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
	return 1;
 800564a:	2301      	movs	r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
	return 0;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800567c:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <_sbrk+0x5c>)
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <_sbrk+0x60>)
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <_sbrk+0x64>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <_sbrk+0x64>)
 8005692:	4a12      	ldr	r2, [pc, #72]	; (80056dc <_sbrk+0x68>)
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005696:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <_sbrk+0x64>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d207      	bcs.n	80056b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056a4:	f00d f886 	bl	80127b4 <__errno>
 80056a8:	4603      	mov	r3, r0
 80056aa:	220c      	movs	r2, #12
 80056ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b2:	e009      	b.n	80056c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <_sbrk+0x64>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <_sbrk+0x64>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <_sbrk+0x64>)
 80056c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	24001d60 	.word	0x24001d60
 80056d4:	00000400 	.word	0x00000400
 80056d8:	24000d98 	.word	0x24000d98
 80056dc:	24001760 	.word	0x24001760

080056e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056e4:	4b39      	ldr	r3, [pc, #228]	; (80057cc <SystemInit+0xec>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	4a38      	ldr	r2, [pc, #224]	; (80057cc <SystemInit+0xec>)
 80056ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056f4:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <SystemInit+0xf0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d807      	bhi.n	8005710 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005700:	4b33      	ldr	r3, [pc, #204]	; (80057d0 <SystemInit+0xf0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f023 030f 	bic.w	r3, r3, #15
 8005708:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <SystemInit+0xf0>)
 800570a:	f043 0307 	orr.w	r3, r3, #7
 800570e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005710:	4b30      	ldr	r3, [pc, #192]	; (80057d4 <SystemInit+0xf4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <SystemInit+0xf4>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <SystemInit+0xf4>)
 800571e:	2200      	movs	r2, #0
 8005720:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005722:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <SystemInit+0xf4>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	492b      	ldr	r1, [pc, #172]	; (80057d4 <SystemInit+0xf4>)
 8005728:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <SystemInit+0xf8>)
 800572a:	4013      	ands	r3, r2
 800572c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800572e:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <SystemInit+0xf0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800573a:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <SystemInit+0xf0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	4a23      	ldr	r2, [pc, #140]	; (80057d0 <SystemInit+0xf0>)
 8005744:	f043 0307 	orr.w	r3, r3, #7
 8005748:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <SystemInit+0xf4>)
 800574c:	2200      	movs	r2, #0
 800574e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <SystemInit+0xf4>)
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005756:	4b1f      	ldr	r3, [pc, #124]	; (80057d4 <SystemInit+0xf4>)
 8005758:	2200      	movs	r2, #0
 800575a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <SystemInit+0xf4>)
 800575e:	4a1f      	ldr	r2, [pc, #124]	; (80057dc <SystemInit+0xfc>)
 8005760:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <SystemInit+0xf4>)
 8005764:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <SystemInit+0x100>)
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <SystemInit+0xf4>)
 800576a:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <SystemInit+0x104>)
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <SystemInit+0xf4>)
 8005770:	2200      	movs	r2, #0
 8005772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005774:	4b17      	ldr	r3, [pc, #92]	; (80057d4 <SystemInit+0xf4>)
 8005776:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <SystemInit+0x104>)
 8005778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800577a:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <SystemInit+0xf4>)
 800577c:	2200      	movs	r2, #0
 800577e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005780:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <SystemInit+0xf4>)
 8005782:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <SystemInit+0x104>)
 8005784:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <SystemInit+0xf4>)
 8005788:	2200      	movs	r2, #0
 800578a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <SystemInit+0xf4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <SystemInit+0xf4>)
 8005792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005796:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <SystemInit+0xf4>)
 800579a:	2200      	movs	r2, #0
 800579c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800579e:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <SystemInit+0x108>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <SystemInit+0x10c>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057aa:	d202      	bcs.n	80057b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80057ac:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <SystemInit+0x110>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <SystemInit+0x114>)
 80057b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80057b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <SystemInit+0xec>)
 80057bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057c0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	e000ed00 	.word	0xe000ed00
 80057d0:	52002000 	.word	0x52002000
 80057d4:	58024400 	.word	0x58024400
 80057d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80057dc:	02020200 	.word	0x02020200
 80057e0:	01ff0000 	.word	0x01ff0000
 80057e4:	01010280 	.word	0x01010280
 80057e8:	5c001000 	.word	0x5c001000
 80057ec:	ffff0000 	.word	0xffff0000
 80057f0:	51008108 	.word	0x51008108
 80057f4:	52004000 	.word	0x52004000

080057f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b09a      	sub	sp, #104	; 0x68
 80057fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800580c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	605a      	str	r2, [r3, #4]
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	611a      	str	r2, [r3, #16]
 8005828:	615a      	str	r2, [r3, #20]
 800582a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	222c      	movs	r2, #44	; 0x2c
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f00c ffe8 	bl	8012808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005838:	4b44      	ldr	r3, [pc, #272]	; (800594c <MX_TIM1_Init+0x154>)
 800583a:	4a45      	ldr	r2, [pc, #276]	; (8005950 <MX_TIM1_Init+0x158>)
 800583c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800583e:	4b43      	ldr	r3, [pc, #268]	; (800594c <MX_TIM1_Init+0x154>)
 8005840:	22c7      	movs	r2, #199	; 0xc7
 8005842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005844:	4b41      	ldr	r3, [pc, #260]	; (800594c <MX_TIM1_Init+0x154>)
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800584a:	4b40      	ldr	r3, [pc, #256]	; (800594c <MX_TIM1_Init+0x154>)
 800584c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005852:	4b3e      	ldr	r3, [pc, #248]	; (800594c <MX_TIM1_Init+0x154>)
 8005854:	2200      	movs	r2, #0
 8005856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005858:	4b3c      	ldr	r3, [pc, #240]	; (800594c <MX_TIM1_Init+0x154>)
 800585a:	2200      	movs	r2, #0
 800585c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800585e:	4b3b      	ldr	r3, [pc, #236]	; (800594c <MX_TIM1_Init+0x154>)
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005864:	4839      	ldr	r0, [pc, #228]	; (800594c <MX_TIM1_Init+0x154>)
 8005866:	f007 feac 	bl	800d5c2 <HAL_TIM_Base_Init>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005870:	f7ff faf8 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005878:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800587a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800587e:	4619      	mov	r1, r3
 8005880:	4832      	ldr	r0, [pc, #200]	; (800594c <MX_TIM1_Init+0x154>)
 8005882:	f008 fc73 	bl	800e16c <HAL_TIM_ConfigClockSource>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800588c:	f7ff faea 	bl	8004e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005890:	482e      	ldr	r0, [pc, #184]	; (800594c <MX_TIM1_Init+0x154>)
 8005892:	f007 ff94 	bl	800d7be <HAL_TIM_PWM_Init>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800589c:	f7ff fae2 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80058ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80058b0:	4619      	mov	r1, r3
 80058b2:	4826      	ldr	r0, [pc, #152]	; (800594c <MX_TIM1_Init+0x154>)
 80058b4:	f009 f9ae 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80058be:	f7ff fad1 	bl	8004e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058c2:	2360      	movs	r3, #96	; 0x60
 80058c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80058c6:	f240 1339 	movw	r3, #313	; 0x139
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80058d8:	2300      	movs	r3, #0
 80058da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80058dc:	2300      	movs	r3, #0
 80058de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058e4:	2204      	movs	r2, #4
 80058e6:	4619      	mov	r1, r3
 80058e8:	4818      	ldr	r0, [pc, #96]	; (800594c <MX_TIM1_Init+0x154>)
 80058ea:	f008 fb2b 	bl	800df44 <HAL_TIM_PWM_ConfigChannel>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80058f4:	f7ff fab6 	bl	8004e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800590c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005916:	2300      	movs	r3, #0
 8005918:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800591a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005924:	2300      	movs	r3, #0
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4807      	ldr	r0, [pc, #28]	; (800594c <MX_TIM1_Init+0x154>)
 800592e:	f009 f9ff 	bl	800ed30 <HAL_TIMEx_ConfigBreakDeadTime>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8005938:	f7ff fa94 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800593c:	4803      	ldr	r0, [pc, #12]	; (800594c <MX_TIM1_Init+0x154>)
 800593e:	f000 fdd5 	bl	80064ec <HAL_TIM_MspPostInit>

}
 8005942:	bf00      	nop
 8005944:	3768      	adds	r7, #104	; 0x68
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	24000d9c 	.word	0x24000d9c
 8005950:	40010000 	.word	0x40010000

08005954 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	; 0x38
 8005958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800595a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005968:	f107 031c 	add.w	r3, r7, #28
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005974:	463b      	mov	r3, r7
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	615a      	str	r2, [r3, #20]
 8005984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005986:	4b2e      	ldr	r3, [pc, #184]	; (8005a40 <MX_TIM2_Init+0xec>)
 8005988:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800598c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800598e:	4b2c      	ldr	r3, [pc, #176]	; (8005a40 <MX_TIM2_Init+0xec>)
 8005990:	22c7      	movs	r2, #199	; 0xc7
 8005992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005994:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <MX_TIM2_Init+0xec>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <MX_TIM2_Init+0xec>)
 800599c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80059a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059a2:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <MX_TIM2_Init+0xec>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <MX_TIM2_Init+0xec>)
 80059aa:	2280      	movs	r2, #128	; 0x80
 80059ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80059ae:	4824      	ldr	r0, [pc, #144]	; (8005a40 <MX_TIM2_Init+0xec>)
 80059b0:	f007 fe07 	bl	800d5c2 <HAL_TIM_Base_Init>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80059ba:	f7ff fa53 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80059be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80059c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c8:	4619      	mov	r1, r3
 80059ca:	481d      	ldr	r0, [pc, #116]	; (8005a40 <MX_TIM2_Init+0xec>)
 80059cc:	f008 fbce 	bl	800e16c <HAL_TIM_ConfigClockSource>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80059d6:	f7ff fa45 	bl	8004e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80059da:	4819      	ldr	r0, [pc, #100]	; (8005a40 <MX_TIM2_Init+0xec>)
 80059dc:	f007 feef 	bl	800d7be <HAL_TIM_PWM_Init>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80059e6:	f7ff fa3d 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059f2:	f107 031c 	add.w	r3, r7, #28
 80059f6:	4619      	mov	r1, r3
 80059f8:	4811      	ldr	r0, [pc, #68]	; (8005a40 <MX_TIM2_Init+0xec>)
 80059fa:	f009 f90b 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005a04:	f7ff fa2e 	bl	8004e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a08:	2360      	movs	r3, #96	; 0x60
 8005a0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005a0c:	f240 1339 	movw	r3, #313	; 0x139
 8005a10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4807      	ldr	r0, [pc, #28]	; (8005a40 <MX_TIM2_Init+0xec>)
 8005a22:	f008 fa8f 	bl	800df44 <HAL_TIM_PWM_ConfigChannel>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005a2c:	f7ff fa1a 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005a30:	4803      	ldr	r0, [pc, #12]	; (8005a40 <MX_TIM2_Init+0xec>)
 8005a32:	f000 fd5b 	bl	80064ec <HAL_TIM_MspPostInit>

}
 8005a36:	bf00      	nop
 8005a38:	3738      	adds	r7, #56	; 0x38
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	24000de8 	.word	0x24000de8

08005a44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08e      	sub	sp, #56	; 0x38
 8005a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	605a      	str	r2, [r3, #4]
 8005a54:	609a      	str	r2, [r3, #8]
 8005a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a58:	f107 031c 	add.w	r3, r7, #28
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a64:	463b      	mov	r3, r7
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	611a      	str	r2, [r3, #16]
 8005a72:	615a      	str	r2, [r3, #20]
 8005a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a76:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a78:	4a2d      	ldr	r2, [pc, #180]	; (8005b30 <MX_TIM3_Init+0xec>)
 8005a7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005a7c:	4b2b      	ldr	r3, [pc, #172]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a7e:	22c7      	movs	r2, #199	; 0xc7
 8005a80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a82:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8005a88:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a8a:	f640 125f 	movw	r2, #2399	; 0x95f
 8005a8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a90:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a9c:	4823      	ldr	r0, [pc, #140]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005a9e:	f007 fd90 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005aa8:	f7ff f9dc 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	481c      	ldr	r0, [pc, #112]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005aba:	f008 fb57 	bl	800e16c <HAL_TIM_ConfigClockSource>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005ac4:	f7ff f9ce 	bl	8004e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ac8:	4818      	ldr	r0, [pc, #96]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005aca:	f007 fe78 	bl	800d7be <HAL_TIM_PWM_Init>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005ad4:	f7ff f9c6 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ae0:	f107 031c 	add.w	r3, r7, #28
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4811      	ldr	r0, [pc, #68]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005ae8:	f009 f894 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005af2:	f7ff f9b7 	bl	8004e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005af6:	2360      	movs	r3, #96	; 0x60
 8005af8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b06:	463b      	mov	r3, r7
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4807      	ldr	r0, [pc, #28]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005b0e:	f008 fa19 	bl	800df44 <HAL_TIM_PWM_ConfigChannel>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005b18:	f7ff f9a4 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b1c:	4803      	ldr	r0, [pc, #12]	; (8005b2c <MX_TIM3_Init+0xe8>)
 8005b1e:	f000 fce5 	bl	80064ec <HAL_TIM_MspPostInit>

}
 8005b22:	bf00      	nop
 8005b24:	3738      	adds	r7, #56	; 0x38
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	24000e34 	.word	0x24000e34
 8005b30:	40000400 	.word	0x40000400

08005b34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b48:	f107 031c 	add.w	r3, r7, #28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b54:	463b      	mov	r3, r7
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	615a      	str	r2, [r3, #20]
 8005b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b66:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <MX_TIM4_Init+0xec>)
 8005b6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b6e:	22ef      	movs	r2, #239	; 0xef
 8005b70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b72:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8005b78:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b7a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005b7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b80:	4b26      	ldr	r3, [pc, #152]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b86:	4b25      	ldr	r3, [pc, #148]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b8c:	4823      	ldr	r0, [pc, #140]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005b8e:	f007 fd18 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005b98:	f7ff f964 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	481c      	ldr	r0, [pc, #112]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005baa:	f008 fadf 	bl	800e16c <HAL_TIM_ConfigClockSource>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005bb4:	f7ff f956 	bl	8004e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005bb8:	4818      	ldr	r0, [pc, #96]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005bba:	f007 fe00 	bl	800d7be <HAL_TIM_PWM_Init>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005bc4:	f7ff f94e 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4811      	ldr	r0, [pc, #68]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005bd8:	f009 f81c 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005be2:	f7ff f93f 	bl	8004e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005be6:	2360      	movs	r3, #96	; 0x60
 8005be8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4807      	ldr	r0, [pc, #28]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005bfe:	f008 f9a1 	bl	800df44 <HAL_TIM_PWM_ConfigChannel>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8005c08:	f7ff f92c 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005c0c:	4803      	ldr	r0, [pc, #12]	; (8005c1c <MX_TIM4_Init+0xe8>)
 8005c0e:	f000 fc6d 	bl	80064ec <HAL_TIM_MspPostInit>

}
 8005c12:	bf00      	nop
 8005c14:	3738      	adds	r7, #56	; 0x38
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	24000e80 	.word	0x24000e80
 8005c20:	40000800 	.word	0x40000800

08005c24 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	605a      	str	r2, [r3, #4]
 8005c34:	609a      	str	r2, [r3, #8]
 8005c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c38:	1d3b      	adds	r3, r7, #4
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c42:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c44:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <MX_TIM5_Init+0x98>)
 8005c46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c4a:	22c7      	movs	r2, #199	; 0xc7
 8005c4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005c54:	4b18      	ldr	r3, [pc, #96]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c56:	f642 62df 	movw	r2, #11999	; 0x2edf
 8005c5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c68:	4813      	ldr	r0, [pc, #76]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c6a:	f007 fcaa 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005c74:	f7ff f8f6 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c7e:	f107 0310 	add.w	r3, r7, #16
 8005c82:	4619      	mov	r1, r3
 8005c84:	480c      	ldr	r0, [pc, #48]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005c86:	f008 fa71 	bl	800e16c <HAL_TIM_ConfigClockSource>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005c90:	f7ff f8e8 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <MX_TIM5_Init+0x94>)
 8005ca2:	f008 ffb7 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005cac:	f7ff f8da 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005cb0:	bf00      	nop
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	24000ecc 	.word	0x24000ecc
 8005cbc:	40000c00 	.word	0x40000c00

08005cc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <MX_TIM6_Init+0x68>)
 8005cd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8005cd6:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005cd8:	22c7      	movs	r2, #199	; 0xc7
 8005cda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005ce4:	f241 726f 	movw	r2, #5999	; 0x176f
 8005ce8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005cec:	2280      	movs	r2, #128	; 0x80
 8005cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005cf0:	480c      	ldr	r0, [pc, #48]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005cf2:	f007 fc66 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005cfc:	f7ff f8b2 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d00:	2300      	movs	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005d08:	1d3b      	adds	r3, r7, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <MX_TIM6_Init+0x64>)
 8005d0e:	f008 ff81 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005d18:	f7ff f8a4 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	24000f18 	.word	0x24000f18
 8005d28:	40001000 	.word	0x40001000

08005d2c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <MX_TIM7_Init+0x68>)
 8005d40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005d42:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d44:	22c7      	movs	r2, #199	; 0xc7
 8005d46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d50:	f240 42af 	movw	r2, #1199	; 0x4af
 8005d54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d56:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d58:	2280      	movs	r2, #128	; 0x80
 8005d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005d5c:	480c      	ldr	r0, [pc, #48]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d5e:	f007 fc30 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005d68:	f7ff f87c 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4805      	ldr	r0, [pc, #20]	; (8005d90 <MX_TIM7_Init+0x64>)
 8005d7a:	f008 ff4b 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005d84:	f7ff f86e 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	24000f64 	.word	0x24000f64
 8005d94:	40001400 	.word	0x40001400

08005d98 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	; 0x30
 8005d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d9e:	f107 030c 	add.w	r3, r7, #12
 8005da2:	2224      	movs	r2, #36	; 0x24
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f00c fd2e 	bl	8012808 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dac:	463b      	mov	r3, r7
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <MX_TIM8_Init+0xb0>)
 8005dba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005dbc:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 8005dc8:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005dca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005dce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dd0:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ddc:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005de2:	2303      	movs	r3, #3
 8005de4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005dea:	2301      	movs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005df2:	230f      	movs	r3, #15
 8005df4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005df6:	2300      	movs	r3, #0
 8005df8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005e02:	230f      	movs	r3, #15
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	480d      	ldr	r0, [pc, #52]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005e0e:	f007 fe45 	bl	800da9c <HAL_TIM_Encoder_Init>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005e18:	f7ff f824 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005e20:	2300      	movs	r3, #0
 8005e22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005e28:	463b      	mov	r3, r7
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4805      	ldr	r0, [pc, #20]	; (8005e44 <MX_TIM8_Init+0xac>)
 8005e2e:	f008 fef1 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005e38:	f7ff f814 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005e3c:	bf00      	nop
 8005e3e:	3730      	adds	r7, #48	; 0x30
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	24000fb0 	.word	0x24000fb0
 8005e48:	40010400 	.word	0x40010400

08005e4c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e52:	463b      	mov	r3, r7
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005e5e:	4b16      	ldr	r3, [pc, #88]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <MX_TIM12_Init+0x70>)
 8005e62:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005e64:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e66:	22c7      	movs	r2, #199	; 0xc7
 8005e68:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e6a:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e72:	f240 2257 	movw	r2, #599	; 0x257
 8005e76:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e78:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005e84:	480c      	ldr	r0, [pc, #48]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005e86:	f007 fb9c 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005e90:	f7fe ffe8 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e98:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4806      	ldr	r0, [pc, #24]	; (8005eb8 <MX_TIM12_Init+0x6c>)
 8005ea0:	f008 f964 	bl	800e16c <HAL_TIM_ConfigClockSource>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005eaa:	f7fe ffdb 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	24000ffc 	.word	0x24000ffc
 8005ebc:	40001800 	.word	0x40001800

08005ec0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <MX_TIM13_Init+0x44>)
 8005ec8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005eca:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005ecc:	22c7      	movs	r2, #199	; 0xc7
 8005ece:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005ed8:	f240 2257 	movw	r2, #599	; 0x257
 8005edc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ede:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005eea:	4805      	ldr	r0, [pc, #20]	; (8005f00 <MX_TIM13_Init+0x40>)
 8005eec:	f007 fb69 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005ef6:	f7fe ffb5 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	24001048 	.word	0x24001048
 8005f04:	40001c00 	.word	0x40001c00

08005f08 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f0e:	4a0f      	ldr	r2, [pc, #60]	; (8005f4c <MX_TIM14_Init+0x44>)
 8005f10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005f12:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f14:	22c7      	movs	r2, #199	; 0xc7
 8005f16:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f20:	f640 125f 	movw	r2, #2399	; 0x95f
 8005f24:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f26:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005f32:	4805      	ldr	r0, [pc, #20]	; (8005f48 <MX_TIM14_Init+0x40>)
 8005f34:	f007 fb45 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005f3e:	f7fe ff91 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	24001094 	.word	0x24001094
 8005f4c:	40002000 	.word	0x40002000

08005f50 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b09a      	sub	sp, #104	; 0x68
 8005f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	609a      	str	r2, [r3, #8]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	611a      	str	r2, [r3, #16]
 8005f80:	615a      	str	r2, [r3, #20]
 8005f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	222c      	movs	r2, #44	; 0x2c
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f00c fc3c 	bl	8012808 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005f90:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <MX_TIM15_Init+0x140>)
 8005f92:	4a40      	ldr	r2, [pc, #256]	; (8006094 <MX_TIM15_Init+0x144>)
 8005f94:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005f96:	4b3e      	ldr	r3, [pc, #248]	; (8006090 <MX_TIM15_Init+0x140>)
 8005f98:	22ef      	movs	r2, #239	; 0xef
 8005f9a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	; (8006090 <MX_TIM15_Init+0x140>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fa4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005fa8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005faa:	4b39      	ldr	r3, [pc, #228]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005fb0:	4b37      	ldr	r3, [pc, #220]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fb6:	4b36      	ldr	r3, [pc, #216]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005fbc:	4834      	ldr	r0, [pc, #208]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fbe:	f007 fb00 	bl	800d5c2 <HAL_TIM_Base_Init>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005fc8:	f7fe ff4c 	bl	8004e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005fd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	482d      	ldr	r0, [pc, #180]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fda:	f008 f8c7 	bl	800e16c <HAL_TIM_ConfigClockSource>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005fe4:	f7fe ff3e 	bl	8004e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005fe8:	4829      	ldr	r0, [pc, #164]	; (8006090 <MX_TIM15_Init+0x140>)
 8005fea:	f007 fbe8 	bl	800d7be <HAL_TIM_PWM_Init>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005ff4:	f7fe ff36 	bl	8004e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006000:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006004:	4619      	mov	r1, r3
 8006006:	4822      	ldr	r0, [pc, #136]	; (8006090 <MX_TIM15_Init+0x140>)
 8006008:	f008 fe04 	bl	800ec14 <HAL_TIMEx_MasterConfigSynchronization>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8006012:	f7fe ff27 	bl	8004e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006016:	2360      	movs	r3, #96	; 0x60
 8006018:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800601a:	f240 1339 	movw	r3, #313	; 0x139
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006020:	2300      	movs	r3, #0
 8006022:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006024:	2300      	movs	r3, #0
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006028:	2300      	movs	r3, #0
 800602a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800602c:	2300      	movs	r3, #0
 800602e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006030:	2300      	movs	r3, #0
 8006032:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006038:	2204      	movs	r2, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4814      	ldr	r0, [pc, #80]	; (8006090 <MX_TIM15_Init+0x140>)
 800603e:	f007 ff81 	bl	800df44 <HAL_TIM_PWM_ConfigChannel>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8006048:	f7fe ff0c 	bl	8004e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800604c:	2300      	movs	r3, #0
 800604e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006064:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800606a:	2300      	movs	r3, #0
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4807      	ldr	r0, [pc, #28]	; (8006090 <MX_TIM15_Init+0x140>)
 8006074:	f008 fe5c 	bl	800ed30 <HAL_TIMEx_ConfigBreakDeadTime>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800607e:	f7fe fef1 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8006082:	4803      	ldr	r0, [pc, #12]	; (8006090 <MX_TIM15_Init+0x140>)
 8006084:	f000 fa32 	bl	80064ec <HAL_TIM_MspPostInit>

}
 8006088:	bf00      	nop
 800608a:	3768      	adds	r7, #104	; 0x68
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	240010e0 	.word	0x240010e0
 8006094:	40014000 	.word	0x40014000

08006098 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <MX_TIM16_Init+0x44>)
 800609e:	4a10      	ldr	r2, [pc, #64]	; (80060e0 <MX_TIM16_Init+0x48>)
 80060a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <MX_TIM16_Init+0x44>)
 80060a4:	22ef      	movs	r2, #239	; 0xef
 80060a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <MX_TIM16_Init+0x44>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <MX_TIM16_Init+0x44>)
 80060b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060b4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <MX_TIM16_Init+0x44>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <MX_TIM16_Init+0x44>)
 80060be:	2200      	movs	r2, #0
 80060c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <MX_TIM16_Init+0x44>)
 80060c4:	2280      	movs	r2, #128	; 0x80
 80060c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80060c8:	4804      	ldr	r0, [pc, #16]	; (80060dc <MX_TIM16_Init+0x44>)
 80060ca:	f007 fa7a 	bl	800d5c2 <HAL_TIM_Base_Init>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80060d4:	f7fe fec6 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	2400112c 	.word	0x2400112c
 80060e0:	40014400 	.word	0x40014400

080060e4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80060e8:	4b10      	ldr	r3, [pc, #64]	; (800612c <MX_TIM17_Init+0x48>)
 80060ea:	4a11      	ldr	r2, [pc, #68]	; (8006130 <MX_TIM17_Init+0x4c>)
 80060ec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2400-1;
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <MX_TIM17_Init+0x48>)
 80060f0:	f640 125f 	movw	r2, #2399	; 0x95f
 80060f4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <MX_TIM17_Init+0x48>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 80060fc:	4b0b      	ldr	r3, [pc, #44]	; (800612c <MX_TIM17_Init+0x48>)
 80060fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8006102:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <MX_TIM17_Init+0x48>)
 8006106:	2200      	movs	r2, #0
 8006108:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <MX_TIM17_Init+0x48>)
 800610c:	2200      	movs	r2, #0
 800610e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <MX_TIM17_Init+0x48>)
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006116:	4805      	ldr	r0, [pc, #20]	; (800612c <MX_TIM17_Init+0x48>)
 8006118:	f007 fa53 	bl	800d5c2 <HAL_TIM_Base_Init>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8006122:	f7fe fe9f 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006126:	bf00      	nop
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	24001178 	.word	0x24001178
 8006130:	40014800 	.word	0x40014800

08006134 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b090      	sub	sp, #64	; 0x40
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4aa8      	ldr	r2, [pc, #672]	; (80063e4 <HAL_TIM_Base_MspInit+0x2b0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d10f      	bne.n	8006166 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006146:	4ba8      	ldr	r3, [pc, #672]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800614c:	4aa6      	ldr	r2, [pc, #664]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006156:	4ba4      	ldr	r3, [pc, #656]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006164:	e13a      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d10f      	bne.n	8006190 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006170:	4b9d      	ldr	r3, [pc, #628]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006176:	4a9c      	ldr	r2, [pc, #624]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006180:	4b99      	ldr	r3, [pc, #612]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	63bb      	str	r3, [r7, #56]	; 0x38
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800618e:	e125      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a95      	ldr	r2, [pc, #596]	; (80063ec <HAL_TIM_Base_MspInit+0x2b8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d10f      	bne.n	80061ba <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800619a:	4b93      	ldr	r3, [pc, #588]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800619c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061a0:	4a91      	ldr	r2, [pc, #580]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061a2:	f043 0302 	orr.w	r3, r3, #2
 80061a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061aa:	4b8f      	ldr	r3, [pc, #572]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061b8:	e110      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a8c      	ldr	r2, [pc, #560]	; (80063f0 <HAL_TIM_Base_MspInit+0x2bc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d10f      	bne.n	80061e4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061c4:	4b88      	ldr	r3, [pc, #544]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ca:	4a87      	ldr	r2, [pc, #540]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061cc:	f043 0304 	orr.w	r3, r3, #4
 80061d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061d4:	4b84      	ldr	r3, [pc, #528]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	633b      	str	r3, [r7, #48]	; 0x30
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80061e2:	e0fb      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a82      	ldr	r2, [pc, #520]	; (80063f4 <HAL_TIM_Base_MspInit+0x2c0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d117      	bne.n	800621e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80061ee:	4b7e      	ldr	r3, [pc, #504]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061f4:	4a7c      	ldr	r2, [pc, #496]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80061f6:	f043 0308 	orr.w	r3, r3, #8
 80061fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061fe:	4b7a      	ldr	r3, [pc, #488]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	2032      	movs	r0, #50	; 0x32
 8006212:	f001 f838 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006216:	2032      	movs	r0, #50	; 0x32
 8006218:	f001 f84f 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 800621c:	e0de      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a75      	ldr	r2, [pc, #468]	; (80063f8 <HAL_TIM_Base_MspInit+0x2c4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d117      	bne.n	8006258 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006228:	4b6f      	ldr	r3, [pc, #444]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800622a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800622e:	4a6e      	ldr	r2, [pc, #440]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006230:	f043 0310 	orr.w	r3, r3, #16
 8006234:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006238:	4b6b      	ldr	r3, [pc, #428]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800623a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	2036      	movs	r0, #54	; 0x36
 800624c:	f001 f81b 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006250:	2036      	movs	r0, #54	; 0x36
 8006252:	f001 f832 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 8006256:	e0c1      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a67      	ldr	r2, [pc, #412]	; (80063fc <HAL_TIM_Base_MspInit+0x2c8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d117      	bne.n	8006292 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006262:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006268:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006272:	4b5d      	ldr	r3, [pc, #372]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	2037      	movs	r0, #55	; 0x37
 8006286:	f000 fffe 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800628a:	2037      	movs	r0, #55	; 0x37
 800628c:	f001 f815 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 8006290:	e0a4      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a5a      	ldr	r2, [pc, #360]	; (8006400 <HAL_TIM_Base_MspInit+0x2cc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d117      	bne.n	80062cc <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800629c:	4b52      	ldr	r3, [pc, #328]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800629e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062a2:	4a51      	ldr	r2, [pc, #324]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80062a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062ac:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80062ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80062ba:	2200      	movs	r2, #0
 80062bc:	2100      	movs	r1, #0
 80062be:	202b      	movs	r0, #43	; 0x2b
 80062c0:	f000 ffe1 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80062c4:	202b      	movs	r0, #43	; 0x2b
 80062c6:	f000 fff8 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 80062ca:	e087      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a4c      	ldr	r2, [pc, #304]	; (8006404 <HAL_TIM_Base_MspInit+0x2d0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d117      	bne.n	8006306 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80062d6:	4b44      	ldr	r3, [pc, #272]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80062d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062dc:	4a42      	ldr	r2, [pc, #264]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80062de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062e6:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80062e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80062f4:	2200      	movs	r2, #0
 80062f6:	2100      	movs	r1, #0
 80062f8:	202c      	movs	r0, #44	; 0x2c
 80062fa:	f000 ffc4 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80062fe:	202c      	movs	r0, #44	; 0x2c
 8006300:	f000 ffdb 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 8006304:	e06a      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3f      	ldr	r2, [pc, #252]	; (8006408 <HAL_TIM_Base_MspInit+0x2d4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d117      	bne.n	8006340 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006310:	4b35      	ldr	r3, [pc, #212]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006316:	4a34      	ldr	r2, [pc, #208]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800631c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006320:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	61bb      	str	r3, [r7, #24]
 800632c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800632e:	2200      	movs	r2, #0
 8006330:	2100      	movs	r1, #0
 8006332:	202d      	movs	r0, #45	; 0x2d
 8006334:	f000 ffa7 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006338:	202d      	movs	r0, #45	; 0x2d
 800633a:	f000 ffbe 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 800633e:	e04d      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a31      	ldr	r2, [pc, #196]	; (800640c <HAL_TIM_Base_MspInit+0x2d8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10f      	bne.n	800636a <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800634a:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800634c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006350:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006356:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800635a:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800635c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	697b      	ldr	r3, [r7, #20]
}
 8006368:	e038      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a28      	ldr	r2, [pc, #160]	; (8006410 <HAL_TIM_Base_MspInit+0x2dc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d117      	bne.n	80063a4 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006374:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800637a:	4a1b      	ldr	r2, [pc, #108]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 800637c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006380:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006384:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 8006386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006392:	2200      	movs	r2, #0
 8006394:	2100      	movs	r1, #0
 8006396:	2075      	movs	r0, #117	; 0x75
 8006398:	f000 ff75 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800639c:	2075      	movs	r0, #117	; 0x75
 800639e:	f000 ff8c 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 80063a2:	e01b      	b.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1a      	ldr	r2, [pc, #104]	; (8006414 <HAL_TIM_Base_MspInit+0x2e0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d116      	bne.n	80063dc <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80063ae:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80063b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b4:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80063b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063be:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <HAL_TIM_Base_MspInit+0x2b4>)
 80063c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80063cc:	2200      	movs	r2, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	2076      	movs	r0, #118	; 0x76
 80063d2:	f000 ff58 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80063d6:	2076      	movs	r0, #118	; 0x76
 80063d8:	f000 ff6f 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 80063dc:	bf00      	nop
 80063de:	3740      	adds	r7, #64	; 0x40
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40010000 	.word	0x40010000
 80063e8:	58024400 	.word	0x58024400
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40001000 	.word	0x40001000
 80063fc:	40001400 	.word	0x40001400
 8006400:	40001800 	.word	0x40001800
 8006404:	40001c00 	.word	0x40001c00
 8006408:	40002000 	.word	0x40002000
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800

08006418 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006420:	f107 0314 	add.w	r3, r7, #20
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	605a      	str	r2, [r3, #4]
 800642a:	609a      	str	r2, [r3, #8]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d14d      	bne.n	80064d6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800643c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006442:	f043 0302 	orr.w	r3, r3, #2
 8006446:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800644a:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800644c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006458:	4b22      	ldr	r3, [pc, #136]	; (80064e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800645a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006460:	f043 0304 	orr.w	r3, r3, #4
 8006464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006468:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 800646a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006476:	23c0      	movs	r3, #192	; 0xc0
 8006478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647a:	2302      	movs	r3, #2
 800647c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006482:	2300      	movs	r3, #0
 8006484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006486:	2303      	movs	r3, #3
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800648a:	f107 0314 	add.w	r3, r7, #20
 800648e:	4619      	mov	r1, r3
 8006490:	4815      	ldr	r0, [pc, #84]	; (80064e8 <HAL_TIM_Encoder_MspInit+0xd0>)
 8006492:	f003 ff73 	bl	800a37c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8006496:	2200      	movs	r2, #0
 8006498:	2100      	movs	r1, #0
 800649a:	202b      	movs	r0, #43	; 0x2b
 800649c:	f000 fef3 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80064a0:	202b      	movs	r0, #43	; 0x2b
 80064a2:	f000 ff0a 	bl	80072ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80064a6:	2200      	movs	r2, #0
 80064a8:	2100      	movs	r1, #0
 80064aa:	202c      	movs	r0, #44	; 0x2c
 80064ac:	f000 feeb 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80064b0:	202c      	movs	r0, #44	; 0x2c
 80064b2:	f000 ff02 	bl	80072ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80064b6:	2200      	movs	r2, #0
 80064b8:	2100      	movs	r1, #0
 80064ba:	202d      	movs	r0, #45	; 0x2d
 80064bc:	f000 fee3 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80064c0:	202d      	movs	r0, #45	; 0x2d
 80064c2:	f000 fefa 	bl	80072ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80064c6:	2200      	movs	r2, #0
 80064c8:	2100      	movs	r1, #0
 80064ca:	202e      	movs	r0, #46	; 0x2e
 80064cc:	f000 fedb 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80064d0:	202e      	movs	r0, #46	; 0x2e
 80064d2:	f000 fef2 	bl	80072ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80064d6:	bf00      	nop
 80064d8:	3728      	adds	r7, #40	; 0x28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40010400 	.word	0x40010400
 80064e4:	58024400 	.word	0x58024400
 80064e8:	58020800 	.word	0x58020800

080064ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	; 0x30
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f4:	f107 031c 	add.w	r3, r7, #28
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5e      	ldr	r2, [pc, #376]	; (8006684 <HAL_TIM_MspPostInit+0x198>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d120      	bne.n	8006550 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800650e:	4b5e      	ldr	r3, [pc, #376]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 8006510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006514:	4a5c      	ldr	r2, [pc, #368]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 8006516:	f043 0310 	orr.w	r3, r3, #16
 800651a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800651e:	4b5a      	ldr	r3, [pc, #360]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 8006520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800652c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006532:	2302      	movs	r3, #2
 8006534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006536:	2300      	movs	r3, #0
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800653a:	2300      	movs	r3, #0
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800653e:	2301      	movs	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8006542:	f107 031c 	add.w	r3, r7, #28
 8006546:	4619      	mov	r1, r3
 8006548:	4850      	ldr	r0, [pc, #320]	; (800668c <HAL_TIM_MspPostInit+0x1a0>)
 800654a:	f003 ff17 	bl	800a37c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800654e:	e094      	b.n	800667a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d120      	bne.n	800659c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800655a:	4b4b      	ldr	r3, [pc, #300]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 800655c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006560:	4a49      	ldr	r2, [pc, #292]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 800656c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8006578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800657c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657e:	2302      	movs	r3, #2
 8006580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006582:	2300      	movs	r3, #0
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006586:	2300      	movs	r3, #0
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800658a:	2301      	movs	r3, #1
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800658e:	f107 031c 	add.w	r3, r7, #28
 8006592:	4619      	mov	r1, r3
 8006594:	483e      	ldr	r0, [pc, #248]	; (8006690 <HAL_TIM_MspPostInit+0x1a4>)
 8006596:	f003 fef1 	bl	800a37c <HAL_GPIO_Init>
}
 800659a:	e06e      	b.n	800667a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a3c      	ldr	r2, [pc, #240]	; (8006694 <HAL_TIM_MspPostInit+0x1a8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d11f      	bne.n	80065e6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065a6:	4b38      	ldr	r3, [pc, #224]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 80065a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ac:	4a36      	ldr	r2, [pc, #216]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065b6:	4b34      	ldr	r3, [pc, #208]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 80065b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c8:	2302      	movs	r3, #2
 80065ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065d4:	2302      	movs	r3, #2
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80065d8:	f107 031c 	add.w	r3, r7, #28
 80065dc:	4619      	mov	r1, r3
 80065de:	482e      	ldr	r0, [pc, #184]	; (8006698 <HAL_TIM_MspPostInit+0x1ac>)
 80065e0:	f003 fecc 	bl	800a37c <HAL_GPIO_Init>
}
 80065e4:	e049      	b.n	800667a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2c      	ldr	r2, [pc, #176]	; (800669c <HAL_TIM_MspPostInit+0x1b0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d120      	bne.n	8006632 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 80065f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065f6:	4a24      	ldr	r2, [pc, #144]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006600:	4b21      	ldr	r3, [pc, #132]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 8006602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800660e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006614:	2302      	movs	r3, #2
 8006616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006618:	2300      	movs	r3, #0
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800661c:	2300      	movs	r3, #0
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006620:	2302      	movs	r3, #2
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8006624:	f107 031c 	add.w	r3, r7, #28
 8006628:	4619      	mov	r1, r3
 800662a:	4819      	ldr	r0, [pc, #100]	; (8006690 <HAL_TIM_MspPostInit+0x1a4>)
 800662c:	f003 fea6 	bl	800a37c <HAL_GPIO_Init>
}
 8006630:	e023      	b.n	800667a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1a      	ldr	r2, [pc, #104]	; (80066a0 <HAL_TIM_MspPostInit+0x1b4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d11e      	bne.n	800667a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800663c:	4b12      	ldr	r3, [pc, #72]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 800663e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006642:	4a11      	ldr	r2, [pc, #68]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 8006644:	f043 0310 	orr.w	r3, r3, #16
 8006648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <HAL_TIM_MspPostInit+0x19c>)
 800664e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	60bb      	str	r3, [r7, #8]
 8006658:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665e:	2302      	movs	r3, #2
 8006660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006666:	2300      	movs	r3, #0
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800666a:	2304      	movs	r3, #4
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800666e:	f107 031c 	add.w	r3, r7, #28
 8006672:	4619      	mov	r1, r3
 8006674:	4805      	ldr	r0, [pc, #20]	; (800668c <HAL_TIM_MspPostInit+0x1a0>)
 8006676:	f003 fe81 	bl	800a37c <HAL_GPIO_Init>
}
 800667a:	bf00      	nop
 800667c:	3730      	adds	r7, #48	; 0x30
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	58024400 	.word	0x58024400
 800668c:	58021000 	.word	0x58021000
 8006690:	58020400 	.word	0x58020400
 8006694:	40000400 	.word	0x40000400
 8006698:	58020000 	.word	0x58020000
 800669c:	40000800 	.word	0x40000800
 80066a0:	40014000 	.word	0x40014000

080066a4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80066a8:	4b25      	ldr	r3, [pc, #148]	; (8006740 <MX_UART4_Init+0x9c>)
 80066aa:	4a26      	ldr	r2, [pc, #152]	; (8006744 <MX_UART4_Init+0xa0>)
 80066ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <MX_UART4_Init+0x9c>)
 80066b0:	4a25      	ldr	r2, [pc, #148]	; (8006748 <MX_UART4_Init+0xa4>)
 80066b2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80066b4:	4b22      	ldr	r3, [pc, #136]	; (8006740 <MX_UART4_Init+0x9c>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <MX_UART4_Init+0x9c>)
 80066bc:	2200      	movs	r2, #0
 80066be:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80066c0:	4b1f      	ldr	r3, [pc, #124]	; (8006740 <MX_UART4_Init+0x9c>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80066c6:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <MX_UART4_Init+0x9c>)
 80066c8:	220c      	movs	r2, #12
 80066ca:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066cc:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <MX_UART4_Init+0x9c>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80066d2:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <MX_UART4_Init+0x9c>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066d8:	4b19      	ldr	r3, [pc, #100]	; (8006740 <MX_UART4_Init+0x9c>)
 80066da:	2200      	movs	r2, #0
 80066dc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <MX_UART4_Init+0x9c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80066e4:	4b16      	ldr	r3, [pc, #88]	; (8006740 <MX_UART4_Init+0x9c>)
 80066e6:	2208      	movs	r2, #8
 80066e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <MX_UART4_Init+0x9c>)
 80066ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80066f2:	4813      	ldr	r0, [pc, #76]	; (8006740 <MX_UART4_Init+0x9c>)
 80066f4:	f008 fbb8 	bl	800ee68 <HAL_UART_Init>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80066fe:	f7fe fbb1 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006702:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8006706:	480e      	ldr	r0, [pc, #56]	; (8006740 <MX_UART4_Init+0x9c>)
 8006708:	f00a fc51 	bl	8010fae <HAL_UARTEx_SetTxFifoThreshold>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8006712:	f7fe fba7 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006716:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800671a:	4809      	ldr	r0, [pc, #36]	; (8006740 <MX_UART4_Init+0x9c>)
 800671c:	f00a fc85 	bl	801102a <HAL_UARTEx_SetRxFifoThreshold>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8006726:	f7fe fb9d 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800672a:	4805      	ldr	r0, [pc, #20]	; (8006740 <MX_UART4_Init+0x9c>)
 800672c:	f00a fbcb 	bl	8010ec6 <HAL_UARTEx_EnableFifoMode>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8006736:	f7fe fb95 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	240011c4 	.word	0x240011c4
 8006744:	40004c00 	.word	0x40004c00
 8006748:	001e8480 	.word	0x001e8480

0800674c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006750:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <MX_UART7_Init+0x94>)
 8006752:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <MX_UART7_Init+0x98>)
 8006754:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006756:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <MX_UART7_Init+0x94>)
 8006758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800675c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800675e:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <MX_UART7_Init+0x94>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006764:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <MX_UART7_Init+0x94>)
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800676a:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <MX_UART7_Init+0x94>)
 800676c:	2200      	movs	r2, #0
 800676e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <MX_UART7_Init+0x94>)
 8006772:	220c      	movs	r2, #12
 8006774:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <MX_UART7_Init+0x94>)
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800677c:	4b18      	ldr	r3, [pc, #96]	; (80067e0 <MX_UART7_Init+0x94>)
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <MX_UART7_Init+0x94>)
 8006784:	2200      	movs	r2, #0
 8006786:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <MX_UART7_Init+0x94>)
 800678a:	2200      	movs	r2, #0
 800678c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800678e:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <MX_UART7_Init+0x94>)
 8006790:	2200      	movs	r2, #0
 8006792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006794:	4812      	ldr	r0, [pc, #72]	; (80067e0 <MX_UART7_Init+0x94>)
 8006796:	f008 fb67 	bl	800ee68 <HAL_UART_Init>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80067a0:	f7fe fb60 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067a4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80067a8:	480d      	ldr	r0, [pc, #52]	; (80067e0 <MX_UART7_Init+0x94>)
 80067aa:	f00a fc00 	bl	8010fae <HAL_UARTEx_SetTxFifoThreshold>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80067b4:	f7fe fb56 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80067b8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80067bc:	4808      	ldr	r0, [pc, #32]	; (80067e0 <MX_UART7_Init+0x94>)
 80067be:	f00a fc34 	bl	801102a <HAL_UARTEx_SetRxFifoThreshold>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80067c8:	f7fe fb4c 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80067cc:	4804      	ldr	r0, [pc, #16]	; (80067e0 <MX_UART7_Init+0x94>)
 80067ce:	f00a fb7a 	bl	8010ec6 <HAL_UARTEx_EnableFifoMode>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80067d8:	f7fe fb44 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80067dc:	bf00      	nop
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	24001254 	.word	0x24001254
 80067e4:	40007800 	.word	0x40007800

080067e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80067ec:	4b22      	ldr	r3, [pc, #136]	; (8006878 <MX_USART2_UART_Init+0x90>)
 80067ee:	4a23      	ldr	r2, [pc, #140]	; (800687c <MX_USART2_UART_Init+0x94>)
 80067f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <MX_USART2_UART_Init+0x90>)
 80067f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067fa:	4b1f      	ldr	r3, [pc, #124]	; (8006878 <MX_USART2_UART_Init+0x90>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006800:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006802:	2200      	movs	r2, #0
 8006804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006806:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006808:	2200      	movs	r2, #0
 800680a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800680c:	4b1a      	ldr	r3, [pc, #104]	; (8006878 <MX_USART2_UART_Init+0x90>)
 800680e:	220c      	movs	r2, #12
 8006810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006812:	4b19      	ldr	r3, [pc, #100]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006814:	2200      	movs	r2, #0
 8006816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006818:	4b17      	ldr	r3, [pc, #92]	; (8006878 <MX_USART2_UART_Init+0x90>)
 800681a:	2200      	movs	r2, #0
 800681c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800681e:	4b16      	ldr	r3, [pc, #88]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006820:	2200      	movs	r2, #0
 8006822:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006824:	4b14      	ldr	r3, [pc, #80]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006826:	2200      	movs	r2, #0
 8006828:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <MX_USART2_UART_Init+0x90>)
 800682c:	2200      	movs	r2, #0
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006830:	4811      	ldr	r0, [pc, #68]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006832:	f008 fb19 	bl	800ee68 <HAL_UART_Init>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800683c:	f7fe fb12 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006840:	2100      	movs	r1, #0
 8006842:	480d      	ldr	r0, [pc, #52]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006844:	f00a fbb3 	bl	8010fae <HAL_UARTEx_SetTxFifoThreshold>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800684e:	f7fe fb09 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006852:	2100      	movs	r1, #0
 8006854:	4808      	ldr	r0, [pc, #32]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006856:	f00a fbe8 	bl	801102a <HAL_UARTEx_SetRxFifoThreshold>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006860:	f7fe fb00 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006864:	4804      	ldr	r0, [pc, #16]	; (8006878 <MX_USART2_UART_Init+0x90>)
 8006866:	f00a fb69 	bl	8010f3c <HAL_UARTEx_DisableFifoMode>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006870:	f7fe faf8 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}
 8006878:	240012e4 	.word	0x240012e4
 800687c:	40004400 	.word	0x40004400

08006880 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006884:	4b22      	ldr	r3, [pc, #136]	; (8006910 <MX_USART3_UART_Init+0x90>)
 8006886:	4a23      	ldr	r2, [pc, #140]	; (8006914 <MX_USART3_UART_Init+0x94>)
 8006888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800688a:	4b21      	ldr	r3, [pc, #132]	; (8006910 <MX_USART3_UART_Init+0x90>)
 800688c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006892:	4b1f      	ldr	r3, [pc, #124]	; (8006910 <MX_USART3_UART_Init+0x90>)
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <MX_USART3_UART_Init+0x90>)
 800689a:	2200      	movs	r2, #0
 800689c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068a6:	220c      	movs	r2, #12
 80068a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068aa:	4b19      	ldr	r3, [pc, #100]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80068b0:	4b17      	ldr	r3, [pc, #92]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068b6:	4b16      	ldr	r3, [pc, #88]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068bc:	4b14      	ldr	r3, [pc, #80]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068be:	2200      	movs	r2, #0
 80068c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068c2:	4b13      	ldr	r3, [pc, #76]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80068c8:	4811      	ldr	r0, [pc, #68]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068ca:	f008 facd 	bl	800ee68 <HAL_UART_Init>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80068d4:	f7fe fac6 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068d8:	2100      	movs	r1, #0
 80068da:	480d      	ldr	r0, [pc, #52]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068dc:	f00a fb67 	bl	8010fae <HAL_UARTEx_SetTxFifoThreshold>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80068e6:	f7fe fabd 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068ea:	2100      	movs	r1, #0
 80068ec:	4808      	ldr	r0, [pc, #32]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068ee:	f00a fb9c 	bl	801102a <HAL_UARTEx_SetRxFifoThreshold>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80068f8:	f7fe fab4 	bl	8004e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80068fc:	4804      	ldr	r0, [pc, #16]	; (8006910 <MX_USART3_UART_Init+0x90>)
 80068fe:	f00a fb1d 	bl	8010f3c <HAL_UARTEx_DisableFifoMode>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006908:	f7fe faac 	bl	8004e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800690c:	bf00      	nop
 800690e:	bd80      	pop	{r7, pc}
 8006910:	24001374 	.word	0x24001374
 8006914:	40004800 	.word	0x40004800

08006918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b0be      	sub	sp, #248	; 0xf8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006920:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006934:	22bc      	movs	r2, #188	; 0xbc
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f00b ff65 	bl	8012808 <memset>
  if(uartHandle->Instance==UART4)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4aa1      	ldr	r2, [pc, #644]	; (8006bc8 <HAL_UART_MspInit+0x2b0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	f040 80b7 	bne.w	8006ab8 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800694a:	2302      	movs	r3, #2
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006958:	4618      	mov	r0, r3
 800695a:	f004 fee7 	bl	800b72c <HAL_RCCEx_PeriphCLKConfig>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006964:	f7fe fa7e 	bl	8004e64 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006968:	4b98      	ldr	r3, [pc, #608]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 800696a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800696e:	4a97      	ldr	r2, [pc, #604]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006974:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006978:	4b94      	ldr	r3, [pc, #592]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 800697a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800697e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006986:	4b91      	ldr	r3, [pc, #580]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698c:	4a8f      	ldr	r2, [pc, #572]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 800698e:	f043 0308 	orr.w	r3, r3, #8
 8006992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006996:	4b8d      	ldr	r3, [pc, #564]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	623b      	str	r3, [r7, #32]
 80069a2:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80069a4:	2303      	movs	r3, #3
 80069a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069aa:	2302      	movs	r3, #2
 80069ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80069bc:	2308      	movs	r3, #8
 80069be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069c6:	4619      	mov	r1, r3
 80069c8:	4881      	ldr	r0, [pc, #516]	; (8006bd0 <HAL_UART_MspInit+0x2b8>)
 80069ca:	f003 fcd7 	bl	800a37c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80069ce:	4b81      	ldr	r3, [pc, #516]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069d0:	4a81      	ldr	r2, [pc, #516]	; (8006bd8 <HAL_UART_MspInit+0x2c0>)
 80069d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80069d4:	4b7f      	ldr	r3, [pc, #508]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069d6:	223f      	movs	r2, #63	; 0x3f
 80069d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069da:	4b7e      	ldr	r3, [pc, #504]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069dc:	2200      	movs	r2, #0
 80069de:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069e0:	4b7c      	ldr	r3, [pc, #496]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069e6:	4b7b      	ldr	r3, [pc, #492]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069ec:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069ee:	4b79      	ldr	r3, [pc, #484]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069f4:	4b77      	ldr	r3, [pc, #476]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80069fa:	4b76      	ldr	r3, [pc, #472]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a00:	4b74      	ldr	r3, [pc, #464]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a06:	4b73      	ldr	r3, [pc, #460]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a08:	2204      	movs	r2, #4
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a0c:	4b71      	ldr	r3, [pc, #452]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a0e:	2203      	movs	r2, #3
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a12:	4b70      	ldr	r3, [pc, #448]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a18:	4b6e      	ldr	r3, [pc, #440]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006a1e:	486d      	ldr	r0, [pc, #436]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a20:	f000 fe70 	bl	8007704 <HAL_DMA_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8006a2a:	f7fe fa1b 	bl	8004e64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a68      	ldr	r2, [pc, #416]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a32:	67da      	str	r2, [r3, #124]	; 0x7c
 8006a34:	4a67      	ldr	r2, [pc, #412]	; (8006bd4 <HAL_UART_MspInit+0x2bc>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006a3a:	4b68      	ldr	r3, [pc, #416]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a3c:	4a68      	ldr	r2, [pc, #416]	; (8006be0 <HAL_UART_MspInit+0x2c8>)
 8006a3e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006a40:	4b66      	ldr	r3, [pc, #408]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a46:	4b65      	ldr	r3, [pc, #404]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a48:	2240      	movs	r2, #64	; 0x40
 8006a4a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a4c:	4b63      	ldr	r3, [pc, #396]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a52:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a58:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a5a:	4b60      	ldr	r3, [pc, #384]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a60:	4b5e      	ldr	r3, [pc, #376]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006a66:	4b5d      	ldr	r3, [pc, #372]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006a6c:	4b5b      	ldr	r3, [pc, #364]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a72:	4b5a      	ldr	r3, [pc, #360]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a74:	2204      	movs	r2, #4
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a78:	4b58      	ldr	r3, [pc, #352]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a7a:	2203      	movs	r2, #3
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a7e:	4b57      	ldr	r3, [pc, #348]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a84:	4b55      	ldr	r3, [pc, #340]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006a8a:	4854      	ldr	r0, [pc, #336]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a8c:	f000 fe3a 	bl	8007704 <HAL_DMA_Init>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8006a96:	f7fe f9e5 	bl	8004e64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a4f      	ldr	r2, [pc, #316]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006a9e:	679a      	str	r2, [r3, #120]	; 0x78
 8006aa0:	4a4e      	ldr	r2, [pc, #312]	; (8006bdc <HAL_UART_MspInit+0x2c4>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	2034      	movs	r0, #52	; 0x34
 8006aac:	f000 fbeb 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006ab0:	2034      	movs	r0, #52	; 0x34
 8006ab2:	f000 fc02 	bl	80072ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006ab6:	e20d      	b.n	8006ed4 <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a49      	ldr	r2, [pc, #292]	; (8006be4 <HAL_UART_MspInit+0x2cc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	f040 8098 	bne.w	8006bf4 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f004 fe2a 	bl	800b72c <HAL_RCCEx_PeriphCLKConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8006ade:	f7fe f9c1 	bl	8004e64 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006ae2:	4b3a      	ldr	r3, [pc, #232]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ae8:	4a38      	ldr	r2, [pc, #224]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006af2:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006af8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b00:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b06:	4a31      	ldr	r2, [pc, #196]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006b08:	f043 0310 	orr.w	r3, r3, #16
 8006b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b10:	4b2e      	ldr	r3, [pc, #184]	; (8006bcc <HAL_UART_MspInit+0x2b4>)
 8006b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006b1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b26:	2302      	movs	r3, #2
 8006b28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006b38:	2307      	movs	r3, #7
 8006b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4828      	ldr	r0, [pc, #160]	; (8006be8 <HAL_UART_MspInit+0x2d0>)
 8006b46:	f003 fc19 	bl	800a37c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8006b4a:	4b28      	ldr	r3, [pc, #160]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b4c:	4a28      	ldr	r2, [pc, #160]	; (8006bf0 <HAL_UART_MspInit+0x2d8>)
 8006b4e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006b50:	4b26      	ldr	r3, [pc, #152]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b52:	2250      	movs	r2, #80	; 0x50
 8006b54:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b56:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b5c:	4b23      	ldr	r3, [pc, #140]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b68:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b70:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b82:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b84:	2204      	movs	r2, #4
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b88:	4b18      	ldr	r3, [pc, #96]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006b8e:	4b17      	ldr	r3, [pc, #92]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006b94:	4b15      	ldr	r3, [pc, #84]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8006b9a:	4814      	ldr	r0, [pc, #80]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006b9c:	f000 fdb2 	bl	8007704 <HAL_DMA_Init>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_UART_MspInit+0x292>
      Error_Handler();
 8006ba6:	f7fe f95d 	bl	8004e64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a0f      	ldr	r2, [pc, #60]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006bae:	679a      	str	r2, [r3, #120]	; 0x78
 8006bb0:	4a0e      	ldr	r2, [pc, #56]	; (8006bec <HAL_UART_MspInit+0x2d4>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2052      	movs	r0, #82	; 0x52
 8006bbc:	f000 fb63 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006bc0:	2052      	movs	r0, #82	; 0x52
 8006bc2:	f000 fb7a 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 8006bc6:	e185      	b.n	8006ed4 <HAL_UART_MspInit+0x5bc>
 8006bc8:	40004c00 	.word	0x40004c00
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	58020c00 	.word	0x58020c00
 8006bd4:	24001404 	.word	0x24001404
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	2400147c 	.word	0x2400147c
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40007800 	.word	0x40007800
 8006be8:	58021000 	.word	0x58021000
 8006bec:	240014f4 	.word	0x240014f4
 8006bf0:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a54      	ldr	r2, [pc, #336]	; (8006d4c <HAL_UART_MspInit+0x434>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	f040 80b4 	bne.w	8006d68 <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006c00:	2302      	movs	r3, #2
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f004 fd8c 	bl	800b72c <HAL_RCCEx_PeriphCLKConfig>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_UART_MspInit+0x306>
      Error_Handler();
 8006c1a:	f7fe f923 	bl	8004e64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c1e:	4b4c      	ldr	r3, [pc, #304]	; (8006d50 <HAL_UART_MspInit+0x438>)
 8006c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c24:	4a4a      	ldr	r2, [pc, #296]	; (8006d50 <HAL_UART_MspInit+0x438>)
 8006c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c2e:	4b48      	ldr	r3, [pc, #288]	; (8006d50 <HAL_UART_MspInit+0x438>)
 8006c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c3c:	4b44      	ldr	r3, [pc, #272]	; (8006d50 <HAL_UART_MspInit+0x438>)
 8006c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c42:	4a43      	ldr	r2, [pc, #268]	; (8006d50 <HAL_UART_MspInit+0x438>)
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c4c:	4b40      	ldr	r3, [pc, #256]	; (8006d50 <HAL_UART_MspInit+0x438>)
 8006c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006c5a:	2360      	movs	r3, #96	; 0x60
 8006c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c60:	2302      	movs	r3, #2
 8006c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006c72:	2307      	movs	r3, #7
 8006c74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4835      	ldr	r0, [pc, #212]	; (8006d54 <HAL_UART_MspInit+0x43c>)
 8006c80:	f003 fb7c 	bl	800a37c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006c84:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006c86:	4a35      	ldr	r2, [pc, #212]	; (8006d5c <HAL_UART_MspInit+0x444>)
 8006c88:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006c8a:	4b33      	ldr	r3, [pc, #204]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006c8c:	222b      	movs	r2, #43	; 0x2b
 8006c8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c90:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c96:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c9c:	4b2e      	ldr	r3, [pc, #184]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ca2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ca4:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006caa:	4b2b      	ldr	r3, [pc, #172]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006cb0:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006cb6:	4b28      	ldr	r3, [pc, #160]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006cc2:	4825      	ldr	r0, [pc, #148]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cc4:	f000 fd1e 	bl	8007704 <HAL_DMA_Init>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8006cce:	f7fe f8c9 	bl	8004e64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cd6:	67da      	str	r2, [r3, #124]	; 0x7c
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <HAL_UART_MspInit+0x440>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006cde:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006ce0:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <HAL_UART_MspInit+0x44c>)
 8006ce2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006ce4:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006ce6:	222c      	movs	r2, #44	; 0x2c
 8006ce8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006cec:	2240      	movs	r2, #64	; 0x40
 8006cee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cfc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cfe:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d04:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006d0a:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d10:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d16:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006d1c:	4810      	ldr	r0, [pc, #64]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d1e:	f000 fcf1 	bl	8007704 <HAL_DMA_Init>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_UART_MspInit+0x414>
      Error_Handler();
 8006d28:	f7fe f89c 	bl	8004e64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a0c      	ldr	r2, [pc, #48]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d30:	679a      	str	r2, [r3, #120]	; 0x78
 8006d32:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <HAL_UART_MspInit+0x448>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	2026      	movs	r0, #38	; 0x26
 8006d3e:	f000 faa2 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006d42:	2026      	movs	r0, #38	; 0x26
 8006d44:	f000 fab9 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 8006d48:	e0c4      	b.n	8006ed4 <HAL_UART_MspInit+0x5bc>
 8006d4a:	bf00      	nop
 8006d4c:	40004400 	.word	0x40004400
 8006d50:	58024400 	.word	0x58024400
 8006d54:	58020c00 	.word	0x58020c00
 8006d58:	2400156c 	.word	0x2400156c
 8006d5c:	40020088 	.word	0x40020088
 8006d60:	240015e4 	.word	0x240015e4
 8006d64:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a5b      	ldr	r2, [pc, #364]	; (8006edc <HAL_UART_MspInit+0x5c4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	f040 80b0 	bne.w	8006ed4 <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006d74:	2302      	movs	r3, #2
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d82:	4618      	mov	r0, r3
 8006d84:	f004 fcd2 	bl	800b72c <HAL_RCCEx_PeriphCLKConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006d8e:	f7fe f869 	bl	8004e64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d92:	4b53      	ldr	r3, [pc, #332]	; (8006ee0 <HAL_UART_MspInit+0x5c8>)
 8006d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d98:	4a51      	ldr	r2, [pc, #324]	; (8006ee0 <HAL_UART_MspInit+0x5c8>)
 8006d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006da2:	4b4f      	ldr	r3, [pc, #316]	; (8006ee0 <HAL_UART_MspInit+0x5c8>)
 8006da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <HAL_UART_MspInit+0x5c8>)
 8006db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db6:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <HAL_UART_MspInit+0x5c8>)
 8006db8:	f043 0308 	orr.w	r3, r3, #8
 8006dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dc0:	4b47      	ldr	r3, [pc, #284]	; (8006ee0 <HAL_UART_MspInit+0x5c8>)
 8006dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006dce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006de8:	2307      	movs	r3, #7
 8006dea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006df2:	4619      	mov	r1, r3
 8006df4:	483b      	ldr	r0, [pc, #236]	; (8006ee4 <HAL_UART_MspInit+0x5cc>)
 8006df6:	f003 fac1 	bl	800a37c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006dfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006dfc:	4a3b      	ldr	r2, [pc, #236]	; (8006eec <HAL_UART_MspInit+0x5d4>)
 8006dfe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006e00:	4b39      	ldr	r3, [pc, #228]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e02:	222d      	movs	r2, #45	; 0x2d
 8006e04:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e06:	4b38      	ldr	r3, [pc, #224]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e0c:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e12:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e18:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e1a:	4b33      	ldr	r3, [pc, #204]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e20:	4b31      	ldr	r3, [pc, #196]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006e26:	4b30      	ldr	r3, [pc, #192]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e2c:	4b2e      	ldr	r3, [pc, #184]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e32:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e34:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006e3a:	482b      	ldr	r0, [pc, #172]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e3c:	f000 fc62 	bl	8007704 <HAL_DMA_Init>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_UART_MspInit+0x532>
      Error_Handler();
 8006e46:	f7fe f80d 	bl	8004e64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a26      	ldr	r2, [pc, #152]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e4e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006e50:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <HAL_UART_MspInit+0x5d0>)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006e56:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e58:	4a26      	ldr	r2, [pc, #152]	; (8006ef4 <HAL_UART_MspInit+0x5dc>)
 8006e5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006e5c:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e5e:	222e      	movs	r2, #46	; 0x2e
 8006e60:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e62:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e64:	2240      	movs	r2, #64	; 0x40
 8006e66:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e68:	4b21      	ldr	r3, [pc, #132]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e76:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006e82:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e88:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e8e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e90:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e92:	2204      	movs	r2, #4
 8006e94:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e96:	4b16      	ldr	r3, [pc, #88]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e98:	2203      	movs	r2, #3
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006e9c:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006ea8:	4811      	ldr	r0, [pc, #68]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006eaa:	f000 fc2b 	bl	8007704 <HAL_DMA_Init>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 8006eb4:	f7fd ffd6 	bl	8004e64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a0d      	ldr	r2, [pc, #52]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006ebc:	679a      	str	r2, [r3, #120]	; 0x78
 8006ebe:	4a0c      	ldr	r2, [pc, #48]	; (8006ef0 <HAL_UART_MspInit+0x5d8>)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	2027      	movs	r0, #39	; 0x27
 8006eca:	f000 f9dc 	bl	8007286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006ece:	2027      	movs	r0, #39	; 0x27
 8006ed0:	f000 f9f3 	bl	80072ba <HAL_NVIC_EnableIRQ>
}
 8006ed4:	bf00      	nop
 8006ed6:	37f8      	adds	r7, #248	; 0xf8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40004800 	.word	0x40004800
 8006ee0:	58024400 	.word	0x58024400
 8006ee4:	58020c00 	.word	0x58020c00
 8006ee8:	2400165c 	.word	0x2400165c
 8006eec:	40020028 	.word	0x40020028
 8006ef0:	240016d4 	.word	0x240016d4
 8006ef4:	40020040 	.word	0x40020040

08006ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006efc:	f7fe fbf0 	bl	80056e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f00:	480c      	ldr	r0, [pc, #48]	; (8006f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f02:	490d      	ldr	r1, [pc, #52]	; (8006f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f04:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f08:	e002      	b.n	8006f10 <LoopCopyDataInit>

08006f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f0e:	3304      	adds	r3, #4

08006f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f14:	d3f9      	bcc.n	8006f0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f16:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f18:	4c0a      	ldr	r4, [pc, #40]	; (8006f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f1c:	e001      	b.n	8006f22 <LoopFillZerobss>

08006f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f20:	3204      	adds	r2, #4

08006f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f24:	d3fb      	bcc.n	8006f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f26:	f00b fc4b 	bl	80127c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f2a:	f7fd fc31 	bl	8004790 <main>
  bx  lr
 8006f2e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006f30:	24001d60 	.word	0x24001d60
  ldr r0, =_sdata
 8006f34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006f38:	24000410 	.word	0x24000410
  ldr r2, =_sidata
 8006f3c:	0801714c 	.word	0x0801714c
  ldr r2, =_sbss
 8006f40:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8006f44:	24001760 	.word	0x24001760

08006f48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f48:	e7fe      	b.n	8006f48 <ADC3_IRQHandler>
	...

08006f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f52:	2003      	movs	r0, #3
 8006f54:	f000 f98c 	bl	8007270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f58:	f004 fa12 	bl	800b380 <HAL_RCC_GetSysClockFreq>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <HAL_Init+0x68>)
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	4913      	ldr	r1, [pc, #76]	; (8006fb8 <HAL_Init+0x6c>)
 8006f6a:	5ccb      	ldrb	r3, [r1, r3]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
 8006f74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <HAL_Init+0x68>)
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <HAL_Init+0x6c>)
 8006f80:	5cd3      	ldrb	r3, [r2, r3]
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8c:	4a0b      	ldr	r2, [pc, #44]	; (8006fbc <HAL_Init+0x70>)
 8006f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f90:	4a0b      	ldr	r2, [pc, #44]	; (8006fc0 <HAL_Init+0x74>)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006f96:	2000      	movs	r0, #0
 8006f98:	f000 f814 	bl	8006fc4 <HAL_InitTick>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e002      	b.n	8006fac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006fa6:	f7fe f97f 	bl	80052a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	0801524c 	.word	0x0801524c
 8006fbc:	24000234 	.word	0x24000234
 8006fc0:	24000230 	.word	0x24000230

08006fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <HAL_InitTick+0x60>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e021      	b.n	800701c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006fd8:	4b13      	ldr	r3, [pc, #76]	; (8007028 <HAL_InitTick+0x64>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4b11      	ldr	r3, [pc, #68]	; (8007024 <HAL_InitTick+0x60>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f971 	bl	80072d6 <HAL_SYSTICK_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e00e      	b.n	800701c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b0f      	cmp	r3, #15
 8007002:	d80a      	bhi.n	800701a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007004:	2200      	movs	r2, #0
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	f000 f93b 	bl	8007286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007010:	4a06      	ldr	r2, [pc, #24]	; (800702c <HAL_InitTick+0x68>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	e000      	b.n	800701c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	2400023c 	.word	0x2400023c
 8007028:	24000230 	.word	0x24000230
 800702c:	24000238 	.word	0x24000238

08007030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_IncTick+0x20>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_IncTick+0x24>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4413      	add	r3, r2
 8007040:	4a04      	ldr	r2, [pc, #16]	; (8007054 <HAL_IncTick+0x24>)
 8007042:	6013      	str	r3, [r2, #0]
}
 8007044:	bf00      	nop
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	2400023c 	.word	0x2400023c
 8007054:	2400174c 	.word	0x2400174c

08007058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007058:	b480      	push	{r7}
 800705a:	af00      	add	r7, sp, #0
  return uwTick;
 800705c:	4b03      	ldr	r3, [pc, #12]	; (800706c <HAL_GetTick+0x14>)
 800705e:	681b      	ldr	r3, [r3, #0]
}
 8007060:	4618      	mov	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	2400174c 	.word	0x2400174c

08007070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007078:	f7ff ffee 	bl	8007058 <HAL_GetTick>
 800707c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007088:	d005      	beq.n	8007096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <HAL_Delay+0x44>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007096:	bf00      	nop
 8007098:	f7ff ffde 	bl	8007058 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d8f7      	bhi.n	8007098 <HAL_Delay+0x28>
  {
  }
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	2400023c 	.word	0x2400023c

080070b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80070bc:	4b03      	ldr	r3, [pc, #12]	; (80070cc <HAL_GetREVID+0x14>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	0c1b      	lsrs	r3, r3, #16
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	5c001000 	.word	0x5c001000

080070d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070e0:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <__NVIC_SetPriorityGrouping+0x40>)
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070ec:	4013      	ands	r3, r2
 80070ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <__NVIC_SetPriorityGrouping+0x44>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070fe:	4a04      	ldr	r2, [pc, #16]	; (8007110 <__NVIC_SetPriorityGrouping+0x40>)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	60d3      	str	r3, [r2, #12]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	e000ed00 	.word	0xe000ed00
 8007114:	05fa0000 	.word	0x05fa0000

08007118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <__NVIC_GetPriorityGrouping+0x18>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	f003 0307 	and.w	r3, r3, #7
}
 8007126:	4618      	mov	r0, r3
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	e000ed00 	.word	0xe000ed00

08007134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800713e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	db0b      	blt.n	800715e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	f003 021f 	and.w	r2, r3, #31
 800714c:	4907      	ldr	r1, [pc, #28]	; (800716c <__NVIC_EnableIRQ+0x38>)
 800714e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	2001      	movs	r0, #1
 8007156:	fa00 f202 	lsl.w	r2, r0, r2
 800715a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	e000e100 	.word	0xe000e100

08007170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800717c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007180:	2b00      	cmp	r3, #0
 8007182:	db0a      	blt.n	800719a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	b2da      	uxtb	r2, r3
 8007188:	490c      	ldr	r1, [pc, #48]	; (80071bc <__NVIC_SetPriority+0x4c>)
 800718a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800718e:	0112      	lsls	r2, r2, #4
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	440b      	add	r3, r1
 8007194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007198:	e00a      	b.n	80071b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	4908      	ldr	r1, [pc, #32]	; (80071c0 <__NVIC_SetPriority+0x50>)
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	3b04      	subs	r3, #4
 80071a8:	0112      	lsls	r2, r2, #4
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	440b      	add	r3, r1
 80071ae:	761a      	strb	r2, [r3, #24]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	e000e100 	.word	0xe000e100
 80071c0:	e000ed00 	.word	0xe000ed00

080071c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b089      	sub	sp, #36	; 0x24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	f1c3 0307 	rsb	r3, r3, #7
 80071de:	2b04      	cmp	r3, #4
 80071e0:	bf28      	it	cs
 80071e2:	2304      	movcs	r3, #4
 80071e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3304      	adds	r3, #4
 80071ea:	2b06      	cmp	r3, #6
 80071ec:	d902      	bls.n	80071f4 <NVIC_EncodePriority+0x30>
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3b03      	subs	r3, #3
 80071f2:	e000      	b.n	80071f6 <NVIC_EncodePriority+0x32>
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43da      	mvns	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	401a      	ands	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800720c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	43d9      	mvns	r1, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800721c:	4313      	orrs	r3, r2
         );
}
 800721e:	4618      	mov	r0, r3
 8007220:	3724      	adds	r7, #36	; 0x24
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3b01      	subs	r3, #1
 8007238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800723c:	d301      	bcc.n	8007242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800723e:	2301      	movs	r3, #1
 8007240:	e00f      	b.n	8007262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007242:	4a0a      	ldr	r2, [pc, #40]	; (800726c <SysTick_Config+0x40>)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3b01      	subs	r3, #1
 8007248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800724a:	210f      	movs	r1, #15
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007250:	f7ff ff8e 	bl	8007170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <SysTick_Config+0x40>)
 8007256:	2200      	movs	r2, #0
 8007258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800725a:	4b04      	ldr	r3, [pc, #16]	; (800726c <SysTick_Config+0x40>)
 800725c:	2207      	movs	r2, #7
 800725e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	e000e010 	.word	0xe000e010

08007270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff ff29 	bl	80070d0 <__NVIC_SetPriorityGrouping>
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	4603      	mov	r3, r0
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007294:	f7ff ff40 	bl	8007118 <__NVIC_GetPriorityGrouping>
 8007298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	f7ff ff90 	bl	80071c4 <NVIC_EncodePriority>
 80072a4:	4602      	mov	r2, r0
 80072a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80072aa:	4611      	mov	r1, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff ff5f 	bl	8007170 <__NVIC_SetPriority>
}
 80072b2:	bf00      	nop
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	4603      	mov	r3, r0
 80072c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff ff33 	bl	8007134 <__NVIC_EnableIRQ>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff ffa4 	bl	800722c <SysTick_Config>
 80072e4:	4603      	mov	r3, r0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80072f2:	f000 f802 	bl	80072fa <HAL_SYSTICK_Callback>
}
 80072f6:	bf00      	nop
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80072fa:	b480      	push	{r7}
 80072fc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80072fe:	bf00      	nop
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e054      	b.n	80073c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7f5b      	ldrb	r3, [r3, #29]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fb f8c2 	bl	80024b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	791b      	ldrb	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a22      	ldr	r2, [pc, #136]	; (80073cc <HAL_CRC_Init+0xc4>)
 8007344:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0218 	bic.w	r2, r2, #24
 8007354:	609a      	str	r2, [r3, #8]
 8007356:	e00c      	b.n	8007372 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	461a      	mov	r2, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f948 	bl	80075f8 <HAL_CRCEx_Polynomial_Set>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e028      	b.n	80073c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007382:	611a      	str	r2, [r3, #16]
 8007384:	e004      	b.n	8007390 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6912      	ldr	r2, [r2, #16]
 800738e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695a      	ldr	r2, [r3, #20]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	04c11db7 	.word	0x04c11db7

080073d0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80073dc:	2300      	movs	r3, #0
 80073de:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2202      	movs	r2, #2
 80073e4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0201 	orr.w	r2, r2, #1
 80073f4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d006      	beq.n	800740c <HAL_CRC_Calculate+0x3c>
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d829      	bhi.n	8007456 <HAL_CRC_Calculate+0x86>
 8007402:	2b01      	cmp	r3, #1
 8007404:	d019      	beq.n	800743a <HAL_CRC_Calculate+0x6a>
 8007406:	2b02      	cmp	r3, #2
 8007408:	d01e      	beq.n	8007448 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800740a:	e024      	b.n	8007456 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e00a      	b.n	8007428 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	441a      	add	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	3301      	adds	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d3f0      	bcc.n	8007412 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	613b      	str	r3, [r7, #16]
      break;
 8007438:	e00e      	b.n	8007458 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f812 	bl	8007468 <CRC_Handle_8>
 8007444:	6138      	str	r0, [r7, #16]
      break;
 8007446:	e007      	b.n	8007458 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	68b9      	ldr	r1, [r7, #8]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f899 	bl	8007584 <CRC_Handle_16>
 8007452:	6138      	str	r0, [r7, #16]
      break;
 8007454:	e000      	b.n	8007458 <HAL_CRC_Calculate+0x88>
      break;
 8007456:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800745e:	693b      	ldr	r3, [r7, #16]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	; 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	e023      	b.n	80074c2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	4413      	add	r3, r2
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	3301      	adds	r3, #1
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	440b      	add	r3, r1
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007494:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	3302      	adds	r3, #2
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	440b      	add	r3, r1
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80074a4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	3303      	adds	r3, #3
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	440b      	add	r3, r1
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80074b8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80074ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	3301      	adds	r3, #1
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	089b      	lsrs	r3, r3, #2
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3d6      	bcc.n	800747a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d04d      	beq.n	8007572 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d107      	bne.n	80074f0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	4413      	add	r3, r2
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d116      	bne.n	8007528 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	b21a      	sxth	r2, r3
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	3301      	adds	r3, #1
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	440b      	add	r3, r1
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b21b      	sxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b21b      	sxth	r3, r3
 800751a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	8b7a      	ldrh	r2, [r7, #26]
 8007526:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b03      	cmp	r3, #3
 8007530:	d11f      	bne.n	8007572 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	b21a      	sxth	r2, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	3301      	adds	r3, #1
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	440b      	add	r3, r1
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b21b      	sxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b21b      	sxth	r3, r3
 8007552:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	8b7a      	ldrh	r2, [r7, #26]
 800755e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3302      	adds	r3, #2
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4413      	add	r3, r2
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	6812      	ldr	r2, [r2, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3724      	adds	r7, #36	; 0x24
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e013      	b.n	80075be <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	041a      	lsls	r2, r3, #16
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	3302      	adds	r3, #2
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	440b      	add	r3, r1
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	4619      	mov	r1, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3301      	adds	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d3e6      	bcc.n	8007596 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	881a      	ldrh	r2, [r3, #0]
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007608:	231f      	movs	r3, #31
 800760a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800760c:	bf00      	nop
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	613a      	str	r2, [r7, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <HAL_CRCEx_Polynomial_Set+0x34>
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f003 031f 	and.w	r3, r3, #31
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b18      	cmp	r3, #24
 8007630:	d846      	bhi.n	80076c0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	080076c7 	.word	0x080076c7
 800763c:	080076c1 	.word	0x080076c1
 8007640:	080076c1 	.word	0x080076c1
 8007644:	080076c1 	.word	0x080076c1
 8007648:	080076c1 	.word	0x080076c1
 800764c:	080076c1 	.word	0x080076c1
 8007650:	080076c1 	.word	0x080076c1
 8007654:	080076c1 	.word	0x080076c1
 8007658:	080076b5 	.word	0x080076b5
 800765c:	080076c1 	.word	0x080076c1
 8007660:	080076c1 	.word	0x080076c1
 8007664:	080076c1 	.word	0x080076c1
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076c1 	.word	0x080076c1
 8007670:	080076c1 	.word	0x080076c1
 8007674:	080076c1 	.word	0x080076c1
 8007678:	080076a9 	.word	0x080076a9
 800767c:	080076c1 	.word	0x080076c1
 8007680:	080076c1 	.word	0x080076c1
 8007684:	080076c1 	.word	0x080076c1
 8007688:	080076c1 	.word	0x080076c1
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076c1 	.word	0x080076c1
 8007694:	080076c1 	.word	0x080076c1
 8007698:	0800769d 	.word	0x0800769d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b06      	cmp	r3, #6
 80076a0:	d913      	bls.n	80076ca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076a6:	e010      	b.n	80076ca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	d90f      	bls.n	80076ce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076b2:	e00c      	b.n	80076ce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d90b      	bls.n	80076d2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80076be:	e008      	b.n	80076d2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
      break;
 80076c4:	e006      	b.n	80076d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076c6:	bf00      	nop
 80076c8:	e004      	b.n	80076d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80076d2:	bf00      	nop
  }
  if (status == HAL_OK)
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f023 0118 	bic.w	r1, r3, #24
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800770c:	f7ff fca4 	bl	8007058 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e316      	b.n	8007d4a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a66      	ldr	r2, [pc, #408]	; (80078bc <HAL_DMA_Init+0x1b8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d04a      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a65      	ldr	r2, [pc, #404]	; (80078c0 <HAL_DMA_Init+0x1bc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d045      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a63      	ldr	r2, [pc, #396]	; (80078c4 <HAL_DMA_Init+0x1c0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d040      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a62      	ldr	r2, [pc, #392]	; (80078c8 <HAL_DMA_Init+0x1c4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d03b      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a60      	ldr	r2, [pc, #384]	; (80078cc <HAL_DMA_Init+0x1c8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d036      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a5f      	ldr	r2, [pc, #380]	; (80078d0 <HAL_DMA_Init+0x1cc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d031      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a5d      	ldr	r2, [pc, #372]	; (80078d4 <HAL_DMA_Init+0x1d0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02c      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a5c      	ldr	r2, [pc, #368]	; (80078d8 <HAL_DMA_Init+0x1d4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d027      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a5a      	ldr	r2, [pc, #360]	; (80078dc <HAL_DMA_Init+0x1d8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d022      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a59      	ldr	r2, [pc, #356]	; (80078e0 <HAL_DMA_Init+0x1dc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d01d      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a57      	ldr	r2, [pc, #348]	; (80078e4 <HAL_DMA_Init+0x1e0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d018      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a56      	ldr	r2, [pc, #344]	; (80078e8 <HAL_DMA_Init+0x1e4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d013      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a54      	ldr	r2, [pc, #336]	; (80078ec <HAL_DMA_Init+0x1e8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00e      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a53      	ldr	r2, [pc, #332]	; (80078f0 <HAL_DMA_Init+0x1ec>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d009      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a51      	ldr	r2, [pc, #324]	; (80078f4 <HAL_DMA_Init+0x1f0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <HAL_DMA_Init+0xb8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a50      	ldr	r2, [pc, #320]	; (80078f8 <HAL_DMA_Init+0x1f4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d101      	bne.n	80077c0 <HAL_DMA_Init+0xbc>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_DMA_Init+0xbe>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 813b 	beq.w	8007a3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a37      	ldr	r2, [pc, #220]	; (80078bc <HAL_DMA_Init+0x1b8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <HAL_DMA_Init+0x174>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a36      	ldr	r2, [pc, #216]	; (80078c0 <HAL_DMA_Init+0x1bc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d045      	beq.n	8007878 <HAL_DMA_Init+0x174>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a34      	ldr	r2, [pc, #208]	; (80078c4 <HAL_DMA_Init+0x1c0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d040      	beq.n	8007878 <HAL_DMA_Init+0x174>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a33      	ldr	r2, [pc, #204]	; (80078c8 <HAL_DMA_Init+0x1c4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d03b      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a31      	ldr	r2, [pc, #196]	; (80078cc <HAL_DMA_Init+0x1c8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d036      	beq.n	8007878 <HAL_DMA_Init+0x174>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a30      	ldr	r2, [pc, #192]	; (80078d0 <HAL_DMA_Init+0x1cc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d031      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2e      	ldr	r2, [pc, #184]	; (80078d4 <HAL_DMA_Init+0x1d0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d02c      	beq.n	8007878 <HAL_DMA_Init+0x174>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2d      	ldr	r2, [pc, #180]	; (80078d8 <HAL_DMA_Init+0x1d4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d027      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <HAL_DMA_Init+0x1d8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d022      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <HAL_DMA_Init+0x1dc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01d      	beq.n	8007878 <HAL_DMA_Init+0x174>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a28      	ldr	r2, [pc, #160]	; (80078e4 <HAL_DMA_Init+0x1e0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <HAL_DMA_Init+0x1e4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a25      	ldr	r2, [pc, #148]	; (80078ec <HAL_DMA_Init+0x1e8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <HAL_DMA_Init+0x174>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a24      	ldr	r2, [pc, #144]	; (80078f0 <HAL_DMA_Init+0x1ec>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <HAL_DMA_Init+0x174>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <HAL_DMA_Init+0x1f0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_DMA_Init+0x174>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <HAL_DMA_Init+0x1f4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d108      	bne.n	800788a <HAL_DMA_Init+0x186>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0201 	bic.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e007      	b.n	800789a <HAL_DMA_Init+0x196>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800789a:	e02f      	b.n	80078fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800789c:	f7ff fbdc 	bl	8007058 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b05      	cmp	r3, #5
 80078a8:	d928      	bls.n	80078fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2203      	movs	r2, #3
 80078b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e246      	b.n	8007d4a <HAL_DMA_Init+0x646>
 80078bc:	40020010 	.word	0x40020010
 80078c0:	40020028 	.word	0x40020028
 80078c4:	40020040 	.word	0x40020040
 80078c8:	40020058 	.word	0x40020058
 80078cc:	40020070 	.word	0x40020070
 80078d0:	40020088 	.word	0x40020088
 80078d4:	400200a0 	.word	0x400200a0
 80078d8:	400200b8 	.word	0x400200b8
 80078dc:	40020410 	.word	0x40020410
 80078e0:	40020428 	.word	0x40020428
 80078e4:	40020440 	.word	0x40020440
 80078e8:	40020458 	.word	0x40020458
 80078ec:	40020470 	.word	0x40020470
 80078f0:	40020488 	.word	0x40020488
 80078f4:	400204a0 	.word	0x400204a0
 80078f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1c8      	bne.n	800789c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4b83      	ldr	r3, [pc, #524]	; (8007b24 <HAL_DMA_Init+0x420>)
 8007916:	4013      	ands	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007922:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800792e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800793a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	2b04      	cmp	r3, #4
 800794e:	d107      	bne.n	8007960 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	4313      	orrs	r3, r2
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007960:	4b71      	ldr	r3, [pc, #452]	; (8007b28 <HAL_DMA_Init+0x424>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	4b71      	ldr	r3, [pc, #452]	; (8007b2c <HAL_DMA_Init+0x428>)
 8007966:	4013      	ands	r3, r2
 8007968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800796c:	d328      	bcc.n	80079c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b28      	cmp	r3, #40	; 0x28
 8007974:	d903      	bls.n	800797e <HAL_DMA_Init+0x27a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b2e      	cmp	r3, #46	; 0x2e
 800797c:	d917      	bls.n	80079ae <HAL_DMA_Init+0x2aa>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b3e      	cmp	r3, #62	; 0x3e
 8007984:	d903      	bls.n	800798e <HAL_DMA_Init+0x28a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b42      	cmp	r3, #66	; 0x42
 800798c:	d90f      	bls.n	80079ae <HAL_DMA_Init+0x2aa>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b46      	cmp	r3, #70	; 0x46
 8007994:	d903      	bls.n	800799e <HAL_DMA_Init+0x29a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2b48      	cmp	r3, #72	; 0x48
 800799c:	d907      	bls.n	80079ae <HAL_DMA_Init+0x2aa>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b4e      	cmp	r3, #78	; 0x4e
 80079a4:	d905      	bls.n	80079b2 <HAL_DMA_Init+0x2ae>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b52      	cmp	r3, #82	; 0x52
 80079ac:	d801      	bhi.n	80079b2 <HAL_DMA_Init+0x2ae>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_DMA_Init+0x2b0>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0307 	bic.w	r3, r3, #7
 80079d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d117      	bne.n	8007a1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f002 fb33 	bl	800a068 <DMA_CheckFifoParam>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2240      	movs	r2, #64	; 0x40
 8007a0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e197      	b.n	8007d4a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f002 fa6e 	bl	8009f04 <DMA_CalcBaseAndBitshift>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	223f      	movs	r2, #63	; 0x3f
 8007a36:	409a      	lsls	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	609a      	str	r2, [r3, #8]
 8007a3c:	e0cd      	b.n	8007bda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a3b      	ldr	r2, [pc, #236]	; (8007b30 <HAL_DMA_Init+0x42c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d022      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a39      	ldr	r2, [pc, #228]	; (8007b34 <HAL_DMA_Init+0x430>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01d      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a38      	ldr	r2, [pc, #224]	; (8007b38 <HAL_DMA_Init+0x434>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d018      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a36      	ldr	r2, [pc, #216]	; (8007b3c <HAL_DMA_Init+0x438>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a35      	ldr	r2, [pc, #212]	; (8007b40 <HAL_DMA_Init+0x43c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00e      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a33      	ldr	r2, [pc, #204]	; (8007b44 <HAL_DMA_Init+0x440>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d009      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a32      	ldr	r2, [pc, #200]	; (8007b48 <HAL_DMA_Init+0x444>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d004      	beq.n	8007a8e <HAL_DMA_Init+0x38a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a30      	ldr	r2, [pc, #192]	; (8007b4c <HAL_DMA_Init+0x448>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d101      	bne.n	8007a92 <HAL_DMA_Init+0x38e>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e000      	b.n	8007a94 <HAL_DMA_Init+0x390>
 8007a92:	2300      	movs	r3, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8097 	beq.w	8007bc8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a24      	ldr	r2, [pc, #144]	; (8007b30 <HAL_DMA_Init+0x42c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d021      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a22      	ldr	r2, [pc, #136]	; (8007b34 <HAL_DMA_Init+0x430>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d01c      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a21      	ldr	r2, [pc, #132]	; (8007b38 <HAL_DMA_Init+0x434>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d017      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <HAL_DMA_Init+0x438>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d012      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <HAL_DMA_Init+0x43c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00d      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <HAL_DMA_Init+0x440>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d008      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <HAL_DMA_Init+0x444>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d003      	beq.n	8007ae8 <HAL_DMA_Init+0x3e4>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	; (8007b4c <HAL_DMA_Init+0x448>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4b12      	ldr	r3, [pc, #72]	; (8007b50 <HAL_DMA_Init+0x44c>)
 8007b06:	4013      	ands	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d020      	beq.n	8007b54 <HAL_DMA_Init+0x450>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d102      	bne.n	8007b20 <HAL_DMA_Init+0x41c>
 8007b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b1e:	e01a      	b.n	8007b56 <HAL_DMA_Init+0x452>
 8007b20:	2300      	movs	r3, #0
 8007b22:	e018      	b.n	8007b56 <HAL_DMA_Init+0x452>
 8007b24:	fe10803f 	.word	0xfe10803f
 8007b28:	5c001000 	.word	0x5c001000
 8007b2c:	ffff0000 	.word	0xffff0000
 8007b30:	58025408 	.word	0x58025408
 8007b34:	5802541c 	.word	0x5802541c
 8007b38:	58025430 	.word	0x58025430
 8007b3c:	58025444 	.word	0x58025444
 8007b40:	58025458 	.word	0x58025458
 8007b44:	5802546c 	.word	0x5802546c
 8007b48:	58025480 	.word	0x58025480
 8007b4c:	58025494 	.word	0x58025494
 8007b50:	fffe000f 	.word	0xfffe000f
 8007b54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	68d2      	ldr	r2, [r2, #12]
 8007b5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4b6e      	ldr	r3, [pc, #440]	; (8007d54 <HAL_DMA_Init+0x650>)
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4a6e      	ldr	r2, [pc, #440]	; (8007d58 <HAL_DMA_Init+0x654>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	091b      	lsrs	r3, r3, #4
 8007ba6:	009a      	lsls	r2, r3, #2
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 f9a9 	bl	8009f04 <DMA_CalcBaseAndBitshift>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	409a      	lsls	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]
 8007bc6:	e008      	b.n	8007bda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2240      	movs	r2, #64	; 0x40
 8007bcc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e0b7      	b.n	8007d4a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a5f      	ldr	r2, [pc, #380]	; (8007d5c <HAL_DMA_Init+0x658>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d072      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a5d      	ldr	r2, [pc, #372]	; (8007d60 <HAL_DMA_Init+0x65c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d06d      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a5c      	ldr	r2, [pc, #368]	; (8007d64 <HAL_DMA_Init+0x660>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d068      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a5a      	ldr	r2, [pc, #360]	; (8007d68 <HAL_DMA_Init+0x664>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d063      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a59      	ldr	r2, [pc, #356]	; (8007d6c <HAL_DMA_Init+0x668>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d05e      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a57      	ldr	r2, [pc, #348]	; (8007d70 <HAL_DMA_Init+0x66c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d059      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a56      	ldr	r2, [pc, #344]	; (8007d74 <HAL_DMA_Init+0x670>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d054      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a54      	ldr	r2, [pc, #336]	; (8007d78 <HAL_DMA_Init+0x674>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d04f      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a53      	ldr	r2, [pc, #332]	; (8007d7c <HAL_DMA_Init+0x678>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d04a      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a51      	ldr	r2, [pc, #324]	; (8007d80 <HAL_DMA_Init+0x67c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d045      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a50      	ldr	r2, [pc, #320]	; (8007d84 <HAL_DMA_Init+0x680>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d040      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a4e      	ldr	r2, [pc, #312]	; (8007d88 <HAL_DMA_Init+0x684>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d03b      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a4d      	ldr	r2, [pc, #308]	; (8007d8c <HAL_DMA_Init+0x688>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d036      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a4b      	ldr	r2, [pc, #300]	; (8007d90 <HAL_DMA_Init+0x68c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d031      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a4a      	ldr	r2, [pc, #296]	; (8007d94 <HAL_DMA_Init+0x690>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d02c      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a48      	ldr	r2, [pc, #288]	; (8007d98 <HAL_DMA_Init+0x694>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d027      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a47      	ldr	r2, [pc, #284]	; (8007d9c <HAL_DMA_Init+0x698>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d022      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a45      	ldr	r2, [pc, #276]	; (8007da0 <HAL_DMA_Init+0x69c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d01d      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a44      	ldr	r2, [pc, #272]	; (8007da4 <HAL_DMA_Init+0x6a0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d018      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a42      	ldr	r2, [pc, #264]	; (8007da8 <HAL_DMA_Init+0x6a4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a41      	ldr	r2, [pc, #260]	; (8007dac <HAL_DMA_Init+0x6a8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00e      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a3f      	ldr	r2, [pc, #252]	; (8007db0 <HAL_DMA_Init+0x6ac>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d009      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a3e      	ldr	r2, [pc, #248]	; (8007db4 <HAL_DMA_Init+0x6b0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d004      	beq.n	8007cca <HAL_DMA_Init+0x5c6>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a3c      	ldr	r2, [pc, #240]	; (8007db8 <HAL_DMA_Init+0x6b4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d101      	bne.n	8007cce <HAL_DMA_Init+0x5ca>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <HAL_DMA_Init+0x5cc>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d032      	beq.n	8007d3a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f002 fa43 	bl	800a160 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d102      	bne.n	8007ce8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cfc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <HAL_DMA_Init+0x624>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d80c      	bhi.n	8007d28 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f002 fac0 	bl	800a294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	e008      	b.n	8007d3a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	a7fdabf8 	.word	0xa7fdabf8
 8007d58:	cccccccd 	.word	0xcccccccd
 8007d5c:	40020010 	.word	0x40020010
 8007d60:	40020028 	.word	0x40020028
 8007d64:	40020040 	.word	0x40020040
 8007d68:	40020058 	.word	0x40020058
 8007d6c:	40020070 	.word	0x40020070
 8007d70:	40020088 	.word	0x40020088
 8007d74:	400200a0 	.word	0x400200a0
 8007d78:	400200b8 	.word	0x400200b8
 8007d7c:	40020410 	.word	0x40020410
 8007d80:	40020428 	.word	0x40020428
 8007d84:	40020440 	.word	0x40020440
 8007d88:	40020458 	.word	0x40020458
 8007d8c:	40020470 	.word	0x40020470
 8007d90:	40020488 	.word	0x40020488
 8007d94:	400204a0 	.word	0x400204a0
 8007d98:	400204b8 	.word	0x400204b8
 8007d9c:	58025408 	.word	0x58025408
 8007da0:	5802541c 	.word	0x5802541c
 8007da4:	58025430 	.word	0x58025430
 8007da8:	58025444 	.word	0x58025444
 8007dac:	58025458 	.word	0x58025458
 8007db0:	5802546c 	.word	0x5802546c
 8007db4:	58025480 	.word	0x58025480
 8007db8:	58025494 	.word	0x58025494

08007dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e226      	b.n	8008226 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_DMA_Start_IT+0x2a>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e21f      	b.n	8008226 <HAL_DMA_Start_IT+0x46a>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	f040 820a 	bne.w	8008210 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a68      	ldr	r2, [pc, #416]	; (8007fb0 <HAL_DMA_Start_IT+0x1f4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d04a      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a66      	ldr	r2, [pc, #408]	; (8007fb4 <HAL_DMA_Start_IT+0x1f8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d045      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a65      	ldr	r2, [pc, #404]	; (8007fb8 <HAL_DMA_Start_IT+0x1fc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d040      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a63      	ldr	r2, [pc, #396]	; (8007fbc <HAL_DMA_Start_IT+0x200>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d03b      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a62      	ldr	r2, [pc, #392]	; (8007fc0 <HAL_DMA_Start_IT+0x204>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d036      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a60      	ldr	r2, [pc, #384]	; (8007fc4 <HAL_DMA_Start_IT+0x208>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d031      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a5f      	ldr	r2, [pc, #380]	; (8007fc8 <HAL_DMA_Start_IT+0x20c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d02c      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a5d      	ldr	r2, [pc, #372]	; (8007fcc <HAL_DMA_Start_IT+0x210>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d027      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a5c      	ldr	r2, [pc, #368]	; (8007fd0 <HAL_DMA_Start_IT+0x214>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a5a      	ldr	r2, [pc, #360]	; (8007fd4 <HAL_DMA_Start_IT+0x218>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01d      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a59      	ldr	r2, [pc, #356]	; (8007fd8 <HAL_DMA_Start_IT+0x21c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a57      	ldr	r2, [pc, #348]	; (8007fdc <HAL_DMA_Start_IT+0x220>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a56      	ldr	r2, [pc, #344]	; (8007fe0 <HAL_DMA_Start_IT+0x224>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a54      	ldr	r2, [pc, #336]	; (8007fe4 <HAL_DMA_Start_IT+0x228>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a53      	ldr	r2, [pc, #332]	; (8007fe8 <HAL_DMA_Start_IT+0x22c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_DMA_Start_IT+0xee>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a51      	ldr	r2, [pc, #324]	; (8007fec <HAL_DMA_Start_IT+0x230>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <HAL_DMA_Start_IT+0x100>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0201 	bic.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e007      	b.n	8007ecc <HAL_DMA_Start_IT+0x110>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0201 	bic.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f001 fe6a 	bl	8009bac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a34      	ldr	r2, [pc, #208]	; (8007fb0 <HAL_DMA_Start_IT+0x1f4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d04a      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a33      	ldr	r2, [pc, #204]	; (8007fb4 <HAL_DMA_Start_IT+0x1f8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d045      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a31      	ldr	r2, [pc, #196]	; (8007fb8 <HAL_DMA_Start_IT+0x1fc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d040      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a30      	ldr	r2, [pc, #192]	; (8007fbc <HAL_DMA_Start_IT+0x200>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d03b      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a2e      	ldr	r2, [pc, #184]	; (8007fc0 <HAL_DMA_Start_IT+0x204>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d036      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a2d      	ldr	r2, [pc, #180]	; (8007fc4 <HAL_DMA_Start_IT+0x208>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d031      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a2b      	ldr	r2, [pc, #172]	; (8007fc8 <HAL_DMA_Start_IT+0x20c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d02c      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <HAL_DMA_Start_IT+0x210>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d027      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a28      	ldr	r2, [pc, #160]	; (8007fd0 <HAL_DMA_Start_IT+0x214>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d022      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a27      	ldr	r2, [pc, #156]	; (8007fd4 <HAL_DMA_Start_IT+0x218>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d01d      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a25      	ldr	r2, [pc, #148]	; (8007fd8 <HAL_DMA_Start_IT+0x21c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d018      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a24      	ldr	r2, [pc, #144]	; (8007fdc <HAL_DMA_Start_IT+0x220>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d013      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a22      	ldr	r2, [pc, #136]	; (8007fe0 <HAL_DMA_Start_IT+0x224>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00e      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a21      	ldr	r2, [pc, #132]	; (8007fe4 <HAL_DMA_Start_IT+0x228>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d009      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <HAL_DMA_Start_IT+0x22c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_DMA_Start_IT+0x1bc>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1e      	ldr	r2, [pc, #120]	; (8007fec <HAL_DMA_Start_IT+0x230>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d101      	bne.n	8007f7c <HAL_DMA_Start_IT+0x1c0>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <HAL_DMA_Start_IT+0x1c2>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d036      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f023 021e 	bic.w	r2, r3, #30
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0216 	orr.w	r2, r2, #22
 8007f94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d03e      	beq.n	800801c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0208 	orr.w	r2, r2, #8
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e035      	b.n	800801c <HAL_DMA_Start_IT+0x260>
 8007fb0:	40020010 	.word	0x40020010
 8007fb4:	40020028 	.word	0x40020028
 8007fb8:	40020040 	.word	0x40020040
 8007fbc:	40020058 	.word	0x40020058
 8007fc0:	40020070 	.word	0x40020070
 8007fc4:	40020088 	.word	0x40020088
 8007fc8:	400200a0 	.word	0x400200a0
 8007fcc:	400200b8 	.word	0x400200b8
 8007fd0:	40020410 	.word	0x40020410
 8007fd4:	40020428 	.word	0x40020428
 8007fd8:	40020440 	.word	0x40020440
 8007fdc:	40020458 	.word	0x40020458
 8007fe0:	40020470 	.word	0x40020470
 8007fe4:	40020488 	.word	0x40020488
 8007fe8:	400204a0 	.word	0x400204a0
 8007fec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f023 020e 	bic.w	r2, r3, #14
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 020a 	orr.w	r2, r2, #10
 8008002:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0204 	orr.w	r2, r2, #4
 800801a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a83      	ldr	r2, [pc, #524]	; (8008230 <HAL_DMA_Start_IT+0x474>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d072      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a82      	ldr	r2, [pc, #520]	; (8008234 <HAL_DMA_Start_IT+0x478>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d06d      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a80      	ldr	r2, [pc, #512]	; (8008238 <HAL_DMA_Start_IT+0x47c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d068      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a7f      	ldr	r2, [pc, #508]	; (800823c <HAL_DMA_Start_IT+0x480>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d063      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a7d      	ldr	r2, [pc, #500]	; (8008240 <HAL_DMA_Start_IT+0x484>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d05e      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a7c      	ldr	r2, [pc, #496]	; (8008244 <HAL_DMA_Start_IT+0x488>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d059      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a7a      	ldr	r2, [pc, #488]	; (8008248 <HAL_DMA_Start_IT+0x48c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d054      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a79      	ldr	r2, [pc, #484]	; (800824c <HAL_DMA_Start_IT+0x490>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d04f      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a77      	ldr	r2, [pc, #476]	; (8008250 <HAL_DMA_Start_IT+0x494>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d04a      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a76      	ldr	r2, [pc, #472]	; (8008254 <HAL_DMA_Start_IT+0x498>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d045      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a74      	ldr	r2, [pc, #464]	; (8008258 <HAL_DMA_Start_IT+0x49c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d040      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a73      	ldr	r2, [pc, #460]	; (800825c <HAL_DMA_Start_IT+0x4a0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d03b      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a71      	ldr	r2, [pc, #452]	; (8008260 <HAL_DMA_Start_IT+0x4a4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d036      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a70      	ldr	r2, [pc, #448]	; (8008264 <HAL_DMA_Start_IT+0x4a8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d031      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a6e      	ldr	r2, [pc, #440]	; (8008268 <HAL_DMA_Start_IT+0x4ac>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d02c      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a6d      	ldr	r2, [pc, #436]	; (800826c <HAL_DMA_Start_IT+0x4b0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d027      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a6b      	ldr	r2, [pc, #428]	; (8008270 <HAL_DMA_Start_IT+0x4b4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d022      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a6a      	ldr	r2, [pc, #424]	; (8008274 <HAL_DMA_Start_IT+0x4b8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d01d      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a68      	ldr	r2, [pc, #416]	; (8008278 <HAL_DMA_Start_IT+0x4bc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d018      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a67      	ldr	r2, [pc, #412]	; (800827c <HAL_DMA_Start_IT+0x4c0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d013      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a65      	ldr	r2, [pc, #404]	; (8008280 <HAL_DMA_Start_IT+0x4c4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00e      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a64      	ldr	r2, [pc, #400]	; (8008284 <HAL_DMA_Start_IT+0x4c8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d009      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a62      	ldr	r2, [pc, #392]	; (8008288 <HAL_DMA_Start_IT+0x4cc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d004      	beq.n	800810c <HAL_DMA_Start_IT+0x350>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a61      	ldr	r2, [pc, #388]	; (800828c <HAL_DMA_Start_IT+0x4d0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d101      	bne.n	8008110 <HAL_DMA_Start_IT+0x354>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <HAL_DMA_Start_IT+0x356>
 8008110:	2300      	movs	r3, #0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01a      	beq.n	800814c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008132:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800814a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a37      	ldr	r2, [pc, #220]	; (8008230 <HAL_DMA_Start_IT+0x474>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d04a      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a36      	ldr	r2, [pc, #216]	; (8008234 <HAL_DMA_Start_IT+0x478>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d045      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a34      	ldr	r2, [pc, #208]	; (8008238 <HAL_DMA_Start_IT+0x47c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d040      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a33      	ldr	r2, [pc, #204]	; (800823c <HAL_DMA_Start_IT+0x480>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d03b      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a31      	ldr	r2, [pc, #196]	; (8008240 <HAL_DMA_Start_IT+0x484>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d036      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a30      	ldr	r2, [pc, #192]	; (8008244 <HAL_DMA_Start_IT+0x488>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d031      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2e      	ldr	r2, [pc, #184]	; (8008248 <HAL_DMA_Start_IT+0x48c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d02c      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2d      	ldr	r2, [pc, #180]	; (800824c <HAL_DMA_Start_IT+0x490>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d027      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2b      	ldr	r2, [pc, #172]	; (8008250 <HAL_DMA_Start_IT+0x494>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d022      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a2a      	ldr	r2, [pc, #168]	; (8008254 <HAL_DMA_Start_IT+0x498>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d01d      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a28      	ldr	r2, [pc, #160]	; (8008258 <HAL_DMA_Start_IT+0x49c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d018      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a27      	ldr	r2, [pc, #156]	; (800825c <HAL_DMA_Start_IT+0x4a0>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d013      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a25      	ldr	r2, [pc, #148]	; (8008260 <HAL_DMA_Start_IT+0x4a4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d00e      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a24      	ldr	r2, [pc, #144]	; (8008264 <HAL_DMA_Start_IT+0x4a8>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d009      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a22      	ldr	r2, [pc, #136]	; (8008268 <HAL_DMA_Start_IT+0x4ac>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_DMA_Start_IT+0x430>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a21      	ldr	r2, [pc, #132]	; (800826c <HAL_DMA_Start_IT+0x4b0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d108      	bne.n	80081fe <HAL_DMA_Start_IT+0x442>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0201 	orr.w	r2, r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e012      	b.n	8008224 <HAL_DMA_Start_IT+0x468>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0201 	orr.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e009      	b.n	8008224 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40020010 	.word	0x40020010
 8008234:	40020028 	.word	0x40020028
 8008238:	40020040 	.word	0x40020040
 800823c:	40020058 	.word	0x40020058
 8008240:	40020070 	.word	0x40020070
 8008244:	40020088 	.word	0x40020088
 8008248:	400200a0 	.word	0x400200a0
 800824c:	400200b8 	.word	0x400200b8
 8008250:	40020410 	.word	0x40020410
 8008254:	40020428 	.word	0x40020428
 8008258:	40020440 	.word	0x40020440
 800825c:	40020458 	.word	0x40020458
 8008260:	40020470 	.word	0x40020470
 8008264:	40020488 	.word	0x40020488
 8008268:	400204a0 	.word	0x400204a0
 800826c:	400204b8 	.word	0x400204b8
 8008270:	58025408 	.word	0x58025408
 8008274:	5802541c 	.word	0x5802541c
 8008278:	58025430 	.word	0x58025430
 800827c:	58025444 	.word	0x58025444
 8008280:	58025458 	.word	0x58025458
 8008284:	5802546c 	.word	0x5802546c
 8008288:	58025480 	.word	0x58025480
 800828c:	58025494 	.word	0x58025494

08008290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008298:	f7fe fede 	bl	8007058 <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e2dc      	b.n	8008862 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d008      	beq.n	80082c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2280      	movs	r2, #128	; 0x80
 80082b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e2cd      	b.n	8008862 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a76      	ldr	r2, [pc, #472]	; (80084a4 <HAL_DMA_Abort+0x214>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d04a      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a74      	ldr	r2, [pc, #464]	; (80084a8 <HAL_DMA_Abort+0x218>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d045      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a73      	ldr	r2, [pc, #460]	; (80084ac <HAL_DMA_Abort+0x21c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d040      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a71      	ldr	r2, [pc, #452]	; (80084b0 <HAL_DMA_Abort+0x220>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d03b      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a70      	ldr	r2, [pc, #448]	; (80084b4 <HAL_DMA_Abort+0x224>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d036      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a6e      	ldr	r2, [pc, #440]	; (80084b8 <HAL_DMA_Abort+0x228>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d031      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a6d      	ldr	r2, [pc, #436]	; (80084bc <HAL_DMA_Abort+0x22c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d02c      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a6b      	ldr	r2, [pc, #428]	; (80084c0 <HAL_DMA_Abort+0x230>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d027      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a6a      	ldr	r2, [pc, #424]	; (80084c4 <HAL_DMA_Abort+0x234>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d022      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a68      	ldr	r2, [pc, #416]	; (80084c8 <HAL_DMA_Abort+0x238>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d01d      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a67      	ldr	r2, [pc, #412]	; (80084cc <HAL_DMA_Abort+0x23c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a65      	ldr	r2, [pc, #404]	; (80084d0 <HAL_DMA_Abort+0x240>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a64      	ldr	r2, [pc, #400]	; (80084d4 <HAL_DMA_Abort+0x244>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a62      	ldr	r2, [pc, #392]	; (80084d8 <HAL_DMA_Abort+0x248>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a61      	ldr	r2, [pc, #388]	; (80084dc <HAL_DMA_Abort+0x24c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_DMA_Abort+0xd6>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a5f      	ldr	r2, [pc, #380]	; (80084e0 <HAL_DMA_Abort+0x250>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d101      	bne.n	800836a <HAL_DMA_Abort+0xda>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <HAL_DMA_Abort+0xdc>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d013      	beq.n	8008398 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 021e 	bic.w	r2, r2, #30
 800837e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695a      	ldr	r2, [r3, #20]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800838e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	e00a      	b.n	80083ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 020e 	bic.w	r2, r2, #14
 80083a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a3c      	ldr	r2, [pc, #240]	; (80084a4 <HAL_DMA_Abort+0x214>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d072      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a3a      	ldr	r2, [pc, #232]	; (80084a8 <HAL_DMA_Abort+0x218>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d06d      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a39      	ldr	r2, [pc, #228]	; (80084ac <HAL_DMA_Abort+0x21c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d068      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a37      	ldr	r2, [pc, #220]	; (80084b0 <HAL_DMA_Abort+0x220>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d063      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a36      	ldr	r2, [pc, #216]	; (80084b4 <HAL_DMA_Abort+0x224>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d05e      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a34      	ldr	r2, [pc, #208]	; (80084b8 <HAL_DMA_Abort+0x228>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d059      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a33      	ldr	r2, [pc, #204]	; (80084bc <HAL_DMA_Abort+0x22c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d054      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a31      	ldr	r2, [pc, #196]	; (80084c0 <HAL_DMA_Abort+0x230>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d04f      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a30      	ldr	r2, [pc, #192]	; (80084c4 <HAL_DMA_Abort+0x234>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d04a      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a2e      	ldr	r2, [pc, #184]	; (80084c8 <HAL_DMA_Abort+0x238>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d045      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a2d      	ldr	r2, [pc, #180]	; (80084cc <HAL_DMA_Abort+0x23c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d040      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a2b      	ldr	r2, [pc, #172]	; (80084d0 <HAL_DMA_Abort+0x240>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d03b      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2a      	ldr	r2, [pc, #168]	; (80084d4 <HAL_DMA_Abort+0x244>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d036      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a28      	ldr	r2, [pc, #160]	; (80084d8 <HAL_DMA_Abort+0x248>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d031      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a27      	ldr	r2, [pc, #156]	; (80084dc <HAL_DMA_Abort+0x24c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d02c      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a25      	ldr	r2, [pc, #148]	; (80084e0 <HAL_DMA_Abort+0x250>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d027      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <HAL_DMA_Abort+0x254>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d022      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a22      	ldr	r2, [pc, #136]	; (80084e8 <HAL_DMA_Abort+0x258>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01d      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a21      	ldr	r2, [pc, #132]	; (80084ec <HAL_DMA_Abort+0x25c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d018      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <HAL_DMA_Abort+0x260>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d013      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <HAL_DMA_Abort+0x264>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00e      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <HAL_DMA_Abort+0x268>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d009      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1b      	ldr	r2, [pc, #108]	; (80084fc <HAL_DMA_Abort+0x26c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d004      	beq.n	800849e <HAL_DMA_Abort+0x20e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a19      	ldr	r2, [pc, #100]	; (8008500 <HAL_DMA_Abort+0x270>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d132      	bne.n	8008504 <HAL_DMA_Abort+0x274>
 800849e:	2301      	movs	r3, #1
 80084a0:	e031      	b.n	8008506 <HAL_DMA_Abort+0x276>
 80084a2:	bf00      	nop
 80084a4:	40020010 	.word	0x40020010
 80084a8:	40020028 	.word	0x40020028
 80084ac:	40020040 	.word	0x40020040
 80084b0:	40020058 	.word	0x40020058
 80084b4:	40020070 	.word	0x40020070
 80084b8:	40020088 	.word	0x40020088
 80084bc:	400200a0 	.word	0x400200a0
 80084c0:	400200b8 	.word	0x400200b8
 80084c4:	40020410 	.word	0x40020410
 80084c8:	40020428 	.word	0x40020428
 80084cc:	40020440 	.word	0x40020440
 80084d0:	40020458 	.word	0x40020458
 80084d4:	40020470 	.word	0x40020470
 80084d8:	40020488 	.word	0x40020488
 80084dc:	400204a0 	.word	0x400204a0
 80084e0:	400204b8 	.word	0x400204b8
 80084e4:	58025408 	.word	0x58025408
 80084e8:	5802541c 	.word	0x5802541c
 80084ec:	58025430 	.word	0x58025430
 80084f0:	58025444 	.word	0x58025444
 80084f4:	58025458 	.word	0x58025458
 80084f8:	5802546c 	.word	0x5802546c
 80084fc:	58025480 	.word	0x58025480
 8008500:	58025494 	.word	0x58025494
 8008504:	2300      	movs	r3, #0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008518:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a6d      	ldr	r2, [pc, #436]	; (80086d4 <HAL_DMA_Abort+0x444>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d04a      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a6b      	ldr	r2, [pc, #428]	; (80086d8 <HAL_DMA_Abort+0x448>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d045      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a6a      	ldr	r2, [pc, #424]	; (80086dc <HAL_DMA_Abort+0x44c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d040      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a68      	ldr	r2, [pc, #416]	; (80086e0 <HAL_DMA_Abort+0x450>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d03b      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a67      	ldr	r2, [pc, #412]	; (80086e4 <HAL_DMA_Abort+0x454>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d036      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a65      	ldr	r2, [pc, #404]	; (80086e8 <HAL_DMA_Abort+0x458>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d031      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a64      	ldr	r2, [pc, #400]	; (80086ec <HAL_DMA_Abort+0x45c>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d02c      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a62      	ldr	r2, [pc, #392]	; (80086f0 <HAL_DMA_Abort+0x460>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d027      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a61      	ldr	r2, [pc, #388]	; (80086f4 <HAL_DMA_Abort+0x464>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d022      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a5f      	ldr	r2, [pc, #380]	; (80086f8 <HAL_DMA_Abort+0x468>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d01d      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a5e      	ldr	r2, [pc, #376]	; (80086fc <HAL_DMA_Abort+0x46c>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d018      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5c      	ldr	r2, [pc, #368]	; (8008700 <HAL_DMA_Abort+0x470>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a5b      	ldr	r2, [pc, #364]	; (8008704 <HAL_DMA_Abort+0x474>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00e      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a59      	ldr	r2, [pc, #356]	; (8008708 <HAL_DMA_Abort+0x478>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a58      	ldr	r2, [pc, #352]	; (800870c <HAL_DMA_Abort+0x47c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d004      	beq.n	80085ba <HAL_DMA_Abort+0x32a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a56      	ldr	r2, [pc, #344]	; (8008710 <HAL_DMA_Abort+0x480>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d108      	bne.n	80085cc <HAL_DMA_Abort+0x33c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0201 	bic.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e007      	b.n	80085dc <HAL_DMA_Abort+0x34c>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0201 	bic.w	r2, r2, #1
 80085da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80085dc:	e013      	b.n	8008606 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085de:	f7fe fd3b 	bl	8007058 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	d90c      	bls.n	8008606 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2203      	movs	r2, #3
 80085f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e12d      	b.n	8008862 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e5      	bne.n	80085de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a2f      	ldr	r2, [pc, #188]	; (80086d4 <HAL_DMA_Abort+0x444>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d04a      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a2d      	ldr	r2, [pc, #180]	; (80086d8 <HAL_DMA_Abort+0x448>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d045      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a2c      	ldr	r2, [pc, #176]	; (80086dc <HAL_DMA_Abort+0x44c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d040      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a2a      	ldr	r2, [pc, #168]	; (80086e0 <HAL_DMA_Abort+0x450>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d03b      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a29      	ldr	r2, [pc, #164]	; (80086e4 <HAL_DMA_Abort+0x454>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d036      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a27      	ldr	r2, [pc, #156]	; (80086e8 <HAL_DMA_Abort+0x458>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d031      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a26      	ldr	r2, [pc, #152]	; (80086ec <HAL_DMA_Abort+0x45c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d02c      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a24      	ldr	r2, [pc, #144]	; (80086f0 <HAL_DMA_Abort+0x460>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d027      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a23      	ldr	r2, [pc, #140]	; (80086f4 <HAL_DMA_Abort+0x464>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d022      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a21      	ldr	r2, [pc, #132]	; (80086f8 <HAL_DMA_Abort+0x468>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01d      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a20      	ldr	r2, [pc, #128]	; (80086fc <HAL_DMA_Abort+0x46c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d018      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <HAL_DMA_Abort+0x470>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <HAL_DMA_Abort+0x474>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00e      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1b      	ldr	r2, [pc, #108]	; (8008708 <HAL_DMA_Abort+0x478>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1a      	ldr	r2, [pc, #104]	; (800870c <HAL_DMA_Abort+0x47c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_DMA_Abort+0x422>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <HAL_DMA_Abort+0x480>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d101      	bne.n	80086b6 <HAL_DMA_Abort+0x426>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <HAL_DMA_Abort+0x428>
 80086b6:	2300      	movs	r3, #0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02b      	beq.n	8008714 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c6:	f003 031f 	and.w	r3, r3, #31
 80086ca:	223f      	movs	r2, #63	; 0x3f
 80086cc:	409a      	lsls	r2, r3
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	609a      	str	r2, [r3, #8]
 80086d2:	e02a      	b.n	800872a <HAL_DMA_Abort+0x49a>
 80086d4:	40020010 	.word	0x40020010
 80086d8:	40020028 	.word	0x40020028
 80086dc:	40020040 	.word	0x40020040
 80086e0:	40020058 	.word	0x40020058
 80086e4:	40020070 	.word	0x40020070
 80086e8:	40020088 	.word	0x40020088
 80086ec:	400200a0 	.word	0x400200a0
 80086f0:	400200b8 	.word	0x400200b8
 80086f4:	40020410 	.word	0x40020410
 80086f8:	40020428 	.word	0x40020428
 80086fc:	40020440 	.word	0x40020440
 8008700:	40020458 	.word	0x40020458
 8008704:	40020470 	.word	0x40020470
 8008708:	40020488 	.word	0x40020488
 800870c:	400204a0 	.word	0x400204a0
 8008710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008718:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2201      	movs	r2, #1
 8008724:	409a      	lsls	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a4f      	ldr	r2, [pc, #316]	; (800886c <HAL_DMA_Abort+0x5dc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d072      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a4d      	ldr	r2, [pc, #308]	; (8008870 <HAL_DMA_Abort+0x5e0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d06d      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4c      	ldr	r2, [pc, #304]	; (8008874 <HAL_DMA_Abort+0x5e4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d068      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a4a      	ldr	r2, [pc, #296]	; (8008878 <HAL_DMA_Abort+0x5e8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d063      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a49      	ldr	r2, [pc, #292]	; (800887c <HAL_DMA_Abort+0x5ec>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d05e      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a47      	ldr	r2, [pc, #284]	; (8008880 <HAL_DMA_Abort+0x5f0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d059      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a46      	ldr	r2, [pc, #280]	; (8008884 <HAL_DMA_Abort+0x5f4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d054      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a44      	ldr	r2, [pc, #272]	; (8008888 <HAL_DMA_Abort+0x5f8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d04f      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a43      	ldr	r2, [pc, #268]	; (800888c <HAL_DMA_Abort+0x5fc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d04a      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a41      	ldr	r2, [pc, #260]	; (8008890 <HAL_DMA_Abort+0x600>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d045      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a40      	ldr	r2, [pc, #256]	; (8008894 <HAL_DMA_Abort+0x604>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d040      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a3e      	ldr	r2, [pc, #248]	; (8008898 <HAL_DMA_Abort+0x608>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d03b      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a3d      	ldr	r2, [pc, #244]	; (800889c <HAL_DMA_Abort+0x60c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d036      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a3b      	ldr	r2, [pc, #236]	; (80088a0 <HAL_DMA_Abort+0x610>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d031      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3a      	ldr	r2, [pc, #232]	; (80088a4 <HAL_DMA_Abort+0x614>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d02c      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a38      	ldr	r2, [pc, #224]	; (80088a8 <HAL_DMA_Abort+0x618>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d027      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a37      	ldr	r2, [pc, #220]	; (80088ac <HAL_DMA_Abort+0x61c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d022      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a35      	ldr	r2, [pc, #212]	; (80088b0 <HAL_DMA_Abort+0x620>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d01d      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a34      	ldr	r2, [pc, #208]	; (80088b4 <HAL_DMA_Abort+0x624>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d018      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <HAL_DMA_Abort+0x628>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d013      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a31      	ldr	r2, [pc, #196]	; (80088bc <HAL_DMA_Abort+0x62c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00e      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a2f      	ldr	r2, [pc, #188]	; (80088c0 <HAL_DMA_Abort+0x630>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d009      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a2e      	ldr	r2, [pc, #184]	; (80088c4 <HAL_DMA_Abort+0x634>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d004      	beq.n	800881a <HAL_DMA_Abort+0x58a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a2c      	ldr	r2, [pc, #176]	; (80088c8 <HAL_DMA_Abort+0x638>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d101      	bne.n	800881e <HAL_DMA_Abort+0x58e>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <HAL_DMA_Abort+0x590>
 800881e:	2300      	movs	r3, #0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d015      	beq.n	8008850 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800882c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00c      	beq.n	8008850 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008844:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800884e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40020010 	.word	0x40020010
 8008870:	40020028 	.word	0x40020028
 8008874:	40020040 	.word	0x40020040
 8008878:	40020058 	.word	0x40020058
 800887c:	40020070 	.word	0x40020070
 8008880:	40020088 	.word	0x40020088
 8008884:	400200a0 	.word	0x400200a0
 8008888:	400200b8 	.word	0x400200b8
 800888c:	40020410 	.word	0x40020410
 8008890:	40020428 	.word	0x40020428
 8008894:	40020440 	.word	0x40020440
 8008898:	40020458 	.word	0x40020458
 800889c:	40020470 	.word	0x40020470
 80088a0:	40020488 	.word	0x40020488
 80088a4:	400204a0 	.word	0x400204a0
 80088a8:	400204b8 	.word	0x400204b8
 80088ac:	58025408 	.word	0x58025408
 80088b0:	5802541c 	.word	0x5802541c
 80088b4:	58025430 	.word	0x58025430
 80088b8:	58025444 	.word	0x58025444
 80088bc:	58025458 	.word	0x58025458
 80088c0:	5802546c 	.word	0x5802546c
 80088c4:	58025480 	.word	0x58025480
 80088c8:	58025494 	.word	0x58025494

080088cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e237      	b.n	8008d4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d004      	beq.n	80088f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2280      	movs	r2, #128	; 0x80
 80088ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e22c      	b.n	8008d4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a5c      	ldr	r2, [pc, #368]	; (8008a6c <HAL_DMA_Abort_IT+0x1a0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d04a      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a5b      	ldr	r2, [pc, #364]	; (8008a70 <HAL_DMA_Abort_IT+0x1a4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d045      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a59      	ldr	r2, [pc, #356]	; (8008a74 <HAL_DMA_Abort_IT+0x1a8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d040      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a58      	ldr	r2, [pc, #352]	; (8008a78 <HAL_DMA_Abort_IT+0x1ac>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d03b      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a56      	ldr	r2, [pc, #344]	; (8008a7c <HAL_DMA_Abort_IT+0x1b0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d036      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a55      	ldr	r2, [pc, #340]	; (8008a80 <HAL_DMA_Abort_IT+0x1b4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d031      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a53      	ldr	r2, [pc, #332]	; (8008a84 <HAL_DMA_Abort_IT+0x1b8>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d02c      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a52      	ldr	r2, [pc, #328]	; (8008a88 <HAL_DMA_Abort_IT+0x1bc>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d027      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a50      	ldr	r2, [pc, #320]	; (8008a8c <HAL_DMA_Abort_IT+0x1c0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d022      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a4f      	ldr	r2, [pc, #316]	; (8008a90 <HAL_DMA_Abort_IT+0x1c4>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d01d      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a4d      	ldr	r2, [pc, #308]	; (8008a94 <HAL_DMA_Abort_IT+0x1c8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d018      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a4c      	ldr	r2, [pc, #304]	; (8008a98 <HAL_DMA_Abort_IT+0x1cc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d013      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a4a      	ldr	r2, [pc, #296]	; (8008a9c <HAL_DMA_Abort_IT+0x1d0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00e      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a49      	ldr	r2, [pc, #292]	; (8008aa0 <HAL_DMA_Abort_IT+0x1d4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d009      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a47      	ldr	r2, [pc, #284]	; (8008aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_DMA_Abort_IT+0xc8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a46      	ldr	r2, [pc, #280]	; (8008aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d101      	bne.n	8008998 <HAL_DMA_Abort_IT+0xcc>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <HAL_DMA_Abort_IT+0xce>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8086 	beq.w	8008aac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2204      	movs	r2, #4
 80089a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a2f      	ldr	r2, [pc, #188]	; (8008a6c <HAL_DMA_Abort_IT+0x1a0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d04a      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a2e      	ldr	r2, [pc, #184]	; (8008a70 <HAL_DMA_Abort_IT+0x1a4>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d045      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2c      	ldr	r2, [pc, #176]	; (8008a74 <HAL_DMA_Abort_IT+0x1a8>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d040      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a2b      	ldr	r2, [pc, #172]	; (8008a78 <HAL_DMA_Abort_IT+0x1ac>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d03b      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a29      	ldr	r2, [pc, #164]	; (8008a7c <HAL_DMA_Abort_IT+0x1b0>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d036      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a28      	ldr	r2, [pc, #160]	; (8008a80 <HAL_DMA_Abort_IT+0x1b4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d031      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a26      	ldr	r2, [pc, #152]	; (8008a84 <HAL_DMA_Abort_IT+0x1b8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d02c      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <HAL_DMA_Abort_IT+0x1bc>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d027      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a23      	ldr	r2, [pc, #140]	; (8008a8c <HAL_DMA_Abort_IT+0x1c0>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d022      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <HAL_DMA_Abort_IT+0x1c4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d01d      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a20      	ldr	r2, [pc, #128]	; (8008a94 <HAL_DMA_Abort_IT+0x1c8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d018      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a1f      	ldr	r2, [pc, #124]	; (8008a98 <HAL_DMA_Abort_IT+0x1cc>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d013      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a1d      	ldr	r2, [pc, #116]	; (8008a9c <HAL_DMA_Abort_IT+0x1d0>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00e      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a1c      	ldr	r2, [pc, #112]	; (8008aa0 <HAL_DMA_Abort_IT+0x1d4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d009      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1a      	ldr	r2, [pc, #104]	; (8008aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d004      	beq.n	8008a48 <HAL_DMA_Abort_IT+0x17c>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d108      	bne.n	8008a5a <HAL_DMA_Abort_IT+0x18e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0201 	bic.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	e178      	b.n	8008d4c <HAL_DMA_Abort_IT+0x480>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0201 	bic.w	r2, r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e16f      	b.n	8008d4c <HAL_DMA_Abort_IT+0x480>
 8008a6c:	40020010 	.word	0x40020010
 8008a70:	40020028 	.word	0x40020028
 8008a74:	40020040 	.word	0x40020040
 8008a78:	40020058 	.word	0x40020058
 8008a7c:	40020070 	.word	0x40020070
 8008a80:	40020088 	.word	0x40020088
 8008a84:	400200a0 	.word	0x400200a0
 8008a88:	400200b8 	.word	0x400200b8
 8008a8c:	40020410 	.word	0x40020410
 8008a90:	40020428 	.word	0x40020428
 8008a94:	40020440 	.word	0x40020440
 8008a98:	40020458 	.word	0x40020458
 8008a9c:	40020470 	.word	0x40020470
 8008aa0:	40020488 	.word	0x40020488
 8008aa4:	400204a0 	.word	0x400204a0
 8008aa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 020e 	bic.w	r2, r2, #14
 8008aba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a6c      	ldr	r2, [pc, #432]	; (8008c74 <HAL_DMA_Abort_IT+0x3a8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d04a      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a6b      	ldr	r2, [pc, #428]	; (8008c78 <HAL_DMA_Abort_IT+0x3ac>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d045      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a69      	ldr	r2, [pc, #420]	; (8008c7c <HAL_DMA_Abort_IT+0x3b0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d040      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a68      	ldr	r2, [pc, #416]	; (8008c80 <HAL_DMA_Abort_IT+0x3b4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d03b      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a66      	ldr	r2, [pc, #408]	; (8008c84 <HAL_DMA_Abort_IT+0x3b8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d036      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a65      	ldr	r2, [pc, #404]	; (8008c88 <HAL_DMA_Abort_IT+0x3bc>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d031      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a63      	ldr	r2, [pc, #396]	; (8008c8c <HAL_DMA_Abort_IT+0x3c0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d02c      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a62      	ldr	r2, [pc, #392]	; (8008c90 <HAL_DMA_Abort_IT+0x3c4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d027      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a60      	ldr	r2, [pc, #384]	; (8008c94 <HAL_DMA_Abort_IT+0x3c8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d022      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a5f      	ldr	r2, [pc, #380]	; (8008c98 <HAL_DMA_Abort_IT+0x3cc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d01d      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a5d      	ldr	r2, [pc, #372]	; (8008c9c <HAL_DMA_Abort_IT+0x3d0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d018      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a5c      	ldr	r2, [pc, #368]	; (8008ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d013      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a5a      	ldr	r2, [pc, #360]	; (8008ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d00e      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a59      	ldr	r2, [pc, #356]	; (8008ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d009      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a57      	ldr	r2, [pc, #348]	; (8008cac <HAL_DMA_Abort_IT+0x3e0>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d004      	beq.n	8008b5c <HAL_DMA_Abort_IT+0x290>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a56      	ldr	r2, [pc, #344]	; (8008cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d108      	bne.n	8008b6e <HAL_DMA_Abort_IT+0x2a2>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 0201 	bic.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	e007      	b.n	8008b7e <HAL_DMA_Abort_IT+0x2b2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0201 	bic.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a3c      	ldr	r2, [pc, #240]	; (8008c74 <HAL_DMA_Abort_IT+0x3a8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d072      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a3a      	ldr	r2, [pc, #232]	; (8008c78 <HAL_DMA_Abort_IT+0x3ac>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d06d      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a39      	ldr	r2, [pc, #228]	; (8008c7c <HAL_DMA_Abort_IT+0x3b0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d068      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a37      	ldr	r2, [pc, #220]	; (8008c80 <HAL_DMA_Abort_IT+0x3b4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d063      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a36      	ldr	r2, [pc, #216]	; (8008c84 <HAL_DMA_Abort_IT+0x3b8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d05e      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a34      	ldr	r2, [pc, #208]	; (8008c88 <HAL_DMA_Abort_IT+0x3bc>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d059      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a33      	ldr	r2, [pc, #204]	; (8008c8c <HAL_DMA_Abort_IT+0x3c0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d054      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a31      	ldr	r2, [pc, #196]	; (8008c90 <HAL_DMA_Abort_IT+0x3c4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d04f      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a30      	ldr	r2, [pc, #192]	; (8008c94 <HAL_DMA_Abort_IT+0x3c8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d04a      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2e      	ldr	r2, [pc, #184]	; (8008c98 <HAL_DMA_Abort_IT+0x3cc>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d045      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a2d      	ldr	r2, [pc, #180]	; (8008c9c <HAL_DMA_Abort_IT+0x3d0>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d040      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a2b      	ldr	r2, [pc, #172]	; (8008ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d03b      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d036      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a28      	ldr	r2, [pc, #160]	; (8008ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d031      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a27      	ldr	r2, [pc, #156]	; (8008cac <HAL_DMA_Abort_IT+0x3e0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d02c      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a25      	ldr	r2, [pc, #148]	; (8008cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d027      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a24      	ldr	r2, [pc, #144]	; (8008cb4 <HAL_DMA_Abort_IT+0x3e8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d022      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a22      	ldr	r2, [pc, #136]	; (8008cb8 <HAL_DMA_Abort_IT+0x3ec>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01d      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <HAL_DMA_Abort_IT+0x3f0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d018      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <HAL_DMA_Abort_IT+0x3f4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1e      	ldr	r2, [pc, #120]	; (8008cc4 <HAL_DMA_Abort_IT+0x3f8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00e      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1c      	ldr	r2, [pc, #112]	; (8008cc8 <HAL_DMA_Abort_IT+0x3fc>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d009      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <HAL_DMA_Abort_IT+0x400>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d004      	beq.n	8008c6e <HAL_DMA_Abort_IT+0x3a2>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a19      	ldr	r2, [pc, #100]	; (8008cd0 <HAL_DMA_Abort_IT+0x404>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d132      	bne.n	8008cd4 <HAL_DMA_Abort_IT+0x408>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e031      	b.n	8008cd6 <HAL_DMA_Abort_IT+0x40a>
 8008c72:	bf00      	nop
 8008c74:	40020010 	.word	0x40020010
 8008c78:	40020028 	.word	0x40020028
 8008c7c:	40020040 	.word	0x40020040
 8008c80:	40020058 	.word	0x40020058
 8008c84:	40020070 	.word	0x40020070
 8008c88:	40020088 	.word	0x40020088
 8008c8c:	400200a0 	.word	0x400200a0
 8008c90:	400200b8 	.word	0x400200b8
 8008c94:	40020410 	.word	0x40020410
 8008c98:	40020428 	.word	0x40020428
 8008c9c:	40020440 	.word	0x40020440
 8008ca0:	40020458 	.word	0x40020458
 8008ca4:	40020470 	.word	0x40020470
 8008ca8:	40020488 	.word	0x40020488
 8008cac:	400204a0 	.word	0x400204a0
 8008cb0:	400204b8 	.word	0x400204b8
 8008cb4:	58025408 	.word	0x58025408
 8008cb8:	5802541c 	.word	0x5802541c
 8008cbc:	58025430 	.word	0x58025430
 8008cc0:	58025444 	.word	0x58025444
 8008cc4:	58025458 	.word	0x58025458
 8008cc8:	5802546c 	.word	0x5802546c
 8008ccc:	58025480 	.word	0x58025480
 8008cd0:	58025494 	.word	0x58025494
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d028      	beq.n	8008d2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ce8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf4:	f003 031f 	and.w	r3, r3, #31
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	409a      	lsls	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop

08008d58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d64:	4b67      	ldr	r3, [pc, #412]	; (8008f04 <HAL_DMA_IRQHandler+0x1ac>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a67      	ldr	r2, [pc, #412]	; (8008f08 <HAL_DMA_IRQHandler+0x1b0>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	0a9b      	lsrs	r3, r3, #10
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a5f      	ldr	r2, [pc, #380]	; (8008f0c <HAL_DMA_IRQHandler+0x1b4>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d04a      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a5d      	ldr	r2, [pc, #372]	; (8008f10 <HAL_DMA_IRQHandler+0x1b8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d045      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a5c      	ldr	r2, [pc, #368]	; (8008f14 <HAL_DMA_IRQHandler+0x1bc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d040      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a5a      	ldr	r2, [pc, #360]	; (8008f18 <HAL_DMA_IRQHandler+0x1c0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d03b      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a59      	ldr	r2, [pc, #356]	; (8008f1c <HAL_DMA_IRQHandler+0x1c4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d036      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a57      	ldr	r2, [pc, #348]	; (8008f20 <HAL_DMA_IRQHandler+0x1c8>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d031      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a56      	ldr	r2, [pc, #344]	; (8008f24 <HAL_DMA_IRQHandler+0x1cc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d02c      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a54      	ldr	r2, [pc, #336]	; (8008f28 <HAL_DMA_IRQHandler+0x1d0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d027      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a53      	ldr	r2, [pc, #332]	; (8008f2c <HAL_DMA_IRQHandler+0x1d4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d022      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a51      	ldr	r2, [pc, #324]	; (8008f30 <HAL_DMA_IRQHandler+0x1d8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d01d      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a50      	ldr	r2, [pc, #320]	; (8008f34 <HAL_DMA_IRQHandler+0x1dc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d018      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a4e      	ldr	r2, [pc, #312]	; (8008f38 <HAL_DMA_IRQHandler+0x1e0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a4d      	ldr	r2, [pc, #308]	; (8008f3c <HAL_DMA_IRQHandler+0x1e4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00e      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a4b      	ldr	r2, [pc, #300]	; (8008f40 <HAL_DMA_IRQHandler+0x1e8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d009      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a4a      	ldr	r2, [pc, #296]	; (8008f44 <HAL_DMA_IRQHandler+0x1ec>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d004      	beq.n	8008e2a <HAL_DMA_IRQHandler+0xd2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a48      	ldr	r2, [pc, #288]	; (8008f48 <HAL_DMA_IRQHandler+0x1f0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d101      	bne.n	8008e2e <HAL_DMA_IRQHandler+0xd6>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <HAL_DMA_IRQHandler+0xd8>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 842b 	beq.w	800968c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2208      	movs	r2, #8
 8008e40:	409a      	lsls	r2, r3
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	4013      	ands	r3, r2
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 80a2 	beq.w	8008f90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a2e      	ldr	r2, [pc, #184]	; (8008f0c <HAL_DMA_IRQHandler+0x1b4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d04a      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a2d      	ldr	r2, [pc, #180]	; (8008f10 <HAL_DMA_IRQHandler+0x1b8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d045      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <HAL_DMA_IRQHandler+0x1bc>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d040      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a2a      	ldr	r2, [pc, #168]	; (8008f18 <HAL_DMA_IRQHandler+0x1c0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d03b      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a28      	ldr	r2, [pc, #160]	; (8008f1c <HAL_DMA_IRQHandler+0x1c4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d036      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a27      	ldr	r2, [pc, #156]	; (8008f20 <HAL_DMA_IRQHandler+0x1c8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d031      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a25      	ldr	r2, [pc, #148]	; (8008f24 <HAL_DMA_IRQHandler+0x1cc>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d02c      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a24      	ldr	r2, [pc, #144]	; (8008f28 <HAL_DMA_IRQHandler+0x1d0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d027      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a22      	ldr	r2, [pc, #136]	; (8008f2c <HAL_DMA_IRQHandler+0x1d4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d022      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a21      	ldr	r2, [pc, #132]	; (8008f30 <HAL_DMA_IRQHandler+0x1d8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d01d      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <HAL_DMA_IRQHandler+0x1dc>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d018      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <HAL_DMA_IRQHandler+0x1e0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d013      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a1c      	ldr	r2, [pc, #112]	; (8008f3c <HAL_DMA_IRQHandler+0x1e4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00e      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <HAL_DMA_IRQHandler+0x1e8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d009      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <HAL_DMA_IRQHandler+0x1ec>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <HAL_DMA_IRQHandler+0x194>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a18      	ldr	r2, [pc, #96]	; (8008f48 <HAL_DMA_IRQHandler+0x1f0>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d12f      	bne.n	8008f4c <HAL_DMA_IRQHandler+0x1f4>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bf14      	ite	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	2300      	moveq	r3, #0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	e02e      	b.n	8008f60 <HAL_DMA_IRQHandler+0x208>
 8008f02:	bf00      	nop
 8008f04:	24000230 	.word	0x24000230
 8008f08:	1b4e81b5 	.word	0x1b4e81b5
 8008f0c:	40020010 	.word	0x40020010
 8008f10:	40020028 	.word	0x40020028
 8008f14:	40020040 	.word	0x40020040
 8008f18:	40020058 	.word	0x40020058
 8008f1c:	40020070 	.word	0x40020070
 8008f20:	40020088 	.word	0x40020088
 8008f24:	400200a0 	.word	0x400200a0
 8008f28:	400200b8 	.word	0x400200b8
 8008f2c:	40020410 	.word	0x40020410
 8008f30:	40020428 	.word	0x40020428
 8008f34:	40020440 	.word	0x40020440
 8008f38:	40020458 	.word	0x40020458
 8008f3c:	40020470 	.word	0x40020470
 8008f40:	40020488 	.word	0x40020488
 8008f44:	400204a0 	.word	0x400204a0
 8008f48:	400204b8 	.word	0x400204b8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf14      	ite	ne
 8008f5a:	2301      	movne	r3, #1
 8008f5c:	2300      	moveq	r3, #0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d015      	beq.n	8008f90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0204 	bic.w	r2, r2, #4
 8008f72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	409a      	lsls	r2, r3
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f88:	f043 0201 	orr.w	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d06e      	beq.n	8009084 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a69      	ldr	r2, [pc, #420]	; (8009150 <HAL_DMA_IRQHandler+0x3f8>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d04a      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a67      	ldr	r2, [pc, #412]	; (8009154 <HAL_DMA_IRQHandler+0x3fc>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d045      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a66      	ldr	r2, [pc, #408]	; (8009158 <HAL_DMA_IRQHandler+0x400>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d040      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a64      	ldr	r2, [pc, #400]	; (800915c <HAL_DMA_IRQHandler+0x404>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d03b      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a63      	ldr	r2, [pc, #396]	; (8009160 <HAL_DMA_IRQHandler+0x408>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d036      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a61      	ldr	r2, [pc, #388]	; (8009164 <HAL_DMA_IRQHandler+0x40c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d031      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a60      	ldr	r2, [pc, #384]	; (8009168 <HAL_DMA_IRQHandler+0x410>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d02c      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a5e      	ldr	r2, [pc, #376]	; (800916c <HAL_DMA_IRQHandler+0x414>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d027      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a5d      	ldr	r2, [pc, #372]	; (8009170 <HAL_DMA_IRQHandler+0x418>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d022      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a5b      	ldr	r2, [pc, #364]	; (8009174 <HAL_DMA_IRQHandler+0x41c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d01d      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a5a      	ldr	r2, [pc, #360]	; (8009178 <HAL_DMA_IRQHandler+0x420>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d018      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a58      	ldr	r2, [pc, #352]	; (800917c <HAL_DMA_IRQHandler+0x424>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d013      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a57      	ldr	r2, [pc, #348]	; (8009180 <HAL_DMA_IRQHandler+0x428>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00e      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a55      	ldr	r2, [pc, #340]	; (8009184 <HAL_DMA_IRQHandler+0x42c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d009      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a54      	ldr	r2, [pc, #336]	; (8009188 <HAL_DMA_IRQHandler+0x430>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d004      	beq.n	8009046 <HAL_DMA_IRQHandler+0x2ee>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a52      	ldr	r2, [pc, #328]	; (800918c <HAL_DMA_IRQHandler+0x434>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d10a      	bne.n	800905c <HAL_DMA_IRQHandler+0x304>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009050:	2b00      	cmp	r3, #0
 8009052:	bf14      	ite	ne
 8009054:	2301      	movne	r3, #1
 8009056:	2300      	moveq	r3, #0
 8009058:	b2db      	uxtb	r3, r3
 800905a:	e003      	b.n	8009064 <HAL_DMA_IRQHandler+0x30c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2300      	movs	r3, #0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00d      	beq.n	8009084 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	2201      	movs	r2, #1
 8009072:	409a      	lsls	r2, r3
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	f043 0202 	orr.w	r2, r3, #2
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	2204      	movs	r2, #4
 800908e:	409a      	lsls	r2, r3
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	4013      	ands	r3, r2
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 808f 	beq.w	80091b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a2c      	ldr	r2, [pc, #176]	; (8009150 <HAL_DMA_IRQHandler+0x3f8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d04a      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a2a      	ldr	r2, [pc, #168]	; (8009154 <HAL_DMA_IRQHandler+0x3fc>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d045      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a29      	ldr	r2, [pc, #164]	; (8009158 <HAL_DMA_IRQHandler+0x400>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d040      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a27      	ldr	r2, [pc, #156]	; (800915c <HAL_DMA_IRQHandler+0x404>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d03b      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a26      	ldr	r2, [pc, #152]	; (8009160 <HAL_DMA_IRQHandler+0x408>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d036      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a24      	ldr	r2, [pc, #144]	; (8009164 <HAL_DMA_IRQHandler+0x40c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d031      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a23      	ldr	r2, [pc, #140]	; (8009168 <HAL_DMA_IRQHandler+0x410>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d02c      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a21      	ldr	r2, [pc, #132]	; (800916c <HAL_DMA_IRQHandler+0x414>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d027      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a20      	ldr	r2, [pc, #128]	; (8009170 <HAL_DMA_IRQHandler+0x418>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d022      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <HAL_DMA_IRQHandler+0x41c>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d01d      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a1d      	ldr	r2, [pc, #116]	; (8009178 <HAL_DMA_IRQHandler+0x420>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d018      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1b      	ldr	r2, [pc, #108]	; (800917c <HAL_DMA_IRQHandler+0x424>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d013      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a1a      	ldr	r2, [pc, #104]	; (8009180 <HAL_DMA_IRQHandler+0x428>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00e      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a18      	ldr	r2, [pc, #96]	; (8009184 <HAL_DMA_IRQHandler+0x42c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d009      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a17      	ldr	r2, [pc, #92]	; (8009188 <HAL_DMA_IRQHandler+0x430>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d004      	beq.n	800913a <HAL_DMA_IRQHandler+0x3e2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a15      	ldr	r2, [pc, #84]	; (800918c <HAL_DMA_IRQHandler+0x434>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d12a      	bne.n	8009190 <HAL_DMA_IRQHandler+0x438>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf14      	ite	ne
 8009148:	2301      	movne	r3, #1
 800914a:	2300      	moveq	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	e023      	b.n	8009198 <HAL_DMA_IRQHandler+0x440>
 8009150:	40020010 	.word	0x40020010
 8009154:	40020028 	.word	0x40020028
 8009158:	40020040 	.word	0x40020040
 800915c:	40020058 	.word	0x40020058
 8009160:	40020070 	.word	0x40020070
 8009164:	40020088 	.word	0x40020088
 8009168:	400200a0 	.word	0x400200a0
 800916c:	400200b8 	.word	0x400200b8
 8009170:	40020410 	.word	0x40020410
 8009174:	40020428 	.word	0x40020428
 8009178:	40020440 	.word	0x40020440
 800917c:	40020458 	.word	0x40020458
 8009180:	40020470 	.word	0x40020470
 8009184:	40020488 	.word	0x40020488
 8009188:	400204a0 	.word	0x400204a0
 800918c:	400204b8 	.word	0x400204b8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2300      	movs	r3, #0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00d      	beq.n	80091b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	2204      	movs	r2, #4
 80091a6:	409a      	lsls	r2, r3
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b0:	f043 0204 	orr.w	r2, r3, #4
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	2210      	movs	r2, #16
 80091c2:	409a      	lsls	r2, r3
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	4013      	ands	r3, r2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 80a6 	beq.w	800931a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a85      	ldr	r2, [pc, #532]	; (80093e8 <HAL_DMA_IRQHandler+0x690>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d04a      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a83      	ldr	r2, [pc, #524]	; (80093ec <HAL_DMA_IRQHandler+0x694>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d045      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a82      	ldr	r2, [pc, #520]	; (80093f0 <HAL_DMA_IRQHandler+0x698>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d040      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a80      	ldr	r2, [pc, #512]	; (80093f4 <HAL_DMA_IRQHandler+0x69c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d03b      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a7f      	ldr	r2, [pc, #508]	; (80093f8 <HAL_DMA_IRQHandler+0x6a0>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d036      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a7d      	ldr	r2, [pc, #500]	; (80093fc <HAL_DMA_IRQHandler+0x6a4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d031      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a7c      	ldr	r2, [pc, #496]	; (8009400 <HAL_DMA_IRQHandler+0x6a8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d02c      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a7a      	ldr	r2, [pc, #488]	; (8009404 <HAL_DMA_IRQHandler+0x6ac>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d027      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a79      	ldr	r2, [pc, #484]	; (8009408 <HAL_DMA_IRQHandler+0x6b0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d022      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a77      	ldr	r2, [pc, #476]	; (800940c <HAL_DMA_IRQHandler+0x6b4>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d01d      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a76      	ldr	r2, [pc, #472]	; (8009410 <HAL_DMA_IRQHandler+0x6b8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d018      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a74      	ldr	r2, [pc, #464]	; (8009414 <HAL_DMA_IRQHandler+0x6bc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d013      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a73      	ldr	r2, [pc, #460]	; (8009418 <HAL_DMA_IRQHandler+0x6c0>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00e      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a71      	ldr	r2, [pc, #452]	; (800941c <HAL_DMA_IRQHandler+0x6c4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d009      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a70      	ldr	r2, [pc, #448]	; (8009420 <HAL_DMA_IRQHandler+0x6c8>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d004      	beq.n	800926e <HAL_DMA_IRQHandler+0x516>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a6e      	ldr	r2, [pc, #440]	; (8009424 <HAL_DMA_IRQHandler+0x6cc>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d10a      	bne.n	8009284 <HAL_DMA_IRQHandler+0x52c>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	bf14      	ite	ne
 800927c:	2301      	movne	r3, #1
 800927e:	2300      	moveq	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	e009      	b.n	8009298 <HAL_DMA_IRQHandler+0x540>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0304 	and.w	r3, r3, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf14      	ite	ne
 8009292:	2301      	movne	r3, #1
 8009294:	2300      	moveq	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d03e      	beq.n	800931a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a0:	f003 031f 	and.w	r3, r3, #31
 80092a4:	2210      	movs	r2, #16
 80092a6:	409a      	lsls	r2, r3
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d018      	beq.n	80092ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d108      	bne.n	80092da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d024      	beq.n	800931a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
 80092d8:	e01f      	b.n	800931a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d01b      	beq.n	800931a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
 80092ea:	e016      	b.n	800931a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d107      	bne.n	800930a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0208 	bic.w	r2, r2, #8
 8009308:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931e:	f003 031f 	and.w	r3, r3, #31
 8009322:	2220      	movs	r2, #32
 8009324:	409a      	lsls	r2, r3
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	4013      	ands	r3, r2
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8110 	beq.w	8009550 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a2c      	ldr	r2, [pc, #176]	; (80093e8 <HAL_DMA_IRQHandler+0x690>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d04a      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a2b      	ldr	r2, [pc, #172]	; (80093ec <HAL_DMA_IRQHandler+0x694>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d045      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a29      	ldr	r2, [pc, #164]	; (80093f0 <HAL_DMA_IRQHandler+0x698>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d040      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a28      	ldr	r2, [pc, #160]	; (80093f4 <HAL_DMA_IRQHandler+0x69c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d03b      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a26      	ldr	r2, [pc, #152]	; (80093f8 <HAL_DMA_IRQHandler+0x6a0>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d036      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a25      	ldr	r2, [pc, #148]	; (80093fc <HAL_DMA_IRQHandler+0x6a4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d031      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a23      	ldr	r2, [pc, #140]	; (8009400 <HAL_DMA_IRQHandler+0x6a8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d02c      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a22      	ldr	r2, [pc, #136]	; (8009404 <HAL_DMA_IRQHandler+0x6ac>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d027      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a20      	ldr	r2, [pc, #128]	; (8009408 <HAL_DMA_IRQHandler+0x6b0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d022      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a1f      	ldr	r2, [pc, #124]	; (800940c <HAL_DMA_IRQHandler+0x6b4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d01d      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1d      	ldr	r2, [pc, #116]	; (8009410 <HAL_DMA_IRQHandler+0x6b8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d018      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a1c      	ldr	r2, [pc, #112]	; (8009414 <HAL_DMA_IRQHandler+0x6bc>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d013      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1a      	ldr	r2, [pc, #104]	; (8009418 <HAL_DMA_IRQHandler+0x6c0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00e      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a19      	ldr	r2, [pc, #100]	; (800941c <HAL_DMA_IRQHandler+0x6c4>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d009      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a17      	ldr	r2, [pc, #92]	; (8009420 <HAL_DMA_IRQHandler+0x6c8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <HAL_DMA_IRQHandler+0x678>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a16      	ldr	r2, [pc, #88]	; (8009424 <HAL_DMA_IRQHandler+0x6cc>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d12b      	bne.n	8009428 <HAL_DMA_IRQHandler+0x6d0>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bf14      	ite	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	2300      	moveq	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	e02a      	b.n	800943c <HAL_DMA_IRQHandler+0x6e4>
 80093e6:	bf00      	nop
 80093e8:	40020010 	.word	0x40020010
 80093ec:	40020028 	.word	0x40020028
 80093f0:	40020040 	.word	0x40020040
 80093f4:	40020058 	.word	0x40020058
 80093f8:	40020070 	.word	0x40020070
 80093fc:	40020088 	.word	0x40020088
 8009400:	400200a0 	.word	0x400200a0
 8009404:	400200b8 	.word	0x400200b8
 8009408:	40020410 	.word	0x40020410
 800940c:	40020428 	.word	0x40020428
 8009410:	40020440 	.word	0x40020440
 8009414:	40020458 	.word	0x40020458
 8009418:	40020470 	.word	0x40020470
 800941c:	40020488 	.word	0x40020488
 8009420:	400204a0 	.word	0x400204a0
 8009424:	400204b8 	.word	0x400204b8
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	bf14      	ite	ne
 8009436:	2301      	movne	r3, #1
 8009438:	2300      	moveq	r3, #0
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 8087 	beq.w	8009550 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009446:	f003 031f 	and.w	r3, r3, #31
 800944a:	2220      	movs	r2, #32
 800944c:	409a      	lsls	r2, r3
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b04      	cmp	r3, #4
 800945c:	d139      	bne.n	80094d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0216 	bic.w	r2, r2, #22
 800946c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	695a      	ldr	r2, [r3, #20]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800947c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	2b00      	cmp	r3, #0
 8009484:	d103      	bne.n	800948e <HAL_DMA_IRQHandler+0x736>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0208 	bic.w	r2, r2, #8
 800949c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a2:	f003 031f 	and.w	r3, r3, #31
 80094a6:	223f      	movs	r2, #63	; 0x3f
 80094a8:	409a      	lsls	r2, r3
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 834a 	beq.w	8009b5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	4798      	blx	r3
          }
          return;
 80094d0:	e344      	b.n	8009b5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d018      	beq.n	8009512 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d108      	bne.n	8009500 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d02c      	beq.n	8009550 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
 80094fe:	e027      	b.n	8009550 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d023      	beq.n	8009550 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
 8009510:	e01e      	b.n	8009550 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10f      	bne.n	8009540 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f022 0210 	bic.w	r2, r2, #16
 800952e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 8306 	beq.w	8009b66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 8088 	beq.w	8009678 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2204      	movs	r2, #4
 800956c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a7a      	ldr	r2, [pc, #488]	; (8009760 <HAL_DMA_IRQHandler+0xa08>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d04a      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a79      	ldr	r2, [pc, #484]	; (8009764 <HAL_DMA_IRQHandler+0xa0c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d045      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a77      	ldr	r2, [pc, #476]	; (8009768 <HAL_DMA_IRQHandler+0xa10>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d040      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a76      	ldr	r2, [pc, #472]	; (800976c <HAL_DMA_IRQHandler+0xa14>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d03b      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a74      	ldr	r2, [pc, #464]	; (8009770 <HAL_DMA_IRQHandler+0xa18>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d036      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a73      	ldr	r2, [pc, #460]	; (8009774 <HAL_DMA_IRQHandler+0xa1c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d031      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a71      	ldr	r2, [pc, #452]	; (8009778 <HAL_DMA_IRQHandler+0xa20>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d02c      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a70      	ldr	r2, [pc, #448]	; (800977c <HAL_DMA_IRQHandler+0xa24>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d027      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a6e      	ldr	r2, [pc, #440]	; (8009780 <HAL_DMA_IRQHandler+0xa28>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d022      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a6d      	ldr	r2, [pc, #436]	; (8009784 <HAL_DMA_IRQHandler+0xa2c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d01d      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a6b      	ldr	r2, [pc, #428]	; (8009788 <HAL_DMA_IRQHandler+0xa30>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d018      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a6a      	ldr	r2, [pc, #424]	; (800978c <HAL_DMA_IRQHandler+0xa34>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d013      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a68      	ldr	r2, [pc, #416]	; (8009790 <HAL_DMA_IRQHandler+0xa38>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00e      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a67      	ldr	r2, [pc, #412]	; (8009794 <HAL_DMA_IRQHandler+0xa3c>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d009      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a65      	ldr	r2, [pc, #404]	; (8009798 <HAL_DMA_IRQHandler+0xa40>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d004      	beq.n	8009610 <HAL_DMA_IRQHandler+0x8b8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a64      	ldr	r2, [pc, #400]	; (800979c <HAL_DMA_IRQHandler+0xa44>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d108      	bne.n	8009622 <HAL_DMA_IRQHandler+0x8ca>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0201 	bic.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e007      	b.n	8009632 <HAL_DMA_IRQHandler+0x8da>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0201 	bic.w	r2, r2, #1
 8009630:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800963a:	429a      	cmp	r2, r3
 800963c:	d307      	bcc.n	800964e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f2      	bne.n	8009632 <HAL_DMA_IRQHandler+0x8da>
 800964c:	e000      	b.n	8009650 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800964e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2203      	movs	r2, #3
 8009662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009666:	e003      	b.n	8009670 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8272 	beq.w	8009b66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
 800968a:	e26c      	b.n	8009b66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a43      	ldr	r2, [pc, #268]	; (80097a0 <HAL_DMA_IRQHandler+0xa48>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d022      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a42      	ldr	r2, [pc, #264]	; (80097a4 <HAL_DMA_IRQHandler+0xa4c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d01d      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a40      	ldr	r2, [pc, #256]	; (80097a8 <HAL_DMA_IRQHandler+0xa50>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d018      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a3f      	ldr	r2, [pc, #252]	; (80097ac <HAL_DMA_IRQHandler+0xa54>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d013      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a3d      	ldr	r2, [pc, #244]	; (80097b0 <HAL_DMA_IRQHandler+0xa58>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00e      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a3c      	ldr	r2, [pc, #240]	; (80097b4 <HAL_DMA_IRQHandler+0xa5c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d009      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a3a      	ldr	r2, [pc, #232]	; (80097b8 <HAL_DMA_IRQHandler+0xa60>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d004      	beq.n	80096dc <HAL_DMA_IRQHandler+0x984>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a39      	ldr	r2, [pc, #228]	; (80097bc <HAL_DMA_IRQHandler+0xa64>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d101      	bne.n	80096e0 <HAL_DMA_IRQHandler+0x988>
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <HAL_DMA_IRQHandler+0x98a>
 80096e0:	2300      	movs	r3, #0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 823f 	beq.w	8009b66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096f4:	f003 031f 	and.w	r3, r3, #31
 80096f8:	2204      	movs	r2, #4
 80096fa:	409a      	lsls	r2, r3
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	4013      	ands	r3, r2
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80cd 	beq.w	80098a0 <HAL_DMA_IRQHandler+0xb48>
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 80c7 	beq.w	80098a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009716:	f003 031f 	and.w	r3, r3, #31
 800971a:	2204      	movs	r2, #4
 800971c:	409a      	lsls	r2, r3
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d049      	beq.n	80097c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d109      	bne.n	800974a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 8210 	beq.w	8009b60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009748:	e20a      	b.n	8009b60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 8206 	beq.w	8009b60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800975c:	e200      	b.n	8009b60 <HAL_DMA_IRQHandler+0xe08>
 800975e:	bf00      	nop
 8009760:	40020010 	.word	0x40020010
 8009764:	40020028 	.word	0x40020028
 8009768:	40020040 	.word	0x40020040
 800976c:	40020058 	.word	0x40020058
 8009770:	40020070 	.word	0x40020070
 8009774:	40020088 	.word	0x40020088
 8009778:	400200a0 	.word	0x400200a0
 800977c:	400200b8 	.word	0x400200b8
 8009780:	40020410 	.word	0x40020410
 8009784:	40020428 	.word	0x40020428
 8009788:	40020440 	.word	0x40020440
 800978c:	40020458 	.word	0x40020458
 8009790:	40020470 	.word	0x40020470
 8009794:	40020488 	.word	0x40020488
 8009798:	400204a0 	.word	0x400204a0
 800979c:	400204b8 	.word	0x400204b8
 80097a0:	58025408 	.word	0x58025408
 80097a4:	5802541c 	.word	0x5802541c
 80097a8:	58025430 	.word	0x58025430
 80097ac:	58025444 	.word	0x58025444
 80097b0:	58025458 	.word	0x58025458
 80097b4:	5802546c 	.word	0x5802546c
 80097b8:	58025480 	.word	0x58025480
 80097bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d160      	bne.n	800988c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a7f      	ldr	r2, [pc, #508]	; (80099cc <HAL_DMA_IRQHandler+0xc74>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d04a      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a7d      	ldr	r2, [pc, #500]	; (80099d0 <HAL_DMA_IRQHandler+0xc78>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d045      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a7c      	ldr	r2, [pc, #496]	; (80099d4 <HAL_DMA_IRQHandler+0xc7c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d040      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a7a      	ldr	r2, [pc, #488]	; (80099d8 <HAL_DMA_IRQHandler+0xc80>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d03b      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a79      	ldr	r2, [pc, #484]	; (80099dc <HAL_DMA_IRQHandler+0xc84>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d036      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a77      	ldr	r2, [pc, #476]	; (80099e0 <HAL_DMA_IRQHandler+0xc88>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d031      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a76      	ldr	r2, [pc, #472]	; (80099e4 <HAL_DMA_IRQHandler+0xc8c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d02c      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a74      	ldr	r2, [pc, #464]	; (80099e8 <HAL_DMA_IRQHandler+0xc90>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d027      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a73      	ldr	r2, [pc, #460]	; (80099ec <HAL_DMA_IRQHandler+0xc94>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d022      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a71      	ldr	r2, [pc, #452]	; (80099f0 <HAL_DMA_IRQHandler+0xc98>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d01d      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a70      	ldr	r2, [pc, #448]	; (80099f4 <HAL_DMA_IRQHandler+0xc9c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d018      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a6e      	ldr	r2, [pc, #440]	; (80099f8 <HAL_DMA_IRQHandler+0xca0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d013      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a6d      	ldr	r2, [pc, #436]	; (80099fc <HAL_DMA_IRQHandler+0xca4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00e      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6b      	ldr	r2, [pc, #428]	; (8009a00 <HAL_DMA_IRQHandler+0xca8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d009      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a6a      	ldr	r2, [pc, #424]	; (8009a04 <HAL_DMA_IRQHandler+0xcac>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d004      	beq.n	800986a <HAL_DMA_IRQHandler+0xb12>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a68      	ldr	r2, [pc, #416]	; (8009a08 <HAL_DMA_IRQHandler+0xcb0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d108      	bne.n	800987c <HAL_DMA_IRQHandler+0xb24>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0208 	bic.w	r2, r2, #8
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	e007      	b.n	800988c <HAL_DMA_IRQHandler+0xb34>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0204 	bic.w	r2, r2, #4
 800988a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 8165 	beq.w	8009b60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800989e:	e15f      	b.n	8009b60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a4:	f003 031f 	and.w	r3, r3, #31
 80098a8:	2202      	movs	r2, #2
 80098aa:	409a      	lsls	r2, r3
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	4013      	ands	r3, r2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80c5 	beq.w	8009a40 <HAL_DMA_IRQHandler+0xce8>
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 80bf 	beq.w	8009a40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c6:	f003 031f 	and.w	r3, r3, #31
 80098ca:	2202      	movs	r2, #2
 80098cc:	409a      	lsls	r2, r3
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d018      	beq.n	800990e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d109      	bne.n	80098fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 813a 	beq.w	8009b64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098f8:	e134      	b.n	8009b64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8130 	beq.w	8009b64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800990c:	e12a      	b.n	8009b64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 8089 	bne.w	8009a2c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a2b      	ldr	r2, [pc, #172]	; (80099cc <HAL_DMA_IRQHandler+0xc74>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d04a      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a29      	ldr	r2, [pc, #164]	; (80099d0 <HAL_DMA_IRQHandler+0xc78>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d045      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a28      	ldr	r2, [pc, #160]	; (80099d4 <HAL_DMA_IRQHandler+0xc7c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d040      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a26      	ldr	r2, [pc, #152]	; (80099d8 <HAL_DMA_IRQHandler+0xc80>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d03b      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a25      	ldr	r2, [pc, #148]	; (80099dc <HAL_DMA_IRQHandler+0xc84>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d036      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a23      	ldr	r2, [pc, #140]	; (80099e0 <HAL_DMA_IRQHandler+0xc88>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d031      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a22      	ldr	r2, [pc, #136]	; (80099e4 <HAL_DMA_IRQHandler+0xc8c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d02c      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a20      	ldr	r2, [pc, #128]	; (80099e8 <HAL_DMA_IRQHandler+0xc90>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d027      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <HAL_DMA_IRQHandler+0xc94>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d022      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a1d      	ldr	r2, [pc, #116]	; (80099f0 <HAL_DMA_IRQHandler+0xc98>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d01d      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1c      	ldr	r2, [pc, #112]	; (80099f4 <HAL_DMA_IRQHandler+0xc9c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d018      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a1a      	ldr	r2, [pc, #104]	; (80099f8 <HAL_DMA_IRQHandler+0xca0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d013      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_DMA_IRQHandler+0xca4>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00e      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a17      	ldr	r2, [pc, #92]	; (8009a00 <HAL_DMA_IRQHandler+0xca8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a16      	ldr	r2, [pc, #88]	; (8009a04 <HAL_DMA_IRQHandler+0xcac>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d004      	beq.n	80099ba <HAL_DMA_IRQHandler+0xc62>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <HAL_DMA_IRQHandler+0xcb0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d128      	bne.n	8009a0c <HAL_DMA_IRQHandler+0xcb4>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0214 	bic.w	r2, r2, #20
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	e027      	b.n	8009a1c <HAL_DMA_IRQHandler+0xcc4>
 80099cc:	40020010 	.word	0x40020010
 80099d0:	40020028 	.word	0x40020028
 80099d4:	40020040 	.word	0x40020040
 80099d8:	40020058 	.word	0x40020058
 80099dc:	40020070 	.word	0x40020070
 80099e0:	40020088 	.word	0x40020088
 80099e4:	400200a0 	.word	0x400200a0
 80099e8:	400200b8 	.word	0x400200b8
 80099ec:	40020410 	.word	0x40020410
 80099f0:	40020428 	.word	0x40020428
 80099f4:	40020440 	.word	0x40020440
 80099f8:	40020458 	.word	0x40020458
 80099fc:	40020470 	.word	0x40020470
 8009a00:	40020488 	.word	0x40020488
 8009a04:	400204a0 	.word	0x400204a0
 8009a08:	400204b8 	.word	0x400204b8
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 020a 	bic.w	r2, r2, #10
 8009a1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8097 	beq.w	8009b64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a3e:	e091      	b.n	8009b64 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a44:	f003 031f 	and.w	r3, r3, #31
 8009a48:	2208      	movs	r2, #8
 8009a4a:	409a      	lsls	r2, r3
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8088 	beq.w	8009b66 <HAL_DMA_IRQHandler+0xe0e>
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 8082 	beq.w	8009b66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a41      	ldr	r2, [pc, #260]	; (8009b6c <HAL_DMA_IRQHandler+0xe14>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d04a      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a3f      	ldr	r2, [pc, #252]	; (8009b70 <HAL_DMA_IRQHandler+0xe18>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d045      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a3e      	ldr	r2, [pc, #248]	; (8009b74 <HAL_DMA_IRQHandler+0xe1c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d040      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a3c      	ldr	r2, [pc, #240]	; (8009b78 <HAL_DMA_IRQHandler+0xe20>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d03b      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a3b      	ldr	r2, [pc, #236]	; (8009b7c <HAL_DMA_IRQHandler+0xe24>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d036      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a39      	ldr	r2, [pc, #228]	; (8009b80 <HAL_DMA_IRQHandler+0xe28>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d031      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <HAL_DMA_IRQHandler+0xe2c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d02c      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a36      	ldr	r2, [pc, #216]	; (8009b88 <HAL_DMA_IRQHandler+0xe30>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d027      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a35      	ldr	r2, [pc, #212]	; (8009b8c <HAL_DMA_IRQHandler+0xe34>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d022      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a33      	ldr	r2, [pc, #204]	; (8009b90 <HAL_DMA_IRQHandler+0xe38>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d01d      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a32      	ldr	r2, [pc, #200]	; (8009b94 <HAL_DMA_IRQHandler+0xe3c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d018      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a30      	ldr	r2, [pc, #192]	; (8009b98 <HAL_DMA_IRQHandler+0xe40>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d013      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a2f      	ldr	r2, [pc, #188]	; (8009b9c <HAL_DMA_IRQHandler+0xe44>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00e      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a2d      	ldr	r2, [pc, #180]	; (8009ba0 <HAL_DMA_IRQHandler+0xe48>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d009      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a2c      	ldr	r2, [pc, #176]	; (8009ba4 <HAL_DMA_IRQHandler+0xe4c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d004      	beq.n	8009b02 <HAL_DMA_IRQHandler+0xdaa>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a2a      	ldr	r2, [pc, #168]	; (8009ba8 <HAL_DMA_IRQHandler+0xe50>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d108      	bne.n	8009b14 <HAL_DMA_IRQHandler+0xdbc>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f022 021c 	bic.w	r2, r2, #28
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e007      	b.n	8009b24 <HAL_DMA_IRQHandler+0xdcc>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 020e 	bic.w	r2, r2, #14
 8009b22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	409a      	lsls	r2, r3
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
 8009b5a:	e004      	b.n	8009b66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009b5c:	bf00      	nop
 8009b5e:	e002      	b.n	8009b66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b60:	bf00      	nop
 8009b62:	e000      	b.n	8009b66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009b66:	3728      	adds	r7, #40	; 0x28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	40020010 	.word	0x40020010
 8009b70:	40020028 	.word	0x40020028
 8009b74:	40020040 	.word	0x40020040
 8009b78:	40020058 	.word	0x40020058
 8009b7c:	40020070 	.word	0x40020070
 8009b80:	40020088 	.word	0x40020088
 8009b84:	400200a0 	.word	0x400200a0
 8009b88:	400200b8 	.word	0x400200b8
 8009b8c:	40020410 	.word	0x40020410
 8009b90:	40020428 	.word	0x40020428
 8009b94:	40020440 	.word	0x40020440
 8009b98:	40020458 	.word	0x40020458
 8009b9c:	40020470 	.word	0x40020470
 8009ba0:	40020488 	.word	0x40020488
 8009ba4:	400204a0 	.word	0x400204a0
 8009ba8:	400204b8 	.word	0x400204b8

08009bac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a7f      	ldr	r2, [pc, #508]	; (8009dc8 <DMA_SetConfig+0x21c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d072      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a7d      	ldr	r2, [pc, #500]	; (8009dcc <DMA_SetConfig+0x220>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d06d      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a7c      	ldr	r2, [pc, #496]	; (8009dd0 <DMA_SetConfig+0x224>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d068      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a7a      	ldr	r2, [pc, #488]	; (8009dd4 <DMA_SetConfig+0x228>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d063      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a79      	ldr	r2, [pc, #484]	; (8009dd8 <DMA_SetConfig+0x22c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d05e      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a77      	ldr	r2, [pc, #476]	; (8009ddc <DMA_SetConfig+0x230>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d059      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a76      	ldr	r2, [pc, #472]	; (8009de0 <DMA_SetConfig+0x234>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d054      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a74      	ldr	r2, [pc, #464]	; (8009de4 <DMA_SetConfig+0x238>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d04f      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a73      	ldr	r2, [pc, #460]	; (8009de8 <DMA_SetConfig+0x23c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d04a      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a71      	ldr	r2, [pc, #452]	; (8009dec <DMA_SetConfig+0x240>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d045      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a70      	ldr	r2, [pc, #448]	; (8009df0 <DMA_SetConfig+0x244>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d040      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a6e      	ldr	r2, [pc, #440]	; (8009df4 <DMA_SetConfig+0x248>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d03b      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a6d      	ldr	r2, [pc, #436]	; (8009df8 <DMA_SetConfig+0x24c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d036      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a6b      	ldr	r2, [pc, #428]	; (8009dfc <DMA_SetConfig+0x250>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d031      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a6a      	ldr	r2, [pc, #424]	; (8009e00 <DMA_SetConfig+0x254>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d02c      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a68      	ldr	r2, [pc, #416]	; (8009e04 <DMA_SetConfig+0x258>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d027      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a67      	ldr	r2, [pc, #412]	; (8009e08 <DMA_SetConfig+0x25c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d022      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a65      	ldr	r2, [pc, #404]	; (8009e0c <DMA_SetConfig+0x260>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d01d      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a64      	ldr	r2, [pc, #400]	; (8009e10 <DMA_SetConfig+0x264>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d018      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a62      	ldr	r2, [pc, #392]	; (8009e14 <DMA_SetConfig+0x268>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d013      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a61      	ldr	r2, [pc, #388]	; (8009e18 <DMA_SetConfig+0x26c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00e      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a5f      	ldr	r2, [pc, #380]	; (8009e1c <DMA_SetConfig+0x270>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d009      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a5e      	ldr	r2, [pc, #376]	; (8009e20 <DMA_SetConfig+0x274>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d004      	beq.n	8009cb6 <DMA_SetConfig+0x10a>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a5c      	ldr	r2, [pc, #368]	; (8009e24 <DMA_SetConfig+0x278>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d101      	bne.n	8009cba <DMA_SetConfig+0x10e>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <DMA_SetConfig+0x110>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00d      	beq.n	8009cdc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009cc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009cda:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a39      	ldr	r2, [pc, #228]	; (8009dc8 <DMA_SetConfig+0x21c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d04a      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a38      	ldr	r2, [pc, #224]	; (8009dcc <DMA_SetConfig+0x220>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d045      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a36      	ldr	r2, [pc, #216]	; (8009dd0 <DMA_SetConfig+0x224>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d040      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a35      	ldr	r2, [pc, #212]	; (8009dd4 <DMA_SetConfig+0x228>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d03b      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a33      	ldr	r2, [pc, #204]	; (8009dd8 <DMA_SetConfig+0x22c>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d036      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a32      	ldr	r2, [pc, #200]	; (8009ddc <DMA_SetConfig+0x230>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d031      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a30      	ldr	r2, [pc, #192]	; (8009de0 <DMA_SetConfig+0x234>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d02c      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a2f      	ldr	r2, [pc, #188]	; (8009de4 <DMA_SetConfig+0x238>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d027      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a2d      	ldr	r2, [pc, #180]	; (8009de8 <DMA_SetConfig+0x23c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d022      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a2c      	ldr	r2, [pc, #176]	; (8009dec <DMA_SetConfig+0x240>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d01d      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a2a      	ldr	r2, [pc, #168]	; (8009df0 <DMA_SetConfig+0x244>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d018      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a29      	ldr	r2, [pc, #164]	; (8009df4 <DMA_SetConfig+0x248>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d013      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a27      	ldr	r2, [pc, #156]	; (8009df8 <DMA_SetConfig+0x24c>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00e      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a26      	ldr	r2, [pc, #152]	; (8009dfc <DMA_SetConfig+0x250>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d009      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a24      	ldr	r2, [pc, #144]	; (8009e00 <DMA_SetConfig+0x254>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d004      	beq.n	8009d7c <DMA_SetConfig+0x1d0>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a23      	ldr	r2, [pc, #140]	; (8009e04 <DMA_SetConfig+0x258>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d101      	bne.n	8009d80 <DMA_SetConfig+0x1d4>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <DMA_SetConfig+0x1d6>
 8009d80:	2300      	movs	r3, #0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d059      	beq.n	8009e3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	223f      	movs	r2, #63	; 0x3f
 8009d90:	409a      	lsls	r2, r3
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009da4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	2b40      	cmp	r3, #64	; 0x40
 8009db4:	d138      	bne.n	8009e28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009dc6:	e086      	b.n	8009ed6 <DMA_SetConfig+0x32a>
 8009dc8:	40020010 	.word	0x40020010
 8009dcc:	40020028 	.word	0x40020028
 8009dd0:	40020040 	.word	0x40020040
 8009dd4:	40020058 	.word	0x40020058
 8009dd8:	40020070 	.word	0x40020070
 8009ddc:	40020088 	.word	0x40020088
 8009de0:	400200a0 	.word	0x400200a0
 8009de4:	400200b8 	.word	0x400200b8
 8009de8:	40020410 	.word	0x40020410
 8009dec:	40020428 	.word	0x40020428
 8009df0:	40020440 	.word	0x40020440
 8009df4:	40020458 	.word	0x40020458
 8009df8:	40020470 	.word	0x40020470
 8009dfc:	40020488 	.word	0x40020488
 8009e00:	400204a0 	.word	0x400204a0
 8009e04:	400204b8 	.word	0x400204b8
 8009e08:	58025408 	.word	0x58025408
 8009e0c:	5802541c 	.word	0x5802541c
 8009e10:	58025430 	.word	0x58025430
 8009e14:	58025444 	.word	0x58025444
 8009e18:	58025458 	.word	0x58025458
 8009e1c:	5802546c 	.word	0x5802546c
 8009e20:	58025480 	.word	0x58025480
 8009e24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	60da      	str	r2, [r3, #12]
}
 8009e38:	e04d      	b.n	8009ed6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a29      	ldr	r2, [pc, #164]	; (8009ee4 <DMA_SetConfig+0x338>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d022      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a27      	ldr	r2, [pc, #156]	; (8009ee8 <DMA_SetConfig+0x33c>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d01d      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a26      	ldr	r2, [pc, #152]	; (8009eec <DMA_SetConfig+0x340>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d018      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a24      	ldr	r2, [pc, #144]	; (8009ef0 <DMA_SetConfig+0x344>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d013      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a23      	ldr	r2, [pc, #140]	; (8009ef4 <DMA_SetConfig+0x348>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00e      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a21      	ldr	r2, [pc, #132]	; (8009ef8 <DMA_SetConfig+0x34c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d009      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a20      	ldr	r2, [pc, #128]	; (8009efc <DMA_SetConfig+0x350>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d004      	beq.n	8009e8a <DMA_SetConfig+0x2de>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a1e      	ldr	r2, [pc, #120]	; (8009f00 <DMA_SetConfig+0x354>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d101      	bne.n	8009e8e <DMA_SetConfig+0x2e2>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <DMA_SetConfig+0x2e4>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d020      	beq.n	8009ed6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e98:	f003 031f 	and.w	r3, r3, #31
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	409a      	lsls	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d108      	bne.n	8009ec6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	60da      	str	r2, [r3, #12]
}
 8009ec4:	e007      	b.n	8009ed6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	60da      	str	r2, [r3, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	58025408 	.word	0x58025408
 8009ee8:	5802541c 	.word	0x5802541c
 8009eec:	58025430 	.word	0x58025430
 8009ef0:	58025444 	.word	0x58025444
 8009ef4:	58025458 	.word	0x58025458
 8009ef8:	5802546c 	.word	0x5802546c
 8009efc:	58025480 	.word	0x58025480
 8009f00:	58025494 	.word	0x58025494

08009f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a42      	ldr	r2, [pc, #264]	; (800a01c <DMA_CalcBaseAndBitshift+0x118>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d04a      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a41      	ldr	r2, [pc, #260]	; (800a020 <DMA_CalcBaseAndBitshift+0x11c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d045      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a3f      	ldr	r2, [pc, #252]	; (800a024 <DMA_CalcBaseAndBitshift+0x120>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d040      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a3e      	ldr	r2, [pc, #248]	; (800a028 <DMA_CalcBaseAndBitshift+0x124>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d03b      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a3c      	ldr	r2, [pc, #240]	; (800a02c <DMA_CalcBaseAndBitshift+0x128>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d036      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a3b      	ldr	r2, [pc, #236]	; (800a030 <DMA_CalcBaseAndBitshift+0x12c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d031      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a39      	ldr	r2, [pc, #228]	; (800a034 <DMA_CalcBaseAndBitshift+0x130>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d02c      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a38      	ldr	r2, [pc, #224]	; (800a038 <DMA_CalcBaseAndBitshift+0x134>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d027      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a36      	ldr	r2, [pc, #216]	; (800a03c <DMA_CalcBaseAndBitshift+0x138>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d022      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a35      	ldr	r2, [pc, #212]	; (800a040 <DMA_CalcBaseAndBitshift+0x13c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d01d      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a33      	ldr	r2, [pc, #204]	; (800a044 <DMA_CalcBaseAndBitshift+0x140>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d018      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a32      	ldr	r2, [pc, #200]	; (800a048 <DMA_CalcBaseAndBitshift+0x144>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d013      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a30      	ldr	r2, [pc, #192]	; (800a04c <DMA_CalcBaseAndBitshift+0x148>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00e      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a2f      	ldr	r2, [pc, #188]	; (800a050 <DMA_CalcBaseAndBitshift+0x14c>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d009      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a2d      	ldr	r2, [pc, #180]	; (800a054 <DMA_CalcBaseAndBitshift+0x150>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d004      	beq.n	8009fac <DMA_CalcBaseAndBitshift+0xa8>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a2c      	ldr	r2, [pc, #176]	; (800a058 <DMA_CalcBaseAndBitshift+0x154>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d101      	bne.n	8009fb0 <DMA_CalcBaseAndBitshift+0xac>
 8009fac:	2301      	movs	r3, #1
 8009fae:	e000      	b.n	8009fb2 <DMA_CalcBaseAndBitshift+0xae>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d024      	beq.n	800a000 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	3b10      	subs	r3, #16
 8009fbe:	4a27      	ldr	r2, [pc, #156]	; (800a05c <DMA_CalcBaseAndBitshift+0x158>)
 8009fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc4:	091b      	lsrs	r3, r3, #4
 8009fc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	4a24      	ldr	r2, [pc, #144]	; (800a060 <DMA_CalcBaseAndBitshift+0x15c>)
 8009fd0:	5cd3      	ldrb	r3, [r2, r3]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d908      	bls.n	8009ff0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4b1f      	ldr	r3, [pc, #124]	; (800a064 <DMA_CalcBaseAndBitshift+0x160>)
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	1d1a      	adds	r2, r3, #4
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	659a      	str	r2, [r3, #88]	; 0x58
 8009fee:	e00d      	b.n	800a00c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4b1b      	ldr	r3, [pc, #108]	; (800a064 <DMA_CalcBaseAndBitshift+0x160>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8009ffe:	e005      	b.n	800a00c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	40020010 	.word	0x40020010
 800a020:	40020028 	.word	0x40020028
 800a024:	40020040 	.word	0x40020040
 800a028:	40020058 	.word	0x40020058
 800a02c:	40020070 	.word	0x40020070
 800a030:	40020088 	.word	0x40020088
 800a034:	400200a0 	.word	0x400200a0
 800a038:	400200b8 	.word	0x400200b8
 800a03c:	40020410 	.word	0x40020410
 800a040:	40020428 	.word	0x40020428
 800a044:	40020440 	.word	0x40020440
 800a048:	40020458 	.word	0x40020458
 800a04c:	40020470 	.word	0x40020470
 800a050:	40020488 	.word	0x40020488
 800a054:	400204a0 	.word	0x400204a0
 800a058:	400204b8 	.word	0x400204b8
 800a05c:	aaaaaaab 	.word	0xaaaaaaab
 800a060:	0801525c 	.word	0x0801525c
 800a064:	fffffc00 	.word	0xfffffc00

0800a068 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d120      	bne.n	800a0be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	2b03      	cmp	r3, #3
 800a082:	d858      	bhi.n	800a136 <DMA_CheckFifoParam+0xce>
 800a084:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <DMA_CheckFifoParam+0x24>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a09d 	.word	0x0800a09d
 800a090:	0800a0af 	.word	0x0800a0af
 800a094:	0800a09d 	.word	0x0800a09d
 800a098:	0800a137 	.word	0x0800a137
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d048      	beq.n	800a13a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0ac:	e045      	b.n	800a13a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0b6:	d142      	bne.n	800a13e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0bc:	e03f      	b.n	800a13e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c6:	d123      	bne.n	800a110 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d838      	bhi.n	800a142 <DMA_CheckFifoParam+0xda>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <DMA_CheckFifoParam+0x70>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0ef 	.word	0x0800a0ef
 800a0e0:	0800a0e9 	.word	0x0800a0e9
 800a0e4:	0800a101 	.word	0x0800a101
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
        break;
 800a0ec:	e030      	b.n	800a150 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d025      	beq.n	800a146 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a0fe:	e022      	b.n	800a146 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a108:	d11f      	bne.n	800a14a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a10e:	e01c      	b.n	800a14a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a114:	2b02      	cmp	r3, #2
 800a116:	d902      	bls.n	800a11e <DMA_CheckFifoParam+0xb6>
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d003      	beq.n	800a124 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a11c:	e018      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
        break;
 800a122:	e015      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00e      	beq.n	800a14e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
    break;
 800a134:	e00b      	b.n	800a14e <DMA_CheckFifoParam+0xe6>
        break;
 800a136:	bf00      	nop
 800a138:	e00a      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        break;
 800a13a:	bf00      	nop
 800a13c:	e008      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        break;
 800a13e:	bf00      	nop
 800a140:	e006      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        break;
 800a142:	bf00      	nop
 800a144:	e004      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        break;
 800a146:	bf00      	nop
 800a148:	e002      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
        break;
 800a14a:	bf00      	nop
 800a14c:	e000      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
    break;
 800a14e:	bf00      	nop
    }
  }

  return status;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop

0800a160 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a38      	ldr	r2, [pc, #224]	; (800a254 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d022      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a36      	ldr	r2, [pc, #216]	; (800a258 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01d      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a35      	ldr	r2, [pc, #212]	; (800a25c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d018      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a33      	ldr	r2, [pc, #204]	; (800a260 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a32      	ldr	r2, [pc, #200]	; (800a264 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a30      	ldr	r2, [pc, #192]	; (800a268 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a2f      	ldr	r2, [pc, #188]	; (800a26c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a2d      	ldr	r2, [pc, #180]	; (800a270 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d101      	bne.n	800a1c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01a      	beq.n	800a1fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	3b08      	subs	r3, #8
 800a1d0:	4a28      	ldr	r2, [pc, #160]	; (800a274 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	091b      	lsrs	r3, r3, #4
 800a1d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4b26      	ldr	r3, [pc, #152]	; (800a278 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a1de:	4413      	add	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a24      	ldr	r2, [pc, #144]	; (800a27c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a1ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	409a      	lsls	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a1fc:	e024      	b.n	800a248 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	3b10      	subs	r3, #16
 800a206:	4a1e      	ldr	r2, [pc, #120]	; (800a280 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	091b      	lsrs	r3, r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	4a1c      	ldr	r2, [pc, #112]	; (800a284 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d806      	bhi.n	800a226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4a1b      	ldr	r2, [pc, #108]	; (800a288 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d902      	bls.n	800a226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3308      	adds	r3, #8
 800a224:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4b18      	ldr	r3, [pc, #96]	; (800a28c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a16      	ldr	r2, [pc, #88]	; (800a290 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a238:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f003 031f 	and.w	r3, r3, #31
 800a240:	2201      	movs	r2, #1
 800a242:	409a      	lsls	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a248:	bf00      	nop
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	58025408 	.word	0x58025408
 800a258:	5802541c 	.word	0x5802541c
 800a25c:	58025430 	.word	0x58025430
 800a260:	58025444 	.word	0x58025444
 800a264:	58025458 	.word	0x58025458
 800a268:	5802546c 	.word	0x5802546c
 800a26c:	58025480 	.word	0x58025480
 800a270:	58025494 	.word	0x58025494
 800a274:	cccccccd 	.word	0xcccccccd
 800a278:	16009600 	.word	0x16009600
 800a27c:	58025880 	.word	0x58025880
 800a280:	aaaaaaab 	.word	0xaaaaaaab
 800a284:	400204b8 	.word	0x400204b8
 800a288:	4002040f 	.word	0x4002040f
 800a28c:	10008200 	.word	0x10008200
 800a290:	40020880 	.word	0x40020880

0800a294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d04a      	beq.n	800a340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d847      	bhi.n	800a340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a25      	ldr	r2, [pc, #148]	; (800a34c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d022      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a24      	ldr	r2, [pc, #144]	; (800a350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d01d      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a22      	ldr	r2, [pc, #136]	; (800a354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d018      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a21      	ldr	r2, [pc, #132]	; (800a358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d013      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a1f      	ldr	r2, [pc, #124]	; (800a35c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d00e      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d009      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a1c      	ldr	r2, [pc, #112]	; (800a364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d004      	beq.n	800a300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a1b      	ldr	r2, [pc, #108]	; (800a368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d101      	bne.n	800a304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a300:	2301      	movs	r3, #1
 800a302:	e000      	b.n	800a306 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a304:	2300      	movs	r3, #0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4b17      	ldr	r3, [pc, #92]	; (800a36c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	461a      	mov	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a15      	ldr	r2, [pc, #84]	; (800a370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a31c:	671a      	str	r2, [r3, #112]	; 0x70
 800a31e:	e009      	b.n	800a334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4b14      	ldr	r3, [pc, #80]	; (800a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	461a      	mov	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a11      	ldr	r2, [pc, #68]	; (800a378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a332:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3b01      	subs	r3, #1
 800a338:	2201      	movs	r2, #1
 800a33a:	409a      	lsls	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a340:	bf00      	nop
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	58025408 	.word	0x58025408
 800a350:	5802541c 	.word	0x5802541c
 800a354:	58025430 	.word	0x58025430
 800a358:	58025444 	.word	0x58025444
 800a35c:	58025458 	.word	0x58025458
 800a360:	5802546c 	.word	0x5802546c
 800a364:	58025480 	.word	0x58025480
 800a368:	58025494 	.word	0x58025494
 800a36c:	1600963f 	.word	0x1600963f
 800a370:	58025940 	.word	0x58025940
 800a374:	1000823f 	.word	0x1000823f
 800a378:	40020940 	.word	0x40020940

0800a37c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a386:	2300      	movs	r3, #0
 800a388:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a38a:	4b89      	ldr	r3, [pc, #548]	; (800a5b0 <HAL_GPIO_Init+0x234>)
 800a38c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a38e:	e194      	b.n	800a6ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	2101      	movs	r1, #1
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	fa01 f303 	lsl.w	r3, r1, r3
 800a39c:	4013      	ands	r3, r2
 800a39e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f000 8186 	beq.w	800a6b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d005      	beq.n	800a3c0 <HAL_GPIO_Init+0x44>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d130      	bne.n	800a422 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fe:	43db      	mvns	r3, r3
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	4013      	ands	r3, r2
 800a404:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	091b      	lsrs	r3, r3, #4
 800a40c:	f003 0201 	and.w	r2, r3, #1
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	fa02 f303 	lsl.w	r3, r2, r3
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	4313      	orrs	r3, r2
 800a41a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	2b03      	cmp	r3, #3
 800a42c:	d017      	beq.n	800a45e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	2203      	movs	r2, #3
 800a43a:	fa02 f303 	lsl.w	r3, r2, r3
 800a43e:	43db      	mvns	r3, r3
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	4013      	ands	r3, r2
 800a444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	69ba      	ldr	r2, [r7, #24]
 800a454:	4313      	orrs	r3, r2
 800a456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d123      	bne.n	800a4b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	08da      	lsrs	r2, r3, #3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3208      	adds	r2, #8
 800a472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f003 0307 	and.w	r3, r3, #7
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	220f      	movs	r2, #15
 800a482:	fa02 f303 	lsl.w	r3, r2, r3
 800a486:	43db      	mvns	r3, r3
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	4013      	ands	r3, r2
 800a48c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	691a      	ldr	r2, [r3, #16]
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	f003 0307 	and.w	r3, r3, #7
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	fa02 f303 	lsl.w	r3, r2, r3
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	08da      	lsrs	r2, r3, #3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3208      	adds	r2, #8
 800a4ac:	69b9      	ldr	r1, [r7, #24]
 800a4ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	2203      	movs	r2, #3
 800a4be:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c2:	43db      	mvns	r3, r3
 800a4c4:	69ba      	ldr	r2, [r7, #24]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f003 0203 	and.w	r2, r3, #3
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 80e0 	beq.w	800a6b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4f4:	4b2f      	ldr	r3, [pc, #188]	; (800a5b4 <HAL_GPIO_Init+0x238>)
 800a4f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a4fa:	4a2e      	ldr	r2, [pc, #184]	; (800a5b4 <HAL_GPIO_Init+0x238>)
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a504:	4b2b      	ldr	r3, [pc, #172]	; (800a5b4 <HAL_GPIO_Init+0x238>)
 800a506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a512:	4a29      	ldr	r2, [pc, #164]	; (800a5b8 <HAL_GPIO_Init+0x23c>)
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	089b      	lsrs	r3, r3, #2
 800a518:	3302      	adds	r3, #2
 800a51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a51e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	f003 0303 	and.w	r3, r3, #3
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	220f      	movs	r2, #15
 800a52a:	fa02 f303 	lsl.w	r3, r2, r3
 800a52e:	43db      	mvns	r3, r3
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	4013      	ands	r3, r2
 800a534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a20      	ldr	r2, [pc, #128]	; (800a5bc <HAL_GPIO_Init+0x240>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d052      	beq.n	800a5e4 <HAL_GPIO_Init+0x268>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <HAL_GPIO_Init+0x244>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d031      	beq.n	800a5aa <HAL_GPIO_Init+0x22e>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a1e      	ldr	r2, [pc, #120]	; (800a5c4 <HAL_GPIO_Init+0x248>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d02b      	beq.n	800a5a6 <HAL_GPIO_Init+0x22a>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a1d      	ldr	r2, [pc, #116]	; (800a5c8 <HAL_GPIO_Init+0x24c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d025      	beq.n	800a5a2 <HAL_GPIO_Init+0x226>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a1c      	ldr	r2, [pc, #112]	; (800a5cc <HAL_GPIO_Init+0x250>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d01f      	beq.n	800a59e <HAL_GPIO_Init+0x222>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a1b      	ldr	r2, [pc, #108]	; (800a5d0 <HAL_GPIO_Init+0x254>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d019      	beq.n	800a59a <HAL_GPIO_Init+0x21e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a1a      	ldr	r2, [pc, #104]	; (800a5d4 <HAL_GPIO_Init+0x258>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d013      	beq.n	800a596 <HAL_GPIO_Init+0x21a>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a19      	ldr	r2, [pc, #100]	; (800a5d8 <HAL_GPIO_Init+0x25c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d00d      	beq.n	800a592 <HAL_GPIO_Init+0x216>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a18      	ldr	r2, [pc, #96]	; (800a5dc <HAL_GPIO_Init+0x260>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d007      	beq.n	800a58e <HAL_GPIO_Init+0x212>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a17      	ldr	r2, [pc, #92]	; (800a5e0 <HAL_GPIO_Init+0x264>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d101      	bne.n	800a58a <HAL_GPIO_Init+0x20e>
 800a586:	2309      	movs	r3, #9
 800a588:	e02d      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a58a:	230a      	movs	r3, #10
 800a58c:	e02b      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a58e:	2308      	movs	r3, #8
 800a590:	e029      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a592:	2307      	movs	r3, #7
 800a594:	e027      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a596:	2306      	movs	r3, #6
 800a598:	e025      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a59a:	2305      	movs	r3, #5
 800a59c:	e023      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a59e:	2304      	movs	r3, #4
 800a5a0:	e021      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e01f      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e01d      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e01b      	b.n	800a5e6 <HAL_GPIO_Init+0x26a>
 800a5ae:	bf00      	nop
 800a5b0:	58000080 	.word	0x58000080
 800a5b4:	58024400 	.word	0x58024400
 800a5b8:	58000400 	.word	0x58000400
 800a5bc:	58020000 	.word	0x58020000
 800a5c0:	58020400 	.word	0x58020400
 800a5c4:	58020800 	.word	0x58020800
 800a5c8:	58020c00 	.word	0x58020c00
 800a5cc:	58021000 	.word	0x58021000
 800a5d0:	58021400 	.word	0x58021400
 800a5d4:	58021800 	.word	0x58021800
 800a5d8:	58021c00 	.word	0x58021c00
 800a5dc:	58022000 	.word	0x58022000
 800a5e0:	58022400 	.word	0x58022400
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	f002 0203 	and.w	r2, r2, #3
 800a5ec:	0092      	lsls	r2, r2, #2
 800a5ee:	4093      	lsls	r3, r2
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5f6:	4938      	ldr	r1, [pc, #224]	; (800a6d8 <HAL_GPIO_Init+0x35c>)
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	089b      	lsrs	r3, r3, #2
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	43db      	mvns	r3, r3
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	4013      	ands	r3, r2
 800a614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a62a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	43db      	mvns	r3, r3
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	4013      	ands	r3, r2
 800a642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	43db      	mvns	r3, r3
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	4013      	ands	r3, r2
 800a66e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	4313      	orrs	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	43db      	mvns	r3, r3
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	4013      	ands	r3, r2
 800a698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f47f ae63 	bne.w	800a390 <HAL_GPIO_Init+0x14>
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	3724      	adds	r7, #36	; 0x24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	58000400 	.word	0x58000400

0800a6dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	807b      	strh	r3, [r7, #2]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6ec:	787b      	ldrb	r3, [r7, #1]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6f2:	887a      	ldrh	r2, [r7, #2]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6f8:	e003      	b.n	800a702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6fa:	887b      	ldrh	r3, [r7, #2]
 800a6fc:	041a      	lsls	r2, r3, #16
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	619a      	str	r2, [r3, #24]
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	4603      	mov	r3, r0
 800a716:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a71c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a720:	88fb      	ldrh	r3, [r7, #6]
 800a722:	4013      	ands	r3, r2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d008      	beq.n	800a73a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	4618      	mov	r0, r3
 800a736:	f7fa fb67 	bl	8004e08 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a73a:	bf00      	nop
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
	...

0800a744 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a74c:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b04      	cmp	r3, #4
 800a756:	d00a      	beq.n	800a76e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a758:	4b16      	ldr	r3, [pc, #88]	; (800a7b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	429a      	cmp	r2, r3
 800a764:	d001      	beq.n	800a76a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e01f      	b.n	800a7aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	e01d      	b.n	800a7aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a76e:	4b11      	ldr	r3, [pc, #68]	; (800a7b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f023 0207 	bic.w	r2, r3, #7
 800a776:	490f      	ldr	r1, [pc, #60]	; (800a7b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a77e:	f7fc fc6b 	bl	8007058 <HAL_GetTick>
 800a782:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a784:	e009      	b.n	800a79a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a786:	f7fc fc67 	bl	8007058 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a794:	d901      	bls.n	800a79a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e007      	b.n	800a7aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a79a:	4b06      	ldr	r3, [pc, #24]	; (800a7b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7a6:	d1ee      	bne.n	800a786 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	58024800 	.word	0x58024800

0800a7b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08c      	sub	sp, #48	; 0x30
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f000 bc1d 	b.w	800b006 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0301 	and.w	r3, r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8087 	beq.w	800a8e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7da:	4b99      	ldr	r3, [pc, #612]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7e4:	4b96      	ldr	r3, [pc, #600]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b10      	cmp	r3, #16
 800a7ee:	d007      	beq.n	800a800 <HAL_RCC_OscConfig+0x48>
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	2b18      	cmp	r3, #24
 800a7f4:	d110      	bne.n	800a818 <HAL_RCC_OscConfig+0x60>
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	f003 0303 	and.w	r3, r3, #3
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d10b      	bne.n	800a818 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a800:	4b8f      	ldr	r3, [pc, #572]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d06c      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x12e>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d168      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	e3f6      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a820:	d106      	bne.n	800a830 <HAL_RCC_OscConfig+0x78>
 800a822:	4b87      	ldr	r3, [pc, #540]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a86      	ldr	r2, [pc, #536]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	e02e      	b.n	800a88e <HAL_RCC_OscConfig+0xd6>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10c      	bne.n	800a852 <HAL_RCC_OscConfig+0x9a>
 800a838:	4b81      	ldr	r3, [pc, #516]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a80      	ldr	r2, [pc, #512]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a83e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	4b7e      	ldr	r3, [pc, #504]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a7d      	ldr	r2, [pc, #500]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a84a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	e01d      	b.n	800a88e <HAL_RCC_OscConfig+0xd6>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a85a:	d10c      	bne.n	800a876 <HAL_RCC_OscConfig+0xbe>
 800a85c:	4b78      	ldr	r3, [pc, #480]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a77      	ldr	r2, [pc, #476]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	4b75      	ldr	r3, [pc, #468]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a74      	ldr	r2, [pc, #464]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	e00b      	b.n	800a88e <HAL_RCC_OscConfig+0xd6>
 800a876:	4b72      	ldr	r3, [pc, #456]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a71      	ldr	r2, [pc, #452]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a87c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	4b6f      	ldr	r3, [pc, #444]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a6e      	ldr	r2, [pc, #440]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a88c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d013      	beq.n	800a8be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a896:	f7fc fbdf 	bl	8007058 <HAL_GetTick>
 800a89a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a89e:	f7fc fbdb 	bl	8007058 <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b64      	cmp	r3, #100	; 0x64
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e3aa      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8b0:	4b63      	ldr	r3, [pc, #396]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0xe6>
 800a8bc:	e014      	b.n	800a8e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8be:	f7fc fbcb 	bl	8007058 <HAL_GetTick>
 800a8c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8c4:	e008      	b.n	800a8d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8c6:	f7fc fbc7 	bl	8007058 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b64      	cmp	r3, #100	; 0x64
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e396      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8d8:	4b59      	ldr	r3, [pc, #356]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1f0      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x10e>
 800a8e4:	e000      	b.n	800a8e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 80cb 	beq.w	800aa8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8f6:	4b52      	ldr	r3, [pc, #328]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a900:	4b4f      	ldr	r3, [pc, #316]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a904:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <HAL_RCC_OscConfig+0x164>
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	2b18      	cmp	r3, #24
 800a910:	d156      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x208>
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d151      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a91c:	4b48      	ldr	r3, [pc, #288]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d005      	beq.n	800a934 <HAL_RCC_OscConfig+0x17c>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e368      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a934:	4b42      	ldr	r3, [pc, #264]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f023 0219 	bic.w	r2, r3, #25
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	493f      	ldr	r1, [pc, #252]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a942:	4313      	orrs	r3, r2
 800a944:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a946:	f7fc fb87 	bl	8007058 <HAL_GetTick>
 800a94a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a94e:	f7fc fb83 	bl	8007058 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e352      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a960:	4b37      	ldr	r3, [pc, #220]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a96c:	f7fc fba4 	bl	80070b8 <HAL_GetREVID>
 800a970:	4603      	mov	r3, r0
 800a972:	f241 0203 	movw	r2, #4099	; 0x1003
 800a976:	4293      	cmp	r3, r2
 800a978:	d817      	bhi.n	800a9aa <HAL_RCC_OscConfig+0x1f2>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d108      	bne.n	800a994 <HAL_RCC_OscConfig+0x1dc>
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a98a:	4a2d      	ldr	r2, [pc, #180]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a98c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a990:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a992:	e07b      	b.n	800aa8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a994:	4b2a      	ldr	r3, [pc, #168]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	031b      	lsls	r3, r3, #12
 800a9a2:	4927      	ldr	r1, [pc, #156]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9a8:	e070      	b.n	800aa8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9aa:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	061b      	lsls	r3, r3, #24
 800a9b8:	4921      	ldr	r1, [pc, #132]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9be:	e065      	b.n	800aa8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d048      	beq.n	800aa5a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9c8:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f023 0219 	bic.w	r2, r3, #25
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	491a      	ldr	r1, [pc, #104]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9da:	f7fc fb3d 	bl	8007058 <HAL_GetTick>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9e2:	f7fc fb39 	bl	8007058 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e308      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9f4:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0f0      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa00:	f7fc fb5a 	bl	80070b8 <HAL_GetREVID>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d81a      	bhi.n	800aa44 <HAL_RCC_OscConfig+0x28c>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	2b40      	cmp	r3, #64	; 0x40
 800aa14:	d108      	bne.n	800aa28 <HAL_RCC_OscConfig+0x270>
 800aa16:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800aa1e:	4a08      	ldr	r2, [pc, #32]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800aa20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa24:	6053      	str	r3, [r2, #4]
 800aa26:	e031      	b.n	800aa8c <HAL_RCC_OscConfig+0x2d4>
 800aa28:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	031b      	lsls	r3, r3, #12
 800aa36:	4902      	ldr	r1, [pc, #8]	; (800aa40 <HAL_RCC_OscConfig+0x288>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	604b      	str	r3, [r1, #4]
 800aa3c:	e026      	b.n	800aa8c <HAL_RCC_OscConfig+0x2d4>
 800aa3e:	bf00      	nop
 800aa40:	58024400 	.word	0x58024400
 800aa44:	4b9a      	ldr	r3, [pc, #616]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	061b      	lsls	r3, r3, #24
 800aa52:	4997      	ldr	r1, [pc, #604]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	604b      	str	r3, [r1, #4]
 800aa58:	e018      	b.n	800aa8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa5a:	4b95      	ldr	r3, [pc, #596]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a94      	ldr	r2, [pc, #592]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aa60:	f023 0301 	bic.w	r3, r3, #1
 800aa64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa66:	f7fc faf7 	bl	8007058 <HAL_GetTick>
 800aa6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa6c:	e008      	b.n	800aa80 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa6e:	f7fc faf3 	bl	8007058 <HAL_GetTick>
 800aa72:	4602      	mov	r2, r0
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d901      	bls.n	800aa80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	e2c2      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa80:	4b8b      	ldr	r3, [pc, #556]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1f0      	bne.n	800aa6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0310 	and.w	r3, r3, #16
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80a9 	beq.w	800abec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa9a:	4b85      	ldr	r3, [pc, #532]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaa2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aaa4:	4b82      	ldr	r3, [pc, #520]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	d007      	beq.n	800aac0 <HAL_RCC_OscConfig+0x308>
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	2b18      	cmp	r3, #24
 800aab4:	d13a      	bne.n	800ab2c <HAL_RCC_OscConfig+0x374>
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f003 0303 	and.w	r3, r3, #3
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d135      	bne.n	800ab2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aac0:	4b7b      	ldr	r3, [pc, #492]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <HAL_RCC_OscConfig+0x320>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	69db      	ldr	r3, [r3, #28]
 800aad0:	2b80      	cmp	r3, #128	; 0x80
 800aad2:	d001      	beq.n	800aad8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e296      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aad8:	f7fc faee 	bl	80070b8 <HAL_GetREVID>
 800aadc:	4603      	mov	r3, r0
 800aade:	f241 0203 	movw	r2, #4099	; 0x1003
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d817      	bhi.n	800ab16 <HAL_RCC_OscConfig+0x35e>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	d108      	bne.n	800ab00 <HAL_RCC_OscConfig+0x348>
 800aaee:	4b70      	ldr	r3, [pc, #448]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aaf6:	4a6e      	ldr	r2, [pc, #440]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aaf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aafc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aafe:	e075      	b.n	800abec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab00:	4b6b      	ldr	r3, [pc, #428]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	069b      	lsls	r3, r3, #26
 800ab0e:	4968      	ldr	r1, [pc, #416]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab14:	e06a      	b.n	800abec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab16:	4b66      	ldr	r3, [pc, #408]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	061b      	lsls	r3, r3, #24
 800ab24:	4962      	ldr	r1, [pc, #392]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ab2a:	e05f      	b.n	800abec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d042      	beq.n	800abba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab34:	4b5e      	ldr	r3, [pc, #376]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a5d      	ldr	r2, [pc, #372]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab40:	f7fc fa8a 	bl	8007058 <HAL_GetTick>
 800ab44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab46:	e008      	b.n	800ab5a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ab48:	f7fc fa86 	bl	8007058 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e255      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab5a:	4b55      	ldr	r3, [pc, #340]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0f0      	beq.n	800ab48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab66:	f7fc faa7 	bl	80070b8 <HAL_GetREVID>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d817      	bhi.n	800aba4 <HAL_RCC_OscConfig+0x3ec>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	2b20      	cmp	r3, #32
 800ab7a:	d108      	bne.n	800ab8e <HAL_RCC_OscConfig+0x3d6>
 800ab7c:	4b4c      	ldr	r3, [pc, #304]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab84:	4a4a      	ldr	r2, [pc, #296]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab8a:	6053      	str	r3, [r2, #4]
 800ab8c:	e02e      	b.n	800abec <HAL_RCC_OscConfig+0x434>
 800ab8e:	4b48      	ldr	r3, [pc, #288]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	069b      	lsls	r3, r3, #26
 800ab9c:	4944      	ldr	r1, [pc, #272]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	604b      	str	r3, [r1, #4]
 800aba2:	e023      	b.n	800abec <HAL_RCC_OscConfig+0x434>
 800aba4:	4b42      	ldr	r3, [pc, #264]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	061b      	lsls	r3, r3, #24
 800abb2:	493f      	ldr	r1, [pc, #252]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60cb      	str	r3, [r1, #12]
 800abb8:	e018      	b.n	800abec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800abba:	4b3d      	ldr	r3, [pc, #244]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a3c      	ldr	r2, [pc, #240]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800abc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc6:	f7fc fa47 	bl	8007058 <HAL_GetTick>
 800abca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abcc:	e008      	b.n	800abe0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800abce:	f7fc fa43 	bl	8007058 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d901      	bls.n	800abe0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e212      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abe0:	4b33      	ldr	r3, [pc, #204]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f0      	bne.n	800abce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 0308 	and.w	r3, r3, #8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d036      	beq.n	800ac66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d019      	beq.n	800ac34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac00:	4b2b      	ldr	r3, [pc, #172]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac04:	4a2a      	ldr	r2, [pc, #168]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac0c:	f7fc fa24 	bl	8007058 <HAL_GetTick>
 800ac10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac12:	e008      	b.n	800ac26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac14:	f7fc fa20 	bl	8007058 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d901      	bls.n	800ac26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e1ef      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac26:	4b22      	ldr	r3, [pc, #136]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0f0      	beq.n	800ac14 <HAL_RCC_OscConfig+0x45c>
 800ac32:	e018      	b.n	800ac66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac34:	4b1e      	ldr	r3, [pc, #120]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac38:	4a1d      	ldr	r2, [pc, #116]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac3a:	f023 0301 	bic.w	r3, r3, #1
 800ac3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac40:	f7fc fa0a 	bl	8007058 <HAL_GetTick>
 800ac44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac46:	e008      	b.n	800ac5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac48:	f7fc fa06 	bl	8007058 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d901      	bls.n	800ac5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	e1d5      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac5a:	4b15      	ldr	r3, [pc, #84]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1f0      	bne.n	800ac48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d039      	beq.n	800ace6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d01c      	beq.n	800acb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac7a:	4b0d      	ldr	r3, [pc, #52]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a0c      	ldr	r2, [pc, #48]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800ac80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac86:	f7fc f9e7 	bl	8007058 <HAL_GetTick>
 800ac8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac8c:	e008      	b.n	800aca0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ac8e:	f7fc f9e3 	bl	8007058 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d901      	bls.n	800aca0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e1b2      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aca0:	4b03      	ldr	r3, [pc, #12]	; (800acb0 <HAL_RCC_OscConfig+0x4f8>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d0f0      	beq.n	800ac8e <HAL_RCC_OscConfig+0x4d6>
 800acac:	e01b      	b.n	800ace6 <HAL_RCC_OscConfig+0x52e>
 800acae:	bf00      	nop
 800acb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acb4:	4b9b      	ldr	r3, [pc, #620]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a9a      	ldr	r2, [pc, #616]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800acba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acc0:	f7fc f9ca 	bl	8007058 <HAL_GetTick>
 800acc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acc6:	e008      	b.n	800acda <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800acc8:	f7fc f9c6 	bl	8007058 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d901      	bls.n	800acda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e195      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acda:	4b92      	ldr	r3, [pc, #584]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1f0      	bne.n	800acc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 8081 	beq.w	800adf6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800acf4:	4b8c      	ldr	r3, [pc, #560]	; (800af28 <HAL_RCC_OscConfig+0x770>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a8b      	ldr	r2, [pc, #556]	; (800af28 <HAL_RCC_OscConfig+0x770>)
 800acfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad00:	f7fc f9aa 	bl	8007058 <HAL_GetTick>
 800ad04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ad08:	f7fc f9a6 	bl	8007058 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b64      	cmp	r3, #100	; 0x64
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e175      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad1a:	4b83      	ldr	r3, [pc, #524]	; (800af28 <HAL_RCC_OscConfig+0x770>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f0      	beq.n	800ad08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d106      	bne.n	800ad3c <HAL_RCC_OscConfig+0x584>
 800ad2e:	4b7d      	ldr	r3, [pc, #500]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad32:	4a7c      	ldr	r2, [pc, #496]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	6713      	str	r3, [r2, #112]	; 0x70
 800ad3a:	e02d      	b.n	800ad98 <HAL_RCC_OscConfig+0x5e0>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10c      	bne.n	800ad5e <HAL_RCC_OscConfig+0x5a6>
 800ad44:	4b77      	ldr	r3, [pc, #476]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	4a76      	ldr	r2, [pc, #472]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad4a:	f023 0301 	bic.w	r3, r3, #1
 800ad4e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad50:	4b74      	ldr	r3, [pc, #464]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad54:	4a73      	ldr	r2, [pc, #460]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad56:	f023 0304 	bic.w	r3, r3, #4
 800ad5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad5c:	e01c      	b.n	800ad98 <HAL_RCC_OscConfig+0x5e0>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b05      	cmp	r3, #5
 800ad64:	d10c      	bne.n	800ad80 <HAL_RCC_OscConfig+0x5c8>
 800ad66:	4b6f      	ldr	r3, [pc, #444]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad6a:	4a6e      	ldr	r2, [pc, #440]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad6c:	f043 0304 	orr.w	r3, r3, #4
 800ad70:	6713      	str	r3, [r2, #112]	; 0x70
 800ad72:	4b6c      	ldr	r3, [pc, #432]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad76:	4a6b      	ldr	r2, [pc, #428]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad78:	f043 0301 	orr.w	r3, r3, #1
 800ad7c:	6713      	str	r3, [r2, #112]	; 0x70
 800ad7e:	e00b      	b.n	800ad98 <HAL_RCC_OscConfig+0x5e0>
 800ad80:	4b68      	ldr	r3, [pc, #416]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad84:	4a67      	ldr	r2, [pc, #412]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad86:	f023 0301 	bic.w	r3, r3, #1
 800ad8a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad8c:	4b65      	ldr	r3, [pc, #404]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad90:	4a64      	ldr	r2, [pc, #400]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ad92:	f023 0304 	bic.w	r3, r3, #4
 800ad96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d015      	beq.n	800adcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ada0:	f7fc f95a 	bl	8007058 <HAL_GetTick>
 800ada4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ada6:	e00a      	b.n	800adbe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ada8:	f7fc f956 	bl	8007058 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d901      	bls.n	800adbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e123      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adbe:	4b59      	ldr	r3, [pc, #356]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800adc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d0ee      	beq.n	800ada8 <HAL_RCC_OscConfig+0x5f0>
 800adca:	e014      	b.n	800adf6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adcc:	f7fc f944 	bl	8007058 <HAL_GetTick>
 800add0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800add2:	e00a      	b.n	800adea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800add4:	f7fc f940 	bl	8007058 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d901      	bls.n	800adea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e10d      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800adea:	4b4e      	ldr	r3, [pc, #312]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800adec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1ee      	bne.n	800add4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 8102 	beq.w	800b004 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae00:	4b48      	ldr	r3, [pc, #288]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae08:	2b18      	cmp	r3, #24
 800ae0a:	f000 80bd 	beq.w	800af88 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	f040 809e 	bne.w	800af54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae18:	4b42      	ldr	r3, [pc, #264]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a41      	ldr	r2, [pc, #260]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae24:	f7fc f918 	bl	8007058 <HAL_GetTick>
 800ae28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae2a:	e008      	b.n	800ae3e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae2c:	f7fc f914 	bl	8007058 <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d901      	bls.n	800ae3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	e0e3      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae3e:	4b39      	ldr	r3, [pc, #228]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1f0      	bne.n	800ae2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae4a:	4b36      	ldr	r3, [pc, #216]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae4e:	4b37      	ldr	r3, [pc, #220]	; (800af2c <HAL_RCC_OscConfig+0x774>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae5a:	0112      	lsls	r2, r2, #4
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	4931      	ldr	r1, [pc, #196]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	628b      	str	r3, [r1, #40]	; 0x28
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae72:	3b01      	subs	r3, #1
 800ae74:	025b      	lsls	r3, r3, #9
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	041b      	lsls	r3, r3, #16
 800ae82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae86:	431a      	orrs	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	061b      	lsls	r3, r3, #24
 800ae90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae94:	4923      	ldr	r1, [pc, #140]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ae9a:	4b22      	ldr	r3, [pc, #136]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800ae9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9e:	4a21      	ldr	r2, [pc, #132]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aea0:	f023 0301 	bic.w	r3, r3, #1
 800aea4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aea6:	4b1f      	ldr	r3, [pc, #124]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aeaa:	4b21      	ldr	r3, [pc, #132]	; (800af30 <HAL_RCC_OscConfig+0x778>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aeb2:	00d2      	lsls	r2, r2, #3
 800aeb4:	491b      	ldr	r1, [pc, #108]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aeba:	4b1a      	ldr	r3, [pc, #104]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	f023 020c 	bic.w	r2, r3, #12
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	4917      	ldr	r1, [pc, #92]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aecc:	4b15      	ldr	r3, [pc, #84]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	f023 0202 	bic.w	r2, r3, #2
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed8:	4912      	ldr	r1, [pc, #72]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aede:	4b11      	ldr	r3, [pc, #68]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee2:	4a10      	ldr	r2, [pc, #64]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeea:	4b0e      	ldr	r3, [pc, #56]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	4a0d      	ldr	r2, [pc, #52]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aef6:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	4a0a      	ldr	r2, [pc, #40]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800aefc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800af02:	4b08      	ldr	r3, [pc, #32]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800af04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af06:	4a07      	ldr	r2, [pc, #28]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800af08:	f043 0301 	orr.w	r3, r3, #1
 800af0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a04      	ldr	r2, [pc, #16]	; (800af24 <HAL_RCC_OscConfig+0x76c>)
 800af14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af1a:	f7fc f89d 	bl	8007058 <HAL_GetTick>
 800af1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af20:	e011      	b.n	800af46 <HAL_RCC_OscConfig+0x78e>
 800af22:	bf00      	nop
 800af24:	58024400 	.word	0x58024400
 800af28:	58024800 	.word	0x58024800
 800af2c:	fffffc0c 	.word	0xfffffc0c
 800af30:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af34:	f7fc f890 	bl	8007058 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d901      	bls.n	800af46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e05f      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af46:	4b32      	ldr	r3, [pc, #200]	; (800b010 <HAL_RCC_OscConfig+0x858>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f0      	beq.n	800af34 <HAL_RCC_OscConfig+0x77c>
 800af52:	e057      	b.n	800b004 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af54:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <HAL_RCC_OscConfig+0x858>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a2d      	ldr	r2, [pc, #180]	; (800b010 <HAL_RCC_OscConfig+0x858>)
 800af5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af60:	f7fc f87a 	bl	8007058 <HAL_GetTick>
 800af64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af66:	e008      	b.n	800af7a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af68:	f7fc f876 	bl	8007058 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d901      	bls.n	800af7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e045      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af7a:	4b25      	ldr	r3, [pc, #148]	; (800b010 <HAL_RCC_OscConfig+0x858>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f0      	bne.n	800af68 <HAL_RCC_OscConfig+0x7b0>
 800af86:	e03d      	b.n	800b004 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af88:	4b21      	ldr	r3, [pc, #132]	; (800b010 <HAL_RCC_OscConfig+0x858>)
 800af8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af8e:	4b20      	ldr	r3, [pc, #128]	; (800b010 <HAL_RCC_OscConfig+0x858>)
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d031      	beq.n	800b000 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f003 0203 	and.w	r2, r3, #3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d12a      	bne.n	800b000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	091b      	lsrs	r3, r3, #4
 800afae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d122      	bne.n	800b000 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d11a      	bne.n	800b000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	0a5b      	lsrs	r3, r3, #9
 800afce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afd8:	429a      	cmp	r2, r3
 800afda:	d111      	bne.n	800b000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afea:	429a      	cmp	r2, r3
 800afec:	d108      	bne.n	800b000 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	0e1b      	lsrs	r3, r3, #24
 800aff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800affc:	429a      	cmp	r2, r3
 800affe:	d001      	beq.n	800b004 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3730      	adds	r7, #48	; 0x30
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400

0800b014 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e19c      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b028:	4b8a      	ldr	r3, [pc, #552]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 030f 	and.w	r3, r3, #15
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d910      	bls.n	800b058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b036:	4b87      	ldr	r3, [pc, #540]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f023 020f 	bic.w	r2, r3, #15
 800b03e:	4985      	ldr	r1, [pc, #532]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	4313      	orrs	r3, r2
 800b044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b046:	4b83      	ldr	r3, [pc, #524]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 030f 	and.w	r3, r3, #15
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d001      	beq.n	800b058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e184      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	d010      	beq.n	800b086 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691a      	ldr	r2, [r3, #16]
 800b068:	4b7b      	ldr	r3, [pc, #492]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b070:	429a      	cmp	r2, r3
 800b072:	d908      	bls.n	800b086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b074:	4b78      	ldr	r3, [pc, #480]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	4975      	ldr	r1, [pc, #468]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b082:	4313      	orrs	r3, r2
 800b084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0308 	and.w	r3, r3, #8
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d010      	beq.n	800b0b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	695a      	ldr	r2, [r3, #20]
 800b096:	4b70      	ldr	r3, [pc, #448]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d908      	bls.n	800b0b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0a2:	4b6d      	ldr	r3, [pc, #436]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	496a      	ldr	r1, [pc, #424]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0310 	and.w	r3, r3, #16
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d010      	beq.n	800b0e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	699a      	ldr	r2, [r3, #24]
 800b0c4:	4b64      	ldr	r3, [pc, #400]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d908      	bls.n	800b0e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0d0:	4b61      	ldr	r3, [pc, #388]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	495e      	ldr	r1, [pc, #376]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	69da      	ldr	r2, [r3, #28]
 800b0f2:	4b59      	ldr	r3, [pc, #356]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d908      	bls.n	800b110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b0fe:	4b56      	ldr	r3, [pc, #344]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	4953      	ldr	r1, [pc, #332]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0302 	and.w	r3, r3, #2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d010      	beq.n	800b13e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68da      	ldr	r2, [r3, #12]
 800b120:	4b4d      	ldr	r3, [pc, #308]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	f003 030f 	and.w	r3, r3, #15
 800b128:	429a      	cmp	r2, r3
 800b12a:	d908      	bls.n	800b13e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b12c:	4b4a      	ldr	r3, [pc, #296]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	f023 020f 	bic.w	r2, r3, #15
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	4947      	ldr	r1, [pc, #284]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d055      	beq.n	800b1f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b14a:	4b43      	ldr	r3, [pc, #268]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	4940      	ldr	r1, [pc, #256]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d107      	bne.n	800b174 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b164:	4b3c      	ldr	r3, [pc, #240]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d121      	bne.n	800b1b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0f6      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d107      	bne.n	800b18c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b17c:	4b36      	ldr	r3, [pc, #216]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d115      	bne.n	800b1b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	e0ea      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d107      	bne.n	800b1a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b194:	4b30      	ldr	r3, [pc, #192]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d109      	bne.n	800b1b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e0de      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1a4:	4b2c      	ldr	r3, [pc, #176]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e0d6      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1b4:	4b28      	ldr	r3, [pc, #160]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	f023 0207 	bic.w	r2, r3, #7
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	4925      	ldr	r1, [pc, #148]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1c6:	f7fb ff47 	bl	8007058 <HAL_GetTick>
 800b1ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1cc:	e00a      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1ce:	f7fb ff43 	bl	8007058 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d901      	bls.n	800b1e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e0be      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1e4:	4b1c      	ldr	r3, [pc, #112]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d1eb      	bne.n	800b1ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d010      	beq.n	800b224 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	4b14      	ldr	r3, [pc, #80]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	429a      	cmp	r2, r3
 800b210:	d208      	bcs.n	800b224 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b212:	4b11      	ldr	r3, [pc, #68]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	f023 020f 	bic.w	r2, r3, #15
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	490e      	ldr	r1, [pc, #56]	; (800b258 <HAL_RCC_ClockConfig+0x244>)
 800b220:	4313      	orrs	r3, r2
 800b222:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b224:	4b0b      	ldr	r3, [pc, #44]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d214      	bcs.n	800b25c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b232:	4b08      	ldr	r3, [pc, #32]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f023 020f 	bic.w	r2, r3, #15
 800b23a:	4906      	ldr	r1, [pc, #24]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	4313      	orrs	r3, r2
 800b240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b242:	4b04      	ldr	r3, [pc, #16]	; (800b254 <HAL_RCC_ClockConfig+0x240>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 030f 	and.w	r3, r3, #15
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d005      	beq.n	800b25c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e086      	b.n	800b362 <HAL_RCC_ClockConfig+0x34e>
 800b254:	52002000 	.word	0x52002000
 800b258:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	d010      	beq.n	800b28a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	4b3f      	ldr	r3, [pc, #252]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b274:	429a      	cmp	r2, r3
 800b276:	d208      	bcs.n	800b28a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b278:	4b3c      	ldr	r3, [pc, #240]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	4939      	ldr	r1, [pc, #228]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b286:	4313      	orrs	r3, r2
 800b288:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 0308 	and.w	r3, r3, #8
 800b292:	2b00      	cmp	r3, #0
 800b294:	d010      	beq.n	800b2b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	695a      	ldr	r2, [r3, #20]
 800b29a:	4b34      	ldr	r3, [pc, #208]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d208      	bcs.n	800b2b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2a6:	4b31      	ldr	r3, [pc, #196]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	492e      	ldr	r1, [pc, #184]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0310 	and.w	r3, r3, #16
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d010      	beq.n	800b2e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	699a      	ldr	r2, [r3, #24]
 800b2c8:	4b28      	ldr	r3, [pc, #160]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d208      	bcs.n	800b2e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2d4:	4b25      	ldr	r3, [pc, #148]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	4922      	ldr	r1, [pc, #136]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d010      	beq.n	800b314 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	69da      	ldr	r2, [r3, #28]
 800b2f6:	4b1d      	ldr	r3, [pc, #116]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d208      	bcs.n	800b314 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b302:	4b1a      	ldr	r3, [pc, #104]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	4917      	ldr	r1, [pc, #92]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b310:	4313      	orrs	r3, r2
 800b312:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b314:	f000 f834 	bl	800b380 <HAL_RCC_GetSysClockFreq>
 800b318:	4602      	mov	r2, r0
 800b31a:	4b14      	ldr	r3, [pc, #80]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	0a1b      	lsrs	r3, r3, #8
 800b320:	f003 030f 	and.w	r3, r3, #15
 800b324:	4912      	ldr	r1, [pc, #72]	; (800b370 <HAL_RCC_ClockConfig+0x35c>)
 800b326:	5ccb      	ldrb	r3, [r1, r3]
 800b328:	f003 031f 	and.w	r3, r3, #31
 800b32c:	fa22 f303 	lsr.w	r3, r2, r3
 800b330:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b332:	4b0e      	ldr	r3, [pc, #56]	; (800b36c <HAL_RCC_ClockConfig+0x358>)
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	4a0d      	ldr	r2, [pc, #52]	; (800b370 <HAL_RCC_ClockConfig+0x35c>)
 800b33c:	5cd3      	ldrb	r3, [r2, r3]
 800b33e:	f003 031f 	and.w	r3, r3, #31
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	fa22 f303 	lsr.w	r3, r2, r3
 800b348:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <HAL_RCC_ClockConfig+0x360>)
 800b34a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b34c:	4a0a      	ldr	r2, [pc, #40]	; (800b378 <HAL_RCC_ClockConfig+0x364>)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b352:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <HAL_RCC_ClockConfig+0x368>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f7fb fe34 	bl	8006fc4 <HAL_InitTick>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	58024400 	.word	0x58024400
 800b370:	0801524c 	.word	0x0801524c
 800b374:	24000234 	.word	0x24000234
 800b378:	24000230 	.word	0x24000230
 800b37c:	24000238 	.word	0x24000238

0800b380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b380:	b480      	push	{r7}
 800b382:	b089      	sub	sp, #36	; 0x24
 800b384:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b386:	4bb3      	ldr	r3, [pc, #716]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b38e:	2b18      	cmp	r3, #24
 800b390:	f200 8155 	bhi.w	800b63e <HAL_RCC_GetSysClockFreq+0x2be>
 800b394:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b401 	.word	0x0800b401
 800b3a0:	0800b63f 	.word	0x0800b63f
 800b3a4:	0800b63f 	.word	0x0800b63f
 800b3a8:	0800b63f 	.word	0x0800b63f
 800b3ac:	0800b63f 	.word	0x0800b63f
 800b3b0:	0800b63f 	.word	0x0800b63f
 800b3b4:	0800b63f 	.word	0x0800b63f
 800b3b8:	0800b63f 	.word	0x0800b63f
 800b3bc:	0800b427 	.word	0x0800b427
 800b3c0:	0800b63f 	.word	0x0800b63f
 800b3c4:	0800b63f 	.word	0x0800b63f
 800b3c8:	0800b63f 	.word	0x0800b63f
 800b3cc:	0800b63f 	.word	0x0800b63f
 800b3d0:	0800b63f 	.word	0x0800b63f
 800b3d4:	0800b63f 	.word	0x0800b63f
 800b3d8:	0800b63f 	.word	0x0800b63f
 800b3dc:	0800b42d 	.word	0x0800b42d
 800b3e0:	0800b63f 	.word	0x0800b63f
 800b3e4:	0800b63f 	.word	0x0800b63f
 800b3e8:	0800b63f 	.word	0x0800b63f
 800b3ec:	0800b63f 	.word	0x0800b63f
 800b3f0:	0800b63f 	.word	0x0800b63f
 800b3f4:	0800b63f 	.word	0x0800b63f
 800b3f8:	0800b63f 	.word	0x0800b63f
 800b3fc:	0800b433 	.word	0x0800b433
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b400:	4b94      	ldr	r3, [pc, #592]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b40c:	4b91      	ldr	r3, [pc, #580]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	08db      	lsrs	r3, r3, #3
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	4a90      	ldr	r2, [pc, #576]	; (800b658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b418:	fa22 f303 	lsr.w	r3, r2, r3
 800b41c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b41e:	e111      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b420:	4b8d      	ldr	r3, [pc, #564]	; (800b658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b422:	61bb      	str	r3, [r7, #24]
    break;
 800b424:	e10e      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b426:	4b8d      	ldr	r3, [pc, #564]	; (800b65c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b428:	61bb      	str	r3, [r7, #24]
    break;
 800b42a:	e10b      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b42c:	4b8c      	ldr	r3, [pc, #560]	; (800b660 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b42e:	61bb      	str	r3, [r7, #24]
    break;
 800b430:	e108      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b432:	4b88      	ldr	r3, [pc, #544]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b43c:	4b85      	ldr	r3, [pc, #532]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b440:	091b      	lsrs	r3, r3, #4
 800b442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b446:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b448:	4b82      	ldr	r3, [pc, #520]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b452:	4b80      	ldr	r3, [pc, #512]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b456:	08db      	lsrs	r3, r3, #3
 800b458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	fb02 f303 	mul.w	r3, r2, r3
 800b462:	ee07 3a90 	vmov	s15, r3
 800b466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 80e1 	beq.w	800b638 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	f000 8083 	beq.w	800b584 <HAL_RCC_GetSysClockFreq+0x204>
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2b02      	cmp	r3, #2
 800b482:	f200 80a1 	bhi.w	800b5c8 <HAL_RCC_GetSysClockFreq+0x248>
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <HAL_RCC_GetSysClockFreq+0x114>
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d056      	beq.n	800b540 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b492:	e099      	b.n	800b5c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b494:	4b6f      	ldr	r3, [pc, #444]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0320 	and.w	r3, r3, #32
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d02d      	beq.n	800b4fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4a0:	4b6c      	ldr	r3, [pc, #432]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	08db      	lsrs	r3, r3, #3
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	4a6b      	ldr	r2, [pc, #428]	; (800b658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ca:	4b62      	ldr	r3, [pc, #392]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4de:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b4fa:	e087      	b.n	800b60c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b506:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b668 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b50e:	4b51      	ldr	r3, [pc, #324]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b522:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b53a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b53e:	e065      	b.n	800b60c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b66c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b552:	4b40      	ldr	r3, [pc, #256]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55a:	ee07 3a90 	vmov	s15, r3
 800b55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b562:	ed97 6a02 	vldr	s12, [r7, #8]
 800b566:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b582:	e043      	b.n	800b60c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b670 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b596:	4b2f      	ldr	r3, [pc, #188]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5c6:	e021      	b.n	800b60c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b66c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5da:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e2:	ee07 3a90 	vmov	s15, r3
 800b5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b60a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b610:	0a5b      	lsrs	r3, r3, #9
 800b612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b616:	3301      	adds	r3, #1
 800b618:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	ee07 3a90 	vmov	s15, r3
 800b620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b624:	edd7 6a07 	vldr	s13, [r7, #28]
 800b628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b62c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b630:	ee17 3a90 	vmov	r3, s15
 800b634:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b636:	e005      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	61bb      	str	r3, [r7, #24]
    break;
 800b63c:	e002      	b.n	800b644 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b63e:	4b07      	ldr	r3, [pc, #28]	; (800b65c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b640:	61bb      	str	r3, [r7, #24]
    break;
 800b642:	bf00      	nop
  }

  return sysclockfreq;
 800b644:	69bb      	ldr	r3, [r7, #24]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3724      	adds	r7, #36	; 0x24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	58024400 	.word	0x58024400
 800b658:	03d09000 	.word	0x03d09000
 800b65c:	003d0900 	.word	0x003d0900
 800b660:	02dc6c00 	.word	0x02dc6c00
 800b664:	46000000 	.word	0x46000000
 800b668:	4c742400 	.word	0x4c742400
 800b66c:	4a742400 	.word	0x4a742400
 800b670:	4c371b00 	.word	0x4c371b00

0800b674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b67a:	f7ff fe81 	bl	800b380 <HAL_RCC_GetSysClockFreq>
 800b67e:	4602      	mov	r2, r0
 800b680:	4b10      	ldr	r3, [pc, #64]	; (800b6c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	0a1b      	lsrs	r3, r3, #8
 800b686:	f003 030f 	and.w	r3, r3, #15
 800b68a:	490f      	ldr	r1, [pc, #60]	; (800b6c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b68c:	5ccb      	ldrb	r3, [r1, r3]
 800b68e:	f003 031f 	and.w	r3, r3, #31
 800b692:	fa22 f303 	lsr.w	r3, r2, r3
 800b696:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b698:	4b0a      	ldr	r3, [pc, #40]	; (800b6c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f003 030f 	and.w	r3, r3, #15
 800b6a0:	4a09      	ldr	r2, [pc, #36]	; (800b6c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6a2:	5cd3      	ldrb	r3, [r2, r3]
 800b6a4:	f003 031f 	and.w	r3, r3, #31
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ae:	4a07      	ldr	r2, [pc, #28]	; (800b6cc <HAL_RCC_GetHCLKFreq+0x58>)
 800b6b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6b2:	4a07      	ldr	r2, [pc, #28]	; (800b6d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <HAL_RCC_GetHCLKFreq+0x58>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	58024400 	.word	0x58024400
 800b6c8:	0801524c 	.word	0x0801524c
 800b6cc:	24000234 	.word	0x24000234
 800b6d0:	24000230 	.word	0x24000230

0800b6d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b6d8:	f7ff ffcc 	bl	800b674 <HAL_RCC_GetHCLKFreq>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	091b      	lsrs	r3, r3, #4
 800b6e4:	f003 0307 	and.w	r3, r3, #7
 800b6e8:	4904      	ldr	r1, [pc, #16]	; (800b6fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b6ea:	5ccb      	ldrb	r3, [r1, r3]
 800b6ec:	f003 031f 	and.w	r3, r3, #31
 800b6f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	58024400 	.word	0x58024400
 800b6fc:	0801524c 	.word	0x0801524c

0800b700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b704:	f7ff ffb6 	bl	800b674 <HAL_RCC_GetHCLKFreq>
 800b708:	4602      	mov	r2, r0
 800b70a:	4b06      	ldr	r3, [pc, #24]	; (800b724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	0a1b      	lsrs	r3, r3, #8
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	4904      	ldr	r1, [pc, #16]	; (800b728 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b716:	5ccb      	ldrb	r3, [r1, r3]
 800b718:	f003 031f 	and.w	r3, r3, #31
 800b71c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b720:	4618      	mov	r0, r3
 800b722:	bd80      	pop	{r7, pc}
 800b724:	58024400 	.word	0x58024400
 800b728:	0801524c 	.word	0x0801524c

0800b72c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b734:	2300      	movs	r3, #0
 800b736:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b738:	2300      	movs	r3, #0
 800b73a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d03f      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b74c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b750:	d02a      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b756:	d824      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b75c:	d018      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b75e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b762:	d81e      	bhi.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b76c:	d007      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b76e:	e018      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b770:	4ba3      	ldr	r3, [pc, #652]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	4aa2      	ldr	r2, [pc, #648]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b77a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b77c:	e015      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3304      	adds	r3, #4
 800b782:	2102      	movs	r1, #2
 800b784:	4618      	mov	r0, r3
 800b786:	f001 f9d5 	bl	800cb34 <RCCEx_PLL2_Config>
 800b78a:	4603      	mov	r3, r0
 800b78c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b78e:	e00c      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	3324      	adds	r3, #36	; 0x24
 800b794:	2102      	movs	r1, #2
 800b796:	4618      	mov	r0, r3
 800b798:	f001 fa7e 	bl	800cc98 <RCCEx_PLL3_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b7a0:	e003      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b7a6:	e000      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b7a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d109      	bne.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b7b0:	4b93      	ldr	r3, [pc, #588]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7bc:	4990      	ldr	r1, [pc, #576]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	650b      	str	r3, [r1, #80]	; 0x50
 800b7c2:	e001      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c4:	7dfb      	ldrb	r3, [r7, #23]
 800b7c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d03d      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d8:	2b04      	cmp	r3, #4
 800b7da:	d826      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b7dc:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e2:	bf00      	nop
 800b7e4:	0800b7f9 	.word	0x0800b7f9
 800b7e8:	0800b807 	.word	0x0800b807
 800b7ec:	0800b819 	.word	0x0800b819
 800b7f0:	0800b831 	.word	0x0800b831
 800b7f4:	0800b831 	.word	0x0800b831
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f8:	4b81      	ldr	r3, [pc, #516]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	4a80      	ldr	r2, [pc, #512]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b802:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b804:	e015      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3304      	adds	r3, #4
 800b80a:	2100      	movs	r1, #0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f001 f991 	bl	800cb34 <RCCEx_PLL2_Config>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b816:	e00c      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3324      	adds	r3, #36	; 0x24
 800b81c:	2100      	movs	r1, #0
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fa3a 	bl	800cc98 <RCCEx_PLL3_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b828:	e003      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	75fb      	strb	r3, [r7, #23]
      break;
 800b82e:	e000      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b830:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d109      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b838:	4b71      	ldr	r3, [pc, #452]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b83c:	f023 0207 	bic.w	r2, r3, #7
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b844:	496e      	ldr	r1, [pc, #440]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b846:	4313      	orrs	r3, r2
 800b848:	650b      	str	r3, [r1, #80]	; 0x50
 800b84a:	e001      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d042      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b864:	d02b      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b86a:	d825      	bhi.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b86c:	2bc0      	cmp	r3, #192	; 0xc0
 800b86e:	d028      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b870:	2bc0      	cmp	r3, #192	; 0xc0
 800b872:	d821      	bhi.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b874:	2b80      	cmp	r3, #128	; 0x80
 800b876:	d016      	beq.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b878:	2b80      	cmp	r3, #128	; 0x80
 800b87a:	d81d      	bhi.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b880:	2b40      	cmp	r3, #64	; 0x40
 800b882:	d007      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b884:	e018      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b886:	4b5e      	ldr	r3, [pc, #376]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88a:	4a5d      	ldr	r2, [pc, #372]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b88c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b890:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b892:	e017      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3304      	adds	r3, #4
 800b898:	2100      	movs	r1, #0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 f94a 	bl	800cb34 <RCCEx_PLL2_Config>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8a4:	e00e      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	3324      	adds	r3, #36	; 0x24
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f001 f9f3 	bl	800cc98 <RCCEx_PLL3_Config>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b8b6:	e005      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b8bc:	e002      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b8be:	bf00      	nop
 800b8c0:	e000      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b8c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b8ca:	4b4d      	ldr	r3, [pc, #308]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d6:	494a      	ldr	r1, [pc, #296]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	650b      	str	r3, [r1, #80]	; 0x50
 800b8dc:	e001      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8de:	7dfb      	ldrb	r3, [r7, #23]
 800b8e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d049      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8f8:	d030      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b8fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8fe:	d82a      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b900:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b904:	d02c      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b906:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b90a:	d824      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b90c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b910:	d018      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b916:	d81e      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b91c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b920:	d007      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b922:	e018      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b924:	4b36      	ldr	r3, [pc, #216]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	4a35      	ldr	r2, [pc, #212]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b92e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b930:	e017      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3304      	adds	r3, #4
 800b936:	2100      	movs	r1, #0
 800b938:	4618      	mov	r0, r3
 800b93a:	f001 f8fb 	bl	800cb34 <RCCEx_PLL2_Config>
 800b93e:	4603      	mov	r3, r0
 800b940:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b942:	e00e      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3324      	adds	r3, #36	; 0x24
 800b948:	2100      	movs	r1, #0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f001 f9a4 	bl	800cc98 <RCCEx_PLL3_Config>
 800b950:	4603      	mov	r3, r0
 800b952:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b954:	e005      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	75fb      	strb	r3, [r7, #23]
      break;
 800b95a:	e002      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b95c:	bf00      	nop
 800b95e:	e000      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b960:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b968:	4b25      	ldr	r3, [pc, #148]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b976:	4922      	ldr	r1, [pc, #136]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	658b      	str	r3, [r1, #88]	; 0x58
 800b97c:	e001      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d04b      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b998:	d030      	beq.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b99a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b99e:	d82a      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9a4:	d02e      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b9a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b9aa:	d824      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9b0:	d018      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b9b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9b6:	d81e      	bhi.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b9bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9c0:	d007      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b9c2:	e018      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	4a0d      	ldr	r2, [pc, #52]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b9ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9d0:	e019      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 f8ab 	bl	800cb34 <RCCEx_PLL2_Config>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b9e2:	e010      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3324      	adds	r3, #36	; 0x24
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f001 f954 	bl	800cc98 <RCCEx_PLL3_Config>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9f4:	e007      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9fa:	e004      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b9fc:	bf00      	nop
 800b9fe:	e002      	b.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ba00:	58024400 	.word	0x58024400
      break;
 800ba04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10a      	bne.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ba0c:	4b99      	ldr	r3, [pc, #612]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ba1a:	4996      	ldr	r1, [pc, #600]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	658b      	str	r3, [r1, #88]	; 0x58
 800ba20:	e001      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d032      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba36:	2b30      	cmp	r3, #48	; 0x30
 800ba38:	d01c      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800ba3a:	2b30      	cmp	r3, #48	; 0x30
 800ba3c:	d817      	bhi.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	d00c      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x330>
 800ba42:	2b20      	cmp	r3, #32
 800ba44:	d813      	bhi.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d016      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ba4a:	2b10      	cmp	r3, #16
 800ba4c:	d10f      	bne.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba4e:	4b89      	ldr	r3, [pc, #548]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	4a88      	ldr	r2, [pc, #544]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ba5a:	e00e      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	2102      	movs	r1, #2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 f866 	bl	800cb34 <RCCEx_PLL2_Config>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800ba6c:	e005      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	75fb      	strb	r3, [r7, #23]
      break;
 800ba72:	e002      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ba74:	bf00      	nop
 800ba76:	e000      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800ba78:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d109      	bne.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ba80:	4b7c      	ldr	r3, [pc, #496]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba8c:	4979      	ldr	r1, [pc, #484]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ba92:	e001      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d047      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baac:	d030      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800baae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bab2:	d82a      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bab4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bab8:	d02c      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800baba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800babe:	d824      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac4:	d018      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800bac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baca:	d81e      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800bad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad4:	d007      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800bad6:	e018      	b.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bad8:	4b66      	ldr	r3, [pc, #408]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	4a65      	ldr	r2, [pc, #404]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bae4:	e017      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	3304      	adds	r3, #4
 800baea:	2100      	movs	r1, #0
 800baec:	4618      	mov	r0, r3
 800baee:	f001 f821 	bl	800cb34 <RCCEx_PLL2_Config>
 800baf2:	4603      	mov	r3, r0
 800baf4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800baf6:	e00e      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3324      	adds	r3, #36	; 0x24
 800bafc:	2100      	movs	r1, #0
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 f8ca 	bl	800cc98 <RCCEx_PLL3_Config>
 800bb04:	4603      	mov	r3, r0
 800bb06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bb08:	e005      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb0e:	e002      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bb10:	bf00      	nop
 800bb12:	e000      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800bb14:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d109      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb1c:	4b55      	ldr	r3, [pc, #340]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb20:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb28:	4952      	ldr	r1, [pc, #328]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	650b      	str	r3, [r1, #80]	; 0x50
 800bb2e:	e001      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	7dfb      	ldrb	r3, [r7, #23]
 800bb32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d049      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb48:	d02e      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800bb4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb4e:	d828      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb54:	d02a      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x480>
 800bb56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb5a:	d822      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb60:	d026      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bb62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb66:	d81c      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb6c:	d010      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800bb6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb72:	d816      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01d      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bb78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb7c:	d111      	bne.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	3304      	adds	r3, #4
 800bb82:	2101      	movs	r1, #1
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 ffd5 	bl	800cb34 <RCCEx_PLL2_Config>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bb8e:	e012      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	3324      	adds	r3, #36	; 0x24
 800bb94:	2101      	movs	r1, #1
 800bb96:	4618      	mov	r0, r3
 800bb98:	f001 f87e 	bl	800cc98 <RCCEx_PLL3_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bba0:	e009      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	75fb      	strb	r3, [r7, #23]
      break;
 800bba6:	e006      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bba8:	bf00      	nop
 800bbaa:	e004      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbac:	bf00      	nop
 800bbae:	e002      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbb0:	bf00      	nop
 800bbb2:	e000      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bbb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbb6:	7dfb      	ldrb	r3, [r7, #23]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d109      	bne.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bbbc:	4b2d      	ldr	r3, [pc, #180]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbc8:	492a      	ldr	r1, [pc, #168]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	650b      	str	r3, [r1, #80]	; 0x50
 800bbce:	e001      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d04d      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbea:	d02e      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bbec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbf0:	d828      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf6:	d02a      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbfc:	d822      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bbfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc02:	d026      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bc04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc08:	d81c      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc0e:	d010      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bc10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc14:	d816      	bhi.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d01d      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bc1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc1e:	d111      	bne.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3304      	adds	r3, #4
 800bc24:	2101      	movs	r1, #1
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 ff84 	bl	800cb34 <RCCEx_PLL2_Config>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc30:	e012      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	3324      	adds	r3, #36	; 0x24
 800bc36:	2101      	movs	r1, #1
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f001 f82d 	bl	800cc98 <RCCEx_PLL3_Config>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bc42:	e009      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	75fb      	strb	r3, [r7, #23]
      break;
 800bc48:	e006      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc4a:	bf00      	nop
 800bc4c:	e004      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc4e:	bf00      	nop
 800bc50:	e002      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc52:	bf00      	nop
 800bc54:	e000      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bc56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10c      	bne.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc5e:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc6c:	4901      	ldr	r1, [pc, #4]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	658b      	str	r3, [r1, #88]	; 0x58
 800bc72:	e003      	b.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bc74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d02f      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc90:	d00e      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bc92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc96:	d814      	bhi.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d015      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bc9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bca0:	d10f      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bca2:	4baf      	ldr	r3, [pc, #700]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	4aae      	ldr	r2, [pc, #696]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bcae:	e00c      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 ff3c 	bl	800cb34 <RCCEx_PLL2_Config>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bcc0:	e003      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	75fb      	strb	r3, [r7, #23]
      break;
 800bcc6:	e000      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bcc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcca:	7dfb      	ldrb	r3, [r7, #23]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d109      	bne.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bcd0:	4ba3      	ldr	r3, [pc, #652]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcdc:	49a0      	ldr	r1, [pc, #640]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcde:	4313      	orrs	r3, r2
 800bce0:	650b      	str	r3, [r1, #80]	; 0x50
 800bce2:	e001      	b.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
 800bce6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d032      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d81b      	bhi.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bcfc:	a201      	add	r2, pc, #4	; (adr r2, 800bd04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800bcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd02:	bf00      	nop
 800bd04:	0800bd3b 	.word	0x0800bd3b
 800bd08:	0800bd15 	.word	0x0800bd15
 800bd0c:	0800bd23 	.word	0x0800bd23
 800bd10:	0800bd3b 	.word	0x0800bd3b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd14:	4b92      	ldr	r3, [pc, #584]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd18:	4a91      	ldr	r2, [pc, #580]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd20:	e00c      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3304      	adds	r3, #4
 800bd26:	2102      	movs	r1, #2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 ff03 	bl	800cb34 <RCCEx_PLL2_Config>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bd32:	e003      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	75fb      	strb	r3, [r7, #23]
      break;
 800bd38:	e000      	b.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bd3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d109      	bne.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd42:	4b87      	ldr	r3, [pc, #540]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd46:	f023 0203 	bic.w	r2, r3, #3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4e:	4984      	ldr	r1, [pc, #528]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd50:	4313      	orrs	r3, r2
 800bd52:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bd54:	e001      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 8086 	beq.w	800be74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd68:	4b7e      	ldr	r3, [pc, #504]	; (800bf64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a7d      	ldr	r2, [pc, #500]	; (800bf64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bd6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd74:	f7fb f970 	bl	8007058 <HAL_GetTick>
 800bd78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd7a:	e009      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd7c:	f7fb f96c 	bl	8007058 <HAL_GetTick>
 800bd80:	4602      	mov	r2, r0
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	1ad3      	subs	r3, r2, r3
 800bd86:	2b64      	cmp	r3, #100	; 0x64
 800bd88:	d902      	bls.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	75fb      	strb	r3, [r7, #23]
        break;
 800bd8e:	e005      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd90:	4b74      	ldr	r3, [pc, #464]	; (800bf64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d0ef      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d166      	bne.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bda2:	4b6f      	ldr	r3, [pc, #444]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bda4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdac:	4053      	eors	r3, r2
 800bdae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d013      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bdb6:	4b6a      	ldr	r3, [pc, #424]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdbe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdc0:	4b67      	ldr	r3, [pc, #412]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc4:	4a66      	ldr	r2, [pc, #408]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bdcc:	4b64      	ldr	r3, [pc, #400]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd0:	4a63      	ldr	r2, [pc, #396]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdd6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bdd8:	4a61      	ldr	r2, [pc, #388]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bde4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde8:	d115      	bne.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdea:	f7fb f935 	bl	8007058 <HAL_GetTick>
 800bdee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdf0:	e00b      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdf2:	f7fb f931 	bl	8007058 <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800be00:	4293      	cmp	r3, r2
 800be02:	d902      	bls.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800be04:	2303      	movs	r3, #3
 800be06:	75fb      	strb	r3, [r7, #23]
            break;
 800be08:	e005      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be0a:	4b55      	ldr	r3, [pc, #340]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be0e:	f003 0302 	and.w	r3, r3, #2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0ed      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d126      	bne.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be2a:	d10d      	bne.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800be2c:	4b4c      	ldr	r3, [pc, #304]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be3a:	0919      	lsrs	r1, r3, #4
 800be3c:	4b4a      	ldr	r3, [pc, #296]	; (800bf68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800be3e:	400b      	ands	r3, r1
 800be40:	4947      	ldr	r1, [pc, #284]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be42:	4313      	orrs	r3, r2
 800be44:	610b      	str	r3, [r1, #16]
 800be46:	e005      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800be48:	4b45      	ldr	r3, [pc, #276]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	4a44      	ldr	r2, [pc, #272]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be52:	6113      	str	r3, [r2, #16]
 800be54:	4b42      	ldr	r3, [pc, #264]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be62:	493f      	ldr	r1, [pc, #252]	; (800bf60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800be64:	4313      	orrs	r3, r2
 800be66:	670b      	str	r3, [r1, #112]	; 0x70
 800be68:	e004      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	75bb      	strb	r3, [r7, #22]
 800be6e:	e001      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8085 	beq.w	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be86:	2b28      	cmp	r3, #40	; 0x28
 800be88:	d866      	bhi.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bf6d 	.word	0x0800bf6d
 800be94:	0800bf59 	.word	0x0800bf59
 800be98:	0800bf59 	.word	0x0800bf59
 800be9c:	0800bf59 	.word	0x0800bf59
 800bea0:	0800bf59 	.word	0x0800bf59
 800bea4:	0800bf59 	.word	0x0800bf59
 800bea8:	0800bf59 	.word	0x0800bf59
 800beac:	0800bf59 	.word	0x0800bf59
 800beb0:	0800bf35 	.word	0x0800bf35
 800beb4:	0800bf59 	.word	0x0800bf59
 800beb8:	0800bf59 	.word	0x0800bf59
 800bebc:	0800bf59 	.word	0x0800bf59
 800bec0:	0800bf59 	.word	0x0800bf59
 800bec4:	0800bf59 	.word	0x0800bf59
 800bec8:	0800bf59 	.word	0x0800bf59
 800becc:	0800bf59 	.word	0x0800bf59
 800bed0:	0800bf47 	.word	0x0800bf47
 800bed4:	0800bf59 	.word	0x0800bf59
 800bed8:	0800bf59 	.word	0x0800bf59
 800bedc:	0800bf59 	.word	0x0800bf59
 800bee0:	0800bf59 	.word	0x0800bf59
 800bee4:	0800bf59 	.word	0x0800bf59
 800bee8:	0800bf59 	.word	0x0800bf59
 800beec:	0800bf59 	.word	0x0800bf59
 800bef0:	0800bf6d 	.word	0x0800bf6d
 800bef4:	0800bf59 	.word	0x0800bf59
 800bef8:	0800bf59 	.word	0x0800bf59
 800befc:	0800bf59 	.word	0x0800bf59
 800bf00:	0800bf59 	.word	0x0800bf59
 800bf04:	0800bf59 	.word	0x0800bf59
 800bf08:	0800bf59 	.word	0x0800bf59
 800bf0c:	0800bf59 	.word	0x0800bf59
 800bf10:	0800bf6d 	.word	0x0800bf6d
 800bf14:	0800bf59 	.word	0x0800bf59
 800bf18:	0800bf59 	.word	0x0800bf59
 800bf1c:	0800bf59 	.word	0x0800bf59
 800bf20:	0800bf59 	.word	0x0800bf59
 800bf24:	0800bf59 	.word	0x0800bf59
 800bf28:	0800bf59 	.word	0x0800bf59
 800bf2c:	0800bf59 	.word	0x0800bf59
 800bf30:	0800bf6d 	.word	0x0800bf6d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3304      	adds	r3, #4
 800bf38:	2101      	movs	r1, #1
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fdfa 	bl	800cb34 <RCCEx_PLL2_Config>
 800bf40:	4603      	mov	r3, r0
 800bf42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bf44:	e013      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3324      	adds	r3, #36	; 0x24
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fea3 	bl	800cc98 <RCCEx_PLL3_Config>
 800bf52:	4603      	mov	r3, r0
 800bf54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bf56:	e00a      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf5c:	e007      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800bf5e:	bf00      	nop
 800bf60:	58024400 	.word	0x58024400
 800bf64:	58024800 	.word	0x58024800
 800bf68:	00ffffcf 	.word	0x00ffffcf
      break;
 800bf6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d109      	bne.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf74:	4b96      	ldr	r3, [pc, #600]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bf76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf78:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf80:	4993      	ldr	r1, [pc, #588]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bf82:	4313      	orrs	r3, r2
 800bf84:	654b      	str	r3, [r1, #84]	; 0x54
 800bf86:	e001      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
 800bf8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0302 	and.w	r3, r3, #2
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d038      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf9c:	2b05      	cmp	r3, #5
 800bf9e:	d821      	bhi.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800bfa0:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800bfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa6:	bf00      	nop
 800bfa8:	0800bfeb 	.word	0x0800bfeb
 800bfac:	0800bfc1 	.word	0x0800bfc1
 800bfb0:	0800bfd3 	.word	0x0800bfd3
 800bfb4:	0800bfeb 	.word	0x0800bfeb
 800bfb8:	0800bfeb 	.word	0x0800bfeb
 800bfbc:	0800bfeb 	.word	0x0800bfeb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 fdb4 	bl	800cb34 <RCCEx_PLL2_Config>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bfd0:	e00c      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3324      	adds	r3, #36	; 0x24
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 fe5d 	bl	800cc98 <RCCEx_PLL3_Config>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bfe2:	e003      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	75fb      	strb	r3, [r7, #23]
      break;
 800bfe8:	e000      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800bfea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d109      	bne.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bff2:	4b77      	ldr	r3, [pc, #476]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff6:	f023 0207 	bic.w	r2, r3, #7
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bffe:	4974      	ldr	r1, [pc, #464]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c000:	4313      	orrs	r3, r2
 800c002:	654b      	str	r3, [r1, #84]	; 0x54
 800c004:	e001      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0304 	and.w	r3, r3, #4
 800c012:	2b00      	cmp	r3, #0
 800c014:	d03a      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c01c:	2b05      	cmp	r3, #5
 800c01e:	d821      	bhi.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c020:	a201      	add	r2, pc, #4	; (adr r2, 800c028 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c06b 	.word	0x0800c06b
 800c02c:	0800c041 	.word	0x0800c041
 800c030:	0800c053 	.word	0x0800c053
 800c034:	0800c06b 	.word	0x0800c06b
 800c038:	0800c06b 	.word	0x0800c06b
 800c03c:	0800c06b 	.word	0x0800c06b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3304      	adds	r3, #4
 800c044:	2101      	movs	r1, #1
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fd74 	bl	800cb34 <RCCEx_PLL2_Config>
 800c04c:	4603      	mov	r3, r0
 800c04e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c050:	e00c      	b.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3324      	adds	r3, #36	; 0x24
 800c056:	2101      	movs	r1, #1
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 fe1d 	bl	800cc98 <RCCEx_PLL3_Config>
 800c05e:	4603      	mov	r3, r0
 800c060:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c062:	e003      	b.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	75fb      	strb	r3, [r7, #23]
      break;
 800c068:	e000      	b.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c06a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c072:	4b57      	ldr	r3, [pc, #348]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c076:	f023 0207 	bic.w	r2, r3, #7
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c080:	4953      	ldr	r1, [pc, #332]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c082:	4313      	orrs	r3, r2
 800c084:	658b      	str	r3, [r1, #88]	; 0x58
 800c086:	e001      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0320 	and.w	r3, r3, #32
 800c094:	2b00      	cmp	r3, #0
 800c096:	d04b      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0a2:	d02e      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c0a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0a8:	d828      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ae:	d02a      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0b4:	d822      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ba:	d026      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c0bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0c0:	d81c      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c6:	d010      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0cc:	d816      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d01d      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c0d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d6:	d111      	bne.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	2100      	movs	r1, #0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f000 fd28 	bl	800cb34 <RCCEx_PLL2_Config>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c0e8:	e012      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3324      	adds	r3, #36	; 0x24
 800c0ee:	2102      	movs	r1, #2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 fdd1 	bl	800cc98 <RCCEx_PLL3_Config>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c0fa:	e009      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c100:	e006      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c102:	bf00      	nop
 800c104:	e004      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c106:	bf00      	nop
 800c108:	e002      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c10a:	bf00      	nop
 800c10c:	e000      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c10e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10a      	bne.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c116:	4b2e      	ldr	r3, [pc, #184]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c124:	492a      	ldr	r1, [pc, #168]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c126:	4313      	orrs	r3, r2
 800c128:	654b      	str	r3, [r1, #84]	; 0x54
 800c12a:	e001      	b.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
 800c12e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d04d      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c142:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c146:	d02e      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c148:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c14c:	d828      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c152:	d02a      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c158:	d822      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c15a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c15e:	d026      	beq.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c164:	d81c      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c16a:	d010      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c170:	d816      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d01d      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17a:	d111      	bne.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3304      	adds	r3, #4
 800c180:	2100      	movs	r1, #0
 800c182:	4618      	mov	r0, r3
 800c184:	f000 fcd6 	bl	800cb34 <RCCEx_PLL2_Config>
 800c188:	4603      	mov	r3, r0
 800c18a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c18c:	e012      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3324      	adds	r3, #36	; 0x24
 800c192:	2102      	movs	r1, #2
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fd7f 	bl	800cc98 <RCCEx_PLL3_Config>
 800c19a:	4603      	mov	r3, r0
 800c19c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c19e:	e009      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1a4:	e006      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1a6:	bf00      	nop
 800c1a8:	e004      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1aa:	bf00      	nop
 800c1ac:	e002      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1ae:	bf00      	nop
 800c1b0:	e000      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c1b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1b4:	7dfb      	ldrb	r3, [r7, #23]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10c      	bne.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1ba:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1c8:	4901      	ldr	r1, [pc, #4]	; (800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	658b      	str	r3, [r1, #88]	; 0x58
 800c1ce:	e003      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c1d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d04b      	beq.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c1ee:	d02e      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c1f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c1f4:	d828      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c1f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1fa:	d02a      	beq.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c200:	d822      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c202:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c206:	d026      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c208:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c20c:	d81c      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c20e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c212:	d010      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c218:	d816      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d01d      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c222:	d111      	bne.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3304      	adds	r3, #4
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fc82 	bl	800cb34 <RCCEx_PLL2_Config>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c234:	e012      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3324      	adds	r3, #36	; 0x24
 800c23a:	2102      	movs	r1, #2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fd2b 	bl	800cc98 <RCCEx_PLL3_Config>
 800c242:	4603      	mov	r3, r0
 800c244:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c246:	e009      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	75fb      	strb	r3, [r7, #23]
      break;
 800c24c:	e006      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c24e:	bf00      	nop
 800c250:	e004      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c252:	bf00      	nop
 800c254:	e002      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c256:	bf00      	nop
 800c258:	e000      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c25a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10a      	bne.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c262:	4b9d      	ldr	r3, [pc, #628]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c270:	4999      	ldr	r1, [pc, #612]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c272:	4313      	orrs	r3, r2
 800c274:	658b      	str	r3, [r1, #88]	; 0x58
 800c276:	e001      	b.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01a      	beq.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c292:	d10a      	bne.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3324      	adds	r3, #36	; 0x24
 800c298:	2102      	movs	r1, #2
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fcfc 	bl	800cc98 <RCCEx_PLL3_Config>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c2aa:	4b8b      	ldr	r3, [pc, #556]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2b8:	4987      	ldr	r1, [pc, #540]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0310 	and.w	r3, r3, #16
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d01a      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2d4:	d10a      	bne.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	3324      	adds	r3, #36	; 0x24
 800c2da:	2102      	movs	r1, #2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fcdb 	bl	800cc98 <RCCEx_PLL3_Config>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c2ec:	4b7a      	ldr	r3, [pc, #488]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2fa:	4977      	ldr	r1, [pc, #476]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d034      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c316:	d01d      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c31c:	d817      	bhi.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c326:	d009      	beq.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c328:	e011      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3304      	adds	r3, #4
 800c32e:	2100      	movs	r1, #0
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fbff 	bl	800cb34 <RCCEx_PLL2_Config>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c33a:	e00c      	b.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	3324      	adds	r3, #36	; 0x24
 800c340:	2102      	movs	r1, #2
 800c342:	4618      	mov	r0, r3
 800c344:	f000 fca8 	bl	800cc98 <RCCEx_PLL3_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c34c:	e003      	b.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	75fb      	strb	r3, [r7, #23]
      break;
 800c352:	e000      	b.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c354:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c356:	7dfb      	ldrb	r3, [r7, #23]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c35c:	4b5e      	ldr	r3, [pc, #376]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c36a:	495b      	ldr	r1, [pc, #364]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c36c:	4313      	orrs	r3, r2
 800c36e:	658b      	str	r3, [r1, #88]	; 0x58
 800c370:	e001      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d033      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c38c:	d01c      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c38e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c392:	d816      	bhi.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c398:	d003      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c39a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c39e:	d007      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c3a0:	e00f      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a2:	4b4d      	ldr	r3, [pc, #308]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	4a4c      	ldr	r2, [pc, #304]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c3ae:	e00c      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	3324      	adds	r3, #36	; 0x24
 800c3b4:	2101      	movs	r1, #1
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 fc6e 	bl	800cc98 <RCCEx_PLL3_Config>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c3c0:	e003      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	75fb      	strb	r3, [r7, #23]
      break;
 800c3c6:	e000      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c3c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3d0:	4b41      	ldr	r3, [pc, #260]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3de:	493e      	ldr	r1, [pc, #248]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	654b      	str	r3, [r1, #84]	; 0x54
 800c3e4:	e001      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d029      	beq.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c3fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c402:	d007      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c404:	e00f      	b.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c406:	4b34      	ldr	r3, [pc, #208]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	4a33      	ldr	r2, [pc, #204]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c40c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c412:	e00b      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3304      	adds	r3, #4
 800c418:	2102      	movs	r1, #2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fb8a 	bl	800cb34 <RCCEx_PLL2_Config>
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c424:	e002      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	75fb      	strb	r3, [r7, #23]
      break;
 800c42a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d109      	bne.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c432:	4b29      	ldr	r3, [pc, #164]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c436:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c43e:	4926      	ldr	r1, [pc, #152]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c440:	4313      	orrs	r3, r2
 800c442:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c444:	e001      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3324      	adds	r3, #36	; 0x24
 800c45a:	2102      	movs	r1, #2
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fc1b 	bl	800cc98 <RCCEx_PLL3_Config>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d033      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c480:	d017      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c486:	d811      	bhi.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c48c:	d013      	beq.n	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c48e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c492:	d80b      	bhi.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c494:	2b00      	cmp	r3, #0
 800c496:	d010      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c49c:	d106      	bne.n	800c4ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c49e:	4b0e      	ldr	r3, [pc, #56]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a2:	4a0d      	ldr	r2, [pc, #52]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c4aa:	e007      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	75fb      	strb	r3, [r7, #23]
      break;
 800c4b0:	e004      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4b2:	bf00      	nop
 800c4b4:	e002      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4b6:	bf00      	nop
 800c4b8:	e000      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c4ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d10c      	bne.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4ce:	4902      	ldr	r1, [pc, #8]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	654b      	str	r3, [r1, #84]	; 0x54
 800c4d4:	e004      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c4d6:	bf00      	nop
 800c4d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d008      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c4ec:	4b31      	ldr	r3, [pc, #196]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f8:	492e      	ldr	r1, [pc, #184]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d009      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c50a:	4b2a      	ldr	r3, [pc, #168]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c518:	4926      	ldr	r1, [pc, #152]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c526:	2b00      	cmp	r3, #0
 800c528:	d008      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c52a:	4b22      	ldr	r3, [pc, #136]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c536:	491f      	ldr	r1, [pc, #124]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00d      	beq.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c548:	4b1a      	ldr	r3, [pc, #104]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	4a19      	ldr	r2, [pc, #100]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c54e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c552:	6113      	str	r3, [r2, #16]
 800c554:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c556:	691a      	ldr	r2, [r3, #16]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c55e:	4915      	ldr	r1, [pc, #84]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c560:	4313      	orrs	r3, r2
 800c562:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	da08      	bge.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c56c:	4b11      	ldr	r3, [pc, #68]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c56e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c578:	490e      	ldr	r1, [pc, #56]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d009      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c58a:	4b0a      	ldr	r3, [pc, #40]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c598:	4906      	ldr	r1, [pc, #24]	; (800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c59a:	4313      	orrs	r3, r2
 800c59c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c59e:	7dbb      	ldrb	r3, [r7, #22]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e000      	b.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	58024400 	.word	0x58024400

0800c5b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c5bc:	f7ff f85a 	bl	800b674 <HAL_RCC_GetHCLKFreq>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	091b      	lsrs	r3, r3, #4
 800c5c8:	f003 0307 	and.w	r3, r3, #7
 800c5cc:	4904      	ldr	r1, [pc, #16]	; (800c5e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c5ce:	5ccb      	ldrb	r3, [r1, r3]
 800c5d0:	f003 031f 	and.w	r3, r3, #31
 800c5d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	58024400 	.word	0x58024400
 800c5e0:	0801524c 	.word	0x0801524c

0800c5e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b089      	sub	sp, #36	; 0x24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5ec:	4ba1      	ldr	r3, [pc, #644]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f0:	f003 0303 	and.w	r3, r3, #3
 800c5f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c5f6:	4b9f      	ldr	r3, [pc, #636]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	0b1b      	lsrs	r3, r3, #12
 800c5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c600:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c602:	4b9c      	ldr	r3, [pc, #624]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c606:	091b      	lsrs	r3, r3, #4
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c60e:	4b99      	ldr	r3, [pc, #612]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c612:	08db      	lsrs	r3, r3, #3
 800c614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	fb02 f303 	mul.w	r3, r2, r3
 800c61e:	ee07 3a90 	vmov	s15, r3
 800c622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	f000 8111 	beq.w	800c854 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	2b02      	cmp	r3, #2
 800c636:	f000 8083 	beq.w	800c740 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	f200 80a1 	bhi.w	800c784 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d056      	beq.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c64e:	e099      	b.n	800c784 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c650:	4b88      	ldr	r3, [pc, #544]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f003 0320 	and.w	r3, r3, #32
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d02d      	beq.n	800c6b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c65c:	4b85      	ldr	r3, [pc, #532]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	08db      	lsrs	r3, r3, #3
 800c662:	f003 0303 	and.w	r3, r3, #3
 800c666:	4a84      	ldr	r2, [pc, #528]	; (800c878 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c668:	fa22 f303 	lsr.w	r3, r2, r3
 800c66c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	ee07 3a90 	vmov	s15, r3
 800c674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c686:	4b7b      	ldr	r3, [pc, #492]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c696:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c6b6:	e087      	b.n	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c880 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ca:	4b6a      	ldr	r3, [pc, #424]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d2:	ee07 3a90 	vmov	s15, r3
 800c6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6fa:	e065      	b.n	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	ee07 3a90 	vmov	s15, r3
 800c702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c706:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c70e:	4b59      	ldr	r3, [pc, #356]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c722:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c73e:	e043      	b.n	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	ee07 3a90 	vmov	s15, r3
 800c746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c752:	4b48      	ldr	r3, [pc, #288]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75a:	ee07 3a90 	vmov	s15, r3
 800c75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c762:	ed97 6a03 	vldr	s12, [r7, #12]
 800c766:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c77e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c782:	e021      	b.n	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c796:	4b37      	ldr	r3, [pc, #220]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79e:	ee07 3a90 	vmov	s15, r3
 800c7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c7c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c7c8:	4b2a      	ldr	r3, [pc, #168]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7cc:	0a5b      	lsrs	r3, r3, #9
 800c7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d2:	ee07 3a90 	vmov	s15, r3
 800c7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7ee:	ee17 2a90 	vmov	r2, s15
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c7f6:	4b1f      	ldr	r3, [pc, #124]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	0c1b      	lsrs	r3, r3, #16
 800c7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c800:	ee07 3a90 	vmov	s15, r3
 800c804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c810:	edd7 6a07 	vldr	s13, [r7, #28]
 800c814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c81c:	ee17 2a90 	vmov	r2, s15
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c824:	4b13      	ldr	r3, [pc, #76]	; (800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c828:	0e1b      	lsrs	r3, r3, #24
 800c82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c82e:	ee07 3a90 	vmov	s15, r3
 800c832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c84a:	ee17 2a90 	vmov	r2, s15
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c852:	e008      	b.n	800c866 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	609a      	str	r2, [r3, #8]
}
 800c866:	bf00      	nop
 800c868:	3724      	adds	r7, #36	; 0x24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	58024400 	.word	0x58024400
 800c878:	03d09000 	.word	0x03d09000
 800c87c:	46000000 	.word	0x46000000
 800c880:	4c742400 	.word	0x4c742400
 800c884:	4a742400 	.word	0x4a742400
 800c888:	4c371b00 	.word	0x4c371b00

0800c88c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b089      	sub	sp, #36	; 0x24
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c894:	4ba1      	ldr	r3, [pc, #644]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c898:	f003 0303 	and.w	r3, r3, #3
 800c89c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c89e:	4b9f      	ldr	r3, [pc, #636]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a2:	0d1b      	lsrs	r3, r3, #20
 800c8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8aa:	4b9c      	ldr	r3, [pc, #624]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ae:	0a1b      	lsrs	r3, r3, #8
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c8b6:	4b99      	ldr	r3, [pc, #612]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ba:	08db      	lsrs	r3, r3, #3
 800c8bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	fb02 f303 	mul.w	r3, r2, r3
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 8111 	beq.w	800cafc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	f000 8083 	beq.w	800c9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	f200 80a1 	bhi.w	800ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d056      	beq.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c8f6:	e099      	b.n	800ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8f8:	4b88      	ldr	r3, [pc, #544]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 0320 	and.w	r3, r3, #32
 800c900:	2b00      	cmp	r3, #0
 800c902:	d02d      	beq.n	800c960 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c904:	4b85      	ldr	r3, [pc, #532]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	08db      	lsrs	r3, r3, #3
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	4a84      	ldr	r2, [pc, #528]	; (800cb20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c910:	fa22 f303 	lsr.w	r3, r2, r3
 800c914:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	ee07 3a90 	vmov	s15, r3
 800c91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c92e:	4b7b      	ldr	r3, [pc, #492]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c942:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c95e:	e087      	b.n	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c972:	4b6a      	ldr	r3, [pc, #424]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c982:	ed97 6a03 	vldr	s12, [r7, #12]
 800c986:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9a2:	e065      	b.n	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b6:	4b59      	ldr	r3, [pc, #356]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9e6:	e043      	b.n	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	ee07 3a90 	vmov	s15, r3
 800c9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fa:	4b48      	ldr	r3, [pc, #288]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca2a:	e021      	b.n	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca3e:	4b37      	ldr	r3, [pc, #220]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ca6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ca70:	4b2a      	ldr	r3, [pc, #168]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca74:	0a5b      	lsrs	r3, r3, #9
 800ca76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca7a:	ee07 3a90 	vmov	s15, r3
 800ca7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca96:	ee17 2a90 	vmov	r2, s15
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ca9e:	4b1f      	ldr	r3, [pc, #124]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa2:	0c1b      	lsrs	r3, r3, #16
 800caa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa8:	ee07 3a90 	vmov	s15, r3
 800caac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cab8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cabc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cac4:	ee17 2a90 	vmov	r2, s15
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cacc:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad0:	0e1b      	lsrs	r3, r3, #24
 800cad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cae6:	edd7 6a07 	vldr	s13, [r7, #28]
 800caea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf2:	ee17 2a90 	vmov	r2, s15
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cafa:	e008      	b.n	800cb0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	609a      	str	r2, [r3, #8]
}
 800cb0e:	bf00      	nop
 800cb10:	3724      	adds	r7, #36	; 0x24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	58024400 	.word	0x58024400
 800cb20:	03d09000 	.word	0x03d09000
 800cb24:	46000000 	.word	0x46000000
 800cb28:	4c742400 	.word	0x4c742400
 800cb2c:	4a742400 	.word	0x4a742400
 800cb30:	4c371b00 	.word	0x4c371b00

0800cb34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb42:	4b53      	ldr	r3, [pc, #332]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb46:	f003 0303 	and.w	r3, r3, #3
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d101      	bne.n	800cb52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e099      	b.n	800cc86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb52:	4b4f      	ldr	r3, [pc, #316]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a4e      	ldr	r2, [pc, #312]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cb58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb5e:	f7fa fa7b 	bl	8007058 <HAL_GetTick>
 800cb62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb64:	e008      	b.n	800cb78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cb66:	f7fa fa77 	bl	8007058 <HAL_GetTick>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d901      	bls.n	800cb78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb74:	2303      	movs	r3, #3
 800cb76:	e086      	b.n	800cc86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb78:	4b45      	ldr	r3, [pc, #276]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1f0      	bne.n	800cb66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb84:	4b42      	ldr	r3, [pc, #264]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	031b      	lsls	r3, r3, #12
 800cb92:	493f      	ldr	r1, [pc, #252]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cb94:	4313      	orrs	r3, r2
 800cb96:	628b      	str	r3, [r1, #40]	; 0x28
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	025b      	lsls	r3, r3, #9
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	431a      	orrs	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	041b      	lsls	r3, r3, #16
 800cbb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbba:	431a      	orrs	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	3b01      	subs	r3, #1
 800cbc2:	061b      	lsls	r3, r3, #24
 800cbc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbc8:	4931      	ldr	r1, [pc, #196]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cbce:	4b30      	ldr	r3, [pc, #192]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	695b      	ldr	r3, [r3, #20]
 800cbda:	492d      	ldr	r1, [pc, #180]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cbe0:	4b2b      	ldr	r3, [pc, #172]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	f023 0220 	bic.w	r2, r3, #32
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	4928      	ldr	r1, [pc, #160]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cbf2:	4b27      	ldr	r3, [pc, #156]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	4a26      	ldr	r2, [pc, #152]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cbf8:	f023 0310 	bic.w	r3, r3, #16
 800cbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cbfe:	4b24      	ldr	r3, [pc, #144]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc02:	4b24      	ldr	r3, [pc, #144]	; (800cc94 <RCCEx_PLL2_Config+0x160>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	69d2      	ldr	r2, [r2, #28]
 800cc0a:	00d2      	lsls	r2, r2, #3
 800cc0c:	4920      	ldr	r1, [pc, #128]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc12:	4b1f      	ldr	r3, [pc, #124]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	4a1e      	ldr	r2, [pc, #120]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc18:	f043 0310 	orr.w	r3, r3, #16
 800cc1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d106      	bne.n	800cc32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc24:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc28:	4a19      	ldr	r2, [pc, #100]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc30:	e00f      	b.n	800cc52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d106      	bne.n	800cc46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc38:	4b15      	ldr	r3, [pc, #84]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	4a14      	ldr	r2, [pc, #80]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc44:	e005      	b.n	800cc52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc46:	4b12      	ldr	r3, [pc, #72]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4a:	4a11      	ldr	r2, [pc, #68]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc52:	4b0f      	ldr	r3, [pc, #60]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a0e      	ldr	r2, [pc, #56]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc5e:	f7fa f9fb 	bl	8007058 <HAL_GetTick>
 800cc62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc64:	e008      	b.n	800cc78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cc66:	f7fa f9f7 	bl	8007058 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d901      	bls.n	800cc78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e006      	b.n	800cc86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <RCCEx_PLL2_Config+0x15c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0f0      	beq.n	800cc66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	58024400 	.word	0x58024400
 800cc94:	ffff0007 	.word	0xffff0007

0800cc98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cca6:	4b53      	ldr	r3, [pc, #332]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d101      	bne.n	800ccb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e099      	b.n	800cdea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccb6:	4b4f      	ldr	r3, [pc, #316]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a4e      	ldr	r2, [pc, #312]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800ccbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccc2:	f7fa f9c9 	bl	8007058 <HAL_GetTick>
 800ccc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccc8:	e008      	b.n	800ccdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ccca:	f7fa f9c5 	bl	8007058 <HAL_GetTick>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d901      	bls.n	800ccdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	e086      	b.n	800cdea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccdc:	4b45      	ldr	r3, [pc, #276]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1f0      	bne.n	800ccca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cce8:	4b42      	ldr	r3, [pc, #264]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800ccea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	051b      	lsls	r3, r3, #20
 800ccf6:	493f      	ldr	r1, [pc, #252]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	628b      	str	r3, [r1, #40]	; 0x28
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	025b      	lsls	r3, r3, #9
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	431a      	orrs	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	3b01      	subs	r3, #1
 800cd18:	041b      	lsls	r3, r3, #16
 800cd1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	061b      	lsls	r3, r3, #24
 800cd28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd2c:	4931      	ldr	r1, [pc, #196]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd32:	4b30      	ldr	r3, [pc, #192]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	492d      	ldr	r1, [pc, #180]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd44:	4b2b      	ldr	r3, [pc, #172]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	4928      	ldr	r1, [pc, #160]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd52:	4313      	orrs	r3, r2
 800cd54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd56:	4b27      	ldr	r3, [pc, #156]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5a:	4a26      	ldr	r2, [pc, #152]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd62:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd66:	4b24      	ldr	r3, [pc, #144]	; (800cdf8 <RCCEx_PLL3_Config+0x160>)
 800cd68:	4013      	ands	r3, r2
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	69d2      	ldr	r2, [r2, #28]
 800cd6e:	00d2      	lsls	r2, r2, #3
 800cd70:	4920      	ldr	r1, [pc, #128]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd72:	4313      	orrs	r3, r2
 800cd74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd76:	4b1f      	ldr	r3, [pc, #124]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	4a1e      	ldr	r2, [pc, #120]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d106      	bne.n	800cd96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd88:	4b1a      	ldr	r3, [pc, #104]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	4a19      	ldr	r2, [pc, #100]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd94:	e00f      	b.n	800cdb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d106      	bne.n	800cdaa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cd9c:	4b15      	ldr	r3, [pc, #84]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	4a14      	ldr	r2, [pc, #80]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cda2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cda6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cda8:	e005      	b.n	800cdb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdae:	4a11      	ldr	r2, [pc, #68]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cdb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a0e      	ldr	r2, [pc, #56]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cdbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdc2:	f7fa f949 	bl	8007058 <HAL_GetTick>
 800cdc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdc8:	e008      	b.n	800cddc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cdca:	f7fa f945 	bl	8007058 <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d901      	bls.n	800cddc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	e006      	b.n	800cdea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cddc:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <RCCEx_PLL3_Config+0x15c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0f0      	beq.n	800cdca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	ffff0007 	.word	0xffff0007

0800cdfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e0f1      	b.n	800cff2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a78      	ldr	r2, [pc, #480]	; (800cffc <HAL_SPI_Init+0x200>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d00f      	beq.n	800ce3e <HAL_SPI_Init+0x42>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a77      	ldr	r2, [pc, #476]	; (800d000 <HAL_SPI_Init+0x204>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d00a      	beq.n	800ce3e <HAL_SPI_Init+0x42>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a75      	ldr	r2, [pc, #468]	; (800d004 <HAL_SPI_Init+0x208>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d005      	beq.n	800ce3e <HAL_SPI_Init+0x42>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	2b0f      	cmp	r3, #15
 800ce38:	d901      	bls.n	800ce3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e0d9      	b.n	800cff2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fba4 	bl	800d58c <SPI_GetPacketSize>
 800ce44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a6c      	ldr	r2, [pc, #432]	; (800cffc <HAL_SPI_Init+0x200>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d00c      	beq.n	800ce6a <HAL_SPI_Init+0x6e>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a6a      	ldr	r2, [pc, #424]	; (800d000 <HAL_SPI_Init+0x204>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d007      	beq.n	800ce6a <HAL_SPI_Init+0x6e>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a69      	ldr	r2, [pc, #420]	; (800d004 <HAL_SPI_Init+0x208>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d002      	beq.n	800ce6a <HAL_SPI_Init+0x6e>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b08      	cmp	r3, #8
 800ce68:	d811      	bhi.n	800ce8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce6e:	4a63      	ldr	r2, [pc, #396]	; (800cffc <HAL_SPI_Init+0x200>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d009      	beq.n	800ce88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a61      	ldr	r2, [pc, #388]	; (800d000 <HAL_SPI_Init+0x204>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d004      	beq.n	800ce88 <HAL_SPI_Init+0x8c>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a60      	ldr	r2, [pc, #384]	; (800d004 <HAL_SPI_Init+0x208>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d104      	bne.n	800ce92 <HAL_SPI_Init+0x96>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b10      	cmp	r3, #16
 800ce8c:	d901      	bls.n	800ce92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e0af      	b.n	800cff2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f8 f92e 	bl	8005108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2202      	movs	r2, #2
 800ceb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f022 0201 	bic.w	r2, r2, #1
 800cec2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cece:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ced8:	d119      	bne.n	800cf0e <HAL_SPI_Init+0x112>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cee2:	d103      	bne.n	800ceec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d008      	beq.n	800cefe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10c      	bne.n	800cf0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cefc:	d107      	bne.n	800cf0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cf0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69da      	ldr	r2, [r3, #28]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf16:	431a      	orrs	r2, r3
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	431a      	orrs	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf20:	ea42 0103 	orr.w	r1, r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68da      	ldr	r2, [r3, #12]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	431a      	orrs	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	431a      	orrs	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf62:	431a      	orrs	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	431a      	orrs	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf6e:	ea42 0103 	orr.w	r1, r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d113      	bne.n	800cfae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0201 	bic.w	r2, r2, #1
 800cfbc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	40013000 	.word	0x40013000
 800d000:	40003800 	.word	0x40003800
 800d004:	40003c00 	.word	0x40003c00

0800d008 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08a      	sub	sp, #40	; 0x28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d020:	6a3a      	ldr	r2, [r7, #32]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	4013      	ands	r3, r2
 800d026:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d030:	2300      	movs	r3, #0
 800d032:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d03a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3330      	adds	r3, #48	; 0x30
 800d042:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d113      	bne.n	800d076 <HAL_SPI_IRQHandler+0x6e>
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10e      	bne.n	800d076 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d009      	beq.n	800d076 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
    handled = 1UL;
 800d072:	2301      	movs	r3, #1
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10f      	bne.n	800d0a0 <HAL_SPI_IRQHandler+0x98>
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d090:	2b00      	cmp	r3, #0
 800d092:	d105      	bne.n	800d0a0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	4798      	blx	r3
    handled = 1UL;
 800d09c:	2301      	movs	r3, #1
 800d09e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	f003 0320 	and.w	r3, r3, #32
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10f      	bne.n	800d0ca <HAL_SPI_IRQHandler+0xc2>
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	f003 0302 	and.w	r3, r3, #2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d105      	bne.n	800d0ca <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	4798      	blx	r3
    handled = 1UL;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 816f 	bne.w	800d3b0 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	f003 0308 	and.w	r3, r3, #8
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f000 80a0 	beq.w	800d21e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	699a      	ldr	r2, [r3, #24]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f042 0208 	orr.w	r2, r2, #8
 800d0ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	699a      	ldr	r2, [r3, #24]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f042 0210 	orr.w	r2, r2, #16
 800d0fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	699a      	ldr	r2, [r3, #24]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d10c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f022 0208 	bic.w	r2, r2, #8
 800d11c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00f      	beq.n	800d148 <HAL_SPI_IRQHandler+0x140>
 800d128:	7cfb      	ldrb	r3, [r7, #19]
 800d12a:	2b04      	cmp	r3, #4
 800d12c:	d004      	beq.n	800d138 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d132:	69db      	ldr	r3, [r3, #28]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <HAL_SPI_IRQHandler+0x140>
 800d138:	7cfb      	ldrb	r3, [r7, #19]
 800d13a:	2b03      	cmp	r3, #3
 800d13c:	d059      	beq.n	800d1f2 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d154      	bne.n	800d1f2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d152:	2b00      	cmp	r3, #0
 800d154:	d13d      	bne.n	800d1d2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800d156:	e036      	b.n	800d1c6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	2b0f      	cmp	r3, #15
 800d15e:	d90b      	bls.n	800d178 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d168:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d16a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d170:	1d1a      	adds	r2, r3, #4
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	665a      	str	r2, [r3, #100]	; 0x64
 800d176:	e01d      	b.n	800d1b4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	2b07      	cmp	r3, #7
 800d17e:	d90b      	bls.n	800d198 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	8812      	ldrh	r2, [r2, #0]
 800d188:	b292      	uxth	r2, r2
 800d18a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d190:	1c9a      	adds	r2, r3, #2
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	665a      	str	r2, [r3, #100]	; 0x64
 800d196:	e00d      	b.n	800d1b4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a4:	7812      	ldrb	r2, [r2, #0]
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ae:	1c5a      	adds	r2, r3, #1
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1c2      	bne.n	800d158 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f93a 	bl	800d44c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f90a 	bl	800d404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800d1f0:	e0e3      	b.n	800d3ba <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d1f2:	7cfb      	ldrb	r3, [r7, #19]
 800d1f4:	2b05      	cmp	r3, #5
 800d1f6:	d103      	bne.n	800d200 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f8f9 	bl	800d3f0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800d1fe:	e0d9      	b.n	800d3b4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d200:	7cfb      	ldrb	r3, [r7, #19]
 800d202:	2b04      	cmp	r3, #4
 800d204:	d103      	bne.n	800d20e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f8e8 	bl	800d3dc <HAL_SPI_RxCpltCallback>
    return;
 800d20c:	e0d2      	b.n	800d3b4 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d20e:	7cfb      	ldrb	r3, [r7, #19]
 800d210:	2b03      	cmp	r3, #3
 800d212:	f040 80cf 	bne.w	800d3b4 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f8d6 	bl	800d3c8 <HAL_SPI_TxCpltCallback>
    return;
 800d21c:	e0ca      	b.n	800d3b4 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00d      	beq.n	800d244 <HAL_SPI_IRQHandler+0x23c>
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	f003 0308 	and.w	r3, r3, #8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d008      	beq.n	800d244 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	699a      	ldr	r2, [r3, #24]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d240:	619a      	str	r2, [r3, #24]

    return;
 800d242:	e0ba      	b.n	800d3ba <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 80b5 	beq.w	800d3ba <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00f      	beq.n	800d27a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d260:	f043 0204 	orr.w	r2, r3, #4
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	699a      	ldr	r2, [r3, #24]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d278:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00f      	beq.n	800d2a4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d28a:	f043 0201 	orr.w	r2, r3, #1
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	699a      	ldr	r2, [r3, #24]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00f      	beq.n	800d2ce <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b4:	f043 0208 	orr.w	r2, r3, #8
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	699a      	ldr	r2, [r3, #24]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	f003 0320 	and.w	r3, r3, #32
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00f      	beq.n	800d2f8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	699a      	ldr	r2, [r3, #24]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f042 0220 	orr.w	r2, r2, #32
 800d2f6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d05a      	beq.n	800d3b8 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f022 0201 	bic.w	r2, r2, #1
 800d310:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6919      	ldr	r1, [r3, #16]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	4b28      	ldr	r3, [pc, #160]	; (800d3c0 <HAL_SPI_IRQHandler+0x3b8>)
 800d31e:	400b      	ands	r3, r1
 800d320:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d328:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d32c:	d138      	bne.n	800d3a0 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	689a      	ldr	r2, [r3, #8]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d33c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d013      	beq.n	800d36e <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d34a:	4a1e      	ldr	r2, [pc, #120]	; (800d3c4 <HAL_SPI_IRQHandler+0x3bc>)
 800d34c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d352:	4618      	mov	r0, r3
 800d354:	f7fb faba 	bl	80088cc <HAL_DMA_Abort_IT>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d007      	beq.n	800d36e <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d372:	2b00      	cmp	r3, #0
 800d374:	d020      	beq.n	800d3b8 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d37a:	4a12      	ldr	r2, [pc, #72]	; (800d3c4 <HAL_SPI_IRQHandler+0x3bc>)
 800d37c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d382:	4618      	mov	r0, r3
 800d384:	f7fb faa2 	bl	80088cc <HAL_DMA_Abort_IT>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d014      	beq.n	800d3b8 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d39e:	e00b      	b.n	800d3b8 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f82b 	bl	800d404 <HAL_SPI_ErrorCallback>
    return;
 800d3ae:	e003      	b.n	800d3b8 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800d3b0:	bf00      	nop
 800d3b2:	e002      	b.n	800d3ba <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d3b4:	bf00      	nop
 800d3b6:	e000      	b.n	800d3ba <HAL_SPI_IRQHandler+0x3b2>
    return;
 800d3b8:	bf00      	nop
  }
}
 800d3ba:	3728      	adds	r7, #40	; 0x28
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	fffffc94 	.word	0xfffffc94
 800d3c4:	0800d419 	.word	0x0800d419

0800d3c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr

0800d3f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d40c:	bf00      	nop
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d424:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2200      	movs	r2, #0
 800d42a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff ffe0 	bl	800d404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d444:	bf00      	nop
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	695b      	ldr	r3, [r3, #20]
 800d45a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	699a      	ldr	r2, [r3, #24]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f042 0208 	orr.w	r2, r2, #8
 800d46a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f042 0210 	orr.w	r2, r2, #16
 800d47a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f022 0201 	bic.w	r2, r2, #1
 800d48a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6919      	ldr	r1, [r3, #16]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	4b3c      	ldr	r3, [pc, #240]	; (800d588 <SPI_CloseTransfer+0x13c>)
 800d498:	400b      	ands	r3, r1
 800d49a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689a      	ldr	r2, [r3, #8]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d4aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	d014      	beq.n	800d4e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f003 0320 	and.w	r3, r3, #32
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00f      	beq.n	800d4e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	699a      	ldr	r2, [r3, #24]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f042 0220 	orr.w	r2, r2, #32
 800d4e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	d014      	beq.n	800d518 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00f      	beq.n	800d518 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4fe:	f043 0204 	orr.w	r2, r3, #4
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	699a      	ldr	r2, [r3, #24]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d516:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00f      	beq.n	800d542 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d528:	f043 0201 	orr.w	r2, r3, #1
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	699a      	ldr	r2, [r3, #24]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d540:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00f      	beq.n	800d56c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d552:	f043 0208 	orr.w	r2, r3, #8
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	699a      	ldr	r2, [r3, #24]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d56a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d57c:	bf00      	nop
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	fffffc90 	.word	0xfffffc90

0800d58c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d598:	095b      	lsrs	r3, r3, #5
 800d59a:	3301      	adds	r3, #1
 800d59c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	3307      	adds	r3, #7
 800d5aa:	08db      	lsrs	r3, r3, #3
 800d5ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b082      	sub	sp, #8
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e049      	b.n	800d668 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f8 fda3 	bl	8006134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	4619      	mov	r1, r3
 800d600:	4610      	mov	r0, r2
 800d602:	f000 fed3 	bl	800e3ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d670:	b480      	push	{r7}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b01      	cmp	r3, #1
 800d682:	d001      	beq.n	800d688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e054      	b.n	800d732 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2202      	movs	r2, #2
 800d68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68da      	ldr	r2, [r3, #12]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f042 0201 	orr.w	r2, r2, #1
 800d69e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a26      	ldr	r2, [pc, #152]	; (800d740 <HAL_TIM_Base_Start_IT+0xd0>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d022      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6b2:	d01d      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a22      	ldr	r2, [pc, #136]	; (800d744 <HAL_TIM_Base_Start_IT+0xd4>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d018      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a21      	ldr	r2, [pc, #132]	; (800d748 <HAL_TIM_Base_Start_IT+0xd8>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d013      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a1f      	ldr	r2, [pc, #124]	; (800d74c <HAL_TIM_Base_Start_IT+0xdc>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d00e      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a1e      	ldr	r2, [pc, #120]	; (800d750 <HAL_TIM_Base_Start_IT+0xe0>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d009      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a1c      	ldr	r2, [pc, #112]	; (800d754 <HAL_TIM_Base_Start_IT+0xe4>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d004      	beq.n	800d6f0 <HAL_TIM_Base_Start_IT+0x80>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a1b      	ldr	r2, [pc, #108]	; (800d758 <HAL_TIM_Base_Start_IT+0xe8>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d115      	bne.n	800d71c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	689a      	ldr	r2, [r3, #8]
 800d6f6:	4b19      	ldr	r3, [pc, #100]	; (800d75c <HAL_TIM_Base_Start_IT+0xec>)
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b06      	cmp	r3, #6
 800d700:	d015      	beq.n	800d72e <HAL_TIM_Base_Start_IT+0xbe>
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d708:	d011      	beq.n	800d72e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f042 0201 	orr.w	r2, r2, #1
 800d718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d71a:	e008      	b.n	800d72e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f042 0201 	orr.w	r2, r2, #1
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	e000      	b.n	800d730 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d72e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	40010000 	.word	0x40010000
 800d744:	40000400 	.word	0x40000400
 800d748:	40000800 	.word	0x40000800
 800d74c:	40000c00 	.word	0x40000c00
 800d750:	40010400 	.word	0x40010400
 800d754:	40001800 	.word	0x40001800
 800d758:	40014000 	.word	0x40014000
 800d75c:	00010007 	.word	0x00010007

0800d760 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68da      	ldr	r2, [r3, #12]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 0201 	bic.w	r2, r2, #1
 800d776:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6a1a      	ldr	r2, [r3, #32]
 800d77e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d782:	4013      	ands	r3, r2
 800d784:	2b00      	cmp	r3, #0
 800d786:	d10f      	bne.n	800d7a8 <HAL_TIM_Base_Stop_IT+0x48>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6a1a      	ldr	r2, [r3, #32]
 800d78e:	f240 4344 	movw	r3, #1092	; 0x444
 800d792:	4013      	ands	r3, r2
 800d794:	2b00      	cmp	r3, #0
 800d796:	d107      	bne.n	800d7a8 <HAL_TIM_Base_Stop_IT+0x48>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f022 0201 	bic.w	r2, r2, #1
 800d7a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d101      	bne.n	800d7d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e049      	b.n	800d864 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d106      	bne.n	800d7ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 f841 	bl	800d86c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	f000 fdd5 	bl	800e3ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2201      	movs	r2, #1
 800d846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3708      	adds	r7, #8
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d109      	bne.n	800d8a4 <HAL_TIM_PWM_Start+0x24>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b01      	cmp	r3, #1
 800d89a:	bf14      	ite	ne
 800d89c:	2301      	movne	r3, #1
 800d89e:	2300      	moveq	r3, #0
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	e03c      	b.n	800d91e <HAL_TIM_PWM_Start+0x9e>
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d109      	bne.n	800d8be <HAL_TIM_PWM_Start+0x3e>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	bf14      	ite	ne
 800d8b6:	2301      	movne	r3, #1
 800d8b8:	2300      	moveq	r3, #0
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	e02f      	b.n	800d91e <HAL_TIM_PWM_Start+0x9e>
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b08      	cmp	r3, #8
 800d8c2:	d109      	bne.n	800d8d8 <HAL_TIM_PWM_Start+0x58>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	bf14      	ite	ne
 800d8d0:	2301      	movne	r3, #1
 800d8d2:	2300      	moveq	r3, #0
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	e022      	b.n	800d91e <HAL_TIM_PWM_Start+0x9e>
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	2b0c      	cmp	r3, #12
 800d8dc:	d109      	bne.n	800d8f2 <HAL_TIM_PWM_Start+0x72>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	bf14      	ite	ne
 800d8ea:	2301      	movne	r3, #1
 800d8ec:	2300      	moveq	r3, #0
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	e015      	b.n	800d91e <HAL_TIM_PWM_Start+0x9e>
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b10      	cmp	r3, #16
 800d8f6:	d109      	bne.n	800d90c <HAL_TIM_PWM_Start+0x8c>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b01      	cmp	r3, #1
 800d902:	bf14      	ite	ne
 800d904:	2301      	movne	r3, #1
 800d906:	2300      	moveq	r3, #0
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	e008      	b.n	800d91e <HAL_TIM_PWM_Start+0x9e>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b01      	cmp	r3, #1
 800d916:	bf14      	ite	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	2300      	moveq	r3, #0
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e0a1      	b.n	800da6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d104      	bne.n	800d936 <HAL_TIM_PWM_Start+0xb6>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2202      	movs	r2, #2
 800d930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d934:	e023      	b.n	800d97e <HAL_TIM_PWM_Start+0xfe>
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	2b04      	cmp	r3, #4
 800d93a:	d104      	bne.n	800d946 <HAL_TIM_PWM_Start+0xc6>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2202      	movs	r2, #2
 800d940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d944:	e01b      	b.n	800d97e <HAL_TIM_PWM_Start+0xfe>
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b08      	cmp	r3, #8
 800d94a:	d104      	bne.n	800d956 <HAL_TIM_PWM_Start+0xd6>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2202      	movs	r2, #2
 800d950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d954:	e013      	b.n	800d97e <HAL_TIM_PWM_Start+0xfe>
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b0c      	cmp	r3, #12
 800d95a:	d104      	bne.n	800d966 <HAL_TIM_PWM_Start+0xe6>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2202      	movs	r2, #2
 800d960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d964:	e00b      	b.n	800d97e <HAL_TIM_PWM_Start+0xfe>
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b10      	cmp	r3, #16
 800d96a:	d104      	bne.n	800d976 <HAL_TIM_PWM_Start+0xf6>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2202      	movs	r2, #2
 800d970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d974:	e003      	b.n	800d97e <HAL_TIM_PWM_Start+0xfe>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2202      	movs	r2, #2
 800d97a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2201      	movs	r2, #1
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	4618      	mov	r0, r3
 800d988:	f001 f91e 	bl	800ebc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a38      	ldr	r2, [pc, #224]	; (800da74 <HAL_TIM_PWM_Start+0x1f4>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d013      	beq.n	800d9be <HAL_TIM_PWM_Start+0x13e>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a37      	ldr	r2, [pc, #220]	; (800da78 <HAL_TIM_PWM_Start+0x1f8>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d00e      	beq.n	800d9be <HAL_TIM_PWM_Start+0x13e>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a35      	ldr	r2, [pc, #212]	; (800da7c <HAL_TIM_PWM_Start+0x1fc>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d009      	beq.n	800d9be <HAL_TIM_PWM_Start+0x13e>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a34      	ldr	r2, [pc, #208]	; (800da80 <HAL_TIM_PWM_Start+0x200>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d004      	beq.n	800d9be <HAL_TIM_PWM_Start+0x13e>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a32      	ldr	r2, [pc, #200]	; (800da84 <HAL_TIM_PWM_Start+0x204>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d101      	bne.n	800d9c2 <HAL_TIM_PWM_Start+0x142>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e000      	b.n	800d9c4 <HAL_TIM_PWM_Start+0x144>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d007      	beq.n	800d9d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a25      	ldr	r2, [pc, #148]	; (800da74 <HAL_TIM_PWM_Start+0x1f4>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d022      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9ea:	d01d      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a25      	ldr	r2, [pc, #148]	; (800da88 <HAL_TIM_PWM_Start+0x208>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d018      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a24      	ldr	r2, [pc, #144]	; (800da8c <HAL_TIM_PWM_Start+0x20c>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d013      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a22      	ldr	r2, [pc, #136]	; (800da90 <HAL_TIM_PWM_Start+0x210>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d00e      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a1a      	ldr	r2, [pc, #104]	; (800da78 <HAL_TIM_PWM_Start+0x1f8>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d009      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a1e      	ldr	r2, [pc, #120]	; (800da94 <HAL_TIM_PWM_Start+0x214>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d004      	beq.n	800da28 <HAL_TIM_PWM_Start+0x1a8>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a16      	ldr	r2, [pc, #88]	; (800da7c <HAL_TIM_PWM_Start+0x1fc>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d115      	bne.n	800da54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	689a      	ldr	r2, [r3, #8]
 800da2e:	4b1a      	ldr	r3, [pc, #104]	; (800da98 <HAL_TIM_PWM_Start+0x218>)
 800da30:	4013      	ands	r3, r2
 800da32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b06      	cmp	r3, #6
 800da38:	d015      	beq.n	800da66 <HAL_TIM_PWM_Start+0x1e6>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da40:	d011      	beq.n	800da66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f042 0201 	orr.w	r2, r2, #1
 800da50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da52:	e008      	b.n	800da66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f042 0201 	orr.w	r2, r2, #1
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	e000      	b.n	800da68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	40010000 	.word	0x40010000
 800da78:	40010400 	.word	0x40010400
 800da7c:	40014000 	.word	0x40014000
 800da80:	40014400 	.word	0x40014400
 800da84:	40014800 	.word	0x40014800
 800da88:	40000400 	.word	0x40000400
 800da8c:	40000800 	.word	0x40000800
 800da90:	40000c00 	.word	0x40000c00
 800da94:	40001800 	.word	0x40001800
 800da98:	00010007 	.word	0x00010007

0800da9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	e08f      	b.n	800dbd0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d106      	bne.n	800daca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7f8 fca7 	bl	8006418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2202      	movs	r2, #2
 800dace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6899      	ldr	r1, [r3, #8]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	4b3e      	ldr	r3, [pc, #248]	; (800dbd8 <HAL_TIM_Encoder_Init+0x13c>)
 800dade:	400b      	ands	r3, r1
 800dae0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	3304      	adds	r3, #4
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f000 fc5d 	bl	800e3ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	4313      	orrs	r3, r2
 800db12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800db14:	693a      	ldr	r2, [r7, #16]
 800db16:	4b31      	ldr	r3, [pc, #196]	; (800dbdc <HAL_TIM_Encoder_Init+0x140>)
 800db18:	4013      	ands	r3, r2
 800db1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	689a      	ldr	r2, [r3, #8]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	021b      	lsls	r3, r3, #8
 800db26:	4313      	orrs	r3, r2
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	4b2b      	ldr	r3, [pc, #172]	; (800dbe0 <HAL_TIM_Encoder_Init+0x144>)
 800db32:	4013      	ands	r3, r2
 800db34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	4b2a      	ldr	r3, [pc, #168]	; (800dbe4 <HAL_TIM_Encoder_Init+0x148>)
 800db3a:	4013      	ands	r3, r2
 800db3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	68da      	ldr	r2, [r3, #12]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	69db      	ldr	r3, [r3, #28]
 800db46:	021b      	lsls	r3, r3, #8
 800db48:	4313      	orrs	r3, r2
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	691b      	ldr	r3, [r3, #16]
 800db54:	011a      	lsls	r2, r3, #4
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	031b      	lsls	r3, r3, #12
 800db5c:	4313      	orrs	r3, r2
 800db5e:	693a      	ldr	r2, [r7, #16]
 800db60:	4313      	orrs	r3, r2
 800db62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800db6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800db72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	685a      	ldr	r2, [r3, #4]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	011b      	lsls	r3, r3, #4
 800db7e:	4313      	orrs	r3, r2
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4313      	orrs	r3, r2
 800db84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	697a      	ldr	r2, [r7, #20]
 800db8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	693a      	ldr	r2, [r7, #16]
 800db94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	fffebff8 	.word	0xfffebff8
 800dbdc:	fffffcfc 	.word	0xfffffcfc
 800dbe0:	fffff3f3 	.word	0xfffff3f3
 800dbe4:	ffff0f0f 	.word	0xffff0f0f

0800dbe8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbf8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dc00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d110      	bne.n	800dc3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc18:	7bfb      	ldrb	r3, [r7, #15]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d102      	bne.n	800dc24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc1e:	7b7b      	ldrb	r3, [r7, #13]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d001      	beq.n	800dc28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e069      	b.n	800dcfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2202      	movs	r2, #2
 800dc34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc38:	e031      	b.n	800dc9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	2b04      	cmp	r3, #4
 800dc3e:	d110      	bne.n	800dc62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc40:	7bbb      	ldrb	r3, [r7, #14]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d102      	bne.n	800dc4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc46:	7b3b      	ldrb	r3, [r7, #12]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d001      	beq.n	800dc50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e055      	b.n	800dcfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2202      	movs	r2, #2
 800dc54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc60:	e01d      	b.n	800dc9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d108      	bne.n	800dc7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc68:	7bbb      	ldrb	r3, [r7, #14]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d105      	bne.n	800dc7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc6e:	7b7b      	ldrb	r3, [r7, #13]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d102      	bne.n	800dc7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc74:	7b3b      	ldrb	r3, [r7, #12]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d001      	beq.n	800dc7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e03e      	b.n	800dcfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2202      	movs	r2, #2
 800dc82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2202      	movs	r2, #2
 800dc8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2202      	movs	r2, #2
 800dc92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2202      	movs	r2, #2
 800dc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d003      	beq.n	800dcac <HAL_TIM_Encoder_Start+0xc4>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2b04      	cmp	r3, #4
 800dca8:	d008      	beq.n	800dcbc <HAL_TIM_Encoder_Start+0xd4>
 800dcaa:	e00f      	b.n	800dccc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 ff87 	bl	800ebc8 <TIM_CCxChannelCmd>
      break;
 800dcba:	e016      	b.n	800dcea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	2104      	movs	r1, #4
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 ff7f 	bl	800ebc8 <TIM_CCxChannelCmd>
      break;
 800dcca:	e00e      	b.n	800dcea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f000 ff77 	bl	800ebc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2201      	movs	r2, #1
 800dce0:	2104      	movs	r1, #4
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 ff70 	bl	800ebc8 <TIM_CCxChannelCmd>
      break;
 800dce8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f042 0201 	orr.w	r2, r2, #1
 800dcf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	f003 0302 	and.w	r3, r3, #2
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d122      	bne.n	800dd60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f003 0302 	and.w	r3, r3, #2
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d11b      	bne.n	800dd60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f06f 0202 	mvn.w	r2, #2
 800dd30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	f003 0303 	and.w	r3, r3, #3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fb12 	bl	800e370 <HAL_TIM_IC_CaptureCallback>
 800dd4c:	e005      	b.n	800dd5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 fb04 	bl	800e35c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fb15 	bl	800e384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	f003 0304 	and.w	r3, r3, #4
 800dd6a:	2b04      	cmp	r3, #4
 800dd6c:	d122      	bne.n	800ddb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	f003 0304 	and.w	r3, r3, #4
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d11b      	bne.n	800ddb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f06f 0204 	mvn.w	r2, #4
 800dd84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2202      	movs	r2, #2
 800dd8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d003      	beq.n	800dda2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fae8 	bl	800e370 <HAL_TIM_IC_CaptureCallback>
 800dda0:	e005      	b.n	800ddae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fada 	bl	800e35c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 faeb 	bl	800e384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0308 	and.w	r3, r3, #8
 800ddbe:	2b08      	cmp	r3, #8
 800ddc0:	d122      	bne.n	800de08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f003 0308 	and.w	r3, r3, #8
 800ddcc:	2b08      	cmp	r3, #8
 800ddce:	d11b      	bne.n	800de08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f06f 0208 	mvn.w	r2, #8
 800ddd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2204      	movs	r2, #4
 800ddde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	69db      	ldr	r3, [r3, #28]
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fabe 	bl	800e370 <HAL_TIM_IC_CaptureCallback>
 800ddf4:	e005      	b.n	800de02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fab0 	bl	800e35c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 fac1 	bl	800e384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	f003 0310 	and.w	r3, r3, #16
 800de12:	2b10      	cmp	r3, #16
 800de14:	d122      	bne.n	800de5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f003 0310 	and.w	r3, r3, #16
 800de20:	2b10      	cmp	r3, #16
 800de22:	d11b      	bne.n	800de5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f06f 0210 	mvn.w	r2, #16
 800de2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2208      	movs	r2, #8
 800de32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa94 	bl	800e370 <HAL_TIM_IC_CaptureCallback>
 800de48:	e005      	b.n	800de56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fa86 	bl	800e35c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 fa97 	bl	800e384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	f003 0301 	and.w	r3, r3, #1
 800de66:	2b01      	cmp	r3, #1
 800de68:	d10e      	bne.n	800de88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b01      	cmp	r3, #1
 800de76:	d107      	bne.n	800de88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f06f 0201 	mvn.w	r2, #1
 800de80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7f5 fcd0 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de92:	2b80      	cmp	r3, #128	; 0x80
 800de94:	d10e      	bne.n	800deb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea0:	2b80      	cmp	r3, #128	; 0x80
 800dea2:	d107      	bne.n	800deb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800deac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 ffc6 	bl	800ee40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800debe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dec2:	d10e      	bne.n	800dee2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dece:	2b80      	cmp	r3, #128	; 0x80
 800ded0:	d107      	bne.n	800dee2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800deda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 ffb9 	bl	800ee54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deec:	2b40      	cmp	r3, #64	; 0x40
 800deee:	d10e      	bne.n	800df0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defa:	2b40      	cmp	r3, #64	; 0x40
 800defc:	d107      	bne.n	800df0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fa45 	bl	800e398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	f003 0320 	and.w	r3, r3, #32
 800df18:	2b20      	cmp	r3, #32
 800df1a:	d10e      	bne.n	800df3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	f003 0320 	and.w	r3, r3, #32
 800df26:	2b20      	cmp	r3, #32
 800df28:	d107      	bne.n	800df3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f06f 0220 	mvn.w	r2, #32
 800df32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 ff79 	bl	800ee2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d101      	bne.n	800df62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800df5e:	2302      	movs	r3, #2
 800df60:	e0ff      	b.n	800e162 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2201      	movs	r2, #1
 800df66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b14      	cmp	r3, #20
 800df6e:	f200 80f0 	bhi.w	800e152 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800df72:	a201      	add	r2, pc, #4	; (adr r2, 800df78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df78:	0800dfcd 	.word	0x0800dfcd
 800df7c:	0800e153 	.word	0x0800e153
 800df80:	0800e153 	.word	0x0800e153
 800df84:	0800e153 	.word	0x0800e153
 800df88:	0800e00d 	.word	0x0800e00d
 800df8c:	0800e153 	.word	0x0800e153
 800df90:	0800e153 	.word	0x0800e153
 800df94:	0800e153 	.word	0x0800e153
 800df98:	0800e04f 	.word	0x0800e04f
 800df9c:	0800e153 	.word	0x0800e153
 800dfa0:	0800e153 	.word	0x0800e153
 800dfa4:	0800e153 	.word	0x0800e153
 800dfa8:	0800e08f 	.word	0x0800e08f
 800dfac:	0800e153 	.word	0x0800e153
 800dfb0:	0800e153 	.word	0x0800e153
 800dfb4:	0800e153 	.word	0x0800e153
 800dfb8:	0800e0d1 	.word	0x0800e0d1
 800dfbc:	0800e153 	.word	0x0800e153
 800dfc0:	0800e153 	.word	0x0800e153
 800dfc4:	0800e153 	.word	0x0800e153
 800dfc8:	0800e111 	.word	0x0800e111
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fa84 	bl	800e4e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	699a      	ldr	r2, [r3, #24]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f042 0208 	orr.w	r2, r2, #8
 800dfe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	699a      	ldr	r2, [r3, #24]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f022 0204 	bic.w	r2, r2, #4
 800dff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6999      	ldr	r1, [r3, #24]
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	691a      	ldr	r2, [r3, #16]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	430a      	orrs	r2, r1
 800e008:	619a      	str	r2, [r3, #24]
      break;
 800e00a:	e0a5      	b.n	800e158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	68b9      	ldr	r1, [r7, #8]
 800e012:	4618      	mov	r0, r3
 800e014:	f000 faf4 	bl	800e600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	699a      	ldr	r2, [r3, #24]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	699a      	ldr	r2, [r3, #24]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	6999      	ldr	r1, [r3, #24]
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	021a      	lsls	r2, r3, #8
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	430a      	orrs	r2, r1
 800e04a:	619a      	str	r2, [r3, #24]
      break;
 800e04c:	e084      	b.n	800e158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68b9      	ldr	r1, [r7, #8]
 800e054:	4618      	mov	r0, r3
 800e056:	f000 fb5d 	bl	800e714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	69da      	ldr	r2, [r3, #28]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f042 0208 	orr.w	r2, r2, #8
 800e068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	69da      	ldr	r2, [r3, #28]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 0204 	bic.w	r2, r2, #4
 800e078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	69d9      	ldr	r1, [r3, #28]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	691a      	ldr	r2, [r3, #16]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	430a      	orrs	r2, r1
 800e08a:	61da      	str	r2, [r3, #28]
      break;
 800e08c:	e064      	b.n	800e158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68b9      	ldr	r1, [r7, #8]
 800e094:	4618      	mov	r0, r3
 800e096:	f000 fbc5 	bl	800e824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	69da      	ldr	r2, [r3, #28]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	69da      	ldr	r2, [r3, #28]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	69d9      	ldr	r1, [r3, #28]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	691b      	ldr	r3, [r3, #16]
 800e0c4:	021a      	lsls	r2, r3, #8
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	61da      	str	r2, [r3, #28]
      break;
 800e0ce:	e043      	b.n	800e158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68b9      	ldr	r1, [r7, #8]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 fc0e 	bl	800e8f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f042 0208 	orr.w	r2, r2, #8
 800e0ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f022 0204 	bic.w	r2, r2, #4
 800e0fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	691a      	ldr	r2, [r3, #16]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	430a      	orrs	r2, r1
 800e10c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e10e:	e023      	b.n	800e158 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68b9      	ldr	r1, [r7, #8]
 800e116:	4618      	mov	r0, r3
 800e118:	f000 fc52 	bl	800e9c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e12a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e13a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	691b      	ldr	r3, [r3, #16]
 800e146:	021a      	lsls	r2, r3, #8
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	430a      	orrs	r2, r1
 800e14e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e150:	e002      	b.n	800e158 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	75fb      	strb	r3, [r7, #23]
      break;
 800e156:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e160:	7dfb      	ldrb	r3, [r7, #23]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop

0800e16c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e180:	2b01      	cmp	r3, #1
 800e182:	d101      	bne.n	800e188 <HAL_TIM_ConfigClockSource+0x1c>
 800e184:	2302      	movs	r3, #2
 800e186:	e0dc      	b.n	800e342 <HAL_TIM_ConfigClockSource+0x1d6>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2202      	movs	r2, #2
 800e194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	4b6a      	ldr	r3, [pc, #424]	; (800e34c <HAL_TIM_ConfigClockSource+0x1e0>)
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e1ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a64      	ldr	r2, [pc, #400]	; (800e350 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	f000 80a9 	beq.w	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1c4:	4a62      	ldr	r2, [pc, #392]	; (800e350 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	f200 80ae 	bhi.w	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1cc:	4a61      	ldr	r2, [pc, #388]	; (800e354 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	f000 80a1 	beq.w	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1d4:	4a5f      	ldr	r2, [pc, #380]	; (800e354 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	f200 80a6 	bhi.w	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1dc:	4a5e      	ldr	r2, [pc, #376]	; (800e358 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	f000 8099 	beq.w	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1e4:	4a5c      	ldr	r2, [pc, #368]	; (800e358 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	f200 809e 	bhi.w	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e1f0:	f000 8091 	beq.w	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e1f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e1f8:	f200 8096 	bhi.w	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e1fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e200:	f000 8089 	beq.w	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e208:	f200 808e 	bhi.w	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e20c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e210:	d03e      	beq.n	800e290 <HAL_TIM_ConfigClockSource+0x124>
 800e212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e216:	f200 8087 	bhi.w	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e21e:	f000 8086 	beq.w	800e32e <HAL_TIM_ConfigClockSource+0x1c2>
 800e222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e226:	d87f      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e228:	2b70      	cmp	r3, #112	; 0x70
 800e22a:	d01a      	beq.n	800e262 <HAL_TIM_ConfigClockSource+0xf6>
 800e22c:	2b70      	cmp	r3, #112	; 0x70
 800e22e:	d87b      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e230:	2b60      	cmp	r3, #96	; 0x60
 800e232:	d050      	beq.n	800e2d6 <HAL_TIM_ConfigClockSource+0x16a>
 800e234:	2b60      	cmp	r3, #96	; 0x60
 800e236:	d877      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e238:	2b50      	cmp	r3, #80	; 0x50
 800e23a:	d03c      	beq.n	800e2b6 <HAL_TIM_ConfigClockSource+0x14a>
 800e23c:	2b50      	cmp	r3, #80	; 0x50
 800e23e:	d873      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e240:	2b40      	cmp	r3, #64	; 0x40
 800e242:	d058      	beq.n	800e2f6 <HAL_TIM_ConfigClockSource+0x18a>
 800e244:	2b40      	cmp	r3, #64	; 0x40
 800e246:	d86f      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e248:	2b30      	cmp	r3, #48	; 0x30
 800e24a:	d064      	beq.n	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e24c:	2b30      	cmp	r3, #48	; 0x30
 800e24e:	d86b      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e250:	2b20      	cmp	r3, #32
 800e252:	d060      	beq.n	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e254:	2b20      	cmp	r3, #32
 800e256:	d867      	bhi.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d05c      	beq.n	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e25c:	2b10      	cmp	r3, #16
 800e25e:	d05a      	beq.n	800e316 <HAL_TIM_ConfigClockSource+0x1aa>
 800e260:	e062      	b.n	800e328 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6818      	ldr	r0, [r3, #0]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	6899      	ldr	r1, [r3, #8]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	f000 fc89 	bl	800eb88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	609a      	str	r2, [r3, #8]
      break;
 800e28e:	e04f      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6818      	ldr	r0, [r3, #0]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	6899      	ldr	r1, [r3, #8]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	f000 fc72 	bl	800eb88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	689a      	ldr	r2, [r3, #8]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2b2:	609a      	str	r2, [r3, #8]
      break;
 800e2b4:	e03c      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	6859      	ldr	r1, [r3, #4]
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	f000 fbe2 	bl	800ea8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2150      	movs	r1, #80	; 0x50
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 fc3c 	bl	800eb4c <TIM_ITRx_SetConfig>
      break;
 800e2d4:	e02c      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6818      	ldr	r0, [r3, #0]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	6859      	ldr	r1, [r3, #4]
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f000 fc01 	bl	800eaea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2160      	movs	r1, #96	; 0x60
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f000 fc2c 	bl	800eb4c <TIM_ITRx_SetConfig>
      break;
 800e2f4:	e01c      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	6859      	ldr	r1, [r3, #4]
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	68db      	ldr	r3, [r3, #12]
 800e302:	461a      	mov	r2, r3
 800e304:	f000 fbc2 	bl	800ea8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2140      	movs	r1, #64	; 0x40
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 fc1c 	bl	800eb4c <TIM_ITRx_SetConfig>
      break;
 800e314:	e00c      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4619      	mov	r1, r3
 800e320:	4610      	mov	r0, r2
 800e322:	f000 fc13 	bl	800eb4c <TIM_ITRx_SetConfig>
      break;
 800e326:	e003      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e328:	2301      	movs	r3, #1
 800e32a:	73fb      	strb	r3, [r7, #15]
      break;
 800e32c:	e000      	b.n	800e330 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e32e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e340:	7bfb      	ldrb	r3, [r7, #15]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	ffceff88 	.word	0xffceff88
 800e350:	00100040 	.word	0x00100040
 800e354:	00100030 	.word	0x00100030
 800e358:	00100020 	.word	0x00100020

0800e35c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	4a40      	ldr	r2, [pc, #256]	; (800e4c0 <TIM_Base_SetConfig+0x114>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d013      	beq.n	800e3ec <TIM_Base_SetConfig+0x40>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3ca:	d00f      	beq.n	800e3ec <TIM_Base_SetConfig+0x40>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4a3d      	ldr	r2, [pc, #244]	; (800e4c4 <TIM_Base_SetConfig+0x118>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d00b      	beq.n	800e3ec <TIM_Base_SetConfig+0x40>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a3c      	ldr	r2, [pc, #240]	; (800e4c8 <TIM_Base_SetConfig+0x11c>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d007      	beq.n	800e3ec <TIM_Base_SetConfig+0x40>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4a3b      	ldr	r2, [pc, #236]	; (800e4cc <TIM_Base_SetConfig+0x120>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d003      	beq.n	800e3ec <TIM_Base_SetConfig+0x40>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	4a3a      	ldr	r2, [pc, #232]	; (800e4d0 <TIM_Base_SetConfig+0x124>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d108      	bne.n	800e3fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4a2f      	ldr	r2, [pc, #188]	; (800e4c0 <TIM_Base_SetConfig+0x114>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d01f      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e40c:	d01b      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4a2c      	ldr	r2, [pc, #176]	; (800e4c4 <TIM_Base_SetConfig+0x118>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d017      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	4a2b      	ldr	r2, [pc, #172]	; (800e4c8 <TIM_Base_SetConfig+0x11c>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d013      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4a2a      	ldr	r2, [pc, #168]	; (800e4cc <TIM_Base_SetConfig+0x120>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d00f      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4a29      	ldr	r2, [pc, #164]	; (800e4d0 <TIM_Base_SetConfig+0x124>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d00b      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4a28      	ldr	r2, [pc, #160]	; (800e4d4 <TIM_Base_SetConfig+0x128>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d007      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4a27      	ldr	r2, [pc, #156]	; (800e4d8 <TIM_Base_SetConfig+0x12c>)
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d003      	beq.n	800e446 <TIM_Base_SetConfig+0x9a>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4a26      	ldr	r2, [pc, #152]	; (800e4dc <TIM_Base_SetConfig+0x130>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d108      	bne.n	800e458 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e44c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	4313      	orrs	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	4313      	orrs	r3, r2
 800e464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	689a      	ldr	r2, [r3, #8]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a10      	ldr	r2, [pc, #64]	; (800e4c0 <TIM_Base_SetConfig+0x114>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d00f      	beq.n	800e4a4 <TIM_Base_SetConfig+0xf8>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a12      	ldr	r2, [pc, #72]	; (800e4d0 <TIM_Base_SetConfig+0x124>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d00b      	beq.n	800e4a4 <TIM_Base_SetConfig+0xf8>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a11      	ldr	r2, [pc, #68]	; (800e4d4 <TIM_Base_SetConfig+0x128>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d007      	beq.n	800e4a4 <TIM_Base_SetConfig+0xf8>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4a10      	ldr	r2, [pc, #64]	; (800e4d8 <TIM_Base_SetConfig+0x12c>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d003      	beq.n	800e4a4 <TIM_Base_SetConfig+0xf8>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4a0f      	ldr	r2, [pc, #60]	; (800e4dc <TIM_Base_SetConfig+0x130>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d103      	bne.n	800e4ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	691a      	ldr	r2, [r3, #16]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	615a      	str	r2, [r3, #20]
}
 800e4b2:	bf00      	nop
 800e4b4:	3714      	adds	r7, #20
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	40010000 	.word	0x40010000
 800e4c4:	40000400 	.word	0x40000400
 800e4c8:	40000800 	.word	0x40000800
 800e4cc:	40000c00 	.word	0x40000c00
 800e4d0:	40010400 	.word	0x40010400
 800e4d4:	40014000 	.word	0x40014000
 800e4d8:	40014400 	.word	0x40014400
 800e4dc:	40014800 	.word	0x40014800

0800e4e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	f023 0201 	bic.w	r2, r3, #1
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	4b37      	ldr	r3, [pc, #220]	; (800e5e8 <TIM_OC1_SetConfig+0x108>)
 800e50c:	4013      	ands	r3, r2
 800e50e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f023 0303 	bic.w	r3, r3, #3
 800e516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	4313      	orrs	r3, r2
 800e520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f023 0302 	bic.w	r3, r3, #2
 800e528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	697a      	ldr	r2, [r7, #20]
 800e530:	4313      	orrs	r3, r2
 800e532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a2d      	ldr	r2, [pc, #180]	; (800e5ec <TIM_OC1_SetConfig+0x10c>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d00f      	beq.n	800e55c <TIM_OC1_SetConfig+0x7c>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a2c      	ldr	r2, [pc, #176]	; (800e5f0 <TIM_OC1_SetConfig+0x110>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d00b      	beq.n	800e55c <TIM_OC1_SetConfig+0x7c>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a2b      	ldr	r2, [pc, #172]	; (800e5f4 <TIM_OC1_SetConfig+0x114>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d007      	beq.n	800e55c <TIM_OC1_SetConfig+0x7c>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a2a      	ldr	r2, [pc, #168]	; (800e5f8 <TIM_OC1_SetConfig+0x118>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d003      	beq.n	800e55c <TIM_OC1_SetConfig+0x7c>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4a29      	ldr	r2, [pc, #164]	; (800e5fc <TIM_OC1_SetConfig+0x11c>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d10c      	bne.n	800e576 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f023 0308 	bic.w	r3, r3, #8
 800e562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	697a      	ldr	r2, [r7, #20]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	f023 0304 	bic.w	r3, r3, #4
 800e574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a1c      	ldr	r2, [pc, #112]	; (800e5ec <TIM_OC1_SetConfig+0x10c>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d00f      	beq.n	800e59e <TIM_OC1_SetConfig+0xbe>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a1b      	ldr	r2, [pc, #108]	; (800e5f0 <TIM_OC1_SetConfig+0x110>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d00b      	beq.n	800e59e <TIM_OC1_SetConfig+0xbe>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a1a      	ldr	r2, [pc, #104]	; (800e5f4 <TIM_OC1_SetConfig+0x114>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d007      	beq.n	800e59e <TIM_OC1_SetConfig+0xbe>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a19      	ldr	r2, [pc, #100]	; (800e5f8 <TIM_OC1_SetConfig+0x118>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d003      	beq.n	800e59e <TIM_OC1_SetConfig+0xbe>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a18      	ldr	r2, [pc, #96]	; (800e5fc <TIM_OC1_SetConfig+0x11c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d111      	bne.n	800e5c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e5ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	699b      	ldr	r3, [r3, #24]
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	693a      	ldr	r2, [r7, #16]
 800e5c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	621a      	str	r2, [r3, #32]
}
 800e5dc:	bf00      	nop
 800e5de:	371c      	adds	r7, #28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr
 800e5e8:	fffeff8f 	.word	0xfffeff8f
 800e5ec:	40010000 	.word	0x40010000
 800e5f0:	40010400 	.word	0x40010400
 800e5f4:	40014000 	.word	0x40014000
 800e5f8:	40014400 	.word	0x40014400
 800e5fc:	40014800 	.word	0x40014800

0800e600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e600:	b480      	push	{r7}
 800e602:	b087      	sub	sp, #28
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a1b      	ldr	r3, [r3, #32]
 800e60e:	f023 0210 	bic.w	r2, r3, #16
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a1b      	ldr	r3, [r3, #32]
 800e61a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	699b      	ldr	r3, [r3, #24]
 800e626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e628:	68fa      	ldr	r2, [r7, #12]
 800e62a:	4b34      	ldr	r3, [pc, #208]	; (800e6fc <TIM_OC2_SetConfig+0xfc>)
 800e62c:	4013      	ands	r3, r2
 800e62e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	021b      	lsls	r3, r3, #8
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	4313      	orrs	r3, r2
 800e642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	f023 0320 	bic.w	r3, r3, #32
 800e64a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	011b      	lsls	r3, r3, #4
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	4313      	orrs	r3, r2
 800e656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a29      	ldr	r2, [pc, #164]	; (800e700 <TIM_OC2_SetConfig+0x100>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_OC2_SetConfig+0x68>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a28      	ldr	r2, [pc, #160]	; (800e704 <TIM_OC2_SetConfig+0x104>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d10d      	bne.n	800e684 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e66e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	011b      	lsls	r3, r3, #4
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	4313      	orrs	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4a1e      	ldr	r2, [pc, #120]	; (800e700 <TIM_OC2_SetConfig+0x100>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d00f      	beq.n	800e6ac <TIM_OC2_SetConfig+0xac>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	4a1d      	ldr	r2, [pc, #116]	; (800e704 <TIM_OC2_SetConfig+0x104>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d00b      	beq.n	800e6ac <TIM_OC2_SetConfig+0xac>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4a1c      	ldr	r2, [pc, #112]	; (800e708 <TIM_OC2_SetConfig+0x108>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d007      	beq.n	800e6ac <TIM_OC2_SetConfig+0xac>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a1b      	ldr	r2, [pc, #108]	; (800e70c <TIM_OC2_SetConfig+0x10c>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d003      	beq.n	800e6ac <TIM_OC2_SetConfig+0xac>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a1a      	ldr	r2, [pc, #104]	; (800e710 <TIM_OC2_SetConfig+0x110>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d113      	bne.n	800e6d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	695b      	ldr	r3, [r3, #20]
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	693a      	ldr	r2, [r7, #16]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	699b      	ldr	r3, [r3, #24]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	693a      	ldr	r2, [r7, #16]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	693a      	ldr	r2, [r7, #16]
 800e6d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	685a      	ldr	r2, [r3, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	697a      	ldr	r2, [r7, #20]
 800e6ec:	621a      	str	r2, [r3, #32]
}
 800e6ee:	bf00      	nop
 800e6f0:	371c      	adds	r7, #28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	feff8fff 	.word	0xfeff8fff
 800e700:	40010000 	.word	0x40010000
 800e704:	40010400 	.word	0x40010400
 800e708:	40014000 	.word	0x40014000
 800e70c:	40014400 	.word	0x40014400
 800e710:	40014800 	.word	0x40014800

0800e714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e714:	b480      	push	{r7}
 800e716:	b087      	sub	sp, #28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	4b33      	ldr	r3, [pc, #204]	; (800e80c <TIM_OC3_SetConfig+0xf8>)
 800e740:	4013      	ands	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f023 0303 	bic.w	r3, r3, #3
 800e74a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	4313      	orrs	r3, r2
 800e754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e75c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	021b      	lsls	r3, r3, #8
 800e764:	697a      	ldr	r2, [r7, #20]
 800e766:	4313      	orrs	r3, r2
 800e768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a28      	ldr	r2, [pc, #160]	; (800e810 <TIM_OC3_SetConfig+0xfc>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d003      	beq.n	800e77a <TIM_OC3_SetConfig+0x66>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a27      	ldr	r2, [pc, #156]	; (800e814 <TIM_OC3_SetConfig+0x100>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d10d      	bne.n	800e796 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	021b      	lsls	r3, r3, #8
 800e788:	697a      	ldr	r2, [r7, #20]
 800e78a:	4313      	orrs	r3, r2
 800e78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4a1d      	ldr	r2, [pc, #116]	; (800e810 <TIM_OC3_SetConfig+0xfc>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d00f      	beq.n	800e7be <TIM_OC3_SetConfig+0xaa>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a1c      	ldr	r2, [pc, #112]	; (800e814 <TIM_OC3_SetConfig+0x100>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d00b      	beq.n	800e7be <TIM_OC3_SetConfig+0xaa>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a1b      	ldr	r2, [pc, #108]	; (800e818 <TIM_OC3_SetConfig+0x104>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d007      	beq.n	800e7be <TIM_OC3_SetConfig+0xaa>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a1a      	ldr	r2, [pc, #104]	; (800e81c <TIM_OC3_SetConfig+0x108>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d003      	beq.n	800e7be <TIM_OC3_SetConfig+0xaa>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a19      	ldr	r2, [pc, #100]	; (800e820 <TIM_OC3_SetConfig+0x10c>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d113      	bne.n	800e7e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e7cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	011b      	lsls	r3, r3, #4
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	685a      	ldr	r2, [r3, #4]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	621a      	str	r2, [r3, #32]
}
 800e800:	bf00      	nop
 800e802:	371c      	adds	r7, #28
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr
 800e80c:	fffeff8f 	.word	0xfffeff8f
 800e810:	40010000 	.word	0x40010000
 800e814:	40010400 	.word	0x40010400
 800e818:	40014000 	.word	0x40014000
 800e81c:	40014400 	.word	0x40014400
 800e820:	40014800 	.word	0x40014800

0800e824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e824:	b480      	push	{r7}
 800e826:	b087      	sub	sp, #28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a1b      	ldr	r3, [r3, #32]
 800e832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a1b      	ldr	r3, [r3, #32]
 800e83e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	4b24      	ldr	r3, [pc, #144]	; (800e8e0 <TIM_OC4_SetConfig+0xbc>)
 800e850:	4013      	ands	r3, r2
 800e852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e85a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4313      	orrs	r3, r2
 800e866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e86e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	031b      	lsls	r3, r3, #12
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	4313      	orrs	r3, r2
 800e87a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4a19      	ldr	r2, [pc, #100]	; (800e8e4 <TIM_OC4_SetConfig+0xc0>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d00f      	beq.n	800e8a4 <TIM_OC4_SetConfig+0x80>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a18      	ldr	r2, [pc, #96]	; (800e8e8 <TIM_OC4_SetConfig+0xc4>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d00b      	beq.n	800e8a4 <TIM_OC4_SetConfig+0x80>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a17      	ldr	r2, [pc, #92]	; (800e8ec <TIM_OC4_SetConfig+0xc8>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d007      	beq.n	800e8a4 <TIM_OC4_SetConfig+0x80>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a16      	ldr	r2, [pc, #88]	; (800e8f0 <TIM_OC4_SetConfig+0xcc>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d003      	beq.n	800e8a4 <TIM_OC4_SetConfig+0x80>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a15      	ldr	r2, [pc, #84]	; (800e8f4 <TIM_OC4_SetConfig+0xd0>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d109      	bne.n	800e8b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	695b      	ldr	r3, [r3, #20]
 800e8b0:	019b      	lsls	r3, r3, #6
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	693a      	ldr	r2, [r7, #16]
 800e8d0:	621a      	str	r2, [r3, #32]
}
 800e8d2:	bf00      	nop
 800e8d4:	371c      	adds	r7, #28
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	feff8fff 	.word	0xfeff8fff
 800e8e4:	40010000 	.word	0x40010000
 800e8e8:	40010400 	.word	0x40010400
 800e8ec:	40014000 	.word	0x40014000
 800e8f0:	40014400 	.word	0x40014400
 800e8f4:	40014800 	.word	0x40014800

0800e8f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a1b      	ldr	r3, [r3, #32]
 800e912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4b21      	ldr	r3, [pc, #132]	; (800e9a8 <TIM_OC5_SetConfig+0xb0>)
 800e924:	4013      	ands	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	4313      	orrs	r3, r2
 800e930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	041b      	lsls	r3, r3, #16
 800e940:	693a      	ldr	r2, [r7, #16]
 800e942:	4313      	orrs	r3, r2
 800e944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a18      	ldr	r2, [pc, #96]	; (800e9ac <TIM_OC5_SetConfig+0xb4>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d00f      	beq.n	800e96e <TIM_OC5_SetConfig+0x76>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a17      	ldr	r2, [pc, #92]	; (800e9b0 <TIM_OC5_SetConfig+0xb8>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00b      	beq.n	800e96e <TIM_OC5_SetConfig+0x76>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a16      	ldr	r2, [pc, #88]	; (800e9b4 <TIM_OC5_SetConfig+0xbc>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d007      	beq.n	800e96e <TIM_OC5_SetConfig+0x76>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a15      	ldr	r2, [pc, #84]	; (800e9b8 <TIM_OC5_SetConfig+0xc0>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d003      	beq.n	800e96e <TIM_OC5_SetConfig+0x76>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a14      	ldr	r2, [pc, #80]	; (800e9bc <TIM_OC5_SetConfig+0xc4>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d109      	bne.n	800e982 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	695b      	ldr	r3, [r3, #20]
 800e97a:	021b      	lsls	r3, r3, #8
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	4313      	orrs	r3, r2
 800e980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	697a      	ldr	r2, [r7, #20]
 800e986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	621a      	str	r2, [r3, #32]
}
 800e99c:	bf00      	nop
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	fffeff8f 	.word	0xfffeff8f
 800e9ac:	40010000 	.word	0x40010000
 800e9b0:	40010400 	.word	0x40010400
 800e9b4:	40014000 	.word	0x40014000
 800e9b8:	40014400 	.word	0x40014400
 800e9bc:	40014800 	.word	0x40014800

0800e9c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b087      	sub	sp, #28
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a1b      	ldr	r3, [r3, #32]
 800e9ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e9e8:	68fa      	ldr	r2, [r7, #12]
 800e9ea:	4b22      	ldr	r3, [pc, #136]	; (800ea74 <TIM_OC6_SetConfig+0xb4>)
 800e9ec:	4013      	ands	r3, r2
 800e9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ea02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	051b      	lsls	r3, r3, #20
 800ea0a:	693a      	ldr	r2, [r7, #16]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4a19      	ldr	r2, [pc, #100]	; (800ea78 <TIM_OC6_SetConfig+0xb8>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d00f      	beq.n	800ea38 <TIM_OC6_SetConfig+0x78>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4a18      	ldr	r2, [pc, #96]	; (800ea7c <TIM_OC6_SetConfig+0xbc>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d00b      	beq.n	800ea38 <TIM_OC6_SetConfig+0x78>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a17      	ldr	r2, [pc, #92]	; (800ea80 <TIM_OC6_SetConfig+0xc0>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d007      	beq.n	800ea38 <TIM_OC6_SetConfig+0x78>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a16      	ldr	r2, [pc, #88]	; (800ea84 <TIM_OC6_SetConfig+0xc4>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d003      	beq.n	800ea38 <TIM_OC6_SetConfig+0x78>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a15      	ldr	r2, [pc, #84]	; (800ea88 <TIM_OC6_SetConfig+0xc8>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d109      	bne.n	800ea4c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	029b      	lsls	r3, r3, #10
 800ea46:	697a      	ldr	r2, [r7, #20]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	685a      	ldr	r2, [r3, #4]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	621a      	str	r2, [r3, #32]
}
 800ea66:	bf00      	nop
 800ea68:	371c      	adds	r7, #28
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	feff8fff 	.word	0xfeff8fff
 800ea78:	40010000 	.word	0x40010000
 800ea7c:	40010400 	.word	0x40010400
 800ea80:	40014000 	.word	0x40014000
 800ea84:	40014400 	.word	0x40014400
 800ea88:	40014800 	.word	0x40014800

0800ea8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b087      	sub	sp, #28
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6a1b      	ldr	r3, [r3, #32]
 800ea9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6a1b      	ldr	r3, [r3, #32]
 800eaa2:	f023 0201 	bic.w	r2, r3, #1
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	011b      	lsls	r3, r3, #4
 800eabc:	693a      	ldr	r2, [r7, #16]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	f023 030a 	bic.w	r3, r3, #10
 800eac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eaca:	697a      	ldr	r2, [r7, #20]
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	4313      	orrs	r3, r2
 800ead0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	621a      	str	r2, [r3, #32]
}
 800eade:	bf00      	nop
 800eae0:	371c      	adds	r7, #28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b087      	sub	sp, #28
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	60f8      	str	r0, [r7, #12]
 800eaf2:	60b9      	str	r1, [r7, #8]
 800eaf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6a1b      	ldr	r3, [r3, #32]
 800eafa:	f023 0210 	bic.w	r2, r3, #16
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	699b      	ldr	r3, [r3, #24]
 800eb06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6a1b      	ldr	r3, [r3, #32]
 800eb0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800eb14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	031b      	lsls	r3, r3, #12
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800eb26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	011b      	lsls	r3, r3, #4
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	697a      	ldr	r2, [r7, #20]
 800eb36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	693a      	ldr	r2, [r7, #16]
 800eb3c:	621a      	str	r2, [r3, #32]
}
 800eb3e:	bf00      	nop
 800eb40:	371c      	adds	r7, #28
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
	...

0800eb4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <TIM_ITRx_SetConfig+0x38>)
 800eb60:	4013      	ands	r3, r2
 800eb62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb64:	683a      	ldr	r2, [r7, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	f043 0307 	orr.w	r3, r3, #7
 800eb6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	609a      	str	r2, [r3, #8]
}
 800eb76:	bf00      	nop
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	ffcfff8f 	.word	0xffcfff8f

0800eb88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b087      	sub	sp, #28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	021a      	lsls	r2, r3, #8
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	431a      	orrs	r2, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	609a      	str	r2, [r3, #8]
}
 800ebbc:	bf00      	nop
 800ebbe:	371c      	adds	r7, #28
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b087      	sub	sp, #28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f003 031f 	and.w	r3, r3, #31
 800ebda:	2201      	movs	r2, #1
 800ebdc:	fa02 f303 	lsl.w	r3, r2, r3
 800ebe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a1a      	ldr	r2, [r3, #32]
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	43db      	mvns	r3, r3
 800ebea:	401a      	ands	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6a1a      	ldr	r2, [r3, #32]
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	f003 031f 	and.w	r3, r3, #31
 800ebfa:	6879      	ldr	r1, [r7, #4]
 800ebfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ec00:	431a      	orrs	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	621a      	str	r2, [r3, #32]
}
 800ec06:	bf00      	nop
 800ec08:	371c      	adds	r7, #28
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
	...

0800ec14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d101      	bne.n	800ec2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e06d      	b.n	800ed08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2202      	movs	r2, #2
 800ec38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a30      	ldr	r2, [pc, #192]	; (800ed14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d004      	beq.n	800ec60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a2f      	ldr	r2, [pc, #188]	; (800ed18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d108      	bne.n	800ec72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ec66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	4313      	orrs	r3, r2
 800ec82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a20      	ldr	r2, [pc, #128]	; (800ed14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d022      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec9e:	d01d      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a1d      	ldr	r2, [pc, #116]	; (800ed1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d018      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a1c      	ldr	r2, [pc, #112]	; (800ed20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d013      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a1a      	ldr	r2, [pc, #104]	; (800ed24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d00e      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a15      	ldr	r2, [pc, #84]	; (800ed18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d009      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a16      	ldr	r2, [pc, #88]	; (800ed28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d004      	beq.n	800ecdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a15      	ldr	r2, [pc, #84]	; (800ed2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d10c      	bne.n	800ecf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ece2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3714      	adds	r7, #20
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr
 800ed14:	40010000 	.word	0x40010000
 800ed18:	40010400 	.word	0x40010400
 800ed1c:	40000400 	.word	0x40000400
 800ed20:	40000800 	.word	0x40000800
 800ed24:	40000c00 	.word	0x40000c00
 800ed28:	40001800 	.word	0x40001800
 800ed2c:	40014000 	.word	0x40014000

0800ed30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d101      	bne.n	800ed4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ed48:	2302      	movs	r3, #2
 800ed4a:	e065      	b.n	800ee18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	691b      	ldr	r3, [r3, #16]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb2:	4313      	orrs	r3, r2
 800edb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	041b      	lsls	r3, r3, #16
 800edc2:	4313      	orrs	r3, r2
 800edc4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a16      	ldr	r2, [pc, #88]	; (800ee24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d004      	beq.n	800edda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a14      	ldr	r2, [pc, #80]	; (800ee28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d115      	bne.n	800ee06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede4:	051b      	lsls	r3, r3, #20
 800ede6:	4313      	orrs	r3, r2
 800ede8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	69db      	ldr	r3, [r3, #28]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68fa      	ldr	r2, [r7, #12]
 800ee0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr
 800ee24:	40010000 	.word	0x40010000
 800ee28:	40010400 	.word	0x40010400

0800ee2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee48:	bf00      	nop
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e042      	b.n	800ef00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d106      	bne.n	800ee92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7f7 fd43 	bl	8006918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2224      	movs	r2, #36	; 0x24
 800ee96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f022 0201 	bic.w	r2, r2, #1
 800eea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fdf8 	bl	800faa0 <UART_SetConfig>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d101      	bne.n	800eeba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e022      	b.n	800ef00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f001 fb54 	bl	8010570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	685a      	ldr	r2, [r3, #4]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	689a      	ldr	r2, [r3, #8]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f042 0201 	orr.w	r2, r2, #1
 800eef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f001 fbdb 	bl	80106b4 <UART_CheckIdleState>
 800eefe:	4603      	mov	r3, r0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08a      	sub	sp, #40	; 0x28
 800ef0c:	af02      	add	r7, sp, #8
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	603b      	str	r3, [r7, #0]
 800ef14:	4613      	mov	r3, r2
 800ef16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef1e:	2b20      	cmp	r3, #32
 800ef20:	f040 8083 	bne.w	800f02a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d002      	beq.n	800ef30 <HAL_UART_Transmit+0x28>
 800ef2a:	88fb      	ldrh	r3, [r7, #6]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d101      	bne.n	800ef34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ef30:	2301      	movs	r3, #1
 800ef32:	e07b      	b.n	800f02c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d101      	bne.n	800ef42 <HAL_UART_Transmit+0x3a>
 800ef3e:	2302      	movs	r3, #2
 800ef40:	e074      	b.n	800f02c <HAL_UART_Transmit+0x124>
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2201      	movs	r2, #1
 800ef46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2221      	movs	r2, #33	; 0x21
 800ef56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef5a:	f7f8 f87d 	bl	8007058 <HAL_GetTick>
 800ef5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	88fa      	ldrh	r2, [r7, #6]
 800ef64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	88fa      	ldrh	r2, [r7, #6]
 800ef6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef78:	d108      	bne.n	800ef8c <HAL_UART_Transmit+0x84>
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d104      	bne.n	800ef8c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	61bb      	str	r3, [r7, #24]
 800ef8a:	e003      	b.n	800ef94 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef90:	2300      	movs	r3, #0
 800ef92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ef9c:	e02c      	b.n	800eff8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2200      	movs	r2, #0
 800efa6:	2180      	movs	r1, #128	; 0x80
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f001 fbce 	bl	801074a <UART_WaitOnFlagUntilTimeout>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800efb4:	2303      	movs	r3, #3
 800efb6:	e039      	b.n	800f02c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10b      	bne.n	800efd6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800efcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	3302      	adds	r3, #2
 800efd2:	61bb      	str	r3, [r7, #24]
 800efd4:	e007      	b.n	800efe6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	781a      	ldrb	r2, [r3, #0]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	3301      	adds	r3, #1
 800efe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800efec:	b29b      	uxth	r3, r3
 800efee:	3b01      	subs	r3, #1
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800effe:	b29b      	uxth	r3, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1cc      	bne.n	800ef9e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	2200      	movs	r2, #0
 800f00c:	2140      	movs	r1, #64	; 0x40
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f001 fb9b 	bl	801074a <UART_WaitOnFlagUntilTimeout>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d001      	beq.n	800f01e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f01a:	2303      	movs	r3, #3
 800f01c:	e006      	b.n	800f02c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2220      	movs	r2, #32
 800f022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f026:	2300      	movs	r3, #0
 800f028:	e000      	b.n	800f02c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f02a:	2302      	movs	r3, #2
  }
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3720      	adds	r7, #32
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08a      	sub	sp, #40	; 0x28
 800f038:	af02      	add	r7, sp, #8
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	603b      	str	r3, [r7, #0]
 800f040:	4613      	mov	r3, r2
 800f042:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f04a:	2b20      	cmp	r3, #32
 800f04c:	f040 80c0 	bne.w	800f1d0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d002      	beq.n	800f05c <HAL_UART_Receive+0x28>
 800f056:	88fb      	ldrh	r3, [r7, #6]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d101      	bne.n	800f060 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e0b8      	b.n	800f1d2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f066:	2b01      	cmp	r3, #1
 800f068:	d101      	bne.n	800f06e <HAL_UART_Receive+0x3a>
 800f06a:	2302      	movs	r3, #2
 800f06c:	e0b1      	b.n	800f1d2 <HAL_UART_Receive+0x19e>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2201      	movs	r2, #1
 800f072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2222      	movs	r2, #34	; 0x22
 800f082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f08c:	f7f7 ffe4 	bl	8007058 <HAL_GetTick>
 800f090:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	88fa      	ldrh	r2, [r7, #6]
 800f096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	88fa      	ldrh	r2, [r7, #6]
 800f09e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0aa:	d10e      	bne.n	800f0ca <HAL_UART_Receive+0x96>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	691b      	ldr	r3, [r3, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d105      	bne.n	800f0c0 <HAL_UART_Receive+0x8c>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f0ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0be:	e02d      	b.n	800f11c <HAL_UART_Receive+0xe8>
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	22ff      	movs	r2, #255	; 0xff
 800f0c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0c8:	e028      	b.n	800f11c <HAL_UART_Receive+0xe8>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10d      	bne.n	800f0ee <HAL_UART_Receive+0xba>
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	691b      	ldr	r3, [r3, #16]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d104      	bne.n	800f0e4 <HAL_UART_Receive+0xb0>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	22ff      	movs	r2, #255	; 0xff
 800f0de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0e2:	e01b      	b.n	800f11c <HAL_UART_Receive+0xe8>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	227f      	movs	r2, #127	; 0x7f
 800f0e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0ec:	e016      	b.n	800f11c <HAL_UART_Receive+0xe8>
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f0f6:	d10d      	bne.n	800f114 <HAL_UART_Receive+0xe0>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d104      	bne.n	800f10a <HAL_UART_Receive+0xd6>
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	227f      	movs	r2, #127	; 0x7f
 800f104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f108:	e008      	b.n	800f11c <HAL_UART_Receive+0xe8>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	223f      	movs	r2, #63	; 0x3f
 800f10e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f112:	e003      	b.n	800f11c <HAL_UART_Receive+0xe8>
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f122:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f12c:	d108      	bne.n	800f140 <HAL_UART_Receive+0x10c>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	691b      	ldr	r3, [r3, #16]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d104      	bne.n	800f140 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f136:	2300      	movs	r3, #0
 800f138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	61bb      	str	r3, [r7, #24]
 800f13e:	e003      	b.n	800f148 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f144:	2300      	movs	r3, #0
 800f146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f150:	e032      	b.n	800f1b8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	2200      	movs	r2, #0
 800f15a:	2120      	movs	r1, #32
 800f15c:	68f8      	ldr	r0, [r7, #12]
 800f15e:	f001 faf4 	bl	801074a <UART_WaitOnFlagUntilTimeout>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f168:	2303      	movs	r3, #3
 800f16a:	e032      	b.n	800f1d2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d10c      	bne.n	800f18c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f178:	b29a      	uxth	r2, r3
 800f17a:	8a7b      	ldrh	r3, [r7, #18]
 800f17c:	4013      	ands	r3, r2
 800f17e:	b29a      	uxth	r2, r3
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f184:	69bb      	ldr	r3, [r7, #24]
 800f186:	3302      	adds	r3, #2
 800f188:	61bb      	str	r3, [r7, #24]
 800f18a:	e00c      	b.n	800f1a6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f192:	b2da      	uxtb	r2, r3
 800f194:	8a7b      	ldrh	r3, [r7, #18]
 800f196:	b2db      	uxtb	r3, r3
 800f198:	4013      	ands	r3, r2
 800f19a:	b2da      	uxtb	r2, r3
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	3b01      	subs	r3, #1
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d1c6      	bne.n	800f152 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2220      	movs	r2, #32
 800f1c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	e000      	b.n	800f1d2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f1d0:	2302      	movs	r3, #2
  }
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3720      	adds	r7, #32
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
	...

0800f1dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b08a      	sub	sp, #40	; 0x28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1f0:	2b20      	cmp	r3, #32
 800f1f2:	d17a      	bne.n	800f2ea <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d002      	beq.n	800f200 <HAL_UART_Transmit_DMA+0x24>
 800f1fa:	88fb      	ldrh	r3, [r7, #6]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d101      	bne.n	800f204 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f200:	2301      	movs	r3, #1
 800f202:	e073      	b.n	800f2ec <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d101      	bne.n	800f212 <HAL_UART_Transmit_DMA+0x36>
 800f20e:	2302      	movs	r3, #2
 800f210:	e06c      	b.n	800f2ec <HAL_UART_Transmit_DMA+0x110>
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2201      	movs	r2, #1
 800f216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	88fa      	ldrh	r2, [r7, #6]
 800f224:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	88fa      	ldrh	r2, [r7, #6]
 800f22c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2221      	movs	r2, #33	; 0x21
 800f23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f244:	2b00      	cmp	r3, #0
 800f246:	d02c      	beq.n	800f2a2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f24c:	4a29      	ldr	r2, [pc, #164]	; (800f2f4 <HAL_UART_Transmit_DMA+0x118>)
 800f24e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f254:	4a28      	ldr	r2, [pc, #160]	; (800f2f8 <HAL_UART_Transmit_DMA+0x11c>)
 800f256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f25c:	4a27      	ldr	r2, [pc, #156]	; (800f2fc <HAL_UART_Transmit_DMA+0x120>)
 800f25e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f264:	2200      	movs	r2, #0
 800f266:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f270:	4619      	mov	r1, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	3328      	adds	r3, #40	; 0x28
 800f278:	461a      	mov	r2, r3
 800f27a:	88fb      	ldrh	r3, [r7, #6]
 800f27c:	f7f8 fd9e 	bl	8007dbc <HAL_DMA_Start_IT>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00d      	beq.n	800f2a2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2210      	movs	r2, #16
 800f28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2200      	movs	r2, #0
 800f292:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2220      	movs	r2, #32
 800f29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e024      	b.n	800f2ec <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2240      	movs	r2, #64	; 0x40
 800f2a8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	e853 3f00 	ldrex	r3, [r3]
 800f2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	3308      	adds	r3, #8
 800f2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d2:	623a      	str	r2, [r7, #32]
 800f2d4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d6:	69f9      	ldr	r1, [r7, #28]
 800f2d8:	6a3a      	ldr	r2, [r7, #32]
 800f2da:	e841 2300 	strex	r3, r2, [r1]
 800f2de:	61bb      	str	r3, [r7, #24]
   return(result);
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1e5      	bne.n	800f2b2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	e000      	b.n	800f2ec <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800f2ea:	2302      	movs	r3, #2
  }
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3728      	adds	r7, #40	; 0x28
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	08010b7d 	.word	0x08010b7d
 800f2f8:	08010c13 	.word	0x08010c13
 800f2fc:	08010d89 	.word	0x08010d89

0800f300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b0ba      	sub	sp, #232	; 0xe8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	69db      	ldr	r3, [r3, #28]
 800f30e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f326:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f32a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f32e:	4013      	ands	r3, r2
 800f330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d11b      	bne.n	800f374 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f340:	f003 0320 	and.w	r3, r3, #32
 800f344:	2b00      	cmp	r3, #0
 800f346:	d015      	beq.n	800f374 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f34c:	f003 0320 	and.w	r3, r3, #32
 800f350:	2b00      	cmp	r3, #0
 800f352:	d105      	bne.n	800f360 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d009      	beq.n	800f374 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f364:	2b00      	cmp	r3, #0
 800f366:	f000 835a 	beq.w	800fa1e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	4798      	blx	r3
      }
      return;
 800f372:	e354      	b.n	800fa1e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f000 811f 	beq.w	800f5bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f37e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f382:	4b8b      	ldr	r3, [pc, #556]	; (800f5b0 <HAL_UART_IRQHandler+0x2b0>)
 800f384:	4013      	ands	r3, r2
 800f386:	2b00      	cmp	r3, #0
 800f388:	d106      	bne.n	800f398 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f38a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f38e:	4b89      	ldr	r3, [pc, #548]	; (800f5b4 <HAL_UART_IRQHandler+0x2b4>)
 800f390:	4013      	ands	r3, r2
 800f392:	2b00      	cmp	r3, #0
 800f394:	f000 8112 	beq.w	800f5bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f39c:	f003 0301 	and.w	r3, r3, #1
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d011      	beq.n	800f3c8 <HAL_UART_IRQHandler+0xc8>
 800f3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00b      	beq.n	800f3c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3be:	f043 0201 	orr.w	r2, r3, #1
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3cc:	f003 0302 	and.w	r3, r3, #2
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d011      	beq.n	800f3f8 <HAL_UART_IRQHandler+0xf8>
 800f3d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3d8:	f003 0301 	and.w	r3, r3, #1
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00b      	beq.n	800f3f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ee:	f043 0204 	orr.w	r2, r3, #4
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3fc:	f003 0304 	and.w	r3, r3, #4
 800f400:	2b00      	cmp	r3, #0
 800f402:	d011      	beq.n	800f428 <HAL_UART_IRQHandler+0x128>
 800f404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f408:	f003 0301 	and.w	r3, r3, #1
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00b      	beq.n	800f428 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2204      	movs	r2, #4
 800f416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f41e:	f043 0202 	orr.w	r2, r3, #2
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f42c:	f003 0308 	and.w	r3, r3, #8
 800f430:	2b00      	cmp	r3, #0
 800f432:	d017      	beq.n	800f464 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f438:	f003 0320 	and.w	r3, r3, #32
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d105      	bne.n	800f44c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f440:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f444:	4b5a      	ldr	r3, [pc, #360]	; (800f5b0 <HAL_UART_IRQHandler+0x2b0>)
 800f446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00b      	beq.n	800f464 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2208      	movs	r2, #8
 800f452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f45a:	f043 0208 	orr.w	r2, r3, #8
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d012      	beq.n	800f496 <HAL_UART_IRQHandler+0x196>
 800f470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00c      	beq.n	800f496 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f48c:	f043 0220 	orr.w	r2, r3, #32
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f000 82c0 	beq.w	800fa22 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4a6:	f003 0320 	and.w	r3, r3, #32
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d013      	beq.n	800f4d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f4ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4b2:	f003 0320 	and.w	r3, r3, #32
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d105      	bne.n	800f4c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d007      	beq.n	800f4d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d003      	beq.n	800f4d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ea:	2b40      	cmp	r3, #64	; 0x40
 800f4ec:	d005      	beq.n	800f4fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f4ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f4f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d04f      	beq.n	800f59a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f001 fad8 	bl	8010ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f50a:	2b40      	cmp	r3, #64	; 0x40
 800f50c:	d141      	bne.n	800f592 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	3308      	adds	r3, #8
 800f514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f51c:	e853 3f00 	ldrex	r3, [r3]
 800f520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f52c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	3308      	adds	r3, #8
 800f536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f53a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f53e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1d9      	bne.n	800f50e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d013      	beq.n	800f58a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f566:	4a14      	ldr	r2, [pc, #80]	; (800f5b8 <HAL_UART_IRQHandler+0x2b8>)
 800f568:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f56e:	4618      	mov	r0, r3
 800f570:	f7f9 f9ac 	bl	80088cc <HAL_DMA_Abort_IT>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d017      	beq.n	800f5aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f584:	4610      	mov	r0, r2
 800f586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f588:	e00f      	b.n	800f5aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 fa7e 	bl	800fa8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f590:	e00b      	b.n	800f5aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fa7a 	bl	800fa8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f598:	e007      	b.n	800f5aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fa76 	bl	800fa8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f5a8:	e23b      	b.n	800fa22 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5aa:	bf00      	nop
    return;
 800f5ac:	e239      	b.n	800fa22 <HAL_UART_IRQHandler+0x722>
 800f5ae:	bf00      	nop
 800f5b0:	10000001 	.word	0x10000001
 800f5b4:	04000120 	.word	0x04000120
 800f5b8:	08010e09 	.word	0x08010e09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	f040 81ce 	bne.w	800f962 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ca:	f003 0310 	and.w	r3, r3, #16
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f000 81c7 	beq.w	800f962 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5d8:	f003 0310 	and.w	r3, r3, #16
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 81c0 	beq.w	800f962 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2210      	movs	r2, #16
 800f5e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	689b      	ldr	r3, [r3, #8]
 800f5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5f4:	2b40      	cmp	r3, #64	; 0x40
 800f5f6:	f040 813b 	bne.w	800f870 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a8b      	ldr	r2, [pc, #556]	; (800f830 <HAL_UART_IRQHandler+0x530>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d059      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4a89      	ldr	r2, [pc, #548]	; (800f834 <HAL_UART_IRQHandler+0x534>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d053      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a87      	ldr	r2, [pc, #540]	; (800f838 <HAL_UART_IRQHandler+0x538>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d04d      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a85      	ldr	r2, [pc, #532]	; (800f83c <HAL_UART_IRQHandler+0x53c>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d047      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a83      	ldr	r2, [pc, #524]	; (800f840 <HAL_UART_IRQHandler+0x540>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d041      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a81      	ldr	r2, [pc, #516]	; (800f844 <HAL_UART_IRQHandler+0x544>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d03b      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a7f      	ldr	r2, [pc, #508]	; (800f848 <HAL_UART_IRQHandler+0x548>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d035      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a7d      	ldr	r2, [pc, #500]	; (800f84c <HAL_UART_IRQHandler+0x54c>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d02f      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a7b      	ldr	r2, [pc, #492]	; (800f850 <HAL_UART_IRQHandler+0x550>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d029      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a79      	ldr	r2, [pc, #484]	; (800f854 <HAL_UART_IRQHandler+0x554>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d023      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a77      	ldr	r2, [pc, #476]	; (800f858 <HAL_UART_IRQHandler+0x558>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d01d      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a75      	ldr	r2, [pc, #468]	; (800f85c <HAL_UART_IRQHandler+0x55c>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d017      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a73      	ldr	r2, [pc, #460]	; (800f860 <HAL_UART_IRQHandler+0x560>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d011      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a71      	ldr	r2, [pc, #452]	; (800f864 <HAL_UART_IRQHandler+0x564>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d00b      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a6f      	ldr	r2, [pc, #444]	; (800f868 <HAL_UART_IRQHandler+0x568>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d005      	beq.n	800f6ba <HAL_UART_IRQHandler+0x3ba>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4a6d      	ldr	r2, [pc, #436]	; (800f86c <HAL_UART_IRQHandler+0x56c>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d105      	bne.n	800f6c6 <HAL_UART_IRQHandler+0x3c6>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	e004      	b.n	800f6d0 <HAL_UART_IRQHandler+0x3d0>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f6d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f000 81a4 	beq.w	800fa26 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	f080 819c 	bcs.w	800fa26 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6fc:	69db      	ldr	r3, [r3, #28]
 800f6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f702:	f000 8086 	beq.w	800f812 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f712:	e853 3f00 	ldrex	r3, [r3]
 800f716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f71a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f71e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	461a      	mov	r2, r3
 800f72c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f730:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f734:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f738:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f73c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f740:	e841 2300 	strex	r3, r2, [r1]
 800f744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1da      	bne.n	800f706 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	3308      	adds	r3, #8
 800f756:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f75a:	e853 3f00 	ldrex	r3, [r3]
 800f75e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f762:	f023 0301 	bic.w	r3, r3, #1
 800f766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	3308      	adds	r3, #8
 800f770:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f774:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f778:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f77a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f77c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f780:	e841 2300 	strex	r3, r2, [r1]
 800f784:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1e1      	bne.n	800f750 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	3308      	adds	r3, #8
 800f792:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f796:	e853 3f00 	ldrex	r3, [r3]
 800f79a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f79c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f79e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3308      	adds	r3, #8
 800f7ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f7b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f7b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f7be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e3      	bne.n	800f78c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2220      	movs	r2, #32
 800f7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7da:	e853 3f00 	ldrex	r3, [r3]
 800f7de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7e2:	f023 0310 	bic.w	r3, r3, #16
 800f7e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7fc:	e841 2300 	strex	r3, r2, [r1]
 800f800:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1e4      	bne.n	800f7d2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f8 fd3f 	bl	8008290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f81e:	b29b      	uxth	r3, r3
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	b29b      	uxth	r3, r3
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7f3 fdb4 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f82c:	e0fb      	b.n	800fa26 <HAL_UART_IRQHandler+0x726>
 800f82e:	bf00      	nop
 800f830:	40020010 	.word	0x40020010
 800f834:	40020028 	.word	0x40020028
 800f838:	40020040 	.word	0x40020040
 800f83c:	40020058 	.word	0x40020058
 800f840:	40020070 	.word	0x40020070
 800f844:	40020088 	.word	0x40020088
 800f848:	400200a0 	.word	0x400200a0
 800f84c:	400200b8 	.word	0x400200b8
 800f850:	40020410 	.word	0x40020410
 800f854:	40020428 	.word	0x40020428
 800f858:	40020440 	.word	0x40020440
 800f85c:	40020458 	.word	0x40020458
 800f860:	40020470 	.word	0x40020470
 800f864:	40020488 	.word	0x40020488
 800f868:	400204a0 	.word	0x400204a0
 800f86c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f000 80cc 	beq.w	800fa2a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f896:	2b00      	cmp	r3, #0
 800f898:	f000 80c7 	beq.w	800fa2a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	e853 3f00 	ldrex	r3, [r3]
 800f8a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f8be:	647b      	str	r3, [r7, #68]	; 0x44
 800f8c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8c6:	e841 2300 	strex	r3, r2, [r1]
 800f8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e4      	bne.n	800f89c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3308      	adds	r3, #8
 800f8d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	623b      	str	r3, [r7, #32]
   return(result);
 800f8e2:	6a3a      	ldr	r2, [r7, #32]
 800f8e4:	4b54      	ldr	r3, [pc, #336]	; (800fa38 <HAL_UART_IRQHandler+0x738>)
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3308      	adds	r3, #8
 800f8f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f8f6:	633a      	str	r2, [r7, #48]	; 0x30
 800f8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8fe:	e841 2300 	strex	r3, r2, [r1]
 800f902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e3      	bne.n	800f8d2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	e853 3f00 	ldrex	r3, [r3]
 800f92a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f023 0310 	bic.w	r3, r3, #16
 800f932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	461a      	mov	r2, r3
 800f93c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f940:	61fb      	str	r3, [r7, #28]
 800f942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f944:	69b9      	ldr	r1, [r7, #24]
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	e841 2300 	strex	r3, r2, [r1]
 800f94c:	617b      	str	r3, [r7, #20]
   return(result);
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1e4      	bne.n	800f91e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f958:	4619      	mov	r1, r3
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7f3 fd1a 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f960:	e063      	b.n	800fa2a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00e      	beq.n	800f98c <HAL_UART_IRQHandler+0x68c>
 800f96e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f976:	2b00      	cmp	r3, #0
 800f978:	d008      	beq.n	800f98c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f982:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f001 fa80 	bl	8010e8a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f98a:	e051      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f994:	2b00      	cmp	r3, #0
 800f996:	d014      	beq.n	800f9c2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d105      	bne.n	800f9b0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d008      	beq.n	800f9c2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d03a      	beq.n	800fa2e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	4798      	blx	r3
    }
    return;
 800f9c0:	e035      	b.n	800fa2e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f9c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d009      	beq.n	800f9e2 <HAL_UART_IRQHandler+0x6e2>
 800f9ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d003      	beq.n	800f9e2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f001 fa2a 	bl	8010e34 <UART_EndTransmit_IT>
    return;
 800f9e0:	e026      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d009      	beq.n	800fa02 <HAL_UART_IRQHandler+0x702>
 800f9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f001 fa59 	bl	8010eb2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa00:	e016      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d010      	beq.n	800fa30 <HAL_UART_IRQHandler+0x730>
 800fa0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	da0c      	bge.n	800fa30 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f001 fa41 	bl	8010e9e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa1c:	e008      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
      return;
 800fa1e:	bf00      	nop
 800fa20:	e006      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
    return;
 800fa22:	bf00      	nop
 800fa24:	e004      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
      return;
 800fa26:	bf00      	nop
 800fa28:	e002      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
      return;
 800fa2a:	bf00      	nop
 800fa2c:	e000      	b.n	800fa30 <HAL_UART_IRQHandler+0x730>
    return;
 800fa2e:	bf00      	nop
  }
}
 800fa30:	37e8      	adds	r7, #232	; 0xe8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	effffffe 	.word	0xeffffffe

0800fa3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800faa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800faa4:	b092      	sub	sp, #72	; 0x48
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800faaa:	2300      	movs	r3, #0
 800faac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	689a      	ldr	r2, [r3, #8]
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	691b      	ldr	r3, [r3, #16]
 800fab8:	431a      	orrs	r2, r3
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	431a      	orrs	r2, r3
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	69db      	ldr	r3, [r3, #28]
 800fac4:	4313      	orrs	r3, r2
 800fac6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	4bbe      	ldr	r3, [pc, #760]	; (800fdc8 <UART_SetConfig+0x328>)
 800fad0:	4013      	ands	r3, r2
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	6812      	ldr	r2, [r2, #0]
 800fad6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fad8:	430b      	orrs	r3, r1
 800fada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	68da      	ldr	r2, [r3, #12]
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	430a      	orrs	r2, r1
 800faf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4ab3      	ldr	r2, [pc, #716]	; (800fdcc <UART_SetConfig+0x32c>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d004      	beq.n	800fb0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	6a1b      	ldr	r3, [r3, #32]
 800fb06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	689a      	ldr	r2, [r3, #8]
 800fb12:	4baf      	ldr	r3, [pc, #700]	; (800fdd0 <UART_SetConfig+0x330>)
 800fb14:	4013      	ands	r3, r2
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	6812      	ldr	r2, [r2, #0]
 800fb1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb1c:	430b      	orrs	r3, r1
 800fb1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb26:	f023 010f 	bic.w	r1, r3, #15
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	430a      	orrs	r2, r1
 800fb34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4aa6      	ldr	r2, [pc, #664]	; (800fdd4 <UART_SetConfig+0x334>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d177      	bne.n	800fc30 <UART_SetConfig+0x190>
 800fb40:	4ba5      	ldr	r3, [pc, #660]	; (800fdd8 <UART_SetConfig+0x338>)
 800fb42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb48:	2b28      	cmp	r3, #40	; 0x28
 800fb4a:	d86d      	bhi.n	800fc28 <UART_SetConfig+0x188>
 800fb4c:	a201      	add	r2, pc, #4	; (adr r2, 800fb54 <UART_SetConfig+0xb4>)
 800fb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb52:	bf00      	nop
 800fb54:	0800fbf9 	.word	0x0800fbf9
 800fb58:	0800fc29 	.word	0x0800fc29
 800fb5c:	0800fc29 	.word	0x0800fc29
 800fb60:	0800fc29 	.word	0x0800fc29
 800fb64:	0800fc29 	.word	0x0800fc29
 800fb68:	0800fc29 	.word	0x0800fc29
 800fb6c:	0800fc29 	.word	0x0800fc29
 800fb70:	0800fc29 	.word	0x0800fc29
 800fb74:	0800fc01 	.word	0x0800fc01
 800fb78:	0800fc29 	.word	0x0800fc29
 800fb7c:	0800fc29 	.word	0x0800fc29
 800fb80:	0800fc29 	.word	0x0800fc29
 800fb84:	0800fc29 	.word	0x0800fc29
 800fb88:	0800fc29 	.word	0x0800fc29
 800fb8c:	0800fc29 	.word	0x0800fc29
 800fb90:	0800fc29 	.word	0x0800fc29
 800fb94:	0800fc09 	.word	0x0800fc09
 800fb98:	0800fc29 	.word	0x0800fc29
 800fb9c:	0800fc29 	.word	0x0800fc29
 800fba0:	0800fc29 	.word	0x0800fc29
 800fba4:	0800fc29 	.word	0x0800fc29
 800fba8:	0800fc29 	.word	0x0800fc29
 800fbac:	0800fc29 	.word	0x0800fc29
 800fbb0:	0800fc29 	.word	0x0800fc29
 800fbb4:	0800fc11 	.word	0x0800fc11
 800fbb8:	0800fc29 	.word	0x0800fc29
 800fbbc:	0800fc29 	.word	0x0800fc29
 800fbc0:	0800fc29 	.word	0x0800fc29
 800fbc4:	0800fc29 	.word	0x0800fc29
 800fbc8:	0800fc29 	.word	0x0800fc29
 800fbcc:	0800fc29 	.word	0x0800fc29
 800fbd0:	0800fc29 	.word	0x0800fc29
 800fbd4:	0800fc19 	.word	0x0800fc19
 800fbd8:	0800fc29 	.word	0x0800fc29
 800fbdc:	0800fc29 	.word	0x0800fc29
 800fbe0:	0800fc29 	.word	0x0800fc29
 800fbe4:	0800fc29 	.word	0x0800fc29
 800fbe8:	0800fc29 	.word	0x0800fc29
 800fbec:	0800fc29 	.word	0x0800fc29
 800fbf0:	0800fc29 	.word	0x0800fc29
 800fbf4:	0800fc21 	.word	0x0800fc21
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbfe:	e222      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc00:	2304      	movs	r3, #4
 800fc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc06:	e21e      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc08:	2308      	movs	r3, #8
 800fc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc0e:	e21a      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc10:	2310      	movs	r3, #16
 800fc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc16:	e216      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc18:	2320      	movs	r3, #32
 800fc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc1e:	e212      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc20:	2340      	movs	r3, #64	; 0x40
 800fc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc26:	e20e      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc28:	2380      	movs	r3, #128	; 0x80
 800fc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc2e:	e20a      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a69      	ldr	r2, [pc, #420]	; (800fddc <UART_SetConfig+0x33c>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d130      	bne.n	800fc9c <UART_SetConfig+0x1fc>
 800fc3a:	4b67      	ldr	r3, [pc, #412]	; (800fdd8 <UART_SetConfig+0x338>)
 800fc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc3e:	f003 0307 	and.w	r3, r3, #7
 800fc42:	2b05      	cmp	r3, #5
 800fc44:	d826      	bhi.n	800fc94 <UART_SetConfig+0x1f4>
 800fc46:	a201      	add	r2, pc, #4	; (adr r2, 800fc4c <UART_SetConfig+0x1ac>)
 800fc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc4c:	0800fc65 	.word	0x0800fc65
 800fc50:	0800fc6d 	.word	0x0800fc6d
 800fc54:	0800fc75 	.word	0x0800fc75
 800fc58:	0800fc7d 	.word	0x0800fc7d
 800fc5c:	0800fc85 	.word	0x0800fc85
 800fc60:	0800fc8d 	.word	0x0800fc8d
 800fc64:	2300      	movs	r3, #0
 800fc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc6a:	e1ec      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc6c:	2304      	movs	r3, #4
 800fc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc72:	e1e8      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc74:	2308      	movs	r3, #8
 800fc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc7a:	e1e4      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc7c:	2310      	movs	r3, #16
 800fc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc82:	e1e0      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc84:	2320      	movs	r3, #32
 800fc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc8a:	e1dc      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc8c:	2340      	movs	r3, #64	; 0x40
 800fc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc92:	e1d8      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc94:	2380      	movs	r3, #128	; 0x80
 800fc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc9a:	e1d4      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a4f      	ldr	r2, [pc, #316]	; (800fde0 <UART_SetConfig+0x340>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d130      	bne.n	800fd08 <UART_SetConfig+0x268>
 800fca6:	4b4c      	ldr	r3, [pc, #304]	; (800fdd8 <UART_SetConfig+0x338>)
 800fca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcaa:	f003 0307 	and.w	r3, r3, #7
 800fcae:	2b05      	cmp	r3, #5
 800fcb0:	d826      	bhi.n	800fd00 <UART_SetConfig+0x260>
 800fcb2:	a201      	add	r2, pc, #4	; (adr r2, 800fcb8 <UART_SetConfig+0x218>)
 800fcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb8:	0800fcd1 	.word	0x0800fcd1
 800fcbc:	0800fcd9 	.word	0x0800fcd9
 800fcc0:	0800fce1 	.word	0x0800fce1
 800fcc4:	0800fce9 	.word	0x0800fce9
 800fcc8:	0800fcf1 	.word	0x0800fcf1
 800fccc:	0800fcf9 	.word	0x0800fcf9
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd6:	e1b6      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fcd8:	2304      	movs	r3, #4
 800fcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcde:	e1b2      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fce0:	2308      	movs	r3, #8
 800fce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fce6:	e1ae      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fce8:	2310      	movs	r3, #16
 800fcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcee:	e1aa      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fcf0:	2320      	movs	r3, #32
 800fcf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcf6:	e1a6      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fcf8:	2340      	movs	r3, #64	; 0x40
 800fcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcfe:	e1a2      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd00:	2380      	movs	r3, #128	; 0x80
 800fd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd06:	e19e      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a35      	ldr	r2, [pc, #212]	; (800fde4 <UART_SetConfig+0x344>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d130      	bne.n	800fd74 <UART_SetConfig+0x2d4>
 800fd12:	4b31      	ldr	r3, [pc, #196]	; (800fdd8 <UART_SetConfig+0x338>)
 800fd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd16:	f003 0307 	and.w	r3, r3, #7
 800fd1a:	2b05      	cmp	r3, #5
 800fd1c:	d826      	bhi.n	800fd6c <UART_SetConfig+0x2cc>
 800fd1e:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <UART_SetConfig+0x284>)
 800fd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd24:	0800fd3d 	.word	0x0800fd3d
 800fd28:	0800fd45 	.word	0x0800fd45
 800fd2c:	0800fd4d 	.word	0x0800fd4d
 800fd30:	0800fd55 	.word	0x0800fd55
 800fd34:	0800fd5d 	.word	0x0800fd5d
 800fd38:	0800fd65 	.word	0x0800fd65
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd42:	e180      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd44:	2304      	movs	r3, #4
 800fd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd4a:	e17c      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd4c:	2308      	movs	r3, #8
 800fd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd52:	e178      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd54:	2310      	movs	r3, #16
 800fd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd5a:	e174      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd5c:	2320      	movs	r3, #32
 800fd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd62:	e170      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd64:	2340      	movs	r3, #64	; 0x40
 800fd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd6a:	e16c      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd6c:	2380      	movs	r3, #128	; 0x80
 800fd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd72:	e168      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a1b      	ldr	r2, [pc, #108]	; (800fde8 <UART_SetConfig+0x348>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d142      	bne.n	800fe04 <UART_SetConfig+0x364>
 800fd7e:	4b16      	ldr	r3, [pc, #88]	; (800fdd8 <UART_SetConfig+0x338>)
 800fd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	2b05      	cmp	r3, #5
 800fd88:	d838      	bhi.n	800fdfc <UART_SetConfig+0x35c>
 800fd8a:	a201      	add	r2, pc, #4	; (adr r2, 800fd90 <UART_SetConfig+0x2f0>)
 800fd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd90:	0800fda9 	.word	0x0800fda9
 800fd94:	0800fdb1 	.word	0x0800fdb1
 800fd98:	0800fdb9 	.word	0x0800fdb9
 800fd9c:	0800fdc1 	.word	0x0800fdc1
 800fda0:	0800fded 	.word	0x0800fded
 800fda4:	0800fdf5 	.word	0x0800fdf5
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdae:	e14a      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fdb0:	2304      	movs	r3, #4
 800fdb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdb6:	e146      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fdb8:	2308      	movs	r3, #8
 800fdba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdbe:	e142      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fdc0:	2310      	movs	r3, #16
 800fdc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdc6:	e13e      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fdc8:	cfff69f3 	.word	0xcfff69f3
 800fdcc:	58000c00 	.word	0x58000c00
 800fdd0:	11fff4ff 	.word	0x11fff4ff
 800fdd4:	40011000 	.word	0x40011000
 800fdd8:	58024400 	.word	0x58024400
 800fddc:	40004400 	.word	0x40004400
 800fde0:	40004800 	.word	0x40004800
 800fde4:	40004c00 	.word	0x40004c00
 800fde8:	40005000 	.word	0x40005000
 800fdec:	2320      	movs	r3, #32
 800fdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf2:	e128      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fdf4:	2340      	movs	r3, #64	; 0x40
 800fdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdfa:	e124      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fdfc:	2380      	movs	r3, #128	; 0x80
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe02:	e120      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4acb      	ldr	r2, [pc, #812]	; (8010138 <UART_SetConfig+0x698>)
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d176      	bne.n	800fefc <UART_SetConfig+0x45c>
 800fe0e:	4bcb      	ldr	r3, [pc, #812]	; (801013c <UART_SetConfig+0x69c>)
 800fe10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe16:	2b28      	cmp	r3, #40	; 0x28
 800fe18:	d86c      	bhi.n	800fef4 <UART_SetConfig+0x454>
 800fe1a:	a201      	add	r2, pc, #4	; (adr r2, 800fe20 <UART_SetConfig+0x380>)
 800fe1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe20:	0800fec5 	.word	0x0800fec5
 800fe24:	0800fef5 	.word	0x0800fef5
 800fe28:	0800fef5 	.word	0x0800fef5
 800fe2c:	0800fef5 	.word	0x0800fef5
 800fe30:	0800fef5 	.word	0x0800fef5
 800fe34:	0800fef5 	.word	0x0800fef5
 800fe38:	0800fef5 	.word	0x0800fef5
 800fe3c:	0800fef5 	.word	0x0800fef5
 800fe40:	0800fecd 	.word	0x0800fecd
 800fe44:	0800fef5 	.word	0x0800fef5
 800fe48:	0800fef5 	.word	0x0800fef5
 800fe4c:	0800fef5 	.word	0x0800fef5
 800fe50:	0800fef5 	.word	0x0800fef5
 800fe54:	0800fef5 	.word	0x0800fef5
 800fe58:	0800fef5 	.word	0x0800fef5
 800fe5c:	0800fef5 	.word	0x0800fef5
 800fe60:	0800fed5 	.word	0x0800fed5
 800fe64:	0800fef5 	.word	0x0800fef5
 800fe68:	0800fef5 	.word	0x0800fef5
 800fe6c:	0800fef5 	.word	0x0800fef5
 800fe70:	0800fef5 	.word	0x0800fef5
 800fe74:	0800fef5 	.word	0x0800fef5
 800fe78:	0800fef5 	.word	0x0800fef5
 800fe7c:	0800fef5 	.word	0x0800fef5
 800fe80:	0800fedd 	.word	0x0800fedd
 800fe84:	0800fef5 	.word	0x0800fef5
 800fe88:	0800fef5 	.word	0x0800fef5
 800fe8c:	0800fef5 	.word	0x0800fef5
 800fe90:	0800fef5 	.word	0x0800fef5
 800fe94:	0800fef5 	.word	0x0800fef5
 800fe98:	0800fef5 	.word	0x0800fef5
 800fe9c:	0800fef5 	.word	0x0800fef5
 800fea0:	0800fee5 	.word	0x0800fee5
 800fea4:	0800fef5 	.word	0x0800fef5
 800fea8:	0800fef5 	.word	0x0800fef5
 800feac:	0800fef5 	.word	0x0800fef5
 800feb0:	0800fef5 	.word	0x0800fef5
 800feb4:	0800fef5 	.word	0x0800fef5
 800feb8:	0800fef5 	.word	0x0800fef5
 800febc:	0800fef5 	.word	0x0800fef5
 800fec0:	0800feed 	.word	0x0800feed
 800fec4:	2301      	movs	r3, #1
 800fec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feca:	e0bc      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fecc:	2304      	movs	r3, #4
 800fece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fed2:	e0b8      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fed4:	2308      	movs	r3, #8
 800fed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feda:	e0b4      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fedc:	2310      	movs	r3, #16
 800fede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fee2:	e0b0      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fee4:	2320      	movs	r3, #32
 800fee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feea:	e0ac      	b.n	8010046 <UART_SetConfig+0x5a6>
 800feec:	2340      	movs	r3, #64	; 0x40
 800feee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fef2:	e0a8      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fef4:	2380      	movs	r3, #128	; 0x80
 800fef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fefa:	e0a4      	b.n	8010046 <UART_SetConfig+0x5a6>
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a8f      	ldr	r2, [pc, #572]	; (8010140 <UART_SetConfig+0x6a0>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d130      	bne.n	800ff68 <UART_SetConfig+0x4c8>
 800ff06:	4b8d      	ldr	r3, [pc, #564]	; (801013c <UART_SetConfig+0x69c>)
 800ff08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff0a:	f003 0307 	and.w	r3, r3, #7
 800ff0e:	2b05      	cmp	r3, #5
 800ff10:	d826      	bhi.n	800ff60 <UART_SetConfig+0x4c0>
 800ff12:	a201      	add	r2, pc, #4	; (adr r2, 800ff18 <UART_SetConfig+0x478>)
 800ff14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff18:	0800ff31 	.word	0x0800ff31
 800ff1c:	0800ff39 	.word	0x0800ff39
 800ff20:	0800ff41 	.word	0x0800ff41
 800ff24:	0800ff49 	.word	0x0800ff49
 800ff28:	0800ff51 	.word	0x0800ff51
 800ff2c:	0800ff59 	.word	0x0800ff59
 800ff30:	2300      	movs	r3, #0
 800ff32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff36:	e086      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff38:	2304      	movs	r3, #4
 800ff3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff3e:	e082      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff40:	2308      	movs	r3, #8
 800ff42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff46:	e07e      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff48:	2310      	movs	r3, #16
 800ff4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff4e:	e07a      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff50:	2320      	movs	r3, #32
 800ff52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff56:	e076      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff58:	2340      	movs	r3, #64	; 0x40
 800ff5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff5e:	e072      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff60:	2380      	movs	r3, #128	; 0x80
 800ff62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff66:	e06e      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a75      	ldr	r2, [pc, #468]	; (8010144 <UART_SetConfig+0x6a4>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d130      	bne.n	800ffd4 <UART_SetConfig+0x534>
 800ff72:	4b72      	ldr	r3, [pc, #456]	; (801013c <UART_SetConfig+0x69c>)
 800ff74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff76:	f003 0307 	and.w	r3, r3, #7
 800ff7a:	2b05      	cmp	r3, #5
 800ff7c:	d826      	bhi.n	800ffcc <UART_SetConfig+0x52c>
 800ff7e:	a201      	add	r2, pc, #4	; (adr r2, 800ff84 <UART_SetConfig+0x4e4>)
 800ff80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff84:	0800ff9d 	.word	0x0800ff9d
 800ff88:	0800ffa5 	.word	0x0800ffa5
 800ff8c:	0800ffad 	.word	0x0800ffad
 800ff90:	0800ffb5 	.word	0x0800ffb5
 800ff94:	0800ffbd 	.word	0x0800ffbd
 800ff98:	0800ffc5 	.word	0x0800ffc5
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffa2:	e050      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffa4:	2304      	movs	r3, #4
 800ffa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffaa:	e04c      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffac:	2308      	movs	r3, #8
 800ffae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffb2:	e048      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffb4:	2310      	movs	r3, #16
 800ffb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffba:	e044      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffbc:	2320      	movs	r3, #32
 800ffbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffc2:	e040      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffc4:	2340      	movs	r3, #64	; 0x40
 800ffc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffca:	e03c      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffcc:	2380      	movs	r3, #128	; 0x80
 800ffce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffd2:	e038      	b.n	8010046 <UART_SetConfig+0x5a6>
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4a5b      	ldr	r2, [pc, #364]	; (8010148 <UART_SetConfig+0x6a8>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d130      	bne.n	8010040 <UART_SetConfig+0x5a0>
 800ffde:	4b57      	ldr	r3, [pc, #348]	; (801013c <UART_SetConfig+0x69c>)
 800ffe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffe2:	f003 0307 	and.w	r3, r3, #7
 800ffe6:	2b05      	cmp	r3, #5
 800ffe8:	d826      	bhi.n	8010038 <UART_SetConfig+0x598>
 800ffea:	a201      	add	r2, pc, #4	; (adr r2, 800fff0 <UART_SetConfig+0x550>)
 800ffec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff0:	08010009 	.word	0x08010009
 800fff4:	08010011 	.word	0x08010011
 800fff8:	08010019 	.word	0x08010019
 800fffc:	08010021 	.word	0x08010021
 8010000:	08010029 	.word	0x08010029
 8010004:	08010031 	.word	0x08010031
 8010008:	2302      	movs	r3, #2
 801000a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801000e:	e01a      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010010:	2304      	movs	r3, #4
 8010012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010016:	e016      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010018:	2308      	movs	r3, #8
 801001a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801001e:	e012      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010020:	2310      	movs	r3, #16
 8010022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010026:	e00e      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010028:	2320      	movs	r3, #32
 801002a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801002e:	e00a      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010030:	2340      	movs	r3, #64	; 0x40
 8010032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010036:	e006      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010038:	2380      	movs	r3, #128	; 0x80
 801003a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801003e:	e002      	b.n	8010046 <UART_SetConfig+0x5a6>
 8010040:	2380      	movs	r3, #128	; 0x80
 8010042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a3f      	ldr	r2, [pc, #252]	; (8010148 <UART_SetConfig+0x6a8>)
 801004c:	4293      	cmp	r3, r2
 801004e:	f040 80f8 	bne.w	8010242 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010052:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010056:	2b20      	cmp	r3, #32
 8010058:	dc46      	bgt.n	80100e8 <UART_SetConfig+0x648>
 801005a:	2b02      	cmp	r3, #2
 801005c:	f2c0 8082 	blt.w	8010164 <UART_SetConfig+0x6c4>
 8010060:	3b02      	subs	r3, #2
 8010062:	2b1e      	cmp	r3, #30
 8010064:	d87e      	bhi.n	8010164 <UART_SetConfig+0x6c4>
 8010066:	a201      	add	r2, pc, #4	; (adr r2, 801006c <UART_SetConfig+0x5cc>)
 8010068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801006c:	080100ef 	.word	0x080100ef
 8010070:	08010165 	.word	0x08010165
 8010074:	080100f7 	.word	0x080100f7
 8010078:	08010165 	.word	0x08010165
 801007c:	08010165 	.word	0x08010165
 8010080:	08010165 	.word	0x08010165
 8010084:	08010107 	.word	0x08010107
 8010088:	08010165 	.word	0x08010165
 801008c:	08010165 	.word	0x08010165
 8010090:	08010165 	.word	0x08010165
 8010094:	08010165 	.word	0x08010165
 8010098:	08010165 	.word	0x08010165
 801009c:	08010165 	.word	0x08010165
 80100a0:	08010165 	.word	0x08010165
 80100a4:	08010117 	.word	0x08010117
 80100a8:	08010165 	.word	0x08010165
 80100ac:	08010165 	.word	0x08010165
 80100b0:	08010165 	.word	0x08010165
 80100b4:	08010165 	.word	0x08010165
 80100b8:	08010165 	.word	0x08010165
 80100bc:	08010165 	.word	0x08010165
 80100c0:	08010165 	.word	0x08010165
 80100c4:	08010165 	.word	0x08010165
 80100c8:	08010165 	.word	0x08010165
 80100cc:	08010165 	.word	0x08010165
 80100d0:	08010165 	.word	0x08010165
 80100d4:	08010165 	.word	0x08010165
 80100d8:	08010165 	.word	0x08010165
 80100dc:	08010165 	.word	0x08010165
 80100e0:	08010165 	.word	0x08010165
 80100e4:	08010157 	.word	0x08010157
 80100e8:	2b40      	cmp	r3, #64	; 0x40
 80100ea:	d037      	beq.n	801015c <UART_SetConfig+0x6bc>
 80100ec:	e03a      	b.n	8010164 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80100ee:	f7fc fa63 	bl	800c5b8 <HAL_RCCEx_GetD3PCLK1Freq>
 80100f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80100f4:	e03c      	b.n	8010170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fc fa72 	bl	800c5e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010104:	e034      	b.n	8010170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010106:	f107 0318 	add.w	r3, r7, #24
 801010a:	4618      	mov	r0, r3
 801010c:	f7fc fbbe 	bl	800c88c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010114:	e02c      	b.n	8010170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010116:	4b09      	ldr	r3, [pc, #36]	; (801013c <UART_SetConfig+0x69c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f003 0320 	and.w	r3, r3, #32
 801011e:	2b00      	cmp	r3, #0
 8010120:	d016      	beq.n	8010150 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010122:	4b06      	ldr	r3, [pc, #24]	; (801013c <UART_SetConfig+0x69c>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	08db      	lsrs	r3, r3, #3
 8010128:	f003 0303 	and.w	r3, r3, #3
 801012c:	4a07      	ldr	r2, [pc, #28]	; (801014c <UART_SetConfig+0x6ac>)
 801012e:	fa22 f303 	lsr.w	r3, r2, r3
 8010132:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010134:	e01c      	b.n	8010170 <UART_SetConfig+0x6d0>
 8010136:	bf00      	nop
 8010138:	40011400 	.word	0x40011400
 801013c:	58024400 	.word	0x58024400
 8010140:	40007800 	.word	0x40007800
 8010144:	40007c00 	.word	0x40007c00
 8010148:	58000c00 	.word	0x58000c00
 801014c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010150:	4b9d      	ldr	r3, [pc, #628]	; (80103c8 <UART_SetConfig+0x928>)
 8010152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010154:	e00c      	b.n	8010170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010156:	4b9d      	ldr	r3, [pc, #628]	; (80103cc <UART_SetConfig+0x92c>)
 8010158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801015a:	e009      	b.n	8010170 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801015c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010162:	e005      	b.n	8010170 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010164:	2300      	movs	r3, #0
 8010166:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010168:	2301      	movs	r3, #1
 801016a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801016e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010172:	2b00      	cmp	r3, #0
 8010174:	f000 81de 	beq.w	8010534 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017c:	4a94      	ldr	r2, [pc, #592]	; (80103d0 <UART_SetConfig+0x930>)
 801017e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010182:	461a      	mov	r2, r3
 8010184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010186:	fbb3 f3f2 	udiv	r3, r3, r2
 801018a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	685a      	ldr	r2, [r3, #4]
 8010190:	4613      	mov	r3, r2
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	4413      	add	r3, r2
 8010196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010198:	429a      	cmp	r2, r3
 801019a:	d305      	bcc.n	80101a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80101a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d903      	bls.n	80101b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80101a8:	2301      	movs	r3, #1
 80101aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80101ae:	e1c1      	b.n	8010534 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b2:	2200      	movs	r2, #0
 80101b4:	60bb      	str	r3, [r7, #8]
 80101b6:	60fa      	str	r2, [r7, #12]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101bc:	4a84      	ldr	r2, [pc, #528]	; (80103d0 <UART_SetConfig+0x930>)
 80101be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	2200      	movs	r2, #0
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	607a      	str	r2, [r7, #4]
 80101ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80101d2:	f7f0 f8dd 	bl	8000390 <__aeabi_uldivmod>
 80101d6:	4602      	mov	r2, r0
 80101d8:	460b      	mov	r3, r1
 80101da:	4610      	mov	r0, r2
 80101dc:	4619      	mov	r1, r3
 80101de:	f04f 0200 	mov.w	r2, #0
 80101e2:	f04f 0300 	mov.w	r3, #0
 80101e6:	020b      	lsls	r3, r1, #8
 80101e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101ec:	0202      	lsls	r2, r0, #8
 80101ee:	6979      	ldr	r1, [r7, #20]
 80101f0:	6849      	ldr	r1, [r1, #4]
 80101f2:	0849      	lsrs	r1, r1, #1
 80101f4:	2000      	movs	r0, #0
 80101f6:	460c      	mov	r4, r1
 80101f8:	4605      	mov	r5, r0
 80101fa:	eb12 0804 	adds.w	r8, r2, r4
 80101fe:	eb43 0905 	adc.w	r9, r3, r5
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	2200      	movs	r2, #0
 8010208:	469a      	mov	sl, r3
 801020a:	4693      	mov	fp, r2
 801020c:	4652      	mov	r2, sl
 801020e:	465b      	mov	r3, fp
 8010210:	4640      	mov	r0, r8
 8010212:	4649      	mov	r1, r9
 8010214:	f7f0 f8bc 	bl	8000390 <__aeabi_uldivmod>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4613      	mov	r3, r2
 801021e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010226:	d308      	bcc.n	801023a <UART_SetConfig+0x79a>
 8010228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801022e:	d204      	bcs.n	801023a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010236:	60da      	str	r2, [r3, #12]
 8010238:	e17c      	b.n	8010534 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801023a:	2301      	movs	r3, #1
 801023c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010240:	e178      	b.n	8010534 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	69db      	ldr	r3, [r3, #28]
 8010246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801024a:	f040 80c5 	bne.w	80103d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801024e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010252:	2b20      	cmp	r3, #32
 8010254:	dc48      	bgt.n	80102e8 <UART_SetConfig+0x848>
 8010256:	2b00      	cmp	r3, #0
 8010258:	db7b      	blt.n	8010352 <UART_SetConfig+0x8b2>
 801025a:	2b20      	cmp	r3, #32
 801025c:	d879      	bhi.n	8010352 <UART_SetConfig+0x8b2>
 801025e:	a201      	add	r2, pc, #4	; (adr r2, 8010264 <UART_SetConfig+0x7c4>)
 8010260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010264:	080102ef 	.word	0x080102ef
 8010268:	080102f7 	.word	0x080102f7
 801026c:	08010353 	.word	0x08010353
 8010270:	08010353 	.word	0x08010353
 8010274:	080102ff 	.word	0x080102ff
 8010278:	08010353 	.word	0x08010353
 801027c:	08010353 	.word	0x08010353
 8010280:	08010353 	.word	0x08010353
 8010284:	0801030f 	.word	0x0801030f
 8010288:	08010353 	.word	0x08010353
 801028c:	08010353 	.word	0x08010353
 8010290:	08010353 	.word	0x08010353
 8010294:	08010353 	.word	0x08010353
 8010298:	08010353 	.word	0x08010353
 801029c:	08010353 	.word	0x08010353
 80102a0:	08010353 	.word	0x08010353
 80102a4:	0801031f 	.word	0x0801031f
 80102a8:	08010353 	.word	0x08010353
 80102ac:	08010353 	.word	0x08010353
 80102b0:	08010353 	.word	0x08010353
 80102b4:	08010353 	.word	0x08010353
 80102b8:	08010353 	.word	0x08010353
 80102bc:	08010353 	.word	0x08010353
 80102c0:	08010353 	.word	0x08010353
 80102c4:	08010353 	.word	0x08010353
 80102c8:	08010353 	.word	0x08010353
 80102cc:	08010353 	.word	0x08010353
 80102d0:	08010353 	.word	0x08010353
 80102d4:	08010353 	.word	0x08010353
 80102d8:	08010353 	.word	0x08010353
 80102dc:	08010353 	.word	0x08010353
 80102e0:	08010353 	.word	0x08010353
 80102e4:	08010345 	.word	0x08010345
 80102e8:	2b40      	cmp	r3, #64	; 0x40
 80102ea:	d02e      	beq.n	801034a <UART_SetConfig+0x8aa>
 80102ec:	e031      	b.n	8010352 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102ee:	f7fb f9f1 	bl	800b6d4 <HAL_RCC_GetPCLK1Freq>
 80102f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80102f4:	e033      	b.n	801035e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102f6:	f7fb fa03 	bl	800b700 <HAL_RCC_GetPCLK2Freq>
 80102fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80102fc:	e02f      	b.n	801035e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010302:	4618      	mov	r0, r3
 8010304:	f7fc f96e 	bl	800c5e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801030a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801030c:	e027      	b.n	801035e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801030e:	f107 0318 	add.w	r3, r7, #24
 8010312:	4618      	mov	r0, r3
 8010314:	f7fc faba 	bl	800c88c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801031c:	e01f      	b.n	801035e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801031e:	4b2d      	ldr	r3, [pc, #180]	; (80103d4 <UART_SetConfig+0x934>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 0320 	and.w	r3, r3, #32
 8010326:	2b00      	cmp	r3, #0
 8010328:	d009      	beq.n	801033e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801032a:	4b2a      	ldr	r3, [pc, #168]	; (80103d4 <UART_SetConfig+0x934>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	08db      	lsrs	r3, r3, #3
 8010330:	f003 0303 	and.w	r3, r3, #3
 8010334:	4a24      	ldr	r2, [pc, #144]	; (80103c8 <UART_SetConfig+0x928>)
 8010336:	fa22 f303 	lsr.w	r3, r2, r3
 801033a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801033c:	e00f      	b.n	801035e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801033e:	4b22      	ldr	r3, [pc, #136]	; (80103c8 <UART_SetConfig+0x928>)
 8010340:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010342:	e00c      	b.n	801035e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010344:	4b21      	ldr	r3, [pc, #132]	; (80103cc <UART_SetConfig+0x92c>)
 8010346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010348:	e009      	b.n	801035e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801034a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801034e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010350:	e005      	b.n	801035e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010352:	2300      	movs	r3, #0
 8010354:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801035c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801035e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010360:	2b00      	cmp	r3, #0
 8010362:	f000 80e7 	beq.w	8010534 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036a:	4a19      	ldr	r2, [pc, #100]	; (80103d0 <UART_SetConfig+0x930>)
 801036c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010370:	461a      	mov	r2, r3
 8010372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010374:	fbb3 f3f2 	udiv	r3, r3, r2
 8010378:	005a      	lsls	r2, r3, #1
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	085b      	lsrs	r3, r3, #1
 8010380:	441a      	add	r2, r3
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	fbb2 f3f3 	udiv	r3, r2, r3
 801038a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038e:	2b0f      	cmp	r3, #15
 8010390:	d916      	bls.n	80103c0 <UART_SetConfig+0x920>
 8010392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010398:	d212      	bcs.n	80103c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801039a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039c:	b29b      	uxth	r3, r3
 801039e:	f023 030f 	bic.w	r3, r3, #15
 80103a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a6:	085b      	lsrs	r3, r3, #1
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	f003 0307 	and.w	r3, r3, #7
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103b2:	4313      	orrs	r3, r2
 80103b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80103bc:	60da      	str	r2, [r3, #12]
 80103be:	e0b9      	b.n	8010534 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80103c0:	2301      	movs	r3, #1
 80103c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80103c6:	e0b5      	b.n	8010534 <UART_SetConfig+0xa94>
 80103c8:	03d09000 	.word	0x03d09000
 80103cc:	003d0900 	.word	0x003d0900
 80103d0:	08015264 	.word	0x08015264
 80103d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80103d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80103dc:	2b20      	cmp	r3, #32
 80103de:	dc49      	bgt.n	8010474 <UART_SetConfig+0x9d4>
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	db7c      	blt.n	80104de <UART_SetConfig+0xa3e>
 80103e4:	2b20      	cmp	r3, #32
 80103e6:	d87a      	bhi.n	80104de <UART_SetConfig+0xa3e>
 80103e8:	a201      	add	r2, pc, #4	; (adr r2, 80103f0 <UART_SetConfig+0x950>)
 80103ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ee:	bf00      	nop
 80103f0:	0801047b 	.word	0x0801047b
 80103f4:	08010483 	.word	0x08010483
 80103f8:	080104df 	.word	0x080104df
 80103fc:	080104df 	.word	0x080104df
 8010400:	0801048b 	.word	0x0801048b
 8010404:	080104df 	.word	0x080104df
 8010408:	080104df 	.word	0x080104df
 801040c:	080104df 	.word	0x080104df
 8010410:	0801049b 	.word	0x0801049b
 8010414:	080104df 	.word	0x080104df
 8010418:	080104df 	.word	0x080104df
 801041c:	080104df 	.word	0x080104df
 8010420:	080104df 	.word	0x080104df
 8010424:	080104df 	.word	0x080104df
 8010428:	080104df 	.word	0x080104df
 801042c:	080104df 	.word	0x080104df
 8010430:	080104ab 	.word	0x080104ab
 8010434:	080104df 	.word	0x080104df
 8010438:	080104df 	.word	0x080104df
 801043c:	080104df 	.word	0x080104df
 8010440:	080104df 	.word	0x080104df
 8010444:	080104df 	.word	0x080104df
 8010448:	080104df 	.word	0x080104df
 801044c:	080104df 	.word	0x080104df
 8010450:	080104df 	.word	0x080104df
 8010454:	080104df 	.word	0x080104df
 8010458:	080104df 	.word	0x080104df
 801045c:	080104df 	.word	0x080104df
 8010460:	080104df 	.word	0x080104df
 8010464:	080104df 	.word	0x080104df
 8010468:	080104df 	.word	0x080104df
 801046c:	080104df 	.word	0x080104df
 8010470:	080104d1 	.word	0x080104d1
 8010474:	2b40      	cmp	r3, #64	; 0x40
 8010476:	d02e      	beq.n	80104d6 <UART_SetConfig+0xa36>
 8010478:	e031      	b.n	80104de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801047a:	f7fb f92b 	bl	800b6d4 <HAL_RCC_GetPCLK1Freq>
 801047e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010480:	e033      	b.n	80104ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010482:	f7fb f93d 	bl	800b700 <HAL_RCC_GetPCLK2Freq>
 8010486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010488:	e02f      	b.n	80104ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801048a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801048e:	4618      	mov	r0, r3
 8010490:	f7fc f8a8 	bl	800c5e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010498:	e027      	b.n	80104ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801049a:	f107 0318 	add.w	r3, r7, #24
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fc f9f4 	bl	800c88c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104a8:	e01f      	b.n	80104ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104aa:	4b2d      	ldr	r3, [pc, #180]	; (8010560 <UART_SetConfig+0xac0>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f003 0320 	and.w	r3, r3, #32
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d009      	beq.n	80104ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104b6:	4b2a      	ldr	r3, [pc, #168]	; (8010560 <UART_SetConfig+0xac0>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	08db      	lsrs	r3, r3, #3
 80104bc:	f003 0303 	and.w	r3, r3, #3
 80104c0:	4a28      	ldr	r2, [pc, #160]	; (8010564 <UART_SetConfig+0xac4>)
 80104c2:	fa22 f303 	lsr.w	r3, r2, r3
 80104c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80104c8:	e00f      	b.n	80104ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80104ca:	4b26      	ldr	r3, [pc, #152]	; (8010564 <UART_SetConfig+0xac4>)
 80104cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ce:	e00c      	b.n	80104ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104d0:	4b25      	ldr	r3, [pc, #148]	; (8010568 <UART_SetConfig+0xac8>)
 80104d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d4:	e009      	b.n	80104ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104dc:	e005      	b.n	80104ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80104de:	2300      	movs	r3, #0
 80104e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80104e2:	2301      	movs	r3, #1
 80104e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80104e8:	bf00      	nop
    }

    if (pclk != 0U)
 80104ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d021      	beq.n	8010534 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f4:	4a1d      	ldr	r2, [pc, #116]	; (801056c <UART_SetConfig+0xacc>)
 80104f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104fa:	461a      	mov	r2, r3
 80104fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	085b      	lsrs	r3, r3, #1
 8010508:	441a      	add	r2, r3
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010512:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010516:	2b0f      	cmp	r3, #15
 8010518:	d909      	bls.n	801052e <UART_SetConfig+0xa8e>
 801051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010520:	d205      	bcs.n	801052e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	b29a      	uxth	r2, r3
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	60da      	str	r2, [r3, #12]
 801052c:	e002      	b.n	8010534 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801052e:	2301      	movs	r3, #1
 8010530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	2201      	movs	r2, #1
 8010538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2201      	movs	r2, #1
 8010540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	2200      	movs	r2, #0
 8010548:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	2200      	movs	r2, #0
 801054e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010550:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010554:	4618      	mov	r0, r3
 8010556:	3748      	adds	r7, #72	; 0x48
 8010558:	46bd      	mov	sp, r7
 801055a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801055e:	bf00      	nop
 8010560:	58024400 	.word	0x58024400
 8010564:	03d09000 	.word	0x03d09000
 8010568:	003d0900 	.word	0x003d0900
 801056c:	08015264 	.word	0x08015264

08010570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057c:	f003 0301 	and.w	r3, r3, #1
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00a      	beq.n	801059a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	430a      	orrs	r2, r1
 8010598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801059e:	f003 0302 	and.w	r3, r3, #2
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00a      	beq.n	80105bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	430a      	orrs	r2, r1
 80105ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105c0:	f003 0304 	and.w	r3, r3, #4
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00a      	beq.n	80105de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	430a      	orrs	r2, r1
 80105dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105e2:	f003 0308 	and.w	r3, r3, #8
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00a      	beq.n	8010600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	430a      	orrs	r2, r1
 80105fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010604:	f003 0310 	and.w	r3, r3, #16
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00a      	beq.n	8010622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	689b      	ldr	r3, [r3, #8]
 8010612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	430a      	orrs	r2, r1
 8010620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010626:	f003 0320 	and.w	r3, r3, #32
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00a      	beq.n	8010644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	689b      	ldr	r3, [r3, #8]
 8010634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	430a      	orrs	r2, r1
 8010642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801064c:	2b00      	cmp	r3, #0
 801064e:	d01a      	beq.n	8010686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	430a      	orrs	r2, r1
 8010664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801066e:	d10a      	bne.n	8010686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	430a      	orrs	r2, r1
 8010684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00a      	beq.n	80106a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	430a      	orrs	r2, r1
 80106a6:	605a      	str	r2, [r3, #4]
  }
}
 80106a8:	bf00      	nop
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b086      	sub	sp, #24
 80106b8:	af02      	add	r7, sp, #8
 80106ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106c4:	f7f6 fcc8 	bl	8007058 <HAL_GetTick>
 80106c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f003 0308 	and.w	r3, r3, #8
 80106d4:	2b08      	cmp	r3, #8
 80106d6:	d10e      	bne.n	80106f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80106dc:	9300      	str	r3, [sp, #0]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2200      	movs	r2, #0
 80106e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 f82f 	bl	801074a <UART_WaitOnFlagUntilTimeout>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80106f2:	2303      	movs	r3, #3
 80106f4:	e025      	b.n	8010742 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f003 0304 	and.w	r3, r3, #4
 8010700:	2b04      	cmp	r3, #4
 8010702:	d10e      	bne.n	8010722 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2200      	movs	r2, #0
 801070e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 f819 	bl	801074a <UART_WaitOnFlagUntilTimeout>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801071e:	2303      	movs	r3, #3
 8010720:	e00f      	b.n	8010742 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2220      	movs	r2, #32
 8010726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2220      	movs	r2, #32
 801072e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}

0801074a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801074a:	b580      	push	{r7, lr}
 801074c:	b09c      	sub	sp, #112	; 0x70
 801074e:	af00      	add	r7, sp, #0
 8010750:	60f8      	str	r0, [r7, #12]
 8010752:	60b9      	str	r1, [r7, #8]
 8010754:	603b      	str	r3, [r7, #0]
 8010756:	4613      	mov	r3, r2
 8010758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801075a:	e0a9      	b.n	80108b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801075c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801075e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010762:	f000 80a5 	beq.w	80108b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010766:	f7f6 fc77 	bl	8007058 <HAL_GetTick>
 801076a:	4602      	mov	r2, r0
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	1ad3      	subs	r3, r2, r3
 8010770:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010772:	429a      	cmp	r2, r3
 8010774:	d302      	bcc.n	801077c <UART_WaitOnFlagUntilTimeout+0x32>
 8010776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010778:	2b00      	cmp	r3, #0
 801077a:	d140      	bne.n	80107fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010784:	e853 3f00 	ldrex	r3, [r3]
 8010788:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801078a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010790:	667b      	str	r3, [r7, #100]	; 0x64
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	461a      	mov	r2, r3
 8010798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801079a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801079c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80107a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80107a2:	e841 2300 	strex	r3, r2, [r1]
 80107a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80107a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1e6      	bne.n	801077c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	3308      	adds	r3, #8
 80107b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b8:	e853 3f00 	ldrex	r3, [r3]
 80107bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c0:	f023 0301 	bic.w	r3, r3, #1
 80107c4:	663b      	str	r3, [r7, #96]	; 0x60
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3308      	adds	r3, #8
 80107cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80107d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107d6:	e841 2300 	strex	r3, r2, [r1]
 80107da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80107dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d1e5      	bne.n	80107ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2220      	movs	r2, #32
 80107e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2220      	movs	r2, #32
 80107ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80107fa:	2303      	movs	r3, #3
 80107fc:	e069      	b.n	80108d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f003 0304 	and.w	r3, r3, #4
 8010808:	2b00      	cmp	r3, #0
 801080a:	d051      	beq.n	80108b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801081a:	d149      	bne.n	80108b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010824:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801083a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010844:	637b      	str	r3, [r7, #52]	; 0x34
 8010846:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801084a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e6      	bne.n	8010826 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	3308      	adds	r3, #8
 801085e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	e853 3f00 	ldrex	r3, [r3]
 8010866:	613b      	str	r3, [r7, #16]
   return(result);
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	f023 0301 	bic.w	r3, r3, #1
 801086e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	3308      	adds	r3, #8
 8010876:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010878:	623a      	str	r2, [r7, #32]
 801087a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087c:	69f9      	ldr	r1, [r7, #28]
 801087e:	6a3a      	ldr	r2, [r7, #32]
 8010880:	e841 2300 	strex	r3, r2, [r1]
 8010884:	61bb      	str	r3, [r7, #24]
   return(result);
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1e5      	bne.n	8010858 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2220      	movs	r2, #32
 8010890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2220      	movs	r2, #32
 8010898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2220      	movs	r2, #32
 80108a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80108ac:	2303      	movs	r3, #3
 80108ae:	e010      	b.n	80108d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	69da      	ldr	r2, [r3, #28]
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	4013      	ands	r3, r2
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	429a      	cmp	r2, r3
 80108be:	bf0c      	ite	eq
 80108c0:	2301      	moveq	r3, #1
 80108c2:	2300      	movne	r3, #0
 80108c4:	b2db      	uxtb	r3, r3
 80108c6:	461a      	mov	r2, r3
 80108c8:	79fb      	ldrb	r3, [r7, #7]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	f43f af46 	beq.w	801075c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3770      	adds	r7, #112	; 0x70
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
	...

080108dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b096      	sub	sp, #88	; 0x58
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	4613      	mov	r3, r2
 80108e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	68ba      	ldr	r2, [r7, #8]
 80108ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	88fa      	ldrh	r2, [r7, #6]
 80108f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2222      	movs	r2, #34	; 0x22
 8010904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801090c:	2b00      	cmp	r3, #0
 801090e:	d02c      	beq.n	801096a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010914:	4a42      	ldr	r2, [pc, #264]	; (8010a20 <UART_Start_Receive_DMA+0x144>)
 8010916:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801091c:	4a41      	ldr	r2, [pc, #260]	; (8010a24 <UART_Start_Receive_DMA+0x148>)
 801091e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010924:	4a40      	ldr	r2, [pc, #256]	; (8010a28 <UART_Start_Receive_DMA+0x14c>)
 8010926:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801092c:	2200      	movs	r2, #0
 801092e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	3324      	adds	r3, #36	; 0x24
 801093a:	4619      	mov	r1, r3
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010940:	461a      	mov	r2, r3
 8010942:	88fb      	ldrh	r3, [r7, #6]
 8010944:	f7f7 fa3a 	bl	8007dbc <HAL_DMA_Start_IT>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00d      	beq.n	801096a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2210      	movs	r2, #16
 8010952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2200      	movs	r2, #0
 801095a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2220      	movs	r2, #32
 8010962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8010966:	2301      	movs	r3, #1
 8010968:	e055      	b.n	8010a16 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2200      	movs	r2, #0
 801096e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	691b      	ldr	r3, [r3, #16]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d018      	beq.n	80109ac <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010982:	e853 3f00 	ldrex	r3, [r3]
 8010986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801098e:	657b      	str	r3, [r7, #84]	; 0x54
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	461a      	mov	r2, r3
 8010996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010998:	64bb      	str	r3, [r7, #72]	; 0x48
 801099a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801099c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801099e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109a0:	e841 2300 	strex	r3, r2, [r1]
 80109a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80109a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1e6      	bne.n	801097a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3308      	adds	r3, #8
 80109b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b6:	e853 3f00 	ldrex	r3, [r3]
 80109ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109be:	f043 0301 	orr.w	r3, r3, #1
 80109c2:	653b      	str	r3, [r7, #80]	; 0x50
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	3308      	adds	r3, #8
 80109ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109cc:	637a      	str	r2, [r7, #52]	; 0x34
 80109ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109d4:	e841 2300 	strex	r3, r2, [r1]
 80109d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80109da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1e5      	bne.n	80109ac <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	3308      	adds	r3, #8
 80109e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	e853 3f00 	ldrex	r3, [r3]
 80109ee:	613b      	str	r3, [r7, #16]
   return(result);
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	3308      	adds	r3, #8
 80109fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a00:	623a      	str	r2, [r7, #32]
 8010a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a04:	69f9      	ldr	r1, [r7, #28]
 8010a06:	6a3a      	ldr	r2, [r7, #32]
 8010a08:	e841 2300 	strex	r3, r2, [r1]
 8010a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1e5      	bne.n	80109e0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010a14:	2300      	movs	r3, #0
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3758      	adds	r7, #88	; 0x58
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	08010c2f 	.word	0x08010c2f
 8010a24:	08010d51 	.word	0x08010d51
 8010a28:	08010d89 	.word	0x08010d89

08010a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b08f      	sub	sp, #60	; 0x3c
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a3a:	6a3b      	ldr	r3, [r7, #32]
 8010a3c:	e853 3f00 	ldrex	r3, [r3]
 8010a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010a48:	637b      	str	r3, [r7, #52]	; 0x34
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a5a:	e841 2300 	strex	r3, r2, [r1]
 8010a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1e6      	bne.n	8010a34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3308      	adds	r3, #8
 8010a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	e853 3f00 	ldrex	r3, [r3]
 8010a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3308      	adds	r3, #8
 8010a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a86:	61ba      	str	r2, [r7, #24]
 8010a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8a:	6979      	ldr	r1, [r7, #20]
 8010a8c:	69ba      	ldr	r2, [r7, #24]
 8010a8e:	e841 2300 	strex	r3, r2, [r1]
 8010a92:	613b      	str	r3, [r7, #16]
   return(result);
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1e5      	bne.n	8010a66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2220      	movs	r2, #32
 8010a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010aa2:	bf00      	nop
 8010aa4:	373c      	adds	r7, #60	; 0x3c
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
	...

08010ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b095      	sub	sp, #84	; 0x54
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac0:	e853 3f00 	ldrex	r3, [r3]
 8010ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8010ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ade:	e841 2300 	strex	r3, r2, [r1]
 8010ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1e6      	bne.n	8010ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	3308      	adds	r3, #8
 8010af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	e853 3f00 	ldrex	r3, [r3]
 8010af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010afa:	69fa      	ldr	r2, [r7, #28]
 8010afc:	4b1e      	ldr	r3, [pc, #120]	; (8010b78 <UART_EndRxTransfer+0xc8>)
 8010afe:	4013      	ands	r3, r2
 8010b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	3308      	adds	r3, #8
 8010b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b12:	e841 2300 	strex	r3, r2, [r1]
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d1e5      	bne.n	8010aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	d118      	bne.n	8010b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	e853 3f00 	ldrex	r3, [r3]
 8010b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	f023 0310 	bic.w	r3, r3, #16
 8010b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	461a      	mov	r2, r3
 8010b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b44:	61bb      	str	r3, [r7, #24]
 8010b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b48:	6979      	ldr	r1, [r7, #20]
 8010b4a:	69ba      	ldr	r2, [r7, #24]
 8010b4c:	e841 2300 	strex	r3, r2, [r1]
 8010b50:	613b      	str	r3, [r7, #16]
   return(result);
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1e6      	bne.n	8010b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2220      	movs	r2, #32
 8010b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010b6c:	bf00      	nop
 8010b6e:	3754      	adds	r7, #84	; 0x54
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	effffffe 	.word	0xeffffffe

08010b7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b090      	sub	sp, #64	; 0x40
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	69db      	ldr	r3, [r3, #28]
 8010b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b92:	d037      	beq.n	8010c04 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b96:	2200      	movs	r2, #0
 8010b98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	3308      	adds	r3, #8
 8010ba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	e853 3f00 	ldrex	r3, [r3]
 8010baa:	623b      	str	r3, [r7, #32]
   return(result);
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	3308      	adds	r3, #8
 8010bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bbc:	633a      	str	r2, [r7, #48]	; 0x30
 8010bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bc4:	e841 2300 	strex	r3, r2, [r1]
 8010bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d1e5      	bne.n	8010b9c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	e853 3f00 	ldrex	r3, [r3]
 8010bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010be4:	637b      	str	r3, [r7, #52]	; 0x34
 8010be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	461a      	mov	r2, r3
 8010bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bee:	61fb      	str	r3, [r7, #28]
 8010bf0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf2:	69b9      	ldr	r1, [r7, #24]
 8010bf4:	69fa      	ldr	r2, [r7, #28]
 8010bf6:	e841 2300 	strex	r3, r2, [r1]
 8010bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d1e6      	bne.n	8010bd0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c02:	e002      	b.n	8010c0a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010c04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c06:	f7fe ff19 	bl	800fa3c <HAL_UART_TxCpltCallback>
}
 8010c0a:	bf00      	nop
 8010c0c:	3740      	adds	r7, #64	; 0x40
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b084      	sub	sp, #16
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7fe ff15 	bl	800fa50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c26:	bf00      	nop
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b09c      	sub	sp, #112	; 0x70
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c3a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	69db      	ldr	r3, [r3, #28]
 8010c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c44:	d071      	beq.n	8010d2a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c56:	e853 3f00 	ldrex	r3, [r3]
 8010c5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c74:	e841 2300 	strex	r3, r2, [r1]
 8010c78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1e6      	bne.n	8010c4e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	3308      	adds	r3, #8
 8010c86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8a:	e853 3f00 	ldrex	r3, [r3]
 8010c8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c92:	f023 0301 	bic.w	r3, r3, #1
 8010c96:	667b      	str	r3, [r7, #100]	; 0x64
 8010c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	3308      	adds	r3, #8
 8010c9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ca0:	647a      	str	r2, [r7, #68]	; 0x44
 8010ca2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ca8:	e841 2300 	strex	r3, r2, [r1]
 8010cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1e5      	bne.n	8010c80 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	3308      	adds	r3, #8
 8010cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	e853 3f00 	ldrex	r3, [r3]
 8010cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8010cc4:	6a3b      	ldr	r3, [r7, #32]
 8010cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cca:	663b      	str	r3, [r7, #96]	; 0x60
 8010ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	3308      	adds	r3, #8
 8010cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010cd4:	633a      	str	r2, [r7, #48]	; 0x30
 8010cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cdc:	e841 2300 	strex	r3, r2, [r1]
 8010ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d1e5      	bne.n	8010cb4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cea:	2220      	movs	r2, #32
 8010cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d118      	bne.n	8010d2a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	e853 3f00 	ldrex	r3, [r3]
 8010d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f023 0310 	bic.w	r3, r3, #16
 8010d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	461a      	mov	r2, r3
 8010d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d16:	61fb      	str	r3, [r7, #28]
 8010d18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1a:	69b9      	ldr	r1, [r7, #24]
 8010d1c:	69fa      	ldr	r2, [r7, #28]
 8010d1e:	e841 2300 	strex	r3, r2, [r1]
 8010d22:	617b      	str	r3, [r7, #20]
   return(result);
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1e6      	bne.n	8010cf8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	d107      	bne.n	8010d42 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d38:	4619      	mov	r1, r3
 8010d3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010d3c:	f7f2 fb2a 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d40:	e002      	b.n	8010d48 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010d42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010d44:	f7fe fe8e 	bl	800fa64 <HAL_UART_RxCpltCallback>
}
 8010d48:	bf00      	nop
 8010d4a:	3770      	adds	r7, #112	; 0x70
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d109      	bne.n	8010d7a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d6c:	085b      	lsrs	r3, r3, #1
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	4619      	mov	r1, r3
 8010d72:	68f8      	ldr	r0, [r7, #12]
 8010d74:	f7f2 fb0e 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d78:	e002      	b.n	8010d80 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f7fe fe7c 	bl	800fa78 <HAL_UART_RxHalfCpltCallback>
}
 8010d80:	bf00      	nop
 8010d82:	3710      	adds	r7, #16
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010da4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010db0:	2b80      	cmp	r3, #128	; 0x80
 8010db2:	d109      	bne.n	8010dc8 <UART_DMAError+0x40>
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	2b21      	cmp	r3, #33	; 0x21
 8010db8:	d106      	bne.n	8010dc8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010dc2:	6978      	ldr	r0, [r7, #20]
 8010dc4:	f7ff fe32 	bl	8010a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	689b      	ldr	r3, [r3, #8]
 8010dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dd2:	2b40      	cmp	r3, #64	; 0x40
 8010dd4:	d109      	bne.n	8010dea <UART_DMAError+0x62>
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2b22      	cmp	r3, #34	; 0x22
 8010dda:	d106      	bne.n	8010dea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	2200      	movs	r2, #0
 8010de0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010de4:	6978      	ldr	r0, [r7, #20]
 8010de6:	f7ff fe63 	bl	8010ab0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010df0:	f043 0210 	orr.w	r2, r3, #16
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010dfa:	6978      	ldr	r0, [r7, #20]
 8010dfc:	f7fe fe46 	bl	800fa8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e00:	bf00      	nop
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2200      	movs	r2, #0
 8010e22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f7fe fe30 	bl	800fa8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e2c:	bf00      	nop
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b088      	sub	sp, #32
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	e853 3f00 	ldrex	r3, [r3]
 8010e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e50:	61fb      	str	r3, [r7, #28]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	461a      	mov	r2, r3
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	61bb      	str	r3, [r7, #24]
 8010e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e5e:	6979      	ldr	r1, [r7, #20]
 8010e60:	69ba      	ldr	r2, [r7, #24]
 8010e62:	e841 2300 	strex	r3, r2, [r1]
 8010e66:	613b      	str	r3, [r7, #16]
   return(result);
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d1e6      	bne.n	8010e3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2220      	movs	r2, #32
 8010e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7fe fddd 	bl	800fa3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e82:	bf00      	nop
 8010e84:	3720      	adds	r7, #32
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	b083      	sub	sp, #12
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e92:	bf00      	nop
 8010e94:	370c      	adds	r7, #12
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr

08010e9e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010e9e:	b480      	push	{r7}
 8010ea0:	b083      	sub	sp, #12
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ea6:	bf00      	nop
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010eba:	bf00      	nop
 8010ebc:	370c      	adds	r7, #12
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr

08010ec6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b084      	sub	sp, #16
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d101      	bne.n	8010edc <HAL_UARTEx_EnableFifoMode+0x16>
 8010ed8:	2302      	movs	r3, #2
 8010eda:	e02b      	b.n	8010f34 <HAL_UARTEx_EnableFifoMode+0x6e>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2224      	movs	r2, #36	; 0x24
 8010ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f022 0201 	bic.w	r2, r2, #1
 8010f02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010f12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f000 f91f 	bl	8011160 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2220      	movs	r2, #32
 8010f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f32:	2300      	movs	r3, #0
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3710      	adds	r7, #16
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d101      	bne.n	8010f52 <HAL_UARTEx_DisableFifoMode+0x16>
 8010f4e:	2302      	movs	r3, #2
 8010f50:	e027      	b.n	8010fa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2201      	movs	r2, #1
 8010f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2224      	movs	r2, #36	; 0x24
 8010f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f022 0201 	bic.w	r2, r2, #1
 8010f78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010f80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	68fa      	ldr	r2, [r7, #12]
 8010f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2220      	movs	r2, #32
 8010f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010fa0:	2300      	movs	r3, #0
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3714      	adds	r7, #20
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr

08010fae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b084      	sub	sp, #16
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
 8010fb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d101      	bne.n	8010fc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010fc2:	2302      	movs	r3, #2
 8010fc4:	e02d      	b.n	8011022 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2224      	movs	r2, #36	; 0x24
 8010fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f022 0201 	bic.w	r2, r2, #1
 8010fec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	689b      	ldr	r3, [r3, #8]
 8010ff4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	683a      	ldr	r2, [r7, #0]
 8010ffe:	430a      	orrs	r2, r1
 8011000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f8ac 	bl	8011160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2220      	movs	r2, #32
 8011014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2200      	movs	r2, #0
 801101c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011020:	2300      	movs	r3, #0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b084      	sub	sp, #16
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
 8011032:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801103a:	2b01      	cmp	r3, #1
 801103c:	d101      	bne.n	8011042 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801103e:	2302      	movs	r3, #2
 8011040:	e02d      	b.n	801109e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2201      	movs	r2, #1
 8011046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2224      	movs	r2, #36	; 0x24
 801104e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f022 0201 	bic.w	r2, r2, #1
 8011068:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	430a      	orrs	r2, r1
 801107c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 f86e 	bl	8011160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2220      	movs	r2, #32
 8011090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2200      	movs	r2, #0
 8011098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b08c      	sub	sp, #48	; 0x30
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	60f8      	str	r0, [r7, #12]
 80110ae:	60b9      	str	r1, [r7, #8]
 80110b0:	4613      	mov	r3, r2
 80110b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110ba:	2b20      	cmp	r3, #32
 80110bc:	d14a      	bne.n	8011154 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d002      	beq.n	80110ca <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80110c4:	88fb      	ldrh	r3, [r7, #6]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d101      	bne.n	80110ce <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80110ca:	2301      	movs	r3, #1
 80110cc:	e043      	b.n	8011156 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d101      	bne.n	80110dc <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 80110d8:	2302      	movs	r3, #2
 80110da:	e03c      	b.n	8011156 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2201      	movs	r2, #1
 80110e8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80110ea:	88fb      	ldrh	r3, [r7, #6]
 80110ec:	461a      	mov	r2, r3
 80110ee:	68b9      	ldr	r1, [r7, #8]
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f7ff fbf3 	bl	80108dc <UART_Start_Receive_DMA>
 80110f6:	4603      	mov	r3, r0
 80110f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80110fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011100:	2b00      	cmp	r3, #0
 8011102:	d124      	bne.n	801114e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011108:	2b01      	cmp	r3, #1
 801110a:	d11d      	bne.n	8011148 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2210      	movs	r2, #16
 8011112:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	e853 3f00 	ldrex	r3, [r3]
 8011120:	617b      	str	r3, [r7, #20]
   return(result);
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	f043 0310 	orr.w	r3, r3, #16
 8011128:	62bb      	str	r3, [r7, #40]	; 0x28
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	461a      	mov	r2, r3
 8011130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011132:	627b      	str	r3, [r7, #36]	; 0x24
 8011134:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011136:	6a39      	ldr	r1, [r7, #32]
 8011138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801113a:	e841 2300 	strex	r3, r2, [r1]
 801113e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1e6      	bne.n	8011114 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8011146:	e002      	b.n	801114e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011148:	2301      	movs	r3, #1
 801114a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801114e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011152:	e000      	b.n	8011156 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011154:	2302      	movs	r3, #2
  }
}
 8011156:	4618      	mov	r0, r3
 8011158:	3730      	adds	r7, #48	; 0x30
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
	...

08011160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801116c:	2b00      	cmp	r3, #0
 801116e:	d108      	bne.n	8011182 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2201      	movs	r2, #1
 8011174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011180:	e031      	b.n	80111e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011182:	2310      	movs	r3, #16
 8011184:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011186:	2310      	movs	r3, #16
 8011188:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	0e5b      	lsrs	r3, r3, #25
 8011192:	b2db      	uxtb	r3, r3
 8011194:	f003 0307 	and.w	r3, r3, #7
 8011198:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	0f5b      	lsrs	r3, r3, #29
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	f003 0307 	and.w	r3, r3, #7
 80111a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111aa:	7bbb      	ldrb	r3, [r7, #14]
 80111ac:	7b3a      	ldrb	r2, [r7, #12]
 80111ae:	4911      	ldr	r1, [pc, #68]	; (80111f4 <UARTEx_SetNbDataToProcess+0x94>)
 80111b0:	5c8a      	ldrb	r2, [r1, r2]
 80111b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111b6:	7b3a      	ldrb	r2, [r7, #12]
 80111b8:	490f      	ldr	r1, [pc, #60]	; (80111f8 <UARTEx_SetNbDataToProcess+0x98>)
 80111ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111c8:	7bfb      	ldrb	r3, [r7, #15]
 80111ca:	7b7a      	ldrb	r2, [r7, #13]
 80111cc:	4909      	ldr	r1, [pc, #36]	; (80111f4 <UARTEx_SetNbDataToProcess+0x94>)
 80111ce:	5c8a      	ldrb	r2, [r1, r2]
 80111d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111d4:	7b7a      	ldrb	r2, [r7, #13]
 80111d6:	4908      	ldr	r1, [pc, #32]	; (80111f8 <UARTEx_SetNbDataToProcess+0x98>)
 80111d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111da:	fb93 f3f2 	sdiv	r3, r3, r2
 80111de:	b29a      	uxth	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111e6:	bf00      	nop
 80111e8:	3714      	adds	r7, #20
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	0801527c 	.word	0x0801527c
 80111f8:	08015284 	.word	0x08015284

080111fc <checkint>:
 80111fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011200:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011204:	429a      	cmp	r2, r3
 8011206:	b570      	push	{r4, r5, r6, lr}
 8011208:	dd2a      	ble.n	8011260 <checkint+0x64>
 801120a:	f240 4333 	movw	r3, #1075	; 0x433
 801120e:	429a      	cmp	r2, r3
 8011210:	dc24      	bgt.n	801125c <checkint+0x60>
 8011212:	1a9b      	subs	r3, r3, r2
 8011214:	f1a3 0620 	sub.w	r6, r3, #32
 8011218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801121c:	fa02 f403 	lsl.w	r4, r2, r3
 8011220:	fa02 f606 	lsl.w	r6, r2, r6
 8011224:	f1c3 0520 	rsb	r5, r3, #32
 8011228:	fa22 f505 	lsr.w	r5, r2, r5
 801122c:	4334      	orrs	r4, r6
 801122e:	432c      	orrs	r4, r5
 8011230:	409a      	lsls	r2, r3
 8011232:	ea20 0202 	bic.w	r2, r0, r2
 8011236:	ea21 0404 	bic.w	r4, r1, r4
 801123a:	4322      	orrs	r2, r4
 801123c:	f1a3 0420 	sub.w	r4, r3, #32
 8011240:	f1c3 0220 	rsb	r2, r3, #32
 8011244:	d10c      	bne.n	8011260 <checkint+0x64>
 8011246:	40d8      	lsrs	r0, r3
 8011248:	fa01 f302 	lsl.w	r3, r1, r2
 801124c:	4318      	orrs	r0, r3
 801124e:	40e1      	lsrs	r1, r4
 8011250:	4308      	orrs	r0, r1
 8011252:	f000 0001 	and.w	r0, r0, #1
 8011256:	f1d0 0002 	rsbs	r0, r0, #2
 801125a:	bd70      	pop	{r4, r5, r6, pc}
 801125c:	2002      	movs	r0, #2
 801125e:	e7fc      	b.n	801125a <checkint+0x5e>
 8011260:	2000      	movs	r0, #0
 8011262:	e7fa      	b.n	801125a <checkint+0x5e>
 8011264:	0000      	movs	r0, r0
	...

08011268 <pow>:
 8011268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801126c:	ee10 4a90 	vmov	r4, s1
 8011270:	ed2d 8b0a 	vpush	{d8-d12}
 8011274:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8011278:	ee11 7a90 	vmov	r7, s3
 801127c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8011280:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8011284:	429a      	cmp	r2, r3
 8011286:	ee10 6a10 	vmov	r6, s0
 801128a:	ee11 0a10 	vmov	r0, s2
 801128e:	b086      	sub	sp, #24
 8011290:	46d4      	mov	ip, sl
 8011292:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8011296:	d806      	bhi.n	80112a6 <pow+0x3e>
 8011298:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801129c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80112a0:	2b7f      	cmp	r3, #127	; 0x7f
 80112a2:	f240 8156 	bls.w	8011552 <pow+0x2ea>
 80112a6:	1802      	adds	r2, r0, r0
 80112a8:	eb47 0107 	adc.w	r1, r7, r7
 80112ac:	f06f 0e01 	mvn.w	lr, #1
 80112b0:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 80112b4:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 80112b8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80112bc:	45ce      	cmp	lr, r9
 80112be:	eb73 0808 	sbcs.w	r8, r3, r8
 80112c2:	d23f      	bcs.n	8011344 <pow+0xdc>
 80112c4:	ea52 0301 	orrs.w	r3, r2, r1
 80112c8:	f04f 0300 	mov.w	r3, #0
 80112cc:	d10c      	bne.n	80112e8 <pow+0x80>
 80112ce:	19b6      	adds	r6, r6, r6
 80112d0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80112d4:	4164      	adcs	r4, r4
 80112d6:	42b3      	cmp	r3, r6
 80112d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80112dc:	41a3      	sbcs	r3, r4
 80112de:	f0c0 808c 	bcc.w	80113fa <pow+0x192>
 80112e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80112e6:	e028      	b.n	801133a <pow+0xd2>
 80112e8:	4da3      	ldr	r5, [pc, #652]	; (8011578 <pow+0x310>)
 80112ea:	42ac      	cmp	r4, r5
 80112ec:	bf08      	it	eq
 80112ee:	429e      	cmpeq	r6, r3
 80112f0:	d107      	bne.n	8011302 <pow+0x9a>
 80112f2:	1800      	adds	r0, r0, r0
 80112f4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80112f8:	417f      	adcs	r7, r7
 80112fa:	4283      	cmp	r3, r0
 80112fc:	4b9f      	ldr	r3, [pc, #636]	; (801157c <pow+0x314>)
 80112fe:	41bb      	sbcs	r3, r7
 8011300:	e7ed      	b.n	80112de <pow+0x76>
 8011302:	19b6      	adds	r6, r6, r6
 8011304:	489e      	ldr	r0, [pc, #632]	; (8011580 <pow+0x318>)
 8011306:	4164      	adcs	r4, r4
 8011308:	42b3      	cmp	r3, r6
 801130a:	eb70 0504 	sbcs.w	r5, r0, r4
 801130e:	d374      	bcc.n	80113fa <pow+0x192>
 8011310:	4281      	cmp	r1, r0
 8011312:	bf08      	it	eq
 8011314:	429a      	cmpeq	r2, r3
 8011316:	d170      	bne.n	80113fa <pow+0x192>
 8011318:	4a9a      	ldr	r2, [pc, #616]	; (8011584 <pow+0x31c>)
 801131a:	4294      	cmp	r4, r2
 801131c:	bf08      	it	eq
 801131e:	429e      	cmpeq	r6, r3
 8011320:	d0df      	beq.n	80112e2 <pow+0x7a>
 8011322:	4294      	cmp	r4, r2
 8011324:	ea6f 0707 	mvn.w	r7, r7
 8011328:	bf34      	ite	cc
 801132a:	2400      	movcc	r4, #0
 801132c:	2401      	movcs	r4, #1
 801132e:	0fff      	lsrs	r7, r7, #31
 8011330:	42bc      	cmp	r4, r7
 8011332:	f040 81d9 	bne.w	80116e8 <pow+0x480>
 8011336:	ee21 0b01 	vmul.f64	d0, d1, d1
 801133a:	b006      	add	sp, #24
 801133c:	ecbd 8b0a 	vpop	{d8-d12}
 8011340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011344:	eb16 0806 	adds.w	r8, r6, r6
 8011348:	eb44 0904 	adc.w	r9, r4, r4
 801134c:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8011350:	f169 0200 	sbc.w	r2, r9, #0
 8011354:	458e      	cmp	lr, r1
 8011356:	4193      	sbcs	r3, r2
 8011358:	d223      	bcs.n	80113a2 <pow+0x13a>
 801135a:	ee20 0b00 	vmul.f64	d0, d0, d0
 801135e:	2c00      	cmp	r4, #0
 8011360:	da12      	bge.n	8011388 <pow+0x120>
 8011362:	4639      	mov	r1, r7
 8011364:	f7ff ff4a 	bl	80111fc <checkint>
 8011368:	2801      	cmp	r0, #1
 801136a:	d10d      	bne.n	8011388 <pow+0x120>
 801136c:	eeb1 0b40 	vneg.f64	d0, d0
 8011370:	ea58 0309 	orrs.w	r3, r8, r9
 8011374:	d10a      	bne.n	801138c <pow+0x124>
 8011376:	2f00      	cmp	r7, #0
 8011378:	dadf      	bge.n	801133a <pow+0xd2>
 801137a:	b006      	add	sp, #24
 801137c:	ecbd 8b0a 	vpop	{d8-d12}
 8011380:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011384:	f000 bfec 	b.w	8012360 <__math_divzero>
 8011388:	2000      	movs	r0, #0
 801138a:	e7f1      	b.n	8011370 <pow+0x108>
 801138c:	2f00      	cmp	r7, #0
 801138e:	dad4      	bge.n	801133a <pow+0xd2>
 8011390:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011394:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011398:	ed8d 7b00 	vstr	d7, [sp]
 801139c:	ed9d 0b00 	vldr	d0, [sp]
 80113a0:	e7cb      	b.n	801133a <pow+0xd2>
 80113a2:	2c00      	cmp	r4, #0
 80113a4:	da2c      	bge.n	8011400 <pow+0x198>
 80113a6:	4639      	mov	r1, r7
 80113a8:	f7ff ff28 	bl	80111fc <checkint>
 80113ac:	b930      	cbnz	r0, 80113bc <pow+0x154>
 80113ae:	b006      	add	sp, #24
 80113b0:	ecbd 8b0a 	vpop	{d8-d12}
 80113b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113b8:	f000 bfea 	b.w	8012390 <__math_invalid>
 80113bc:	2801      	cmp	r0, #1
 80113be:	bf14      	ite	ne
 80113c0:	2000      	movne	r0, #0
 80113c2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80113c6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80113ca:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80113ce:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80113d2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80113d6:	2b7f      	cmp	r3, #127	; 0x7f
 80113d8:	d92d      	bls.n	8011436 <pow+0x1ce>
 80113da:	4b67      	ldr	r3, [pc, #412]	; (8011578 <pow+0x310>)
 80113dc:	2000      	movs	r0, #0
 80113de:	429c      	cmp	r4, r3
 80113e0:	bf08      	it	eq
 80113e2:	4286      	cmpeq	r6, r0
 80113e4:	f43f af7d 	beq.w	80112e2 <pow+0x7a>
 80113e8:	f240 31bd 	movw	r1, #957	; 0x3bd
 80113ec:	428a      	cmp	r2, r1
 80113ee:	d80c      	bhi.n	801140a <pow+0x1a2>
 80113f0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80113f4:	42b0      	cmp	r0, r6
 80113f6:	41a3      	sbcs	r3, r4
 80113f8:	d204      	bcs.n	8011404 <pow+0x19c>
 80113fa:	ee31 0b00 	vadd.f64	d0, d1, d0
 80113fe:	e79c      	b.n	801133a <pow+0xd2>
 8011400:	2000      	movs	r0, #0
 8011402:	e7e4      	b.n	80113ce <pow+0x166>
 8011404:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011408:	e797      	b.n	801133a <pow+0xd2>
 801140a:	2e01      	cmp	r6, #1
 801140c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011414:	bf34      	ite	cc
 8011416:	2301      	movcc	r3, #1
 8011418:	2300      	movcs	r3, #0
 801141a:	4295      	cmp	r5, r2
 801141c:	bf8c      	ite	hi
 801141e:	2500      	movhi	r5, #0
 8011420:	2501      	movls	r5, #1
 8011422:	42ab      	cmp	r3, r5
 8011424:	f000 809d 	beq.w	8011562 <pow+0x2fa>
 8011428:	b006      	add	sp, #24
 801142a:	ecbd 8b0a 	vpop	{d8-d12}
 801142e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011432:	f000 bf8d 	b.w	8012350 <__math_oflow>
 8011436:	f1bc 0f00 	cmp.w	ip, #0
 801143a:	d10b      	bne.n	8011454 <pow+0x1ec>
 801143c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011570 <pow+0x308>
 8011440:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011444:	ec53 2b17 	vmov	r2, r3, d7
 8011448:	ee17 6a10 	vmov	r6, s14
 801144c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011450:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011454:	4b4c      	ldr	r3, [pc, #304]	; (8011588 <pow+0x320>)
 8011456:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801145a:	4423      	add	r3, r4
 801145c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011460:	1519      	asrs	r1, r3, #20
 8011462:	0d1b      	lsrs	r3, r3, #20
 8011464:	051b      	lsls	r3, r3, #20
 8011466:	eba4 0903 	sub.w	r9, r4, r3
 801146a:	4b48      	ldr	r3, [pc, #288]	; (801158c <pow+0x324>)
 801146c:	ee04 1a10 	vmov	s8, r1
 8011470:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011474:	f1b6 0800 	subs.w	r8, r6, #0
 8011478:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801147c:	ec49 8b15 	vmov	d5, r8, r9
 8011480:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011484:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011488:	ed93 7b00 	vldr	d7, [r3]
 801148c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011490:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011494:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011498:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801149c:	ee36 ab02 	vadd.f64	d10, d6, d2
 80114a0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80114a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80114a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80114ac:	ee32 2b06 	vadd.f64	d2, d2, d6
 80114b0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80114b4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80114b8:	ed93 4b08 	vldr	d4, [r3, #32]
 80114bc:	ee26 0b05 	vmul.f64	d0, d6, d5
 80114c0:	eeb0 9b40 	vmov.f64	d9, d0
 80114c4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80114c8:	ed93 5b06 	vldr	d5, [r3, #24]
 80114cc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80114d0:	ee26 bb00 	vmul.f64	d11, d6, d0
 80114d4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80114d8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80114dc:	ee3a ab48 	vsub.f64	d10, d10, d8
 80114e0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80114e4:	ee37 9b09 	vadd.f64	d9, d7, d9
 80114e8:	ee3a ab00 	vadd.f64	d10, d10, d0
 80114ec:	eea6 4b03 	vfma.f64	d4, d6, d3
 80114f0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80114f4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80114f8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80114fc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011500:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011504:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011508:	eeab ab05 	vfma.f64	d10, d11, d5
 801150c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011510:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011514:	ee17 3a90 	vmov	r3, s15
 8011518:	eeb0 5b47 	vmov.f64	d5, d7
 801151c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011520:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011524:	18b2      	adds	r2, r6, r2
 8011526:	2a3e      	cmp	r2, #62	; 0x3e
 8011528:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801152c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011530:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011534:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011538:	d92b      	bls.n	8011592 <pow+0x32a>
 801153a:	2a00      	cmp	r2, #0
 801153c:	da0b      	bge.n	8011556 <pow+0x2ee>
 801153e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011542:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011546:	2800      	cmp	r0, #0
 8011548:	f43f aef7 	beq.w	801133a <pow+0xd2>
 801154c:	eeb1 0b40 	vneg.f64	d0, d0
 8011550:	e6f3      	b.n	801133a <pow+0xd2>
 8011552:	2000      	movs	r0, #0
 8011554:	e77e      	b.n	8011454 <pow+0x1ec>
 8011556:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801155a:	d919      	bls.n	8011590 <pow+0x328>
 801155c:	2b00      	cmp	r3, #0
 801155e:	f6bf af63 	bge.w	8011428 <pow+0x1c0>
 8011562:	b006      	add	sp, #24
 8011564:	ecbd 8b0a 	vpop	{d8-d12}
 8011568:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801156c:	f000 bee8 	b.w	8012340 <__math_uflow>
 8011570:	00000000 	.word	0x00000000
 8011574:	43300000 	.word	0x43300000
 8011578:	3ff00000 	.word	0x3ff00000
 801157c:	fff00000 	.word	0xfff00000
 8011580:	ffe00000 	.word	0xffe00000
 8011584:	7fe00000 	.word	0x7fe00000
 8011588:	c0196aab 	.word	0xc0196aab
 801158c:	08015290 	.word	0x08015290
 8011590:	2600      	movs	r6, #0
 8011592:	495d      	ldr	r1, [pc, #372]	; (8011708 <pow+0x4a0>)
 8011594:	ed91 4b02 	vldr	d4, [r1, #8]
 8011598:	ed91 3b00 	vldr	d3, [r1]
 801159c:	eeb0 6b44 	vmov.f64	d6, d4
 80115a0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80115a4:	ee16 5a10 	vmov	r5, s12
 80115a8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80115ac:	ed91 4b04 	vldr	d4, [r1, #16]
 80115b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80115b4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80115b8:	eeb0 0b47 	vmov.f64	d0, d7
 80115bc:	ed91 7b06 	vldr	d7, [r1, #24]
 80115c0:	18dc      	adds	r4, r3, r3
 80115c2:	f104 030f 	add.w	r3, r4, #15
 80115c6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80115ca:	eea6 0b07 	vfma.f64	d0, d6, d7
 80115ce:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80115d2:	ee35 0b00 	vadd.f64	d0, d5, d0
 80115d6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80115da:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80115de:	ed91 5b08 	vldr	d5, [r1, #32]
 80115e2:	ee30 7b07 	vadd.f64	d7, d0, d7
 80115e6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80115ea:	eea0 5b04 	vfma.f64	d5, d0, d4
 80115ee:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80115f2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80115f6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80115fa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80115fe:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011602:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011606:	eea0 5b04 	vfma.f64	d5, d0, d4
 801160a:	1940      	adds	r0, r0, r5
 801160c:	2700      	movs	r7, #0
 801160e:	eb17 020c 	adds.w	r2, r7, ip
 8011612:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011616:	eea6 7b05 	vfma.f64	d7, d6, d5
 801161a:	2e00      	cmp	r6, #0
 801161c:	d15f      	bne.n	80116de <pow+0x476>
 801161e:	42bd      	cmp	r5, r7
 8011620:	db13      	blt.n	801164a <pow+0x3e2>
 8011622:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011626:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801162a:	4610      	mov	r0, r2
 801162c:	ec41 0b10 	vmov	d0, r0, r1
 8011630:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011634:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80116f0 <pow+0x488>
 8011638:	ee20 0b07 	vmul.f64	d0, d0, d7
 801163c:	b006      	add	sp, #24
 801163e:	ecbd 8b0a 	vpop	{d8-d12}
 8011642:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011646:	f000 bebb 	b.w	80123c0 <__math_check_oflow>
 801164a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801164e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011652:	4610      	mov	r0, r2
 8011654:	ec41 0b15 	vmov	d5, r0, r1
 8011658:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801165c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011660:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011664:	eeb0 3bc7 	vabs.f64	d3, d7
 8011668:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011670:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80116f8 <pow+0x490>
 8011674:	d52a      	bpl.n	80116cc <pow+0x464>
 8011676:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801167a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011682:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011686:	ee35 6b06 	vadd.f64	d6, d5, d6
 801168a:	bf48      	it	mi
 801168c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011690:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011694:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011698:	ee35 7b07 	vadd.f64	d7, d5, d7
 801169c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80116a0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80116a4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80116a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b0:	d104      	bne.n	80116bc <pow+0x454>
 80116b2:	4632      	mov	r2, r6
 80116b4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80116b8:	ec43 2b17 	vmov	d7, r2, r3
 80116bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80116c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116c4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80116c8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80116cc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80116d0:	b006      	add	sp, #24
 80116d2:	ecbd 8b0a 	vpop	{d8-d12}
 80116d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116da:	f000 be68 	b.w	80123ae <__math_check_uflow>
 80116de:	ec43 2b10 	vmov	d0, r2, r3
 80116e2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80116e6:	e628      	b.n	801133a <pow+0xd2>
 80116e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011700 <pow+0x498>
 80116ec:	e625      	b.n	801133a <pow+0xd2>
 80116ee:	bf00      	nop
 80116f0:	00000000 	.word	0x00000000
 80116f4:	7f000000 	.word	0x7f000000
 80116f8:	00000000 	.word	0x00000000
 80116fc:	00100000 	.word	0x00100000
	...
 8011708:	08016478 	.word	0x08016478
 801170c:	00000000 	.word	0x00000000

08011710 <cos>:
 8011710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011712:	eeb0 7b40 	vmov.f64	d7, d0
 8011716:	ee17 3a90 	vmov	r3, s15
 801171a:	4a21      	ldr	r2, [pc, #132]	; (80117a0 <cos+0x90>)
 801171c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011720:	4293      	cmp	r3, r2
 8011722:	dc06      	bgt.n	8011732 <cos+0x22>
 8011724:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011798 <cos+0x88>
 8011728:	b005      	add	sp, #20
 801172a:	f85d eb04 	ldr.w	lr, [sp], #4
 801172e:	f000 ba8f 	b.w	8011c50 <__kernel_cos>
 8011732:	4a1c      	ldr	r2, [pc, #112]	; (80117a4 <cos+0x94>)
 8011734:	4293      	cmp	r3, r2
 8011736:	dd04      	ble.n	8011742 <cos+0x32>
 8011738:	ee30 0b40 	vsub.f64	d0, d0, d0
 801173c:	b005      	add	sp, #20
 801173e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011742:	4668      	mov	r0, sp
 8011744:	f000 f89c 	bl	8011880 <__ieee754_rem_pio2>
 8011748:	f000 0003 	and.w	r0, r0, #3
 801174c:	2801      	cmp	r0, #1
 801174e:	d009      	beq.n	8011764 <cos+0x54>
 8011750:	2802      	cmp	r0, #2
 8011752:	d010      	beq.n	8011776 <cos+0x66>
 8011754:	b9b0      	cbnz	r0, 8011784 <cos+0x74>
 8011756:	ed9d 1b02 	vldr	d1, [sp, #8]
 801175a:	ed9d 0b00 	vldr	d0, [sp]
 801175e:	f000 fa77 	bl	8011c50 <__kernel_cos>
 8011762:	e7eb      	b.n	801173c <cos+0x2c>
 8011764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011768:	ed9d 0b00 	vldr	d0, [sp]
 801176c:	f000 fd74 	bl	8012258 <__kernel_sin>
 8011770:	eeb1 0b40 	vneg.f64	d0, d0
 8011774:	e7e2      	b.n	801173c <cos+0x2c>
 8011776:	ed9d 1b02 	vldr	d1, [sp, #8]
 801177a:	ed9d 0b00 	vldr	d0, [sp]
 801177e:	f000 fa67 	bl	8011c50 <__kernel_cos>
 8011782:	e7f5      	b.n	8011770 <cos+0x60>
 8011784:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011788:	ed9d 0b00 	vldr	d0, [sp]
 801178c:	2001      	movs	r0, #1
 801178e:	f000 fd63 	bl	8012258 <__kernel_sin>
 8011792:	e7d3      	b.n	801173c <cos+0x2c>
 8011794:	f3af 8000 	nop.w
	...
 80117a0:	3fe921fb 	.word	0x3fe921fb
 80117a4:	7fefffff 	.word	0x7fefffff

080117a8 <sin>:
 80117a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117aa:	eeb0 7b40 	vmov.f64	d7, d0
 80117ae:	ee17 3a90 	vmov	r3, s15
 80117b2:	4a21      	ldr	r2, [pc, #132]	; (8011838 <sin+0x90>)
 80117b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117b8:	4293      	cmp	r3, r2
 80117ba:	dc07      	bgt.n	80117cc <sin+0x24>
 80117bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011830 <sin+0x88>
 80117c0:	2000      	movs	r0, #0
 80117c2:	b005      	add	sp, #20
 80117c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117c8:	f000 bd46 	b.w	8012258 <__kernel_sin>
 80117cc:	4a1b      	ldr	r2, [pc, #108]	; (801183c <sin+0x94>)
 80117ce:	4293      	cmp	r3, r2
 80117d0:	dd04      	ble.n	80117dc <sin+0x34>
 80117d2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80117d6:	b005      	add	sp, #20
 80117d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80117dc:	4668      	mov	r0, sp
 80117de:	f000 f84f 	bl	8011880 <__ieee754_rem_pio2>
 80117e2:	f000 0003 	and.w	r0, r0, #3
 80117e6:	2801      	cmp	r0, #1
 80117e8:	d00a      	beq.n	8011800 <sin+0x58>
 80117ea:	2802      	cmp	r0, #2
 80117ec:	d00f      	beq.n	801180e <sin+0x66>
 80117ee:	b9c0      	cbnz	r0, 8011822 <sin+0x7a>
 80117f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117f4:	ed9d 0b00 	vldr	d0, [sp]
 80117f8:	2001      	movs	r0, #1
 80117fa:	f000 fd2d 	bl	8012258 <__kernel_sin>
 80117fe:	e7ea      	b.n	80117d6 <sin+0x2e>
 8011800:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011804:	ed9d 0b00 	vldr	d0, [sp]
 8011808:	f000 fa22 	bl	8011c50 <__kernel_cos>
 801180c:	e7e3      	b.n	80117d6 <sin+0x2e>
 801180e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011812:	ed9d 0b00 	vldr	d0, [sp]
 8011816:	2001      	movs	r0, #1
 8011818:	f000 fd1e 	bl	8012258 <__kernel_sin>
 801181c:	eeb1 0b40 	vneg.f64	d0, d0
 8011820:	e7d9      	b.n	80117d6 <sin+0x2e>
 8011822:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011826:	ed9d 0b00 	vldr	d0, [sp]
 801182a:	f000 fa11 	bl	8011c50 <__kernel_cos>
 801182e:	e7f5      	b.n	801181c <sin+0x74>
	...
 8011838:	3fe921fb 	.word	0x3fe921fb
 801183c:	7fefffff 	.word	0x7fefffff

08011840 <atan2f>:
 8011840:	f000 b962 	b.w	8011b08 <__ieee754_atan2f>

08011844 <sqrtf>:
 8011844:	b508      	push	{r3, lr}
 8011846:	ed2d 8b02 	vpush	{d8}
 801184a:	eeb0 8a40 	vmov.f32	s16, s0
 801184e:	f000 f9f9 	bl	8011c44 <__ieee754_sqrtf>
 8011852:	eeb4 8a48 	vcmp.f32	s16, s16
 8011856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185a:	d60c      	bvs.n	8011876 <sqrtf+0x32>
 801185c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801187c <sqrtf+0x38>
 8011860:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011868:	d505      	bpl.n	8011876 <sqrtf+0x32>
 801186a:	f000 ffa3 	bl	80127b4 <__errno>
 801186e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011872:	2321      	movs	r3, #33	; 0x21
 8011874:	6003      	str	r3, [r0, #0]
 8011876:	ecbd 8b02 	vpop	{d8}
 801187a:	bd08      	pop	{r3, pc}
 801187c:	00000000 	.word	0x00000000

08011880 <__ieee754_rem_pio2>:
 8011880:	b570      	push	{r4, r5, r6, lr}
 8011882:	eeb0 7b40 	vmov.f64	d7, d0
 8011886:	ee17 5a90 	vmov	r5, s15
 801188a:	4b99      	ldr	r3, [pc, #612]	; (8011af0 <__ieee754_rem_pio2+0x270>)
 801188c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011890:	429e      	cmp	r6, r3
 8011892:	b088      	sub	sp, #32
 8011894:	4604      	mov	r4, r0
 8011896:	dc07      	bgt.n	80118a8 <__ieee754_rem_pio2+0x28>
 8011898:	2200      	movs	r2, #0
 801189a:	2300      	movs	r3, #0
 801189c:	ed84 0b00 	vstr	d0, [r4]
 80118a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80118a4:	2000      	movs	r0, #0
 80118a6:	e01b      	b.n	80118e0 <__ieee754_rem_pio2+0x60>
 80118a8:	4b92      	ldr	r3, [pc, #584]	; (8011af4 <__ieee754_rem_pio2+0x274>)
 80118aa:	429e      	cmp	r6, r3
 80118ac:	dc3b      	bgt.n	8011926 <__ieee754_rem_pio2+0xa6>
 80118ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80118b2:	2d00      	cmp	r5, #0
 80118b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011ab0 <__ieee754_rem_pio2+0x230>
 80118b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80118bc:	dd19      	ble.n	80118f2 <__ieee754_rem_pio2+0x72>
 80118be:	ee30 7b46 	vsub.f64	d7, d0, d6
 80118c2:	429e      	cmp	r6, r3
 80118c4:	d00e      	beq.n	80118e4 <__ieee754_rem_pio2+0x64>
 80118c6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011ab8 <__ieee754_rem_pio2+0x238>
 80118ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 80118ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80118d2:	ed84 5b00 	vstr	d5, [r4]
 80118d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118da:	ed84 7b02 	vstr	d7, [r4, #8]
 80118de:	2001      	movs	r0, #1
 80118e0:	b008      	add	sp, #32
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011ac0 <__ieee754_rem_pio2+0x240>
 80118e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118ec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011ac8 <__ieee754_rem_pio2+0x248>
 80118f0:	e7eb      	b.n	80118ca <__ieee754_rem_pio2+0x4a>
 80118f2:	429e      	cmp	r6, r3
 80118f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80118f8:	d00e      	beq.n	8011918 <__ieee754_rem_pio2+0x98>
 80118fa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011ab8 <__ieee754_rem_pio2+0x238>
 80118fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011902:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011906:	ed84 5b00 	vstr	d5, [r4]
 801190a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801190e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011912:	ed84 7b02 	vstr	d7, [r4, #8]
 8011916:	e7e3      	b.n	80118e0 <__ieee754_rem_pio2+0x60>
 8011918:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011ac0 <__ieee754_rem_pio2+0x240>
 801191c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011920:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011ac8 <__ieee754_rem_pio2+0x248>
 8011924:	e7eb      	b.n	80118fe <__ieee754_rem_pio2+0x7e>
 8011926:	4b74      	ldr	r3, [pc, #464]	; (8011af8 <__ieee754_rem_pio2+0x278>)
 8011928:	429e      	cmp	r6, r3
 801192a:	dc70      	bgt.n	8011a0e <__ieee754_rem_pio2+0x18e>
 801192c:	f000 fd5c 	bl	80123e8 <fabs>
 8011930:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011934:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011ad0 <__ieee754_rem_pio2+0x250>
 8011938:	eea0 7b06 	vfma.f64	d7, d0, d6
 801193c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011940:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011944:	ee17 0a90 	vmov	r0, s15
 8011948:	eeb1 4b45 	vneg.f64	d4, d5
 801194c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011ab0 <__ieee754_rem_pio2+0x230>
 8011950:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011954:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011ab8 <__ieee754_rem_pio2+0x238>
 8011958:	281f      	cmp	r0, #31
 801195a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801195e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011962:	dc08      	bgt.n	8011976 <__ieee754_rem_pio2+0xf6>
 8011964:	4b65      	ldr	r3, [pc, #404]	; (8011afc <__ieee754_rem_pio2+0x27c>)
 8011966:	1e42      	subs	r2, r0, #1
 8011968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801196c:	42b3      	cmp	r3, r6
 801196e:	d002      	beq.n	8011976 <__ieee754_rem_pio2+0xf6>
 8011970:	ed84 6b00 	vstr	d6, [r4]
 8011974:	e026      	b.n	80119c4 <__ieee754_rem_pio2+0x144>
 8011976:	ee16 3a90 	vmov	r3, s13
 801197a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801197e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011982:	2b10      	cmp	r3, #16
 8011984:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011988:	ddf2      	ble.n	8011970 <__ieee754_rem_pio2+0xf0>
 801198a:	eeb0 6b40 	vmov.f64	d6, d0
 801198e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011ac0 <__ieee754_rem_pio2+0x240>
 8011992:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011ac8 <__ieee754_rem_pio2+0x248>
 8011996:	eea4 6b07 	vfma.f64	d6, d4, d7
 801199a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801199e:	eea4 0b07 	vfma.f64	d0, d4, d7
 80119a2:	eeb0 7b40 	vmov.f64	d7, d0
 80119a6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80119aa:	ee36 3b47 	vsub.f64	d3, d6, d7
 80119ae:	ee13 3a90 	vmov	r3, s7
 80119b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80119b6:	1ad3      	subs	r3, r2, r3
 80119b8:	2b31      	cmp	r3, #49	; 0x31
 80119ba:	dc17      	bgt.n	80119ec <__ieee754_rem_pio2+0x16c>
 80119bc:	eeb0 0b46 	vmov.f64	d0, d6
 80119c0:	ed84 3b00 	vstr	d3, [r4]
 80119c4:	ed94 6b00 	vldr	d6, [r4]
 80119c8:	2d00      	cmp	r5, #0
 80119ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 80119ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 80119d2:	ed84 0b02 	vstr	d0, [r4, #8]
 80119d6:	da83      	bge.n	80118e0 <__ieee754_rem_pio2+0x60>
 80119d8:	eeb1 6b46 	vneg.f64	d6, d6
 80119dc:	eeb1 0b40 	vneg.f64	d0, d0
 80119e0:	ed84 6b00 	vstr	d6, [r4]
 80119e4:	ed84 0b02 	vstr	d0, [r4, #8]
 80119e8:	4240      	negs	r0, r0
 80119ea:	e779      	b.n	80118e0 <__ieee754_rem_pio2+0x60>
 80119ec:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011ad8 <__ieee754_rem_pio2+0x258>
 80119f0:	eeb0 0b46 	vmov.f64	d0, d6
 80119f4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80119f8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80119fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011ae0 <__ieee754_rem_pio2+0x260>
 8011a00:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011a04:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011a08:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011a0c:	e7b0      	b.n	8011970 <__ieee754_rem_pio2+0xf0>
 8011a0e:	4b3c      	ldr	r3, [pc, #240]	; (8011b00 <__ieee754_rem_pio2+0x280>)
 8011a10:	429e      	cmp	r6, r3
 8011a12:	dd06      	ble.n	8011a22 <__ieee754_rem_pio2+0x1a2>
 8011a14:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011a18:	ed80 7b02 	vstr	d7, [r0, #8]
 8011a1c:	ed80 7b00 	vstr	d7, [r0]
 8011a20:	e740      	b.n	80118a4 <__ieee754_rem_pio2+0x24>
 8011a22:	1532      	asrs	r2, r6, #20
 8011a24:	ee10 0a10 	vmov	r0, s0
 8011a28:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011a2c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011a30:	ec41 0b17 	vmov	d7, r0, r1
 8011a34:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a38:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011ae8 <__ieee754_rem_pio2+0x268>
 8011a3c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a48:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a4c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011a50:	a902      	add	r1, sp, #8
 8011a52:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011a56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011a5a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011a5e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011a66:	2603      	movs	r6, #3
 8011a68:	4608      	mov	r0, r1
 8011a6a:	ed91 7b04 	vldr	d7, [r1, #16]
 8011a6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	4633      	mov	r3, r6
 8011a78:	f1a1 0108 	sub.w	r1, r1, #8
 8011a7c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011a80:	d0f3      	beq.n	8011a6a <__ieee754_rem_pio2+0x1ea>
 8011a82:	4920      	ldr	r1, [pc, #128]	; (8011b04 <__ieee754_rem_pio2+0x284>)
 8011a84:	9101      	str	r1, [sp, #4]
 8011a86:	2102      	movs	r1, #2
 8011a88:	9100      	str	r1, [sp, #0]
 8011a8a:	4621      	mov	r1, r4
 8011a8c:	f000 f94c 	bl	8011d28 <__kernel_rem_pio2>
 8011a90:	2d00      	cmp	r5, #0
 8011a92:	f6bf af25 	bge.w	80118e0 <__ieee754_rem_pio2+0x60>
 8011a96:	ed94 7b00 	vldr	d7, [r4]
 8011a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8011a9e:	ed84 7b00 	vstr	d7, [r4]
 8011aa2:	ed94 7b02 	vldr	d7, [r4, #8]
 8011aa6:	eeb1 7b47 	vneg.f64	d7, d7
 8011aaa:	ed84 7b02 	vstr	d7, [r4, #8]
 8011aae:	e79b      	b.n	80119e8 <__ieee754_rem_pio2+0x168>
 8011ab0:	54400000 	.word	0x54400000
 8011ab4:	3ff921fb 	.word	0x3ff921fb
 8011ab8:	1a626331 	.word	0x1a626331
 8011abc:	3dd0b461 	.word	0x3dd0b461
 8011ac0:	1a600000 	.word	0x1a600000
 8011ac4:	3dd0b461 	.word	0x3dd0b461
 8011ac8:	2e037073 	.word	0x2e037073
 8011acc:	3ba3198a 	.word	0x3ba3198a
 8011ad0:	6dc9c883 	.word	0x6dc9c883
 8011ad4:	3fe45f30 	.word	0x3fe45f30
 8011ad8:	2e000000 	.word	0x2e000000
 8011adc:	3ba3198a 	.word	0x3ba3198a
 8011ae0:	252049c1 	.word	0x252049c1
 8011ae4:	397b839a 	.word	0x397b839a
 8011ae8:	00000000 	.word	0x00000000
 8011aec:	41700000 	.word	0x41700000
 8011af0:	3fe921fb 	.word	0x3fe921fb
 8011af4:	4002d97b 	.word	0x4002d97b
 8011af8:	413921fb 	.word	0x413921fb
 8011afc:	080162d8 	.word	0x080162d8
 8011b00:	7fefffff 	.word	0x7fefffff
 8011b04:	08016358 	.word	0x08016358

08011b08 <__ieee754_atan2f>:
 8011b08:	ee10 2a90 	vmov	r2, s1
 8011b0c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011b10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011b14:	b510      	push	{r4, lr}
 8011b16:	eef0 7a40 	vmov.f32	s15, s0
 8011b1a:	dc06      	bgt.n	8011b2a <__ieee754_atan2f+0x22>
 8011b1c:	ee10 0a10 	vmov	r0, s0
 8011b20:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011b24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b28:	dd04      	ble.n	8011b34 <__ieee754_atan2f+0x2c>
 8011b2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8011b32:	bd10      	pop	{r4, pc}
 8011b34:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011b38:	d103      	bne.n	8011b42 <__ieee754_atan2f+0x3a>
 8011b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b3e:	f000 bd5d 	b.w	80125fc <atanf>
 8011b42:	1794      	asrs	r4, r2, #30
 8011b44:	f004 0402 	and.w	r4, r4, #2
 8011b48:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b4c:	b93b      	cbnz	r3, 8011b5e <__ieee754_atan2f+0x56>
 8011b4e:	2c02      	cmp	r4, #2
 8011b50:	d05c      	beq.n	8011c0c <__ieee754_atan2f+0x104>
 8011b52:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011c20 <__ieee754_atan2f+0x118>
 8011b56:	2c03      	cmp	r4, #3
 8011b58:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011b5c:	e7e7      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011b5e:	b939      	cbnz	r1, 8011b70 <__ieee754_atan2f+0x68>
 8011b60:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011c24 <__ieee754_atan2f+0x11c>
 8011b64:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011c28 <__ieee754_atan2f+0x120>
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	fe67 7a80 	vselge.f32	s15, s15, s0
 8011b6e:	e7de      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011b70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011b74:	d110      	bne.n	8011b98 <__ieee754_atan2f+0x90>
 8011b76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011b7e:	d107      	bne.n	8011b90 <__ieee754_atan2f+0x88>
 8011b80:	2c02      	cmp	r4, #2
 8011b82:	d846      	bhi.n	8011c12 <__ieee754_atan2f+0x10a>
 8011b84:	4b29      	ldr	r3, [pc, #164]	; (8011c2c <__ieee754_atan2f+0x124>)
 8011b86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b8a:	edd4 7a00 	vldr	s15, [r4]
 8011b8e:	e7ce      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011b90:	2c02      	cmp	r4, #2
 8011b92:	d841      	bhi.n	8011c18 <__ieee754_atan2f+0x110>
 8011b94:	4b26      	ldr	r3, [pc, #152]	; (8011c30 <__ieee754_atan2f+0x128>)
 8011b96:	e7f6      	b.n	8011b86 <__ieee754_atan2f+0x7e>
 8011b98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011b9c:	d0e0      	beq.n	8011b60 <__ieee754_atan2f+0x58>
 8011b9e:	1a5b      	subs	r3, r3, r1
 8011ba0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011ba4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011ba8:	da1a      	bge.n	8011be0 <__ieee754_atan2f+0xd8>
 8011baa:	2a00      	cmp	r2, #0
 8011bac:	da01      	bge.n	8011bb2 <__ieee754_atan2f+0xaa>
 8011bae:	313c      	adds	r1, #60	; 0x3c
 8011bb0:	db19      	blt.n	8011be6 <__ieee754_atan2f+0xde>
 8011bb2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011bb6:	f000 fdf5 	bl	80127a4 <fabsf>
 8011bba:	f000 fd1f 	bl	80125fc <atanf>
 8011bbe:	eef0 7a40 	vmov.f32	s15, s0
 8011bc2:	2c01      	cmp	r4, #1
 8011bc4:	d012      	beq.n	8011bec <__ieee754_atan2f+0xe4>
 8011bc6:	2c02      	cmp	r4, #2
 8011bc8:	d017      	beq.n	8011bfa <__ieee754_atan2f+0xf2>
 8011bca:	2c00      	cmp	r4, #0
 8011bcc:	d0af      	beq.n	8011b2e <__ieee754_atan2f+0x26>
 8011bce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011c34 <__ieee754_atan2f+0x12c>
 8011bd2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011bd6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011c38 <__ieee754_atan2f+0x130>
 8011bda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011bde:	e7a6      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011be0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011c24 <__ieee754_atan2f+0x11c>
 8011be4:	e7ed      	b.n	8011bc2 <__ieee754_atan2f+0xba>
 8011be6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011c3c <__ieee754_atan2f+0x134>
 8011bea:	e7ea      	b.n	8011bc2 <__ieee754_atan2f+0xba>
 8011bec:	ee17 3a90 	vmov	r3, s15
 8011bf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011bf4:	ee07 3a90 	vmov	s15, r3
 8011bf8:	e799      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011bfa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011c34 <__ieee754_atan2f+0x12c>
 8011bfe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011c02:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011c38 <__ieee754_atan2f+0x130>
 8011c06:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011c0a:	e790      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011c0c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011c38 <__ieee754_atan2f+0x130>
 8011c10:	e78d      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011c12:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011c40 <__ieee754_atan2f+0x138>
 8011c16:	e78a      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011c18:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011c3c <__ieee754_atan2f+0x134>
 8011c1c:	e787      	b.n	8011b2e <__ieee754_atan2f+0x26>
 8011c1e:	bf00      	nop
 8011c20:	c0490fdb 	.word	0xc0490fdb
 8011c24:	3fc90fdb 	.word	0x3fc90fdb
 8011c28:	bfc90fdb 	.word	0xbfc90fdb
 8011c2c:	08016460 	.word	0x08016460
 8011c30:	0801646c 	.word	0x0801646c
 8011c34:	33bbbd2e 	.word	0x33bbbd2e
 8011c38:	40490fdb 	.word	0x40490fdb
 8011c3c:	00000000 	.word	0x00000000
 8011c40:	3f490fdb 	.word	0x3f490fdb

08011c44 <__ieee754_sqrtf>:
 8011c44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011c48:	4770      	bx	lr
 8011c4a:	0000      	movs	r0, r0
 8011c4c:	0000      	movs	r0, r0
	...

08011c50 <__kernel_cos>:
 8011c50:	ee10 1a90 	vmov	r1, s1
 8011c54:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011c5c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011c60:	da05      	bge.n	8011c6e <__kernel_cos+0x1e>
 8011c62:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011c66:	ee17 3a90 	vmov	r3, s15
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d03d      	beq.n	8011cea <__kernel_cos+0x9a>
 8011c6e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011c72:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011cf0 <__kernel_cos+0xa0>
 8011c76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011cf8 <__kernel_cos+0xa8>
 8011c7a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011c7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d00 <__kernel_cos+0xb0>
 8011c82:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011c86:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011d08 <__kernel_cos+0xb8>
 8011c8a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011c8e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011d10 <__kernel_cos+0xc0>
 8011c92:	4b23      	ldr	r3, [pc, #140]	; (8011d20 <__kernel_cos+0xd0>)
 8011c94:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011c98:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011d18 <__kernel_cos+0xc8>
 8011c9c:	4299      	cmp	r1, r3
 8011c9e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011ca2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011ca6:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011caa:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011cae:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011cb2:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011cb6:	dc04      	bgt.n	8011cc2 <__kernel_cos+0x72>
 8011cb8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011cbc:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011cc0:	4770      	bx	lr
 8011cc2:	4b18      	ldr	r3, [pc, #96]	; (8011d24 <__kernel_cos+0xd4>)
 8011cc4:	4299      	cmp	r1, r3
 8011cc6:	dc0d      	bgt.n	8011ce4 <__kernel_cos+0x94>
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011cce:	ec43 2b15 	vmov	d5, r2, r3
 8011cd2:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011cd6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011cda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011cde:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011ce2:	4770      	bx	lr
 8011ce4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011ce8:	e7f3      	b.n	8011cd2 <__kernel_cos+0x82>
 8011cea:	eeb0 0b44 	vmov.f64	d0, d4
 8011cee:	4770      	bx	lr
 8011cf0:	be8838d4 	.word	0xbe8838d4
 8011cf4:	bda8fae9 	.word	0xbda8fae9
 8011cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011cfc:	3e21ee9e 	.word	0x3e21ee9e
 8011d00:	809c52ad 	.word	0x809c52ad
 8011d04:	be927e4f 	.word	0xbe927e4f
 8011d08:	19cb1590 	.word	0x19cb1590
 8011d0c:	3efa01a0 	.word	0x3efa01a0
 8011d10:	16c15177 	.word	0x16c15177
 8011d14:	bf56c16c 	.word	0xbf56c16c
 8011d18:	5555554c 	.word	0x5555554c
 8011d1c:	3fa55555 	.word	0x3fa55555
 8011d20:	3fd33332 	.word	0x3fd33332
 8011d24:	3fe90000 	.word	0x3fe90000

08011d28 <__kernel_rem_pio2>:
 8011d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2c:	ed2d 8b06 	vpush	{d8-d10}
 8011d30:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011d34:	460f      	mov	r7, r1
 8011d36:	9002      	str	r0, [sp, #8]
 8011d38:	49c5      	ldr	r1, [pc, #788]	; (8012050 <__kernel_rem_pio2+0x328>)
 8011d3a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011d3c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011d40:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011d44:	9301      	str	r3, [sp, #4]
 8011d46:	f112 0f14 	cmn.w	r2, #20
 8011d4a:	bfa8      	it	ge
 8011d4c:	2018      	movge	r0, #24
 8011d4e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011d52:	bfb8      	it	lt
 8011d54:	2000      	movlt	r0, #0
 8011d56:	f06f 0417 	mvn.w	r4, #23
 8011d5a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8012038 <__kernel_rem_pio2+0x310>
 8011d5e:	bfa4      	itt	ge
 8011d60:	f1a2 0a03 	subge.w	sl, r2, #3
 8011d64:	fb9a f0f0 	sdivge	r0, sl, r0
 8011d68:	fb00 4404 	mla	r4, r0, r4, r4
 8011d6c:	1a46      	subs	r6, r0, r1
 8011d6e:	4414      	add	r4, r2
 8011d70:	eb09 0c01 	add.w	ip, r9, r1
 8011d74:	ad1a      	add	r5, sp, #104	; 0x68
 8011d76:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	4562      	cmp	r2, ip
 8011d7e:	dd10      	ble.n	8011da2 <__kernel_rem_pio2+0x7a>
 8011d80:	9a01      	ldr	r2, [sp, #4]
 8011d82:	ab1a      	add	r3, sp, #104	; 0x68
 8011d84:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011d88:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8011d8c:	f04f 0c00 	mov.w	ip, #0
 8011d90:	45cc      	cmp	ip, r9
 8011d92:	dc26      	bgt.n	8011de2 <__kernel_rem_pio2+0xba>
 8011d94:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8012038 <__kernel_rem_pio2+0x310>
 8011d98:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011d9c:	4616      	mov	r6, r2
 8011d9e:	2500      	movs	r5, #0
 8011da0:	e015      	b.n	8011dce <__kernel_rem_pio2+0xa6>
 8011da2:	42d6      	cmn	r6, r2
 8011da4:	d409      	bmi.n	8011dba <__kernel_rem_pio2+0x92>
 8011da6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8011daa:	ee07 3a90 	vmov	s15, r3
 8011dae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011db2:	eca5 7b02 	vstmia	r5!, {d7}
 8011db6:	3201      	adds	r2, #1
 8011db8:	e7e0      	b.n	8011d7c <__kernel_rem_pio2+0x54>
 8011dba:	eeb0 7b46 	vmov.f64	d7, d6
 8011dbe:	e7f8      	b.n	8011db2 <__kernel_rem_pio2+0x8a>
 8011dc0:	ecb8 5b02 	vldmia	r8!, {d5}
 8011dc4:	ed96 6b00 	vldr	d6, [r6]
 8011dc8:	3501      	adds	r5, #1
 8011dca:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011dce:	428d      	cmp	r5, r1
 8011dd0:	f1a6 0608 	sub.w	r6, r6, #8
 8011dd4:	ddf4      	ble.n	8011dc0 <__kernel_rem_pio2+0x98>
 8011dd6:	ecaa 7b02 	vstmia	sl!, {d7}
 8011dda:	f10c 0c01 	add.w	ip, ip, #1
 8011dde:	3208      	adds	r2, #8
 8011de0:	e7d6      	b.n	8011d90 <__kernel_rem_pio2+0x68>
 8011de2:	ab06      	add	r3, sp, #24
 8011de4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8012040 <__kernel_rem_pio2+0x318>
 8011de8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8012048 <__kernel_rem_pio2+0x320>
 8011dec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011df0:	9303      	str	r3, [sp, #12]
 8011df2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8011df6:	464d      	mov	r5, r9
 8011df8:	00eb      	lsls	r3, r5, #3
 8011dfa:	9304      	str	r3, [sp, #16]
 8011dfc:	ab92      	add	r3, sp, #584	; 0x248
 8011dfe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011e02:	f10d 0b18 	add.w	fp, sp, #24
 8011e06:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011e08:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011e0c:	465e      	mov	r6, fp
 8011e0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011e12:	4628      	mov	r0, r5
 8011e14:	2800      	cmp	r0, #0
 8011e16:	f1a2 0208 	sub.w	r2, r2, #8
 8011e1a:	dc4c      	bgt.n	8011eb6 <__kernel_rem_pio2+0x18e>
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	9105      	str	r1, [sp, #20]
 8011e20:	f000 fb62 	bl	80124e8 <scalbn>
 8011e24:	eeb0 8b40 	vmov.f64	d8, d0
 8011e28:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011e2c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011e30:	f000 fae6 	bl	8012400 <floor>
 8011e34:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011e38:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011e3c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011e40:	2c00      	cmp	r4, #0
 8011e42:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011e46:	ee17 8a90 	vmov	r8, s15
 8011e4a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011e4e:	9905      	ldr	r1, [sp, #20]
 8011e50:	dd43      	ble.n	8011eda <__kernel_rem_pio2+0x1b2>
 8011e52:	1e68      	subs	r0, r5, #1
 8011e54:	ab06      	add	r3, sp, #24
 8011e56:	f1c4 0c18 	rsb	ip, r4, #24
 8011e5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011e5e:	fa46 f20c 	asr.w	r2, r6, ip
 8011e62:	4490      	add	r8, r2
 8011e64:	fa02 f20c 	lsl.w	r2, r2, ip
 8011e68:	1ab6      	subs	r6, r6, r2
 8011e6a:	f1c4 0217 	rsb	r2, r4, #23
 8011e6e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011e72:	4116      	asrs	r6, r2
 8011e74:	2e00      	cmp	r6, #0
 8011e76:	dd3f      	ble.n	8011ef8 <__kernel_rem_pio2+0x1d0>
 8011e78:	f04f 0c00 	mov.w	ip, #0
 8011e7c:	f108 0801 	add.w	r8, r8, #1
 8011e80:	4660      	mov	r0, ip
 8011e82:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011e86:	4565      	cmp	r5, ip
 8011e88:	dc6e      	bgt.n	8011f68 <__kernel_rem_pio2+0x240>
 8011e8a:	2c00      	cmp	r4, #0
 8011e8c:	dd04      	ble.n	8011e98 <__kernel_rem_pio2+0x170>
 8011e8e:	2c01      	cmp	r4, #1
 8011e90:	d07f      	beq.n	8011f92 <__kernel_rem_pio2+0x26a>
 8011e92:	2c02      	cmp	r4, #2
 8011e94:	f000 8087 	beq.w	8011fa6 <__kernel_rem_pio2+0x27e>
 8011e98:	2e02      	cmp	r6, #2
 8011e9a:	d12d      	bne.n	8011ef8 <__kernel_rem_pio2+0x1d0>
 8011e9c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011ea0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011ea4:	b340      	cbz	r0, 8011ef8 <__kernel_rem_pio2+0x1d0>
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	9105      	str	r1, [sp, #20]
 8011eaa:	f000 fb1d 	bl	80124e8 <scalbn>
 8011eae:	9905      	ldr	r1, [sp, #20]
 8011eb0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011eb4:	e020      	b.n	8011ef8 <__kernel_rem_pio2+0x1d0>
 8011eb6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011eba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011ebe:	3801      	subs	r0, #1
 8011ec0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011ec4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011ec8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011ecc:	eca6 0a01 	vstmia	r6!, {s0}
 8011ed0:	ed92 0b00 	vldr	d0, [r2]
 8011ed4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011ed8:	e79c      	b.n	8011e14 <__kernel_rem_pio2+0xec>
 8011eda:	d105      	bne.n	8011ee8 <__kernel_rem_pio2+0x1c0>
 8011edc:	1e6a      	subs	r2, r5, #1
 8011ede:	ab06      	add	r3, sp, #24
 8011ee0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011ee4:	15f6      	asrs	r6, r6, #23
 8011ee6:	e7c5      	b.n	8011e74 <__kernel_rem_pio2+0x14c>
 8011ee8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011eec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef4:	da36      	bge.n	8011f64 <__kernel_rem_pio2+0x23c>
 8011ef6:	2600      	movs	r6, #0
 8011ef8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f00:	f040 80aa 	bne.w	8012058 <__kernel_rem_pio2+0x330>
 8011f04:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011f08:	4658      	mov	r0, fp
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	4548      	cmp	r0, r9
 8011f0e:	da52      	bge.n	8011fb6 <__kernel_rem_pio2+0x28e>
 8011f10:	2a00      	cmp	r2, #0
 8011f12:	f000 8081 	beq.w	8012018 <__kernel_rem_pio2+0x2f0>
 8011f16:	ab06      	add	r3, sp, #24
 8011f18:	3c18      	subs	r4, #24
 8011f1a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f000 8087 	beq.w	8012032 <__kernel_rem_pio2+0x30a>
 8011f24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011f28:	4620      	mov	r0, r4
 8011f2a:	f000 fadd 	bl	80124e8 <scalbn>
 8011f2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011f32:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8012040 <__kernel_rem_pio2+0x318>
 8011f36:	a96a      	add	r1, sp, #424	; 0x1a8
 8011f38:	f103 0208 	add.w	r2, r3, #8
 8011f3c:	1888      	adds	r0, r1, r2
 8011f3e:	4659      	mov	r1, fp
 8011f40:	2900      	cmp	r1, #0
 8011f42:	f280 80b7 	bge.w	80120b4 <__kernel_rem_pio2+0x38c>
 8011f46:	4659      	mov	r1, fp
 8011f48:	2900      	cmp	r1, #0
 8011f4a:	f2c0 80d5 	blt.w	80120f8 <__kernel_rem_pio2+0x3d0>
 8011f4e:	a86a      	add	r0, sp, #424	; 0x1a8
 8011f50:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011f54:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8012038 <__kernel_rem_pio2+0x310>
 8011f58:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8012054 <__kernel_rem_pio2+0x32c>
 8011f5c:	2400      	movs	r4, #0
 8011f5e:	ebab 0001 	sub.w	r0, fp, r1
 8011f62:	e0be      	b.n	80120e2 <__kernel_rem_pio2+0x3ba>
 8011f64:	2602      	movs	r6, #2
 8011f66:	e787      	b.n	8011e78 <__kernel_rem_pio2+0x150>
 8011f68:	f8db 2000 	ldr.w	r2, [fp]
 8011f6c:	b958      	cbnz	r0, 8011f86 <__kernel_rem_pio2+0x25e>
 8011f6e:	b122      	cbz	r2, 8011f7a <__kernel_rem_pio2+0x252>
 8011f70:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011f74:	f8cb 2000 	str.w	r2, [fp]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	f10c 0c01 	add.w	ip, ip, #1
 8011f7e:	f10b 0b04 	add.w	fp, fp, #4
 8011f82:	4610      	mov	r0, r2
 8011f84:	e77f      	b.n	8011e86 <__kernel_rem_pio2+0x15e>
 8011f86:	ebae 0202 	sub.w	r2, lr, r2
 8011f8a:	f8cb 2000 	str.w	r2, [fp]
 8011f8e:	4602      	mov	r2, r0
 8011f90:	e7f3      	b.n	8011f7a <__kernel_rem_pio2+0x252>
 8011f92:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011f96:	ab06      	add	r3, sp, #24
 8011f98:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011f9c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011fa0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011fa4:	e778      	b.n	8011e98 <__kernel_rem_pio2+0x170>
 8011fa6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011faa:	ab06      	add	r3, sp, #24
 8011fac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011fb0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011fb4:	e7f4      	b.n	8011fa0 <__kernel_rem_pio2+0x278>
 8011fb6:	ab06      	add	r3, sp, #24
 8011fb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011fbc:	3801      	subs	r0, #1
 8011fbe:	431a      	orrs	r2, r3
 8011fc0:	e7a4      	b.n	8011f0c <__kernel_rem_pio2+0x1e4>
 8011fc2:	f10c 0c01 	add.w	ip, ip, #1
 8011fc6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d0f9      	beq.n	8011fc2 <__kernel_rem_pio2+0x29a>
 8011fce:	9b04      	ldr	r3, [sp, #16]
 8011fd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011fd4:	eb0d 0203 	add.w	r2, sp, r3
 8011fd8:	9b01      	ldr	r3, [sp, #4]
 8011fda:	18e8      	adds	r0, r5, r3
 8011fdc:	ab1a      	add	r3, sp, #104	; 0x68
 8011fde:	1c6e      	adds	r6, r5, #1
 8011fe0:	3a98      	subs	r2, #152	; 0x98
 8011fe2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011fe6:	4465      	add	r5, ip
 8011fe8:	42b5      	cmp	r5, r6
 8011fea:	f6ff af05 	blt.w	8011df8 <__kernel_rem_pio2+0xd0>
 8011fee:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011ff2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011ff6:	ee07 3a90 	vmov	s15, r3
 8011ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011ffe:	f04f 0c00 	mov.w	ip, #0
 8012002:	eca0 7b02 	vstmia	r0!, {d7}
 8012006:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012038 <__kernel_rem_pio2+0x310>
 801200a:	4680      	mov	r8, r0
 801200c:	458c      	cmp	ip, r1
 801200e:	dd07      	ble.n	8012020 <__kernel_rem_pio2+0x2f8>
 8012010:	eca2 7b02 	vstmia	r2!, {d7}
 8012014:	3601      	adds	r6, #1
 8012016:	e7e7      	b.n	8011fe8 <__kernel_rem_pio2+0x2c0>
 8012018:	9a03      	ldr	r2, [sp, #12]
 801201a:	f04f 0c01 	mov.w	ip, #1
 801201e:	e7d2      	b.n	8011fc6 <__kernel_rem_pio2+0x29e>
 8012020:	ecbe 5b02 	vldmia	lr!, {d5}
 8012024:	ed38 6b02 	vldmdb	r8!, {d6}
 8012028:	f10c 0c01 	add.w	ip, ip, #1
 801202c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012030:	e7ec      	b.n	801200c <__kernel_rem_pio2+0x2e4>
 8012032:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012036:	e76e      	b.n	8011f16 <__kernel_rem_pio2+0x1ee>
	...
 8012044:	3e700000 	.word	0x3e700000
 8012048:	00000000 	.word	0x00000000
 801204c:	41700000 	.word	0x41700000
 8012050:	08016d28 	.word	0x08016d28
 8012054:	08016ce8 	.word	0x08016ce8
 8012058:	4260      	negs	r0, r4
 801205a:	eeb0 0b48 	vmov.f64	d0, d8
 801205e:	f000 fa43 	bl	80124e8 <scalbn>
 8012062:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012240 <__kernel_rem_pio2+0x518>
 8012066:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	db18      	blt.n	80120a2 <__kernel_rem_pio2+0x37a>
 8012070:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012248 <__kernel_rem_pio2+0x520>
 8012074:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012078:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801207c:	aa06      	add	r2, sp, #24
 801207e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012082:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012086:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801208a:	f105 0b01 	add.w	fp, r5, #1
 801208e:	ee10 3a10 	vmov	r3, s0
 8012092:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012096:	ee17 3a10 	vmov	r3, s14
 801209a:	3418      	adds	r4, #24
 801209c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80120a0:	e740      	b.n	8011f24 <__kernel_rem_pio2+0x1fc>
 80120a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80120a6:	aa06      	add	r2, sp, #24
 80120a8:	ee10 3a10 	vmov	r3, s0
 80120ac:	46ab      	mov	fp, r5
 80120ae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80120b2:	e737      	b.n	8011f24 <__kernel_rem_pio2+0x1fc>
 80120b4:	ac06      	add	r4, sp, #24
 80120b6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80120ba:	9401      	str	r4, [sp, #4]
 80120bc:	ee07 4a90 	vmov	s15, r4
 80120c0:	3901      	subs	r1, #1
 80120c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80120c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80120ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 80120ce:	ed20 7b02 	vstmdb	r0!, {d7}
 80120d2:	e735      	b.n	8011f40 <__kernel_rem_pio2+0x218>
 80120d4:	ecbc 5b02 	vldmia	ip!, {d5}
 80120d8:	ecb5 6b02 	vldmia	r5!, {d6}
 80120dc:	3401      	adds	r4, #1
 80120de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80120e2:	454c      	cmp	r4, r9
 80120e4:	dc01      	bgt.n	80120ea <__kernel_rem_pio2+0x3c2>
 80120e6:	4284      	cmp	r4, r0
 80120e8:	ddf4      	ble.n	80120d4 <__kernel_rem_pio2+0x3ac>
 80120ea:	ac42      	add	r4, sp, #264	; 0x108
 80120ec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80120f0:	ed80 7b00 	vstr	d7, [r0]
 80120f4:	3901      	subs	r1, #1
 80120f6:	e727      	b.n	8011f48 <__kernel_rem_pio2+0x220>
 80120f8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80120fa:	2902      	cmp	r1, #2
 80120fc:	dc0a      	bgt.n	8012114 <__kernel_rem_pio2+0x3ec>
 80120fe:	2900      	cmp	r1, #0
 8012100:	dc2c      	bgt.n	801215c <__kernel_rem_pio2+0x434>
 8012102:	d045      	beq.n	8012190 <__kernel_rem_pio2+0x468>
 8012104:	f008 0007 	and.w	r0, r8, #7
 8012108:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801210c:	ecbd 8b06 	vpop	{d8-d10}
 8012110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012114:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012116:	2a03      	cmp	r2, #3
 8012118:	d1f4      	bne.n	8012104 <__kernel_rem_pio2+0x3dc>
 801211a:	aa42      	add	r2, sp, #264	; 0x108
 801211c:	4413      	add	r3, r2
 801211e:	461a      	mov	r2, r3
 8012120:	4619      	mov	r1, r3
 8012122:	4658      	mov	r0, fp
 8012124:	2800      	cmp	r0, #0
 8012126:	f1a1 0108 	sub.w	r1, r1, #8
 801212a:	dc54      	bgt.n	80121d6 <__kernel_rem_pio2+0x4ae>
 801212c:	4659      	mov	r1, fp
 801212e:	2901      	cmp	r1, #1
 8012130:	f1a2 0208 	sub.w	r2, r2, #8
 8012134:	dc5f      	bgt.n	80121f6 <__kernel_rem_pio2+0x4ce>
 8012136:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012250 <__kernel_rem_pio2+0x528>
 801213a:	3308      	adds	r3, #8
 801213c:	f1bb 0f01 	cmp.w	fp, #1
 8012140:	dc69      	bgt.n	8012216 <__kernel_rem_pio2+0x4ee>
 8012142:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012146:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801214a:	2e00      	cmp	r6, #0
 801214c:	d16a      	bne.n	8012224 <__kernel_rem_pio2+0x4fc>
 801214e:	ed87 5b00 	vstr	d5, [r7]
 8012152:	ed87 6b02 	vstr	d6, [r7, #8]
 8012156:	ed87 7b04 	vstr	d7, [r7, #16]
 801215a:	e7d3      	b.n	8012104 <__kernel_rem_pio2+0x3dc>
 801215c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012250 <__kernel_rem_pio2+0x528>
 8012160:	ab42      	add	r3, sp, #264	; 0x108
 8012162:	441a      	add	r2, r3
 8012164:	465b      	mov	r3, fp
 8012166:	2b00      	cmp	r3, #0
 8012168:	da26      	bge.n	80121b8 <__kernel_rem_pio2+0x490>
 801216a:	b35e      	cbz	r6, 80121c4 <__kernel_rem_pio2+0x49c>
 801216c:	eeb1 7b46 	vneg.f64	d7, d6
 8012170:	ed87 7b00 	vstr	d7, [r7]
 8012174:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012178:	aa44      	add	r2, sp, #272	; 0x110
 801217a:	2301      	movs	r3, #1
 801217c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012180:	459b      	cmp	fp, r3
 8012182:	da22      	bge.n	80121ca <__kernel_rem_pio2+0x4a2>
 8012184:	b10e      	cbz	r6, 801218a <__kernel_rem_pio2+0x462>
 8012186:	eeb1 7b47 	vneg.f64	d7, d7
 801218a:	ed87 7b02 	vstr	d7, [r7, #8]
 801218e:	e7b9      	b.n	8012104 <__kernel_rem_pio2+0x3dc>
 8012190:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012250 <__kernel_rem_pio2+0x528>
 8012194:	ab42      	add	r3, sp, #264	; 0x108
 8012196:	441a      	add	r2, r3
 8012198:	f1bb 0f00 	cmp.w	fp, #0
 801219c:	da05      	bge.n	80121aa <__kernel_rem_pio2+0x482>
 801219e:	b10e      	cbz	r6, 80121a4 <__kernel_rem_pio2+0x47c>
 80121a0:	eeb1 7b47 	vneg.f64	d7, d7
 80121a4:	ed87 7b00 	vstr	d7, [r7]
 80121a8:	e7ac      	b.n	8012104 <__kernel_rem_pio2+0x3dc>
 80121aa:	ed32 6b02 	vldmdb	r2!, {d6}
 80121ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80121b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121b6:	e7ef      	b.n	8012198 <__kernel_rem_pio2+0x470>
 80121b8:	ed32 7b02 	vldmdb	r2!, {d7}
 80121bc:	3b01      	subs	r3, #1
 80121be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80121c2:	e7d0      	b.n	8012166 <__kernel_rem_pio2+0x43e>
 80121c4:	eeb0 7b46 	vmov.f64	d7, d6
 80121c8:	e7d2      	b.n	8012170 <__kernel_rem_pio2+0x448>
 80121ca:	ecb2 6b02 	vldmia	r2!, {d6}
 80121ce:	3301      	adds	r3, #1
 80121d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80121d4:	e7d4      	b.n	8012180 <__kernel_rem_pio2+0x458>
 80121d6:	ed91 7b00 	vldr	d7, [r1]
 80121da:	ed91 5b02 	vldr	d5, [r1, #8]
 80121de:	3801      	subs	r0, #1
 80121e0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80121e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80121e8:	ed81 6b00 	vstr	d6, [r1]
 80121ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80121f0:	ed81 7b02 	vstr	d7, [r1, #8]
 80121f4:	e796      	b.n	8012124 <__kernel_rem_pio2+0x3fc>
 80121f6:	ed92 7b00 	vldr	d7, [r2]
 80121fa:	ed92 5b02 	vldr	d5, [r2, #8]
 80121fe:	3901      	subs	r1, #1
 8012200:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012204:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012208:	ed82 6b00 	vstr	d6, [r2]
 801220c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012210:	ed82 7b02 	vstr	d7, [r2, #8]
 8012214:	e78b      	b.n	801212e <__kernel_rem_pio2+0x406>
 8012216:	ed33 6b02 	vldmdb	r3!, {d6}
 801221a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801221e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012222:	e78b      	b.n	801213c <__kernel_rem_pio2+0x414>
 8012224:	eeb1 5b45 	vneg.f64	d5, d5
 8012228:	eeb1 6b46 	vneg.f64	d6, d6
 801222c:	ed87 5b00 	vstr	d5, [r7]
 8012230:	eeb1 7b47 	vneg.f64	d7, d7
 8012234:	ed87 6b02 	vstr	d6, [r7, #8]
 8012238:	e78d      	b.n	8012156 <__kernel_rem_pio2+0x42e>
 801223a:	bf00      	nop
 801223c:	f3af 8000 	nop.w
 8012240:	00000000 	.word	0x00000000
 8012244:	41700000 	.word	0x41700000
 8012248:	00000000 	.word	0x00000000
 801224c:	3e700000 	.word	0x3e700000
	...

08012258 <__kernel_sin>:
 8012258:	ee10 3a90 	vmov	r3, s1
 801225c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012260:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012264:	da04      	bge.n	8012270 <__kernel_sin+0x18>
 8012266:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801226a:	ee17 3a90 	vmov	r3, s15
 801226e:	b35b      	cbz	r3, 80122c8 <__kernel_sin+0x70>
 8012270:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012274:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012278:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80122d0 <__kernel_sin+0x78>
 801227c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80122d8 <__kernel_sin+0x80>
 8012280:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012284:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80122e0 <__kernel_sin+0x88>
 8012288:	eea4 7b06 	vfma.f64	d7, d4, d6
 801228c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80122e8 <__kernel_sin+0x90>
 8012290:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012294:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80122f0 <__kernel_sin+0x98>
 8012298:	eea4 7b06 	vfma.f64	d7, d4, d6
 801229c:	b930      	cbnz	r0, 80122ac <__kernel_sin+0x54>
 801229e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80122f8 <__kernel_sin+0xa0>
 80122a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80122a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80122aa:	4770      	bx	lr
 80122ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80122b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80122b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80122b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80122bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012300 <__kernel_sin+0xa8>
 80122c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80122c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	f3af 8000 	nop.w
 80122d0:	5acfd57c 	.word	0x5acfd57c
 80122d4:	3de5d93a 	.word	0x3de5d93a
 80122d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80122dc:	be5ae5e6 	.word	0xbe5ae5e6
 80122e0:	57b1fe7d 	.word	0x57b1fe7d
 80122e4:	3ec71de3 	.word	0x3ec71de3
 80122e8:	19c161d5 	.word	0x19c161d5
 80122ec:	bf2a01a0 	.word	0xbf2a01a0
 80122f0:	1110f8a6 	.word	0x1110f8a6
 80122f4:	3f811111 	.word	0x3f811111
 80122f8:	55555549 	.word	0x55555549
 80122fc:	bfc55555 	.word	0xbfc55555
 8012300:	55555549 	.word	0x55555549
 8012304:	3fc55555 	.word	0x3fc55555

08012308 <with_errno>:
 8012308:	b513      	push	{r0, r1, r4, lr}
 801230a:	4604      	mov	r4, r0
 801230c:	ed8d 0b00 	vstr	d0, [sp]
 8012310:	f000 fa50 	bl	80127b4 <__errno>
 8012314:	ed9d 0b00 	vldr	d0, [sp]
 8012318:	6004      	str	r4, [r0, #0]
 801231a:	b002      	add	sp, #8
 801231c:	bd10      	pop	{r4, pc}

0801231e <xflow>:
 801231e:	b082      	sub	sp, #8
 8012320:	b158      	cbz	r0, 801233a <xflow+0x1c>
 8012322:	eeb1 7b40 	vneg.f64	d7, d0
 8012326:	ed8d 7b00 	vstr	d7, [sp]
 801232a:	ed9d 7b00 	vldr	d7, [sp]
 801232e:	2022      	movs	r0, #34	; 0x22
 8012330:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012334:	b002      	add	sp, #8
 8012336:	f7ff bfe7 	b.w	8012308 <with_errno>
 801233a:	eeb0 7b40 	vmov.f64	d7, d0
 801233e:	e7f2      	b.n	8012326 <xflow+0x8>

08012340 <__math_uflow>:
 8012340:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012348 <__math_uflow+0x8>
 8012344:	f7ff bfeb 	b.w	801231e <xflow>
 8012348:	00000000 	.word	0x00000000
 801234c:	10000000 	.word	0x10000000

08012350 <__math_oflow>:
 8012350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012358 <__math_oflow+0x8>
 8012354:	f7ff bfe3 	b.w	801231e <xflow>
 8012358:	00000000 	.word	0x00000000
 801235c:	70000000 	.word	0x70000000

08012360 <__math_divzero>:
 8012360:	b082      	sub	sp, #8
 8012362:	2800      	cmp	r0, #0
 8012364:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012368:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801236c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012370:	ed8d 7b00 	vstr	d7, [sp]
 8012374:	ed9d 0b00 	vldr	d0, [sp]
 8012378:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012388 <__math_divzero+0x28>
 801237c:	2022      	movs	r0, #34	; 0x22
 801237e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012382:	b002      	add	sp, #8
 8012384:	f7ff bfc0 	b.w	8012308 <with_errno>
	...

08012390 <__math_invalid>:
 8012390:	eeb0 7b40 	vmov.f64	d7, d0
 8012394:	eeb4 7b47 	vcmp.f64	d7, d7
 8012398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801239c:	ee30 6b40 	vsub.f64	d6, d0, d0
 80123a0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80123a4:	d602      	bvs.n	80123ac <__math_invalid+0x1c>
 80123a6:	2021      	movs	r0, #33	; 0x21
 80123a8:	f7ff bfae 	b.w	8012308 <with_errno>
 80123ac:	4770      	bx	lr

080123ae <__math_check_uflow>:
 80123ae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80123b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b6:	d102      	bne.n	80123be <__math_check_uflow+0x10>
 80123b8:	2022      	movs	r0, #34	; 0x22
 80123ba:	f7ff bfa5 	b.w	8012308 <with_errno>
 80123be:	4770      	bx	lr

080123c0 <__math_check_oflow>:
 80123c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80123e0 <__math_check_oflow+0x20>
 80123c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80123c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80123cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d0:	dd02      	ble.n	80123d8 <__math_check_oflow+0x18>
 80123d2:	2022      	movs	r0, #34	; 0x22
 80123d4:	f7ff bf98 	b.w	8012308 <with_errno>
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	ffffffff 	.word	0xffffffff
 80123e4:	7fefffff 	.word	0x7fefffff

080123e8 <fabs>:
 80123e8:	ec51 0b10 	vmov	r0, r1, d0
 80123ec:	ee10 2a10 	vmov	r2, s0
 80123f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123f4:	ec43 2b10 	vmov	d0, r2, r3
 80123f8:	4770      	bx	lr
 80123fa:	0000      	movs	r0, r0
 80123fc:	0000      	movs	r0, r0
	...

08012400 <floor>:
 8012400:	ee10 1a90 	vmov	r1, s1
 8012404:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012408:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801240c:	2b13      	cmp	r3, #19
 801240e:	b530      	push	{r4, r5, lr}
 8012410:	ee10 0a10 	vmov	r0, s0
 8012414:	ee10 5a10 	vmov	r5, s0
 8012418:	dc31      	bgt.n	801247e <floor+0x7e>
 801241a:	2b00      	cmp	r3, #0
 801241c:	da15      	bge.n	801244a <floor+0x4a>
 801241e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80124d8 <floor+0xd8>
 8012422:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012426:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242e:	dd07      	ble.n	8012440 <floor+0x40>
 8012430:	2900      	cmp	r1, #0
 8012432:	da4e      	bge.n	80124d2 <floor+0xd2>
 8012434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012438:	4318      	orrs	r0, r3
 801243a:	d001      	beq.n	8012440 <floor+0x40>
 801243c:	4928      	ldr	r1, [pc, #160]	; (80124e0 <floor+0xe0>)
 801243e:	2000      	movs	r0, #0
 8012440:	460b      	mov	r3, r1
 8012442:	4602      	mov	r2, r0
 8012444:	ec43 2b10 	vmov	d0, r2, r3
 8012448:	e020      	b.n	801248c <floor+0x8c>
 801244a:	4a26      	ldr	r2, [pc, #152]	; (80124e4 <floor+0xe4>)
 801244c:	411a      	asrs	r2, r3
 801244e:	ea01 0402 	and.w	r4, r1, r2
 8012452:	4304      	orrs	r4, r0
 8012454:	d01a      	beq.n	801248c <floor+0x8c>
 8012456:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80124d8 <floor+0xd8>
 801245a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801245e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012466:	ddeb      	ble.n	8012440 <floor+0x40>
 8012468:	2900      	cmp	r1, #0
 801246a:	bfbe      	ittt	lt
 801246c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012470:	fa40 f303 	asrlt.w	r3, r0, r3
 8012474:	18c9      	addlt	r1, r1, r3
 8012476:	ea21 0102 	bic.w	r1, r1, r2
 801247a:	2000      	movs	r0, #0
 801247c:	e7e0      	b.n	8012440 <floor+0x40>
 801247e:	2b33      	cmp	r3, #51	; 0x33
 8012480:	dd05      	ble.n	801248e <floor+0x8e>
 8012482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012486:	d101      	bne.n	801248c <floor+0x8c>
 8012488:	ee30 0b00 	vadd.f64	d0, d0, d0
 801248c:	bd30      	pop	{r4, r5, pc}
 801248e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012496:	40e2      	lsrs	r2, r4
 8012498:	4202      	tst	r2, r0
 801249a:	d0f7      	beq.n	801248c <floor+0x8c>
 801249c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80124d8 <floor+0xd8>
 80124a0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80124a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ac:	ddc8      	ble.n	8012440 <floor+0x40>
 80124ae:	2900      	cmp	r1, #0
 80124b0:	da02      	bge.n	80124b8 <floor+0xb8>
 80124b2:	2b14      	cmp	r3, #20
 80124b4:	d103      	bne.n	80124be <floor+0xbe>
 80124b6:	3101      	adds	r1, #1
 80124b8:	ea20 0002 	bic.w	r0, r0, r2
 80124bc:	e7c0      	b.n	8012440 <floor+0x40>
 80124be:	2401      	movs	r4, #1
 80124c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80124c4:	fa04 f303 	lsl.w	r3, r4, r3
 80124c8:	4418      	add	r0, r3
 80124ca:	42a8      	cmp	r0, r5
 80124cc:	bf38      	it	cc
 80124ce:	1909      	addcc	r1, r1, r4
 80124d0:	e7f2      	b.n	80124b8 <floor+0xb8>
 80124d2:	2000      	movs	r0, #0
 80124d4:	4601      	mov	r1, r0
 80124d6:	e7b3      	b.n	8012440 <floor+0x40>
 80124d8:	8800759c 	.word	0x8800759c
 80124dc:	7e37e43c 	.word	0x7e37e43c
 80124e0:	bff00000 	.word	0xbff00000
 80124e4:	000fffff 	.word	0x000fffff

080124e8 <scalbn>:
 80124e8:	ee10 1a90 	vmov	r1, s1
 80124ec:	b510      	push	{r4, lr}
 80124ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80124f2:	b98c      	cbnz	r4, 8012518 <scalbn+0x30>
 80124f4:	ee10 3a10 	vmov	r3, s0
 80124f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80124fc:	430b      	orrs	r3, r1
 80124fe:	d011      	beq.n	8012524 <scalbn+0x3c>
 8012500:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80125c8 <scalbn+0xe0>
 8012504:	4b3c      	ldr	r3, [pc, #240]	; (80125f8 <scalbn+0x110>)
 8012506:	ee20 0b07 	vmul.f64	d0, d0, d7
 801250a:	4298      	cmp	r0, r3
 801250c:	da0b      	bge.n	8012526 <scalbn+0x3e>
 801250e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80125d0 <scalbn+0xe8>
 8012512:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012516:	e005      	b.n	8012524 <scalbn+0x3c>
 8012518:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801251c:	429c      	cmp	r4, r3
 801251e:	d107      	bne.n	8012530 <scalbn+0x48>
 8012520:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012524:	bd10      	pop	{r4, pc}
 8012526:	ee10 1a90 	vmov	r1, s1
 801252a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801252e:	3c36      	subs	r4, #54	; 0x36
 8012530:	4404      	add	r4, r0
 8012532:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012536:	429c      	cmp	r4, r3
 8012538:	dd0d      	ble.n	8012556 <scalbn+0x6e>
 801253a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80125d8 <scalbn+0xf0>
 801253e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80125e0 <scalbn+0xf8>
 8012542:	eeb0 6b47 	vmov.f64	d6, d7
 8012546:	ee10 3a90 	vmov	r3, s1
 801254a:	2b00      	cmp	r3, #0
 801254c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012550:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012554:	e7e6      	b.n	8012524 <scalbn+0x3c>
 8012556:	2c00      	cmp	r4, #0
 8012558:	dd0a      	ble.n	8012570 <scalbn+0x88>
 801255a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801255e:	ec53 2b10 	vmov	r2, r3, d0
 8012562:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012566:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801256a:	ec43 2b10 	vmov	d0, r2, r3
 801256e:	e7d9      	b.n	8012524 <scalbn+0x3c>
 8012570:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012574:	da19      	bge.n	80125aa <scalbn+0xc2>
 8012576:	f24c 3350 	movw	r3, #50000	; 0xc350
 801257a:	4298      	cmp	r0, r3
 801257c:	ee10 3a90 	vmov	r3, s1
 8012580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012584:	dd09      	ble.n	801259a <scalbn+0xb2>
 8012586:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80125d8 <scalbn+0xf0>
 801258a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80125e0 <scalbn+0xf8>
 801258e:	eeb0 7b40 	vmov.f64	d7, d0
 8012592:	2b00      	cmp	r3, #0
 8012594:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012598:	e7bb      	b.n	8012512 <scalbn+0x2a>
 801259a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80125d0 <scalbn+0xe8>
 801259e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80125e8 <scalbn+0x100>
 80125a2:	eeb0 7b40 	vmov.f64	d7, d0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	e7f4      	b.n	8012594 <scalbn+0xac>
 80125aa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80125ae:	ec53 2b10 	vmov	r2, r3, d0
 80125b2:	3436      	adds	r4, #54	; 0x36
 80125b4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80125b8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80125bc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80125f0 <scalbn+0x108>
 80125c0:	ec43 2b10 	vmov	d0, r2, r3
 80125c4:	e7a5      	b.n	8012512 <scalbn+0x2a>
 80125c6:	bf00      	nop
 80125c8:	00000000 	.word	0x00000000
 80125cc:	43500000 	.word	0x43500000
 80125d0:	c2f8f359 	.word	0xc2f8f359
 80125d4:	01a56e1f 	.word	0x01a56e1f
 80125d8:	8800759c 	.word	0x8800759c
 80125dc:	7e37e43c 	.word	0x7e37e43c
 80125e0:	8800759c 	.word	0x8800759c
 80125e4:	fe37e43c 	.word	0xfe37e43c
 80125e8:	c2f8f359 	.word	0xc2f8f359
 80125ec:	81a56e1f 	.word	0x81a56e1f
 80125f0:	00000000 	.word	0x00000000
 80125f4:	3c900000 	.word	0x3c900000
 80125f8:	ffff3cb0 	.word	0xffff3cb0

080125fc <atanf>:
 80125fc:	b538      	push	{r3, r4, r5, lr}
 80125fe:	ee10 5a10 	vmov	r5, s0
 8012602:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012606:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801260a:	eef0 7a40 	vmov.f32	s15, s0
 801260e:	db0f      	blt.n	8012630 <atanf+0x34>
 8012610:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012614:	dd04      	ble.n	8012620 <atanf+0x24>
 8012616:	ee70 7a00 	vadd.f32	s15, s0, s0
 801261a:	eeb0 0a67 	vmov.f32	s0, s15
 801261e:	bd38      	pop	{r3, r4, r5, pc}
 8012620:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012758 <atanf+0x15c>
 8012624:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801275c <atanf+0x160>
 8012628:	2d00      	cmp	r5, #0
 801262a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801262e:	e7f4      	b.n	801261a <atanf+0x1e>
 8012630:	4b4b      	ldr	r3, [pc, #300]	; (8012760 <atanf+0x164>)
 8012632:	429c      	cmp	r4, r3
 8012634:	dc10      	bgt.n	8012658 <atanf+0x5c>
 8012636:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801263a:	da0a      	bge.n	8012652 <atanf+0x56>
 801263c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012764 <atanf+0x168>
 8012640:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012648:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012650:	dce3      	bgt.n	801261a <atanf+0x1e>
 8012652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012656:	e013      	b.n	8012680 <atanf+0x84>
 8012658:	f000 f8a4 	bl	80127a4 <fabsf>
 801265c:	4b42      	ldr	r3, [pc, #264]	; (8012768 <atanf+0x16c>)
 801265e:	429c      	cmp	r4, r3
 8012660:	dc4f      	bgt.n	8012702 <atanf+0x106>
 8012662:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012666:	429c      	cmp	r4, r3
 8012668:	dc41      	bgt.n	80126ee <atanf+0xf2>
 801266a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801266e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012672:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012676:	2300      	movs	r3, #0
 8012678:	ee30 0a27 	vadd.f32	s0, s0, s15
 801267c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012680:	1c5a      	adds	r2, r3, #1
 8012682:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012686:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801276c <atanf+0x170>
 801268a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012770 <atanf+0x174>
 801268e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8012774 <atanf+0x178>
 8012692:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012696:	eee6 5a87 	vfma.f32	s11, s13, s14
 801269a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012778 <atanf+0x17c>
 801269e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126a2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801277c <atanf+0x180>
 80126a6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80126aa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012780 <atanf+0x184>
 80126ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80126b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012784 <atanf+0x188>
 80126b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80126ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012788 <atanf+0x18c>
 80126be:	eea6 5a87 	vfma.f32	s10, s13, s14
 80126c2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801278c <atanf+0x190>
 80126c6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80126ca:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012790 <atanf+0x194>
 80126ce:	eea7 5a26 	vfma.f32	s10, s14, s13
 80126d2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012794 <atanf+0x198>
 80126d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80126da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80126de:	eea5 7a86 	vfma.f32	s14, s11, s12
 80126e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80126e6:	d121      	bne.n	801272c <atanf+0x130>
 80126e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126ec:	e795      	b.n	801261a <atanf+0x1e>
 80126ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80126f2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80126f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126fa:	2301      	movs	r3, #1
 80126fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012700:	e7be      	b.n	8012680 <atanf+0x84>
 8012702:	4b25      	ldr	r3, [pc, #148]	; (8012798 <atanf+0x19c>)
 8012704:	429c      	cmp	r4, r3
 8012706:	dc0b      	bgt.n	8012720 <atanf+0x124>
 8012708:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801270c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012710:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012714:	2302      	movs	r3, #2
 8012716:	ee70 6a67 	vsub.f32	s13, s0, s15
 801271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801271e:	e7af      	b.n	8012680 <atanf+0x84>
 8012720:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012724:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012728:	2303      	movs	r3, #3
 801272a:	e7a9      	b.n	8012680 <atanf+0x84>
 801272c:	4a1b      	ldr	r2, [pc, #108]	; (801279c <atanf+0x1a0>)
 801272e:	491c      	ldr	r1, [pc, #112]	; (80127a0 <atanf+0x1a4>)
 8012730:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012734:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012738:	ed93 0a00 	vldr	s0, [r3]
 801273c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012740:	ed92 0a00 	vldr	s0, [r2]
 8012744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012748:	2d00      	cmp	r5, #0
 801274a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801274e:	bfb8      	it	lt
 8012750:	eef1 7a67 	vneglt.f32	s15, s15
 8012754:	e761      	b.n	801261a <atanf+0x1e>
 8012756:	bf00      	nop
 8012758:	3fc90fdb 	.word	0x3fc90fdb
 801275c:	bfc90fdb 	.word	0xbfc90fdb
 8012760:	3edfffff 	.word	0x3edfffff
 8012764:	7149f2ca 	.word	0x7149f2ca
 8012768:	3f97ffff 	.word	0x3f97ffff
 801276c:	3c8569d7 	.word	0x3c8569d7
 8012770:	3d4bda59 	.word	0x3d4bda59
 8012774:	bd6ef16b 	.word	0xbd6ef16b
 8012778:	3d886b35 	.word	0x3d886b35
 801277c:	3dba2e6e 	.word	0x3dba2e6e
 8012780:	3e124925 	.word	0x3e124925
 8012784:	3eaaaaab 	.word	0x3eaaaaab
 8012788:	bd15a221 	.word	0xbd15a221
 801278c:	bd9d8795 	.word	0xbd9d8795
 8012790:	bde38e38 	.word	0xbde38e38
 8012794:	be4ccccd 	.word	0xbe4ccccd
 8012798:	401bffff 	.word	0x401bffff
 801279c:	08016d38 	.word	0x08016d38
 80127a0:	08016d48 	.word	0x08016d48

080127a4 <fabsf>:
 80127a4:	ee10 3a10 	vmov	r3, s0
 80127a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127ac:	ee00 3a10 	vmov	s0, r3
 80127b0:	4770      	bx	lr
	...

080127b4 <__errno>:
 80127b4:	4b01      	ldr	r3, [pc, #4]	; (80127bc <__errno+0x8>)
 80127b6:	6818      	ldr	r0, [r3, #0]
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	24000240 	.word	0x24000240

080127c0 <__libc_init_array>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	4d0d      	ldr	r5, [pc, #52]	; (80127f8 <__libc_init_array+0x38>)
 80127c4:	4c0d      	ldr	r4, [pc, #52]	; (80127fc <__libc_init_array+0x3c>)
 80127c6:	1b64      	subs	r4, r4, r5
 80127c8:	10a4      	asrs	r4, r4, #2
 80127ca:	2600      	movs	r6, #0
 80127cc:	42a6      	cmp	r6, r4
 80127ce:	d109      	bne.n	80127e4 <__libc_init_array+0x24>
 80127d0:	4d0b      	ldr	r5, [pc, #44]	; (8012800 <__libc_init_array+0x40>)
 80127d2:	4c0c      	ldr	r4, [pc, #48]	; (8012804 <__libc_init_array+0x44>)
 80127d4:	f002 fd02 	bl	80151dc <_init>
 80127d8:	1b64      	subs	r4, r4, r5
 80127da:	10a4      	asrs	r4, r4, #2
 80127dc:	2600      	movs	r6, #0
 80127de:	42a6      	cmp	r6, r4
 80127e0:	d105      	bne.n	80127ee <__libc_init_array+0x2e>
 80127e2:	bd70      	pop	{r4, r5, r6, pc}
 80127e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80127e8:	4798      	blx	r3
 80127ea:	3601      	adds	r6, #1
 80127ec:	e7ee      	b.n	80127cc <__libc_init_array+0xc>
 80127ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80127f2:	4798      	blx	r3
 80127f4:	3601      	adds	r6, #1
 80127f6:	e7f2      	b.n	80127de <__libc_init_array+0x1e>
 80127f8:	0801713c 	.word	0x0801713c
 80127fc:	0801713c 	.word	0x0801713c
 8012800:	0801713c 	.word	0x0801713c
 8012804:	08017144 	.word	0x08017144

08012808 <memset>:
 8012808:	4402      	add	r2, r0
 801280a:	4603      	mov	r3, r0
 801280c:	4293      	cmp	r3, r2
 801280e:	d100      	bne.n	8012812 <memset+0xa>
 8012810:	4770      	bx	lr
 8012812:	f803 1b01 	strb.w	r1, [r3], #1
 8012816:	e7f9      	b.n	801280c <memset+0x4>

08012818 <__cvt>:
 8012818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801281a:	ed2d 8b02 	vpush	{d8}
 801281e:	eeb0 8b40 	vmov.f64	d8, d0
 8012822:	b085      	sub	sp, #20
 8012824:	4617      	mov	r7, r2
 8012826:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012828:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801282a:	ee18 2a90 	vmov	r2, s17
 801282e:	f025 0520 	bic.w	r5, r5, #32
 8012832:	2a00      	cmp	r2, #0
 8012834:	bfb6      	itet	lt
 8012836:	222d      	movlt	r2, #45	; 0x2d
 8012838:	2200      	movge	r2, #0
 801283a:	eeb1 8b40 	vneglt.f64	d8, d0
 801283e:	2d46      	cmp	r5, #70	; 0x46
 8012840:	460c      	mov	r4, r1
 8012842:	701a      	strb	r2, [r3, #0]
 8012844:	d004      	beq.n	8012850 <__cvt+0x38>
 8012846:	2d45      	cmp	r5, #69	; 0x45
 8012848:	d100      	bne.n	801284c <__cvt+0x34>
 801284a:	3401      	adds	r4, #1
 801284c:	2102      	movs	r1, #2
 801284e:	e000      	b.n	8012852 <__cvt+0x3a>
 8012850:	2103      	movs	r1, #3
 8012852:	ab03      	add	r3, sp, #12
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	ab02      	add	r3, sp, #8
 8012858:	9300      	str	r3, [sp, #0]
 801285a:	4622      	mov	r2, r4
 801285c:	4633      	mov	r3, r6
 801285e:	eeb0 0b48 	vmov.f64	d0, d8
 8012862:	f000 fddd 	bl	8013420 <_dtoa_r>
 8012866:	2d47      	cmp	r5, #71	; 0x47
 8012868:	d101      	bne.n	801286e <__cvt+0x56>
 801286a:	07fb      	lsls	r3, r7, #31
 801286c:	d51a      	bpl.n	80128a4 <__cvt+0x8c>
 801286e:	2d46      	cmp	r5, #70	; 0x46
 8012870:	eb00 0204 	add.w	r2, r0, r4
 8012874:	d10c      	bne.n	8012890 <__cvt+0x78>
 8012876:	7803      	ldrb	r3, [r0, #0]
 8012878:	2b30      	cmp	r3, #48	; 0x30
 801287a:	d107      	bne.n	801288c <__cvt+0x74>
 801287c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012884:	bf1c      	itt	ne
 8012886:	f1c4 0401 	rsbne	r4, r4, #1
 801288a:	6034      	strne	r4, [r6, #0]
 801288c:	6833      	ldr	r3, [r6, #0]
 801288e:	441a      	add	r2, r3
 8012890:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012898:	bf08      	it	eq
 801289a:	9203      	streq	r2, [sp, #12]
 801289c:	2130      	movs	r1, #48	; 0x30
 801289e:	9b03      	ldr	r3, [sp, #12]
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d307      	bcc.n	80128b4 <__cvt+0x9c>
 80128a4:	9b03      	ldr	r3, [sp, #12]
 80128a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128a8:	1a1b      	subs	r3, r3, r0
 80128aa:	6013      	str	r3, [r2, #0]
 80128ac:	b005      	add	sp, #20
 80128ae:	ecbd 8b02 	vpop	{d8}
 80128b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128b4:	1c5c      	adds	r4, r3, #1
 80128b6:	9403      	str	r4, [sp, #12]
 80128b8:	7019      	strb	r1, [r3, #0]
 80128ba:	e7f0      	b.n	801289e <__cvt+0x86>

080128bc <__exponent>:
 80128bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128be:	4603      	mov	r3, r0
 80128c0:	2900      	cmp	r1, #0
 80128c2:	bfb8      	it	lt
 80128c4:	4249      	neglt	r1, r1
 80128c6:	f803 2b02 	strb.w	r2, [r3], #2
 80128ca:	bfb4      	ite	lt
 80128cc:	222d      	movlt	r2, #45	; 0x2d
 80128ce:	222b      	movge	r2, #43	; 0x2b
 80128d0:	2909      	cmp	r1, #9
 80128d2:	7042      	strb	r2, [r0, #1]
 80128d4:	dd2a      	ble.n	801292c <__exponent+0x70>
 80128d6:	f10d 0407 	add.w	r4, sp, #7
 80128da:	46a4      	mov	ip, r4
 80128dc:	270a      	movs	r7, #10
 80128de:	46a6      	mov	lr, r4
 80128e0:	460a      	mov	r2, r1
 80128e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80128e6:	fb07 1516 	mls	r5, r7, r6, r1
 80128ea:	3530      	adds	r5, #48	; 0x30
 80128ec:	2a63      	cmp	r2, #99	; 0x63
 80128ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80128f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80128f6:	4631      	mov	r1, r6
 80128f8:	dcf1      	bgt.n	80128de <__exponent+0x22>
 80128fa:	3130      	adds	r1, #48	; 0x30
 80128fc:	f1ae 0502 	sub.w	r5, lr, #2
 8012900:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012904:	1c44      	adds	r4, r0, #1
 8012906:	4629      	mov	r1, r5
 8012908:	4561      	cmp	r1, ip
 801290a:	d30a      	bcc.n	8012922 <__exponent+0x66>
 801290c:	f10d 0209 	add.w	r2, sp, #9
 8012910:	eba2 020e 	sub.w	r2, r2, lr
 8012914:	4565      	cmp	r5, ip
 8012916:	bf88      	it	hi
 8012918:	2200      	movhi	r2, #0
 801291a:	4413      	add	r3, r2
 801291c:	1a18      	subs	r0, r3, r0
 801291e:	b003      	add	sp, #12
 8012920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012926:	f804 2f01 	strb.w	r2, [r4, #1]!
 801292a:	e7ed      	b.n	8012908 <__exponent+0x4c>
 801292c:	2330      	movs	r3, #48	; 0x30
 801292e:	3130      	adds	r1, #48	; 0x30
 8012930:	7083      	strb	r3, [r0, #2]
 8012932:	70c1      	strb	r1, [r0, #3]
 8012934:	1d03      	adds	r3, r0, #4
 8012936:	e7f1      	b.n	801291c <__exponent+0x60>

08012938 <_printf_float>:
 8012938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801293c:	b08b      	sub	sp, #44	; 0x2c
 801293e:	460c      	mov	r4, r1
 8012940:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012944:	4616      	mov	r6, r2
 8012946:	461f      	mov	r7, r3
 8012948:	4605      	mov	r5, r0
 801294a:	f001 fc8f 	bl	801426c <_localeconv_r>
 801294e:	f8d0 b000 	ldr.w	fp, [r0]
 8012952:	4658      	mov	r0, fp
 8012954:	f7ed fcc4 	bl	80002e0 <strlen>
 8012958:	2300      	movs	r3, #0
 801295a:	9308      	str	r3, [sp, #32]
 801295c:	f8d8 3000 	ldr.w	r3, [r8]
 8012960:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012964:	6822      	ldr	r2, [r4, #0]
 8012966:	3307      	adds	r3, #7
 8012968:	f023 0307 	bic.w	r3, r3, #7
 801296c:	f103 0108 	add.w	r1, r3, #8
 8012970:	f8c8 1000 	str.w	r1, [r8]
 8012974:	4682      	mov	sl, r0
 8012976:	e9d3 0100 	ldrd	r0, r1, [r3]
 801297a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801297e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012be0 <_printf_float+0x2a8>
 8012982:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012986:	eeb0 6bc0 	vabs.f64	d6, d0
 801298a:	eeb4 6b47 	vcmp.f64	d6, d7
 801298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012992:	dd24      	ble.n	80129de <_printf_float+0xa6>
 8012994:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299c:	d502      	bpl.n	80129a4 <_printf_float+0x6c>
 801299e:	232d      	movs	r3, #45	; 0x2d
 80129a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129a4:	4b90      	ldr	r3, [pc, #576]	; (8012be8 <_printf_float+0x2b0>)
 80129a6:	4891      	ldr	r0, [pc, #580]	; (8012bec <_printf_float+0x2b4>)
 80129a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80129ac:	bf94      	ite	ls
 80129ae:	4698      	movls	r8, r3
 80129b0:	4680      	movhi	r8, r0
 80129b2:	2303      	movs	r3, #3
 80129b4:	6123      	str	r3, [r4, #16]
 80129b6:	f022 0204 	bic.w	r2, r2, #4
 80129ba:	2300      	movs	r3, #0
 80129bc:	6022      	str	r2, [r4, #0]
 80129be:	9304      	str	r3, [sp, #16]
 80129c0:	9700      	str	r7, [sp, #0]
 80129c2:	4633      	mov	r3, r6
 80129c4:	aa09      	add	r2, sp, #36	; 0x24
 80129c6:	4621      	mov	r1, r4
 80129c8:	4628      	mov	r0, r5
 80129ca:	f000 f9d3 	bl	8012d74 <_printf_common>
 80129ce:	3001      	adds	r0, #1
 80129d0:	f040 808a 	bne.w	8012ae8 <_printf_float+0x1b0>
 80129d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129d8:	b00b      	add	sp, #44	; 0x2c
 80129da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129de:	eeb4 0b40 	vcmp.f64	d0, d0
 80129e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e6:	d709      	bvc.n	80129fc <_printf_float+0xc4>
 80129e8:	ee10 3a90 	vmov	r3, s1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	bfbc      	itt	lt
 80129f0:	232d      	movlt	r3, #45	; 0x2d
 80129f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80129f6:	487e      	ldr	r0, [pc, #504]	; (8012bf0 <_printf_float+0x2b8>)
 80129f8:	4b7e      	ldr	r3, [pc, #504]	; (8012bf4 <_printf_float+0x2bc>)
 80129fa:	e7d5      	b.n	80129a8 <_printf_float+0x70>
 80129fc:	6863      	ldr	r3, [r4, #4]
 80129fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012a02:	9104      	str	r1, [sp, #16]
 8012a04:	1c59      	adds	r1, r3, #1
 8012a06:	d13c      	bne.n	8012a82 <_printf_float+0x14a>
 8012a08:	2306      	movs	r3, #6
 8012a0a:	6063      	str	r3, [r4, #4]
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	9303      	str	r3, [sp, #12]
 8012a10:	ab08      	add	r3, sp, #32
 8012a12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012a1a:	ab07      	add	r3, sp, #28
 8012a1c:	6861      	ldr	r1, [r4, #4]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	6022      	str	r2, [r4, #0]
 8012a22:	f10d 031b 	add.w	r3, sp, #27
 8012a26:	4628      	mov	r0, r5
 8012a28:	f7ff fef6 	bl	8012818 <__cvt>
 8012a2c:	9b04      	ldr	r3, [sp, #16]
 8012a2e:	9907      	ldr	r1, [sp, #28]
 8012a30:	2b47      	cmp	r3, #71	; 0x47
 8012a32:	4680      	mov	r8, r0
 8012a34:	d108      	bne.n	8012a48 <_printf_float+0x110>
 8012a36:	1cc8      	adds	r0, r1, #3
 8012a38:	db02      	blt.n	8012a40 <_printf_float+0x108>
 8012a3a:	6863      	ldr	r3, [r4, #4]
 8012a3c:	4299      	cmp	r1, r3
 8012a3e:	dd41      	ble.n	8012ac4 <_printf_float+0x18c>
 8012a40:	f1a9 0902 	sub.w	r9, r9, #2
 8012a44:	fa5f f989 	uxtb.w	r9, r9
 8012a48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a4c:	d820      	bhi.n	8012a90 <_printf_float+0x158>
 8012a4e:	3901      	subs	r1, #1
 8012a50:	464a      	mov	r2, r9
 8012a52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a56:	9107      	str	r1, [sp, #28]
 8012a58:	f7ff ff30 	bl	80128bc <__exponent>
 8012a5c:	9a08      	ldr	r2, [sp, #32]
 8012a5e:	9004      	str	r0, [sp, #16]
 8012a60:	1813      	adds	r3, r2, r0
 8012a62:	2a01      	cmp	r2, #1
 8012a64:	6123      	str	r3, [r4, #16]
 8012a66:	dc02      	bgt.n	8012a6e <_printf_float+0x136>
 8012a68:	6822      	ldr	r2, [r4, #0]
 8012a6a:	07d2      	lsls	r2, r2, #31
 8012a6c:	d501      	bpl.n	8012a72 <_printf_float+0x13a>
 8012a6e:	3301      	adds	r3, #1
 8012a70:	6123      	str	r3, [r4, #16]
 8012a72:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d0a2      	beq.n	80129c0 <_printf_float+0x88>
 8012a7a:	232d      	movs	r3, #45	; 0x2d
 8012a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a80:	e79e      	b.n	80129c0 <_printf_float+0x88>
 8012a82:	9904      	ldr	r1, [sp, #16]
 8012a84:	2947      	cmp	r1, #71	; 0x47
 8012a86:	d1c1      	bne.n	8012a0c <_printf_float+0xd4>
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d1bf      	bne.n	8012a0c <_printf_float+0xd4>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	e7bc      	b.n	8012a0a <_printf_float+0xd2>
 8012a90:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012a94:	d118      	bne.n	8012ac8 <_printf_float+0x190>
 8012a96:	2900      	cmp	r1, #0
 8012a98:	6863      	ldr	r3, [r4, #4]
 8012a9a:	dd0b      	ble.n	8012ab4 <_printf_float+0x17c>
 8012a9c:	6121      	str	r1, [r4, #16]
 8012a9e:	b913      	cbnz	r3, 8012aa6 <_printf_float+0x16e>
 8012aa0:	6822      	ldr	r2, [r4, #0]
 8012aa2:	07d0      	lsls	r0, r2, #31
 8012aa4:	d502      	bpl.n	8012aac <_printf_float+0x174>
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	440b      	add	r3, r1
 8012aaa:	6123      	str	r3, [r4, #16]
 8012aac:	2300      	movs	r3, #0
 8012aae:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ab0:	9304      	str	r3, [sp, #16]
 8012ab2:	e7de      	b.n	8012a72 <_printf_float+0x13a>
 8012ab4:	b913      	cbnz	r3, 8012abc <_printf_float+0x184>
 8012ab6:	6822      	ldr	r2, [r4, #0]
 8012ab8:	07d2      	lsls	r2, r2, #31
 8012aba:	d501      	bpl.n	8012ac0 <_printf_float+0x188>
 8012abc:	3302      	adds	r3, #2
 8012abe:	e7f4      	b.n	8012aaa <_printf_float+0x172>
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	e7f2      	b.n	8012aaa <_printf_float+0x172>
 8012ac4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012ac8:	9b08      	ldr	r3, [sp, #32]
 8012aca:	4299      	cmp	r1, r3
 8012acc:	db05      	blt.n	8012ada <_printf_float+0x1a2>
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	6121      	str	r1, [r4, #16]
 8012ad2:	07d8      	lsls	r0, r3, #31
 8012ad4:	d5ea      	bpl.n	8012aac <_printf_float+0x174>
 8012ad6:	1c4b      	adds	r3, r1, #1
 8012ad8:	e7e7      	b.n	8012aaa <_printf_float+0x172>
 8012ada:	2900      	cmp	r1, #0
 8012adc:	bfd4      	ite	le
 8012ade:	f1c1 0202 	rsble	r2, r1, #2
 8012ae2:	2201      	movgt	r2, #1
 8012ae4:	4413      	add	r3, r2
 8012ae6:	e7e0      	b.n	8012aaa <_printf_float+0x172>
 8012ae8:	6823      	ldr	r3, [r4, #0]
 8012aea:	055a      	lsls	r2, r3, #21
 8012aec:	d407      	bmi.n	8012afe <_printf_float+0x1c6>
 8012aee:	6923      	ldr	r3, [r4, #16]
 8012af0:	4642      	mov	r2, r8
 8012af2:	4631      	mov	r1, r6
 8012af4:	4628      	mov	r0, r5
 8012af6:	47b8      	blx	r7
 8012af8:	3001      	adds	r0, #1
 8012afa:	d12a      	bne.n	8012b52 <_printf_float+0x21a>
 8012afc:	e76a      	b.n	80129d4 <_printf_float+0x9c>
 8012afe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012b02:	f240 80e2 	bls.w	8012cca <_printf_float+0x392>
 8012b06:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012b0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b12:	d133      	bne.n	8012b7c <_printf_float+0x244>
 8012b14:	4a38      	ldr	r2, [pc, #224]	; (8012bf8 <_printf_float+0x2c0>)
 8012b16:	2301      	movs	r3, #1
 8012b18:	4631      	mov	r1, r6
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	47b8      	blx	r7
 8012b1e:	3001      	adds	r0, #1
 8012b20:	f43f af58 	beq.w	80129d4 <_printf_float+0x9c>
 8012b24:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	db02      	blt.n	8012b32 <_printf_float+0x1fa>
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	07d8      	lsls	r0, r3, #31
 8012b30:	d50f      	bpl.n	8012b52 <_printf_float+0x21a>
 8012b32:	4653      	mov	r3, sl
 8012b34:	465a      	mov	r2, fp
 8012b36:	4631      	mov	r1, r6
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b8      	blx	r7
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	f43f af49 	beq.w	80129d4 <_printf_float+0x9c>
 8012b42:	f04f 0800 	mov.w	r8, #0
 8012b46:	f104 091a 	add.w	r9, r4, #26
 8012b4a:	9b08      	ldr	r3, [sp, #32]
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	4543      	cmp	r3, r8
 8012b50:	dc09      	bgt.n	8012b66 <_printf_float+0x22e>
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	079b      	lsls	r3, r3, #30
 8012b56:	f100 8108 	bmi.w	8012d6a <_printf_float+0x432>
 8012b5a:	68e0      	ldr	r0, [r4, #12]
 8012b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b5e:	4298      	cmp	r0, r3
 8012b60:	bfb8      	it	lt
 8012b62:	4618      	movlt	r0, r3
 8012b64:	e738      	b.n	80129d8 <_printf_float+0xa0>
 8012b66:	2301      	movs	r3, #1
 8012b68:	464a      	mov	r2, r9
 8012b6a:	4631      	mov	r1, r6
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	47b8      	blx	r7
 8012b70:	3001      	adds	r0, #1
 8012b72:	f43f af2f 	beq.w	80129d4 <_printf_float+0x9c>
 8012b76:	f108 0801 	add.w	r8, r8, #1
 8012b7a:	e7e6      	b.n	8012b4a <_printf_float+0x212>
 8012b7c:	9b07      	ldr	r3, [sp, #28]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	dc3c      	bgt.n	8012bfc <_printf_float+0x2c4>
 8012b82:	4a1d      	ldr	r2, [pc, #116]	; (8012bf8 <_printf_float+0x2c0>)
 8012b84:	2301      	movs	r3, #1
 8012b86:	4631      	mov	r1, r6
 8012b88:	4628      	mov	r0, r5
 8012b8a:	47b8      	blx	r7
 8012b8c:	3001      	adds	r0, #1
 8012b8e:	f43f af21 	beq.w	80129d4 <_printf_float+0x9c>
 8012b92:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012b96:	4313      	orrs	r3, r2
 8012b98:	d102      	bne.n	8012ba0 <_printf_float+0x268>
 8012b9a:	6823      	ldr	r3, [r4, #0]
 8012b9c:	07d9      	lsls	r1, r3, #31
 8012b9e:	d5d8      	bpl.n	8012b52 <_printf_float+0x21a>
 8012ba0:	4653      	mov	r3, sl
 8012ba2:	465a      	mov	r2, fp
 8012ba4:	4631      	mov	r1, r6
 8012ba6:	4628      	mov	r0, r5
 8012ba8:	47b8      	blx	r7
 8012baa:	3001      	adds	r0, #1
 8012bac:	f43f af12 	beq.w	80129d4 <_printf_float+0x9c>
 8012bb0:	f04f 0900 	mov.w	r9, #0
 8012bb4:	f104 0a1a 	add.w	sl, r4, #26
 8012bb8:	9b07      	ldr	r3, [sp, #28]
 8012bba:	425b      	negs	r3, r3
 8012bbc:	454b      	cmp	r3, r9
 8012bbe:	dc01      	bgt.n	8012bc4 <_printf_float+0x28c>
 8012bc0:	9b08      	ldr	r3, [sp, #32]
 8012bc2:	e795      	b.n	8012af0 <_printf_float+0x1b8>
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	4652      	mov	r2, sl
 8012bc8:	4631      	mov	r1, r6
 8012bca:	4628      	mov	r0, r5
 8012bcc:	47b8      	blx	r7
 8012bce:	3001      	adds	r0, #1
 8012bd0:	f43f af00 	beq.w	80129d4 <_printf_float+0x9c>
 8012bd4:	f109 0901 	add.w	r9, r9, #1
 8012bd8:	e7ee      	b.n	8012bb8 <_printf_float+0x280>
 8012bda:	bf00      	nop
 8012bdc:	f3af 8000 	nop.w
 8012be0:	ffffffff 	.word	0xffffffff
 8012be4:	7fefffff 	.word	0x7fefffff
 8012be8:	08016d5c 	.word	0x08016d5c
 8012bec:	08016d60 	.word	0x08016d60
 8012bf0:	08016d68 	.word	0x08016d68
 8012bf4:	08016d64 	.word	0x08016d64
 8012bf8:	08016d6c 	.word	0x08016d6c
 8012bfc:	9a08      	ldr	r2, [sp, #32]
 8012bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c00:	429a      	cmp	r2, r3
 8012c02:	bfa8      	it	ge
 8012c04:	461a      	movge	r2, r3
 8012c06:	2a00      	cmp	r2, #0
 8012c08:	4691      	mov	r9, r2
 8012c0a:	dc38      	bgt.n	8012c7e <_printf_float+0x346>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	9305      	str	r3, [sp, #20]
 8012c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c14:	f104 021a 	add.w	r2, r4, #26
 8012c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c1a:	9905      	ldr	r1, [sp, #20]
 8012c1c:	9304      	str	r3, [sp, #16]
 8012c1e:	eba3 0309 	sub.w	r3, r3, r9
 8012c22:	428b      	cmp	r3, r1
 8012c24:	dc33      	bgt.n	8012c8e <_printf_float+0x356>
 8012c26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	db3c      	blt.n	8012ca8 <_printf_float+0x370>
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	07da      	lsls	r2, r3, #31
 8012c32:	d439      	bmi.n	8012ca8 <_printf_float+0x370>
 8012c34:	9b08      	ldr	r3, [sp, #32]
 8012c36:	9a04      	ldr	r2, [sp, #16]
 8012c38:	9907      	ldr	r1, [sp, #28]
 8012c3a:	1a9a      	subs	r2, r3, r2
 8012c3c:	eba3 0901 	sub.w	r9, r3, r1
 8012c40:	4591      	cmp	r9, r2
 8012c42:	bfa8      	it	ge
 8012c44:	4691      	movge	r9, r2
 8012c46:	f1b9 0f00 	cmp.w	r9, #0
 8012c4a:	dc35      	bgt.n	8012cb8 <_printf_float+0x380>
 8012c4c:	f04f 0800 	mov.w	r8, #0
 8012c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c54:	f104 0a1a 	add.w	sl, r4, #26
 8012c58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c5c:	1a9b      	subs	r3, r3, r2
 8012c5e:	eba3 0309 	sub.w	r3, r3, r9
 8012c62:	4543      	cmp	r3, r8
 8012c64:	f77f af75 	ble.w	8012b52 <_printf_float+0x21a>
 8012c68:	2301      	movs	r3, #1
 8012c6a:	4652      	mov	r2, sl
 8012c6c:	4631      	mov	r1, r6
 8012c6e:	4628      	mov	r0, r5
 8012c70:	47b8      	blx	r7
 8012c72:	3001      	adds	r0, #1
 8012c74:	f43f aeae 	beq.w	80129d4 <_printf_float+0x9c>
 8012c78:	f108 0801 	add.w	r8, r8, #1
 8012c7c:	e7ec      	b.n	8012c58 <_printf_float+0x320>
 8012c7e:	4613      	mov	r3, r2
 8012c80:	4631      	mov	r1, r6
 8012c82:	4642      	mov	r2, r8
 8012c84:	4628      	mov	r0, r5
 8012c86:	47b8      	blx	r7
 8012c88:	3001      	adds	r0, #1
 8012c8a:	d1bf      	bne.n	8012c0c <_printf_float+0x2d4>
 8012c8c:	e6a2      	b.n	80129d4 <_printf_float+0x9c>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4631      	mov	r1, r6
 8012c92:	4628      	mov	r0, r5
 8012c94:	9204      	str	r2, [sp, #16]
 8012c96:	47b8      	blx	r7
 8012c98:	3001      	adds	r0, #1
 8012c9a:	f43f ae9b 	beq.w	80129d4 <_printf_float+0x9c>
 8012c9e:	9b05      	ldr	r3, [sp, #20]
 8012ca0:	9a04      	ldr	r2, [sp, #16]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	9305      	str	r3, [sp, #20]
 8012ca6:	e7b7      	b.n	8012c18 <_printf_float+0x2e0>
 8012ca8:	4653      	mov	r3, sl
 8012caa:	465a      	mov	r2, fp
 8012cac:	4631      	mov	r1, r6
 8012cae:	4628      	mov	r0, r5
 8012cb0:	47b8      	blx	r7
 8012cb2:	3001      	adds	r0, #1
 8012cb4:	d1be      	bne.n	8012c34 <_printf_float+0x2fc>
 8012cb6:	e68d      	b.n	80129d4 <_printf_float+0x9c>
 8012cb8:	9a04      	ldr	r2, [sp, #16]
 8012cba:	464b      	mov	r3, r9
 8012cbc:	4442      	add	r2, r8
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	47b8      	blx	r7
 8012cc4:	3001      	adds	r0, #1
 8012cc6:	d1c1      	bne.n	8012c4c <_printf_float+0x314>
 8012cc8:	e684      	b.n	80129d4 <_printf_float+0x9c>
 8012cca:	9a08      	ldr	r2, [sp, #32]
 8012ccc:	2a01      	cmp	r2, #1
 8012cce:	dc01      	bgt.n	8012cd4 <_printf_float+0x39c>
 8012cd0:	07db      	lsls	r3, r3, #31
 8012cd2:	d537      	bpl.n	8012d44 <_printf_float+0x40c>
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	4642      	mov	r2, r8
 8012cd8:	4631      	mov	r1, r6
 8012cda:	4628      	mov	r0, r5
 8012cdc:	47b8      	blx	r7
 8012cde:	3001      	adds	r0, #1
 8012ce0:	f43f ae78 	beq.w	80129d4 <_printf_float+0x9c>
 8012ce4:	4653      	mov	r3, sl
 8012ce6:	465a      	mov	r2, fp
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4628      	mov	r0, r5
 8012cec:	47b8      	blx	r7
 8012cee:	3001      	adds	r0, #1
 8012cf0:	f43f ae70 	beq.w	80129d4 <_printf_float+0x9c>
 8012cf4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012cf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d00:	d01b      	beq.n	8012d3a <_printf_float+0x402>
 8012d02:	9b08      	ldr	r3, [sp, #32]
 8012d04:	f108 0201 	add.w	r2, r8, #1
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	47b8      	blx	r7
 8012d10:	3001      	adds	r0, #1
 8012d12:	d10e      	bne.n	8012d32 <_printf_float+0x3fa>
 8012d14:	e65e      	b.n	80129d4 <_printf_float+0x9c>
 8012d16:	2301      	movs	r3, #1
 8012d18:	464a      	mov	r2, r9
 8012d1a:	4631      	mov	r1, r6
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	47b8      	blx	r7
 8012d20:	3001      	adds	r0, #1
 8012d22:	f43f ae57 	beq.w	80129d4 <_printf_float+0x9c>
 8012d26:	f108 0801 	add.w	r8, r8, #1
 8012d2a:	9b08      	ldr	r3, [sp, #32]
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	4543      	cmp	r3, r8
 8012d30:	dcf1      	bgt.n	8012d16 <_printf_float+0x3de>
 8012d32:	9b04      	ldr	r3, [sp, #16]
 8012d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d38:	e6db      	b.n	8012af2 <_printf_float+0x1ba>
 8012d3a:	f04f 0800 	mov.w	r8, #0
 8012d3e:	f104 091a 	add.w	r9, r4, #26
 8012d42:	e7f2      	b.n	8012d2a <_printf_float+0x3f2>
 8012d44:	2301      	movs	r3, #1
 8012d46:	4642      	mov	r2, r8
 8012d48:	e7df      	b.n	8012d0a <_printf_float+0x3d2>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	464a      	mov	r2, r9
 8012d4e:	4631      	mov	r1, r6
 8012d50:	4628      	mov	r0, r5
 8012d52:	47b8      	blx	r7
 8012d54:	3001      	adds	r0, #1
 8012d56:	f43f ae3d 	beq.w	80129d4 <_printf_float+0x9c>
 8012d5a:	f108 0801 	add.w	r8, r8, #1
 8012d5e:	68e3      	ldr	r3, [r4, #12]
 8012d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d62:	1a5b      	subs	r3, r3, r1
 8012d64:	4543      	cmp	r3, r8
 8012d66:	dcf0      	bgt.n	8012d4a <_printf_float+0x412>
 8012d68:	e6f7      	b.n	8012b5a <_printf_float+0x222>
 8012d6a:	f04f 0800 	mov.w	r8, #0
 8012d6e:	f104 0919 	add.w	r9, r4, #25
 8012d72:	e7f4      	b.n	8012d5e <_printf_float+0x426>

08012d74 <_printf_common>:
 8012d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d78:	4616      	mov	r6, r2
 8012d7a:	4699      	mov	r9, r3
 8012d7c:	688a      	ldr	r2, [r1, #8]
 8012d7e:	690b      	ldr	r3, [r1, #16]
 8012d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d84:	4293      	cmp	r3, r2
 8012d86:	bfb8      	it	lt
 8012d88:	4613      	movlt	r3, r2
 8012d8a:	6033      	str	r3, [r6, #0]
 8012d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d90:	4607      	mov	r7, r0
 8012d92:	460c      	mov	r4, r1
 8012d94:	b10a      	cbz	r2, 8012d9a <_printf_common+0x26>
 8012d96:	3301      	adds	r3, #1
 8012d98:	6033      	str	r3, [r6, #0]
 8012d9a:	6823      	ldr	r3, [r4, #0]
 8012d9c:	0699      	lsls	r1, r3, #26
 8012d9e:	bf42      	ittt	mi
 8012da0:	6833      	ldrmi	r3, [r6, #0]
 8012da2:	3302      	addmi	r3, #2
 8012da4:	6033      	strmi	r3, [r6, #0]
 8012da6:	6825      	ldr	r5, [r4, #0]
 8012da8:	f015 0506 	ands.w	r5, r5, #6
 8012dac:	d106      	bne.n	8012dbc <_printf_common+0x48>
 8012dae:	f104 0a19 	add.w	sl, r4, #25
 8012db2:	68e3      	ldr	r3, [r4, #12]
 8012db4:	6832      	ldr	r2, [r6, #0]
 8012db6:	1a9b      	subs	r3, r3, r2
 8012db8:	42ab      	cmp	r3, r5
 8012dba:	dc26      	bgt.n	8012e0a <_printf_common+0x96>
 8012dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012dc0:	1e13      	subs	r3, r2, #0
 8012dc2:	6822      	ldr	r2, [r4, #0]
 8012dc4:	bf18      	it	ne
 8012dc6:	2301      	movne	r3, #1
 8012dc8:	0692      	lsls	r2, r2, #26
 8012dca:	d42b      	bmi.n	8012e24 <_printf_common+0xb0>
 8012dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012dd0:	4649      	mov	r1, r9
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	47c0      	blx	r8
 8012dd6:	3001      	adds	r0, #1
 8012dd8:	d01e      	beq.n	8012e18 <_printf_common+0xa4>
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	68e5      	ldr	r5, [r4, #12]
 8012dde:	6832      	ldr	r2, [r6, #0]
 8012de0:	f003 0306 	and.w	r3, r3, #6
 8012de4:	2b04      	cmp	r3, #4
 8012de6:	bf08      	it	eq
 8012de8:	1aad      	subeq	r5, r5, r2
 8012dea:	68a3      	ldr	r3, [r4, #8]
 8012dec:	6922      	ldr	r2, [r4, #16]
 8012dee:	bf0c      	ite	eq
 8012df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012df4:	2500      	movne	r5, #0
 8012df6:	4293      	cmp	r3, r2
 8012df8:	bfc4      	itt	gt
 8012dfa:	1a9b      	subgt	r3, r3, r2
 8012dfc:	18ed      	addgt	r5, r5, r3
 8012dfe:	2600      	movs	r6, #0
 8012e00:	341a      	adds	r4, #26
 8012e02:	42b5      	cmp	r5, r6
 8012e04:	d11a      	bne.n	8012e3c <_printf_common+0xc8>
 8012e06:	2000      	movs	r0, #0
 8012e08:	e008      	b.n	8012e1c <_printf_common+0xa8>
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	4652      	mov	r2, sl
 8012e0e:	4649      	mov	r1, r9
 8012e10:	4638      	mov	r0, r7
 8012e12:	47c0      	blx	r8
 8012e14:	3001      	adds	r0, #1
 8012e16:	d103      	bne.n	8012e20 <_printf_common+0xac>
 8012e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e20:	3501      	adds	r5, #1
 8012e22:	e7c6      	b.n	8012db2 <_printf_common+0x3e>
 8012e24:	18e1      	adds	r1, r4, r3
 8012e26:	1c5a      	adds	r2, r3, #1
 8012e28:	2030      	movs	r0, #48	; 0x30
 8012e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e2e:	4422      	add	r2, r4
 8012e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e38:	3302      	adds	r3, #2
 8012e3a:	e7c7      	b.n	8012dcc <_printf_common+0x58>
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	4622      	mov	r2, r4
 8012e40:	4649      	mov	r1, r9
 8012e42:	4638      	mov	r0, r7
 8012e44:	47c0      	blx	r8
 8012e46:	3001      	adds	r0, #1
 8012e48:	d0e6      	beq.n	8012e18 <_printf_common+0xa4>
 8012e4a:	3601      	adds	r6, #1
 8012e4c:	e7d9      	b.n	8012e02 <_printf_common+0x8e>
	...

08012e50 <_printf_i>:
 8012e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e54:	7e0f      	ldrb	r7, [r1, #24]
 8012e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e58:	2f78      	cmp	r7, #120	; 0x78
 8012e5a:	4691      	mov	r9, r2
 8012e5c:	4680      	mov	r8, r0
 8012e5e:	460c      	mov	r4, r1
 8012e60:	469a      	mov	sl, r3
 8012e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012e66:	d807      	bhi.n	8012e78 <_printf_i+0x28>
 8012e68:	2f62      	cmp	r7, #98	; 0x62
 8012e6a:	d80a      	bhi.n	8012e82 <_printf_i+0x32>
 8012e6c:	2f00      	cmp	r7, #0
 8012e6e:	f000 80d8 	beq.w	8013022 <_printf_i+0x1d2>
 8012e72:	2f58      	cmp	r7, #88	; 0x58
 8012e74:	f000 80a3 	beq.w	8012fbe <_printf_i+0x16e>
 8012e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012e80:	e03a      	b.n	8012ef8 <_printf_i+0xa8>
 8012e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012e86:	2b15      	cmp	r3, #21
 8012e88:	d8f6      	bhi.n	8012e78 <_printf_i+0x28>
 8012e8a:	a101      	add	r1, pc, #4	; (adr r1, 8012e90 <_printf_i+0x40>)
 8012e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e90:	08012ee9 	.word	0x08012ee9
 8012e94:	08012efd 	.word	0x08012efd
 8012e98:	08012e79 	.word	0x08012e79
 8012e9c:	08012e79 	.word	0x08012e79
 8012ea0:	08012e79 	.word	0x08012e79
 8012ea4:	08012e79 	.word	0x08012e79
 8012ea8:	08012efd 	.word	0x08012efd
 8012eac:	08012e79 	.word	0x08012e79
 8012eb0:	08012e79 	.word	0x08012e79
 8012eb4:	08012e79 	.word	0x08012e79
 8012eb8:	08012e79 	.word	0x08012e79
 8012ebc:	08013009 	.word	0x08013009
 8012ec0:	08012f2d 	.word	0x08012f2d
 8012ec4:	08012feb 	.word	0x08012feb
 8012ec8:	08012e79 	.word	0x08012e79
 8012ecc:	08012e79 	.word	0x08012e79
 8012ed0:	0801302b 	.word	0x0801302b
 8012ed4:	08012e79 	.word	0x08012e79
 8012ed8:	08012f2d 	.word	0x08012f2d
 8012edc:	08012e79 	.word	0x08012e79
 8012ee0:	08012e79 	.word	0x08012e79
 8012ee4:	08012ff3 	.word	0x08012ff3
 8012ee8:	682b      	ldr	r3, [r5, #0]
 8012eea:	1d1a      	adds	r2, r3, #4
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	602a      	str	r2, [r5, #0]
 8012ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ef8:	2301      	movs	r3, #1
 8012efa:	e0a3      	b.n	8013044 <_printf_i+0x1f4>
 8012efc:	6820      	ldr	r0, [r4, #0]
 8012efe:	6829      	ldr	r1, [r5, #0]
 8012f00:	0606      	lsls	r6, r0, #24
 8012f02:	f101 0304 	add.w	r3, r1, #4
 8012f06:	d50a      	bpl.n	8012f1e <_printf_i+0xce>
 8012f08:	680e      	ldr	r6, [r1, #0]
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	2e00      	cmp	r6, #0
 8012f0e:	da03      	bge.n	8012f18 <_printf_i+0xc8>
 8012f10:	232d      	movs	r3, #45	; 0x2d
 8012f12:	4276      	negs	r6, r6
 8012f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f18:	485e      	ldr	r0, [pc, #376]	; (8013094 <_printf_i+0x244>)
 8012f1a:	230a      	movs	r3, #10
 8012f1c:	e019      	b.n	8012f52 <_printf_i+0x102>
 8012f1e:	680e      	ldr	r6, [r1, #0]
 8012f20:	602b      	str	r3, [r5, #0]
 8012f22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f26:	bf18      	it	ne
 8012f28:	b236      	sxthne	r6, r6
 8012f2a:	e7ef      	b.n	8012f0c <_printf_i+0xbc>
 8012f2c:	682b      	ldr	r3, [r5, #0]
 8012f2e:	6820      	ldr	r0, [r4, #0]
 8012f30:	1d19      	adds	r1, r3, #4
 8012f32:	6029      	str	r1, [r5, #0]
 8012f34:	0601      	lsls	r1, r0, #24
 8012f36:	d501      	bpl.n	8012f3c <_printf_i+0xec>
 8012f38:	681e      	ldr	r6, [r3, #0]
 8012f3a:	e002      	b.n	8012f42 <_printf_i+0xf2>
 8012f3c:	0646      	lsls	r6, r0, #25
 8012f3e:	d5fb      	bpl.n	8012f38 <_printf_i+0xe8>
 8012f40:	881e      	ldrh	r6, [r3, #0]
 8012f42:	4854      	ldr	r0, [pc, #336]	; (8013094 <_printf_i+0x244>)
 8012f44:	2f6f      	cmp	r7, #111	; 0x6f
 8012f46:	bf0c      	ite	eq
 8012f48:	2308      	moveq	r3, #8
 8012f4a:	230a      	movne	r3, #10
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f52:	6865      	ldr	r5, [r4, #4]
 8012f54:	60a5      	str	r5, [r4, #8]
 8012f56:	2d00      	cmp	r5, #0
 8012f58:	bfa2      	ittt	ge
 8012f5a:	6821      	ldrge	r1, [r4, #0]
 8012f5c:	f021 0104 	bicge.w	r1, r1, #4
 8012f60:	6021      	strge	r1, [r4, #0]
 8012f62:	b90e      	cbnz	r6, 8012f68 <_printf_i+0x118>
 8012f64:	2d00      	cmp	r5, #0
 8012f66:	d04d      	beq.n	8013004 <_printf_i+0x1b4>
 8012f68:	4615      	mov	r5, r2
 8012f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8012f72:	5dc7      	ldrb	r7, [r0, r7]
 8012f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012f78:	4637      	mov	r7, r6
 8012f7a:	42bb      	cmp	r3, r7
 8012f7c:	460e      	mov	r6, r1
 8012f7e:	d9f4      	bls.n	8012f6a <_printf_i+0x11a>
 8012f80:	2b08      	cmp	r3, #8
 8012f82:	d10b      	bne.n	8012f9c <_printf_i+0x14c>
 8012f84:	6823      	ldr	r3, [r4, #0]
 8012f86:	07de      	lsls	r6, r3, #31
 8012f88:	d508      	bpl.n	8012f9c <_printf_i+0x14c>
 8012f8a:	6923      	ldr	r3, [r4, #16]
 8012f8c:	6861      	ldr	r1, [r4, #4]
 8012f8e:	4299      	cmp	r1, r3
 8012f90:	bfde      	ittt	le
 8012f92:	2330      	movle	r3, #48	; 0x30
 8012f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012f98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012f9c:	1b52      	subs	r2, r2, r5
 8012f9e:	6122      	str	r2, [r4, #16]
 8012fa0:	f8cd a000 	str.w	sl, [sp]
 8012fa4:	464b      	mov	r3, r9
 8012fa6:	aa03      	add	r2, sp, #12
 8012fa8:	4621      	mov	r1, r4
 8012faa:	4640      	mov	r0, r8
 8012fac:	f7ff fee2 	bl	8012d74 <_printf_common>
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	d14c      	bne.n	801304e <_printf_i+0x1fe>
 8012fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012fb8:	b004      	add	sp, #16
 8012fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fbe:	4835      	ldr	r0, [pc, #212]	; (8013094 <_printf_i+0x244>)
 8012fc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012fc4:	6829      	ldr	r1, [r5, #0]
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012fcc:	6029      	str	r1, [r5, #0]
 8012fce:	061d      	lsls	r5, r3, #24
 8012fd0:	d514      	bpl.n	8012ffc <_printf_i+0x1ac>
 8012fd2:	07df      	lsls	r7, r3, #31
 8012fd4:	bf44      	itt	mi
 8012fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8012fda:	6023      	strmi	r3, [r4, #0]
 8012fdc:	b91e      	cbnz	r6, 8012fe6 <_printf_i+0x196>
 8012fde:	6823      	ldr	r3, [r4, #0]
 8012fe0:	f023 0320 	bic.w	r3, r3, #32
 8012fe4:	6023      	str	r3, [r4, #0]
 8012fe6:	2310      	movs	r3, #16
 8012fe8:	e7b0      	b.n	8012f4c <_printf_i+0xfc>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	f043 0320 	orr.w	r3, r3, #32
 8012ff0:	6023      	str	r3, [r4, #0]
 8012ff2:	2378      	movs	r3, #120	; 0x78
 8012ff4:	4828      	ldr	r0, [pc, #160]	; (8013098 <_printf_i+0x248>)
 8012ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ffa:	e7e3      	b.n	8012fc4 <_printf_i+0x174>
 8012ffc:	0659      	lsls	r1, r3, #25
 8012ffe:	bf48      	it	mi
 8013000:	b2b6      	uxthmi	r6, r6
 8013002:	e7e6      	b.n	8012fd2 <_printf_i+0x182>
 8013004:	4615      	mov	r5, r2
 8013006:	e7bb      	b.n	8012f80 <_printf_i+0x130>
 8013008:	682b      	ldr	r3, [r5, #0]
 801300a:	6826      	ldr	r6, [r4, #0]
 801300c:	6961      	ldr	r1, [r4, #20]
 801300e:	1d18      	adds	r0, r3, #4
 8013010:	6028      	str	r0, [r5, #0]
 8013012:	0635      	lsls	r5, r6, #24
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	d501      	bpl.n	801301c <_printf_i+0x1cc>
 8013018:	6019      	str	r1, [r3, #0]
 801301a:	e002      	b.n	8013022 <_printf_i+0x1d2>
 801301c:	0670      	lsls	r0, r6, #25
 801301e:	d5fb      	bpl.n	8013018 <_printf_i+0x1c8>
 8013020:	8019      	strh	r1, [r3, #0]
 8013022:	2300      	movs	r3, #0
 8013024:	6123      	str	r3, [r4, #16]
 8013026:	4615      	mov	r5, r2
 8013028:	e7ba      	b.n	8012fa0 <_printf_i+0x150>
 801302a:	682b      	ldr	r3, [r5, #0]
 801302c:	1d1a      	adds	r2, r3, #4
 801302e:	602a      	str	r2, [r5, #0]
 8013030:	681d      	ldr	r5, [r3, #0]
 8013032:	6862      	ldr	r2, [r4, #4]
 8013034:	2100      	movs	r1, #0
 8013036:	4628      	mov	r0, r5
 8013038:	f7ed f95a 	bl	80002f0 <memchr>
 801303c:	b108      	cbz	r0, 8013042 <_printf_i+0x1f2>
 801303e:	1b40      	subs	r0, r0, r5
 8013040:	6060      	str	r0, [r4, #4]
 8013042:	6863      	ldr	r3, [r4, #4]
 8013044:	6123      	str	r3, [r4, #16]
 8013046:	2300      	movs	r3, #0
 8013048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801304c:	e7a8      	b.n	8012fa0 <_printf_i+0x150>
 801304e:	6923      	ldr	r3, [r4, #16]
 8013050:	462a      	mov	r2, r5
 8013052:	4649      	mov	r1, r9
 8013054:	4640      	mov	r0, r8
 8013056:	47d0      	blx	sl
 8013058:	3001      	adds	r0, #1
 801305a:	d0ab      	beq.n	8012fb4 <_printf_i+0x164>
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	079b      	lsls	r3, r3, #30
 8013060:	d413      	bmi.n	801308a <_printf_i+0x23a>
 8013062:	68e0      	ldr	r0, [r4, #12]
 8013064:	9b03      	ldr	r3, [sp, #12]
 8013066:	4298      	cmp	r0, r3
 8013068:	bfb8      	it	lt
 801306a:	4618      	movlt	r0, r3
 801306c:	e7a4      	b.n	8012fb8 <_printf_i+0x168>
 801306e:	2301      	movs	r3, #1
 8013070:	4632      	mov	r2, r6
 8013072:	4649      	mov	r1, r9
 8013074:	4640      	mov	r0, r8
 8013076:	47d0      	blx	sl
 8013078:	3001      	adds	r0, #1
 801307a:	d09b      	beq.n	8012fb4 <_printf_i+0x164>
 801307c:	3501      	adds	r5, #1
 801307e:	68e3      	ldr	r3, [r4, #12]
 8013080:	9903      	ldr	r1, [sp, #12]
 8013082:	1a5b      	subs	r3, r3, r1
 8013084:	42ab      	cmp	r3, r5
 8013086:	dcf2      	bgt.n	801306e <_printf_i+0x21e>
 8013088:	e7eb      	b.n	8013062 <_printf_i+0x212>
 801308a:	2500      	movs	r5, #0
 801308c:	f104 0619 	add.w	r6, r4, #25
 8013090:	e7f5      	b.n	801307e <_printf_i+0x22e>
 8013092:	bf00      	nop
 8013094:	08016d6e 	.word	0x08016d6e
 8013098:	08016d7f 	.word	0x08016d7f

0801309c <_puts_r>:
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	460e      	mov	r6, r1
 80130a0:	4605      	mov	r5, r0
 80130a2:	b118      	cbz	r0, 80130ac <_puts_r+0x10>
 80130a4:	6983      	ldr	r3, [r0, #24]
 80130a6:	b90b      	cbnz	r3, 80130ac <_puts_r+0x10>
 80130a8:	f001 f842 	bl	8014130 <__sinit>
 80130ac:	69ab      	ldr	r3, [r5, #24]
 80130ae:	68ac      	ldr	r4, [r5, #8]
 80130b0:	b913      	cbnz	r3, 80130b8 <_puts_r+0x1c>
 80130b2:	4628      	mov	r0, r5
 80130b4:	f001 f83c 	bl	8014130 <__sinit>
 80130b8:	4b2c      	ldr	r3, [pc, #176]	; (801316c <_puts_r+0xd0>)
 80130ba:	429c      	cmp	r4, r3
 80130bc:	d120      	bne.n	8013100 <_puts_r+0x64>
 80130be:	686c      	ldr	r4, [r5, #4]
 80130c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130c2:	07db      	lsls	r3, r3, #31
 80130c4:	d405      	bmi.n	80130d2 <_puts_r+0x36>
 80130c6:	89a3      	ldrh	r3, [r4, #12]
 80130c8:	0598      	lsls	r0, r3, #22
 80130ca:	d402      	bmi.n	80130d2 <_puts_r+0x36>
 80130cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130ce:	f001 f8d2 	bl	8014276 <__retarget_lock_acquire_recursive>
 80130d2:	89a3      	ldrh	r3, [r4, #12]
 80130d4:	0719      	lsls	r1, r3, #28
 80130d6:	d51d      	bpl.n	8013114 <_puts_r+0x78>
 80130d8:	6923      	ldr	r3, [r4, #16]
 80130da:	b1db      	cbz	r3, 8013114 <_puts_r+0x78>
 80130dc:	3e01      	subs	r6, #1
 80130de:	68a3      	ldr	r3, [r4, #8]
 80130e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80130e4:	3b01      	subs	r3, #1
 80130e6:	60a3      	str	r3, [r4, #8]
 80130e8:	bb39      	cbnz	r1, 801313a <_puts_r+0x9e>
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	da38      	bge.n	8013160 <_puts_r+0xc4>
 80130ee:	4622      	mov	r2, r4
 80130f0:	210a      	movs	r1, #10
 80130f2:	4628      	mov	r0, r5
 80130f4:	f000 f848 	bl	8013188 <__swbuf_r>
 80130f8:	3001      	adds	r0, #1
 80130fa:	d011      	beq.n	8013120 <_puts_r+0x84>
 80130fc:	250a      	movs	r5, #10
 80130fe:	e011      	b.n	8013124 <_puts_r+0x88>
 8013100:	4b1b      	ldr	r3, [pc, #108]	; (8013170 <_puts_r+0xd4>)
 8013102:	429c      	cmp	r4, r3
 8013104:	d101      	bne.n	801310a <_puts_r+0x6e>
 8013106:	68ac      	ldr	r4, [r5, #8]
 8013108:	e7da      	b.n	80130c0 <_puts_r+0x24>
 801310a:	4b1a      	ldr	r3, [pc, #104]	; (8013174 <_puts_r+0xd8>)
 801310c:	429c      	cmp	r4, r3
 801310e:	bf08      	it	eq
 8013110:	68ec      	ldreq	r4, [r5, #12]
 8013112:	e7d5      	b.n	80130c0 <_puts_r+0x24>
 8013114:	4621      	mov	r1, r4
 8013116:	4628      	mov	r0, r5
 8013118:	f000 f888 	bl	801322c <__swsetup_r>
 801311c:	2800      	cmp	r0, #0
 801311e:	d0dd      	beq.n	80130dc <_puts_r+0x40>
 8013120:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013126:	07da      	lsls	r2, r3, #31
 8013128:	d405      	bmi.n	8013136 <_puts_r+0x9a>
 801312a:	89a3      	ldrh	r3, [r4, #12]
 801312c:	059b      	lsls	r3, r3, #22
 801312e:	d402      	bmi.n	8013136 <_puts_r+0x9a>
 8013130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013132:	f001 f8a1 	bl	8014278 <__retarget_lock_release_recursive>
 8013136:	4628      	mov	r0, r5
 8013138:	bd70      	pop	{r4, r5, r6, pc}
 801313a:	2b00      	cmp	r3, #0
 801313c:	da04      	bge.n	8013148 <_puts_r+0xac>
 801313e:	69a2      	ldr	r2, [r4, #24]
 8013140:	429a      	cmp	r2, r3
 8013142:	dc06      	bgt.n	8013152 <_puts_r+0xb6>
 8013144:	290a      	cmp	r1, #10
 8013146:	d004      	beq.n	8013152 <_puts_r+0xb6>
 8013148:	6823      	ldr	r3, [r4, #0]
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	6022      	str	r2, [r4, #0]
 801314e:	7019      	strb	r1, [r3, #0]
 8013150:	e7c5      	b.n	80130de <_puts_r+0x42>
 8013152:	4622      	mov	r2, r4
 8013154:	4628      	mov	r0, r5
 8013156:	f000 f817 	bl	8013188 <__swbuf_r>
 801315a:	3001      	adds	r0, #1
 801315c:	d1bf      	bne.n	80130de <_puts_r+0x42>
 801315e:	e7df      	b.n	8013120 <_puts_r+0x84>
 8013160:	6823      	ldr	r3, [r4, #0]
 8013162:	250a      	movs	r5, #10
 8013164:	1c5a      	adds	r2, r3, #1
 8013166:	6022      	str	r2, [r4, #0]
 8013168:	701d      	strb	r5, [r3, #0]
 801316a:	e7db      	b.n	8013124 <_puts_r+0x88>
 801316c:	08016e40 	.word	0x08016e40
 8013170:	08016e60 	.word	0x08016e60
 8013174:	08016e20 	.word	0x08016e20

08013178 <puts>:
 8013178:	4b02      	ldr	r3, [pc, #8]	; (8013184 <puts+0xc>)
 801317a:	4601      	mov	r1, r0
 801317c:	6818      	ldr	r0, [r3, #0]
 801317e:	f7ff bf8d 	b.w	801309c <_puts_r>
 8013182:	bf00      	nop
 8013184:	24000240 	.word	0x24000240

08013188 <__swbuf_r>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	460e      	mov	r6, r1
 801318c:	4614      	mov	r4, r2
 801318e:	4605      	mov	r5, r0
 8013190:	b118      	cbz	r0, 801319a <__swbuf_r+0x12>
 8013192:	6983      	ldr	r3, [r0, #24]
 8013194:	b90b      	cbnz	r3, 801319a <__swbuf_r+0x12>
 8013196:	f000 ffcb 	bl	8014130 <__sinit>
 801319a:	4b21      	ldr	r3, [pc, #132]	; (8013220 <__swbuf_r+0x98>)
 801319c:	429c      	cmp	r4, r3
 801319e:	d12b      	bne.n	80131f8 <__swbuf_r+0x70>
 80131a0:	686c      	ldr	r4, [r5, #4]
 80131a2:	69a3      	ldr	r3, [r4, #24]
 80131a4:	60a3      	str	r3, [r4, #8]
 80131a6:	89a3      	ldrh	r3, [r4, #12]
 80131a8:	071a      	lsls	r2, r3, #28
 80131aa:	d52f      	bpl.n	801320c <__swbuf_r+0x84>
 80131ac:	6923      	ldr	r3, [r4, #16]
 80131ae:	b36b      	cbz	r3, 801320c <__swbuf_r+0x84>
 80131b0:	6923      	ldr	r3, [r4, #16]
 80131b2:	6820      	ldr	r0, [r4, #0]
 80131b4:	1ac0      	subs	r0, r0, r3
 80131b6:	6963      	ldr	r3, [r4, #20]
 80131b8:	b2f6      	uxtb	r6, r6
 80131ba:	4283      	cmp	r3, r0
 80131bc:	4637      	mov	r7, r6
 80131be:	dc04      	bgt.n	80131ca <__swbuf_r+0x42>
 80131c0:	4621      	mov	r1, r4
 80131c2:	4628      	mov	r0, r5
 80131c4:	f000 ff20 	bl	8014008 <_fflush_r>
 80131c8:	bb30      	cbnz	r0, 8013218 <__swbuf_r+0x90>
 80131ca:	68a3      	ldr	r3, [r4, #8]
 80131cc:	3b01      	subs	r3, #1
 80131ce:	60a3      	str	r3, [r4, #8]
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	1c5a      	adds	r2, r3, #1
 80131d4:	6022      	str	r2, [r4, #0]
 80131d6:	701e      	strb	r6, [r3, #0]
 80131d8:	6963      	ldr	r3, [r4, #20]
 80131da:	3001      	adds	r0, #1
 80131dc:	4283      	cmp	r3, r0
 80131de:	d004      	beq.n	80131ea <__swbuf_r+0x62>
 80131e0:	89a3      	ldrh	r3, [r4, #12]
 80131e2:	07db      	lsls	r3, r3, #31
 80131e4:	d506      	bpl.n	80131f4 <__swbuf_r+0x6c>
 80131e6:	2e0a      	cmp	r6, #10
 80131e8:	d104      	bne.n	80131f4 <__swbuf_r+0x6c>
 80131ea:	4621      	mov	r1, r4
 80131ec:	4628      	mov	r0, r5
 80131ee:	f000 ff0b 	bl	8014008 <_fflush_r>
 80131f2:	b988      	cbnz	r0, 8013218 <__swbuf_r+0x90>
 80131f4:	4638      	mov	r0, r7
 80131f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131f8:	4b0a      	ldr	r3, [pc, #40]	; (8013224 <__swbuf_r+0x9c>)
 80131fa:	429c      	cmp	r4, r3
 80131fc:	d101      	bne.n	8013202 <__swbuf_r+0x7a>
 80131fe:	68ac      	ldr	r4, [r5, #8]
 8013200:	e7cf      	b.n	80131a2 <__swbuf_r+0x1a>
 8013202:	4b09      	ldr	r3, [pc, #36]	; (8013228 <__swbuf_r+0xa0>)
 8013204:	429c      	cmp	r4, r3
 8013206:	bf08      	it	eq
 8013208:	68ec      	ldreq	r4, [r5, #12]
 801320a:	e7ca      	b.n	80131a2 <__swbuf_r+0x1a>
 801320c:	4621      	mov	r1, r4
 801320e:	4628      	mov	r0, r5
 8013210:	f000 f80c 	bl	801322c <__swsetup_r>
 8013214:	2800      	cmp	r0, #0
 8013216:	d0cb      	beq.n	80131b0 <__swbuf_r+0x28>
 8013218:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801321c:	e7ea      	b.n	80131f4 <__swbuf_r+0x6c>
 801321e:	bf00      	nop
 8013220:	08016e40 	.word	0x08016e40
 8013224:	08016e60 	.word	0x08016e60
 8013228:	08016e20 	.word	0x08016e20

0801322c <__swsetup_r>:
 801322c:	4b32      	ldr	r3, [pc, #200]	; (80132f8 <__swsetup_r+0xcc>)
 801322e:	b570      	push	{r4, r5, r6, lr}
 8013230:	681d      	ldr	r5, [r3, #0]
 8013232:	4606      	mov	r6, r0
 8013234:	460c      	mov	r4, r1
 8013236:	b125      	cbz	r5, 8013242 <__swsetup_r+0x16>
 8013238:	69ab      	ldr	r3, [r5, #24]
 801323a:	b913      	cbnz	r3, 8013242 <__swsetup_r+0x16>
 801323c:	4628      	mov	r0, r5
 801323e:	f000 ff77 	bl	8014130 <__sinit>
 8013242:	4b2e      	ldr	r3, [pc, #184]	; (80132fc <__swsetup_r+0xd0>)
 8013244:	429c      	cmp	r4, r3
 8013246:	d10f      	bne.n	8013268 <__swsetup_r+0x3c>
 8013248:	686c      	ldr	r4, [r5, #4]
 801324a:	89a3      	ldrh	r3, [r4, #12]
 801324c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013250:	0719      	lsls	r1, r3, #28
 8013252:	d42c      	bmi.n	80132ae <__swsetup_r+0x82>
 8013254:	06dd      	lsls	r5, r3, #27
 8013256:	d411      	bmi.n	801327c <__swsetup_r+0x50>
 8013258:	2309      	movs	r3, #9
 801325a:	6033      	str	r3, [r6, #0]
 801325c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013260:	81a3      	strh	r3, [r4, #12]
 8013262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013266:	e03e      	b.n	80132e6 <__swsetup_r+0xba>
 8013268:	4b25      	ldr	r3, [pc, #148]	; (8013300 <__swsetup_r+0xd4>)
 801326a:	429c      	cmp	r4, r3
 801326c:	d101      	bne.n	8013272 <__swsetup_r+0x46>
 801326e:	68ac      	ldr	r4, [r5, #8]
 8013270:	e7eb      	b.n	801324a <__swsetup_r+0x1e>
 8013272:	4b24      	ldr	r3, [pc, #144]	; (8013304 <__swsetup_r+0xd8>)
 8013274:	429c      	cmp	r4, r3
 8013276:	bf08      	it	eq
 8013278:	68ec      	ldreq	r4, [r5, #12]
 801327a:	e7e6      	b.n	801324a <__swsetup_r+0x1e>
 801327c:	0758      	lsls	r0, r3, #29
 801327e:	d512      	bpl.n	80132a6 <__swsetup_r+0x7a>
 8013280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013282:	b141      	cbz	r1, 8013296 <__swsetup_r+0x6a>
 8013284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013288:	4299      	cmp	r1, r3
 801328a:	d002      	beq.n	8013292 <__swsetup_r+0x66>
 801328c:	4630      	mov	r0, r6
 801328e:	f001 fc09 	bl	8014aa4 <_free_r>
 8013292:	2300      	movs	r3, #0
 8013294:	6363      	str	r3, [r4, #52]	; 0x34
 8013296:	89a3      	ldrh	r3, [r4, #12]
 8013298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801329c:	81a3      	strh	r3, [r4, #12]
 801329e:	2300      	movs	r3, #0
 80132a0:	6063      	str	r3, [r4, #4]
 80132a2:	6923      	ldr	r3, [r4, #16]
 80132a4:	6023      	str	r3, [r4, #0]
 80132a6:	89a3      	ldrh	r3, [r4, #12]
 80132a8:	f043 0308 	orr.w	r3, r3, #8
 80132ac:	81a3      	strh	r3, [r4, #12]
 80132ae:	6923      	ldr	r3, [r4, #16]
 80132b0:	b94b      	cbnz	r3, 80132c6 <__swsetup_r+0x9a>
 80132b2:	89a3      	ldrh	r3, [r4, #12]
 80132b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132bc:	d003      	beq.n	80132c6 <__swsetup_r+0x9a>
 80132be:	4621      	mov	r1, r4
 80132c0:	4630      	mov	r0, r6
 80132c2:	f000 ffff 	bl	80142c4 <__smakebuf_r>
 80132c6:	89a0      	ldrh	r0, [r4, #12]
 80132c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132cc:	f010 0301 	ands.w	r3, r0, #1
 80132d0:	d00a      	beq.n	80132e8 <__swsetup_r+0xbc>
 80132d2:	2300      	movs	r3, #0
 80132d4:	60a3      	str	r3, [r4, #8]
 80132d6:	6963      	ldr	r3, [r4, #20]
 80132d8:	425b      	negs	r3, r3
 80132da:	61a3      	str	r3, [r4, #24]
 80132dc:	6923      	ldr	r3, [r4, #16]
 80132de:	b943      	cbnz	r3, 80132f2 <__swsetup_r+0xc6>
 80132e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132e4:	d1ba      	bne.n	801325c <__swsetup_r+0x30>
 80132e6:	bd70      	pop	{r4, r5, r6, pc}
 80132e8:	0781      	lsls	r1, r0, #30
 80132ea:	bf58      	it	pl
 80132ec:	6963      	ldrpl	r3, [r4, #20]
 80132ee:	60a3      	str	r3, [r4, #8]
 80132f0:	e7f4      	b.n	80132dc <__swsetup_r+0xb0>
 80132f2:	2000      	movs	r0, #0
 80132f4:	e7f7      	b.n	80132e6 <__swsetup_r+0xba>
 80132f6:	bf00      	nop
 80132f8:	24000240 	.word	0x24000240
 80132fc:	08016e40 	.word	0x08016e40
 8013300:	08016e60 	.word	0x08016e60
 8013304:	08016e20 	.word	0x08016e20

08013308 <quorem>:
 8013308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801330c:	6903      	ldr	r3, [r0, #16]
 801330e:	690c      	ldr	r4, [r1, #16]
 8013310:	42a3      	cmp	r3, r4
 8013312:	4607      	mov	r7, r0
 8013314:	f2c0 8081 	blt.w	801341a <quorem+0x112>
 8013318:	3c01      	subs	r4, #1
 801331a:	f101 0814 	add.w	r8, r1, #20
 801331e:	f100 0514 	add.w	r5, r0, #20
 8013322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801332c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013330:	3301      	adds	r3, #1
 8013332:	429a      	cmp	r2, r3
 8013334:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801333c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013340:	d331      	bcc.n	80133a6 <quorem+0x9e>
 8013342:	f04f 0e00 	mov.w	lr, #0
 8013346:	4640      	mov	r0, r8
 8013348:	46ac      	mov	ip, r5
 801334a:	46f2      	mov	sl, lr
 801334c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013350:	b293      	uxth	r3, r2
 8013352:	fb06 e303 	mla	r3, r6, r3, lr
 8013356:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801335a:	b29b      	uxth	r3, r3
 801335c:	ebaa 0303 	sub.w	r3, sl, r3
 8013360:	f8dc a000 	ldr.w	sl, [ip]
 8013364:	0c12      	lsrs	r2, r2, #16
 8013366:	fa13 f38a 	uxtah	r3, r3, sl
 801336a:	fb06 e202 	mla	r2, r6, r2, lr
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	9b00      	ldr	r3, [sp, #0]
 8013372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013376:	b292      	uxth	r2, r2
 8013378:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801337c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013380:	f8bd 3000 	ldrh.w	r3, [sp]
 8013384:	4581      	cmp	r9, r0
 8013386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801338a:	f84c 3b04 	str.w	r3, [ip], #4
 801338e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013392:	d2db      	bcs.n	801334c <quorem+0x44>
 8013394:	f855 300b 	ldr.w	r3, [r5, fp]
 8013398:	b92b      	cbnz	r3, 80133a6 <quorem+0x9e>
 801339a:	9b01      	ldr	r3, [sp, #4]
 801339c:	3b04      	subs	r3, #4
 801339e:	429d      	cmp	r5, r3
 80133a0:	461a      	mov	r2, r3
 80133a2:	d32e      	bcc.n	8013402 <quorem+0xfa>
 80133a4:	613c      	str	r4, [r7, #16]
 80133a6:	4638      	mov	r0, r7
 80133a8:	f001 fa64 	bl	8014874 <__mcmp>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	db24      	blt.n	80133fa <quorem+0xf2>
 80133b0:	3601      	adds	r6, #1
 80133b2:	4628      	mov	r0, r5
 80133b4:	f04f 0c00 	mov.w	ip, #0
 80133b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80133bc:	f8d0 e000 	ldr.w	lr, [r0]
 80133c0:	b293      	uxth	r3, r2
 80133c2:	ebac 0303 	sub.w	r3, ip, r3
 80133c6:	0c12      	lsrs	r2, r2, #16
 80133c8:	fa13 f38e 	uxtah	r3, r3, lr
 80133cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80133d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133da:	45c1      	cmp	r9, r8
 80133dc:	f840 3b04 	str.w	r3, [r0], #4
 80133e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80133e4:	d2e8      	bcs.n	80133b8 <quorem+0xb0>
 80133e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133ee:	b922      	cbnz	r2, 80133fa <quorem+0xf2>
 80133f0:	3b04      	subs	r3, #4
 80133f2:	429d      	cmp	r5, r3
 80133f4:	461a      	mov	r2, r3
 80133f6:	d30a      	bcc.n	801340e <quorem+0x106>
 80133f8:	613c      	str	r4, [r7, #16]
 80133fa:	4630      	mov	r0, r6
 80133fc:	b003      	add	sp, #12
 80133fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013402:	6812      	ldr	r2, [r2, #0]
 8013404:	3b04      	subs	r3, #4
 8013406:	2a00      	cmp	r2, #0
 8013408:	d1cc      	bne.n	80133a4 <quorem+0x9c>
 801340a:	3c01      	subs	r4, #1
 801340c:	e7c7      	b.n	801339e <quorem+0x96>
 801340e:	6812      	ldr	r2, [r2, #0]
 8013410:	3b04      	subs	r3, #4
 8013412:	2a00      	cmp	r2, #0
 8013414:	d1f0      	bne.n	80133f8 <quorem+0xf0>
 8013416:	3c01      	subs	r4, #1
 8013418:	e7eb      	b.n	80133f2 <quorem+0xea>
 801341a:	2000      	movs	r0, #0
 801341c:	e7ee      	b.n	80133fc <quorem+0xf4>
	...

08013420 <_dtoa_r>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	ed2d 8b02 	vpush	{d8}
 8013428:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801342a:	b091      	sub	sp, #68	; 0x44
 801342c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013430:	ec59 8b10 	vmov	r8, r9, d0
 8013434:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013436:	9106      	str	r1, [sp, #24]
 8013438:	4606      	mov	r6, r0
 801343a:	9208      	str	r2, [sp, #32]
 801343c:	930c      	str	r3, [sp, #48]	; 0x30
 801343e:	b975      	cbnz	r5, 801345e <_dtoa_r+0x3e>
 8013440:	2010      	movs	r0, #16
 8013442:	f000 ff7f 	bl	8014344 <malloc>
 8013446:	4602      	mov	r2, r0
 8013448:	6270      	str	r0, [r6, #36]	; 0x24
 801344a:	b920      	cbnz	r0, 8013456 <_dtoa_r+0x36>
 801344c:	4baa      	ldr	r3, [pc, #680]	; (80136f8 <_dtoa_r+0x2d8>)
 801344e:	21ea      	movs	r1, #234	; 0xea
 8013450:	48aa      	ldr	r0, [pc, #680]	; (80136fc <_dtoa_r+0x2dc>)
 8013452:	f001 fc6d 	bl	8014d30 <__assert_func>
 8013456:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801345a:	6005      	str	r5, [r0, #0]
 801345c:	60c5      	str	r5, [r0, #12]
 801345e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013460:	6819      	ldr	r1, [r3, #0]
 8013462:	b151      	cbz	r1, 801347a <_dtoa_r+0x5a>
 8013464:	685a      	ldr	r2, [r3, #4]
 8013466:	604a      	str	r2, [r1, #4]
 8013468:	2301      	movs	r3, #1
 801346a:	4093      	lsls	r3, r2
 801346c:	608b      	str	r3, [r1, #8]
 801346e:	4630      	mov	r0, r6
 8013470:	f000 ffbe 	bl	80143f0 <_Bfree>
 8013474:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013476:	2200      	movs	r2, #0
 8013478:	601a      	str	r2, [r3, #0]
 801347a:	f1b9 0300 	subs.w	r3, r9, #0
 801347e:	bfbb      	ittet	lt
 8013480:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013484:	9303      	strlt	r3, [sp, #12]
 8013486:	2300      	movge	r3, #0
 8013488:	2201      	movlt	r2, #1
 801348a:	bfac      	ite	ge
 801348c:	6023      	strge	r3, [r4, #0]
 801348e:	6022      	strlt	r2, [r4, #0]
 8013490:	4b9b      	ldr	r3, [pc, #620]	; (8013700 <_dtoa_r+0x2e0>)
 8013492:	9c03      	ldr	r4, [sp, #12]
 8013494:	43a3      	bics	r3, r4
 8013496:	d11c      	bne.n	80134d2 <_dtoa_r+0xb2>
 8013498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801349a:	f242 730f 	movw	r3, #9999	; 0x270f
 801349e:	6013      	str	r3, [r2, #0]
 80134a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80134a4:	ea53 0308 	orrs.w	r3, r3, r8
 80134a8:	f000 84fd 	beq.w	8013ea6 <_dtoa_r+0xa86>
 80134ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134ae:	b963      	cbnz	r3, 80134ca <_dtoa_r+0xaa>
 80134b0:	4b94      	ldr	r3, [pc, #592]	; (8013704 <_dtoa_r+0x2e4>)
 80134b2:	e01f      	b.n	80134f4 <_dtoa_r+0xd4>
 80134b4:	4b94      	ldr	r3, [pc, #592]	; (8013708 <_dtoa_r+0x2e8>)
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	3308      	adds	r3, #8
 80134ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80134bc:	6013      	str	r3, [r2, #0]
 80134be:	9801      	ldr	r0, [sp, #4]
 80134c0:	b011      	add	sp, #68	; 0x44
 80134c2:	ecbd 8b02 	vpop	{d8}
 80134c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134ca:	4b8e      	ldr	r3, [pc, #568]	; (8013704 <_dtoa_r+0x2e4>)
 80134cc:	9301      	str	r3, [sp, #4]
 80134ce:	3303      	adds	r3, #3
 80134d0:	e7f3      	b.n	80134ba <_dtoa_r+0x9a>
 80134d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80134d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80134da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134de:	d10b      	bne.n	80134f8 <_dtoa_r+0xd8>
 80134e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134e2:	2301      	movs	r3, #1
 80134e4:	6013      	str	r3, [r2, #0]
 80134e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f000 84d9 	beq.w	8013ea0 <_dtoa_r+0xa80>
 80134ee:	4887      	ldr	r0, [pc, #540]	; (801370c <_dtoa_r+0x2ec>)
 80134f0:	6018      	str	r0, [r3, #0]
 80134f2:	1e43      	subs	r3, r0, #1
 80134f4:	9301      	str	r3, [sp, #4]
 80134f6:	e7e2      	b.n	80134be <_dtoa_r+0x9e>
 80134f8:	a90f      	add	r1, sp, #60	; 0x3c
 80134fa:	aa0e      	add	r2, sp, #56	; 0x38
 80134fc:	4630      	mov	r0, r6
 80134fe:	eeb0 0b48 	vmov.f64	d0, d8
 8013502:	f001 fa5d 	bl	80149c0 <__d2b>
 8013506:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801350a:	4605      	mov	r5, r0
 801350c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801350e:	2900      	cmp	r1, #0
 8013510:	d046      	beq.n	80135a0 <_dtoa_r+0x180>
 8013512:	ee18 4a90 	vmov	r4, s17
 8013516:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801351a:	ec53 2b18 	vmov	r2, r3, d8
 801351e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013522:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013526:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801352a:	2400      	movs	r4, #0
 801352c:	ec43 2b16 	vmov	d6, r2, r3
 8013530:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013534:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80136e0 <_dtoa_r+0x2c0>
 8013538:	ee36 7b47 	vsub.f64	d7, d6, d7
 801353c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80136e8 <_dtoa_r+0x2c8>
 8013540:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013544:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80136f0 <_dtoa_r+0x2d0>
 8013548:	ee07 1a90 	vmov	s15, r1
 801354c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013550:	eeb0 7b46 	vmov.f64	d7, d6
 8013554:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013558:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801355c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013564:	ee16 ba90 	vmov	fp, s13
 8013568:	940a      	str	r4, [sp, #40]	; 0x28
 801356a:	d508      	bpl.n	801357e <_dtoa_r+0x15e>
 801356c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013570:	eeb4 6b47 	vcmp.f64	d6, d7
 8013574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013578:	bf18      	it	ne
 801357a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801357e:	f1bb 0f16 	cmp.w	fp, #22
 8013582:	d82f      	bhi.n	80135e4 <_dtoa_r+0x1c4>
 8013584:	4b62      	ldr	r3, [pc, #392]	; (8013710 <_dtoa_r+0x2f0>)
 8013586:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801358a:	ed93 7b00 	vldr	d7, [r3]
 801358e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013596:	d501      	bpl.n	801359c <_dtoa_r+0x17c>
 8013598:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801359c:	2300      	movs	r3, #0
 801359e:	e022      	b.n	80135e6 <_dtoa_r+0x1c6>
 80135a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80135a2:	4401      	add	r1, r0
 80135a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80135a8:	2b20      	cmp	r3, #32
 80135aa:	bfc1      	itttt	gt
 80135ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80135b0:	fa04 f303 	lslgt.w	r3, r4, r3
 80135b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80135b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80135bc:	bfd6      	itet	le
 80135be:	f1c3 0320 	rsble	r3, r3, #32
 80135c2:	ea43 0808 	orrgt.w	r8, r3, r8
 80135c6:	fa08 f803 	lslle.w	r8, r8, r3
 80135ca:	ee07 8a90 	vmov	s15, r8
 80135ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80135d2:	3901      	subs	r1, #1
 80135d4:	ee17 4a90 	vmov	r4, s15
 80135d8:	ec53 2b17 	vmov	r2, r3, d7
 80135dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80135e0:	2401      	movs	r4, #1
 80135e2:	e7a3      	b.n	801352c <_dtoa_r+0x10c>
 80135e4:	2301      	movs	r3, #1
 80135e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80135e8:	1a43      	subs	r3, r0, r1
 80135ea:	1e5a      	subs	r2, r3, #1
 80135ec:	bf45      	ittet	mi
 80135ee:	f1c3 0301 	rsbmi	r3, r3, #1
 80135f2:	9304      	strmi	r3, [sp, #16]
 80135f4:	2300      	movpl	r3, #0
 80135f6:	2300      	movmi	r3, #0
 80135f8:	9205      	str	r2, [sp, #20]
 80135fa:	bf54      	ite	pl
 80135fc:	9304      	strpl	r3, [sp, #16]
 80135fe:	9305      	strmi	r3, [sp, #20]
 8013600:	f1bb 0f00 	cmp.w	fp, #0
 8013604:	db18      	blt.n	8013638 <_dtoa_r+0x218>
 8013606:	9b05      	ldr	r3, [sp, #20]
 8013608:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801360c:	445b      	add	r3, fp
 801360e:	9305      	str	r3, [sp, #20]
 8013610:	2300      	movs	r3, #0
 8013612:	9a06      	ldr	r2, [sp, #24]
 8013614:	2a09      	cmp	r2, #9
 8013616:	d849      	bhi.n	80136ac <_dtoa_r+0x28c>
 8013618:	2a05      	cmp	r2, #5
 801361a:	bfc4      	itt	gt
 801361c:	3a04      	subgt	r2, #4
 801361e:	9206      	strgt	r2, [sp, #24]
 8013620:	9a06      	ldr	r2, [sp, #24]
 8013622:	f1a2 0202 	sub.w	r2, r2, #2
 8013626:	bfcc      	ite	gt
 8013628:	2400      	movgt	r4, #0
 801362a:	2401      	movle	r4, #1
 801362c:	2a03      	cmp	r2, #3
 801362e:	d848      	bhi.n	80136c2 <_dtoa_r+0x2a2>
 8013630:	e8df f002 	tbb	[pc, r2]
 8013634:	3a2c2e0b 	.word	0x3a2c2e0b
 8013638:	9b04      	ldr	r3, [sp, #16]
 801363a:	2200      	movs	r2, #0
 801363c:	eba3 030b 	sub.w	r3, r3, fp
 8013640:	9304      	str	r3, [sp, #16]
 8013642:	9209      	str	r2, [sp, #36]	; 0x24
 8013644:	f1cb 0300 	rsb	r3, fp, #0
 8013648:	e7e3      	b.n	8013612 <_dtoa_r+0x1f2>
 801364a:	2200      	movs	r2, #0
 801364c:	9207      	str	r2, [sp, #28]
 801364e:	9a08      	ldr	r2, [sp, #32]
 8013650:	2a00      	cmp	r2, #0
 8013652:	dc39      	bgt.n	80136c8 <_dtoa_r+0x2a8>
 8013654:	f04f 0a01 	mov.w	sl, #1
 8013658:	46d1      	mov	r9, sl
 801365a:	4652      	mov	r2, sl
 801365c:	f8cd a020 	str.w	sl, [sp, #32]
 8013660:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013662:	2100      	movs	r1, #0
 8013664:	6079      	str	r1, [r7, #4]
 8013666:	2004      	movs	r0, #4
 8013668:	f100 0c14 	add.w	ip, r0, #20
 801366c:	4594      	cmp	ip, r2
 801366e:	6879      	ldr	r1, [r7, #4]
 8013670:	d92f      	bls.n	80136d2 <_dtoa_r+0x2b2>
 8013672:	4630      	mov	r0, r6
 8013674:	930d      	str	r3, [sp, #52]	; 0x34
 8013676:	f000 fe7b 	bl	8014370 <_Balloc>
 801367a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801367c:	9001      	str	r0, [sp, #4]
 801367e:	4602      	mov	r2, r0
 8013680:	2800      	cmp	r0, #0
 8013682:	d149      	bne.n	8013718 <_dtoa_r+0x2f8>
 8013684:	4b23      	ldr	r3, [pc, #140]	; (8013714 <_dtoa_r+0x2f4>)
 8013686:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801368a:	e6e1      	b.n	8013450 <_dtoa_r+0x30>
 801368c:	2201      	movs	r2, #1
 801368e:	e7dd      	b.n	801364c <_dtoa_r+0x22c>
 8013690:	2200      	movs	r2, #0
 8013692:	9207      	str	r2, [sp, #28]
 8013694:	9a08      	ldr	r2, [sp, #32]
 8013696:	eb0b 0a02 	add.w	sl, fp, r2
 801369a:	f10a 0901 	add.w	r9, sl, #1
 801369e:	464a      	mov	r2, r9
 80136a0:	2a01      	cmp	r2, #1
 80136a2:	bfb8      	it	lt
 80136a4:	2201      	movlt	r2, #1
 80136a6:	e7db      	b.n	8013660 <_dtoa_r+0x240>
 80136a8:	2201      	movs	r2, #1
 80136aa:	e7f2      	b.n	8013692 <_dtoa_r+0x272>
 80136ac:	2401      	movs	r4, #1
 80136ae:	2200      	movs	r2, #0
 80136b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80136b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80136b8:	2100      	movs	r1, #0
 80136ba:	46d1      	mov	r9, sl
 80136bc:	2212      	movs	r2, #18
 80136be:	9108      	str	r1, [sp, #32]
 80136c0:	e7ce      	b.n	8013660 <_dtoa_r+0x240>
 80136c2:	2201      	movs	r2, #1
 80136c4:	9207      	str	r2, [sp, #28]
 80136c6:	e7f5      	b.n	80136b4 <_dtoa_r+0x294>
 80136c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80136cc:	46d1      	mov	r9, sl
 80136ce:	4652      	mov	r2, sl
 80136d0:	e7c6      	b.n	8013660 <_dtoa_r+0x240>
 80136d2:	3101      	adds	r1, #1
 80136d4:	6079      	str	r1, [r7, #4]
 80136d6:	0040      	lsls	r0, r0, #1
 80136d8:	e7c6      	b.n	8013668 <_dtoa_r+0x248>
 80136da:	bf00      	nop
 80136dc:	f3af 8000 	nop.w
 80136e0:	636f4361 	.word	0x636f4361
 80136e4:	3fd287a7 	.word	0x3fd287a7
 80136e8:	8b60c8b3 	.word	0x8b60c8b3
 80136ec:	3fc68a28 	.word	0x3fc68a28
 80136f0:	509f79fb 	.word	0x509f79fb
 80136f4:	3fd34413 	.word	0x3fd34413
 80136f8:	08016d9d 	.word	0x08016d9d
 80136fc:	08016db4 	.word	0x08016db4
 8013700:	7ff00000 	.word	0x7ff00000
 8013704:	08016d99 	.word	0x08016d99
 8013708:	08016d90 	.word	0x08016d90
 801370c:	08016d6d 	.word	0x08016d6d
 8013710:	08016f08 	.word	0x08016f08
 8013714:	08016e0f 	.word	0x08016e0f
 8013718:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801371a:	9901      	ldr	r1, [sp, #4]
 801371c:	6011      	str	r1, [r2, #0]
 801371e:	f1b9 0f0e 	cmp.w	r9, #14
 8013722:	d86c      	bhi.n	80137fe <_dtoa_r+0x3de>
 8013724:	2c00      	cmp	r4, #0
 8013726:	d06a      	beq.n	80137fe <_dtoa_r+0x3de>
 8013728:	f1bb 0f00 	cmp.w	fp, #0
 801372c:	f340 80a0 	ble.w	8013870 <_dtoa_r+0x450>
 8013730:	49c1      	ldr	r1, [pc, #772]	; (8013a38 <_dtoa_r+0x618>)
 8013732:	f00b 020f 	and.w	r2, fp, #15
 8013736:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801373a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801373e:	ed92 7b00 	vldr	d7, [r2]
 8013742:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013746:	f000 8087 	beq.w	8013858 <_dtoa_r+0x438>
 801374a:	4abc      	ldr	r2, [pc, #752]	; (8013a3c <_dtoa_r+0x61c>)
 801374c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013750:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013754:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013758:	f001 010f 	and.w	r1, r1, #15
 801375c:	2203      	movs	r2, #3
 801375e:	48b7      	ldr	r0, [pc, #732]	; (8013a3c <_dtoa_r+0x61c>)
 8013760:	2900      	cmp	r1, #0
 8013762:	d17b      	bne.n	801385c <_dtoa_r+0x43c>
 8013764:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013768:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801376c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013772:	2900      	cmp	r1, #0
 8013774:	f000 80a2 	beq.w	80138bc <_dtoa_r+0x49c>
 8013778:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801377c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013780:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013788:	f140 8098 	bpl.w	80138bc <_dtoa_r+0x49c>
 801378c:	f1b9 0f00 	cmp.w	r9, #0
 8013790:	f000 8094 	beq.w	80138bc <_dtoa_r+0x49c>
 8013794:	f1ba 0f00 	cmp.w	sl, #0
 8013798:	dd2f      	ble.n	80137fa <_dtoa_r+0x3da>
 801379a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801379e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80137a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137a6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80137aa:	3201      	adds	r2, #1
 80137ac:	4650      	mov	r0, sl
 80137ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80137b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80137b6:	ee07 2a90 	vmov	s15, r2
 80137ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80137be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80137c2:	ee15 4a90 	vmov	r4, s11
 80137c6:	ec52 1b15 	vmov	r1, r2, d5
 80137ca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80137ce:	2800      	cmp	r0, #0
 80137d0:	d177      	bne.n	80138c2 <_dtoa_r+0x4a2>
 80137d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80137d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80137da:	ec42 1b17 	vmov	d7, r1, r2
 80137de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137e6:	f300 8263 	bgt.w	8013cb0 <_dtoa_r+0x890>
 80137ea:	eeb1 7b47 	vneg.f64	d7, d7
 80137ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f6:	f100 8258 	bmi.w	8013caa <_dtoa_r+0x88a>
 80137fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80137fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013800:	2a00      	cmp	r2, #0
 8013802:	f2c0 811d 	blt.w	8013a40 <_dtoa_r+0x620>
 8013806:	f1bb 0f0e 	cmp.w	fp, #14
 801380a:	f300 8119 	bgt.w	8013a40 <_dtoa_r+0x620>
 801380e:	4b8a      	ldr	r3, [pc, #552]	; (8013a38 <_dtoa_r+0x618>)
 8013810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013814:	ed93 6b00 	vldr	d6, [r3]
 8013818:	9b08      	ldr	r3, [sp, #32]
 801381a:	2b00      	cmp	r3, #0
 801381c:	f280 80b7 	bge.w	801398e <_dtoa_r+0x56e>
 8013820:	f1b9 0f00 	cmp.w	r9, #0
 8013824:	f300 80b3 	bgt.w	801398e <_dtoa_r+0x56e>
 8013828:	f040 823f 	bne.w	8013caa <_dtoa_r+0x88a>
 801382c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013830:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013834:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013838:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013840:	464c      	mov	r4, r9
 8013842:	464f      	mov	r7, r9
 8013844:	f280 8215 	bge.w	8013c72 <_dtoa_r+0x852>
 8013848:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801384c:	2331      	movs	r3, #49	; 0x31
 801384e:	f808 3b01 	strb.w	r3, [r8], #1
 8013852:	f10b 0b01 	add.w	fp, fp, #1
 8013856:	e211      	b.n	8013c7c <_dtoa_r+0x85c>
 8013858:	2202      	movs	r2, #2
 801385a:	e780      	b.n	801375e <_dtoa_r+0x33e>
 801385c:	07cc      	lsls	r4, r1, #31
 801385e:	d504      	bpl.n	801386a <_dtoa_r+0x44a>
 8013860:	ed90 6b00 	vldr	d6, [r0]
 8013864:	3201      	adds	r2, #1
 8013866:	ee27 7b06 	vmul.f64	d7, d7, d6
 801386a:	1049      	asrs	r1, r1, #1
 801386c:	3008      	adds	r0, #8
 801386e:	e777      	b.n	8013760 <_dtoa_r+0x340>
 8013870:	d022      	beq.n	80138b8 <_dtoa_r+0x498>
 8013872:	f1cb 0100 	rsb	r1, fp, #0
 8013876:	4a70      	ldr	r2, [pc, #448]	; (8013a38 <_dtoa_r+0x618>)
 8013878:	f001 000f 	and.w	r0, r1, #15
 801387c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013880:	ed92 7b00 	vldr	d7, [r2]
 8013884:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013888:	ed8d 7b02 	vstr	d7, [sp, #8]
 801388c:	486b      	ldr	r0, [pc, #428]	; (8013a3c <_dtoa_r+0x61c>)
 801388e:	1109      	asrs	r1, r1, #4
 8013890:	2400      	movs	r4, #0
 8013892:	2202      	movs	r2, #2
 8013894:	b929      	cbnz	r1, 80138a2 <_dtoa_r+0x482>
 8013896:	2c00      	cmp	r4, #0
 8013898:	f43f af6a 	beq.w	8013770 <_dtoa_r+0x350>
 801389c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138a0:	e766      	b.n	8013770 <_dtoa_r+0x350>
 80138a2:	07cf      	lsls	r7, r1, #31
 80138a4:	d505      	bpl.n	80138b2 <_dtoa_r+0x492>
 80138a6:	ed90 6b00 	vldr	d6, [r0]
 80138aa:	3201      	adds	r2, #1
 80138ac:	2401      	movs	r4, #1
 80138ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80138b2:	1049      	asrs	r1, r1, #1
 80138b4:	3008      	adds	r0, #8
 80138b6:	e7ed      	b.n	8013894 <_dtoa_r+0x474>
 80138b8:	2202      	movs	r2, #2
 80138ba:	e759      	b.n	8013770 <_dtoa_r+0x350>
 80138bc:	465f      	mov	r7, fp
 80138be:	4648      	mov	r0, r9
 80138c0:	e775      	b.n	80137ae <_dtoa_r+0x38e>
 80138c2:	ec42 1b17 	vmov	d7, r1, r2
 80138c6:	4a5c      	ldr	r2, [pc, #368]	; (8013a38 <_dtoa_r+0x618>)
 80138c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80138cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80138d0:	9a01      	ldr	r2, [sp, #4]
 80138d2:	1814      	adds	r4, r2, r0
 80138d4:	9a07      	ldr	r2, [sp, #28]
 80138d6:	b352      	cbz	r2, 801392e <_dtoa_r+0x50e>
 80138d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80138dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80138e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80138e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80138e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80138ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80138f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80138f4:	ee14 2a90 	vmov	r2, s9
 80138f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80138fc:	3230      	adds	r2, #48	; 0x30
 80138fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013902:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390a:	f808 2b01 	strb.w	r2, [r8], #1
 801390e:	d439      	bmi.n	8013984 <_dtoa_r+0x564>
 8013910:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013914:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391c:	d472      	bmi.n	8013a04 <_dtoa_r+0x5e4>
 801391e:	45a0      	cmp	r8, r4
 8013920:	f43f af6b 	beq.w	80137fa <_dtoa_r+0x3da>
 8013924:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013928:	ee26 6b03 	vmul.f64	d6, d6, d3
 801392c:	e7e0      	b.n	80138f0 <_dtoa_r+0x4d0>
 801392e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013932:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013936:	4621      	mov	r1, r4
 8013938:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801393c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013940:	ee14 2a90 	vmov	r2, s9
 8013944:	3230      	adds	r2, #48	; 0x30
 8013946:	f808 2b01 	strb.w	r2, [r8], #1
 801394a:	45a0      	cmp	r8, r4
 801394c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013950:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013954:	d118      	bne.n	8013988 <_dtoa_r+0x568>
 8013956:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801395a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801395e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013966:	dc4d      	bgt.n	8013a04 <_dtoa_r+0x5e4>
 8013968:	ee35 7b47 	vsub.f64	d7, d5, d7
 801396c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013974:	f57f af41 	bpl.w	80137fa <_dtoa_r+0x3da>
 8013978:	4688      	mov	r8, r1
 801397a:	3901      	subs	r1, #1
 801397c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013980:	2b30      	cmp	r3, #48	; 0x30
 8013982:	d0f9      	beq.n	8013978 <_dtoa_r+0x558>
 8013984:	46bb      	mov	fp, r7
 8013986:	e02a      	b.n	80139de <_dtoa_r+0x5be>
 8013988:	ee26 6b03 	vmul.f64	d6, d6, d3
 801398c:	e7d6      	b.n	801393c <_dtoa_r+0x51c>
 801398e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013992:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013996:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801399a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801399e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80139a2:	ee15 3a10 	vmov	r3, s10
 80139a6:	3330      	adds	r3, #48	; 0x30
 80139a8:	f808 3b01 	strb.w	r3, [r8], #1
 80139ac:	9b01      	ldr	r3, [sp, #4]
 80139ae:	eba8 0303 	sub.w	r3, r8, r3
 80139b2:	4599      	cmp	r9, r3
 80139b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80139b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80139bc:	d133      	bne.n	8013a26 <_dtoa_r+0x606>
 80139be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80139c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80139c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ca:	dc1a      	bgt.n	8013a02 <_dtoa_r+0x5e2>
 80139cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80139d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d4:	d103      	bne.n	80139de <_dtoa_r+0x5be>
 80139d6:	ee15 3a10 	vmov	r3, s10
 80139da:	07d9      	lsls	r1, r3, #31
 80139dc:	d411      	bmi.n	8013a02 <_dtoa_r+0x5e2>
 80139de:	4629      	mov	r1, r5
 80139e0:	4630      	mov	r0, r6
 80139e2:	f000 fd05 	bl	80143f0 <_Bfree>
 80139e6:	2300      	movs	r3, #0
 80139e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139ea:	f888 3000 	strb.w	r3, [r8]
 80139ee:	f10b 0301 	add.w	r3, fp, #1
 80139f2:	6013      	str	r3, [r2, #0]
 80139f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f43f ad61 	beq.w	80134be <_dtoa_r+0x9e>
 80139fc:	f8c3 8000 	str.w	r8, [r3]
 8013a00:	e55d      	b.n	80134be <_dtoa_r+0x9e>
 8013a02:	465f      	mov	r7, fp
 8013a04:	4643      	mov	r3, r8
 8013a06:	4698      	mov	r8, r3
 8013a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a0c:	2a39      	cmp	r2, #57	; 0x39
 8013a0e:	d106      	bne.n	8013a1e <_dtoa_r+0x5fe>
 8013a10:	9a01      	ldr	r2, [sp, #4]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d1f7      	bne.n	8013a06 <_dtoa_r+0x5e6>
 8013a16:	9901      	ldr	r1, [sp, #4]
 8013a18:	2230      	movs	r2, #48	; 0x30
 8013a1a:	3701      	adds	r7, #1
 8013a1c:	700a      	strb	r2, [r1, #0]
 8013a1e:	781a      	ldrb	r2, [r3, #0]
 8013a20:	3201      	adds	r2, #1
 8013a22:	701a      	strb	r2, [r3, #0]
 8013a24:	e7ae      	b.n	8013984 <_dtoa_r+0x564>
 8013a26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013a2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a32:	d1b2      	bne.n	801399a <_dtoa_r+0x57a>
 8013a34:	e7d3      	b.n	80139de <_dtoa_r+0x5be>
 8013a36:	bf00      	nop
 8013a38:	08016f08 	.word	0x08016f08
 8013a3c:	08016ee0 	.word	0x08016ee0
 8013a40:	9907      	ldr	r1, [sp, #28]
 8013a42:	2900      	cmp	r1, #0
 8013a44:	f000 80d0 	beq.w	8013be8 <_dtoa_r+0x7c8>
 8013a48:	9906      	ldr	r1, [sp, #24]
 8013a4a:	2901      	cmp	r1, #1
 8013a4c:	f300 80b4 	bgt.w	8013bb8 <_dtoa_r+0x798>
 8013a50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013a52:	2900      	cmp	r1, #0
 8013a54:	f000 80ac 	beq.w	8013bb0 <_dtoa_r+0x790>
 8013a58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013a5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013a60:	461c      	mov	r4, r3
 8013a62:	930a      	str	r3, [sp, #40]	; 0x28
 8013a64:	9b04      	ldr	r3, [sp, #16]
 8013a66:	4413      	add	r3, r2
 8013a68:	9304      	str	r3, [sp, #16]
 8013a6a:	9b05      	ldr	r3, [sp, #20]
 8013a6c:	2101      	movs	r1, #1
 8013a6e:	4413      	add	r3, r2
 8013a70:	4630      	mov	r0, r6
 8013a72:	9305      	str	r3, [sp, #20]
 8013a74:	f000 fd74 	bl	8014560 <__i2b>
 8013a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a7a:	4607      	mov	r7, r0
 8013a7c:	f1b8 0f00 	cmp.w	r8, #0
 8013a80:	dd0d      	ble.n	8013a9e <_dtoa_r+0x67e>
 8013a82:	9a05      	ldr	r2, [sp, #20]
 8013a84:	2a00      	cmp	r2, #0
 8013a86:	dd0a      	ble.n	8013a9e <_dtoa_r+0x67e>
 8013a88:	4542      	cmp	r2, r8
 8013a8a:	9904      	ldr	r1, [sp, #16]
 8013a8c:	bfa8      	it	ge
 8013a8e:	4642      	movge	r2, r8
 8013a90:	1a89      	subs	r1, r1, r2
 8013a92:	9104      	str	r1, [sp, #16]
 8013a94:	9905      	ldr	r1, [sp, #20]
 8013a96:	eba8 0802 	sub.w	r8, r8, r2
 8013a9a:	1a8a      	subs	r2, r1, r2
 8013a9c:	9205      	str	r2, [sp, #20]
 8013a9e:	b303      	cbz	r3, 8013ae2 <_dtoa_r+0x6c2>
 8013aa0:	9a07      	ldr	r2, [sp, #28]
 8013aa2:	2a00      	cmp	r2, #0
 8013aa4:	f000 80a5 	beq.w	8013bf2 <_dtoa_r+0x7d2>
 8013aa8:	2c00      	cmp	r4, #0
 8013aaa:	dd13      	ble.n	8013ad4 <_dtoa_r+0x6b4>
 8013aac:	4639      	mov	r1, r7
 8013aae:	4622      	mov	r2, r4
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	930d      	str	r3, [sp, #52]	; 0x34
 8013ab4:	f000 fe14 	bl	80146e0 <__pow5mult>
 8013ab8:	462a      	mov	r2, r5
 8013aba:	4601      	mov	r1, r0
 8013abc:	4607      	mov	r7, r0
 8013abe:	4630      	mov	r0, r6
 8013ac0:	f000 fd64 	bl	801458c <__multiply>
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	900a      	str	r0, [sp, #40]	; 0x28
 8013ac8:	4630      	mov	r0, r6
 8013aca:	f000 fc91 	bl	80143f0 <_Bfree>
 8013ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ad2:	4615      	mov	r5, r2
 8013ad4:	1b1a      	subs	r2, r3, r4
 8013ad6:	d004      	beq.n	8013ae2 <_dtoa_r+0x6c2>
 8013ad8:	4629      	mov	r1, r5
 8013ada:	4630      	mov	r0, r6
 8013adc:	f000 fe00 	bl	80146e0 <__pow5mult>
 8013ae0:	4605      	mov	r5, r0
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	f000 fd3b 	bl	8014560 <__i2b>
 8013aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	4604      	mov	r4, r0
 8013af0:	f340 8081 	ble.w	8013bf6 <_dtoa_r+0x7d6>
 8013af4:	461a      	mov	r2, r3
 8013af6:	4601      	mov	r1, r0
 8013af8:	4630      	mov	r0, r6
 8013afa:	f000 fdf1 	bl	80146e0 <__pow5mult>
 8013afe:	9b06      	ldr	r3, [sp, #24]
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	4604      	mov	r4, r0
 8013b04:	dd7a      	ble.n	8013bfc <_dtoa_r+0x7dc>
 8013b06:	2300      	movs	r3, #0
 8013b08:	930a      	str	r3, [sp, #40]	; 0x28
 8013b0a:	6922      	ldr	r2, [r4, #16]
 8013b0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013b10:	6910      	ldr	r0, [r2, #16]
 8013b12:	f000 fcd5 	bl	80144c0 <__hi0bits>
 8013b16:	f1c0 0020 	rsb	r0, r0, #32
 8013b1a:	9b05      	ldr	r3, [sp, #20]
 8013b1c:	4418      	add	r0, r3
 8013b1e:	f010 001f 	ands.w	r0, r0, #31
 8013b22:	f000 808c 	beq.w	8013c3e <_dtoa_r+0x81e>
 8013b26:	f1c0 0220 	rsb	r2, r0, #32
 8013b2a:	2a04      	cmp	r2, #4
 8013b2c:	f340 8085 	ble.w	8013c3a <_dtoa_r+0x81a>
 8013b30:	f1c0 001c 	rsb	r0, r0, #28
 8013b34:	9b04      	ldr	r3, [sp, #16]
 8013b36:	4403      	add	r3, r0
 8013b38:	9304      	str	r3, [sp, #16]
 8013b3a:	9b05      	ldr	r3, [sp, #20]
 8013b3c:	4403      	add	r3, r0
 8013b3e:	4480      	add	r8, r0
 8013b40:	9305      	str	r3, [sp, #20]
 8013b42:	9b04      	ldr	r3, [sp, #16]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	dd05      	ble.n	8013b54 <_dtoa_r+0x734>
 8013b48:	4629      	mov	r1, r5
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	4630      	mov	r0, r6
 8013b4e:	f000 fe21 	bl	8014794 <__lshift>
 8013b52:	4605      	mov	r5, r0
 8013b54:	9b05      	ldr	r3, [sp, #20]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	dd05      	ble.n	8013b66 <_dtoa_r+0x746>
 8013b5a:	4621      	mov	r1, r4
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	4630      	mov	r0, r6
 8013b60:	f000 fe18 	bl	8014794 <__lshift>
 8013b64:	4604      	mov	r4, r0
 8013b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d06a      	beq.n	8013c42 <_dtoa_r+0x822>
 8013b6c:	4621      	mov	r1, r4
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f000 fe80 	bl	8014874 <__mcmp>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	da64      	bge.n	8013c42 <_dtoa_r+0x822>
 8013b78:	2300      	movs	r3, #0
 8013b7a:	4629      	mov	r1, r5
 8013b7c:	220a      	movs	r2, #10
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f000 fc58 	bl	8014434 <__multadd>
 8013b84:	9b07      	ldr	r3, [sp, #28]
 8013b86:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f000 8191 	beq.w	8013eb4 <_dtoa_r+0xa94>
 8013b92:	4639      	mov	r1, r7
 8013b94:	2300      	movs	r3, #0
 8013b96:	220a      	movs	r2, #10
 8013b98:	4630      	mov	r0, r6
 8013b9a:	f000 fc4b 	bl	8014434 <__multadd>
 8013b9e:	f1ba 0f00 	cmp.w	sl, #0
 8013ba2:	4607      	mov	r7, r0
 8013ba4:	f300 808d 	bgt.w	8013cc2 <_dtoa_r+0x8a2>
 8013ba8:	9b06      	ldr	r3, [sp, #24]
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	dc50      	bgt.n	8013c50 <_dtoa_r+0x830>
 8013bae:	e088      	b.n	8013cc2 <_dtoa_r+0x8a2>
 8013bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013bb6:	e751      	b.n	8013a5c <_dtoa_r+0x63c>
 8013bb8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8013bbc:	42a3      	cmp	r3, r4
 8013bbe:	bfbf      	itttt	lt
 8013bc0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013bc2:	1ae3      	sublt	r3, r4, r3
 8013bc4:	18d2      	addlt	r2, r2, r3
 8013bc6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013bc8:	bfb6      	itet	lt
 8013bca:	4623      	movlt	r3, r4
 8013bcc:	1b1c      	subge	r4, r3, r4
 8013bce:	2400      	movlt	r4, #0
 8013bd0:	f1b9 0f00 	cmp.w	r9, #0
 8013bd4:	bfb5      	itete	lt
 8013bd6:	9a04      	ldrlt	r2, [sp, #16]
 8013bd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013bdc:	eba2 0809 	sublt.w	r8, r2, r9
 8013be0:	464a      	movge	r2, r9
 8013be2:	bfb8      	it	lt
 8013be4:	2200      	movlt	r2, #0
 8013be6:	e73c      	b.n	8013a62 <_dtoa_r+0x642>
 8013be8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013bec:	9f07      	ldr	r7, [sp, #28]
 8013bee:	461c      	mov	r4, r3
 8013bf0:	e744      	b.n	8013a7c <_dtoa_r+0x65c>
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	e770      	b.n	8013ad8 <_dtoa_r+0x6b8>
 8013bf6:	9b06      	ldr	r3, [sp, #24]
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	dc18      	bgt.n	8013c2e <_dtoa_r+0x80e>
 8013bfc:	9b02      	ldr	r3, [sp, #8]
 8013bfe:	b9b3      	cbnz	r3, 8013c2e <_dtoa_r+0x80e>
 8013c00:	9b03      	ldr	r3, [sp, #12]
 8013c02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013c06:	b9a2      	cbnz	r2, 8013c32 <_dtoa_r+0x812>
 8013c08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013c0c:	0d12      	lsrs	r2, r2, #20
 8013c0e:	0512      	lsls	r2, r2, #20
 8013c10:	b18a      	cbz	r2, 8013c36 <_dtoa_r+0x816>
 8013c12:	9b04      	ldr	r3, [sp, #16]
 8013c14:	3301      	adds	r3, #1
 8013c16:	9304      	str	r3, [sp, #16]
 8013c18:	9b05      	ldr	r3, [sp, #20]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	9305      	str	r3, [sp, #20]
 8013c1e:	2301      	movs	r3, #1
 8013c20:	930a      	str	r3, [sp, #40]	; 0x28
 8013c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	f47f af70 	bne.w	8013b0a <_dtoa_r+0x6ea>
 8013c2a:	2001      	movs	r0, #1
 8013c2c:	e775      	b.n	8013b1a <_dtoa_r+0x6fa>
 8013c2e:	2300      	movs	r3, #0
 8013c30:	e7f6      	b.n	8013c20 <_dtoa_r+0x800>
 8013c32:	9b02      	ldr	r3, [sp, #8]
 8013c34:	e7f4      	b.n	8013c20 <_dtoa_r+0x800>
 8013c36:	920a      	str	r2, [sp, #40]	; 0x28
 8013c38:	e7f3      	b.n	8013c22 <_dtoa_r+0x802>
 8013c3a:	d082      	beq.n	8013b42 <_dtoa_r+0x722>
 8013c3c:	4610      	mov	r0, r2
 8013c3e:	301c      	adds	r0, #28
 8013c40:	e778      	b.n	8013b34 <_dtoa_r+0x714>
 8013c42:	f1b9 0f00 	cmp.w	r9, #0
 8013c46:	dc37      	bgt.n	8013cb8 <_dtoa_r+0x898>
 8013c48:	9b06      	ldr	r3, [sp, #24]
 8013c4a:	2b02      	cmp	r3, #2
 8013c4c:	dd34      	ble.n	8013cb8 <_dtoa_r+0x898>
 8013c4e:	46ca      	mov	sl, r9
 8013c50:	f1ba 0f00 	cmp.w	sl, #0
 8013c54:	d10d      	bne.n	8013c72 <_dtoa_r+0x852>
 8013c56:	4621      	mov	r1, r4
 8013c58:	4653      	mov	r3, sl
 8013c5a:	2205      	movs	r2, #5
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	f000 fbe9 	bl	8014434 <__multadd>
 8013c62:	4601      	mov	r1, r0
 8013c64:	4604      	mov	r4, r0
 8013c66:	4628      	mov	r0, r5
 8013c68:	f000 fe04 	bl	8014874 <__mcmp>
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	f73f adeb 	bgt.w	8013848 <_dtoa_r+0x428>
 8013c72:	9b08      	ldr	r3, [sp, #32]
 8013c74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013c78:	ea6f 0b03 	mvn.w	fp, r3
 8013c7c:	f04f 0900 	mov.w	r9, #0
 8013c80:	4621      	mov	r1, r4
 8013c82:	4630      	mov	r0, r6
 8013c84:	f000 fbb4 	bl	80143f0 <_Bfree>
 8013c88:	2f00      	cmp	r7, #0
 8013c8a:	f43f aea8 	beq.w	80139de <_dtoa_r+0x5be>
 8013c8e:	f1b9 0f00 	cmp.w	r9, #0
 8013c92:	d005      	beq.n	8013ca0 <_dtoa_r+0x880>
 8013c94:	45b9      	cmp	r9, r7
 8013c96:	d003      	beq.n	8013ca0 <_dtoa_r+0x880>
 8013c98:	4649      	mov	r1, r9
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f000 fba8 	bl	80143f0 <_Bfree>
 8013ca0:	4639      	mov	r1, r7
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f000 fba4 	bl	80143f0 <_Bfree>
 8013ca8:	e699      	b.n	80139de <_dtoa_r+0x5be>
 8013caa:	2400      	movs	r4, #0
 8013cac:	4627      	mov	r7, r4
 8013cae:	e7e0      	b.n	8013c72 <_dtoa_r+0x852>
 8013cb0:	46bb      	mov	fp, r7
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	4607      	mov	r7, r0
 8013cb6:	e5c7      	b.n	8013848 <_dtoa_r+0x428>
 8013cb8:	9b07      	ldr	r3, [sp, #28]
 8013cba:	46ca      	mov	sl, r9
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f000 8100 	beq.w	8013ec2 <_dtoa_r+0xaa2>
 8013cc2:	f1b8 0f00 	cmp.w	r8, #0
 8013cc6:	dd05      	ble.n	8013cd4 <_dtoa_r+0x8b4>
 8013cc8:	4639      	mov	r1, r7
 8013cca:	4642      	mov	r2, r8
 8013ccc:	4630      	mov	r0, r6
 8013cce:	f000 fd61 	bl	8014794 <__lshift>
 8013cd2:	4607      	mov	r7, r0
 8013cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d05d      	beq.n	8013d96 <_dtoa_r+0x976>
 8013cda:	6879      	ldr	r1, [r7, #4]
 8013cdc:	4630      	mov	r0, r6
 8013cde:	f000 fb47 	bl	8014370 <_Balloc>
 8013ce2:	4680      	mov	r8, r0
 8013ce4:	b928      	cbnz	r0, 8013cf2 <_dtoa_r+0x8d2>
 8013ce6:	4b82      	ldr	r3, [pc, #520]	; (8013ef0 <_dtoa_r+0xad0>)
 8013ce8:	4602      	mov	r2, r0
 8013cea:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013cee:	f7ff bbaf 	b.w	8013450 <_dtoa_r+0x30>
 8013cf2:	693a      	ldr	r2, [r7, #16]
 8013cf4:	3202      	adds	r2, #2
 8013cf6:	0092      	lsls	r2, r2, #2
 8013cf8:	f107 010c 	add.w	r1, r7, #12
 8013cfc:	300c      	adds	r0, #12
 8013cfe:	f000 fb29 	bl	8014354 <memcpy>
 8013d02:	2201      	movs	r2, #1
 8013d04:	4641      	mov	r1, r8
 8013d06:	4630      	mov	r0, r6
 8013d08:	f000 fd44 	bl	8014794 <__lshift>
 8013d0c:	9b01      	ldr	r3, [sp, #4]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	9304      	str	r3, [sp, #16]
 8013d12:	9b01      	ldr	r3, [sp, #4]
 8013d14:	4453      	add	r3, sl
 8013d16:	9308      	str	r3, [sp, #32]
 8013d18:	9b02      	ldr	r3, [sp, #8]
 8013d1a:	f003 0301 	and.w	r3, r3, #1
 8013d1e:	46b9      	mov	r9, r7
 8013d20:	9307      	str	r3, [sp, #28]
 8013d22:	4607      	mov	r7, r0
 8013d24:	9b04      	ldr	r3, [sp, #16]
 8013d26:	4621      	mov	r1, r4
 8013d28:	3b01      	subs	r3, #1
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	9302      	str	r3, [sp, #8]
 8013d2e:	f7ff faeb 	bl	8013308 <quorem>
 8013d32:	4603      	mov	r3, r0
 8013d34:	3330      	adds	r3, #48	; 0x30
 8013d36:	9005      	str	r0, [sp, #20]
 8013d38:	4649      	mov	r1, r9
 8013d3a:	4628      	mov	r0, r5
 8013d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d3e:	f000 fd99 	bl	8014874 <__mcmp>
 8013d42:	463a      	mov	r2, r7
 8013d44:	4682      	mov	sl, r0
 8013d46:	4621      	mov	r1, r4
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f000 fdaf 	bl	80148ac <__mdiff>
 8013d4e:	68c2      	ldr	r2, [r0, #12]
 8013d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d52:	4680      	mov	r8, r0
 8013d54:	bb0a      	cbnz	r2, 8013d9a <_dtoa_r+0x97a>
 8013d56:	4601      	mov	r1, r0
 8013d58:	4628      	mov	r0, r5
 8013d5a:	f000 fd8b 	bl	8014874 <__mcmp>
 8013d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d60:	4602      	mov	r2, r0
 8013d62:	4641      	mov	r1, r8
 8013d64:	4630      	mov	r0, r6
 8013d66:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013d6a:	f000 fb41 	bl	80143f0 <_Bfree>
 8013d6e:	9b06      	ldr	r3, [sp, #24]
 8013d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d72:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013d76:	ea43 0102 	orr.w	r1, r3, r2
 8013d7a:	9b07      	ldr	r3, [sp, #28]
 8013d7c:	430b      	orrs	r3, r1
 8013d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d80:	d10d      	bne.n	8013d9e <_dtoa_r+0x97e>
 8013d82:	2b39      	cmp	r3, #57	; 0x39
 8013d84:	d029      	beq.n	8013dda <_dtoa_r+0x9ba>
 8013d86:	f1ba 0f00 	cmp.w	sl, #0
 8013d8a:	dd01      	ble.n	8013d90 <_dtoa_r+0x970>
 8013d8c:	9b05      	ldr	r3, [sp, #20]
 8013d8e:	3331      	adds	r3, #49	; 0x31
 8013d90:	9a02      	ldr	r2, [sp, #8]
 8013d92:	7013      	strb	r3, [r2, #0]
 8013d94:	e774      	b.n	8013c80 <_dtoa_r+0x860>
 8013d96:	4638      	mov	r0, r7
 8013d98:	e7b8      	b.n	8013d0c <_dtoa_r+0x8ec>
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	e7e1      	b.n	8013d62 <_dtoa_r+0x942>
 8013d9e:	f1ba 0f00 	cmp.w	sl, #0
 8013da2:	db06      	blt.n	8013db2 <_dtoa_r+0x992>
 8013da4:	9906      	ldr	r1, [sp, #24]
 8013da6:	ea41 0a0a 	orr.w	sl, r1, sl
 8013daa:	9907      	ldr	r1, [sp, #28]
 8013dac:	ea5a 0101 	orrs.w	r1, sl, r1
 8013db0:	d120      	bne.n	8013df4 <_dtoa_r+0x9d4>
 8013db2:	2a00      	cmp	r2, #0
 8013db4:	ddec      	ble.n	8013d90 <_dtoa_r+0x970>
 8013db6:	4629      	mov	r1, r5
 8013db8:	2201      	movs	r2, #1
 8013dba:	4630      	mov	r0, r6
 8013dbc:	9304      	str	r3, [sp, #16]
 8013dbe:	f000 fce9 	bl	8014794 <__lshift>
 8013dc2:	4621      	mov	r1, r4
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	f000 fd55 	bl	8014874 <__mcmp>
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	9b04      	ldr	r3, [sp, #16]
 8013dce:	dc02      	bgt.n	8013dd6 <_dtoa_r+0x9b6>
 8013dd0:	d1de      	bne.n	8013d90 <_dtoa_r+0x970>
 8013dd2:	07da      	lsls	r2, r3, #31
 8013dd4:	d5dc      	bpl.n	8013d90 <_dtoa_r+0x970>
 8013dd6:	2b39      	cmp	r3, #57	; 0x39
 8013dd8:	d1d8      	bne.n	8013d8c <_dtoa_r+0x96c>
 8013dda:	9a02      	ldr	r2, [sp, #8]
 8013ddc:	2339      	movs	r3, #57	; 0x39
 8013dde:	7013      	strb	r3, [r2, #0]
 8013de0:	4643      	mov	r3, r8
 8013de2:	4698      	mov	r8, r3
 8013de4:	3b01      	subs	r3, #1
 8013de6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013dea:	2a39      	cmp	r2, #57	; 0x39
 8013dec:	d051      	beq.n	8013e92 <_dtoa_r+0xa72>
 8013dee:	3201      	adds	r2, #1
 8013df0:	701a      	strb	r2, [r3, #0]
 8013df2:	e745      	b.n	8013c80 <_dtoa_r+0x860>
 8013df4:	2a00      	cmp	r2, #0
 8013df6:	dd03      	ble.n	8013e00 <_dtoa_r+0x9e0>
 8013df8:	2b39      	cmp	r3, #57	; 0x39
 8013dfa:	d0ee      	beq.n	8013dda <_dtoa_r+0x9ba>
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	e7c7      	b.n	8013d90 <_dtoa_r+0x970>
 8013e00:	9a04      	ldr	r2, [sp, #16]
 8013e02:	9908      	ldr	r1, [sp, #32]
 8013e04:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013e08:	428a      	cmp	r2, r1
 8013e0a:	d02b      	beq.n	8013e64 <_dtoa_r+0xa44>
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	2300      	movs	r3, #0
 8013e10:	220a      	movs	r2, #10
 8013e12:	4630      	mov	r0, r6
 8013e14:	f000 fb0e 	bl	8014434 <__multadd>
 8013e18:	45b9      	cmp	r9, r7
 8013e1a:	4605      	mov	r5, r0
 8013e1c:	f04f 0300 	mov.w	r3, #0
 8013e20:	f04f 020a 	mov.w	r2, #10
 8013e24:	4649      	mov	r1, r9
 8013e26:	4630      	mov	r0, r6
 8013e28:	d107      	bne.n	8013e3a <_dtoa_r+0xa1a>
 8013e2a:	f000 fb03 	bl	8014434 <__multadd>
 8013e2e:	4681      	mov	r9, r0
 8013e30:	4607      	mov	r7, r0
 8013e32:	9b04      	ldr	r3, [sp, #16]
 8013e34:	3301      	adds	r3, #1
 8013e36:	9304      	str	r3, [sp, #16]
 8013e38:	e774      	b.n	8013d24 <_dtoa_r+0x904>
 8013e3a:	f000 fafb 	bl	8014434 <__multadd>
 8013e3e:	4639      	mov	r1, r7
 8013e40:	4681      	mov	r9, r0
 8013e42:	2300      	movs	r3, #0
 8013e44:	220a      	movs	r2, #10
 8013e46:	4630      	mov	r0, r6
 8013e48:	f000 faf4 	bl	8014434 <__multadd>
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	e7f0      	b.n	8013e32 <_dtoa_r+0xa12>
 8013e50:	f1ba 0f00 	cmp.w	sl, #0
 8013e54:	9a01      	ldr	r2, [sp, #4]
 8013e56:	bfcc      	ite	gt
 8013e58:	46d0      	movgt	r8, sl
 8013e5a:	f04f 0801 	movle.w	r8, #1
 8013e5e:	4490      	add	r8, r2
 8013e60:	f04f 0900 	mov.w	r9, #0
 8013e64:	4629      	mov	r1, r5
 8013e66:	2201      	movs	r2, #1
 8013e68:	4630      	mov	r0, r6
 8013e6a:	9302      	str	r3, [sp, #8]
 8013e6c:	f000 fc92 	bl	8014794 <__lshift>
 8013e70:	4621      	mov	r1, r4
 8013e72:	4605      	mov	r5, r0
 8013e74:	f000 fcfe 	bl	8014874 <__mcmp>
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	dcb1      	bgt.n	8013de0 <_dtoa_r+0x9c0>
 8013e7c:	d102      	bne.n	8013e84 <_dtoa_r+0xa64>
 8013e7e:	9b02      	ldr	r3, [sp, #8]
 8013e80:	07db      	lsls	r3, r3, #31
 8013e82:	d4ad      	bmi.n	8013de0 <_dtoa_r+0x9c0>
 8013e84:	4643      	mov	r3, r8
 8013e86:	4698      	mov	r8, r3
 8013e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e8c:	2a30      	cmp	r2, #48	; 0x30
 8013e8e:	d0fa      	beq.n	8013e86 <_dtoa_r+0xa66>
 8013e90:	e6f6      	b.n	8013c80 <_dtoa_r+0x860>
 8013e92:	9a01      	ldr	r2, [sp, #4]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d1a4      	bne.n	8013de2 <_dtoa_r+0x9c2>
 8013e98:	f10b 0b01 	add.w	fp, fp, #1
 8013e9c:	2331      	movs	r3, #49	; 0x31
 8013e9e:	e778      	b.n	8013d92 <_dtoa_r+0x972>
 8013ea0:	4b14      	ldr	r3, [pc, #80]	; (8013ef4 <_dtoa_r+0xad4>)
 8013ea2:	f7ff bb27 	b.w	80134f4 <_dtoa_r+0xd4>
 8013ea6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f47f ab03 	bne.w	80134b4 <_dtoa_r+0x94>
 8013eae:	4b12      	ldr	r3, [pc, #72]	; (8013ef8 <_dtoa_r+0xad8>)
 8013eb0:	f7ff bb20 	b.w	80134f4 <_dtoa_r+0xd4>
 8013eb4:	f1ba 0f00 	cmp.w	sl, #0
 8013eb8:	dc03      	bgt.n	8013ec2 <_dtoa_r+0xaa2>
 8013eba:	9b06      	ldr	r3, [sp, #24]
 8013ebc:	2b02      	cmp	r3, #2
 8013ebe:	f73f aec7 	bgt.w	8013c50 <_dtoa_r+0x830>
 8013ec2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	4628      	mov	r0, r5
 8013eca:	f7ff fa1d 	bl	8013308 <quorem>
 8013ece:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013ed2:	f808 3b01 	strb.w	r3, [r8], #1
 8013ed6:	9a01      	ldr	r2, [sp, #4]
 8013ed8:	eba8 0202 	sub.w	r2, r8, r2
 8013edc:	4592      	cmp	sl, r2
 8013ede:	ddb7      	ble.n	8013e50 <_dtoa_r+0xa30>
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	220a      	movs	r2, #10
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	f000 faa4 	bl	8014434 <__multadd>
 8013eec:	4605      	mov	r5, r0
 8013eee:	e7ea      	b.n	8013ec6 <_dtoa_r+0xaa6>
 8013ef0:	08016e0f 	.word	0x08016e0f
 8013ef4:	08016d6c 	.word	0x08016d6c
 8013ef8:	08016d90 	.word	0x08016d90

08013efc <__sflush_r>:
 8013efc:	898a      	ldrh	r2, [r1, #12]
 8013efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f02:	4605      	mov	r5, r0
 8013f04:	0710      	lsls	r0, r2, #28
 8013f06:	460c      	mov	r4, r1
 8013f08:	d458      	bmi.n	8013fbc <__sflush_r+0xc0>
 8013f0a:	684b      	ldr	r3, [r1, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	dc05      	bgt.n	8013f1c <__sflush_r+0x20>
 8013f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	dc02      	bgt.n	8013f1c <__sflush_r+0x20>
 8013f16:	2000      	movs	r0, #0
 8013f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f1e:	2e00      	cmp	r6, #0
 8013f20:	d0f9      	beq.n	8013f16 <__sflush_r+0x1a>
 8013f22:	2300      	movs	r3, #0
 8013f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f28:	682f      	ldr	r7, [r5, #0]
 8013f2a:	602b      	str	r3, [r5, #0]
 8013f2c:	d032      	beq.n	8013f94 <__sflush_r+0x98>
 8013f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f30:	89a3      	ldrh	r3, [r4, #12]
 8013f32:	075a      	lsls	r2, r3, #29
 8013f34:	d505      	bpl.n	8013f42 <__sflush_r+0x46>
 8013f36:	6863      	ldr	r3, [r4, #4]
 8013f38:	1ac0      	subs	r0, r0, r3
 8013f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f3c:	b10b      	cbz	r3, 8013f42 <__sflush_r+0x46>
 8013f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f40:	1ac0      	subs	r0, r0, r3
 8013f42:	2300      	movs	r3, #0
 8013f44:	4602      	mov	r2, r0
 8013f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f48:	6a21      	ldr	r1, [r4, #32]
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	47b0      	blx	r6
 8013f4e:	1c43      	adds	r3, r0, #1
 8013f50:	89a3      	ldrh	r3, [r4, #12]
 8013f52:	d106      	bne.n	8013f62 <__sflush_r+0x66>
 8013f54:	6829      	ldr	r1, [r5, #0]
 8013f56:	291d      	cmp	r1, #29
 8013f58:	d82c      	bhi.n	8013fb4 <__sflush_r+0xb8>
 8013f5a:	4a2a      	ldr	r2, [pc, #168]	; (8014004 <__sflush_r+0x108>)
 8013f5c:	40ca      	lsrs	r2, r1
 8013f5e:	07d6      	lsls	r6, r2, #31
 8013f60:	d528      	bpl.n	8013fb4 <__sflush_r+0xb8>
 8013f62:	2200      	movs	r2, #0
 8013f64:	6062      	str	r2, [r4, #4]
 8013f66:	04d9      	lsls	r1, r3, #19
 8013f68:	6922      	ldr	r2, [r4, #16]
 8013f6a:	6022      	str	r2, [r4, #0]
 8013f6c:	d504      	bpl.n	8013f78 <__sflush_r+0x7c>
 8013f6e:	1c42      	adds	r2, r0, #1
 8013f70:	d101      	bne.n	8013f76 <__sflush_r+0x7a>
 8013f72:	682b      	ldr	r3, [r5, #0]
 8013f74:	b903      	cbnz	r3, 8013f78 <__sflush_r+0x7c>
 8013f76:	6560      	str	r0, [r4, #84]	; 0x54
 8013f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f7a:	602f      	str	r7, [r5, #0]
 8013f7c:	2900      	cmp	r1, #0
 8013f7e:	d0ca      	beq.n	8013f16 <__sflush_r+0x1a>
 8013f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f84:	4299      	cmp	r1, r3
 8013f86:	d002      	beq.n	8013f8e <__sflush_r+0x92>
 8013f88:	4628      	mov	r0, r5
 8013f8a:	f000 fd8b 	bl	8014aa4 <_free_r>
 8013f8e:	2000      	movs	r0, #0
 8013f90:	6360      	str	r0, [r4, #52]	; 0x34
 8013f92:	e7c1      	b.n	8013f18 <__sflush_r+0x1c>
 8013f94:	6a21      	ldr	r1, [r4, #32]
 8013f96:	2301      	movs	r3, #1
 8013f98:	4628      	mov	r0, r5
 8013f9a:	47b0      	blx	r6
 8013f9c:	1c41      	adds	r1, r0, #1
 8013f9e:	d1c7      	bne.n	8013f30 <__sflush_r+0x34>
 8013fa0:	682b      	ldr	r3, [r5, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d0c4      	beq.n	8013f30 <__sflush_r+0x34>
 8013fa6:	2b1d      	cmp	r3, #29
 8013fa8:	d001      	beq.n	8013fae <__sflush_r+0xb2>
 8013faa:	2b16      	cmp	r3, #22
 8013fac:	d101      	bne.n	8013fb2 <__sflush_r+0xb6>
 8013fae:	602f      	str	r7, [r5, #0]
 8013fb0:	e7b1      	b.n	8013f16 <__sflush_r+0x1a>
 8013fb2:	89a3      	ldrh	r3, [r4, #12]
 8013fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fb8:	81a3      	strh	r3, [r4, #12]
 8013fba:	e7ad      	b.n	8013f18 <__sflush_r+0x1c>
 8013fbc:	690f      	ldr	r7, [r1, #16]
 8013fbe:	2f00      	cmp	r7, #0
 8013fc0:	d0a9      	beq.n	8013f16 <__sflush_r+0x1a>
 8013fc2:	0793      	lsls	r3, r2, #30
 8013fc4:	680e      	ldr	r6, [r1, #0]
 8013fc6:	bf08      	it	eq
 8013fc8:	694b      	ldreq	r3, [r1, #20]
 8013fca:	600f      	str	r7, [r1, #0]
 8013fcc:	bf18      	it	ne
 8013fce:	2300      	movne	r3, #0
 8013fd0:	eba6 0807 	sub.w	r8, r6, r7
 8013fd4:	608b      	str	r3, [r1, #8]
 8013fd6:	f1b8 0f00 	cmp.w	r8, #0
 8013fda:	dd9c      	ble.n	8013f16 <__sflush_r+0x1a>
 8013fdc:	6a21      	ldr	r1, [r4, #32]
 8013fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013fe0:	4643      	mov	r3, r8
 8013fe2:	463a      	mov	r2, r7
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	47b0      	blx	r6
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	dc06      	bgt.n	8013ffa <__sflush_r+0xfe>
 8013fec:	89a3      	ldrh	r3, [r4, #12]
 8013fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ff2:	81a3      	strh	r3, [r4, #12]
 8013ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ff8:	e78e      	b.n	8013f18 <__sflush_r+0x1c>
 8013ffa:	4407      	add	r7, r0
 8013ffc:	eba8 0800 	sub.w	r8, r8, r0
 8014000:	e7e9      	b.n	8013fd6 <__sflush_r+0xda>
 8014002:	bf00      	nop
 8014004:	20400001 	.word	0x20400001

08014008 <_fflush_r>:
 8014008:	b538      	push	{r3, r4, r5, lr}
 801400a:	690b      	ldr	r3, [r1, #16]
 801400c:	4605      	mov	r5, r0
 801400e:	460c      	mov	r4, r1
 8014010:	b913      	cbnz	r3, 8014018 <_fflush_r+0x10>
 8014012:	2500      	movs	r5, #0
 8014014:	4628      	mov	r0, r5
 8014016:	bd38      	pop	{r3, r4, r5, pc}
 8014018:	b118      	cbz	r0, 8014022 <_fflush_r+0x1a>
 801401a:	6983      	ldr	r3, [r0, #24]
 801401c:	b90b      	cbnz	r3, 8014022 <_fflush_r+0x1a>
 801401e:	f000 f887 	bl	8014130 <__sinit>
 8014022:	4b14      	ldr	r3, [pc, #80]	; (8014074 <_fflush_r+0x6c>)
 8014024:	429c      	cmp	r4, r3
 8014026:	d11b      	bne.n	8014060 <_fflush_r+0x58>
 8014028:	686c      	ldr	r4, [r5, #4]
 801402a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d0ef      	beq.n	8014012 <_fflush_r+0xa>
 8014032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014034:	07d0      	lsls	r0, r2, #31
 8014036:	d404      	bmi.n	8014042 <_fflush_r+0x3a>
 8014038:	0599      	lsls	r1, r3, #22
 801403a:	d402      	bmi.n	8014042 <_fflush_r+0x3a>
 801403c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801403e:	f000 f91a 	bl	8014276 <__retarget_lock_acquire_recursive>
 8014042:	4628      	mov	r0, r5
 8014044:	4621      	mov	r1, r4
 8014046:	f7ff ff59 	bl	8013efc <__sflush_r>
 801404a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801404c:	07da      	lsls	r2, r3, #31
 801404e:	4605      	mov	r5, r0
 8014050:	d4e0      	bmi.n	8014014 <_fflush_r+0xc>
 8014052:	89a3      	ldrh	r3, [r4, #12]
 8014054:	059b      	lsls	r3, r3, #22
 8014056:	d4dd      	bmi.n	8014014 <_fflush_r+0xc>
 8014058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801405a:	f000 f90d 	bl	8014278 <__retarget_lock_release_recursive>
 801405e:	e7d9      	b.n	8014014 <_fflush_r+0xc>
 8014060:	4b05      	ldr	r3, [pc, #20]	; (8014078 <_fflush_r+0x70>)
 8014062:	429c      	cmp	r4, r3
 8014064:	d101      	bne.n	801406a <_fflush_r+0x62>
 8014066:	68ac      	ldr	r4, [r5, #8]
 8014068:	e7df      	b.n	801402a <_fflush_r+0x22>
 801406a:	4b04      	ldr	r3, [pc, #16]	; (801407c <_fflush_r+0x74>)
 801406c:	429c      	cmp	r4, r3
 801406e:	bf08      	it	eq
 8014070:	68ec      	ldreq	r4, [r5, #12]
 8014072:	e7da      	b.n	801402a <_fflush_r+0x22>
 8014074:	08016e40 	.word	0x08016e40
 8014078:	08016e60 	.word	0x08016e60
 801407c:	08016e20 	.word	0x08016e20

08014080 <std>:
 8014080:	2300      	movs	r3, #0
 8014082:	b510      	push	{r4, lr}
 8014084:	4604      	mov	r4, r0
 8014086:	e9c0 3300 	strd	r3, r3, [r0]
 801408a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801408e:	6083      	str	r3, [r0, #8]
 8014090:	8181      	strh	r1, [r0, #12]
 8014092:	6643      	str	r3, [r0, #100]	; 0x64
 8014094:	81c2      	strh	r2, [r0, #14]
 8014096:	6183      	str	r3, [r0, #24]
 8014098:	4619      	mov	r1, r3
 801409a:	2208      	movs	r2, #8
 801409c:	305c      	adds	r0, #92	; 0x5c
 801409e:	f7fe fbb3 	bl	8012808 <memset>
 80140a2:	4b05      	ldr	r3, [pc, #20]	; (80140b8 <std+0x38>)
 80140a4:	6263      	str	r3, [r4, #36]	; 0x24
 80140a6:	4b05      	ldr	r3, [pc, #20]	; (80140bc <std+0x3c>)
 80140a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80140aa:	4b05      	ldr	r3, [pc, #20]	; (80140c0 <std+0x40>)
 80140ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80140ae:	4b05      	ldr	r3, [pc, #20]	; (80140c4 <std+0x44>)
 80140b0:	6224      	str	r4, [r4, #32]
 80140b2:	6323      	str	r3, [r4, #48]	; 0x30
 80140b4:	bd10      	pop	{r4, pc}
 80140b6:	bf00      	nop
 80140b8:	08014c85 	.word	0x08014c85
 80140bc:	08014ca7 	.word	0x08014ca7
 80140c0:	08014cdf 	.word	0x08014cdf
 80140c4:	08014d03 	.word	0x08014d03

080140c8 <_cleanup_r>:
 80140c8:	4901      	ldr	r1, [pc, #4]	; (80140d0 <_cleanup_r+0x8>)
 80140ca:	f000 b8af 	b.w	801422c <_fwalk_reent>
 80140ce:	bf00      	nop
 80140d0:	08014009 	.word	0x08014009

080140d4 <__sfmoreglue>:
 80140d4:	b570      	push	{r4, r5, r6, lr}
 80140d6:	2268      	movs	r2, #104	; 0x68
 80140d8:	1e4d      	subs	r5, r1, #1
 80140da:	4355      	muls	r5, r2
 80140dc:	460e      	mov	r6, r1
 80140de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140e2:	f000 fd4b 	bl	8014b7c <_malloc_r>
 80140e6:	4604      	mov	r4, r0
 80140e8:	b140      	cbz	r0, 80140fc <__sfmoreglue+0x28>
 80140ea:	2100      	movs	r1, #0
 80140ec:	e9c0 1600 	strd	r1, r6, [r0]
 80140f0:	300c      	adds	r0, #12
 80140f2:	60a0      	str	r0, [r4, #8]
 80140f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140f8:	f7fe fb86 	bl	8012808 <memset>
 80140fc:	4620      	mov	r0, r4
 80140fe:	bd70      	pop	{r4, r5, r6, pc}

08014100 <__sfp_lock_acquire>:
 8014100:	4801      	ldr	r0, [pc, #4]	; (8014108 <__sfp_lock_acquire+0x8>)
 8014102:	f000 b8b8 	b.w	8014276 <__retarget_lock_acquire_recursive>
 8014106:	bf00      	nop
 8014108:	24001751 	.word	0x24001751

0801410c <__sfp_lock_release>:
 801410c:	4801      	ldr	r0, [pc, #4]	; (8014114 <__sfp_lock_release+0x8>)
 801410e:	f000 b8b3 	b.w	8014278 <__retarget_lock_release_recursive>
 8014112:	bf00      	nop
 8014114:	24001751 	.word	0x24001751

08014118 <__sinit_lock_acquire>:
 8014118:	4801      	ldr	r0, [pc, #4]	; (8014120 <__sinit_lock_acquire+0x8>)
 801411a:	f000 b8ac 	b.w	8014276 <__retarget_lock_acquire_recursive>
 801411e:	bf00      	nop
 8014120:	24001752 	.word	0x24001752

08014124 <__sinit_lock_release>:
 8014124:	4801      	ldr	r0, [pc, #4]	; (801412c <__sinit_lock_release+0x8>)
 8014126:	f000 b8a7 	b.w	8014278 <__retarget_lock_release_recursive>
 801412a:	bf00      	nop
 801412c:	24001752 	.word	0x24001752

08014130 <__sinit>:
 8014130:	b510      	push	{r4, lr}
 8014132:	4604      	mov	r4, r0
 8014134:	f7ff fff0 	bl	8014118 <__sinit_lock_acquire>
 8014138:	69a3      	ldr	r3, [r4, #24]
 801413a:	b11b      	cbz	r3, 8014144 <__sinit+0x14>
 801413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014140:	f7ff bff0 	b.w	8014124 <__sinit_lock_release>
 8014144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014148:	6523      	str	r3, [r4, #80]	; 0x50
 801414a:	4b13      	ldr	r3, [pc, #76]	; (8014198 <__sinit+0x68>)
 801414c:	4a13      	ldr	r2, [pc, #76]	; (801419c <__sinit+0x6c>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	62a2      	str	r2, [r4, #40]	; 0x28
 8014152:	42a3      	cmp	r3, r4
 8014154:	bf04      	itt	eq
 8014156:	2301      	moveq	r3, #1
 8014158:	61a3      	streq	r3, [r4, #24]
 801415a:	4620      	mov	r0, r4
 801415c:	f000 f820 	bl	80141a0 <__sfp>
 8014160:	6060      	str	r0, [r4, #4]
 8014162:	4620      	mov	r0, r4
 8014164:	f000 f81c 	bl	80141a0 <__sfp>
 8014168:	60a0      	str	r0, [r4, #8]
 801416a:	4620      	mov	r0, r4
 801416c:	f000 f818 	bl	80141a0 <__sfp>
 8014170:	2200      	movs	r2, #0
 8014172:	60e0      	str	r0, [r4, #12]
 8014174:	2104      	movs	r1, #4
 8014176:	6860      	ldr	r0, [r4, #4]
 8014178:	f7ff ff82 	bl	8014080 <std>
 801417c:	68a0      	ldr	r0, [r4, #8]
 801417e:	2201      	movs	r2, #1
 8014180:	2109      	movs	r1, #9
 8014182:	f7ff ff7d 	bl	8014080 <std>
 8014186:	68e0      	ldr	r0, [r4, #12]
 8014188:	2202      	movs	r2, #2
 801418a:	2112      	movs	r1, #18
 801418c:	f7ff ff78 	bl	8014080 <std>
 8014190:	2301      	movs	r3, #1
 8014192:	61a3      	str	r3, [r4, #24]
 8014194:	e7d2      	b.n	801413c <__sinit+0xc>
 8014196:	bf00      	nop
 8014198:	08016d58 	.word	0x08016d58
 801419c:	080140c9 	.word	0x080140c9

080141a0 <__sfp>:
 80141a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a2:	4607      	mov	r7, r0
 80141a4:	f7ff ffac 	bl	8014100 <__sfp_lock_acquire>
 80141a8:	4b1e      	ldr	r3, [pc, #120]	; (8014224 <__sfp+0x84>)
 80141aa:	681e      	ldr	r6, [r3, #0]
 80141ac:	69b3      	ldr	r3, [r6, #24]
 80141ae:	b913      	cbnz	r3, 80141b6 <__sfp+0x16>
 80141b0:	4630      	mov	r0, r6
 80141b2:	f7ff ffbd 	bl	8014130 <__sinit>
 80141b6:	3648      	adds	r6, #72	; 0x48
 80141b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80141bc:	3b01      	subs	r3, #1
 80141be:	d503      	bpl.n	80141c8 <__sfp+0x28>
 80141c0:	6833      	ldr	r3, [r6, #0]
 80141c2:	b30b      	cbz	r3, 8014208 <__sfp+0x68>
 80141c4:	6836      	ldr	r6, [r6, #0]
 80141c6:	e7f7      	b.n	80141b8 <__sfp+0x18>
 80141c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80141cc:	b9d5      	cbnz	r5, 8014204 <__sfp+0x64>
 80141ce:	4b16      	ldr	r3, [pc, #88]	; (8014228 <__sfp+0x88>)
 80141d0:	60e3      	str	r3, [r4, #12]
 80141d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141d6:	6665      	str	r5, [r4, #100]	; 0x64
 80141d8:	f000 f84c 	bl	8014274 <__retarget_lock_init_recursive>
 80141dc:	f7ff ff96 	bl	801410c <__sfp_lock_release>
 80141e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80141e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80141e8:	6025      	str	r5, [r4, #0]
 80141ea:	61a5      	str	r5, [r4, #24]
 80141ec:	2208      	movs	r2, #8
 80141ee:	4629      	mov	r1, r5
 80141f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80141f4:	f7fe fb08 	bl	8012808 <memset>
 80141f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80141fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014200:	4620      	mov	r0, r4
 8014202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014204:	3468      	adds	r4, #104	; 0x68
 8014206:	e7d9      	b.n	80141bc <__sfp+0x1c>
 8014208:	2104      	movs	r1, #4
 801420a:	4638      	mov	r0, r7
 801420c:	f7ff ff62 	bl	80140d4 <__sfmoreglue>
 8014210:	4604      	mov	r4, r0
 8014212:	6030      	str	r0, [r6, #0]
 8014214:	2800      	cmp	r0, #0
 8014216:	d1d5      	bne.n	80141c4 <__sfp+0x24>
 8014218:	f7ff ff78 	bl	801410c <__sfp_lock_release>
 801421c:	230c      	movs	r3, #12
 801421e:	603b      	str	r3, [r7, #0]
 8014220:	e7ee      	b.n	8014200 <__sfp+0x60>
 8014222:	bf00      	nop
 8014224:	08016d58 	.word	0x08016d58
 8014228:	ffff0001 	.word	0xffff0001

0801422c <_fwalk_reent>:
 801422c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014230:	4606      	mov	r6, r0
 8014232:	4688      	mov	r8, r1
 8014234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014238:	2700      	movs	r7, #0
 801423a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801423e:	f1b9 0901 	subs.w	r9, r9, #1
 8014242:	d505      	bpl.n	8014250 <_fwalk_reent+0x24>
 8014244:	6824      	ldr	r4, [r4, #0]
 8014246:	2c00      	cmp	r4, #0
 8014248:	d1f7      	bne.n	801423a <_fwalk_reent+0xe>
 801424a:	4638      	mov	r0, r7
 801424c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014250:	89ab      	ldrh	r3, [r5, #12]
 8014252:	2b01      	cmp	r3, #1
 8014254:	d907      	bls.n	8014266 <_fwalk_reent+0x3a>
 8014256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801425a:	3301      	adds	r3, #1
 801425c:	d003      	beq.n	8014266 <_fwalk_reent+0x3a>
 801425e:	4629      	mov	r1, r5
 8014260:	4630      	mov	r0, r6
 8014262:	47c0      	blx	r8
 8014264:	4307      	orrs	r7, r0
 8014266:	3568      	adds	r5, #104	; 0x68
 8014268:	e7e9      	b.n	801423e <_fwalk_reent+0x12>
	...

0801426c <_localeconv_r>:
 801426c:	4800      	ldr	r0, [pc, #0]	; (8014270 <_localeconv_r+0x4>)
 801426e:	4770      	bx	lr
 8014270:	24000394 	.word	0x24000394

08014274 <__retarget_lock_init_recursive>:
 8014274:	4770      	bx	lr

08014276 <__retarget_lock_acquire_recursive>:
 8014276:	4770      	bx	lr

08014278 <__retarget_lock_release_recursive>:
 8014278:	4770      	bx	lr

0801427a <__swhatbuf_r>:
 801427a:	b570      	push	{r4, r5, r6, lr}
 801427c:	460e      	mov	r6, r1
 801427e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014282:	2900      	cmp	r1, #0
 8014284:	b096      	sub	sp, #88	; 0x58
 8014286:	4614      	mov	r4, r2
 8014288:	461d      	mov	r5, r3
 801428a:	da08      	bge.n	801429e <__swhatbuf_r+0x24>
 801428c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014290:	2200      	movs	r2, #0
 8014292:	602a      	str	r2, [r5, #0]
 8014294:	061a      	lsls	r2, r3, #24
 8014296:	d410      	bmi.n	80142ba <__swhatbuf_r+0x40>
 8014298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801429c:	e00e      	b.n	80142bc <__swhatbuf_r+0x42>
 801429e:	466a      	mov	r2, sp
 80142a0:	f000 fd86 	bl	8014db0 <_fstat_r>
 80142a4:	2800      	cmp	r0, #0
 80142a6:	dbf1      	blt.n	801428c <__swhatbuf_r+0x12>
 80142a8:	9a01      	ldr	r2, [sp, #4]
 80142aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80142ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80142b2:	425a      	negs	r2, r3
 80142b4:	415a      	adcs	r2, r3
 80142b6:	602a      	str	r2, [r5, #0]
 80142b8:	e7ee      	b.n	8014298 <__swhatbuf_r+0x1e>
 80142ba:	2340      	movs	r3, #64	; 0x40
 80142bc:	2000      	movs	r0, #0
 80142be:	6023      	str	r3, [r4, #0]
 80142c0:	b016      	add	sp, #88	; 0x58
 80142c2:	bd70      	pop	{r4, r5, r6, pc}

080142c4 <__smakebuf_r>:
 80142c4:	898b      	ldrh	r3, [r1, #12]
 80142c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80142c8:	079d      	lsls	r5, r3, #30
 80142ca:	4606      	mov	r6, r0
 80142cc:	460c      	mov	r4, r1
 80142ce:	d507      	bpl.n	80142e0 <__smakebuf_r+0x1c>
 80142d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80142d4:	6023      	str	r3, [r4, #0]
 80142d6:	6123      	str	r3, [r4, #16]
 80142d8:	2301      	movs	r3, #1
 80142da:	6163      	str	r3, [r4, #20]
 80142dc:	b002      	add	sp, #8
 80142de:	bd70      	pop	{r4, r5, r6, pc}
 80142e0:	ab01      	add	r3, sp, #4
 80142e2:	466a      	mov	r2, sp
 80142e4:	f7ff ffc9 	bl	801427a <__swhatbuf_r>
 80142e8:	9900      	ldr	r1, [sp, #0]
 80142ea:	4605      	mov	r5, r0
 80142ec:	4630      	mov	r0, r6
 80142ee:	f000 fc45 	bl	8014b7c <_malloc_r>
 80142f2:	b948      	cbnz	r0, 8014308 <__smakebuf_r+0x44>
 80142f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142f8:	059a      	lsls	r2, r3, #22
 80142fa:	d4ef      	bmi.n	80142dc <__smakebuf_r+0x18>
 80142fc:	f023 0303 	bic.w	r3, r3, #3
 8014300:	f043 0302 	orr.w	r3, r3, #2
 8014304:	81a3      	strh	r3, [r4, #12]
 8014306:	e7e3      	b.n	80142d0 <__smakebuf_r+0xc>
 8014308:	4b0d      	ldr	r3, [pc, #52]	; (8014340 <__smakebuf_r+0x7c>)
 801430a:	62b3      	str	r3, [r6, #40]	; 0x28
 801430c:	89a3      	ldrh	r3, [r4, #12]
 801430e:	6020      	str	r0, [r4, #0]
 8014310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014314:	81a3      	strh	r3, [r4, #12]
 8014316:	9b00      	ldr	r3, [sp, #0]
 8014318:	6163      	str	r3, [r4, #20]
 801431a:	9b01      	ldr	r3, [sp, #4]
 801431c:	6120      	str	r0, [r4, #16]
 801431e:	b15b      	cbz	r3, 8014338 <__smakebuf_r+0x74>
 8014320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014324:	4630      	mov	r0, r6
 8014326:	f000 fd55 	bl	8014dd4 <_isatty_r>
 801432a:	b128      	cbz	r0, 8014338 <__smakebuf_r+0x74>
 801432c:	89a3      	ldrh	r3, [r4, #12]
 801432e:	f023 0303 	bic.w	r3, r3, #3
 8014332:	f043 0301 	orr.w	r3, r3, #1
 8014336:	81a3      	strh	r3, [r4, #12]
 8014338:	89a0      	ldrh	r0, [r4, #12]
 801433a:	4305      	orrs	r5, r0
 801433c:	81a5      	strh	r5, [r4, #12]
 801433e:	e7cd      	b.n	80142dc <__smakebuf_r+0x18>
 8014340:	080140c9 	.word	0x080140c9

08014344 <malloc>:
 8014344:	4b02      	ldr	r3, [pc, #8]	; (8014350 <malloc+0xc>)
 8014346:	4601      	mov	r1, r0
 8014348:	6818      	ldr	r0, [r3, #0]
 801434a:	f000 bc17 	b.w	8014b7c <_malloc_r>
 801434e:	bf00      	nop
 8014350:	24000240 	.word	0x24000240

08014354 <memcpy>:
 8014354:	440a      	add	r2, r1
 8014356:	4291      	cmp	r1, r2
 8014358:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801435c:	d100      	bne.n	8014360 <memcpy+0xc>
 801435e:	4770      	bx	lr
 8014360:	b510      	push	{r4, lr}
 8014362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014366:	f803 4f01 	strb.w	r4, [r3, #1]!
 801436a:	4291      	cmp	r1, r2
 801436c:	d1f9      	bne.n	8014362 <memcpy+0xe>
 801436e:	bd10      	pop	{r4, pc}

08014370 <_Balloc>:
 8014370:	b570      	push	{r4, r5, r6, lr}
 8014372:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014374:	4604      	mov	r4, r0
 8014376:	460d      	mov	r5, r1
 8014378:	b976      	cbnz	r6, 8014398 <_Balloc+0x28>
 801437a:	2010      	movs	r0, #16
 801437c:	f7ff ffe2 	bl	8014344 <malloc>
 8014380:	4602      	mov	r2, r0
 8014382:	6260      	str	r0, [r4, #36]	; 0x24
 8014384:	b920      	cbnz	r0, 8014390 <_Balloc+0x20>
 8014386:	4b18      	ldr	r3, [pc, #96]	; (80143e8 <_Balloc+0x78>)
 8014388:	4818      	ldr	r0, [pc, #96]	; (80143ec <_Balloc+0x7c>)
 801438a:	2166      	movs	r1, #102	; 0x66
 801438c:	f000 fcd0 	bl	8014d30 <__assert_func>
 8014390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014394:	6006      	str	r6, [r0, #0]
 8014396:	60c6      	str	r6, [r0, #12]
 8014398:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801439a:	68f3      	ldr	r3, [r6, #12]
 801439c:	b183      	cbz	r3, 80143c0 <_Balloc+0x50>
 801439e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143a0:	68db      	ldr	r3, [r3, #12]
 80143a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143a6:	b9b8      	cbnz	r0, 80143d8 <_Balloc+0x68>
 80143a8:	2101      	movs	r1, #1
 80143aa:	fa01 f605 	lsl.w	r6, r1, r5
 80143ae:	1d72      	adds	r2, r6, #5
 80143b0:	0092      	lsls	r2, r2, #2
 80143b2:	4620      	mov	r0, r4
 80143b4:	f000 fb60 	bl	8014a78 <_calloc_r>
 80143b8:	b160      	cbz	r0, 80143d4 <_Balloc+0x64>
 80143ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80143be:	e00e      	b.n	80143de <_Balloc+0x6e>
 80143c0:	2221      	movs	r2, #33	; 0x21
 80143c2:	2104      	movs	r1, #4
 80143c4:	4620      	mov	r0, r4
 80143c6:	f000 fb57 	bl	8014a78 <_calloc_r>
 80143ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143cc:	60f0      	str	r0, [r6, #12]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d1e4      	bne.n	801439e <_Balloc+0x2e>
 80143d4:	2000      	movs	r0, #0
 80143d6:	bd70      	pop	{r4, r5, r6, pc}
 80143d8:	6802      	ldr	r2, [r0, #0]
 80143da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80143de:	2300      	movs	r3, #0
 80143e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80143e4:	e7f7      	b.n	80143d6 <_Balloc+0x66>
 80143e6:	bf00      	nop
 80143e8:	08016d9d 	.word	0x08016d9d
 80143ec:	08016e80 	.word	0x08016e80

080143f0 <_Bfree>:
 80143f0:	b570      	push	{r4, r5, r6, lr}
 80143f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80143f4:	4605      	mov	r5, r0
 80143f6:	460c      	mov	r4, r1
 80143f8:	b976      	cbnz	r6, 8014418 <_Bfree+0x28>
 80143fa:	2010      	movs	r0, #16
 80143fc:	f7ff ffa2 	bl	8014344 <malloc>
 8014400:	4602      	mov	r2, r0
 8014402:	6268      	str	r0, [r5, #36]	; 0x24
 8014404:	b920      	cbnz	r0, 8014410 <_Bfree+0x20>
 8014406:	4b09      	ldr	r3, [pc, #36]	; (801442c <_Bfree+0x3c>)
 8014408:	4809      	ldr	r0, [pc, #36]	; (8014430 <_Bfree+0x40>)
 801440a:	218a      	movs	r1, #138	; 0x8a
 801440c:	f000 fc90 	bl	8014d30 <__assert_func>
 8014410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014414:	6006      	str	r6, [r0, #0]
 8014416:	60c6      	str	r6, [r0, #12]
 8014418:	b13c      	cbz	r4, 801442a <_Bfree+0x3a>
 801441a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801441c:	6862      	ldr	r2, [r4, #4]
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014424:	6021      	str	r1, [r4, #0]
 8014426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801442a:	bd70      	pop	{r4, r5, r6, pc}
 801442c:	08016d9d 	.word	0x08016d9d
 8014430:	08016e80 	.word	0x08016e80

08014434 <__multadd>:
 8014434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014438:	690d      	ldr	r5, [r1, #16]
 801443a:	4607      	mov	r7, r0
 801443c:	460c      	mov	r4, r1
 801443e:	461e      	mov	r6, r3
 8014440:	f101 0c14 	add.w	ip, r1, #20
 8014444:	2000      	movs	r0, #0
 8014446:	f8dc 3000 	ldr.w	r3, [ip]
 801444a:	b299      	uxth	r1, r3
 801444c:	fb02 6101 	mla	r1, r2, r1, r6
 8014450:	0c1e      	lsrs	r6, r3, #16
 8014452:	0c0b      	lsrs	r3, r1, #16
 8014454:	fb02 3306 	mla	r3, r2, r6, r3
 8014458:	b289      	uxth	r1, r1
 801445a:	3001      	adds	r0, #1
 801445c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014460:	4285      	cmp	r5, r0
 8014462:	f84c 1b04 	str.w	r1, [ip], #4
 8014466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801446a:	dcec      	bgt.n	8014446 <__multadd+0x12>
 801446c:	b30e      	cbz	r6, 80144b2 <__multadd+0x7e>
 801446e:	68a3      	ldr	r3, [r4, #8]
 8014470:	42ab      	cmp	r3, r5
 8014472:	dc19      	bgt.n	80144a8 <__multadd+0x74>
 8014474:	6861      	ldr	r1, [r4, #4]
 8014476:	4638      	mov	r0, r7
 8014478:	3101      	adds	r1, #1
 801447a:	f7ff ff79 	bl	8014370 <_Balloc>
 801447e:	4680      	mov	r8, r0
 8014480:	b928      	cbnz	r0, 801448e <__multadd+0x5a>
 8014482:	4602      	mov	r2, r0
 8014484:	4b0c      	ldr	r3, [pc, #48]	; (80144b8 <__multadd+0x84>)
 8014486:	480d      	ldr	r0, [pc, #52]	; (80144bc <__multadd+0x88>)
 8014488:	21b5      	movs	r1, #181	; 0xb5
 801448a:	f000 fc51 	bl	8014d30 <__assert_func>
 801448e:	6922      	ldr	r2, [r4, #16]
 8014490:	3202      	adds	r2, #2
 8014492:	f104 010c 	add.w	r1, r4, #12
 8014496:	0092      	lsls	r2, r2, #2
 8014498:	300c      	adds	r0, #12
 801449a:	f7ff ff5b 	bl	8014354 <memcpy>
 801449e:	4621      	mov	r1, r4
 80144a0:	4638      	mov	r0, r7
 80144a2:	f7ff ffa5 	bl	80143f0 <_Bfree>
 80144a6:	4644      	mov	r4, r8
 80144a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144ac:	3501      	adds	r5, #1
 80144ae:	615e      	str	r6, [r3, #20]
 80144b0:	6125      	str	r5, [r4, #16]
 80144b2:	4620      	mov	r0, r4
 80144b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144b8:	08016e0f 	.word	0x08016e0f
 80144bc:	08016e80 	.word	0x08016e80

080144c0 <__hi0bits>:
 80144c0:	0c03      	lsrs	r3, r0, #16
 80144c2:	041b      	lsls	r3, r3, #16
 80144c4:	b9d3      	cbnz	r3, 80144fc <__hi0bits+0x3c>
 80144c6:	0400      	lsls	r0, r0, #16
 80144c8:	2310      	movs	r3, #16
 80144ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80144ce:	bf04      	itt	eq
 80144d0:	0200      	lsleq	r0, r0, #8
 80144d2:	3308      	addeq	r3, #8
 80144d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80144d8:	bf04      	itt	eq
 80144da:	0100      	lsleq	r0, r0, #4
 80144dc:	3304      	addeq	r3, #4
 80144de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80144e2:	bf04      	itt	eq
 80144e4:	0080      	lsleq	r0, r0, #2
 80144e6:	3302      	addeq	r3, #2
 80144e8:	2800      	cmp	r0, #0
 80144ea:	db05      	blt.n	80144f8 <__hi0bits+0x38>
 80144ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80144f0:	f103 0301 	add.w	r3, r3, #1
 80144f4:	bf08      	it	eq
 80144f6:	2320      	moveq	r3, #32
 80144f8:	4618      	mov	r0, r3
 80144fa:	4770      	bx	lr
 80144fc:	2300      	movs	r3, #0
 80144fe:	e7e4      	b.n	80144ca <__hi0bits+0xa>

08014500 <__lo0bits>:
 8014500:	6803      	ldr	r3, [r0, #0]
 8014502:	f013 0207 	ands.w	r2, r3, #7
 8014506:	4601      	mov	r1, r0
 8014508:	d00b      	beq.n	8014522 <__lo0bits+0x22>
 801450a:	07da      	lsls	r2, r3, #31
 801450c:	d423      	bmi.n	8014556 <__lo0bits+0x56>
 801450e:	0798      	lsls	r0, r3, #30
 8014510:	bf49      	itett	mi
 8014512:	085b      	lsrmi	r3, r3, #1
 8014514:	089b      	lsrpl	r3, r3, #2
 8014516:	2001      	movmi	r0, #1
 8014518:	600b      	strmi	r3, [r1, #0]
 801451a:	bf5c      	itt	pl
 801451c:	600b      	strpl	r3, [r1, #0]
 801451e:	2002      	movpl	r0, #2
 8014520:	4770      	bx	lr
 8014522:	b298      	uxth	r0, r3
 8014524:	b9a8      	cbnz	r0, 8014552 <__lo0bits+0x52>
 8014526:	0c1b      	lsrs	r3, r3, #16
 8014528:	2010      	movs	r0, #16
 801452a:	b2da      	uxtb	r2, r3
 801452c:	b90a      	cbnz	r2, 8014532 <__lo0bits+0x32>
 801452e:	3008      	adds	r0, #8
 8014530:	0a1b      	lsrs	r3, r3, #8
 8014532:	071a      	lsls	r2, r3, #28
 8014534:	bf04      	itt	eq
 8014536:	091b      	lsreq	r3, r3, #4
 8014538:	3004      	addeq	r0, #4
 801453a:	079a      	lsls	r2, r3, #30
 801453c:	bf04      	itt	eq
 801453e:	089b      	lsreq	r3, r3, #2
 8014540:	3002      	addeq	r0, #2
 8014542:	07da      	lsls	r2, r3, #31
 8014544:	d403      	bmi.n	801454e <__lo0bits+0x4e>
 8014546:	085b      	lsrs	r3, r3, #1
 8014548:	f100 0001 	add.w	r0, r0, #1
 801454c:	d005      	beq.n	801455a <__lo0bits+0x5a>
 801454e:	600b      	str	r3, [r1, #0]
 8014550:	4770      	bx	lr
 8014552:	4610      	mov	r0, r2
 8014554:	e7e9      	b.n	801452a <__lo0bits+0x2a>
 8014556:	2000      	movs	r0, #0
 8014558:	4770      	bx	lr
 801455a:	2020      	movs	r0, #32
 801455c:	4770      	bx	lr
	...

08014560 <__i2b>:
 8014560:	b510      	push	{r4, lr}
 8014562:	460c      	mov	r4, r1
 8014564:	2101      	movs	r1, #1
 8014566:	f7ff ff03 	bl	8014370 <_Balloc>
 801456a:	4602      	mov	r2, r0
 801456c:	b928      	cbnz	r0, 801457a <__i2b+0x1a>
 801456e:	4b05      	ldr	r3, [pc, #20]	; (8014584 <__i2b+0x24>)
 8014570:	4805      	ldr	r0, [pc, #20]	; (8014588 <__i2b+0x28>)
 8014572:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014576:	f000 fbdb 	bl	8014d30 <__assert_func>
 801457a:	2301      	movs	r3, #1
 801457c:	6144      	str	r4, [r0, #20]
 801457e:	6103      	str	r3, [r0, #16]
 8014580:	bd10      	pop	{r4, pc}
 8014582:	bf00      	nop
 8014584:	08016e0f 	.word	0x08016e0f
 8014588:	08016e80 	.word	0x08016e80

0801458c <__multiply>:
 801458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014590:	4691      	mov	r9, r2
 8014592:	690a      	ldr	r2, [r1, #16]
 8014594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014598:	429a      	cmp	r2, r3
 801459a:	bfb8      	it	lt
 801459c:	460b      	movlt	r3, r1
 801459e:	460c      	mov	r4, r1
 80145a0:	bfbc      	itt	lt
 80145a2:	464c      	movlt	r4, r9
 80145a4:	4699      	movlt	r9, r3
 80145a6:	6927      	ldr	r7, [r4, #16]
 80145a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145ac:	68a3      	ldr	r3, [r4, #8]
 80145ae:	6861      	ldr	r1, [r4, #4]
 80145b0:	eb07 060a 	add.w	r6, r7, sl
 80145b4:	42b3      	cmp	r3, r6
 80145b6:	b085      	sub	sp, #20
 80145b8:	bfb8      	it	lt
 80145ba:	3101      	addlt	r1, #1
 80145bc:	f7ff fed8 	bl	8014370 <_Balloc>
 80145c0:	b930      	cbnz	r0, 80145d0 <__multiply+0x44>
 80145c2:	4602      	mov	r2, r0
 80145c4:	4b44      	ldr	r3, [pc, #272]	; (80146d8 <__multiply+0x14c>)
 80145c6:	4845      	ldr	r0, [pc, #276]	; (80146dc <__multiply+0x150>)
 80145c8:	f240 115d 	movw	r1, #349	; 0x15d
 80145cc:	f000 fbb0 	bl	8014d30 <__assert_func>
 80145d0:	f100 0514 	add.w	r5, r0, #20
 80145d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80145d8:	462b      	mov	r3, r5
 80145da:	2200      	movs	r2, #0
 80145dc:	4543      	cmp	r3, r8
 80145de:	d321      	bcc.n	8014624 <__multiply+0x98>
 80145e0:	f104 0314 	add.w	r3, r4, #20
 80145e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80145e8:	f109 0314 	add.w	r3, r9, #20
 80145ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80145f0:	9202      	str	r2, [sp, #8]
 80145f2:	1b3a      	subs	r2, r7, r4
 80145f4:	3a15      	subs	r2, #21
 80145f6:	f022 0203 	bic.w	r2, r2, #3
 80145fa:	3204      	adds	r2, #4
 80145fc:	f104 0115 	add.w	r1, r4, #21
 8014600:	428f      	cmp	r7, r1
 8014602:	bf38      	it	cc
 8014604:	2204      	movcc	r2, #4
 8014606:	9201      	str	r2, [sp, #4]
 8014608:	9a02      	ldr	r2, [sp, #8]
 801460a:	9303      	str	r3, [sp, #12]
 801460c:	429a      	cmp	r2, r3
 801460e:	d80c      	bhi.n	801462a <__multiply+0x9e>
 8014610:	2e00      	cmp	r6, #0
 8014612:	dd03      	ble.n	801461c <__multiply+0x90>
 8014614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014618:	2b00      	cmp	r3, #0
 801461a:	d05a      	beq.n	80146d2 <__multiply+0x146>
 801461c:	6106      	str	r6, [r0, #16]
 801461e:	b005      	add	sp, #20
 8014620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014624:	f843 2b04 	str.w	r2, [r3], #4
 8014628:	e7d8      	b.n	80145dc <__multiply+0x50>
 801462a:	f8b3 a000 	ldrh.w	sl, [r3]
 801462e:	f1ba 0f00 	cmp.w	sl, #0
 8014632:	d024      	beq.n	801467e <__multiply+0xf2>
 8014634:	f104 0e14 	add.w	lr, r4, #20
 8014638:	46a9      	mov	r9, r5
 801463a:	f04f 0c00 	mov.w	ip, #0
 801463e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014642:	f8d9 1000 	ldr.w	r1, [r9]
 8014646:	fa1f fb82 	uxth.w	fp, r2
 801464a:	b289      	uxth	r1, r1
 801464c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014650:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014654:	f8d9 2000 	ldr.w	r2, [r9]
 8014658:	4461      	add	r1, ip
 801465a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801465e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014662:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014666:	b289      	uxth	r1, r1
 8014668:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801466c:	4577      	cmp	r7, lr
 801466e:	f849 1b04 	str.w	r1, [r9], #4
 8014672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014676:	d8e2      	bhi.n	801463e <__multiply+0xb2>
 8014678:	9a01      	ldr	r2, [sp, #4]
 801467a:	f845 c002 	str.w	ip, [r5, r2]
 801467e:	9a03      	ldr	r2, [sp, #12]
 8014680:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014684:	3304      	adds	r3, #4
 8014686:	f1b9 0f00 	cmp.w	r9, #0
 801468a:	d020      	beq.n	80146ce <__multiply+0x142>
 801468c:	6829      	ldr	r1, [r5, #0]
 801468e:	f104 0c14 	add.w	ip, r4, #20
 8014692:	46ae      	mov	lr, r5
 8014694:	f04f 0a00 	mov.w	sl, #0
 8014698:	f8bc b000 	ldrh.w	fp, [ip]
 801469c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80146a0:	fb09 220b 	mla	r2, r9, fp, r2
 80146a4:	4492      	add	sl, r2
 80146a6:	b289      	uxth	r1, r1
 80146a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80146ac:	f84e 1b04 	str.w	r1, [lr], #4
 80146b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80146b4:	f8be 1000 	ldrh.w	r1, [lr]
 80146b8:	0c12      	lsrs	r2, r2, #16
 80146ba:	fb09 1102 	mla	r1, r9, r2, r1
 80146be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80146c2:	4567      	cmp	r7, ip
 80146c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146c8:	d8e6      	bhi.n	8014698 <__multiply+0x10c>
 80146ca:	9a01      	ldr	r2, [sp, #4]
 80146cc:	50a9      	str	r1, [r5, r2]
 80146ce:	3504      	adds	r5, #4
 80146d0:	e79a      	b.n	8014608 <__multiply+0x7c>
 80146d2:	3e01      	subs	r6, #1
 80146d4:	e79c      	b.n	8014610 <__multiply+0x84>
 80146d6:	bf00      	nop
 80146d8:	08016e0f 	.word	0x08016e0f
 80146dc:	08016e80 	.word	0x08016e80

080146e0 <__pow5mult>:
 80146e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146e4:	4615      	mov	r5, r2
 80146e6:	f012 0203 	ands.w	r2, r2, #3
 80146ea:	4606      	mov	r6, r0
 80146ec:	460f      	mov	r7, r1
 80146ee:	d007      	beq.n	8014700 <__pow5mult+0x20>
 80146f0:	4c25      	ldr	r4, [pc, #148]	; (8014788 <__pow5mult+0xa8>)
 80146f2:	3a01      	subs	r2, #1
 80146f4:	2300      	movs	r3, #0
 80146f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80146fa:	f7ff fe9b 	bl	8014434 <__multadd>
 80146fe:	4607      	mov	r7, r0
 8014700:	10ad      	asrs	r5, r5, #2
 8014702:	d03d      	beq.n	8014780 <__pow5mult+0xa0>
 8014704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014706:	b97c      	cbnz	r4, 8014728 <__pow5mult+0x48>
 8014708:	2010      	movs	r0, #16
 801470a:	f7ff fe1b 	bl	8014344 <malloc>
 801470e:	4602      	mov	r2, r0
 8014710:	6270      	str	r0, [r6, #36]	; 0x24
 8014712:	b928      	cbnz	r0, 8014720 <__pow5mult+0x40>
 8014714:	4b1d      	ldr	r3, [pc, #116]	; (801478c <__pow5mult+0xac>)
 8014716:	481e      	ldr	r0, [pc, #120]	; (8014790 <__pow5mult+0xb0>)
 8014718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801471c:	f000 fb08 	bl	8014d30 <__assert_func>
 8014720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014724:	6004      	str	r4, [r0, #0]
 8014726:	60c4      	str	r4, [r0, #12]
 8014728:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801472c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014730:	b94c      	cbnz	r4, 8014746 <__pow5mult+0x66>
 8014732:	f240 2171 	movw	r1, #625	; 0x271
 8014736:	4630      	mov	r0, r6
 8014738:	f7ff ff12 	bl	8014560 <__i2b>
 801473c:	2300      	movs	r3, #0
 801473e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014742:	4604      	mov	r4, r0
 8014744:	6003      	str	r3, [r0, #0]
 8014746:	f04f 0900 	mov.w	r9, #0
 801474a:	07eb      	lsls	r3, r5, #31
 801474c:	d50a      	bpl.n	8014764 <__pow5mult+0x84>
 801474e:	4639      	mov	r1, r7
 8014750:	4622      	mov	r2, r4
 8014752:	4630      	mov	r0, r6
 8014754:	f7ff ff1a 	bl	801458c <__multiply>
 8014758:	4639      	mov	r1, r7
 801475a:	4680      	mov	r8, r0
 801475c:	4630      	mov	r0, r6
 801475e:	f7ff fe47 	bl	80143f0 <_Bfree>
 8014762:	4647      	mov	r7, r8
 8014764:	106d      	asrs	r5, r5, #1
 8014766:	d00b      	beq.n	8014780 <__pow5mult+0xa0>
 8014768:	6820      	ldr	r0, [r4, #0]
 801476a:	b938      	cbnz	r0, 801477c <__pow5mult+0x9c>
 801476c:	4622      	mov	r2, r4
 801476e:	4621      	mov	r1, r4
 8014770:	4630      	mov	r0, r6
 8014772:	f7ff ff0b 	bl	801458c <__multiply>
 8014776:	6020      	str	r0, [r4, #0]
 8014778:	f8c0 9000 	str.w	r9, [r0]
 801477c:	4604      	mov	r4, r0
 801477e:	e7e4      	b.n	801474a <__pow5mult+0x6a>
 8014780:	4638      	mov	r0, r7
 8014782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014786:	bf00      	nop
 8014788:	08016fd0 	.word	0x08016fd0
 801478c:	08016d9d 	.word	0x08016d9d
 8014790:	08016e80 	.word	0x08016e80

08014794 <__lshift>:
 8014794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014798:	460c      	mov	r4, r1
 801479a:	6849      	ldr	r1, [r1, #4]
 801479c:	6923      	ldr	r3, [r4, #16]
 801479e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147a2:	68a3      	ldr	r3, [r4, #8]
 80147a4:	4607      	mov	r7, r0
 80147a6:	4691      	mov	r9, r2
 80147a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147ac:	f108 0601 	add.w	r6, r8, #1
 80147b0:	42b3      	cmp	r3, r6
 80147b2:	db0b      	blt.n	80147cc <__lshift+0x38>
 80147b4:	4638      	mov	r0, r7
 80147b6:	f7ff fddb 	bl	8014370 <_Balloc>
 80147ba:	4605      	mov	r5, r0
 80147bc:	b948      	cbnz	r0, 80147d2 <__lshift+0x3e>
 80147be:	4602      	mov	r2, r0
 80147c0:	4b2a      	ldr	r3, [pc, #168]	; (801486c <__lshift+0xd8>)
 80147c2:	482b      	ldr	r0, [pc, #172]	; (8014870 <__lshift+0xdc>)
 80147c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80147c8:	f000 fab2 	bl	8014d30 <__assert_func>
 80147cc:	3101      	adds	r1, #1
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	e7ee      	b.n	80147b0 <__lshift+0x1c>
 80147d2:	2300      	movs	r3, #0
 80147d4:	f100 0114 	add.w	r1, r0, #20
 80147d8:	f100 0210 	add.w	r2, r0, #16
 80147dc:	4618      	mov	r0, r3
 80147de:	4553      	cmp	r3, sl
 80147e0:	db37      	blt.n	8014852 <__lshift+0xbe>
 80147e2:	6920      	ldr	r0, [r4, #16]
 80147e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80147e8:	f104 0314 	add.w	r3, r4, #20
 80147ec:	f019 091f 	ands.w	r9, r9, #31
 80147f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80147f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80147f8:	d02f      	beq.n	801485a <__lshift+0xc6>
 80147fa:	f1c9 0e20 	rsb	lr, r9, #32
 80147fe:	468a      	mov	sl, r1
 8014800:	f04f 0c00 	mov.w	ip, #0
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	fa02 f209 	lsl.w	r2, r2, r9
 801480a:	ea42 020c 	orr.w	r2, r2, ip
 801480e:	f84a 2b04 	str.w	r2, [sl], #4
 8014812:	f853 2b04 	ldr.w	r2, [r3], #4
 8014816:	4298      	cmp	r0, r3
 8014818:	fa22 fc0e 	lsr.w	ip, r2, lr
 801481c:	d8f2      	bhi.n	8014804 <__lshift+0x70>
 801481e:	1b03      	subs	r3, r0, r4
 8014820:	3b15      	subs	r3, #21
 8014822:	f023 0303 	bic.w	r3, r3, #3
 8014826:	3304      	adds	r3, #4
 8014828:	f104 0215 	add.w	r2, r4, #21
 801482c:	4290      	cmp	r0, r2
 801482e:	bf38      	it	cc
 8014830:	2304      	movcc	r3, #4
 8014832:	f841 c003 	str.w	ip, [r1, r3]
 8014836:	f1bc 0f00 	cmp.w	ip, #0
 801483a:	d001      	beq.n	8014840 <__lshift+0xac>
 801483c:	f108 0602 	add.w	r6, r8, #2
 8014840:	3e01      	subs	r6, #1
 8014842:	4638      	mov	r0, r7
 8014844:	612e      	str	r6, [r5, #16]
 8014846:	4621      	mov	r1, r4
 8014848:	f7ff fdd2 	bl	80143f0 <_Bfree>
 801484c:	4628      	mov	r0, r5
 801484e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014852:	f842 0f04 	str.w	r0, [r2, #4]!
 8014856:	3301      	adds	r3, #1
 8014858:	e7c1      	b.n	80147de <__lshift+0x4a>
 801485a:	3904      	subs	r1, #4
 801485c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014860:	f841 2f04 	str.w	r2, [r1, #4]!
 8014864:	4298      	cmp	r0, r3
 8014866:	d8f9      	bhi.n	801485c <__lshift+0xc8>
 8014868:	e7ea      	b.n	8014840 <__lshift+0xac>
 801486a:	bf00      	nop
 801486c:	08016e0f 	.word	0x08016e0f
 8014870:	08016e80 	.word	0x08016e80

08014874 <__mcmp>:
 8014874:	b530      	push	{r4, r5, lr}
 8014876:	6902      	ldr	r2, [r0, #16]
 8014878:	690c      	ldr	r4, [r1, #16]
 801487a:	1b12      	subs	r2, r2, r4
 801487c:	d10e      	bne.n	801489c <__mcmp+0x28>
 801487e:	f100 0314 	add.w	r3, r0, #20
 8014882:	3114      	adds	r1, #20
 8014884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801488c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014894:	42a5      	cmp	r5, r4
 8014896:	d003      	beq.n	80148a0 <__mcmp+0x2c>
 8014898:	d305      	bcc.n	80148a6 <__mcmp+0x32>
 801489a:	2201      	movs	r2, #1
 801489c:	4610      	mov	r0, r2
 801489e:	bd30      	pop	{r4, r5, pc}
 80148a0:	4283      	cmp	r3, r0
 80148a2:	d3f3      	bcc.n	801488c <__mcmp+0x18>
 80148a4:	e7fa      	b.n	801489c <__mcmp+0x28>
 80148a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148aa:	e7f7      	b.n	801489c <__mcmp+0x28>

080148ac <__mdiff>:
 80148ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b0:	460c      	mov	r4, r1
 80148b2:	4606      	mov	r6, r0
 80148b4:	4611      	mov	r1, r2
 80148b6:	4620      	mov	r0, r4
 80148b8:	4690      	mov	r8, r2
 80148ba:	f7ff ffdb 	bl	8014874 <__mcmp>
 80148be:	1e05      	subs	r5, r0, #0
 80148c0:	d110      	bne.n	80148e4 <__mdiff+0x38>
 80148c2:	4629      	mov	r1, r5
 80148c4:	4630      	mov	r0, r6
 80148c6:	f7ff fd53 	bl	8014370 <_Balloc>
 80148ca:	b930      	cbnz	r0, 80148da <__mdiff+0x2e>
 80148cc:	4b3a      	ldr	r3, [pc, #232]	; (80149b8 <__mdiff+0x10c>)
 80148ce:	4602      	mov	r2, r0
 80148d0:	f240 2132 	movw	r1, #562	; 0x232
 80148d4:	4839      	ldr	r0, [pc, #228]	; (80149bc <__mdiff+0x110>)
 80148d6:	f000 fa2b 	bl	8014d30 <__assert_func>
 80148da:	2301      	movs	r3, #1
 80148dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80148e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e4:	bfa4      	itt	ge
 80148e6:	4643      	movge	r3, r8
 80148e8:	46a0      	movge	r8, r4
 80148ea:	4630      	mov	r0, r6
 80148ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80148f0:	bfa6      	itte	ge
 80148f2:	461c      	movge	r4, r3
 80148f4:	2500      	movge	r5, #0
 80148f6:	2501      	movlt	r5, #1
 80148f8:	f7ff fd3a 	bl	8014370 <_Balloc>
 80148fc:	b920      	cbnz	r0, 8014908 <__mdiff+0x5c>
 80148fe:	4b2e      	ldr	r3, [pc, #184]	; (80149b8 <__mdiff+0x10c>)
 8014900:	4602      	mov	r2, r0
 8014902:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014906:	e7e5      	b.n	80148d4 <__mdiff+0x28>
 8014908:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801490c:	6926      	ldr	r6, [r4, #16]
 801490e:	60c5      	str	r5, [r0, #12]
 8014910:	f104 0914 	add.w	r9, r4, #20
 8014914:	f108 0514 	add.w	r5, r8, #20
 8014918:	f100 0e14 	add.w	lr, r0, #20
 801491c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014924:	f108 0210 	add.w	r2, r8, #16
 8014928:	46f2      	mov	sl, lr
 801492a:	2100      	movs	r1, #0
 801492c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014934:	fa1f f883 	uxth.w	r8, r3
 8014938:	fa11 f18b 	uxtah	r1, r1, fp
 801493c:	0c1b      	lsrs	r3, r3, #16
 801493e:	eba1 0808 	sub.w	r8, r1, r8
 8014942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014946:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801494a:	fa1f f888 	uxth.w	r8, r8
 801494e:	1419      	asrs	r1, r3, #16
 8014950:	454e      	cmp	r6, r9
 8014952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014956:	f84a 3b04 	str.w	r3, [sl], #4
 801495a:	d8e7      	bhi.n	801492c <__mdiff+0x80>
 801495c:	1b33      	subs	r3, r6, r4
 801495e:	3b15      	subs	r3, #21
 8014960:	f023 0303 	bic.w	r3, r3, #3
 8014964:	3304      	adds	r3, #4
 8014966:	3415      	adds	r4, #21
 8014968:	42a6      	cmp	r6, r4
 801496a:	bf38      	it	cc
 801496c:	2304      	movcc	r3, #4
 801496e:	441d      	add	r5, r3
 8014970:	4473      	add	r3, lr
 8014972:	469e      	mov	lr, r3
 8014974:	462e      	mov	r6, r5
 8014976:	4566      	cmp	r6, ip
 8014978:	d30e      	bcc.n	8014998 <__mdiff+0xec>
 801497a:	f10c 0203 	add.w	r2, ip, #3
 801497e:	1b52      	subs	r2, r2, r5
 8014980:	f022 0203 	bic.w	r2, r2, #3
 8014984:	3d03      	subs	r5, #3
 8014986:	45ac      	cmp	ip, r5
 8014988:	bf38      	it	cc
 801498a:	2200      	movcc	r2, #0
 801498c:	441a      	add	r2, r3
 801498e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014992:	b17b      	cbz	r3, 80149b4 <__mdiff+0x108>
 8014994:	6107      	str	r7, [r0, #16]
 8014996:	e7a3      	b.n	80148e0 <__mdiff+0x34>
 8014998:	f856 8b04 	ldr.w	r8, [r6], #4
 801499c:	fa11 f288 	uxtah	r2, r1, r8
 80149a0:	1414      	asrs	r4, r2, #16
 80149a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80149a6:	b292      	uxth	r2, r2
 80149a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80149ac:	f84e 2b04 	str.w	r2, [lr], #4
 80149b0:	1421      	asrs	r1, r4, #16
 80149b2:	e7e0      	b.n	8014976 <__mdiff+0xca>
 80149b4:	3f01      	subs	r7, #1
 80149b6:	e7ea      	b.n	801498e <__mdiff+0xe2>
 80149b8:	08016e0f 	.word	0x08016e0f
 80149bc:	08016e80 	.word	0x08016e80

080149c0 <__d2b>:
 80149c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149c4:	4689      	mov	r9, r1
 80149c6:	2101      	movs	r1, #1
 80149c8:	ec57 6b10 	vmov	r6, r7, d0
 80149cc:	4690      	mov	r8, r2
 80149ce:	f7ff fccf 	bl	8014370 <_Balloc>
 80149d2:	4604      	mov	r4, r0
 80149d4:	b930      	cbnz	r0, 80149e4 <__d2b+0x24>
 80149d6:	4602      	mov	r2, r0
 80149d8:	4b25      	ldr	r3, [pc, #148]	; (8014a70 <__d2b+0xb0>)
 80149da:	4826      	ldr	r0, [pc, #152]	; (8014a74 <__d2b+0xb4>)
 80149dc:	f240 310a 	movw	r1, #778	; 0x30a
 80149e0:	f000 f9a6 	bl	8014d30 <__assert_func>
 80149e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80149e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80149ec:	bb35      	cbnz	r5, 8014a3c <__d2b+0x7c>
 80149ee:	2e00      	cmp	r6, #0
 80149f0:	9301      	str	r3, [sp, #4]
 80149f2:	d028      	beq.n	8014a46 <__d2b+0x86>
 80149f4:	4668      	mov	r0, sp
 80149f6:	9600      	str	r6, [sp, #0]
 80149f8:	f7ff fd82 	bl	8014500 <__lo0bits>
 80149fc:	9900      	ldr	r1, [sp, #0]
 80149fe:	b300      	cbz	r0, 8014a42 <__d2b+0x82>
 8014a00:	9a01      	ldr	r2, [sp, #4]
 8014a02:	f1c0 0320 	rsb	r3, r0, #32
 8014a06:	fa02 f303 	lsl.w	r3, r2, r3
 8014a0a:	430b      	orrs	r3, r1
 8014a0c:	40c2      	lsrs	r2, r0
 8014a0e:	6163      	str	r3, [r4, #20]
 8014a10:	9201      	str	r2, [sp, #4]
 8014a12:	9b01      	ldr	r3, [sp, #4]
 8014a14:	61a3      	str	r3, [r4, #24]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	bf14      	ite	ne
 8014a1a:	2202      	movne	r2, #2
 8014a1c:	2201      	moveq	r2, #1
 8014a1e:	6122      	str	r2, [r4, #16]
 8014a20:	b1d5      	cbz	r5, 8014a58 <__d2b+0x98>
 8014a22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a26:	4405      	add	r5, r0
 8014a28:	f8c9 5000 	str.w	r5, [r9]
 8014a2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a30:	f8c8 0000 	str.w	r0, [r8]
 8014a34:	4620      	mov	r0, r4
 8014a36:	b003      	add	sp, #12
 8014a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a40:	e7d5      	b.n	80149ee <__d2b+0x2e>
 8014a42:	6161      	str	r1, [r4, #20]
 8014a44:	e7e5      	b.n	8014a12 <__d2b+0x52>
 8014a46:	a801      	add	r0, sp, #4
 8014a48:	f7ff fd5a 	bl	8014500 <__lo0bits>
 8014a4c:	9b01      	ldr	r3, [sp, #4]
 8014a4e:	6163      	str	r3, [r4, #20]
 8014a50:	2201      	movs	r2, #1
 8014a52:	6122      	str	r2, [r4, #16]
 8014a54:	3020      	adds	r0, #32
 8014a56:	e7e3      	b.n	8014a20 <__d2b+0x60>
 8014a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a60:	f8c9 0000 	str.w	r0, [r9]
 8014a64:	6918      	ldr	r0, [r3, #16]
 8014a66:	f7ff fd2b 	bl	80144c0 <__hi0bits>
 8014a6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014a6e:	e7df      	b.n	8014a30 <__d2b+0x70>
 8014a70:	08016e0f 	.word	0x08016e0f
 8014a74:	08016e80 	.word	0x08016e80

08014a78 <_calloc_r>:
 8014a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a7a:	fba1 2402 	umull	r2, r4, r1, r2
 8014a7e:	b94c      	cbnz	r4, 8014a94 <_calloc_r+0x1c>
 8014a80:	4611      	mov	r1, r2
 8014a82:	9201      	str	r2, [sp, #4]
 8014a84:	f000 f87a 	bl	8014b7c <_malloc_r>
 8014a88:	9a01      	ldr	r2, [sp, #4]
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	b930      	cbnz	r0, 8014a9c <_calloc_r+0x24>
 8014a8e:	4628      	mov	r0, r5
 8014a90:	b003      	add	sp, #12
 8014a92:	bd30      	pop	{r4, r5, pc}
 8014a94:	220c      	movs	r2, #12
 8014a96:	6002      	str	r2, [r0, #0]
 8014a98:	2500      	movs	r5, #0
 8014a9a:	e7f8      	b.n	8014a8e <_calloc_r+0x16>
 8014a9c:	4621      	mov	r1, r4
 8014a9e:	f7fd feb3 	bl	8012808 <memset>
 8014aa2:	e7f4      	b.n	8014a8e <_calloc_r+0x16>

08014aa4 <_free_r>:
 8014aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014aa6:	2900      	cmp	r1, #0
 8014aa8:	d044      	beq.n	8014b34 <_free_r+0x90>
 8014aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014aae:	9001      	str	r0, [sp, #4]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8014ab6:	bfb8      	it	lt
 8014ab8:	18e4      	addlt	r4, r4, r3
 8014aba:	f000 f9bf 	bl	8014e3c <__malloc_lock>
 8014abe:	4a1e      	ldr	r2, [pc, #120]	; (8014b38 <_free_r+0x94>)
 8014ac0:	9801      	ldr	r0, [sp, #4]
 8014ac2:	6813      	ldr	r3, [r2, #0]
 8014ac4:	b933      	cbnz	r3, 8014ad4 <_free_r+0x30>
 8014ac6:	6063      	str	r3, [r4, #4]
 8014ac8:	6014      	str	r4, [r2, #0]
 8014aca:	b003      	add	sp, #12
 8014acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ad0:	f000 b9ba 	b.w	8014e48 <__malloc_unlock>
 8014ad4:	42a3      	cmp	r3, r4
 8014ad6:	d908      	bls.n	8014aea <_free_r+0x46>
 8014ad8:	6825      	ldr	r5, [r4, #0]
 8014ada:	1961      	adds	r1, r4, r5
 8014adc:	428b      	cmp	r3, r1
 8014ade:	bf01      	itttt	eq
 8014ae0:	6819      	ldreq	r1, [r3, #0]
 8014ae2:	685b      	ldreq	r3, [r3, #4]
 8014ae4:	1949      	addeq	r1, r1, r5
 8014ae6:	6021      	streq	r1, [r4, #0]
 8014ae8:	e7ed      	b.n	8014ac6 <_free_r+0x22>
 8014aea:	461a      	mov	r2, r3
 8014aec:	685b      	ldr	r3, [r3, #4]
 8014aee:	b10b      	cbz	r3, 8014af4 <_free_r+0x50>
 8014af0:	42a3      	cmp	r3, r4
 8014af2:	d9fa      	bls.n	8014aea <_free_r+0x46>
 8014af4:	6811      	ldr	r1, [r2, #0]
 8014af6:	1855      	adds	r5, r2, r1
 8014af8:	42a5      	cmp	r5, r4
 8014afa:	d10b      	bne.n	8014b14 <_free_r+0x70>
 8014afc:	6824      	ldr	r4, [r4, #0]
 8014afe:	4421      	add	r1, r4
 8014b00:	1854      	adds	r4, r2, r1
 8014b02:	42a3      	cmp	r3, r4
 8014b04:	6011      	str	r1, [r2, #0]
 8014b06:	d1e0      	bne.n	8014aca <_free_r+0x26>
 8014b08:	681c      	ldr	r4, [r3, #0]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	6053      	str	r3, [r2, #4]
 8014b0e:	4421      	add	r1, r4
 8014b10:	6011      	str	r1, [r2, #0]
 8014b12:	e7da      	b.n	8014aca <_free_r+0x26>
 8014b14:	d902      	bls.n	8014b1c <_free_r+0x78>
 8014b16:	230c      	movs	r3, #12
 8014b18:	6003      	str	r3, [r0, #0]
 8014b1a:	e7d6      	b.n	8014aca <_free_r+0x26>
 8014b1c:	6825      	ldr	r5, [r4, #0]
 8014b1e:	1961      	adds	r1, r4, r5
 8014b20:	428b      	cmp	r3, r1
 8014b22:	bf04      	itt	eq
 8014b24:	6819      	ldreq	r1, [r3, #0]
 8014b26:	685b      	ldreq	r3, [r3, #4]
 8014b28:	6063      	str	r3, [r4, #4]
 8014b2a:	bf04      	itt	eq
 8014b2c:	1949      	addeq	r1, r1, r5
 8014b2e:	6021      	streq	r1, [r4, #0]
 8014b30:	6054      	str	r4, [r2, #4]
 8014b32:	e7ca      	b.n	8014aca <_free_r+0x26>
 8014b34:	b003      	add	sp, #12
 8014b36:	bd30      	pop	{r4, r5, pc}
 8014b38:	24001754 	.word	0x24001754

08014b3c <sbrk_aligned>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	4e0e      	ldr	r6, [pc, #56]	; (8014b78 <sbrk_aligned+0x3c>)
 8014b40:	460c      	mov	r4, r1
 8014b42:	6831      	ldr	r1, [r6, #0]
 8014b44:	4605      	mov	r5, r0
 8014b46:	b911      	cbnz	r1, 8014b4e <sbrk_aligned+0x12>
 8014b48:	f000 f88c 	bl	8014c64 <_sbrk_r>
 8014b4c:	6030      	str	r0, [r6, #0]
 8014b4e:	4621      	mov	r1, r4
 8014b50:	4628      	mov	r0, r5
 8014b52:	f000 f887 	bl	8014c64 <_sbrk_r>
 8014b56:	1c43      	adds	r3, r0, #1
 8014b58:	d00a      	beq.n	8014b70 <sbrk_aligned+0x34>
 8014b5a:	1cc4      	adds	r4, r0, #3
 8014b5c:	f024 0403 	bic.w	r4, r4, #3
 8014b60:	42a0      	cmp	r0, r4
 8014b62:	d007      	beq.n	8014b74 <sbrk_aligned+0x38>
 8014b64:	1a21      	subs	r1, r4, r0
 8014b66:	4628      	mov	r0, r5
 8014b68:	f000 f87c 	bl	8014c64 <_sbrk_r>
 8014b6c:	3001      	adds	r0, #1
 8014b6e:	d101      	bne.n	8014b74 <sbrk_aligned+0x38>
 8014b70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b74:	4620      	mov	r0, r4
 8014b76:	bd70      	pop	{r4, r5, r6, pc}
 8014b78:	24001758 	.word	0x24001758

08014b7c <_malloc_r>:
 8014b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b80:	1ccd      	adds	r5, r1, #3
 8014b82:	f025 0503 	bic.w	r5, r5, #3
 8014b86:	3508      	adds	r5, #8
 8014b88:	2d0c      	cmp	r5, #12
 8014b8a:	bf38      	it	cc
 8014b8c:	250c      	movcc	r5, #12
 8014b8e:	2d00      	cmp	r5, #0
 8014b90:	4607      	mov	r7, r0
 8014b92:	db01      	blt.n	8014b98 <_malloc_r+0x1c>
 8014b94:	42a9      	cmp	r1, r5
 8014b96:	d905      	bls.n	8014ba4 <_malloc_r+0x28>
 8014b98:	230c      	movs	r3, #12
 8014b9a:	603b      	str	r3, [r7, #0]
 8014b9c:	2600      	movs	r6, #0
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba4:	4e2e      	ldr	r6, [pc, #184]	; (8014c60 <_malloc_r+0xe4>)
 8014ba6:	f000 f949 	bl	8014e3c <__malloc_lock>
 8014baa:	6833      	ldr	r3, [r6, #0]
 8014bac:	461c      	mov	r4, r3
 8014bae:	bb34      	cbnz	r4, 8014bfe <_malloc_r+0x82>
 8014bb0:	4629      	mov	r1, r5
 8014bb2:	4638      	mov	r0, r7
 8014bb4:	f7ff ffc2 	bl	8014b3c <sbrk_aligned>
 8014bb8:	1c43      	adds	r3, r0, #1
 8014bba:	4604      	mov	r4, r0
 8014bbc:	d14d      	bne.n	8014c5a <_malloc_r+0xde>
 8014bbe:	6834      	ldr	r4, [r6, #0]
 8014bc0:	4626      	mov	r6, r4
 8014bc2:	2e00      	cmp	r6, #0
 8014bc4:	d140      	bne.n	8014c48 <_malloc_r+0xcc>
 8014bc6:	6823      	ldr	r3, [r4, #0]
 8014bc8:	4631      	mov	r1, r6
 8014bca:	4638      	mov	r0, r7
 8014bcc:	eb04 0803 	add.w	r8, r4, r3
 8014bd0:	f000 f848 	bl	8014c64 <_sbrk_r>
 8014bd4:	4580      	cmp	r8, r0
 8014bd6:	d13a      	bne.n	8014c4e <_malloc_r+0xd2>
 8014bd8:	6821      	ldr	r1, [r4, #0]
 8014bda:	3503      	adds	r5, #3
 8014bdc:	1a6d      	subs	r5, r5, r1
 8014bde:	f025 0503 	bic.w	r5, r5, #3
 8014be2:	3508      	adds	r5, #8
 8014be4:	2d0c      	cmp	r5, #12
 8014be6:	bf38      	it	cc
 8014be8:	250c      	movcc	r5, #12
 8014bea:	4629      	mov	r1, r5
 8014bec:	4638      	mov	r0, r7
 8014bee:	f7ff ffa5 	bl	8014b3c <sbrk_aligned>
 8014bf2:	3001      	adds	r0, #1
 8014bf4:	d02b      	beq.n	8014c4e <_malloc_r+0xd2>
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	442b      	add	r3, r5
 8014bfa:	6023      	str	r3, [r4, #0]
 8014bfc:	e00e      	b.n	8014c1c <_malloc_r+0xa0>
 8014bfe:	6822      	ldr	r2, [r4, #0]
 8014c00:	1b52      	subs	r2, r2, r5
 8014c02:	d41e      	bmi.n	8014c42 <_malloc_r+0xc6>
 8014c04:	2a0b      	cmp	r2, #11
 8014c06:	d916      	bls.n	8014c36 <_malloc_r+0xba>
 8014c08:	1961      	adds	r1, r4, r5
 8014c0a:	42a3      	cmp	r3, r4
 8014c0c:	6025      	str	r5, [r4, #0]
 8014c0e:	bf18      	it	ne
 8014c10:	6059      	strne	r1, [r3, #4]
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	bf08      	it	eq
 8014c16:	6031      	streq	r1, [r6, #0]
 8014c18:	5162      	str	r2, [r4, r5]
 8014c1a:	604b      	str	r3, [r1, #4]
 8014c1c:	4638      	mov	r0, r7
 8014c1e:	f104 060b 	add.w	r6, r4, #11
 8014c22:	f000 f911 	bl	8014e48 <__malloc_unlock>
 8014c26:	f026 0607 	bic.w	r6, r6, #7
 8014c2a:	1d23      	adds	r3, r4, #4
 8014c2c:	1af2      	subs	r2, r6, r3
 8014c2e:	d0b6      	beq.n	8014b9e <_malloc_r+0x22>
 8014c30:	1b9b      	subs	r3, r3, r6
 8014c32:	50a3      	str	r3, [r4, r2]
 8014c34:	e7b3      	b.n	8014b9e <_malloc_r+0x22>
 8014c36:	6862      	ldr	r2, [r4, #4]
 8014c38:	42a3      	cmp	r3, r4
 8014c3a:	bf0c      	ite	eq
 8014c3c:	6032      	streq	r2, [r6, #0]
 8014c3e:	605a      	strne	r2, [r3, #4]
 8014c40:	e7ec      	b.n	8014c1c <_malloc_r+0xa0>
 8014c42:	4623      	mov	r3, r4
 8014c44:	6864      	ldr	r4, [r4, #4]
 8014c46:	e7b2      	b.n	8014bae <_malloc_r+0x32>
 8014c48:	4634      	mov	r4, r6
 8014c4a:	6876      	ldr	r6, [r6, #4]
 8014c4c:	e7b9      	b.n	8014bc2 <_malloc_r+0x46>
 8014c4e:	230c      	movs	r3, #12
 8014c50:	603b      	str	r3, [r7, #0]
 8014c52:	4638      	mov	r0, r7
 8014c54:	f000 f8f8 	bl	8014e48 <__malloc_unlock>
 8014c58:	e7a1      	b.n	8014b9e <_malloc_r+0x22>
 8014c5a:	6025      	str	r5, [r4, #0]
 8014c5c:	e7de      	b.n	8014c1c <_malloc_r+0xa0>
 8014c5e:	bf00      	nop
 8014c60:	24001754 	.word	0x24001754

08014c64 <_sbrk_r>:
 8014c64:	b538      	push	{r3, r4, r5, lr}
 8014c66:	4d06      	ldr	r5, [pc, #24]	; (8014c80 <_sbrk_r+0x1c>)
 8014c68:	2300      	movs	r3, #0
 8014c6a:	4604      	mov	r4, r0
 8014c6c:	4608      	mov	r0, r1
 8014c6e:	602b      	str	r3, [r5, #0]
 8014c70:	f7f0 fd00 	bl	8005674 <_sbrk>
 8014c74:	1c43      	adds	r3, r0, #1
 8014c76:	d102      	bne.n	8014c7e <_sbrk_r+0x1a>
 8014c78:	682b      	ldr	r3, [r5, #0]
 8014c7a:	b103      	cbz	r3, 8014c7e <_sbrk_r+0x1a>
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	bd38      	pop	{r3, r4, r5, pc}
 8014c80:	2400175c 	.word	0x2400175c

08014c84 <__sread>:
 8014c84:	b510      	push	{r4, lr}
 8014c86:	460c      	mov	r4, r1
 8014c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c8c:	f000 fa3c 	bl	8015108 <_read_r>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	bfab      	itete	ge
 8014c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c96:	89a3      	ldrhlt	r3, [r4, #12]
 8014c98:	181b      	addge	r3, r3, r0
 8014c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c9e:	bfac      	ite	ge
 8014ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ca2:	81a3      	strhlt	r3, [r4, #12]
 8014ca4:	bd10      	pop	{r4, pc}

08014ca6 <__swrite>:
 8014ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014caa:	461f      	mov	r7, r3
 8014cac:	898b      	ldrh	r3, [r1, #12]
 8014cae:	05db      	lsls	r3, r3, #23
 8014cb0:	4605      	mov	r5, r0
 8014cb2:	460c      	mov	r4, r1
 8014cb4:	4616      	mov	r6, r2
 8014cb6:	d505      	bpl.n	8014cc4 <__swrite+0x1e>
 8014cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cbc:	2302      	movs	r3, #2
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f000 f898 	bl	8014df4 <_lseek_r>
 8014cc4:	89a3      	ldrh	r3, [r4, #12]
 8014cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014cce:	81a3      	strh	r3, [r4, #12]
 8014cd0:	4632      	mov	r2, r6
 8014cd2:	463b      	mov	r3, r7
 8014cd4:	4628      	mov	r0, r5
 8014cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cda:	f000 b817 	b.w	8014d0c <_write_r>

08014cde <__sseek>:
 8014cde:	b510      	push	{r4, lr}
 8014ce0:	460c      	mov	r4, r1
 8014ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ce6:	f000 f885 	bl	8014df4 <_lseek_r>
 8014cea:	1c43      	adds	r3, r0, #1
 8014cec:	89a3      	ldrh	r3, [r4, #12]
 8014cee:	bf15      	itete	ne
 8014cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8014cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014cfa:	81a3      	strheq	r3, [r4, #12]
 8014cfc:	bf18      	it	ne
 8014cfe:	81a3      	strhne	r3, [r4, #12]
 8014d00:	bd10      	pop	{r4, pc}

08014d02 <__sclose>:
 8014d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d06:	f000 b831 	b.w	8014d6c <_close_r>
	...

08014d0c <_write_r>:
 8014d0c:	b538      	push	{r3, r4, r5, lr}
 8014d0e:	4d07      	ldr	r5, [pc, #28]	; (8014d2c <_write_r+0x20>)
 8014d10:	4604      	mov	r4, r0
 8014d12:	4608      	mov	r0, r1
 8014d14:	4611      	mov	r1, r2
 8014d16:	2200      	movs	r2, #0
 8014d18:	602a      	str	r2, [r5, #0]
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	f7f0 fc59 	bl	80055d2 <_write>
 8014d20:	1c43      	adds	r3, r0, #1
 8014d22:	d102      	bne.n	8014d2a <_write_r+0x1e>
 8014d24:	682b      	ldr	r3, [r5, #0]
 8014d26:	b103      	cbz	r3, 8014d2a <_write_r+0x1e>
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	bd38      	pop	{r3, r4, r5, pc}
 8014d2c:	2400175c 	.word	0x2400175c

08014d30 <__assert_func>:
 8014d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d32:	4614      	mov	r4, r2
 8014d34:	461a      	mov	r2, r3
 8014d36:	4b09      	ldr	r3, [pc, #36]	; (8014d5c <__assert_func+0x2c>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	68d8      	ldr	r0, [r3, #12]
 8014d3e:	b14c      	cbz	r4, 8014d54 <__assert_func+0x24>
 8014d40:	4b07      	ldr	r3, [pc, #28]	; (8014d60 <__assert_func+0x30>)
 8014d42:	9100      	str	r1, [sp, #0]
 8014d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d48:	4906      	ldr	r1, [pc, #24]	; (8014d64 <__assert_func+0x34>)
 8014d4a:	462b      	mov	r3, r5
 8014d4c:	f000 f81e 	bl	8014d8c <fiprintf>
 8014d50:	f000 f9f9 	bl	8015146 <abort>
 8014d54:	4b04      	ldr	r3, [pc, #16]	; (8014d68 <__assert_func+0x38>)
 8014d56:	461c      	mov	r4, r3
 8014d58:	e7f3      	b.n	8014d42 <__assert_func+0x12>
 8014d5a:	bf00      	nop
 8014d5c:	24000240 	.word	0x24000240
 8014d60:	08016fdc 	.word	0x08016fdc
 8014d64:	08016fe9 	.word	0x08016fe9
 8014d68:	08017017 	.word	0x08017017

08014d6c <_close_r>:
 8014d6c:	b538      	push	{r3, r4, r5, lr}
 8014d6e:	4d06      	ldr	r5, [pc, #24]	; (8014d88 <_close_r+0x1c>)
 8014d70:	2300      	movs	r3, #0
 8014d72:	4604      	mov	r4, r0
 8014d74:	4608      	mov	r0, r1
 8014d76:	602b      	str	r3, [r5, #0]
 8014d78:	f7f0 fc47 	bl	800560a <_close>
 8014d7c:	1c43      	adds	r3, r0, #1
 8014d7e:	d102      	bne.n	8014d86 <_close_r+0x1a>
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	b103      	cbz	r3, 8014d86 <_close_r+0x1a>
 8014d84:	6023      	str	r3, [r4, #0]
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	2400175c 	.word	0x2400175c

08014d8c <fiprintf>:
 8014d8c:	b40e      	push	{r1, r2, r3}
 8014d8e:	b503      	push	{r0, r1, lr}
 8014d90:	4601      	mov	r1, r0
 8014d92:	ab03      	add	r3, sp, #12
 8014d94:	4805      	ldr	r0, [pc, #20]	; (8014dac <fiprintf+0x20>)
 8014d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d9a:	6800      	ldr	r0, [r0, #0]
 8014d9c:	9301      	str	r3, [sp, #4]
 8014d9e:	f000 f883 	bl	8014ea8 <_vfiprintf_r>
 8014da2:	b002      	add	sp, #8
 8014da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014da8:	b003      	add	sp, #12
 8014daa:	4770      	bx	lr
 8014dac:	24000240 	.word	0x24000240

08014db0 <_fstat_r>:
 8014db0:	b538      	push	{r3, r4, r5, lr}
 8014db2:	4d07      	ldr	r5, [pc, #28]	; (8014dd0 <_fstat_r+0x20>)
 8014db4:	2300      	movs	r3, #0
 8014db6:	4604      	mov	r4, r0
 8014db8:	4608      	mov	r0, r1
 8014dba:	4611      	mov	r1, r2
 8014dbc:	602b      	str	r3, [r5, #0]
 8014dbe:	f7f0 fc30 	bl	8005622 <_fstat>
 8014dc2:	1c43      	adds	r3, r0, #1
 8014dc4:	d102      	bne.n	8014dcc <_fstat_r+0x1c>
 8014dc6:	682b      	ldr	r3, [r5, #0]
 8014dc8:	b103      	cbz	r3, 8014dcc <_fstat_r+0x1c>
 8014dca:	6023      	str	r3, [r4, #0]
 8014dcc:	bd38      	pop	{r3, r4, r5, pc}
 8014dce:	bf00      	nop
 8014dd0:	2400175c 	.word	0x2400175c

08014dd4 <_isatty_r>:
 8014dd4:	b538      	push	{r3, r4, r5, lr}
 8014dd6:	4d06      	ldr	r5, [pc, #24]	; (8014df0 <_isatty_r+0x1c>)
 8014dd8:	2300      	movs	r3, #0
 8014dda:	4604      	mov	r4, r0
 8014ddc:	4608      	mov	r0, r1
 8014dde:	602b      	str	r3, [r5, #0]
 8014de0:	f7f0 fc2f 	bl	8005642 <_isatty>
 8014de4:	1c43      	adds	r3, r0, #1
 8014de6:	d102      	bne.n	8014dee <_isatty_r+0x1a>
 8014de8:	682b      	ldr	r3, [r5, #0]
 8014dea:	b103      	cbz	r3, 8014dee <_isatty_r+0x1a>
 8014dec:	6023      	str	r3, [r4, #0]
 8014dee:	bd38      	pop	{r3, r4, r5, pc}
 8014df0:	2400175c 	.word	0x2400175c

08014df4 <_lseek_r>:
 8014df4:	b538      	push	{r3, r4, r5, lr}
 8014df6:	4d07      	ldr	r5, [pc, #28]	; (8014e14 <_lseek_r+0x20>)
 8014df8:	4604      	mov	r4, r0
 8014dfa:	4608      	mov	r0, r1
 8014dfc:	4611      	mov	r1, r2
 8014dfe:	2200      	movs	r2, #0
 8014e00:	602a      	str	r2, [r5, #0]
 8014e02:	461a      	mov	r2, r3
 8014e04:	f7f0 fc28 	bl	8005658 <_lseek>
 8014e08:	1c43      	adds	r3, r0, #1
 8014e0a:	d102      	bne.n	8014e12 <_lseek_r+0x1e>
 8014e0c:	682b      	ldr	r3, [r5, #0]
 8014e0e:	b103      	cbz	r3, 8014e12 <_lseek_r+0x1e>
 8014e10:	6023      	str	r3, [r4, #0]
 8014e12:	bd38      	pop	{r3, r4, r5, pc}
 8014e14:	2400175c 	.word	0x2400175c

08014e18 <__ascii_mbtowc>:
 8014e18:	b082      	sub	sp, #8
 8014e1a:	b901      	cbnz	r1, 8014e1e <__ascii_mbtowc+0x6>
 8014e1c:	a901      	add	r1, sp, #4
 8014e1e:	b142      	cbz	r2, 8014e32 <__ascii_mbtowc+0x1a>
 8014e20:	b14b      	cbz	r3, 8014e36 <__ascii_mbtowc+0x1e>
 8014e22:	7813      	ldrb	r3, [r2, #0]
 8014e24:	600b      	str	r3, [r1, #0]
 8014e26:	7812      	ldrb	r2, [r2, #0]
 8014e28:	1e10      	subs	r0, r2, #0
 8014e2a:	bf18      	it	ne
 8014e2c:	2001      	movne	r0, #1
 8014e2e:	b002      	add	sp, #8
 8014e30:	4770      	bx	lr
 8014e32:	4610      	mov	r0, r2
 8014e34:	e7fb      	b.n	8014e2e <__ascii_mbtowc+0x16>
 8014e36:	f06f 0001 	mvn.w	r0, #1
 8014e3a:	e7f8      	b.n	8014e2e <__ascii_mbtowc+0x16>

08014e3c <__malloc_lock>:
 8014e3c:	4801      	ldr	r0, [pc, #4]	; (8014e44 <__malloc_lock+0x8>)
 8014e3e:	f7ff ba1a 	b.w	8014276 <__retarget_lock_acquire_recursive>
 8014e42:	bf00      	nop
 8014e44:	24001750 	.word	0x24001750

08014e48 <__malloc_unlock>:
 8014e48:	4801      	ldr	r0, [pc, #4]	; (8014e50 <__malloc_unlock+0x8>)
 8014e4a:	f7ff ba15 	b.w	8014278 <__retarget_lock_release_recursive>
 8014e4e:	bf00      	nop
 8014e50:	24001750 	.word	0x24001750

08014e54 <__sfputc_r>:
 8014e54:	6893      	ldr	r3, [r2, #8]
 8014e56:	3b01      	subs	r3, #1
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	b410      	push	{r4}
 8014e5c:	6093      	str	r3, [r2, #8]
 8014e5e:	da08      	bge.n	8014e72 <__sfputc_r+0x1e>
 8014e60:	6994      	ldr	r4, [r2, #24]
 8014e62:	42a3      	cmp	r3, r4
 8014e64:	db01      	blt.n	8014e6a <__sfputc_r+0x16>
 8014e66:	290a      	cmp	r1, #10
 8014e68:	d103      	bne.n	8014e72 <__sfputc_r+0x1e>
 8014e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e6e:	f7fe b98b 	b.w	8013188 <__swbuf_r>
 8014e72:	6813      	ldr	r3, [r2, #0]
 8014e74:	1c58      	adds	r0, r3, #1
 8014e76:	6010      	str	r0, [r2, #0]
 8014e78:	7019      	strb	r1, [r3, #0]
 8014e7a:	4608      	mov	r0, r1
 8014e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e80:	4770      	bx	lr

08014e82 <__sfputs_r>:
 8014e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e84:	4606      	mov	r6, r0
 8014e86:	460f      	mov	r7, r1
 8014e88:	4614      	mov	r4, r2
 8014e8a:	18d5      	adds	r5, r2, r3
 8014e8c:	42ac      	cmp	r4, r5
 8014e8e:	d101      	bne.n	8014e94 <__sfputs_r+0x12>
 8014e90:	2000      	movs	r0, #0
 8014e92:	e007      	b.n	8014ea4 <__sfputs_r+0x22>
 8014e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e98:	463a      	mov	r2, r7
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f7ff ffda 	bl	8014e54 <__sfputc_r>
 8014ea0:	1c43      	adds	r3, r0, #1
 8014ea2:	d1f3      	bne.n	8014e8c <__sfputs_r+0xa>
 8014ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ea8 <_vfiprintf_r>:
 8014ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eac:	460d      	mov	r5, r1
 8014eae:	b09d      	sub	sp, #116	; 0x74
 8014eb0:	4614      	mov	r4, r2
 8014eb2:	4698      	mov	r8, r3
 8014eb4:	4606      	mov	r6, r0
 8014eb6:	b118      	cbz	r0, 8014ec0 <_vfiprintf_r+0x18>
 8014eb8:	6983      	ldr	r3, [r0, #24]
 8014eba:	b90b      	cbnz	r3, 8014ec0 <_vfiprintf_r+0x18>
 8014ebc:	f7ff f938 	bl	8014130 <__sinit>
 8014ec0:	4b89      	ldr	r3, [pc, #548]	; (80150e8 <_vfiprintf_r+0x240>)
 8014ec2:	429d      	cmp	r5, r3
 8014ec4:	d11b      	bne.n	8014efe <_vfiprintf_r+0x56>
 8014ec6:	6875      	ldr	r5, [r6, #4]
 8014ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014eca:	07d9      	lsls	r1, r3, #31
 8014ecc:	d405      	bmi.n	8014eda <_vfiprintf_r+0x32>
 8014ece:	89ab      	ldrh	r3, [r5, #12]
 8014ed0:	059a      	lsls	r2, r3, #22
 8014ed2:	d402      	bmi.n	8014eda <_vfiprintf_r+0x32>
 8014ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ed6:	f7ff f9ce 	bl	8014276 <__retarget_lock_acquire_recursive>
 8014eda:	89ab      	ldrh	r3, [r5, #12]
 8014edc:	071b      	lsls	r3, r3, #28
 8014ede:	d501      	bpl.n	8014ee4 <_vfiprintf_r+0x3c>
 8014ee0:	692b      	ldr	r3, [r5, #16]
 8014ee2:	b9eb      	cbnz	r3, 8014f20 <_vfiprintf_r+0x78>
 8014ee4:	4629      	mov	r1, r5
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	f7fe f9a0 	bl	801322c <__swsetup_r>
 8014eec:	b1c0      	cbz	r0, 8014f20 <_vfiprintf_r+0x78>
 8014eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ef0:	07dc      	lsls	r4, r3, #31
 8014ef2:	d50e      	bpl.n	8014f12 <_vfiprintf_r+0x6a>
 8014ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ef8:	b01d      	add	sp, #116	; 0x74
 8014efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efe:	4b7b      	ldr	r3, [pc, #492]	; (80150ec <_vfiprintf_r+0x244>)
 8014f00:	429d      	cmp	r5, r3
 8014f02:	d101      	bne.n	8014f08 <_vfiprintf_r+0x60>
 8014f04:	68b5      	ldr	r5, [r6, #8]
 8014f06:	e7df      	b.n	8014ec8 <_vfiprintf_r+0x20>
 8014f08:	4b79      	ldr	r3, [pc, #484]	; (80150f0 <_vfiprintf_r+0x248>)
 8014f0a:	429d      	cmp	r5, r3
 8014f0c:	bf08      	it	eq
 8014f0e:	68f5      	ldreq	r5, [r6, #12]
 8014f10:	e7da      	b.n	8014ec8 <_vfiprintf_r+0x20>
 8014f12:	89ab      	ldrh	r3, [r5, #12]
 8014f14:	0598      	lsls	r0, r3, #22
 8014f16:	d4ed      	bmi.n	8014ef4 <_vfiprintf_r+0x4c>
 8014f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f1a:	f7ff f9ad 	bl	8014278 <__retarget_lock_release_recursive>
 8014f1e:	e7e9      	b.n	8014ef4 <_vfiprintf_r+0x4c>
 8014f20:	2300      	movs	r3, #0
 8014f22:	9309      	str	r3, [sp, #36]	; 0x24
 8014f24:	2320      	movs	r3, #32
 8014f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f2e:	2330      	movs	r3, #48	; 0x30
 8014f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80150f4 <_vfiprintf_r+0x24c>
 8014f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f38:	f04f 0901 	mov.w	r9, #1
 8014f3c:	4623      	mov	r3, r4
 8014f3e:	469a      	mov	sl, r3
 8014f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f44:	b10a      	cbz	r2, 8014f4a <_vfiprintf_r+0xa2>
 8014f46:	2a25      	cmp	r2, #37	; 0x25
 8014f48:	d1f9      	bne.n	8014f3e <_vfiprintf_r+0x96>
 8014f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8014f4e:	d00b      	beq.n	8014f68 <_vfiprintf_r+0xc0>
 8014f50:	465b      	mov	r3, fp
 8014f52:	4622      	mov	r2, r4
 8014f54:	4629      	mov	r1, r5
 8014f56:	4630      	mov	r0, r6
 8014f58:	f7ff ff93 	bl	8014e82 <__sfputs_r>
 8014f5c:	3001      	adds	r0, #1
 8014f5e:	f000 80aa 	beq.w	80150b6 <_vfiprintf_r+0x20e>
 8014f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f64:	445a      	add	r2, fp
 8014f66:	9209      	str	r2, [sp, #36]	; 0x24
 8014f68:	f89a 3000 	ldrb.w	r3, [sl]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f000 80a2 	beq.w	80150b6 <_vfiprintf_r+0x20e>
 8014f72:	2300      	movs	r3, #0
 8014f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f7c:	f10a 0a01 	add.w	sl, sl, #1
 8014f80:	9304      	str	r3, [sp, #16]
 8014f82:	9307      	str	r3, [sp, #28]
 8014f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f88:	931a      	str	r3, [sp, #104]	; 0x68
 8014f8a:	4654      	mov	r4, sl
 8014f8c:	2205      	movs	r2, #5
 8014f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f92:	4858      	ldr	r0, [pc, #352]	; (80150f4 <_vfiprintf_r+0x24c>)
 8014f94:	f7eb f9ac 	bl	80002f0 <memchr>
 8014f98:	9a04      	ldr	r2, [sp, #16]
 8014f9a:	b9d8      	cbnz	r0, 8014fd4 <_vfiprintf_r+0x12c>
 8014f9c:	06d1      	lsls	r1, r2, #27
 8014f9e:	bf44      	itt	mi
 8014fa0:	2320      	movmi	r3, #32
 8014fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fa6:	0713      	lsls	r3, r2, #28
 8014fa8:	bf44      	itt	mi
 8014faa:	232b      	movmi	r3, #43	; 0x2b
 8014fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8014fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8014fb6:	d015      	beq.n	8014fe4 <_vfiprintf_r+0x13c>
 8014fb8:	9a07      	ldr	r2, [sp, #28]
 8014fba:	4654      	mov	r4, sl
 8014fbc:	2000      	movs	r0, #0
 8014fbe:	f04f 0c0a 	mov.w	ip, #10
 8014fc2:	4621      	mov	r1, r4
 8014fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fc8:	3b30      	subs	r3, #48	; 0x30
 8014fca:	2b09      	cmp	r3, #9
 8014fcc:	d94e      	bls.n	801506c <_vfiprintf_r+0x1c4>
 8014fce:	b1b0      	cbz	r0, 8014ffe <_vfiprintf_r+0x156>
 8014fd0:	9207      	str	r2, [sp, #28]
 8014fd2:	e014      	b.n	8014ffe <_vfiprintf_r+0x156>
 8014fd4:	eba0 0308 	sub.w	r3, r0, r8
 8014fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8014fdc:	4313      	orrs	r3, r2
 8014fde:	9304      	str	r3, [sp, #16]
 8014fe0:	46a2      	mov	sl, r4
 8014fe2:	e7d2      	b.n	8014f8a <_vfiprintf_r+0xe2>
 8014fe4:	9b03      	ldr	r3, [sp, #12]
 8014fe6:	1d19      	adds	r1, r3, #4
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	9103      	str	r1, [sp, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	bfbb      	ittet	lt
 8014ff0:	425b      	neglt	r3, r3
 8014ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ff6:	9307      	strge	r3, [sp, #28]
 8014ff8:	9307      	strlt	r3, [sp, #28]
 8014ffa:	bfb8      	it	lt
 8014ffc:	9204      	strlt	r2, [sp, #16]
 8014ffe:	7823      	ldrb	r3, [r4, #0]
 8015000:	2b2e      	cmp	r3, #46	; 0x2e
 8015002:	d10c      	bne.n	801501e <_vfiprintf_r+0x176>
 8015004:	7863      	ldrb	r3, [r4, #1]
 8015006:	2b2a      	cmp	r3, #42	; 0x2a
 8015008:	d135      	bne.n	8015076 <_vfiprintf_r+0x1ce>
 801500a:	9b03      	ldr	r3, [sp, #12]
 801500c:	1d1a      	adds	r2, r3, #4
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	9203      	str	r2, [sp, #12]
 8015012:	2b00      	cmp	r3, #0
 8015014:	bfb8      	it	lt
 8015016:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801501a:	3402      	adds	r4, #2
 801501c:	9305      	str	r3, [sp, #20]
 801501e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015104 <_vfiprintf_r+0x25c>
 8015022:	7821      	ldrb	r1, [r4, #0]
 8015024:	2203      	movs	r2, #3
 8015026:	4650      	mov	r0, sl
 8015028:	f7eb f962 	bl	80002f0 <memchr>
 801502c:	b140      	cbz	r0, 8015040 <_vfiprintf_r+0x198>
 801502e:	2340      	movs	r3, #64	; 0x40
 8015030:	eba0 000a 	sub.w	r0, r0, sl
 8015034:	fa03 f000 	lsl.w	r0, r3, r0
 8015038:	9b04      	ldr	r3, [sp, #16]
 801503a:	4303      	orrs	r3, r0
 801503c:	3401      	adds	r4, #1
 801503e:	9304      	str	r3, [sp, #16]
 8015040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015044:	482c      	ldr	r0, [pc, #176]	; (80150f8 <_vfiprintf_r+0x250>)
 8015046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801504a:	2206      	movs	r2, #6
 801504c:	f7eb f950 	bl	80002f0 <memchr>
 8015050:	2800      	cmp	r0, #0
 8015052:	d03f      	beq.n	80150d4 <_vfiprintf_r+0x22c>
 8015054:	4b29      	ldr	r3, [pc, #164]	; (80150fc <_vfiprintf_r+0x254>)
 8015056:	bb1b      	cbnz	r3, 80150a0 <_vfiprintf_r+0x1f8>
 8015058:	9b03      	ldr	r3, [sp, #12]
 801505a:	3307      	adds	r3, #7
 801505c:	f023 0307 	bic.w	r3, r3, #7
 8015060:	3308      	adds	r3, #8
 8015062:	9303      	str	r3, [sp, #12]
 8015064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015066:	443b      	add	r3, r7
 8015068:	9309      	str	r3, [sp, #36]	; 0x24
 801506a:	e767      	b.n	8014f3c <_vfiprintf_r+0x94>
 801506c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015070:	460c      	mov	r4, r1
 8015072:	2001      	movs	r0, #1
 8015074:	e7a5      	b.n	8014fc2 <_vfiprintf_r+0x11a>
 8015076:	2300      	movs	r3, #0
 8015078:	3401      	adds	r4, #1
 801507a:	9305      	str	r3, [sp, #20]
 801507c:	4619      	mov	r1, r3
 801507e:	f04f 0c0a 	mov.w	ip, #10
 8015082:	4620      	mov	r0, r4
 8015084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015088:	3a30      	subs	r2, #48	; 0x30
 801508a:	2a09      	cmp	r2, #9
 801508c:	d903      	bls.n	8015096 <_vfiprintf_r+0x1ee>
 801508e:	2b00      	cmp	r3, #0
 8015090:	d0c5      	beq.n	801501e <_vfiprintf_r+0x176>
 8015092:	9105      	str	r1, [sp, #20]
 8015094:	e7c3      	b.n	801501e <_vfiprintf_r+0x176>
 8015096:	fb0c 2101 	mla	r1, ip, r1, r2
 801509a:	4604      	mov	r4, r0
 801509c:	2301      	movs	r3, #1
 801509e:	e7f0      	b.n	8015082 <_vfiprintf_r+0x1da>
 80150a0:	ab03      	add	r3, sp, #12
 80150a2:	9300      	str	r3, [sp, #0]
 80150a4:	462a      	mov	r2, r5
 80150a6:	4b16      	ldr	r3, [pc, #88]	; (8015100 <_vfiprintf_r+0x258>)
 80150a8:	a904      	add	r1, sp, #16
 80150aa:	4630      	mov	r0, r6
 80150ac:	f7fd fc44 	bl	8012938 <_printf_float>
 80150b0:	4607      	mov	r7, r0
 80150b2:	1c78      	adds	r0, r7, #1
 80150b4:	d1d6      	bne.n	8015064 <_vfiprintf_r+0x1bc>
 80150b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150b8:	07d9      	lsls	r1, r3, #31
 80150ba:	d405      	bmi.n	80150c8 <_vfiprintf_r+0x220>
 80150bc:	89ab      	ldrh	r3, [r5, #12]
 80150be:	059a      	lsls	r2, r3, #22
 80150c0:	d402      	bmi.n	80150c8 <_vfiprintf_r+0x220>
 80150c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150c4:	f7ff f8d8 	bl	8014278 <__retarget_lock_release_recursive>
 80150c8:	89ab      	ldrh	r3, [r5, #12]
 80150ca:	065b      	lsls	r3, r3, #25
 80150cc:	f53f af12 	bmi.w	8014ef4 <_vfiprintf_r+0x4c>
 80150d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150d2:	e711      	b.n	8014ef8 <_vfiprintf_r+0x50>
 80150d4:	ab03      	add	r3, sp, #12
 80150d6:	9300      	str	r3, [sp, #0]
 80150d8:	462a      	mov	r2, r5
 80150da:	4b09      	ldr	r3, [pc, #36]	; (8015100 <_vfiprintf_r+0x258>)
 80150dc:	a904      	add	r1, sp, #16
 80150de:	4630      	mov	r0, r6
 80150e0:	f7fd feb6 	bl	8012e50 <_printf_i>
 80150e4:	e7e4      	b.n	80150b0 <_vfiprintf_r+0x208>
 80150e6:	bf00      	nop
 80150e8:	08016e40 	.word	0x08016e40
 80150ec:	08016e60 	.word	0x08016e60
 80150f0:	08016e20 	.word	0x08016e20
 80150f4:	08017022 	.word	0x08017022
 80150f8:	0801702c 	.word	0x0801702c
 80150fc:	08012939 	.word	0x08012939
 8015100:	08014e83 	.word	0x08014e83
 8015104:	08017028 	.word	0x08017028

08015108 <_read_r>:
 8015108:	b538      	push	{r3, r4, r5, lr}
 801510a:	4d07      	ldr	r5, [pc, #28]	; (8015128 <_read_r+0x20>)
 801510c:	4604      	mov	r4, r0
 801510e:	4608      	mov	r0, r1
 8015110:	4611      	mov	r1, r2
 8015112:	2200      	movs	r2, #0
 8015114:	602a      	str	r2, [r5, #0]
 8015116:	461a      	mov	r2, r3
 8015118:	f7f0 fa3e 	bl	8005598 <_read>
 801511c:	1c43      	adds	r3, r0, #1
 801511e:	d102      	bne.n	8015126 <_read_r+0x1e>
 8015120:	682b      	ldr	r3, [r5, #0]
 8015122:	b103      	cbz	r3, 8015126 <_read_r+0x1e>
 8015124:	6023      	str	r3, [r4, #0]
 8015126:	bd38      	pop	{r3, r4, r5, pc}
 8015128:	2400175c 	.word	0x2400175c

0801512c <__ascii_wctomb>:
 801512c:	b149      	cbz	r1, 8015142 <__ascii_wctomb+0x16>
 801512e:	2aff      	cmp	r2, #255	; 0xff
 8015130:	bf85      	ittet	hi
 8015132:	238a      	movhi	r3, #138	; 0x8a
 8015134:	6003      	strhi	r3, [r0, #0]
 8015136:	700a      	strbls	r2, [r1, #0]
 8015138:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801513c:	bf98      	it	ls
 801513e:	2001      	movls	r0, #1
 8015140:	4770      	bx	lr
 8015142:	4608      	mov	r0, r1
 8015144:	4770      	bx	lr

08015146 <abort>:
 8015146:	b508      	push	{r3, lr}
 8015148:	2006      	movs	r0, #6
 801514a:	f000 f82b 	bl	80151a4 <raise>
 801514e:	2001      	movs	r0, #1
 8015150:	f7f0 fa18 	bl	8005584 <_exit>

08015154 <_raise_r>:
 8015154:	291f      	cmp	r1, #31
 8015156:	b538      	push	{r3, r4, r5, lr}
 8015158:	4604      	mov	r4, r0
 801515a:	460d      	mov	r5, r1
 801515c:	d904      	bls.n	8015168 <_raise_r+0x14>
 801515e:	2316      	movs	r3, #22
 8015160:	6003      	str	r3, [r0, #0]
 8015162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015166:	bd38      	pop	{r3, r4, r5, pc}
 8015168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801516a:	b112      	cbz	r2, 8015172 <_raise_r+0x1e>
 801516c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015170:	b94b      	cbnz	r3, 8015186 <_raise_r+0x32>
 8015172:	4620      	mov	r0, r4
 8015174:	f000 f830 	bl	80151d8 <_getpid_r>
 8015178:	462a      	mov	r2, r5
 801517a:	4601      	mov	r1, r0
 801517c:	4620      	mov	r0, r4
 801517e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015182:	f000 b817 	b.w	80151b4 <_kill_r>
 8015186:	2b01      	cmp	r3, #1
 8015188:	d00a      	beq.n	80151a0 <_raise_r+0x4c>
 801518a:	1c59      	adds	r1, r3, #1
 801518c:	d103      	bne.n	8015196 <_raise_r+0x42>
 801518e:	2316      	movs	r3, #22
 8015190:	6003      	str	r3, [r0, #0]
 8015192:	2001      	movs	r0, #1
 8015194:	e7e7      	b.n	8015166 <_raise_r+0x12>
 8015196:	2400      	movs	r4, #0
 8015198:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801519c:	4628      	mov	r0, r5
 801519e:	4798      	blx	r3
 80151a0:	2000      	movs	r0, #0
 80151a2:	e7e0      	b.n	8015166 <_raise_r+0x12>

080151a4 <raise>:
 80151a4:	4b02      	ldr	r3, [pc, #8]	; (80151b0 <raise+0xc>)
 80151a6:	4601      	mov	r1, r0
 80151a8:	6818      	ldr	r0, [r3, #0]
 80151aa:	f7ff bfd3 	b.w	8015154 <_raise_r>
 80151ae:	bf00      	nop
 80151b0:	24000240 	.word	0x24000240

080151b4 <_kill_r>:
 80151b4:	b538      	push	{r3, r4, r5, lr}
 80151b6:	4d07      	ldr	r5, [pc, #28]	; (80151d4 <_kill_r+0x20>)
 80151b8:	2300      	movs	r3, #0
 80151ba:	4604      	mov	r4, r0
 80151bc:	4608      	mov	r0, r1
 80151be:	4611      	mov	r1, r2
 80151c0:	602b      	str	r3, [r5, #0]
 80151c2:	f7f0 f9cf 	bl	8005564 <_kill>
 80151c6:	1c43      	adds	r3, r0, #1
 80151c8:	d102      	bne.n	80151d0 <_kill_r+0x1c>
 80151ca:	682b      	ldr	r3, [r5, #0]
 80151cc:	b103      	cbz	r3, 80151d0 <_kill_r+0x1c>
 80151ce:	6023      	str	r3, [r4, #0]
 80151d0:	bd38      	pop	{r3, r4, r5, pc}
 80151d2:	bf00      	nop
 80151d4:	2400175c 	.word	0x2400175c

080151d8 <_getpid_r>:
 80151d8:	f7f0 b9bc 	b.w	8005554 <_getpid>

080151dc <_init>:
 80151dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151de:	bf00      	nop
 80151e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151e2:	bc08      	pop	{r3}
 80151e4:	469e      	mov	lr, r3
 80151e6:	4770      	bx	lr

080151e8 <_fini>:
 80151e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ea:	bf00      	nop
 80151ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151ee:	bc08      	pop	{r3}
 80151f0:	469e      	mov	lr, r3
 80151f2:	4770      	bx	lr
