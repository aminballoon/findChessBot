
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08014d10  08014d10  00024d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016c1c  08016c1c  00026c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016c24  08016c24  00026c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08016c2c  08016c2c  00026c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000414  24000000  08016c34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001340  24000414  08017048  00030414  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001754  08017048  00031754  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030414  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c47e  00000000  00000000  00030442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049d0  00000000  00000000  0005c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00061290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  00062a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ecd  00000000  00000000  000a25e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dd7c  00000000  00000000  000c74af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023522b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000075b4  00000000  00000000  0023527c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000414 	.word	0x24000414
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014cf8 	.word	0x08014cf8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000418 	.word	0x24000418
 80002dc:	08014cf8 	.word	0x08014cf8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e fa10 	bl	800eb0c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fa9d 	bl	800ec38 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00c ff37 	bl	800d7ec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00c ff2f 	bl	800d7ec <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 360.0f;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009ec <_ZN10AS5047UABI11getDegAngleEv+0x38>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	44ffe000 	.word	0x44ffe000
 80009f0:	43b40000 	.word	0x43b40000

080009f4 <_ZN10AS5047UABI12getMRadAngleEv>:
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2047.0f) * 6280.0f;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a30 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	44ffe000 	.word	0x44ffe000
 8000a30:	45c44000 	.word	0x45c44000

08000a34 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a3e:	edc7 0a00 	vstr	s1, [r7]
 8000a42:	edd7 0a00 	vldr	s1, [r7]
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f010 fcf9 	bl	8011440 <atan2f>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a6a:	f010 fceb 	bl	8011444 <sqrtf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	2002      	movs	r0, #2
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f000 fda0 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	2003      	movs	r0, #3
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f000 fd91 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	2004      	movs	r0, #4
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	f000 fd82 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <_ZN10RobotJointC1Ev+0xd8>)
 8000b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	3a83126f 	.word	0x3a83126f
 8000b54:	3dcccccd 	.word	0x3dcccccd

08000b58 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
					/ (L3S3 * this->L12)) * 1000.0;
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
}
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000b6e:	b480      	push	{r7}
 8000b70:	b091      	sub	sp, #68	; 0x44
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	61f8      	str	r0, [r7, #28]
 8000b76:	ed87 0a06 	vstr	s0, [r7, #24]
 8000b7a:	edc7 0a05 	vstr	s1, [r7, #20]
 8000b7e:	ed87 1a04 	vstr	s2, [r7, #16]
 8000b82:	edc7 1a03 	vstr	s3, [r7, #12]
 8000b86:	ed87 2a02 	vstr	s4, [r7, #8]
 8000b8a:	edc7 2a01 	vstr	s5, [r7, #4]
 8000b8e:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ba6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000bb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000bc8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bdc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000be0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c04:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000c08:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c10:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000c14:	ed97 7a00 	vldr	s14, [r7]
 8000c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c20:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c38:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c48:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c54:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000c60:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c68:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000c84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000c90:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000c94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c9c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ca0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ca8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000cac:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000cb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cb4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cb8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000cbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000cc4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000cd4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000cd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000ce6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cee:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000cf2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000cf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cfe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000d0e:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d16:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d1a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d22:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000d26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d2a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d48:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000d4c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d58:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000d68:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d70:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d74:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d80:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000d90:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000daa:	bf00      	nop
 8000dac:	3744      	adds	r7, #68	; 0x44
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000db6:	b580      	push	{r7, lr}
 8000db8:	ed2d 8b08 	vpush	{d8-d11}
 8000dbc:	b08a      	sub	sp, #40	; 0x28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dd4:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ddc:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000de4:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000dec:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000df4:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000dfc:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e04:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000e20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e24:	edd7 7a00 	vldr	s15, [r7]
 8000e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	edd3 6a00 	vldr	s13, [r3]
 8000e32:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e58:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e60:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e70:	f000 fbb3 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e74:	eeb0 7b40 	vmov.f64	d7, d0
 8000e78:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000e7c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e84:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edd3 5a00 	vldr	s11, [r3]
 8000e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eac:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000eb0:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000eb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8000eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	edd3 6a00 	vldr	s13, [r3]
 8000ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eda:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	f000 fb76 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000eee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ef2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000ef6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efe:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	ed93 7a00 	vldr	s14, [r3]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	edd3 5a00 	vldr	s11, [r3]
 8000f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f12:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f1a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f2a:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000f2e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000f3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f40:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f48:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	2003      	movs	r0, #3
 8000f54:	eeb0 0a67 	vmov.f32	s0, s15
 8000f58:	f000 fb3f 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f5c:	eeb0 7b40 	vmov.f64	d7, d0
 8000f60:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000f64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f68:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7a00 	vldr	s14, [r3]
 8000f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8a:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000f8e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f92:	edd7 7a00 	vldr	s15, [r7]
 8000f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edd3 5a00 	vldr	s11, [r3]
 8000fa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fa4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb0:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 6a00 	vldr	s13, [r3]
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fda:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	f000 faf6 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ff2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000ff6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ffa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ffe:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 5a00 	vldr	s11, [r3]
 800100e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001012:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001016:	edd7 7a06 	vldr	s15, [r7, #24]
 800101a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001026:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800102a:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800102e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001032:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a00 	vldr	s14, [r3]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	edd7 7a07 	vldr	s15, [r7, #28]
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001052:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001056:	edd7 7a03 	vldr	s15, [r7, #12]
 800105a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	2004      	movs	r0, #4
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f000 fab6 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800106e:	eeb0 7b40 	vmov.f64	d7, d0
 8001072:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001076:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800107a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107e:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 5a00 	vldr	s11, [r3]
 800108e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001092:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001096:	edd7 7a06 	vldr	s15, [r7, #24]
 800109a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010a6:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edd3 6a00 	vldr	s13, [r3]
 80010bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	2004      	movs	r0, #4
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	f000 fa7b 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010e4:	eeb0 7b40 	vmov.f64	d7, d0
 80010e8:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80010ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f4:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 5a00 	vldr	s11, [r3]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800110c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001110:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001118:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111c:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001120:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001124:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001128:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800112c:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	edd7 7a05 	vldr	s15, [r7, #20]
 800113a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001146:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800114a:	edd7 7a03 	vldr	s15, [r7, #12]
 800114e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	2004      	movs	r0, #4
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	f000 fa3c 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001162:	eeb0 7b40 	vmov.f64	d7, d0
 8001166:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800116a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800116e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001172:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edd3 5a00 	vldr	s11, [r3]
 8001182:	edd7 7a04 	vldr	s15, [r7, #16]
 8001186:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800118a:	edd7 7a06 	vldr	s15, [r7, #24]
 800118e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800119a:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800119e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80011be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80011c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ca:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	2004      	movs	r0, #4
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f000 f9fe 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011de:	eeb0 7b40 	vmov.f64	d7, d0
 80011e2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011e6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ee:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edd3 5a00 	vldr	s11, [r3]
 80011fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001202:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001206:	edd7 7a06 	vldr	s15, [r7, #24]
 800120a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001216:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800121a:	ed97 7a07 	vldr	s14, [r7, #28]
 800121e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 6a00 	vldr	s13, [r3]
 800122c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001238:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800123c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001240:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	2004      	movs	r0, #4
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	f000 f9c3 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001254:	eeb0 7b40 	vmov.f64	d7, d0
 8001258:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800125c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001260:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001264:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 5a00 	vldr	s11, [r3]
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800128c:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001290:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001294:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001298:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800129c:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	2003      	movs	r0, #3
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	f000 f991 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012b8:	eeb0 7b40 	vmov.f64	d7, d0
 80012bc:	ee29 7b07 	vmul.f64	d7, d9, d7
 80012c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80012c4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012de:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012ea:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001306:	edd7 7a05 	vldr	s15, [r7, #20]
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001312:	edd7 7a03 	vldr	s15, [r7, #12]
 8001316:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	2003      	movs	r0, #3
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f000 f958 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800132a:	eeb0 7b40 	vmov.f64	d7, d0
 800132e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001332:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001336:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800133a:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800133e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001342:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	2003      	movs	r0, #3
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f000 f942 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001356:	eeb0 7b40 	vmov.f64	d7, d0
 800135a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800135e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001362:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001378:	ee36 6b07 	vadd.f64	d6, d6, d7
 800137c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001380:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001384:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	edd7 7a07 	vldr	s15, [r7, #28]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	2004      	movs	r0, #4
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	f000 f910 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013ba:	eeb0 7b40 	vmov.f64	d7, d0
 80013be:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80013c2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ca:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 5a00 	vldr	s11, [r3]
 80013da:	edd7 7a04 	vldr	s15, [r7, #16]
 80013de:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f2:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013f6:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 6a00 	vldr	s13, [r3]
 800140c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	2004      	movs	r0, #4
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 f8d3 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001434:	eeb0 7b40 	vmov.f64	d7, d0
 8001438:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800143c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001444:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 5a00 	vldr	s11, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800146c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001470:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001474:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001478:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001482:	edd7 7a04 	vldr	s15, [r7, #16]
 8001486:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800148a:	edd7 7a03 	vldr	s15, [r7, #12]
 800148e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	2002      	movs	r0, #2
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	f000 f89c 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014a2:	eeb0 7b40 	vmov.f64	d7, d0
 80014a6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014aa:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80014ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	2003      	movs	r0, #3
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f000 f88a 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f4:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 80014f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	2003      	movs	r0, #3
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	f000 f865 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001510:	eeb0 7b40 	vmov.f64	d7, d0
 8001514:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001518:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800151c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	edd7 7a04 	vldr	s15, [r7, #16]
 800152a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001532:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001536:	edd7 7a05 	vldr	s15, [r7, #20]
 800153a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001542:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001546:	ed97 7a07 	vldr	s14, [r7, #28]
 800154a:	edd7 7a02 	vldr	s15, [r7, #8]
 800154e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 6a00 	vldr	s13, [r3]
 8001558:	edd7 7a05 	vldr	s15, [r7, #20]
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001568:	edd7 7a03 	vldr	s15, [r7, #12]
 800156c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	2004      	movs	r0, #4
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f000 f82d 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	eeb0 7b40 	vmov.f64	d7, d0
 8001584:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001588:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edd3 5a00 	vldr	s11, [r3]
 80015a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ac:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b8:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015bc:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015c0:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	ecbd 8b08 	vpop	{d8-d11}
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80015e4:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	ee06 3a90 	vmov	s13, r3
 80015f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80015f8:	eeb0 1b46 	vmov.f64	d1, d6
 80015fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001600:	f00f fc32 	bl	8010e68 <pow>
 8001604:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001608:	eeb0 0b47 	vmov.f64	d0, d7
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	ed87 0a01 	vstr	s0, [r7, #4]
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	fefb 7a67 	vrintm.f32	s15, s15
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	ed87 0a01 	vstr	s0, [r7, #4]
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	fef8 7a67 	vrinta.f32	s15, s15
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	22b4      	movs	r2, #180	; 0xb4
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	761a      	strb	r2, [r3, #24]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22ef      	movs	r2, #239	; 0xef
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
}
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f00b fed2 	bl	800d484 <HAL_TIM_PWM_Start>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d13f      	bne.n	800177a <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691c      	ldr	r4, [r3, #16]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	3301      	adds	r3, #1
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001714:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	f7ff ff87 	bl	8001632 <_ZSt5roundf>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	3301      	adds	r3, #1
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001742:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	f7ff ff60 	bl	8001612 <_ZSt5floorf>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9600      	str	r6, [sp, #0]
 8001762:	462b      	mov	r3, r5
 8001764:	4622      	mov	r2, r4
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f9cf 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8001778:	e176      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d13f      	bne.n	8001802 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691c      	ldr	r4, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	3301      	adds	r3, #1
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	f7ff ff43 	bl	8001632 <_ZSt5roundf>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	3301      	adds	r3, #1
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80017ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	f7ff ff1c 	bl	8001612 <_ZSt5floorf>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	ee17 3a90 	vmov	r3, s15
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	9600      	str	r6, [sp, #0]
 80017ea:	462b      	mov	r3, r5
 80017ec:	4622      	mov	r2, r4
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f98b 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 80017f6:	4602      	mov	r2, r0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001800:	e132      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d13f      	bne.n	800188a <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691c      	ldr	r4, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	3301      	adds	r3, #1
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001824:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f7ff feff 	bl	8001632 <_ZSt5roundf>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	3301      	adds	r3, #1
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	f7ff fed8 	bl	8001612 <_ZSt5floorf>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186a:	ee17 3a90 	vmov	r3, s15
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	9600      	str	r6, [sp, #0]
 8001872:	462b      	mov	r3, r5
 8001874:	4622      	mov	r2, r4
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f947 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001888:	e0ee      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d13f      	bne.n	8001912 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691c      	ldr	r4, [r3, #16]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	3301      	adds	r3, #1
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	f7ff febb 	bl	8001632 <_ZSt5roundf>
 80018bc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	3301      	adds	r3, #1
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018da:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f7ff fe94 	bl	8001612 <_ZSt5floorf>
 80018ea:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	9600      	str	r6, [sp, #0]
 80018fa:	462b      	mov	r3, r5
 80018fc:	4622      	mov	r2, r4
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f903 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 8001906:	4602      	mov	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001910:	e0aa      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d144      	bne.n	80019a4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691c      	ldr	r4, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	3301      	adds	r3, #1
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001934:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	f7ff fe77 	bl	8001632 <_ZSt5roundf>
 8001944:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	3301      	adds	r3, #1
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001962:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	f7ff fe50 	bl	8001612 <_ZSt5floorf>
 8001972:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197a:	ee17 3a90 	vmov	r3, s15
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9600      	str	r6, [sp, #0]
 8001982:	462b      	mov	r3, r5
 8001984:	4622      	mov	r2, r4
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8bf 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 800198e:	4602      	mov	r2, r0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001998:	e066      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 800199a:	bf00      	nop
 800199c:	3d4ccccd 	.word	0x3d4ccccd
 80019a0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b14      	cmp	r3, #20
 80019aa:	d13f      	bne.n	8001a2c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691c      	ldr	r4, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	3301      	adds	r3, #1
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	f7ff fe2e 	bl	8001632 <_ZSt5roundf>
 80019d6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f7ff fe07 	bl	8001612 <_ZSt5floorf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 3a90 	vmov	r3, s15
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	9600      	str	r6, [sp, #0]
 8001a14:	462b      	mov	r3, r5
 8001a16:	4622      	mov	r2, r4
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f876 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a2a:	e01d      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a70 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	761a      	strb	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	765a      	strb	r2, [r3, #25]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7e5b      	ldrb	r3, [r3, #25]
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fe09 	bl	80016e8 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001ad6:	e000      	b.n	8001ada <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001ad8:	bf00      	nop
}
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fdf3 	bl	80016e8 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001b02:	e000      	b.n	8001b06 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001b04:	bf00      	nop
}
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	69f9      	ldr	r1, [r7, #28]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	1a8a      	subs	r2, r1, r2
 8001b26:	fb03 f202 	mul.w	r2, r3, r2
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1acb      	subs	r3, r1, r3
 8001b30:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4413      	add	r3, r2
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	eef0 7ae7 	vabs.f32	s15, s15
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b84:	61da      	str	r2, [r3, #28]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001b8a:	621a      	str	r2, [r3, #32]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	22c7      	movs	r2, #199	; 0xc7
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bb0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001bb6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001bb8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001be4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f82f 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	60da      	str	r2, [r3, #12]
}
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	41a00000 	.word	0x41a00000
 8001bdc:	469c4000 	.word	0x469c4000
 8001be0:	43480000 	.word	0x43480000
 8001be4:	00000000 	.word	0x00000000

08001be8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
}
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f00b fc37 	bl	800d484 <HAL_TIM_PWM_Start>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	ed2d 8b02 	vpush	{d8}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f7ff ff80 	bl	8001b44 <_ZSt4fabsf>
 8001c44:	eeb0 7a40 	vmov.f32	s14, s0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e01b      	b.n	8001ca2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	f7ff ff66 	bl	8001b44 <_ZSt4fabsf>
 8001c78:	eeb0 7a40 	vmov.f32	s14, s0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	bfac      	ite	ge
 8001c8c:	2301      	movge	r3, #1
 8001c8e:	2300      	movlt	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e001      	b.n	8001ca2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ca8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001f44 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	f2c0 80db 	blt.w	8001e6e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6898      	ldr	r0, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f008 fb0b 	bl	800a2e0 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001f48 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	f7ff fc9b 	bl	8001632 <_ZSt5roundf>
 8001cfc:	eef0 7a40 	vmov.f32	s15, s0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0a:	ee17 2a90 	vmov	r2, s15
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d113      	bne.n	8001d40 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fa5b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d38:	ee17 2a90 	vmov	r2, s15
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001d3e:	e1e0      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d113      	bne.n	8001d70 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fa43 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d68:	ee17 2a90 	vmov	r2, s15
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d6e:	e1c8      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d113      	bne.n	8001da0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fa2b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d98:	ee17 2a90 	vmov	r2, s15
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d9e:	e1b0      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d113      	bne.n	8001dd0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fa13 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dba:	eeb0 7b40 	vmov.f64	d7, d0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dce:	e198      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d113      	bne.n	8001e00 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f9fb 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dea:	eeb0 7b40 	vmov.f64	d7, d0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001df8:	ee17 2a90 	vmov	r2, s15
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001dfe:	e180      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b14      	cmp	r3, #20
 8001e06:	d113      	bne.n	8001e30 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f9e3 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e28:	ee17 2a90 	vmov	r2, s15
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e2e:	e168      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e6c:	e149      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e74:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001f4c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	f200 80e5 	bhi.w	800204e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6898      	ldr	r0, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f008 fa25 	bl	800a2e0 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001ea8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001eac:	f7ff fe4a 	bl	8001b44 <_ZSt4fabsf>
 8001eb0:	eef0 7a40 	vmov.f32	s15, s0
 8001eb4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001eb8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001f48 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7ff fbb1 	bl	8001632 <_ZSt5roundf>
 8001ed0:	eef0 7a40 	vmov.f32	s15, s0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ede:	ee17 2a90 	vmov	r2, s15
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d113      	bne.n	8001f14 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f971 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001efe:	eeb0 7b40 	vmov.f64	d7, d0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f0c:	ee17 2a90 	vmov	r2, s15
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f12:	e0f6      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d119      	bne.n	8001f50 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f959 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f3c:	ee17 2a90 	vmov	r2, s15
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f42:	e0de      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8001f44:	3a83126f 	.word	0x3a83126f
 8001f48:	4d64e1c0 	.word	0x4d64e1c0
 8001f4c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d113      	bne.n	8001f80 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f93b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f78:	ee17 2a90 	vmov	r2, s15
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f7e:	e0c0      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d113      	bne.n	8001fb0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f923 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fa8:	ee17 2a90 	vmov	r2, s15
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fae:	e0a8      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d113      	bne.n	8001fe0 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f90b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fca:	eeb0 7b40 	vmov.f64	d7, d0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd8:	ee17 2a90 	vmov	r2, s15
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fde:	e090      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b14      	cmp	r3, #20
 8001fe6:	d113      	bne.n	8002010 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f8f3 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002008:	ee17 2a90 	vmov	r2, s15
 800200c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800200e:	e078      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800204c:	e059      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002060:	e04f      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d105      	bne.n	8002076 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002074:	e045      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d105      	bne.n	800208a <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002088:	e03b      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d105      	bne.n	800209e <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800209c:	e031      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d105      	bne.n	80020b2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020b0:	e027      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b14      	cmp	r3, #20
 80020b8:	d105      	bne.n	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020c4:	e01d      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	ecbd 8b02 	vpop	{d8}
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop

08002110 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800211c:	ed97 0a00 	vldr	s0, [r7]
 8002120:	f7ff fd10 	bl	8001b44 <_ZSt4fabsf>
 8002124:	eef0 7a40 	vmov.f32	s15, s0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800214a:	eeb0 0b47 	vmov.f64	d0, d7
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffe5 	bl	8002136 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800216c:	eeb0 7b40 	vmov.f64	d7, d0
 8002170:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	0000      	movs	r0, r0
 8002184:	0000      	movs	r0, r0
	...

08002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	ed93 7a07 	vldr	s14, [r3, #28]
 800219a:	edd7 7a00 	vldr	s15, [r7]
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80021a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80021ba:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80021d8 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80021be:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80021c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021c6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fd28 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	704a95d1 	.word	0x704a95d1
 80021dc:	40b88b2f 	.word	0x40b88b2f

080021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021f2:	eeb0 0b47 	vmov.f64	d0, d7
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_CRC_Init+0x54>)
 8002206:	4a14      	ldr	r2, [pc, #80]	; (8002258 <MX_CRC_Init+0x58>)
 8002208:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_CRC_Init+0x54>)
 800220c:	2201      	movs	r2, #1
 800220e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_CRC_Init+0x54>)
 8002212:	2201      	movs	r2, #1
 8002214:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_CRC_Init+0x54>)
 8002218:	f248 0205 	movw	r2, #32773	; 0x8005
 800221c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <MX_CRC_Init+0x54>)
 8002220:	2208      	movs	r2, #8
 8002222:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_CRC_Init+0x54>)
 8002226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_CRC_Init+0x54>)
 800222e:	2220      	movs	r2, #32
 8002230:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_CRC_Init+0x54>)
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_CRC_Init+0x54>)
 800223a:	2201      	movs	r2, #1
 800223c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_CRC_Init+0x54>)
 8002240:	f004 fe64 	bl	8006f0c <HAL_CRC_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800224a:	f002 fc0d 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	24000430 	.word	0x24000430
 8002258:	58024c00 	.word	0x58024c00

0800225c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_CRC_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10e      	bne.n	800228c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_CRC_MspInit+0x40>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_CRC_MspInit+0x40>)
 8002276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800227a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_CRC_MspInit+0x40>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58024c00 	.word	0x58024c00
 800229c:	58024400 	.word	0x58024400

080022a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <MX_DMA_Init+0xdc>)
 80022a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ac:	4a33      	ldr	r2, [pc, #204]	; (800237c <MX_DMA_Init+0xdc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <MX_DMA_Init+0xdc>)
 80022b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <MX_DMA_Init+0xdc>)
 80022c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <MX_DMA_Init+0xdc>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <MX_DMA_Init+0xdc>)
 80022d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	200b      	movs	r0, #11
 80022e8:	f004 fdcf 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022ec:	200b      	movs	r0, #11
 80022ee:	f004 fde6 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	200c      	movs	r0, #12
 80022f8:	f004 fdc7 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022fc:	200c      	movs	r0, #12
 80022fe:	f004 fdde 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	200d      	movs	r0, #13
 8002308:	f004 fdbf 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800230c:	200d      	movs	r0, #13
 800230e:	f004 fdd6 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	200e      	movs	r0, #14
 8002318:	f004 fdb7 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800231c:	200e      	movs	r0, #14
 800231e:	f004 fdce 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	200f      	movs	r0, #15
 8002328:	f004 fdaf 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800232c:	200f      	movs	r0, #15
 800232e:	f004 fdc6 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2010      	movs	r0, #16
 8002338:	f004 fda7 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800233c:	2010      	movs	r0, #16
 800233e:	f004 fdbe 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2011      	movs	r0, #17
 8002348:	f004 fd9f 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800234c:	2011      	movs	r0, #17
 800234e:	f004 fdb6 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	202f      	movs	r0, #47	; 0x2f
 8002358:	f004 fd97 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800235c:	202f      	movs	r0, #47	; 0x2f
 800235e:	f004 fdae 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2038      	movs	r0, #56	; 0x38
 8002368:	f004 fd8f 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800236c:	2038      	movs	r0, #56	; 0x38
 800236e:	f004 fda6 	bl	8006ebe <HAL_NVIC_EnableIRQ>

}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	58024400 	.word	0x58024400

08002380 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002396:	4b87      	ldr	r3, [pc, #540]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <MX_GPIO_Init+0x234>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b4:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a7e      	ldr	r2, [pc, #504]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a76      	ldr	r2, [pc, #472]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f6:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002414:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <MX_GPIO_Init+0x234>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	4a60      	ldr	r2, [pc, #384]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <MX_GPIO_Init+0x234>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244a:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <MX_GPIO_Init+0x234>)
 800244c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <MX_GPIO_Init+0x234>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002468:	2200      	movs	r2, #0
 800246a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800246e:	4852      	ldr	r0, [pc, #328]	; (80025b8 <MX_GPIO_Init+0x238>)
 8002470:	f007 ff36 	bl	800a2e0 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	f24c 0102 	movw	r1, #49154	; 0xc002
 800247a:	4850      	ldr	r0, [pc, #320]	; (80025bc <MX_GPIO_Init+0x23c>)
 800247c:	f007 ff30 	bl	800a2e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	484e      	ldr	r0, [pc, #312]	; (80025c0 <MX_GPIO_Init+0x240>)
 8002488:	f007 ff2a 	bl	800a2e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002492:	484c      	ldr	r0, [pc, #304]	; (80025c4 <MX_GPIO_Init+0x244>)
 8002494:	f007 ff24 	bl	800a2e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249e:	484a      	ldr	r0, [pc, #296]	; (80025c8 <MX_GPIO_Init+0x248>)
 80024a0:	f007 ff1e 	bl	800a2e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80024a4:	f644 2321 	movw	r3, #18977	; 0x4a21
 80024a8:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	483e      	ldr	r0, [pc, #248]	; (80025b8 <MX_GPIO_Init+0x238>)
 80024be:	f007 fd5f 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80024c2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80024c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4619      	mov	r1, r3
 80024d8:	4838      	ldr	r0, [pc, #224]	; (80025bc <MX_GPIO_Init+0x23c>)
 80024da:	f007 fd51 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80024de:	f24c 0302 	movw	r3, #49154	; 0xc002
 80024e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4831      	ldr	r0, [pc, #196]	; (80025bc <MX_GPIO_Init+0x23c>)
 80024f8:	f007 fd42 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80024fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	482a      	ldr	r0, [pc, #168]	; (80025c0 <MX_GPIO_Init+0x240>)
 8002516:	f007 fd33 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800251a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	4824      	ldr	r0, [pc, #144]	; (80025c4 <MX_GPIO_Init+0x244>)
 8002534:	f007 fd24 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	481d      	ldr	r0, [pc, #116]	; (80025c8 <MX_GPIO_Init+0x248>)
 8002552:	f007 fd15 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800255c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	4817      	ldr	r0, [pc, #92]	; (80025cc <MX_GPIO_Init+0x24c>)
 800256e:	f007 fd07 	bl	8009f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800257a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_GPIO_Init+0x238>)
 8002588:	f007 fcfa 	bl	8009f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2017      	movs	r0, #23
 8002592:	f004 fc7a 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002596:	2017      	movs	r0, #23
 8002598:	f004 fc91 	bl	8006ebe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2028      	movs	r0, #40	; 0x28
 80025a2:	f004 fc72 	bl	8006e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025a6:	2028      	movs	r0, #40	; 0x28
 80025a8:	f004 fc89 	bl	8006ebe <HAL_NVIC_EnableIRQ>

}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	58024400 	.word	0x58024400
 80025b8:	58020400 	.word	0x58020400
 80025bc:	58021000 	.word	0x58021000
 80025c0:	58020c00 	.word	0x58020c00
 80025c4:	58020800 	.word	0x58020800
 80025c8:	58020000 	.word	0x58020000
 80025cc:	58021800 	.word	0x58021800

080025d0 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <_Z12Insert_queueii+0x6c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b13      	cmp	r3, #19
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <_Z12Insert_queueii+0x20>
		return false;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e01e      	b.n	800262e <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_Z12Insert_queueii+0x70>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <_Z12Insert_queueii+0x3a>
			first = 0;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <_Z12Insert_queueii+0x70>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
		}
		bot++;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <_Z12Insert_queueii+0x6c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <_Z12Insert_queueii+0x6c>)
 8002612:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <_Z12Insert_queueii+0x6c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	490a      	ldr	r1, [pc, #40]	; (8002644 <_Z12Insert_queueii+0x74>)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <_Z12Insert_queueii+0x6c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <_Z12Insert_queueii+0x78>)
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800262c:	2301      	movs	r3, #1
	}
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	24000010 	.word	0x24000010
 8002640:	2400000c 	.word	0x2400000c
 8002644:	24000b3c 	.word	0x24000b3c
 8002648:	24000b8c 	.word	0x24000b8c

0800264c <_Z10Call_queuev>:

int Call_queue() {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <_Z10Call_queuev+0x8c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265a:	d005      	beq.n	8002668 <_Z10Call_queuev+0x1c>
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <_Z10Call_queuev+0x8c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <_Z10Call_queuev+0x90>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	dd01      	ble.n	800266c <_Z10Call_queuev+0x20>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <_Z10Call_queuev+0x22>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <_Z10Call_queuev+0x68>
		for (int num = 0; num <= bot + 1; num++) {
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <_Z10Call_queuev+0x90>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	bfd4      	ite	le
 8002682:	2301      	movle	r3, #1
 8002684:	2300      	movgt	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <_Z10Call_queuev+0x52>
			queue[num] = 0;
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <_Z10Call_queuev+0x94>)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	e7eb      	b.n	8002676 <_Z10Call_queuev+0x2a>
		}
		first = -1;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a4:	601a      	str	r2, [r3, #0]
		bot = -1;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <_Z10Call_queuev+0x90>)
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ac:	601a      	str	r2, [r3, #0]
		output = 255;
 80026ae:	23ff      	movs	r3, #255	; 0xff
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	e00a      	b.n	80026ca <_Z10Call_queuev+0x7e>
	} else {
		output = queue[first];
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <_Z10Call_queuev+0x94>)
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	607b      	str	r3, [r7, #4]
		first++;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026c8:	6013      	str	r3, [r2, #0]
	}
	return output;
 80026ca:	687b      	ldr	r3, [r7, #4]

}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	2400000c 	.word	0x2400000c
 80026dc:	24000010 	.word	0x24000010
 80026e0:	24000b3c 	.word	0x24000b3c

080026e4 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b092      	sub	sp, #72	; 0x48
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80026ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80026f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80026f6:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 80026fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80026fe:	eddf 6a78 	vldr	s13, [pc, #480]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 800270a:	ed97 7a02 	vldr	s14, [r7, #8]
 800270e:	eddf 6a74 	vldr	s13, [pc, #464]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002716:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 800271a:	ed97 7a01 	vldr	s14, [r7, #4]
 800271e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002726:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 800272a:	ed97 7a00 	vldr	s14, [r7]
 800272e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 800273a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800273e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002742:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002746:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800274a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 8002750:	edd3 6a00 	vldr	s13, [r3]
 8002754:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002772:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 8002792:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800279a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800279e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	f7fe f959 	bl	8000a5c <_ZSt4sqrtf>
 80027aa:	eef0 7a40 	vmov.f32	s15, s0
 80027ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b2:	eeb1 7b47 	vneg.f64	d7, d7
 80027b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 80027be:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80027c2:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80027c6:	f7fe f935 	bl	8000a34 <_ZSt5atan2ff>
 80027ca:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 80027e2:	ed93 7a00 	vldr	s14, [r3]
 80027e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 80027fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002800:	eeb1 7a67 	vneg.f32	s14, s15
 8002804:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002810:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002820:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002824:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002830:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002840:	edd7 0a07 	vldr	s1, [r7, #28]
 8002844:	ed97 0a08 	vldr	s0, [r7, #32]
 8002848:	f7fe f8f4 	bl	8000a34 <_ZSt5atan2ff>
 800284c:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002850:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002854:	edd7 7a06 	vldr	s15, [r7, #24]
 8002858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800285c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <_Z6fcb_IKffff+0x208>)
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <_Z6fcb_IKffff+0x20c>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <_Z6fcb_IKffff+0x210>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 800288e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002892:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <_Z6fcb_IKffff+0x214>)
 800289c:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 80028a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 80028a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_Z6fcb_IKffff+0x218>)
 80028ae:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 80028b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 80028ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_Z6fcb_IKffff+0x21c>)
 80028c0:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <_Z6fcb_IKffff+0x220>)
 80028d2:	edc3 7a00 	vstr	s15, [r3]

}
 80028d6:	bf00      	nop
 80028d8:	3748      	adds	r7, #72	; 0x48
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	447a0000 	.word	0x447a0000
 80028e4:	2400021c 	.word	0x2400021c
 80028e8:	24000218 	.word	0x24000218
 80028ec:	24000228 	.word	0x24000228
 80028f0:	24000224 	.word	0x24000224
 80028f4:	24000220 	.word	0x24000220
 80028f8:	24000bf0 	.word	0x24000bf0
 80028fc:	24000bf4 	.word	0x24000bf4
 8002900:	24000bf8 	.word	0x24000bf8
 8002904:	24000bfc 	.word	0x24000bfc

08002908 <_Z20Update_State_Machinev>:
float offset_y = -10.0; //10.79371
float offset_x_new = 0;
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
void Update_State_Machine() {
 8002908:	b580      	push	{r7, lr}
 800290a:	ed2d 8b02 	vpush	{d8}
 800290e:	af00      	add	r7, sp, #0

	switch (control_state) {
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <_Z20Update_State_Machinev+0xac>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3b29      	subs	r3, #41	; 0x29
 8002918:	2b0f      	cmp	r3, #15
 800291a:	f200 8416 	bhi.w	800314a <_Z20Update_State_Machinev+0x842>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <_Z20Update_State_Machinev+0x1c>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002965 	.word	0x08002965
 8002928:	08002c6b 	.word	0x08002c6b
 800292c:	08002dcf 	.word	0x08002dcf
 8002930:	0800314b 	.word	0x0800314b
 8002934:	0800314b 	.word	0x0800314b
 8002938:	0800314b 	.word	0x0800314b
 800293c:	0800314b 	.word	0x0800314b
 8002940:	0800314b 	.word	0x0800314b
 8002944:	0800314b 	.word	0x0800314b
 8002948:	0800314b 	.word	0x0800314b
 800294c:	08003159 	.word	0x08003159
 8002950:	08002e2b 	.word	0x08002e2b
 8002954:	08003159 	.word	0x08003159
 8002958:	08002f4f 	.word	0x08002f4f
 800295c:	08003159 	.word	0x08003159
 8002960:	0800309d 	.word	0x0800309d
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002964:	f7ff fe72 	bl	800264c <_Z10Call_queuev>
 8002968:	4603      	mov	r3, r0
 800296a:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <_Z20Update_State_Machinev+0xb0>)
 800296c:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <_Z20Update_State_Machinev+0xb0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	f000 8170 	beq.w	8002c58 <_Z20Update_State_Machinev+0x350>
		{
			if (indexy == 99)
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <_Z20Update_State_Machinev+0xb0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b63      	cmp	r3, #99	; 0x63
 800297e:	d10a      	bne.n	8002996 <_Z20Update_State_Machinev+0x8e>
				{
					Planning_q1 = 1400;
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <_Z20Update_State_Machinev+0xb4>)
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <_Z20Update_State_Machinev+0xb8>)
 8002984:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1400;
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <_Z20Update_State_Machinev+0xbc>)
 8002988:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <_Z20Update_State_Machinev+0xc0>)
 800298a:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <_Z20Update_State_Machinev+0xc4>)
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e101      	b.n	8002b9a <_Z20Update_State_Machinev+0x292>
				}
			else if (indexy == 123)
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <_Z20Update_State_Machinev+0xb0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b7b      	cmp	r3, #123	; 0x7b
 800299c:	d11c      	bne.n	80029d8 <_Z20Update_State_Machinev+0xd0>
			{
					Planning_q1 = 1100;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_Z20Update_State_Machinev+0xb4>)
 80029a0:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <_Z20Update_State_Machinev+0xc8>)
 80029a2:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_Z20Update_State_Machinev+0xbc>)
 80029a6:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <_Z20Update_State_Machinev+0xcc>)
 80029a8:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <_Z20Update_State_Machinev+0xc4>)
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e0f2      	b.n	8002b9a <_Z20Update_State_Machinev+0x292>
 80029b4:	24000be4 	.word	0x24000be4
 80029b8:	24000c08 	.word	0x24000c08
 80029bc:	24000bf0 	.word	0x24000bf0
 80029c0:	44af0000 	.word	0x44af0000
 80029c4:	24000bf8 	.word	0x24000bf8
 80029c8:	c4af0000 	.word	0xc4af0000
 80029cc:	24000bfc 	.word	0x24000bfc
 80029d0:	44898000 	.word	0x44898000
 80029d4:	c4160000 	.word	0xc4160000
			}
			else if (indexy != 99 && indexy != 123 && indexy != 255)
 80029d8:	4bc5      	ldr	r3, [pc, #788]	; (8002cf0 <_Z20Update_State_Machinev+0x3e8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b63      	cmp	r3, #99	; 0x63
 80029de:	f000 80dc 	beq.w	8002b9a <_Z20Update_State_Machinev+0x292>
 80029e2:	4bc3      	ldr	r3, [pc, #780]	; (8002cf0 <_Z20Update_State_Machinev+0x3e8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b7b      	cmp	r3, #123	; 0x7b
 80029e8:	f000 80d7 	beq.w	8002b9a <_Z20Update_State_Machinev+0x292>
 80029ec:	4bc0      	ldr	r3, [pc, #768]	; (8002cf0 <_Z20Update_State_Machinev+0x3e8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2bff      	cmp	r3, #255	; 0xff
 80029f2:	f000 80d2 	beq.w	8002b9a <_Z20Update_State_Machinev+0x292>
				{
					test_value_r = radias[indexy];
 80029f6:	4bbe      	ldr	r3, [pc, #760]	; (8002cf0 <_Z20Update_State_Machinev+0x3e8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4abe      	ldr	r2, [pc, #760]	; (8002cf4 <_Z20Update_State_Machinev+0x3ec>)
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a08:	ee17 2a90 	vmov	r2, s15
 8002a0c:	4bba      	ldr	r3, [pc, #744]	; (8002cf8 <_Z20Update_State_Machinev+0x3f0>)
 8002a0e:	601a      	str	r2, [r3, #0]
					// + angle_chess
					test_value_theta = theta[indexy];
 8002a10:	4bb7      	ldr	r3, [pc, #732]	; (8002cf0 <_Z20Update_State_Machinev+0x3e8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4ab9      	ldr	r2, [pc, #740]	; (8002cfc <_Z20Update_State_Machinev+0x3f4>)
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a22:	ee17 2a90 	vmov	r2, s15
 8002a26:	4bb6      	ldr	r3, [pc, #728]	; (8002d00 <_Z20Update_State_Machinev+0x3f8>)
 8002a28:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta ) / 1000.0))) + 0.02289) / 10.0;
 8002a2a:	4bb3      	ldr	r3, [pc, #716]	; (8002cf8 <_Z20Update_State_Machinev+0x3f0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002a36:	4bb2      	ldr	r3, [pc, #712]	; (8002d00 <_Z20Update_State_Machinev+0x3f8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a42:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8002cc8 <_Z20Update_State_Machinev+0x3c0>
 8002a46:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002a4a:	eeb0 0b46 	vmov.f64	d0, d6
 8002a4e:	f00e fc5f 	bl	8011310 <cos>
 8002a52:	eeb0 7b40 	vmov.f64	d7, d0
 8002a56:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002a5a:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002cd0 <_Z20Update_State_Machinev+0x3c8>
 8002a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a62:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002cd8 <_Z20Update_State_Machinev+0x3d0>
 8002a66:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002a6a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002a6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a76:	4ba3      	ldr	r3, [pc, #652]	; (8002d04 <_Z20Update_State_Machinev+0x3fc>)
 8002a78:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta ) / 1000.0))) + 1.05911) / 10.0;
 8002a7c:	4b9e      	ldr	r3, [pc, #632]	; (8002cf8 <_Z20Update_State_Machinev+0x3f0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	ee07 3a90 	vmov	s15, r3
 8002a84:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002a88:	4b9d      	ldr	r3, [pc, #628]	; (8002d00 <_Z20Update_State_Machinev+0x3f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a94:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8002cc8 <_Z20Update_State_Machinev+0x3c0>
 8002a98:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002a9c:	eeb0 0b46 	vmov.f64	d0, d6
 8002aa0:	f00e fc82 	bl	80113a8 <sin>
 8002aa4:	eeb0 7b40 	vmov.f64	d7, d0
 8002aa8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002aac:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002ce0 <_Z20Update_State_Machinev+0x3d8>
 8002ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ab4:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002ce8 <_Z20Update_State_Machinev+0x3e0>
 8002ab8:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002abc:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002ac0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ac4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <_Z20Update_State_Machinev+0x400>)
 8002aca:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta ) / 1000.0)) + offset_x + offset_x_new;
 8002ace:	4b8a      	ldr	r3, [pc, #552]	; (8002cf8 <_Z20Update_State_Machinev+0x3f0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002ada:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <_Z20Update_State_Machinev+0x3f8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ae6:	ed9f 5b78 	vldr	d5, [pc, #480]	; 8002cc8 <_Z20Update_State_Machinev+0x3c0>
 8002aea:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002aee:	eeb0 0b46 	vmov.f64	d0, d6
 8002af2:	f00e fc0d 	bl	8011310 <cos>
 8002af6:	eeb0 7b40 	vmov.f64	d7, d0
 8002afa:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002afe:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <_Z20Update_State_Machinev+0x404>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b0c:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <_Z20Update_State_Machinev+0x3fc>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b1e:	4b7c      	ldr	r3, [pc, #496]	; (8002d10 <_Z20Update_State_Machinev+0x408>)
 8002b20:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta) / 1000.0)) + offset_y + offset_y_new;
 8002b24:	4b74      	ldr	r3, [pc, #464]	; (8002cf8 <_Z20Update_State_Machinev+0x3f0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b30:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <_Z20Update_State_Machinev+0x3f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b3c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002cc8 <_Z20Update_State_Machinev+0x3c0>
 8002b40:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b44:	eeb0 0b46 	vmov.f64	d0, d6
 8002b48:	f00e fc2e 	bl	80113a8 <sin>
 8002b4c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b50:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <_Z20Update_State_Machinev+0x40c>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b5e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b62:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <_Z20Update_State_Machinev+0x400>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <_Z20Update_State_Machinev+0x410>)
 8002b76:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, 0);
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <_Z20Update_State_Machinev+0x408>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <_Z20Update_State_Machinev+0x410>)
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002b8a:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002b8e:	eef0 0a47 	vmov.f32	s1, s14
 8002b92:	eeb0 0a67 	vmov.f32	s0, s15
 8002b96:	f7ff fda5 	bl	80026e4 <_Z6fcb_IKffff>
				}
				Max_Time = 7;
 8002b9a:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <_Z20Update_State_Machinev+0x418>)
 8002b9c:	4a61      	ldr	r2, [pc, #388]	; (8002d24 <_Z20Update_State_Machinev+0x41c>)
 8002b9e:	601a      	str	r2, [r3, #0]
				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <_Z20Update_State_Machinev+0x418>)
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <_Z20Update_State_Machinev+0x420>)
 8002ba8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002bac:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <_Z20Update_State_Machinev+0x424>)
 8002bae:	edd3 6a00 	vldr	s13, [r3]
 8002bb2:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bb6:	eddf 2a59 	vldr	s5, [pc, #356]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bba:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bbe:	eddf 1a57 	vldr	s3, [pc, #348]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bc2:	eeb0 1a66 	vmov.f32	s2, s13
 8002bc6:	eef0 0a47 	vmov.f32	s1, s14
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	4856      	ldr	r0, [pc, #344]	; (8002d28 <_Z20Update_State_Machinev+0x420>)
 8002bd0:	f7fd ffcd 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002bd4:	4b52      	ldr	r3, [pc, #328]	; (8002d20 <_Z20Update_State_Machinev+0x418>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <_Z20Update_State_Machinev+0x428>)
 8002bdc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002be0:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <_Z20Update_State_Machinev+0x42c>)
 8002be2:	edd3 6a00 	vldr	s13, [r3]
 8002be6:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bea:	eddf 2a4c 	vldr	s5, [pc, #304]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bee:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bf2:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002bf6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bfa:	eef0 0a47 	vmov.f32	s1, s14
 8002bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002c02:	484b      	ldr	r0, [pc, #300]	; (8002d30 <_Z20Update_State_Machinev+0x428>)
 8002c04:	f7fd ffb3 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002c08:	4b45      	ldr	r3, [pc, #276]	; (8002d20 <_Z20Update_State_Machinev+0x418>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <_Z20Update_State_Machinev+0x430>)
 8002c10:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <_Z20Update_State_Machinev+0x434>)
 8002c16:	edd3 6a00 	vldr	s13, [r3]
 8002c1a:	ed9f 3a40 	vldr	s6, [pc, #256]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002c1e:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002c22:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002c26:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002c2a:	eeb0 1a66 	vmov.f32	s2, s13
 8002c2e:	eef0 0a47 	vmov.f32	s1, s14
 8002c32:	eeb0 0a67 	vmov.f32	s0, s15
 8002c36:	4840      	ldr	r0, [pc, #256]	; (8002d38 <_Z20Update_State_Machinev+0x430>)
 8002c38:	f7fd ff99 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002c3c:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <_Z20Update_State_Machinev+0x438>)
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <_Z20Update_State_Machinev+0x43c>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002c4a:	483f      	ldr	r0, [pc, #252]	; (8002d48 <_Z20Update_State_Machinev+0x440>)
 8002c4c:	f00a fb12 	bl	800d274 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002c50:	4b3e      	ldr	r3, [pc, #248]	; (8002d4c <_Z20Update_State_Machinev+0x444>)
 8002c52:	2234      	movs	r2, #52	; 0x34
 8002c54:	701a      	strb	r2, [r3, #0]
		else if (indexy == 255)
		{
			control_state = 0;
		}

		break;
 8002c56:	e281      	b.n	800315c <_Z20Update_State_Machinev+0x854>
		else if (indexy == 255)
 8002c58:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <_Z20Update_State_Machinev+0x3e8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2bff      	cmp	r3, #255	; 0xff
 8002c5e:	f040 827d 	bne.w	800315c <_Z20Update_State_Machinev+0x854>
			control_state = 0;
 8002c62:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <_Z20Update_State_Machinev+0x444>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
		break;
 8002c68:	e278      	b.n	800315c <_Z20Update_State_Machinev+0x854>

	case 42:
		Max_Time = 10;
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <_Z20Update_State_Machinev+0x418>)
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <_Z20Update_State_Machinev+0x448>)
 8002c6e:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002c70:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <_Z20Update_State_Machinev+0x43c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]

		if (Gripper_State[first - 1] == 1) {
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <_Z20Update_State_Machinev+0x44c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <_Z20Update_State_Machinev+0x450>)
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d069      	beq.n	8002d64 <_Z20Update_State_Machinev+0x45c>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <_Z20Update_State_Machinev+0x418>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <_Z20Update_State_Machinev+0x454>)
 8002c98:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <_Z20Update_State_Machinev+0x458>)
 8002c9e:	edd3 6a00 	vldr	s13, [r3]
 8002ca2:	ed9f 3a1e 	vldr	s6, [pc, #120]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002ca6:	eddf 2a1d 	vldr	s5, [pc, #116]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002caa:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002cae:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8002d1c <_Z20Update_State_Machinev+0x414>
 8002cb2:	eeb0 1a66 	vmov.f32	s2, s13
 8002cb6:	eef0 0a47 	vmov.f32	s1, s14
 8002cba:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbe:	4827      	ldr	r0, [pc, #156]	; (8002d5c <_Z20Update_State_Machinev+0x454>)
 8002cc0:	f7fd ff55 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 8002cc4:	e075      	b.n	8002db2 <_Z20Update_State_Machinev+0x4aa>
 8002cc6:	bf00      	nop
 8002cc8:	00000000 	.word	0x00000000
 8002ccc:	408f4000 	.word	0x408f4000
 8002cd0:	bc6a7efa 	.word	0xbc6a7efa
 8002cd4:	3fc49374 	.word	0x3fc49374
 8002cd8:	e59f2baa 	.word	0xe59f2baa
 8002cdc:	3f977079 	.word	0x3f977079
 8002ce0:	432ca57a 	.word	0x432ca57a
 8002ce4:	3fd2eb1c 	.word	0x3fd2eb1c
 8002ce8:	53cddd6e 	.word	0x53cddd6e
 8002cec:	3ff0f21d 	.word	0x3ff0f21d
 8002cf0:	24000c08 	.word	0x24000c08
 8002cf4:	24000114 	.word	0x24000114
 8002cf8:	24000bdc 	.word	0x24000bdc
 8002cfc:	24000014 	.word	0x24000014
 8002d00:	24000be0 	.word	0x24000be0
 8002d04:	24000c00 	.word	0x24000c00
 8002d08:	24000c04 	.word	0x24000c04
 8002d0c:	2400022c 	.word	0x2400022c
 8002d10:	24000c0c 	.word	0x24000c0c
 8002d14:	24000230 	.word	0x24000230
 8002d18:	24000c10 	.word	0x24000c10
 8002d1c:	00000000 	.word	0x00000000
 8002d20:	24000af8 	.word	0x24000af8
 8002d24:	40e00000 	.word	0x40e00000
 8002d28:	24000564 	.word	0x24000564
 8002d2c:	24000bf0 	.word	0x24000bf0
 8002d30:	2400072c 	.word	0x2400072c
 8002d34:	24000bf8 	.word	0x24000bf8
 8002d38:	24000810 	.word	0x24000810
 8002d3c:	24000bfc 	.word	0x24000bfc
 8002d40:	24000bec 	.word	0x24000bec
 8002d44:	24000b3a 	.word	0x24000b3a
 8002d48:	24001088 	.word	0x24001088
 8002d4c:	24000be4 	.word	0x24000be4
 8002d50:	41200000 	.word	0x41200000
 8002d54:	2400000c 	.word	0x2400000c
 8002d58:	24000b8c 	.word	0x24000b8c
 8002d5c:	24000648 	.word	0x24000648
 8002d60:	24000004 	.word	0x24000004
			Setpoint_J2_Down_pick, 0.0, 0.0, 0.0, 0.0);
		} else if (Gripper_State[first - 1] == 2) {
 8002d64:	4bb8      	ldr	r3, [pc, #736]	; (8003048 <_Z20Update_State_Machinev+0x740>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4ab8      	ldr	r2, [pc, #736]	; (800304c <_Z20Update_State_Machinev+0x744>)
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d019      	beq.n	8002db2 <_Z20Update_State_Machinev+0x4aa>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002d7e:	4bb4      	ldr	r3, [pc, #720]	; (8003050 <_Z20Update_State_Machinev+0x748>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	4bb3      	ldr	r3, [pc, #716]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002d86:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d8a:	4bb3      	ldr	r3, [pc, #716]	; (8003058 <_Z20Update_State_Machinev+0x750>)
 8002d8c:	edd3 6a00 	vldr	s13, [r3]
 8002d90:	ed9f 3ab2 	vldr	s6, [pc, #712]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002d94:	eddf 2ab1 	vldr	s5, [pc, #708]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002d98:	ed9f 2ab0 	vldr	s4, [pc, #704]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002d9c:	eddf 1aaf 	vldr	s3, [pc, #700]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002da0:	eeb0 1a66 	vmov.f32	s2, s13
 8002da4:	eef0 0a47 	vmov.f32	s1, s14
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	48a9      	ldr	r0, [pc, #676]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002dae:	f7fd fede 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
			Setpoint_J2_Down_place, 0.0, 0.0, 0.0, 0.0);
		}


		t = 0;
 8002db2:	4bab      	ldr	r3, [pc, #684]	; (8003060 <_Z20Update_State_Machinev+0x758>)
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002dba:	48aa      	ldr	r0, [pc, #680]	; (8003064 <_Z20Update_State_Machinev+0x75c>)
 8002dbc:	f00a fa5a 	bl	800d274 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002dc0:	4ba9      	ldr	r3, [pc, #676]	; (8003068 <_Z20Update_State_Machinev+0x760>)
 8002dc2:	2236      	movs	r2, #54	; 0x36
 8002dc4:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002dc6:	4ba9      	ldr	r3, [pc, #676]	; (800306c <_Z20Update_State_Machinev+0x764>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
		break;
 8002dcc:	e1c7      	b.n	800315e <_Z20Update_State_Machinev+0x856>

	case 43:
		Max_Time = 10;
 8002dce:	4ba0      	ldr	r3, [pc, #640]	; (8003050 <_Z20Update_State_Machinev+0x748>)
 8002dd0:	4aa7      	ldr	r2, [pc, #668]	; (8003070 <_Z20Update_State_Machinev+0x768>)
 8002dd2:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002dd4:	4ba7      	ldr	r3, [pc, #668]	; (8003074 <_Z20Update_State_Machinev+0x76c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002dda:	4b9d      	ldr	r3, [pc, #628]	; (8003050 <_Z20Update_State_Machinev+0x748>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	4b9c      	ldr	r3, [pc, #624]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002de2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002de6:	4ba4      	ldr	r3, [pc, #656]	; (8003078 <_Z20Update_State_Machinev+0x770>)
 8002de8:	edd3 6a00 	vldr	s13, [r3]
 8002dec:	ed9f 3a9b 	vldr	s6, [pc, #620]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002df0:	eddf 2a9a 	vldr	s5, [pc, #616]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002df4:	ed9f 2a99 	vldr	s4, [pc, #612]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002df8:	eddf 1a98 	vldr	s3, [pc, #608]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002dfc:	eeb0 1a66 	vmov.f32	s2, s13
 8002e00:	eef0 0a47 	vmov.f32	s1, s14
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	4892      	ldr	r0, [pc, #584]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002e0a:	f7fd feb0 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002e0e:	4b94      	ldr	r3, [pc, #592]	; (8003060 <_Z20Update_State_Machinev+0x758>)
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002e16:	4893      	ldr	r0, [pc, #588]	; (8003064 <_Z20Update_State_Machinev+0x75c>)
 8002e18:	f00a fa2c 	bl	800d274 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002e1c:	4b92      	ldr	r3, [pc, #584]	; (8003068 <_Z20Update_State_Machinev+0x760>)
 8002e1e:	2238      	movs	r2, #56	; 0x38
 8002e20:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002e22:	4b92      	ldr	r3, [pc, #584]	; (800306c <_Z20Update_State_Machinev+0x764>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
		break;
 8002e28:	e199      	b.n	800315e <_Z20Update_State_Machinev+0x856>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002e2a:	488e      	ldr	r0, [pc, #568]	; (8003064 <_Z20Update_State_Machinev+0x75c>)
 8002e2c:	f00a fa9a 	bl	800d364 <HAL_TIM_Base_Stop_IT>
		t = 0;
 8002e30:	4b8b      	ldr	r3, [pc, #556]	; (8003060 <_Z20Update_State_Machinev+0x758>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
		fcb_joint1.Goal_Velocity = 0;
 8002e38:	4b90      	ldr	r3, [pc, #576]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002e40:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002e48:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002e50:	4b8a      	ldr	r3, [pc, #552]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002e5a:	4b8a      	ldr	r3, [pc, #552]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002e64:	4b86      	ldr	r3, [pc, #536]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002e6e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002e72:	4885      	ldr	r0, [pc, #532]	; (8003088 <_Z20Update_State_Machinev+0x780>)
 8002e74:	f7ff f988 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002e78:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002e7c:	4883      	ldr	r0, [pc, #524]	; (800308c <_Z20Update_State_Machinev+0x784>)
 8002e7e:	f7ff f983 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002e82:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002e86:	4882      	ldr	r0, [pc, #520]	; (8003090 <_Z20Update_State_Machinev+0x788>)
 8002e88:	f7ff f97e 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 8002e8c:	4b7b      	ldr	r3, [pc, #492]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	4a7a      	ldr	r2, [pc, #488]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002e92:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 8002e96:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	4a79      	ldr	r2, [pc, #484]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002e9c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002ea6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.C1 = 0;
 8002eaa:	4b74      	ldr	r3, [pc, #464]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002eb4:	4b73      	ldr	r3, [pc, #460]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002ec8:	4b6e      	ldr	r3, [pc, #440]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002edc:	4b69      	ldr	r3, [pc, #420]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002ee6:	4b65      	ldr	r3, [pc, #404]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002f04:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 8002f22:	4b57      	ldr	r3, [pc, #348]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8002f2c:	4b54      	ldr	r3, [pc, #336]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 8002f36:	4b52      	ldr	r3, [pc, #328]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8002f40:	4b49      	ldr	r3, [pc, #292]	; (8003068 <_Z20Update_State_Machinev+0x760>)
 8002f42:	222a      	movs	r2, #42	; 0x2a
 8002f44:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <_Z20Update_State_Machinev+0x764>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
		break;
 8002f4c:	e107      	b.n	800315e <_Z20Update_State_Machinev+0x856>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f4e:	4845      	ldr	r0, [pc, #276]	; (8003064 <_Z20Update_State_Machinev+0x75c>)
 8002f50:	f00a fa08 	bl	800d364 <HAL_TIM_Base_Stop_IT>
		t = 0;
 8002f54:	4b42      	ldr	r3, [pc, #264]	; (8003060 <_Z20Update_State_Machinev+0x758>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
		fcb_joint2.Goal_Velocity = 0;
 8002f5c:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8002f64:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002f68:	484a      	ldr	r0, [pc, #296]	; (8003094 <_Z20Update_State_Machinev+0x78c>)
 8002f6a:	f7ff f90d 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a38      	ldr	r2, [pc, #224]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002f74:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <_Z20Update_State_Machinev+0x774>)
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002f82:	4b40      	ldr	r3, [pc, #256]	; (8003084 <_Z20Update_State_Machinev+0x77c>)
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <_Z20Update_State_Machinev+0x778>)
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002f96:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002f9a:	483b      	ldr	r0, [pc, #236]	; (8003088 <_Z20Update_State_Machinev+0x780>)
 8002f9c:	f7ff f8f4 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002fa0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002fa4:	4839      	ldr	r0, [pc, #228]	; (800308c <_Z20Update_State_Machinev+0x784>)
 8002fa6:	f7ff f8ef 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002faa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800305c <_Z20Update_State_Machinev+0x754>
 8002fae:	4838      	ldr	r0, [pc, #224]	; (8003090 <_Z20Update_State_Machinev+0x788>)
 8002fb0:	f7ff f8ea 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <_Z20Update_State_Machinev+0x740>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	4a24      	ldr	r2, [pc, #144]	; (800304c <_Z20Update_State_Machinev+0x744>)
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <_Z20Update_State_Machinev+0x6ce>
			gripper.GripperClose();
 8002fce:	4832      	ldr	r0, [pc, #200]	; (8003098 <_Z20Update_State_Machinev+0x790>)
 8002fd0:	f7fe fd70 	bl	8001ab4 <_ZN10ServoMotor12GripperCloseEv>
 8002fd4:	e00f      	b.n	8002ff6 <_Z20Update_State_Machinev+0x6ee>
		} else if (Gripper_State[first - 1] == 2) {
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <_Z20Update_State_Machinev+0x740>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	; (800304c <_Z20Update_State_Machinev+0x744>)
 8002fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <_Z20Update_State_Machinev+0x6ee>
			gripper.GripperOpen();
 8002ff0:	4829      	ldr	r0, [pc, #164]	; (8003098 <_Z20Update_State_Machinev+0x790>)
 8002ff2:	f7fe fd75 	bl	8001ae0 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <_Z20Update_State_Machinev+0x74c>)
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <_Z20Update_State_Machinev+0x760>)
 800303c:	222b      	movs	r2, #43	; 0x2b
 800303e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <_Z20Update_State_Machinev+0x764>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
		break;
 8003046:	e08a      	b.n	800315e <_Z20Update_State_Machinev+0x856>
 8003048:	2400000c 	.word	0x2400000c
 800304c:	24000b8c 	.word	0x24000b8c
 8003050:	24000af8 	.word	0x24000af8
 8003054:	24000648 	.word	0x24000648
 8003058:	24000008 	.word	0x24000008
 800305c:	00000000 	.word	0x00000000
 8003060:	24000bec 	.word	0x24000bec
 8003064:	24001088 	.word	0x24001088
 8003068:	24000be4 	.word	0x24000be4
 800306c:	24000af4 	.word	0x24000af4
 8003070:	41200000 	.word	0x41200000
 8003074:	24000b3a 	.word	0x24000b3a
 8003078:	24000000 	.word	0x24000000
 800307c:	24000564 	.word	0x24000564
 8003080:	24000810 	.word	0x24000810
 8003084:	2400072c 	.word	0x2400072c
 8003088:	240004c4 	.word	0x240004c4
 800308c:	2400053c 	.word	0x2400053c
 8003090:	24000514 	.word	0x24000514
 8003094:	240004ec 	.word	0x240004ec
 8003098:	24000abc 	.word	0x24000abc
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 800309c:	4b32      	ldr	r3, [pc, #200]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 80030a4:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800316c <_Z20Update_State_Machinev+0x864>
 80030a8:	4831      	ldr	r0, [pc, #196]	; (8003170 <_Z20Update_State_Machinev+0x868>)
 80030aa:	f7ff f86d 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 80030b4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80030b8:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <_Z20Update_State_Machinev+0x86c>)
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <_Z20Update_State_Machinev+0x870>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <_Z20Update_State_Machinev+0x874>)
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80030d6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800316c <_Z20Update_State_Machinev+0x864>
 80030da:	4829      	ldr	r0, [pc, #164]	; (8003180 <_Z20Update_State_Machinev+0x878>)
 80030dc:	f7ff f854 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80030e0:	ed9f 0a22 	vldr	s0, [pc, #136]	; 800316c <_Z20Update_State_Machinev+0x864>
 80030e4:	4827      	ldr	r0, [pc, #156]	; (8003184 <_Z20Update_State_Machinev+0x87c>)
 80030e6:	f7ff f84f 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80030ea:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800316c <_Z20Update_State_Machinev+0x864>
 80030ee:	4826      	ldr	r0, [pc, #152]	; (8003188 <_Z20Update_State_Machinev+0x880>)
 80030f0:	f7ff f84a 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80030f4:	4825      	ldr	r0, [pc, #148]	; (800318c <_Z20Update_State_Machinev+0x884>)
 80030f6:	f00a f935 	bl	800d364 <HAL_TIM_Base_Stop_IT>
		t = 0;
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <_Z20Update_State_Machinev+0x888>)
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
		fcb_joint2.C1 = 0;
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <_Z20Update_State_Machinev+0x860>)
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 800313c:	4b15      	ldr	r3, [pc, #84]	; (8003194 <_Z20Update_State_Machinev+0x88c>)
 800313e:	2229      	movs	r2, #41	; 0x29
 8003140:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <_Z20Update_State_Machinev+0x890>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
		break;
 8003148:	e009      	b.n	800315e <_Z20Update_State_Machinev+0x856>

	default:
		control_state = 0;
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <_Z20Update_State_Machinev+0x88c>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <_Z20Update_State_Machinev+0x890>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
		break;
 8003156:	e002      	b.n	800315e <_Z20Update_State_Machinev+0x856>
		break;
 8003158:	bf00      	nop
 800315a:	e000      	b.n	800315e <_Z20Update_State_Machinev+0x856>
		break;
 800315c:	bf00      	nop
	}
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	ecbd 8b02 	vpop	{d8}
 8003166:	bd80      	pop	{r7, pc}
 8003168:	24000648 	.word	0x24000648
 800316c:	00000000 	.word	0x00000000
 8003170:	240004ec 	.word	0x240004ec
 8003174:	24000564 	.word	0x24000564
 8003178:	2400072c 	.word	0x2400072c
 800317c:	24000810 	.word	0x24000810
 8003180:	240004c4 	.word	0x240004c4
 8003184:	2400053c 	.word	0x2400053c
 8003188:	24000514 	.word	0x24000514
 800318c:	24001088 	.word	0x24001088
 8003190:	24000bec 	.word	0x24000bec
 8003194:	24000be4 	.word	0x24000be4
 8003198:	24000af4 	.word	0x24000af4

0800319c <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a92      	ldr	r2, [pc, #584]	; (80033f4 <HAL_UARTEx_RxEventCallback+0x258>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f040 814b 	bne.w	8003448 <HAL_UARTEx_RxEventCallback+0x2ac>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80031b2:	4a91      	ldr	r2, [pc, #580]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80031b4:	4b91      	ldr	r3, [pc, #580]	; (80033fc <HAL_UARTEx_RxEventCallback+0x260>)
 80031b6:	4614      	mov	r4, r2
 80031b8:	461d      	mov	r5, r3
 80031ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031be:	682b      	ldr	r3, [r5, #0]
 80031c0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80031c2:	2214      	movs	r2, #20
 80031c4:	2100      	movs	r1, #0
 80031c6:	488d      	ldr	r0, [pc, #564]	; (80033fc <HAL_UARTEx_RxEventCallback+0x260>)
 80031c8:	f00f f91e 	bl	8012408 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f240 80ff 	bls.w	80033d2 <HAL_UARTEx_RxEventCallback+0x236>
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	2b14      	cmp	r3, #20
 80031d8:	f200 80fb 	bhi.w	80033d2 <HAL_UARTEx_RxEventCallback+0x236>
			cmdDataSize = Size - 2;	// Calculate data length.
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	3b02      	subs	r3, #2
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	4b87      	ldr	r3, [pc, #540]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 80031e4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80031e6:	4b86      	ldr	r3, [pc, #536]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	4982      	ldr	r1, [pc, #520]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80031f0:	4884      	ldr	r0, [pc, #528]	; (8003404 <HAL_UARTEx_RxEventCallback+0x268>)
 80031f2:	f003 feef 	bl	8006fd4 <HAL_CRC_Calculate>
 80031f6:	4603      	mov	r3, r0
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	4b83      	ldr	r3, [pc, #524]	; (8003408 <HAL_UARTEx_RxEventCallback+0x26c>)
 80031fc:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80031fe:	4b80      	ldr	r3, [pc, #512]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	4b7c      	ldr	r3, [pc, #496]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003208:	5c9b      	ldrb	r3, [r3, r2]
 800320a:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 800320c:	b21a      	sxth	r2, r3
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	3301      	adds	r3, #1
 8003216:	4978      	ldr	r1, [pc, #480]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	b21b      	sxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b21b      	sxth	r3, r3
 8003220:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8003222:	4b7a      	ldr	r3, [pc, #488]	; (800340c <HAL_UARTEx_RxEventCallback+0x270>)
 8003224:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8003226:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_UARTEx_RxEventCallback+0x26c>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29a      	uxth	r2, r3
 800322c:	4b77      	ldr	r3, [pc, #476]	; (800340c <HAL_UARTEx_RxEventCallback+0x270>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	429a      	cmp	r2, r3
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8114 	beq.w	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003242:	2201      	movs	r2, #1
 8003244:	2102      	movs	r1, #2
 8003246:	4872      	ldr	r0, [pc, #456]	; (8003410 <HAL_UARTEx_RxEventCallback+0x274>)
 8003248:	f007 f84a 	bl	800a2e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003252:	4870      	ldr	r0, [pc, #448]	; (8003414 <HAL_UARTEx_RxEventCallback+0x278>)
 8003254:	f007 f844 	bl	800a2e0 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003258:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b61      	cmp	r3, #97	; 0x61
 800325e:	d106      	bne.n	800326e <HAL_UARTEx_RxEventCallback+0xd2>
 8003260:	4b67      	ldr	r3, [pc, #412]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	d101      	bne.n	800326e <HAL_UARTEx_RxEventCallback+0xd2>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_UARTEx_RxEventCallback+0xd4>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d014      	beq.n	800329e <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003274:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	b25a      	sxtb	r2, r3
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_UARTEx_RxEventCallback+0x27c>)
 800327c:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800327e:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003280:	789b      	ldrb	r3, [r3, #2]
 8003282:	b25a      	sxtb	r2, r3
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_UARTEx_RxEventCallback+0x280>)
 8003286:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003288:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800328a:	78db      	ldrb	r3, [r3, #3]
 800328c:	b25a      	sxtb	r2, r3
 800328e:	4b64      	ldr	r3, [pc, #400]	; (8003420 <HAL_UARTEx_RxEventCallback+0x284>)
 8003290:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8003292:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	b25a      	sxtb	r2, r3
 8003298:	4b62      	ldr	r3, [pc, #392]	; (8003424 <HAL_UARTEx_RxEventCallback+0x288>)
 800329a:	701a      	strb	r2, [r3, #0]
//					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
//					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
//					pyaw = Old_Rx_Buffer[7];
//				}

			}
 800329c:	e0e5      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 800329e:	4b56      	ldr	r3, [pc, #344]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b71      	cmp	r3, #113	; 0x71
 80032a4:	d106      	bne.n	80032b4 <HAL_UARTEx_RxEventCallback+0x118>
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d101      	bne.n	80032b4 <HAL_UARTEx_RxEventCallback+0x118>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_UARTEx_RxEventCallback+0x11a>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d014      	beq.n	80032e4 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80032ba:	4b4f      	ldr	r3, [pc, #316]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	b25a      	sxtb	r2, r3
 80032c0:	4b59      	ldr	r3, [pc, #356]	; (8003428 <HAL_UARTEx_RxEventCallback+0x28c>)
 80032c2:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80032c4:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032c6:	789b      	ldrb	r3, [r3, #2]
 80032c8:	b25a      	sxtb	r2, r3
 80032ca:	4b58      	ldr	r3, [pc, #352]	; (800342c <HAL_UARTEx_RxEventCallback+0x290>)
 80032cc:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80032ce:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032d0:	78db      	ldrb	r3, [r3, #3]
 80032d2:	b25a      	sxtb	r2, r3
 80032d4:	4b56      	ldr	r3, [pc, #344]	; (8003430 <HAL_UARTEx_RxEventCallback+0x294>)
 80032d6:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80032d8:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	b25a      	sxtb	r2, r3
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <HAL_UARTEx_RxEventCallback+0x298>)
 80032e0:	701a      	strb	r2, [r3, #0]
			}
 80032e2:	e0c2      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 80032e4:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b85      	cmp	r3, #133	; 0x85
 80032ea:	d106      	bne.n	80032fa <HAL_UARTEx_RxEventCallback+0x15e>
 80032ec:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d101      	bne.n	80032fa <HAL_UARTEx_RxEventCallback+0x15e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_UARTEx_RxEventCallback+0x160>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 8003300:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_UARTEx_RxEventCallback+0x29c>)
 8003302:	2233      	movs	r2, #51	; 0x33
 8003304:	701a      	strb	r2, [r3, #0]
			}
 8003306:	e0b0      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b86      	cmp	r3, #134	; 0x86
 800330e:	d106      	bne.n	800331e <HAL_UARTEx_RxEventCallback+0x182>
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d101      	bne.n	800331e <HAL_UARTEx_RxEventCallback+0x182>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_UARTEx_RxEventCallback+0x184>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800332c:	789b      	ldrb	r3, [r3, #2]
 800332e:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	6938      	ldr	r0, [r7, #16]
 8003334:	f7ff f94c 	bl	80025d0 <_Z12Insert_queueii>
			}
 8003338:	e097      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b87      	cmp	r3, #135	; 0x87
 8003340:	d106      	bne.n	8003350 <HAL_UARTEx_RxEventCallback+0x1b4>
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d101      	bne.n	8003350 <HAL_UARTEx_RxEventCallback+0x1b4>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_UARTEx_RxEventCallback+0x1b6>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 8003356:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 800335c:	4a36      	ldr	r2, [pc, #216]	; (8003438 <HAL_UARTEx_RxEventCallback+0x29c>)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 8003362:	f7ff fad1 	bl	8002908 <_Z20Update_State_Machinev>
			}
 8003366:	e080      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 8003368:	4b23      	ldr	r3, [pc, #140]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b89      	cmp	r3, #137	; 0x89
 800336e:	d106      	bne.n	800337e <HAL_UARTEx_RxEventCallback+0x1e2>
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d101      	bne.n	800337e <HAL_UARTEx_RxEventCallback+0x1e2>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_UARTEx_RxEventCallback+0x1e4>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003384:	f7ff fac0 	bl	8002908 <_Z20Update_State_Machinev>
			}
 8003388:	e06f      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b81      	cmp	r3, #129	; 0x81
 8003390:	d106      	bne.n	80033a0 <HAL_UARTEx_RxEventCallback+0x204>
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_UARTEx_RxEventCallback+0x264>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d101      	bne.n	80033a0 <HAL_UARTEx_RxEventCallback+0x204>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_UARTEx_RxEventCallback+0x206>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d061      	beq.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
					gripperstate = Old_Rx_Buffer[1];
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_UARTEx_RxEventCallback+0x2a0>)
 80033ae:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 80033b0:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_UARTEx_RxEventCallback+0x2a0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80033c2:	481f      	ldr	r0, [pc, #124]	; (8003440 <HAL_UARTEx_RxEventCallback+0x2a4>)
 80033c4:	f7fe fb8c 	bl	8001ae0 <_ZN10ServoMotor11GripperOpenEv>
			}
 80033c8:	e04f      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
						gripper.GripperClose();
 80033ca:	481d      	ldr	r0, [pc, #116]	; (8003440 <HAL_UARTEx_RxEventCallback+0x2a4>)
 80033cc:	f7fe fb72 	bl	8001ab4 <_ZN10ServoMotor12GripperCloseEv>
			}
 80033d0:	e04b      	b.n	800346a <HAL_UARTEx_RxEventCallback+0x2ce>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2102      	movs	r1, #2
 80033d6:	480e      	ldr	r0, [pc, #56]	; (8003410 <HAL_UARTEx_RxEventCallback+0x274>)
 80033d8:	f006 ff82 	bl	800a2e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80033dc:	2201      	movs	r2, #1
 80033de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033e2:	480c      	ldr	r0, [pc, #48]	; (8003414 <HAL_UARTEx_RxEventCallback+0x278>)
 80033e4:	f006 ff7c 	bl	800a2e0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80033e8:	220c      	movs	r2, #12
 80033ea:	4916      	ldr	r1, [pc, #88]	; (8003444 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <HAL_UARTEx_RxEventCallback+0x258>)
 80033ee:	f00b fcf7 	bl	800ede0 <HAL_UART_Transmit_DMA>
 80033f2:	e03b      	b.n	800346c <HAL_UARTEx_RxEventCallback+0x2d0>
 80033f4:	24001368 	.word	0x24001368
 80033f8:	24000b0c 	.word	0x24000b0c
 80033fc:	24000b20 	.word	0x24000b20
 8003400:	24000b34 	.word	0x24000b34
 8003404:	24000430 	.word	0x24000430
 8003408:	24000b04 	.word	0x24000b04
 800340c:	24000b06 	.word	0x24000b06
 8003410:	58021000 	.word	0x58021000
 8003414:	58020400 	.word	0x58020400
 8003418:	24000afc 	.word	0x24000afc
 800341c:	24000afd 	.word	0x24000afd
 8003420:	24000afe 	.word	0x24000afe
 8003424:	24000aff 	.word	0x24000aff
 8003428:	24000b00 	.word	0x24000b00
 800342c:	24000b01 	.word	0x24000b01
 8003430:	24000b02 	.word	0x24000b02
 8003434:	24000b03 	.word	0x24000b03
 8003438:	24000be4 	.word	0x24000be4
 800343c:	24000b08 	.word	0x24000b08
 8003440:	24000abc 	.word	0x24000abc
 8003444:	08014d10 	.word	0x08014d10
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	2102      	movs	r1, #2
 800344c:	483d      	ldr	r0, [pc, #244]	; (8003544 <HAL_UARTEx_RxEventCallback+0x3a8>)
 800344e:	f006 ff47 	bl	800a2e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003452:	2201      	movs	r2, #1
 8003454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003458:	483b      	ldr	r0, [pc, #236]	; (8003548 <HAL_UARTEx_RxEventCallback+0x3ac>)
 800345a:	f006 ff41 	bl	800a2e0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 800345e:	2215      	movs	r2, #21
 8003460:	493a      	ldr	r1, [pc, #232]	; (800354c <HAL_UARTEx_RxEventCallback+0x3b0>)
 8003462:	483b      	ldr	r0, [pc, #236]	; (8003550 <HAL_UARTEx_RxEventCallback+0x3b4>)
 8003464:	f00b fcbc 	bl	800ede0 <HAL_UART_Transmit_DMA>
 8003468:	e000      	b.n	800346c <HAL_UARTEx_RxEventCallback+0x2d0>
			}
 800346a:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 800346c:	2214      	movs	r2, #20
 800346e:	4939      	ldr	r1, [pc, #228]	; (8003554 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8003470:	4837      	ldr	r0, [pc, #220]	; (8003550 <HAL_UARTEx_RxEventCallback+0x3b4>)
 8003472:	f00d fc1a 	bl	8010caa <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a36      	ldr	r2, [pc, #216]	; (8003560 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a35      	ldr	r2, [pc, #212]	; (8003564 <HAL_UARTEx_RxEventCallback+0x3c8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a33      	ldr	r2, [pc, #204]	; (8003568 <HAL_UARTEx_RxEventCallback+0x3cc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 800349e:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a32      	ldr	r2, [pc, #200]	; (800356c <HAL_UARTEx_RxEventCallback+0x3d0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <HAL_UARTEx_RxEventCallback+0x3d4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <HAL_UARTEx_RxEventCallback+0x3d8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <HAL_UARTEx_RxEventCallback+0x3dc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2c      	ldr	r2, [pc, #176]	; (800357c <HAL_UARTEx_RxEventCallback+0x3e0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <HAL_UARTEx_RxEventCallback+0x3e4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034da:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a29      	ldr	r2, [pc, #164]	; (8003584 <HAL_UARTEx_RxEventCallback+0x3e8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	; (8003588 <HAL_UARTEx_RxEventCallback+0x3ec>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_UARTEx_RxEventCallback+0x3f0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 80034f8:	4b17      	ldr	r3, [pc, #92]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a24      	ldr	r2, [pc, #144]	; (8003590 <HAL_UARTEx_RxEventCallback+0x3f4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_UARTEx_RxEventCallback+0x3f8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_UARTEx_RxEventCallback+0x37a>
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <HAL_UARTEx_RxEventCallback+0x3fc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <HAL_UARTEx_RxEventCallback+0x38c>
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0208 	bic.w	r2, r2, #8
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e008      	b.n	800353a <HAL_UARTEx_RxEventCallback+0x39e>
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bdb0      	pop	{r4, r5, r7, pc}
 8003542:	bf00      	nop
 8003544:	58021000 	.word	0x58021000
 8003548:	58020400 	.word	0x58020400
 800354c:	08014d20 	.word	0x08014d20
 8003550:	24001368 	.word	0x24001368
 8003554:	24000b20 	.word	0x24000b20
 8003558:	24001650 	.word	0x24001650
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
 800359c:	00000000 	.word	0x00000000

080035a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4acb      	ldr	r2, [pc, #812]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d110      	bne.n	80035d2 <HAL_TIM_PeriodElapsedCallback+0x32>
//
////					stepperJ1.StepperOpenLoopSpeed(u_q1/num);
////					stepperJ2.StepperSetFrequency(u_q2/3.0);
////					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
////					stepperJ4.StepperOpenLoopSpeed(u_q4/num);
		if (State_FIN) {
 80035b0:	4bca      	ldr	r3, [pc, #808]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_TIM_PeriodElapsedCallback+0x32>
			Balloon++;
 80035ba:	4bc9      	ldr	r3, [pc, #804]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4ac7      	ldr	r2, [pc, #796]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80035c2:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 80035c4:	f7ff f9a0 	bl	8002908 <_Z20Update_State_Machinev>
			Update_State_Machine();
 80035c8:	f7ff f99e 	bl	8002908 <_Z20Update_State_Machinev>
			State_FIN = false;
 80035cc:	4bc3      	ldr	r3, [pc, #780]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim16) {
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4ac3      	ldr	r2, [pc, #780]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f040 80ca 	bne.w	8003770 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		encoderJ1.AMT21_Read();
 80035dc:	48c2      	ldr	r0, [pc, #776]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80035de:	f7fd f878 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80035e2:	48c1      	ldr	r0, [pc, #772]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80035e4:	f7fd f8a4 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4bbf      	ldr	r3, [pc, #764]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80035ee:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80035f0:	4bbe      	ldr	r3, [pc, #760]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d110      	bne.n	800361a <HAL_TIM_PeriodElapsedCallback+0x7a>
			fcb_joint1.Encoder = (encoderJ1.getAngPos180() / 2.609);
 80035f8:	48bb      	ldr	r0, [pc, #748]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80035fa:	f7fd f8ff 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80035fe:	4603      	mov	r3, r0
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003608:	ed9f 5baf 	vldr	d5, [pc, #700]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x328>
 800360c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003610:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003614:	4bb6      	ldr	r3, [pc, #728]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003616:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 800361a:	48b6      	ldr	r0, [pc, #728]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800361c:	f7fd f859 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003620:	48b4      	ldr	r0, [pc, #720]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003622:	f7fd f885 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	4bb3      	ldr	r3, [pc, #716]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800362c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 800362e:	4bb2      	ldr	r3, [pc, #712]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d112      	bne.n	800365c <HAL_TIM_PeriodElapsedCallback+0xbc>
			encoderJ2.unwarp();
 8003636:	48af      	ldr	r0, [pc, #700]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003638:	f7fd f902 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 800363c:	48ad      	ldr	r0, [pc, #692]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800363e:	f7fd f95e 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 8003642:	ee07 0a90 	vmov	s15, r0
 8003646:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800364a:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x328>
 800364e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003652:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003656:	4ba9      	ldr	r3, [pc, #676]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003658:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 800365c:	48a8      	ldr	r0, [pc, #672]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800365e:	f7fd f838 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003662:	48a7      	ldr	r0, [pc, #668]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003664:	f7fd f864 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800366e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003670:	4ba4      	ldr	r3, [pc, #656]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d110      	bne.n	800369a <HAL_TIM_PeriodElapsedCallback+0xfa>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003678:	48a1      	ldr	r0, [pc, #644]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800367a:	f7fd f8bf 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800367e:	4603      	mov	r3, r0
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003688:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x328>
 800368c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003690:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003694:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003696:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 800369a:	489c      	ldr	r0, [pc, #624]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800369c:	f7fd f819 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80036a0:	489a      	ldr	r0, [pc, #616]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80036a2:	f7fd f845 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b99      	ldr	r3, [pc, #612]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80036ac:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80036ae:	4b98      	ldr	r3, [pc, #608]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d110      	bne.n	80036d8 <HAL_TIM_PeriodElapsedCallback+0x138>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 80036b6:	4895      	ldr	r0, [pc, #596]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80036b8:	f7fd f8a0 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80036bc:	4603      	mov	r3, r0
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036c6:	ed9f 5b82 	vldr	d5, [pc, #520]	; 80038d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 80036ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036d2:	4b90      	ldr	r3, [pc, #576]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80036d4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 80036d8:	488f      	ldr	r0, [pc, #572]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80036da:	f7fd f98b 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 80036de:	eef0 7a40 	vmov.f32	s15, s0
 80036e2:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 80036e8:	488b      	ldr	r0, [pc, #556]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80036ea:	f7fd f963 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 80036ee:	eef0 7a40 	vmov.f32	s15, s0
 80036f2:	4b8b      	ldr	r3, [pc, #556]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80036f4:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 80036f8:	4b7d      	ldr	r3, [pc, #500]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80036fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80036fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003702:	487b      	ldr	r0, [pc, #492]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003704:	f7fd fb57 	bl	8000db6 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003708:	4b79      	ldr	r3, [pc, #484]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800370a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800370e:	4a78      	ldr	r2, [pc, #480]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003710:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 8003714:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800371a:	4a75      	ldr	r2, [pc, #468]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800371c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003720:	4b76      	ldr	r3, [pc, #472]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003722:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003726:	eeb0 0a67 	vmov.f32	s0, s15
 800372a:	4874      	ldr	r0, [pc, #464]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800372c:	f7fd fb43 	bl	8000db6 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003730:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003736:	4a71      	ldr	r2, [pc, #452]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003738:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 800373c:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800373e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003742:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003744:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003748:	4b6f      	ldr	r3, [pc, #444]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800374a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800374e:	eeb0 0a67 	vmov.f32	s0, s15
 8003752:	486d      	ldr	r0, [pc, #436]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003754:	f7fd fb2f 	bl	8000db6 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003758:	4b6b      	ldr	r3, [pc, #428]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800375a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800375e:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003760:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8003764:	4b68      	ldr	r3, [pc, #416]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800376a:	4a67      	ldr	r2, [pc, #412]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800376c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc


	}

	if (htim == &htim14) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a6c      	ldr	r2, [pc, #432]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003774:	4293      	cmp	r3, r2
 8003776:	f040 854d 	bne.w	8004214 <HAL_TIM_PeriodElapsedCallback+0xc74>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 800377a:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800377c:	ed93 7a00 	vldr	s14, [r3]
 8003780:	4b69      	ldr	r3, [pc, #420]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
		float t3 = t * t * t;
 800378e:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003790:	ed93 7a00 	vldr	s14, [r3]
 8003794:	4b64      	ldr	r3, [pc, #400]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	edc7 7a06 	vstr	s15, [r7, #24]
		float t4 = t * t * t * t;
 80037ac:	4b5e      	ldr	r3, [pc, #376]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037ae:	ed93 7a00 	vldr	s14, [r3]
 80037b2:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037bc:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c6:	4b58      	ldr	r3, [pc, #352]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d0:	edc7 7a05 	vstr	s15, [r7, #20]
		float t5 = t * t * t * t * t;
 80037d4:	4b54      	ldr	r3, [pc, #336]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037d6:	ed93 7a00 	vldr	s14, [r3]
 80037da:	4b53      	ldr	r3, [pc, #332]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037e4:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ee:	4b4e      	ldr	r3, [pc, #312]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a04 	vstr	s15, [r7, #16]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003806:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003808:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800380c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003812:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800381a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800381e:	4b42      	ldr	r3, [pc, #264]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003820:	edd3 7a00 	vldr	s15, [r3]
 8003824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003828:	ee25 7b07 	vmul.f64	d7, d5, d7
 800382c:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003830:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003832:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800383e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003842:	edd7 7a07 	vldr	s15, [r7, #28]
 8003846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800384e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003854:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800385c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003860:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003864:	edd7 7a06 	vldr	s15, [r7, #24]
 8003868:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800386c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003870:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 8003874:	4b1e      	ldr	r3, [pc, #120]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003876:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800387a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800387e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003882:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003886:	edd7 7a05 	vldr	s15, [r7, #20]
 800388a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800388e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003892:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800389c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038a2:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038a8:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038b6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80038bc:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 80038c0:	e034      	b.n	800392c <HAL_TIM_PeriodElapsedCallback+0x38c>
 80038c2:	bf00      	nop
 80038c4:	f3af 8000 	nop.w
 80038c8:	645a1cac 	.word	0x645a1cac
 80038cc:	4004df3b 	.word	0x4004df3b
 80038d0:	645a1cac 	.word	0x645a1cac
 80038d4:	c004df3b 	.word	0xc004df3b
 80038d8:	24000ec0 	.word	0x24000ec0
 80038dc:	24000af4 	.word	0x24000af4
 80038e0:	24000be8 	.word	0x24000be8
 80038e4:	24001120 	.word	0x24001120
 80038e8:	24000454 	.word	0x24000454
 80038ec:	24000ad8 	.word	0x24000ad8
 80038f0:	24000564 	.word	0x24000564
 80038f4:	24000470 	.word	0x24000470
 80038f8:	24000ad9 	.word	0x24000ad9
 80038fc:	24000648 	.word	0x24000648
 8003900:	2400048c 	.word	0x2400048c
 8003904:	24000ada 	.word	0x24000ada
 8003908:	2400072c 	.word	0x2400072c
 800390c:	240004a8 	.word	0x240004a8
 8003910:	24000adb 	.word	0x24000adb
 8003914:	24000810 	.word	0x24000810
 8003918:	24000adc 	.word	0x24000adc
 800391c:	24000aec 	.word	0x24000aec
 8003920:	24000af0 	.word	0x24000af0
 8003924:	24001088 	.word	0x24001088
 8003928:	24000bec 	.word	0x24000bec
 800392c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003938:	4bdc      	ldr	r3, [pc, #880]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 800393a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800393e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003946:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 800394a:	4bd8      	ldr	r3, [pc, #864]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 800394c:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003950:	edd7 7a05 	vldr	s15, [r7, #20]
 8003954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800395c:	4bd3      	ldr	r3, [pc, #844]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 800395e:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003962:	edd7 7a04 	vldr	s15, [r7, #16]
 8003966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 800396e:	4bcf      	ldr	r3, [pc, #828]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003970:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003974:	4bce      	ldr	r3, [pc, #824]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003976:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800397a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800397e:	4bcc      	ldr	r3, [pc, #816]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003980:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003984:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003988:	ee37 5b07 	vadd.f64	d5, d7, d7
 800398c:	4bc9      	ldr	r3, [pc, #804]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003996:	ee25 7b07 	vmul.f64	d7, d5, d7
 800399a:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 800399e:	4bc4      	ldr	r3, [pc, #784]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80039a0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80039a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039a8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80039ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80039b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039c0:	4bbb      	ldr	r3, [pc, #748]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80039c2:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80039c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ca:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80039ce:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80039d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80039de:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 80039e2:	4bb3      	ldr	r3, [pc, #716]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80039e4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80039e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039ec:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80039f0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80039f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003a08:	4ba9      	ldr	r3, [pc, #676]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a0a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003a0e:	4ba8      	ldr	r3, [pc, #672]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a10:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003a14:	4ba6      	ldr	r3, [pc, #664]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a16:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003a1a:	4ba6      	ldr	r3, [pc, #664]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a24:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003a28:	4ba1      	ldr	r3, [pc, #644]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a2a:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003a2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a3a:	4b9d      	ldr	r3, [pc, #628]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a3c:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003a40:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a48:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003a4c:	4b98      	ldr	r3, [pc, #608]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a4e:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a5e:	4b94      	ldr	r3, [pc, #592]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a60:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003a70:	4b8f      	ldr	r3, [pc, #572]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a72:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003a76:	4b90      	ldr	r3, [pc, #576]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a78:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003a7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a80:	4b8d      	ldr	r3, [pc, #564]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003a82:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003a86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a8a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003a8e:	4b89      	ldr	r3, [pc, #548]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a98:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a9c:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003aa0:	4b85      	ldr	r3, [pc, #532]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003aa2:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003aa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aaa:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003aae:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ab2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ab6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003abe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ac2:	4b7d      	ldr	r3, [pc, #500]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ac4:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003ac8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003acc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ad0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003ad4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ad8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003adc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ae0:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint3.C5 * t4);
 8003ae4:	4b74      	ldr	r3, [pc, #464]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ae6:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aee:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003af2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003afe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003b0a:	4b6b      	ldr	r3, [pc, #428]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b0c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003b10:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b12:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003b16:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b18:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003b1c:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b1e:	edd3 7a00 	vldr	s15, [r3]
 8003b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b26:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b2c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b30:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b3c:	4b5e      	ldr	r3, [pc, #376]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b3e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003b4e:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b50:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b60:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b62:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003b66:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b74:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b7a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b82:	4b4e      	ldr	r3, [pc, #312]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003b84:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b8c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b90:	4b48      	ldr	r3, [pc, #288]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b9e:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003ba2:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003ba4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bac:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003bb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bbc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003bc6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003bca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bce:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003bd2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bde:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003be2:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 8003be6:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003be8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf0:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003bf4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c0e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c14:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003c18:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c1a:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003c1e:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c20:	edd3 7a00 	vldr	s15, [r3]
 8003c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c28:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c2e:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c32:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c40:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c52:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c64:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c70:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c76:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;

		fcb_joint1.Kp_p = 0.4;
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003c7c:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003ca8:	e00e      	b.n	8003cc8 <HAL_TIM_PeriodElapsedCallback+0x728>
 8003caa:	bf00      	nop
 8003cac:	24000564 	.word	0x24000564
 8003cb0:	24000648 	.word	0x24000648
 8003cb4:	24000bec 	.word	0x24000bec
 8003cb8:	2400072c 	.word	0x2400072c
 8003cbc:	24000810 	.word	0x24000810
 8003cc0:	3ecccccd 	.word	0x3ecccccd
 8003cc4:	3cf5c28f 	.word	0x3cf5c28f
 8003cc8:	4ac7      	ldr	r2, [pc, #796]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003ccc:	4bc7      	ldr	r3, [pc, #796]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003cd4:	4bc5      	ldr	r3, [pc, #788]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	669a      	str	r2, [r3, #104]	; 0x68
//		fcb_joint1.Kd_p = 0.0;
//		fcb_joint3.Kp_p = 0.0;
//		fcb_joint3.Ki_p = 0.0;
//		fcb_joint3.Kd_p = 0.0;

		fcb_joint1.Kp_v = 0.0; // 3.2
 8003cdc:	4bc4      	ldr	r3, [pc, #784]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 8003ce4:	4bc2      	ldr	r3, [pc, #776]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003cec:	4bc0      	ldr	r3, [pc, #768]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint2.Kp_v = 0.0; // 3.2
 8003cf4:	4bbf      	ldr	r3, [pc, #764]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint2.Ki_v = 0.0;
 8003cfc:	4bbd      	ldr	r3, [pc, #756]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint2.Kd_v = 0.0;
 8003d04:	4bbb      	ldr	r3, [pc, #748]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint3.Kp_v = 0.0; // 3.2
 8003d0c:	4bb7      	ldr	r3, [pc, #732]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003d14:	4bb5      	ldr	r3, [pc, #724]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 8003d1c:	4bb3      	ldr	r3, [pc, #716]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003d24:	4bb2      	ldr	r3, [pc, #712]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d26:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d2a:	4bb1      	ldr	r3, [pc, #708]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d2c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d34:	4bae      	ldr	r3, [pc, #696]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d36:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8003d3a:	4bac      	ldr	r3, [pc, #688]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d3c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d40:	4baa      	ldr	r3, [pc, #680]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d42:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4a:	4ba8      	ldr	r3, [pc, #672]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d4c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 8003d50:	4ba7      	ldr	r3, [pc, #668]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d52:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003d56:	4ba6      	ldr	r3, [pc, #664]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d58:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d60:	4ba3      	ldr	r3, [pc, #652]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003d62:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003d66:	4ba1      	ldr	r3, [pc, #644]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d68:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003d6c:	4b9f      	ldr	r3, [pc, #636]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d6e:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d76:	4b9d      	ldr	r3, [pc, #628]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003d78:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8003d7c:	4b9d      	ldr	r3, [pc, #628]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d7e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003d82:	4b9c      	ldr	r3, [pc, #624]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d84:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8c:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d8e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;
 8003d92:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d94:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003d98:	4b96      	ldr	r3, [pc, #600]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003d9a:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da2:	4b94      	ldr	r3, [pc, #592]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003da4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003da8:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003daa:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003dae:	4b90      	ldr	r3, [pc, #576]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003db0:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db8:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003dba:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003dc0:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003dc4:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003dc6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dce:	4b87      	ldr	r3, [pc, #540]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003dd0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8003dd4:	4b86      	ldr	r3, [pc, #536]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003dd6:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003dda:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ddc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de4:	4b82      	ldr	r3, [pc, #520]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003de6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 8003dea:	4b80      	ldr	r3, [pc, #512]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003dec:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003df0:	4b7e      	ldr	r3, [pc, #504]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003df2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003dfc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8003e00:	4b7c      	ldr	r3, [pc, #496]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e02:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e08:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e10:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e12:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;
 8003e16:	4b77      	ldr	r3, [pc, #476]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e18:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8003e1c:	4b75      	ldr	r3, [pc, #468]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e1e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e26:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003e28:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8003e2c:	4b70      	ldr	r3, [pc, #448]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e2e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 8003e32:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e34:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003e38:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e3a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e42:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8003e46:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e48:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e4e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e56:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p))
 8003e5a:	4b65      	ldr	r3, [pc, #404]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e5c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003e60:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e62:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003e66:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e68:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003e6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e74:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
 8003e78:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e7a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e80:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e88:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
 8003e8c:	4b58      	ldr	r3, [pc, #352]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e8e:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003e92:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003e94:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e9c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));
 8003ea0:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ea2:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003ea6:	4b52      	ldr	r3, [pc, #328]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ea8:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003eac:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003eae:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003eb2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eba:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8003ebe:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8003ec0:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8003ec4:	4b4b      	ldr	r3, [pc, #300]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ec6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 8003eca:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ecc:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003ed0:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ed2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eda:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 8003ede:	4b45      	ldr	r3, [pc, #276]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ee0:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003ee4:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ee6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eee:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p))
 8003ef2:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003ef4:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003ef8:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003efa:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f00:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
 8003f10:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f12:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f18:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f20:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
 8003f24:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f26:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f2c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f34:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));
 8003f38:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f3a:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f40:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003f44:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f46:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003f4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8003f56:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003f58:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f5e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f64:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f6a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f72:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f78:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f7e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f86:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p))
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f8c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f92:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003f98:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003faa:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fb0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fbe:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fc4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fd2:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fd8:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003fde:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003fe2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fe6:	e007      	b.n	8003ff8 <HAL_TIM_PeriodElapsedCallback+0xa58>
 8003fe8:	3e19999a 	.word	0x3e19999a
 8003fec:	2400072c 	.word	0x2400072c
 8003ff0:	24000564 	.word	0x24000564
 8003ff4:	24000648 	.word	0x24000648
 8003ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004002:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		if (joint13_on) {
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02f      	beq.n	8004070 <HAL_TIM_PeriodElapsedCallback+0xad0>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8004012:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004016:	eeb0 0a67 	vmov.f32	s0, s15
 800401a:	480f      	ldr	r0, [pc, #60]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 800401c:	f7fe f8b4 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8004020:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800406c <HAL_TIM_PeriodElapsedCallback+0xacc>
 8004024:	480d      	ldr	r0, [pc, #52]	; (800405c <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8004026:	f7fe f8af 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_TIM_PeriodElapsedCallback+0xaac>)
 800402c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	480a      	ldr	r0, [pc, #40]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0xac0>)
 8004036:	f7fe f8a7 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0xac4>)
 800403c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004040:	eeb0 0a67 	vmov.f32	s0, s15
 8004044:	4808      	ldr	r0, [pc, #32]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0xac8>)
 8004046:	f7fe f89f 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 800404a:	e028      	b.n	800409e <HAL_TIM_PeriodElapsedCallback+0xafe>
 800404c:	2400072c 	.word	0x2400072c
 8004050:	24000b3a 	.word	0x24000b3a
 8004054:	24000564 	.word	0x24000564
 8004058:	240004c4 	.word	0x240004c4
 800405c:	240004ec 	.word	0x240004ec
 8004060:	24000514 	.word	0x24000514
 8004064:	24000810 	.word	0x24000810
 8004068:	2400053c 	.word	0x2400053c
 800406c:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 8004070:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 800406c <HAL_TIM_PeriodElapsedCallback+0xacc>
 8004074:	48b3      	ldr	r0, [pc, #716]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8004076:	f7fe f887 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 800407a:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8004348 <HAL_TIM_PeriodElapsedCallback+0xda8>
 800407e:	48b3      	ldr	r0, [pc, #716]	; (800434c <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8004080:	f7fe f882 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8004084:	4bb2      	ldr	r3, [pc, #712]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8004086:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800408a:	eeb0 0a67 	vmov.f32	s0, s15
 800408e:	48b1      	ldr	r0, [pc, #708]	; (8004354 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8004090:	f7fe f87a 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 8004094:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8004348 <HAL_TIM_PeriodElapsedCallback+0xda8>
 8004098:	48af      	ldr	r0, [pc, #700]	; (8004358 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 800409a:	f7fe f875 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800409e:	4baf      	ldr	r3, [pc, #700]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80040a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a2:	4aae      	ldr	r2, [pc, #696]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80040a4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 80040a6:	4baa      	ldr	r3, [pc, #680]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	4aa9      	ldr	r2, [pc, #676]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80040ac:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80040ae:	4bac      	ldr	r3, [pc, #688]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80040b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b2:	4aab      	ldr	r2, [pc, #684]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80040b4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 80040b6:	4ba9      	ldr	r3, [pc, #676]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	4aa7      	ldr	r2, [pc, #668]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80040be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
 80040c2:	4ba3      	ldr	r3, [pc, #652]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80040c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c8:	4aa1      	ldr	r2, [pc, #644]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80040ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 80040ce:	4ba4      	ldr	r3, [pc, #656]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	4aa2      	ldr	r2, [pc, #648]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80040d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 80040da:	4ba0      	ldr	r3, [pc, #640]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80040dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040e0:	4a9e      	ldr	r2, [pc, #632]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 80040e6:	4b9e      	ldr	r3, [pc, #632]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80040e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040ec:	4a9c      	ldr	r2, [pc, #624]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80040ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 80040f2:	4b97      	ldr	r3, [pc, #604]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80040f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040f8:	4a95      	ldr	r2, [pc, #596]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80040fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 80040fe:	4b94      	ldr	r3, [pc, #592]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8004100:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004104:	4a92      	ldr	r2, [pc, #584]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8004106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 800410a:	4b94      	ldr	r3, [pc, #592]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 800410c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004110:	4a92      	ldr	r2, [pc, #584]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8004112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8004116:	4b91      	ldr	r3, [pc, #580]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8004118:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800411c:	4a90      	ldr	r2, [pc, #576]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 800411e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 8004122:	4b90      	ldr	r3, [pc, #576]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8004124:	ed93 7a00 	vldr	s14, [r3]
 8004128:	4b8f      	ldr	r3, [pc, #572]	; (8004368 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 800412a:	edd3 7a00 	vldr	s15, [r3]
 800412e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004132:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8004134:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 8004138:	4b8a      	ldr	r3, [pc, #552]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 800413a:	ed93 7a00 	vldr	s14, [r3]
 800413e:	4b8b      	ldr	r3, [pc, #556]	; (800436c <HAL_TIM_PeriodElapsedCallback+0xdcc>)
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414c:	bfac      	ite	ge
 800414e:	2301      	movge	r3, #1
 8004150:	2300      	movlt	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05d      	beq.n	8004214 <HAL_TIM_PeriodElapsedCallback+0xc74>
			t = (int) 0;
 8004158:	4b82      	ldr	r3, [pc, #520]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 8004160:	4b7e      	ldr	r3, [pc, #504]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 800416a:	4b79      	ldr	r3, [pc, #484]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8004174:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			fcb_joint1.Sum_Error_v = 0;
 800417e:	4b77      	ldr	r3, [pc, #476]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint2.Sum_Error_v = 0;
 8004188:	4b71      	ldr	r3, [pc, #452]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8004192:	4b73      	ldr	r3, [pc, #460]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

			fcb_joint1.Old_Error_p = 0;
 800419c:	4b6f      	ldr	r3, [pc, #444]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 80041a4:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80041ac:	4b6c      	ldr	r3, [pc, #432]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	67da      	str	r2, [r3, #124]	; 0x7c

			fcb_joint1.Old_Error_v = 0;
 80041b4:	4b69      	ldr	r3, [pc, #420]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint2.Old_Error_v = 0;
 80041be:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 80041c8:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			fcb_joint1.Old_p = 0;
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 80041dc:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80041e6:	4b5e      	ldr	r3, [pc, #376]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

			fcb_joint1.Old_v = 0;
 80041f0:	4b5a      	ldr	r3, [pc, #360]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint2.Old_v = 0;
 80041fa:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8004204:	4b56      	ldr	r3, [pc, #344]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			State_FIN = true;
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0xdd0>)
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a57      	ldr	r2, [pc, #348]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	f040 808f 	bne.w	800433c <HAL_TIM_PeriodElapsedCallback+0xd9c>
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF), };
		uint8_t encoder_state[8] =
				{
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0) >> 8) & 0xFF),
 800421e:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8004220:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004224:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004228:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800422c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004230:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004234:	ee17 3a90 	vmov	r3, s15
 8004238:	b21b      	sxth	r3, r3
 800423a:	121b      	asrs	r3, r3, #8
 800423c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800423e:	b2db      	uxtb	r3, r3
 8004240:	723b      	strb	r3, [r7, #8]
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0)) & 0xFF),
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8004244:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004248:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800424c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004250:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004254:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004258:	ee17 3a90 	vmov	r3, s15
 800425c:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800425e:	b2db      	uxtb	r3, r3
 8004260:	727b      	strb	r3, [r7, #9]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
 8004262:	4b45      	ldr	r3, [pc, #276]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 8004264:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004268:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800426c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004270:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004274:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004278:	ee17 3a90 	vmov	r3, s15
 800427c:	b21b      	sxth	r3, r3
 800427e:	121b      	asrs	r3, r3, #8
 8004280:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004282:	b2db      	uxtb	r3, r3
 8004284:	72bb      	strb	r3, [r7, #10]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
 8004286:	4b3c      	ldr	r3, [pc, #240]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 8004288:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800428c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004290:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004294:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004298:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800429c:	ee17 3a90 	vmov	r3, s15
 80042a0:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	72fb      	strb	r3, [r7, #11]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
 80042a6:	4b2d      	ldr	r3, [pc, #180]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80042a8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80042ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80042b0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80042b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80042b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80042bc:	ee17 3a90 	vmov	r3, s15
 80042c0:	b21b      	sxth	r3, r3
 80042c2:	121b      	asrs	r3, r3, #8
 80042c4:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	733b      	strb	r3, [r7, #12]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 80042cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80042d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80042d4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80042d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80042dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80042e0:	ee17 3a90 	vmov	r3, s15
 80042e4:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	737b      	strb	r3, [r7, #13]
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
 80042ea:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 80042ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80042f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80042f4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80042f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80042fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004300:	ee17 3a90 	vmov	r3, s15
 8004304:	b21b      	sxth	r3, r3
 8004306:	121b      	asrs	r3, r3, #8
 8004308:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73bb      	strb	r3, [r7, #14]
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8004310:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004314:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004318:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800431c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004320:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004324:	ee17 3a90 	vmov	r3, s15
 8004328:	b21b      	sxth	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 8);
 800432e:	f107 0308 	add.w	r3, r7, #8
 8004332:	2208      	movs	r2, #8
 8004334:	4619      	mov	r1, r3
 8004336:	4811      	ldr	r0, [pc, #68]	; (800437c <HAL_TIM_PeriodElapsedCallback+0xddc>)
 8004338:	f00a fd52 	bl	800ede0 <HAL_UART_Transmit_DMA>
	}
}
 800433c:	bf00      	nop
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	240004c4 	.word	0x240004c4
 8004348:	00000000 	.word	0x00000000
 800434c:	24000514 	.word	0x24000514
 8004350:	24000648 	.word	0x24000648
 8004354:	240004ec 	.word	0x240004ec
 8004358:	2400053c 	.word	0x2400053c
 800435c:	24000564 	.word	0x24000564
 8004360:	2400072c 	.word	0x2400072c
 8004364:	24000bec 	.word	0x24000bec
 8004368:	24000214 	.word	0x24000214
 800436c:	24000af8 	.word	0x24000af8
 8004370:	24000af4 	.word	0x24000af4
 8004374:	2400116c 	.word	0x2400116c
 8004378:	24000810 	.word	0x24000810
 800437c:	240012d8 	.word	0x240012d8

08004380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004384:	f002 fbe4 	bl	8006b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004388:	f000 fab6 	bl	80048f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800438c:	f7fd fff8 	bl	8002380 <MX_GPIO_Init>
  MX_DMA_Init();
 8004390:	f7fd ff86 	bl	80022a0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004394:	f002 f876 	bl	8006484 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004398:	f001 f8de 	bl	8005558 <MX_TIM2_Init>
  MX_UART4_Init();
 800439c:	f001 ff84 	bl	80062a8 <MX_UART4_Init>
  MX_TIM4_Init();
 80043a0:	f001 f9ca 	bl	8005738 <MX_TIM4_Init>
  MX_SPI3_Init();
 80043a4:	f000 fc5a 	bl	8004c5c <MX_SPI3_Init>
  MX_TIM1_Init();
 80043a8:	f001 f828 	bl	80053fc <MX_TIM1_Init>
  MX_TIM3_Init();
 80043ac:	f001 f94c 	bl	8005648 <MX_TIM3_Init>
  MX_TIM5_Init();
 80043b0:	f001 fa3a 	bl	8005828 <MX_TIM5_Init>
  MX_TIM15_Init();
 80043b4:	f001 fbce 	bl	8005b54 <MX_TIM15_Init>
  MX_CRC_Init();
 80043b8:	f7fd ff22 	bl	8002200 <MX_CRC_Init>
  MX_UART7_Init();
 80043bc:	f001 ffc8 	bl	8006350 <MX_UART7_Init>
  MX_TIM6_Init();
 80043c0:	f001 fa80 	bl	80058c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80043c4:	f001 fab4 	bl	8005930 <MX_TIM7_Init>
  MX_TIM12_Init();
 80043c8:	f001 fb42 	bl	8005a50 <MX_TIM12_Init>
  MX_TIM13_Init();
 80043cc:	f001 fb7a 	bl	8005ac4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80043d0:	f001 fb9c 	bl	8005b0c <MX_TIM14_Init>
  MX_TIM16_Init();
 80043d4:	f001 fc62 	bl	8005c9c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80043d8:	f002 f808 	bl	80063ec <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80043dc:	f001 fc84 	bl	8005ce8 <MX_TIM17_Init>
  MX_TIM8_Init();
 80043e0:	f001 fadc 	bl	800599c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80043e4:	2214      	movs	r2, #20
 80043e6:	496a      	ldr	r1, [pc, #424]	; (8004590 <main+0x210>)
 80043e8:	486a      	ldr	r0, [pc, #424]	; (8004594 <main+0x214>)
 80043ea:	f00c fc5e 	bl	8010caa <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80043ee:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <main+0x218>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6a      	ldr	r2, [pc, #424]	; (800459c <main+0x21c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <main+0x10e>
 80043f8:	4b67      	ldr	r3, [pc, #412]	; (8004598 <main+0x218>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a68      	ldr	r2, [pc, #416]	; (80045a0 <main+0x220>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <main+0x10e>
 8004402:	4b65      	ldr	r3, [pc, #404]	; (8004598 <main+0x218>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a67      	ldr	r2, [pc, #412]	; (80045a4 <main+0x224>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <main+0x10e>
 800440c:	4b62      	ldr	r3, [pc, #392]	; (8004598 <main+0x218>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a65      	ldr	r2, [pc, #404]	; (80045a8 <main+0x228>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <main+0x10e>
 8004416:	4b60      	ldr	r3, [pc, #384]	; (8004598 <main+0x218>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a64      	ldr	r2, [pc, #400]	; (80045ac <main+0x22c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <main+0x10e>
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <main+0x218>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a62      	ldr	r2, [pc, #392]	; (80045b0 <main+0x230>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <main+0x10e>
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <main+0x218>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a61      	ldr	r2, [pc, #388]	; (80045b4 <main+0x234>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <main+0x10e>
 8004434:	4b58      	ldr	r3, [pc, #352]	; (8004598 <main+0x218>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a5f      	ldr	r2, [pc, #380]	; (80045b8 <main+0x238>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <main+0x10e>
 800443e:	4b56      	ldr	r3, [pc, #344]	; (8004598 <main+0x218>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5e      	ldr	r2, [pc, #376]	; (80045bc <main+0x23c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <main+0x10e>
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <main+0x218>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5c      	ldr	r2, [pc, #368]	; (80045c0 <main+0x240>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <main+0x10e>
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <main+0x218>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5b      	ldr	r2, [pc, #364]	; (80045c4 <main+0x244>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <main+0x10e>
 800445c:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <main+0x218>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a59      	ldr	r2, [pc, #356]	; (80045c8 <main+0x248>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <main+0x10e>
 8004466:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <main+0x218>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a58      	ldr	r2, [pc, #352]	; (80045cc <main+0x24c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <main+0x10e>
 8004470:	4b49      	ldr	r3, [pc, #292]	; (8004598 <main+0x218>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a56      	ldr	r2, [pc, #344]	; (80045d0 <main+0x250>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <main+0x10e>
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <main+0x218>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a55      	ldr	r2, [pc, #340]	; (80045d4 <main+0x254>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <main+0x10e>
 8004484:	4b44      	ldr	r3, [pc, #272]	; (8004598 <main+0x218>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a53      	ldr	r2, [pc, #332]	; (80045d8 <main+0x258>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <main+0x120>
 800448e:	4b42      	ldr	r3, [pc, #264]	; (8004598 <main+0x218>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <main+0x218>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0208 	bic.w	r2, r2, #8
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e007      	b.n	80044b0 <main+0x130>
 80044a0:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <main+0x218>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b3c      	ldr	r3, [pc, #240]	; (8004598 <main+0x218>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80044b0:	2201      	movs	r2, #1
 80044b2:	2101      	movs	r1, #1
 80044b4:	4849      	ldr	r0, [pc, #292]	; (80045dc <main+0x25c>)
 80044b6:	f005 ff13 	bl	800a2e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80044ba:	2201      	movs	r2, #1
 80044bc:	2102      	movs	r1, #2
 80044be:	4848      	ldr	r0, [pc, #288]	; (80045e0 <main+0x260>)
 80044c0:	f005 ff0e 	bl	800a2e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ca:	4844      	ldr	r0, [pc, #272]	; (80045dc <main+0x25c>)
 80044cc:	f005 ff08 	bl	800a2e0 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80044d0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8004604 <main+0x284>
 80044d4:	4843      	ldr	r0, [pc, #268]	; (80045e4 <main+0x264>)
 80044d6:	f7fd fba3 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 80044da:	2108      	movs	r1, #8
 80044dc:	4841      	ldr	r0, [pc, #260]	; (80045e4 <main+0x264>)
 80044de:	f7fd fe3b 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80044e2:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80045e8 <main+0x268>
 80044e6:	483f      	ldr	r0, [pc, #252]	; (80045e4 <main+0x264>)
 80044e8:	f7fd fe12 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80044ec:	483d      	ldr	r0, [pc, #244]	; (80045e4 <main+0x264>)
 80044ee:	f7fd fb86 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80044f2:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004604 <main+0x284>
 80044f6:	483d      	ldr	r0, [pc, #244]	; (80045ec <main+0x26c>)
 80044f8:	f7fd fb92 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80044fc:	2110      	movs	r1, #16
 80044fe:	483b      	ldr	r0, [pc, #236]	; (80045ec <main+0x26c>)
 8004500:	f7fd fe2a 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8004504:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004508:	4838      	ldr	r0, [pc, #224]	; (80045ec <main+0x26c>)
 800450a:	f7fd fe01 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 800450e:	4837      	ldr	r0, [pc, #220]	; (80045ec <main+0x26c>)
 8004510:	f7fd fb75 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8004514:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004604 <main+0x284>
 8004518:	4835      	ldr	r0, [pc, #212]	; (80045f0 <main+0x270>)
 800451a:	f7fd fb81 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 800451e:	2110      	movs	r1, #16
 8004520:	4833      	ldr	r0, [pc, #204]	; (80045f0 <main+0x270>)
 8004522:	f7fd fe19 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8004526:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800452a:	4831      	ldr	r0, [pc, #196]	; (80045f0 <main+0x270>)
 800452c:	f7fd fdf0 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004530:	482f      	ldr	r0, [pc, #188]	; (80045f0 <main+0x270>)
 8004532:	f7fd fb64 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8004536:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004604 <main+0x284>
 800453a:	482e      	ldr	r0, [pc, #184]	; (80045f4 <main+0x274>)
 800453c:	f7fd fb70 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(16);
 8004540:	2110      	movs	r1, #16
 8004542:	482c      	ldr	r0, [pc, #176]	; (80045f4 <main+0x274>)
 8004544:	f7fd fe08 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004548:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800454c:	4829      	ldr	r0, [pc, #164]	; (80045f4 <main+0x274>)
 800454e:	f7fd fddf 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8004552:	4828      	ldr	r0, [pc, #160]	; (80045f4 <main+0x274>)
 8004554:	f7fd fb53 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004558:	2191      	movs	r1, #145	; 0x91
 800455a:	4827      	ldr	r0, [pc, #156]	; (80045f8 <main+0x278>)
 800455c:	f7fd fa99 	bl	8001a92 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004560:	2139      	movs	r1, #57	; 0x39
 8004562:	4825      	ldr	r0, [pc, #148]	; (80045f8 <main+0x278>)
 8004564:	f7fd fa84 	bl	8001a70 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004568:	4823      	ldr	r0, [pc, #140]	; (80045f8 <main+0x278>)
 800456a:	f7fd f8ad 	bl	80016c8 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 800456e:	4822      	ldr	r0, [pc, #136]	; (80045f8 <main+0x278>)
 8004570:	f7fd faa0 	bl	8001ab4 <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <main+0x27c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f083 0301 	eor.w	r3, r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d041      	beq.n	8004608 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 8004584:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004600 <main+0x280>
 8004588:	4818      	ldr	r0, [pc, #96]	; (80045ec <main+0x26c>)
 800458a:	f7fd fb49 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 800458e:	e7f1      	b.n	8004574 <main+0x1f4>
 8004590:	24000b20 	.word	0x24000b20
 8004594:	24001368 	.word	0x24001368
 8004598:	24001650 	.word	0x24001650
 800459c:	40020010 	.word	0x40020010
 80045a0:	40020028 	.word	0x40020028
 80045a4:	40020040 	.word	0x40020040
 80045a8:	40020058 	.word	0x40020058
 80045ac:	40020070 	.word	0x40020070
 80045b0:	40020088 	.word	0x40020088
 80045b4:	400200a0 	.word	0x400200a0
 80045b8:	400200b8 	.word	0x400200b8
 80045bc:	40020410 	.word	0x40020410
 80045c0:	40020428 	.word	0x40020428
 80045c4:	40020440 	.word	0x40020440
 80045c8:	40020458 	.word	0x40020458
 80045cc:	40020470 	.word	0x40020470
 80045d0:	40020488 	.word	0x40020488
 80045d4:	400204a0 	.word	0x400204a0
 80045d8:	400204b8 	.word	0x400204b8
 80045dc:	58020400 	.word	0x58020400
 80045e0:	58021000 	.word	0x58021000
 80045e4:	240004c4 	.word	0x240004c4
 80045e8:	42280000 	.word	0x42280000
 80045ec:	240004ec 	.word	0x240004ec
 80045f0:	24000514 	.word	0x24000514
 80045f4:	2400053c 	.word	0x2400053c
 80045f8:	24000abc 	.word	0x24000abc
 80045fc:	24000b37 	.word	0x24000b37
 8004600:	44960000 	.word	0x44960000
 8004604:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 8004608:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8004604 <main+0x284>
 800460c:	489e      	ldr	r0, [pc, #632]	; (8004888 <main+0x508>)
 800460e:	f7fd fb07 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 8004612:	20c8      	movs	r0, #200	; 0xc8
 8004614:	f002 fb2e 	bl	8006c74 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 8004618:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 800488c <main+0x50c>
 800461c:	489a      	ldr	r0, [pc, #616]	; (8004888 <main+0x508>)
 800461e:	f7fd faff 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 8004622:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004626:	f002 fb25 	bl	8006c74 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 800462a:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004890 <main+0x510>
 800462e:	4896      	ldr	r0, [pc, #600]	; (8004888 <main+0x508>)
 8004630:	f7fd faf6 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 8004634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004638:	f002 fb1c 	bl	8006c74 <HAL_Delay>
	gripper.GripperOpen();
 800463c:	4895      	ldr	r0, [pc, #596]	; (8004894 <main+0x514>)
 800463e:	f7fd fa4f 	bl	8001ae0 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 8004642:	4b95      	ldr	r3, [pc, #596]	; (8004898 <main+0x518>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004648:	4894      	ldr	r0, [pc, #592]	; (800489c <main+0x51c>)
 800464a:	f7fc f842 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800464e:	4893      	ldr	r0, [pc, #588]	; (800489c <main+0x51c>)
 8004650:	f7fc f86e 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	4b91      	ldr	r3, [pc, #580]	; (80048a0 <main+0x520>)
 800465a:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 800465c:	4b90      	ldr	r3, [pc, #576]	; (80048a0 <main+0x520>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d110      	bne.n	8004686 <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 8004664:	488d      	ldr	r0, [pc, #564]	; (800489c <main+0x51c>)
 8004666:	f7fc f8c9 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800466a:	4603      	mov	r3, r0
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004674:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8004878 <main+0x4f8>
 8004678:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800467c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004680:	4b88      	ldr	r3, [pc, #544]	; (80048a4 <main+0x524>)
 8004682:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 8004686:	4888      	ldr	r0, [pc, #544]	; (80048a8 <main+0x528>)
 8004688:	f7fc f823 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 800468c:	4886      	ldr	r0, [pc, #536]	; (80048a8 <main+0x528>)
 800468e:	f7fc f84f 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	4b85      	ldr	r3, [pc, #532]	; (80048ac <main+0x52c>)
 8004698:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 800469a:	4b84      	ldr	r3, [pc, #528]	; (80048ac <main+0x52c>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d115      	bne.n	80046ce <main+0x34e>
		encoderJ2.unwarp();
 80046a2:	4881      	ldr	r0, [pc, #516]	; (80048a8 <main+0x528>)
 80046a4:	f7fc f8cc 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 80046a8:	487f      	ldr	r0, [pc, #508]	; (80048a8 <main+0x528>)
 80046aa:	f7fc f91b 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 80046ae:	487e      	ldr	r0, [pc, #504]	; (80048a8 <main+0x528>)
 80046b0:	f7fc f925 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 80046b4:	ee07 0a90 	vmov	s15, r0
 80046b8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80046bc:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8004878 <main+0x4f8>
 80046c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046c8:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <main+0x530>)
 80046ca:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 80046ce:	4879      	ldr	r0, [pc, #484]	; (80048b4 <main+0x534>)
 80046d0:	f7fb ffff 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80046d4:	4877      	ldr	r0, [pc, #476]	; (80048b4 <main+0x534>)
 80046d6:	f7fc f82b 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <main+0x538>)
 80046e0:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 80046e2:	4b75      	ldr	r3, [pc, #468]	; (80048b8 <main+0x538>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d110      	bne.n	800470c <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80046ea:	4872      	ldr	r0, [pc, #456]	; (80048b4 <main+0x534>)
 80046ec:	f7fc f886 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80046f0:	4603      	mov	r3, r0
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80046fa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8004878 <main+0x4f8>
 80046fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004702:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004706:	4b6d      	ldr	r3, [pc, #436]	; (80048bc <main+0x53c>)
 8004708:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 800470c:	486c      	ldr	r0, [pc, #432]	; (80048c0 <main+0x540>)
 800470e:	f7fb ffe0 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8004712:	486b      	ldr	r0, [pc, #428]	; (80048c0 <main+0x540>)
 8004714:	f7fc f80c 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	4b69      	ldr	r3, [pc, #420]	; (80048c4 <main+0x544>)
 800471e:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8004720:	4b68      	ldr	r3, [pc, #416]	; (80048c4 <main+0x544>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d110      	bne.n	800474a <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8004728:	4865      	ldr	r0, [pc, #404]	; (80048c0 <main+0x540>)
 800472a:	f7fc f867 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 800472e:	4603      	mov	r3, r0
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004738:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8004880 <main+0x500>
 800473c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004740:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004744:	4b60      	ldr	r3, [pc, #384]	; (80048c8 <main+0x548>)
 8004746:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 800474a:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <main+0x524>)
 800474c:	4a5f      	ldr	r2, [pc, #380]	; (80048cc <main+0x54c>)
 800474e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 8004752:	4b54      	ldr	r3, [pc, #336]	; (80048a4 <main+0x524>)
 8004754:	4a5e      	ldr	r2, [pc, #376]	; (80048d0 <main+0x550>)
 8004756:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 800475a:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <main+0x524>)
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <main+0x554>)
 800475e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 8004762:	4b50      	ldr	r3, [pc, #320]	; (80048a4 <main+0x524>)
 8004764:	4a5c      	ldr	r2, [pc, #368]	; (80048d8 <main+0x558>)
 8004766:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 800476a:	4b54      	ldr	r3, [pc, #336]	; (80048bc <main+0x53c>)
 800476c:	4a57      	ldr	r2, [pc, #348]	; (80048cc <main+0x54c>)
 800476e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 8004772:	4b52      	ldr	r3, [pc, #328]	; (80048bc <main+0x53c>)
 8004774:	4a56      	ldr	r2, [pc, #344]	; (80048d0 <main+0x550>)
 8004776:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 800477a:	4b50      	ldr	r3, [pc, #320]	; (80048bc <main+0x53c>)
 800477c:	4a55      	ldr	r2, [pc, #340]	; (80048d4 <main+0x554>)
 800477e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 8004782:	4b4e      	ldr	r3, [pc, #312]	; (80048bc <main+0x53c>)
 8004784:	4a54      	ldr	r2, [pc, #336]	; (80048d8 <main+0x558>)
 8004786:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 800478a:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <main+0x524>)
 800478c:	4a53      	ldr	r2, [pc, #332]	; (80048dc <main+0x55c>)
 800478e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 8004792:	4b44      	ldr	r3, [pc, #272]	; (80048a4 <main+0x524>)
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <main+0x560>)
 8004796:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 800479a:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <main+0x530>)
 800479c:	4a4f      	ldr	r2, [pc, #316]	; (80048dc <main+0x55c>)
 800479e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 80047a2:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <main+0x530>)
 80047a4:	4a4f      	ldr	r2, [pc, #316]	; (80048e4 <main+0x564>)
 80047a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 80047aa:	4b44      	ldr	r3, [pc, #272]	; (80048bc <main+0x53c>)
 80047ac:	4a4b      	ldr	r2, [pc, #300]	; (80048dc <main+0x55c>)
 80047ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 80047b2:	4b42      	ldr	r3, [pc, #264]	; (80048bc <main+0x53c>)
 80047b4:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <main+0x560>)
 80047b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 80047ba:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <main+0x524>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <main+0x524>)
 80047c0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <main+0x524>)
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 80047ce:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <main+0x524>)
 80047d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <main+0x524>)
 80047d6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <main+0x524>)
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 80047e4:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <main+0x524>)
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <main+0x524>)
 80047ea:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <main+0x530>)
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <main+0x530>)
 80047f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <main+0x530>)
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <main+0x530>)
 8004802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <main+0x530>)
 8004808:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <main+0x530>)
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <main+0x530>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <main+0x530>)
 800481c:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <main+0x53c>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a26      	ldr	r2, [pc, #152]	; (80048bc <main+0x53c>)
 8004824:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004828:	4b24      	ldr	r3, [pc, #144]	; (80048bc <main+0x53c>)
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 8004832:	4b22      	ldr	r3, [pc, #136]	; (80048bc <main+0x53c>)
 8004834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <main+0x53c>)
 800483a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 800483e:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <main+0x53c>)
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004848:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <main+0x53c>)
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <main+0x53c>)
 800484e:	6493      	str	r3, [r2, #72]	; 0x48

#endif

		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
 8004850:	4825      	ldr	r0, [pc, #148]	; (80048e8 <main+0x568>)
 8004852:	f008 fd0f 	bl	800d274 <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 8004856:	4825      	ldr	r0, [pc, #148]	; (80048ec <main+0x56c>)
 8004858:	f7fc f89d 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 800485c:	4823      	ldr	r0, [pc, #140]	; (80048ec <main+0x56c>)
 800485e:	f7fc f882 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 8004862:	4822      	ldr	r0, [pc, #136]	; (80048ec <main+0x56c>)
 8004864:	f7fc f897 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004868:	4821      	ldr	r0, [pc, #132]	; (80048f0 <main+0x570>)
 800486a:	f008 fd03 	bl	800d274 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 800486e:	4821      	ldr	r0, [pc, #132]	; (80048f4 <main+0x574>)
 8004870:	f008 fd00 	bl	800d274 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004874:	e7fe      	b.n	8004874 <main+0x4f4>
 8004876:	bf00      	nop
 8004878:	645a1cac 	.word	0x645a1cac
 800487c:	4004df3b 	.word	0x4004df3b
 8004880:	645a1cac 	.word	0x645a1cac
 8004884:	c004df3b 	.word	0xc004df3b
 8004888:	240004ec 	.word	0x240004ec
 800488c:	c4480000 	.word	0xc4480000
 8004890:	00000000 	.word	0x00000000
 8004894:	24000abc 	.word	0x24000abc
 8004898:	24000b37 	.word	0x24000b37
 800489c:	24000454 	.word	0x24000454
 80048a0:	24000ad8 	.word	0x24000ad8
 80048a4:	24000564 	.word	0x24000564
 80048a8:	24000470 	.word	0x24000470
 80048ac:	24000ad9 	.word	0x24000ad9
 80048b0:	24000648 	.word	0x24000648
 80048b4:	2400048c 	.word	0x2400048c
 80048b8:	24000ada 	.word	0x24000ada
 80048bc:	2400072c 	.word	0x2400072c
 80048c0:	240004a8 	.word	0x240004a8
 80048c4:	24000adb 	.word	0x24000adb
 80048c8:	24000810 	.word	0x24000810
 80048cc:	331ac86b 	.word	0x331ac86b
 80048d0:	33e9d3b8 	.word	0x33e9d3b8
 80048d4:	33e9d3bd 	.word	0x33e9d3bd
 80048d8:	3531278c 	.word	0x3531278c
 80048dc:	3a83126f 	.word	0x3a83126f
 80048e0:	358637bd 	.word	0x358637bd
 80048e4:	37fba882 	.word	0x37fba882
 80048e8:	24000ec0 	.word	0x24000ec0
 80048ec:	24000adc 	.word	0x24000adc
 80048f0:	24001120 	.word	0x24001120
 80048f4:	2400116c 	.word	0x2400116c

080048f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b09c      	sub	sp, #112	; 0x70
 80048fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004902:	224c      	movs	r2, #76	; 0x4c
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f00d fd7e 	bl	8012408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	2220      	movs	r2, #32
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f00d fd78 	bl	8012408 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004918:	2002      	movs	r0, #2
 800491a:	f005 fd15 	bl	800a348 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800491e:	2300      	movs	r3, #0
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4b38      	ldr	r3, [pc, #224]	; (8004a04 <_Z18SystemClock_Configv+0x10c>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <_Z18SystemClock_Configv+0x10c>)
 8004928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492c:	6193      	str	r3, [r2, #24]
 800492e:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <_Z18SystemClock_Configv+0x10c>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4b33      	ldr	r3, [pc, #204]	; (8004a08 <_Z18SystemClock_Configv+0x110>)
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4a32      	ldr	r2, [pc, #200]	; (8004a08 <_Z18SystemClock_Configv+0x110>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004944:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <_Z18SystemClock_Configv+0x110>)
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004950:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <_Z18SystemClock_Configv+0x10c>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d000      	beq.n	800496a <_Z18SystemClock_Configv+0x72>
 8004968:	e7f2      	b.n	8004950 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800496a:	2302      	movs	r3, #2
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800496e:	2301      	movs	r3, #1
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004972:	2340      	movs	r3, #64	; 0x40
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004976:	2302      	movs	r3, #2
 8004978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800497a:	2300      	movs	r3, #0
 800497c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800497e:	2304      	movs	r3, #4
 8004980:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004982:	233c      	movs	r3, #60	; 0x3c
 8004984:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004986:	2302      	movs	r3, #2
 8004988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 800498a:	2360      	movs	r3, #96	; 0x60
 800498c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800498e:	2302      	movs	r3, #2
 8004990:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004992:	230c      	movs	r3, #12
 8004994:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004996:	2300      	movs	r3, #0
 8004998:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800499e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f005 fd0a 	bl	800a3bc <HAL_RCC_OscConfig>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80049b8:	f000 f856 	bl	8004a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049bc:	233f      	movs	r3, #63	; 0x3f
 80049be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049c0:	2303      	movs	r3, #3
 80049c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80049c8:	2308      	movs	r3, #8
 80049ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80049cc:	2340      	movs	r3, #64	; 0x40
 80049ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80049d0:	2340      	movs	r3, #64	; 0x40
 80049d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80049d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80049da:	2340      	movs	r3, #64	; 0x40
 80049dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	2104      	movs	r1, #4
 80049e2:	4618      	mov	r0, r3
 80049e4:	f006 f918 	bl	800ac18 <HAL_RCC_ClockConfig>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf14      	ite	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	2300      	moveq	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80049f8:	f000 f836 	bl	8004a68 <Error_Handler>
  }
}
 80049fc:	bf00      	nop
 80049fe:	3770      	adds	r7, #112	; 0x70
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	58024800 	.word	0x58024800
 8004a08:	58000400 	.word	0x58000400

08004a0c <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1c:	d102      	bne.n	8004a24 <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2a:	d102      	bne.n	8004a32 <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_GPIO_EXTI_Callback+0x50>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d102      	bne.n	8004a3e <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004a38:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_GPIO_EXTI_Callback+0x54>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d102      	bne.n	8004a4a <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <HAL_GPIO_EXTI_Callback+0x58>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
	}

}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	24000b36 	.word	0x24000b36
 8004a5c:	24000b37 	.word	0x24000b37
 8004a60:	24000b38 	.word	0x24000b38
 8004a64:	24000b39 	.word	0x24000b39

08004a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4808      	ldr	r0, [pc, #32]	; (8004a94 <Error_Handler+0x2c>)
 8004a72:	f005 fc35 	bl	800a2e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4807      	ldr	r0, [pc, #28]	; (8004a98 <Error_Handler+0x30>)
 8004a7c:	f005 fc30 	bl	800a2e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004a80:	2201      	movs	r2, #1
 8004a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a86:	4803      	ldr	r0, [pc, #12]	; (8004a94 <Error_Handler+0x2c>)
 8004a88:	f005 fc2a 	bl	800a2e0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a8c:	b672      	cpsid	i
}
 8004a8e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004a90:	e7fe      	b.n	8004a90 <Error_Handler+0x28>
 8004a92:	bf00      	nop
 8004a94:	58020400 	.word	0x58020400
 8004a98:	58021000 	.word	0x58021000

08004a9c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d158      	bne.n	8004b5e <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d153      	bne.n	8004b5e <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 8004ab6:	22d4      	movs	r2, #212	; 0xd4
 8004ab8:	4947      	ldr	r1, [pc, #284]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004aba:	4848      	ldr	r0, [pc, #288]	; (8004bdc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004abc:	f7fb fdea 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8004ac0:	22b4      	movs	r2, #180	; 0xb4
 8004ac2:	4945      	ldr	r1, [pc, #276]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ac4:	4846      	ldr	r0, [pc, #280]	; (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004ac6:	f7fb fde5 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8004aca:	22c4      	movs	r2, #196	; 0xc4
 8004acc:	4942      	ldr	r1, [pc, #264]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ace:	4845      	ldr	r0, [pc, #276]	; (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004ad0:	f7fb fde0 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8004ad4:	22a4      	movs	r2, #164	; 0xa4
 8004ad6:	4940      	ldr	r1, [pc, #256]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004ad8:	4843      	ldr	r0, [pc, #268]	; (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004ada:	f7fb fddb 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004ade:	2320      	movs	r3, #32
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4b42      	ldr	r3, [pc, #264]	; (8004bec <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	4942      	ldr	r1, [pc, #264]	; (8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004ae8:	4842      	ldr	r0, [pc, #264]	; (8004bf4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004aea:	f7fd f83b 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004af6:	2204      	movs	r2, #4
 8004af8:	4940      	ldr	r1, [pc, #256]	; (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004afa:	4841      	ldr	r0, [pc, #260]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004afc:	f7fd f832 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	4b3c      	ldr	r3, [pc, #240]	; (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004b08:	2204      	movs	r2, #4
 8004b0a:	493e      	ldr	r1, [pc, #248]	; (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004b0c:	483e      	ldr	r0, [pc, #248]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004b0e:	f7fd f829 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4b34      	ldr	r3, [pc, #208]	; (8004bec <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	493b      	ldr	r1, [pc, #236]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004b1e:	483c      	ldr	r0, [pc, #240]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004b20:	f7fd f820 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004b24:	483b      	ldr	r0, [pc, #236]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004b26:	f7fb ffa9 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004b2a:	483b      	ldr	r0, [pc, #236]	; (8004c18 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004b2c:	f7fb ffa6 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004b30:	483a      	ldr	r0, [pc, #232]	; (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004b32:	f7fb ffa3 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004b36:	483a      	ldr	r0, [pc, #232]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004b38:	f7fb ffa0 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004b3c:	4839      	ldr	r0, [pc, #228]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004b3e:	f7fb ff9d 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004b42:	4839      	ldr	r0, [pc, #228]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004b44:	f7fb ff9a 	bl	8000a7c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004b48:	2208      	movs	r2, #8
 8004b4a:	4938      	ldr	r1, [pc, #224]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004b4c:	4838      	ldr	r0, [pc, #224]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004b4e:	f7fc fd80 	bl	8001652 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004b52:	2304      	movs	r3, #4
 8004b54:	2200      	movs	r2, #0
 8004b56:	4937      	ldr	r1, [pc, #220]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004b58:	4837      	ldr	r0, [pc, #220]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004b5a:	f7fb fedc 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d134      	bne.n	8004bce <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d12f      	bne.n	8004bce <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004b6e:	4832      	ldr	r0, [pc, #200]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004b70:	f7fb feee 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004b74:	482e      	ldr	r0, [pc, #184]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004b76:	f7fc fd9c 	bl	80016b2 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004b7a:	482b      	ldr	r0, [pc, #172]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004b7c:	f7fb ffec 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004b80:	4828      	ldr	r0, [pc, #160]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004b82:	f7fb ffe9 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004b86:	4826      	ldr	r0, [pc, #152]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004b88:	f7fb ffe6 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004b8c:	4823      	ldr	r0, [pc, #140]	; (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004b8e:	f7fb ffe3 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004b92:	4821      	ldr	r0, [pc, #132]	; (8004c18 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004b94:	f7fb ffe0 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004b98:	481e      	ldr	r0, [pc, #120]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004b9a:	f7fb ffdd 	bl	8000b58 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004b9e:	481c      	ldr	r0, [pc, #112]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004ba0:	f7fd f822 	bl	8001be8 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004ba4:	4818      	ldr	r0, [pc, #96]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004ba6:	f7fd f81f 	bl	8001be8 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004baa:	4815      	ldr	r0, [pc, #84]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004bac:	f7fd f81c 	bl	8001be8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004bb0:	4810      	ldr	r0, [pc, #64]	; (8004bf4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004bb2:	f7fd f819 	bl	8001be8 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004bb6:	480c      	ldr	r0, [pc, #48]	; (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004bb8:	f7fb fd80 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004bbc:	4809      	ldr	r0, [pc, #36]	; (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004bbe:	f7fb fd7d 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004bc2:	4807      	ldr	r0, [pc, #28]	; (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004bc4:	f7fb fd7a 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004bc8:	4804      	ldr	r0, [pc, #16]	; (8004bdc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004bca:	f7fb fd77 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	240011b8 	.word	0x240011b8
 8004bdc:	24000454 	.word	0x24000454
 8004be0:	24000470 	.word	0x24000470
 8004be4:	2400048c 	.word	0x2400048c
 8004be8:	240004a8 	.word	0x240004a8
 8004bec:	58020400 	.word	0x58020400
 8004bf0:	24000e28 	.word	0x24000e28
 8004bf4:	240004c4 	.word	0x240004c4
 8004bf8:	58021000 	.word	0x58021000
 8004bfc:	24000d90 	.word	0x24000d90
 8004c00:	240004ec 	.word	0x240004ec
 8004c04:	240010d4 	.word	0x240010d4
 8004c08:	24000514 	.word	0x24000514
 8004c0c:	24000ddc 	.word	0x24000ddc
 8004c10:	2400053c 	.word	0x2400053c
 8004c14:	24000564 	.word	0x24000564
 8004c18:	24000648 	.word	0x24000648
 8004c1c:	2400072c 	.word	0x2400072c
 8004c20:	24000810 	.word	0x24000810
 8004c24:	240008f4 	.word	0x240008f4
 8004c28:	240009d8 	.word	0x240009d8
 8004c2c:	24000e74 	.word	0x24000e74
 8004c30:	24000abc 	.word	0x24000abc
 8004c34:	24000fa4 	.word	0x24000fa4
 8004c38:	24000adc 	.word	0x24000adc

08004c3c <_GLOBAL__sub_I_TIM_MS>:
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c44:	2001      	movs	r0, #1
 8004c46:	f7ff ff29 	bl	8004a9c <_Z41__static_initialization_and_destruction_0ii>
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <_GLOBAL__sub_D_TIM_MS>:
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7ff ff21 	bl	8004a9c <_Z41__static_initialization_and_destruction_0ii>
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004c60:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c62:	4a29      	ldr	r2, [pc, #164]	; (8004d08 <MX_SPI3_Init+0xac>)
 8004c64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004c66:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004c6e:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c76:	2207      	movs	r2, #7
 8004c78:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c7a:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c86:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004c88:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c8e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c9e:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004caa:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004cb0:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004cee:	4805      	ldr	r0, [pc, #20]	; (8004d04 <MX_SPI3_Init+0xa8>)
 8004cf0:	f007 fe86 	bl	800ca00 <HAL_SPI_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004cfa:	f7ff feb5 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24000c14 	.word	0x24000c14
 8004d08:	40003c00 	.word	0x40003c00

08004d0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b0b8      	sub	sp, #224	; 0xe0
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	60da      	str	r2, [r3, #12]
 8004d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d24:	f107 0310 	add.w	r3, r7, #16
 8004d28:	22bc      	movs	r2, #188	; 0xbc
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f00d fb6b 	bl	8012408 <memset>
  if(spiHandle->Instance==SPI3)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a56      	ldr	r2, [pc, #344]	; (8004e90 <HAL_SPI_MspInit+0x184>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	f040 80a5 	bne.w	8004e88 <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f006 faef 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8004d58:	f7ff fe86 	bl	8004a68 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004d5c:	4b4d      	ldr	r3, [pc, #308]	; (8004e94 <HAL_SPI_MspInit+0x188>)
 8004d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d62:	4a4c      	ldr	r2, [pc, #304]	; (8004e94 <HAL_SPI_MspInit+0x188>)
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d6c:	4b49      	ldr	r3, [pc, #292]	; (8004e94 <HAL_SPI_MspInit+0x188>)
 8004d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d7a:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_SPI_MspInit+0x188>)
 8004d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d80:	4a44      	ldr	r2, [pc, #272]	; (8004e94 <HAL_SPI_MspInit+0x188>)
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d8a:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <HAL_SPI_MspInit+0x188>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004d98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004db2:	2306      	movs	r3, #6
 8004db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4836      	ldr	r0, [pc, #216]	; (8004e98 <HAL_SPI_MspInit+0x18c>)
 8004dc0:	f005 f8de 	bl	8009f80 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8004dc4:	4b35      	ldr	r3, [pc, #212]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dc6:	4a36      	ldr	r2, [pc, #216]	; (8004ea0 <HAL_SPI_MspInit+0x194>)
 8004dc8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004dca:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dcc:	223e      	movs	r2, #62	; 0x3e
 8004dce:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004dd0:	4b32      	ldr	r3, [pc, #200]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dd2:	2240      	movs	r2, #64	; 0x40
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd6:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004de2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dea:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004df0:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004df6:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004e02:	4826      	ldr	r0, [pc, #152]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004e04:	f002 fa80 	bl	8007308 <HAL_DMA_Init>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004e0e:	f7ff fe2b 	bl	8004a68 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004e16:	679a      	str	r2, [r3, #120]	; 0x78
 8004e18:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <HAL_SPI_MspInit+0x190>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e20:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <HAL_SPI_MspInit+0x19c>)
 8004e22:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004e24:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e26:	223d      	movs	r2, #61	; 0x3d
 8004e28:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e36:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e3c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e44:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004e4a:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004e5c:	4811      	ldr	r0, [pc, #68]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e5e:	f002 fa53 	bl	8007308 <HAL_DMA_Init>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8004e68:	f7ff fdfe 	bl	8004a68 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e70:	67da      	str	r2, [r3, #124]	; 0x7c
 8004e72:	4a0c      	ldr	r2, [pc, #48]	; (8004ea4 <HAL_SPI_MspInit+0x198>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2033      	movs	r0, #51	; 0x33
 8004e7e:	f002 f804 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004e82:	2033      	movs	r0, #51	; 0x33
 8004e84:	f002 f81b 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004e88:	bf00      	nop
 8004e8a:	37e0      	adds	r7, #224	; 0xe0
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40003c00 	.word	0x40003c00
 8004e94:	58024400 	.word	0x58024400
 8004e98:	58020800 	.word	0x58020800
 8004e9c:	24000c9c 	.word	0x24000c9c
 8004ea0:	400200b8 	.word	0x400200b8
 8004ea4:	24000d14 	.word	0x24000d14
 8004ea8:	40020410 	.word	0x40020410

08004eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_MspInit+0x30>)
 8004eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <HAL_MspInit+0x30>)
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_MspInit+0x30>)
 8004ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	58024400 	.word	0x58024400

08004ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ee4:	e7fe      	b.n	8004ee4 <NMI_Handler+0x4>

08004ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eea:	e7fe      	b.n	8004eea <HardFault_Handler+0x4>

08004eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ef0:	e7fe      	b.n	8004ef0 <MemManage_Handler+0x4>

08004ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ef6:	e7fe      	b.n	8004ef6 <BusFault_Handler+0x4>

08004ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004efc:	e7fe      	b.n	8004efc <UsageFault_Handler+0x4>

08004efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f2c:	f001 fe82 	bl	8006c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004f30:	f001 ffdf 	bl	8006ef2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004f34:	bf00      	nop
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <DMA1_Stream0_IRQHandler+0x10>)
 8004f3e:	f003 fd0d 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	240014e8 	.word	0x240014e8

08004f4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004f50:	4802      	ldr	r0, [pc, #8]	; (8004f5c <DMA1_Stream1_IRQHandler+0x10>)
 8004f52:	f003 fd03 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004f56:	bf00      	nop
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	24001650 	.word	0x24001650

08004f60 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004f64:	4802      	ldr	r0, [pc, #8]	; (8004f70 <DMA1_Stream2_IRQHandler+0x10>)
 8004f66:	f003 fcf9 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	240016c8 	.word	0x240016c8

08004f74 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004f78:	4802      	ldr	r0, [pc, #8]	; (8004f84 <DMA1_Stream3_IRQHandler+0x10>)
 8004f7a:	f003 fcef 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	240013f8 	.word	0x240013f8

08004f88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004f8c:	4802      	ldr	r0, [pc, #8]	; (8004f98 <DMA1_Stream4_IRQHandler+0x10>)
 8004f8e:	f003 fce5 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	24001470 	.word	0x24001470

08004f9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004fa0:	4802      	ldr	r0, [pc, #8]	; (8004fac <DMA1_Stream5_IRQHandler+0x10>)
 8004fa2:	f003 fcdb 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	24001560 	.word	0x24001560

08004fb0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004fb4:	4802      	ldr	r0, [pc, #8]	; (8004fc0 <DMA1_Stream6_IRQHandler+0x10>)
 8004fb6:	f003 fcd1 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	240015d8 	.word	0x240015d8

08004fc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004fc8:	2040      	movs	r0, #64	; 0x40
 8004fca:	f005 f9a2 	bl	800a312 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8004fce:	2080      	movs	r0, #128	; 0x80
 8004fd0:	f005 f99f 	bl	800a312 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fd4:	bf00      	nop
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004fdc:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <USART2_IRQHandler+0x10>)
 8004fde:	f009 ff91 	bl	800ef04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	240012d8 	.word	0x240012d8

08004fec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ff0:	4802      	ldr	r0, [pc, #8]	; (8004ffc <USART3_IRQHandler+0x10>)
 8004ff2:	f009 ff87 	bl	800ef04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	24001368 	.word	0x24001368

08005000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8005004:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005008:	f005 f983 	bl	800a312 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 800500c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005010:	f005 f97f 	bl	800a312 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8005014:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005018:	f005 f97b 	bl	800a312 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 800501c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005020:	f005 f977 	bl	800a312 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}

08005028 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800502e:	f008 fc6b 	bl	800d908 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8005032:	4803      	ldr	r0, [pc, #12]	; (8005040 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005034:	f008 fc68 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005038:	bf00      	nop
 800503a:	bd80      	pop	{r7, pc}
 800503c:	24000fa4 	.word	0x24000fa4
 8005040:	24000ff0 	.word	0x24000ff0

08005044 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005048:	4803      	ldr	r0, [pc, #12]	; (8005058 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800504a:	f008 fc5d 	bl	800d908 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800504e:	4803      	ldr	r0, [pc, #12]	; (800505c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005050:	f008 fc5a 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}
 8005058:	24000fa4 	.word	0x24000fa4
 800505c:	2400103c 	.word	0x2400103c

08005060 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005064:	4803      	ldr	r0, [pc, #12]	; (8005074 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8005066:	f008 fc4f 	bl	800d908 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800506a:	4803      	ldr	r0, [pc, #12]	; (8005078 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800506c:	f008 fc4c 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005070:	bf00      	nop
 8005072:	bd80      	pop	{r7, pc}
 8005074:	24000fa4 	.word	0x24000fa4
 8005078:	24001088 	.word	0x24001088

0800507c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005080:	4802      	ldr	r0, [pc, #8]	; (800508c <TIM8_CC_IRQHandler+0x10>)
 8005082:	f008 fc41 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	24000fa4 	.word	0x24000fa4

08005090 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <DMA1_Stream7_IRQHandler+0x10>)
 8005096:	f003 fc61 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	24000c9c 	.word	0x24000c9c

080050a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <TIM5_IRQHandler+0x10>)
 80050aa:	f008 fc2d 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	24000ec0 	.word	0x24000ec0

080050b8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80050bc:	4802      	ldr	r0, [pc, #8]	; (80050c8 <SPI3_IRQHandler+0x10>)
 80050be:	f007 fda5 	bl	800cc0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	24000c14 	.word	0x24000c14

080050cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <UART4_IRQHandler+0x10>)
 80050d2:	f009 ff17 	bl	800ef04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	240011b8 	.word	0x240011b8

080050e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050e4:	4802      	ldr	r0, [pc, #8]	; (80050f0 <TIM6_DAC_IRQHandler+0x10>)
 80050e6:	f008 fc0f 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	24000f0c 	.word	0x24000f0c

080050f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <TIM7_IRQHandler+0x10>)
 80050fa:	f008 fc05 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	24000f58 	.word	0x24000f58

08005108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <DMA2_Stream0_IRQHandler+0x10>)
 800510e:	f003 fc25 	bl	800895c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	24000d14 	.word	0x24000d14

0800511c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <UART7_IRQHandler+0x10>)
 8005122:	f009 feef 	bl	800ef04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	24001248 	.word	0x24001248

08005130 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <TIM16_IRQHandler+0x10>)
 8005136:	f008 fbe7 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	24001120 	.word	0x24001120

08005144 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <TIM17_IRQHandler+0x10>)
 800514a:	f008 fbdd 	bl	800d908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2400116c 	.word	0x2400116c

08005158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
	return 1;
 800515c:	2301      	movs	r3, #1
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <_kill>:

int _kill(int pid, int sig)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005172:	f00d f91f 	bl	80123b4 <__errno>
 8005176:	4603      	mov	r3, r0
 8005178:	2216      	movs	r2, #22
 800517a:	601a      	str	r2, [r3, #0]
	return -1;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <_exit>:

void _exit (int status)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ffe7 	bl	8005168 <_kill>
	while (1) {}		/* Make sure we hang here */
 800519a:	e7fe      	b.n	800519a <_exit+0x12>

0800519c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e00a      	b.n	80051c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051ae:	f3af 8000 	nop.w
 80051b2:	4601      	mov	r1, r0
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	60ba      	str	r2, [r7, #8]
 80051ba:	b2ca      	uxtb	r2, r1
 80051bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	3301      	adds	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	dbf0      	blt.n	80051ae <_read+0x12>
	}

return len;
 80051cc:	687b      	ldr	r3, [r7, #4]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e009      	b.n	80051fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	60ba      	str	r2, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	dbf1      	blt.n	80051e8 <_write+0x12>
	}
	return len;
 8005204:	687b      	ldr	r3, [r7, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_close>:

int _close(int file)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
	return -1;
 8005216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005236:	605a      	str	r2, [r3, #4]
	return 0;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <_isatty>:

int _isatty(int file)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	return 1;
 800524e:	2301      	movs	r3, #1
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
	return 0;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <_sbrk+0x5c>)
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <_sbrk+0x60>)
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <_sbrk+0x64>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <_sbrk+0x64>)
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <_sbrk+0x68>)
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <_sbrk+0x64>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4413      	add	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d207      	bcs.n	80052b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052a8:	f00d f884 	bl	80123b4 <__errno>
 80052ac:	4603      	mov	r3, r0
 80052ae:	220c      	movs	r2, #12
 80052b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b6:	e009      	b.n	80052cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <_sbrk+0x64>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	4a05      	ldr	r2, [pc, #20]	; (80052dc <_sbrk+0x64>)
 80052c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	24001d58 	.word	0x24001d58
 80052d8:	00000400 	.word	0x00000400
 80052dc:	24000d8c 	.word	0x24000d8c
 80052e0:	24001758 	.word	0x24001758

080052e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052e8:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <SystemInit+0xec>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	4a38      	ldr	r2, [pc, #224]	; (80053d0 <SystemInit+0xec>)
 80052f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80052f8:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <SystemInit+0xf0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2b06      	cmp	r3, #6
 8005302:	d807      	bhi.n	8005314 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005304:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <SystemInit+0xf0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f023 030f 	bic.w	r3, r3, #15
 800530c:	4a31      	ldr	r2, [pc, #196]	; (80053d4 <SystemInit+0xf0>)
 800530e:	f043 0307 	orr.w	r3, r3, #7
 8005312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005314:	4b30      	ldr	r3, [pc, #192]	; (80053d8 <SystemInit+0xf4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a2f      	ldr	r2, [pc, #188]	; (80053d8 <SystemInit+0xf4>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005320:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <SystemInit+0xf4>)
 8005322:	2200      	movs	r2, #0
 8005324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005326:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <SystemInit+0xf4>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	492b      	ldr	r1, [pc, #172]	; (80053d8 <SystemInit+0xf4>)
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <SystemInit+0xf8>)
 800532e:	4013      	ands	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005332:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <SystemInit+0xf0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800533e:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <SystemInit+0xf0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	4a23      	ldr	r2, [pc, #140]	; (80053d4 <SystemInit+0xf0>)
 8005348:	f043 0307 	orr.w	r3, r3, #7
 800534c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800534e:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <SystemInit+0xf4>)
 8005350:	2200      	movs	r2, #0
 8005352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005354:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <SystemInit+0xf4>)
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800535a:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <SystemInit+0xf4>)
 800535c:	2200      	movs	r2, #0
 800535e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <SystemInit+0xf4>)
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <SystemInit+0xfc>)
 8005364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <SystemInit+0xf4>)
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <SystemInit+0x100>)
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <SystemInit+0xf4>)
 800536e:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <SystemInit+0x104>)
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005372:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <SystemInit+0xf4>)
 8005374:	2200      	movs	r2, #0
 8005376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <SystemInit+0xf4>)
 800537a:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <SystemInit+0x104>)
 800537c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800537e:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <SystemInit+0xf4>)
 8005380:	2200      	movs	r2, #0
 8005382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <SystemInit+0xf4>)
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <SystemInit+0x104>)
 8005388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <SystemInit+0xf4>)
 800538c:	2200      	movs	r2, #0
 800538e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <SystemInit+0xf4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <SystemInit+0xf4>)
 8005396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <SystemInit+0xf4>)
 800539e:	2200      	movs	r2, #0
 80053a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <SystemInit+0x108>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <SystemInit+0x10c>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ae:	d202      	bcs.n	80053b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <SystemInit+0x110>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <SystemInit+0x114>)
 80053b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80053bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <SystemInit+0xec>)
 80053c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80053c6:	bf00      	nop
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	e000ed00 	.word	0xe000ed00
 80053d4:	52002000 	.word	0x52002000
 80053d8:	58024400 	.word	0x58024400
 80053dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80053e0:	02020200 	.word	0x02020200
 80053e4:	01ff0000 	.word	0x01ff0000
 80053e8:	01010280 	.word	0x01010280
 80053ec:	5c001000 	.word	0x5c001000
 80053f0:	ffff0000 	.word	0xffff0000
 80053f4:	51008108 	.word	0x51008108
 80053f8:	52004000 	.word	0x52004000

080053fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b09a      	sub	sp, #104	; 0x68
 8005400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005402:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	605a      	str	r2, [r3, #4]
 800541a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800541c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
 800542c:	615a      	str	r2, [r3, #20]
 800542e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	222c      	movs	r2, #44	; 0x2c
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f00c ffe6 	bl	8012408 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800543c:	4b44      	ldr	r3, [pc, #272]	; (8005550 <MX_TIM1_Init+0x154>)
 800543e:	4a45      	ldr	r2, [pc, #276]	; (8005554 <MX_TIM1_Init+0x158>)
 8005440:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005442:	4b43      	ldr	r3, [pc, #268]	; (8005550 <MX_TIM1_Init+0x154>)
 8005444:	22c7      	movs	r2, #199	; 0xc7
 8005446:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005448:	4b41      	ldr	r3, [pc, #260]	; (8005550 <MX_TIM1_Init+0x154>)
 800544a:	2200      	movs	r2, #0
 800544c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <MX_TIM1_Init+0x154>)
 8005450:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005454:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <MX_TIM1_Init+0x154>)
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800545c:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <MX_TIM1_Init+0x154>)
 800545e:	2200      	movs	r2, #0
 8005460:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005462:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <MX_TIM1_Init+0x154>)
 8005464:	2280      	movs	r2, #128	; 0x80
 8005466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005468:	4839      	ldr	r0, [pc, #228]	; (8005550 <MX_TIM1_Init+0x154>)
 800546a:	f007 feac 	bl	800d1c6 <HAL_TIM_Base_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005474:	f7ff faf8 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800547c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800547e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005482:	4619      	mov	r1, r3
 8005484:	4832      	ldr	r0, [pc, #200]	; (8005550 <MX_TIM1_Init+0x154>)
 8005486:	f008 fc73 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005490:	f7ff faea 	bl	8004a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005494:	482e      	ldr	r0, [pc, #184]	; (8005550 <MX_TIM1_Init+0x154>)
 8005496:	f007 ff94 	bl	800d3c2 <HAL_TIM_PWM_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80054a0:	f7ff fae2 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054a4:	2300      	movs	r3, #0
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80054a8:	2300      	movs	r3, #0
 80054aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054b4:	4619      	mov	r1, r3
 80054b6:	4826      	ldr	r0, [pc, #152]	; (8005550 <MX_TIM1_Init+0x154>)
 80054b8:	f009 f9ae 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80054c2:	f7ff fad1 	bl	8004a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054c6:	2360      	movs	r3, #96	; 0x60
 80054c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80054ca:	f240 1339 	movw	r3, #313	; 0x139
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054d0:	2300      	movs	r3, #0
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80054d4:	2300      	movs	r3, #0
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80054dc:	2300      	movs	r3, #0
 80054de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80054e0:	2300      	movs	r3, #0
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054e8:	2204      	movs	r2, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4818      	ldr	r0, [pc, #96]	; (8005550 <MX_TIM1_Init+0x154>)
 80054ee:	f008 fb2b 	bl	800db48 <HAL_TIM_PWM_ConfigChannel>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80054f8:	f7ff fab6 	bl	8004a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005514:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800551a:	2300      	movs	r3, #0
 800551c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800551e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800552c:	1d3b      	adds	r3, r7, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4807      	ldr	r0, [pc, #28]	; (8005550 <MX_TIM1_Init+0x154>)
 8005532:	f009 f9ff 	bl	800e934 <HAL_TIMEx_ConfigBreakDeadTime>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800553c:	f7ff fa94 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005540:	4803      	ldr	r0, [pc, #12]	; (8005550 <MX_TIM1_Init+0x154>)
 8005542:	f000 fdd5 	bl	80060f0 <HAL_TIM_MspPostInit>

}
 8005546:	bf00      	nop
 8005548:	3768      	adds	r7, #104	; 0x68
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	24000d90 	.word	0x24000d90
 8005554:	40010000 	.word	0x40010000

08005558 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	; 0x38
 800555c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800555e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	609a      	str	r2, [r3, #8]
 800556a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800556c:	f107 031c 	add.w	r3, r7, #28
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005578:	463b      	mov	r3, r7
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	609a      	str	r2, [r3, #8]
 8005582:	60da      	str	r2, [r3, #12]
 8005584:	611a      	str	r2, [r3, #16]
 8005586:	615a      	str	r2, [r3, #20]
 8005588:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800558a:	4b2e      	ldr	r3, [pc, #184]	; (8005644 <MX_TIM2_Init+0xec>)
 800558c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005590:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005592:	4b2c      	ldr	r3, [pc, #176]	; (8005644 <MX_TIM2_Init+0xec>)
 8005594:	22c7      	movs	r2, #199	; 0xc7
 8005596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005598:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <MX_TIM2_Init+0xec>)
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800559e:	4b29      	ldr	r3, [pc, #164]	; (8005644 <MX_TIM2_Init+0xec>)
 80055a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80055a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a6:	4b27      	ldr	r3, [pc, #156]	; (8005644 <MX_TIM2_Init+0xec>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <MX_TIM2_Init+0xec>)
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055b2:	4824      	ldr	r0, [pc, #144]	; (8005644 <MX_TIM2_Init+0xec>)
 80055b4:	f007 fe07 	bl	800d1c6 <HAL_TIM_Base_Init>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80055be:	f7ff fa53 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80055c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055cc:	4619      	mov	r1, r3
 80055ce:	481d      	ldr	r0, [pc, #116]	; (8005644 <MX_TIM2_Init+0xec>)
 80055d0:	f008 fbce 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80055da:	f7ff fa45 	bl	8004a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80055de:	4819      	ldr	r0, [pc, #100]	; (8005644 <MX_TIM2_Init+0xec>)
 80055e0:	f007 feef 	bl	800d3c2 <HAL_TIM_PWM_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80055ea:	f7ff fa3d 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055f6:	f107 031c 	add.w	r3, r7, #28
 80055fa:	4619      	mov	r1, r3
 80055fc:	4811      	ldr	r0, [pc, #68]	; (8005644 <MX_TIM2_Init+0xec>)
 80055fe:	f009 f90b 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005608:	f7ff fa2e 	bl	8004a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800560c:	2360      	movs	r3, #96	; 0x60
 800560e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005610:	f240 1339 	movw	r3, #313	; 0x139
 8005614:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800561e:	463b      	mov	r3, r7
 8005620:	2208      	movs	r2, #8
 8005622:	4619      	mov	r1, r3
 8005624:	4807      	ldr	r0, [pc, #28]	; (8005644 <MX_TIM2_Init+0xec>)
 8005626:	f008 fa8f 	bl	800db48 <HAL_TIM_PWM_ConfigChannel>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005630:	f7ff fa1a 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005634:	4803      	ldr	r0, [pc, #12]	; (8005644 <MX_TIM2_Init+0xec>)
 8005636:	f000 fd5b 	bl	80060f0 <HAL_TIM_MspPostInit>

}
 800563a:	bf00      	nop
 800563c:	3738      	adds	r7, #56	; 0x38
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	24000ddc 	.word	0x24000ddc

08005648 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800564e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	609a      	str	r2, [r3, #8]
 800565a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005668:	463b      	mov	r3, r7
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	615a      	str	r2, [r3, #20]
 8005678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800567a:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <MX_TIM3_Init+0xe8>)
 800567c:	4a2d      	ldr	r2, [pc, #180]	; (8005734 <MX_TIM3_Init+0xec>)
 800567e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005680:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <MX_TIM3_Init+0xe8>)
 8005682:	22c7      	movs	r2, #199	; 0xc7
 8005684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005686:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <MX_TIM3_Init+0xe8>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800568c:	4b28      	ldr	r3, [pc, #160]	; (8005730 <MX_TIM3_Init+0xe8>)
 800568e:	f640 125f 	movw	r2, #2399	; 0x95f
 8005692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005694:	4b26      	ldr	r3, [pc, #152]	; (8005730 <MX_TIM3_Init+0xe8>)
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800569a:	4b25      	ldr	r3, [pc, #148]	; (8005730 <MX_TIM3_Init+0xe8>)
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056a0:	4823      	ldr	r0, [pc, #140]	; (8005730 <MX_TIM3_Init+0xe8>)
 80056a2:	f007 fd90 	bl	800d1c6 <HAL_TIM_Base_Init>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80056ac:	f7ff f9dc 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056ba:	4619      	mov	r1, r3
 80056bc:	481c      	ldr	r0, [pc, #112]	; (8005730 <MX_TIM3_Init+0xe8>)
 80056be:	f008 fb57 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80056c8:	f7ff f9ce 	bl	8004a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80056cc:	4818      	ldr	r0, [pc, #96]	; (8005730 <MX_TIM3_Init+0xe8>)
 80056ce:	f007 fe78 	bl	800d3c2 <HAL_TIM_PWM_Init>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80056d8:	f7ff f9c6 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056e4:	f107 031c 	add.w	r3, r7, #28
 80056e8:	4619      	mov	r1, r3
 80056ea:	4811      	ldr	r0, [pc, #68]	; (8005730 <MX_TIM3_Init+0xe8>)
 80056ec:	f009 f894 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80056f6:	f7ff f9b7 	bl	8004a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056fa:	2360      	movs	r3, #96	; 0x60
 80056fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800570a:	463b      	mov	r3, r7
 800570c:	2200      	movs	r2, #0
 800570e:	4619      	mov	r1, r3
 8005710:	4807      	ldr	r0, [pc, #28]	; (8005730 <MX_TIM3_Init+0xe8>)
 8005712:	f008 fa19 	bl	800db48 <HAL_TIM_PWM_ConfigChannel>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800571c:	f7ff f9a4 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005720:	4803      	ldr	r0, [pc, #12]	; (8005730 <MX_TIM3_Init+0xe8>)
 8005722:	f000 fce5 	bl	80060f0 <HAL_TIM_MspPostInit>

}
 8005726:	bf00      	nop
 8005728:	3738      	adds	r7, #56	; 0x38
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	24000e28 	.word	0x24000e28
 8005734:	40000400 	.word	0x40000400

08005738 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800573e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	609a      	str	r2, [r3, #8]
 800574a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800574c:	f107 031c 	add.w	r3, r7, #28
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005758:	463b      	mov	r3, r7
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	615a      	str	r2, [r3, #20]
 8005768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <MX_TIM4_Init+0xe8>)
 800576c:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <MX_TIM4_Init+0xec>)
 800576e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <MX_TIM4_Init+0xe8>)
 8005772:	22ef      	movs	r2, #239	; 0xef
 8005774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <MX_TIM4_Init+0xe8>)
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800577c:	4b28      	ldr	r3, [pc, #160]	; (8005820 <MX_TIM4_Init+0xe8>)
 800577e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005784:	4b26      	ldr	r3, [pc, #152]	; (8005820 <MX_TIM4_Init+0xe8>)
 8005786:	2200      	movs	r2, #0
 8005788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <MX_TIM4_Init+0xe8>)
 800578c:	2280      	movs	r2, #128	; 0x80
 800578e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005790:	4823      	ldr	r0, [pc, #140]	; (8005820 <MX_TIM4_Init+0xe8>)
 8005792:	f007 fd18 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800579c:	f7ff f964 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80057a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057aa:	4619      	mov	r1, r3
 80057ac:	481c      	ldr	r0, [pc, #112]	; (8005820 <MX_TIM4_Init+0xe8>)
 80057ae:	f008 fadf 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80057b8:	f7ff f956 	bl	8004a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80057bc:	4818      	ldr	r0, [pc, #96]	; (8005820 <MX_TIM4_Init+0xe8>)
 80057be:	f007 fe00 	bl	800d3c2 <HAL_TIM_PWM_Init>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80057c8:	f7ff f94e 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80057d4:	f107 031c 	add.w	r3, r7, #28
 80057d8:	4619      	mov	r1, r3
 80057da:	4811      	ldr	r0, [pc, #68]	; (8005820 <MX_TIM4_Init+0xe8>)
 80057dc:	f009 f81c 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80057e6:	f7ff f93f 	bl	8004a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057ea:	2360      	movs	r3, #96	; 0x60
 80057ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80057fa:	463b      	mov	r3, r7
 80057fc:	2208      	movs	r2, #8
 80057fe:	4619      	mov	r1, r3
 8005800:	4807      	ldr	r0, [pc, #28]	; (8005820 <MX_TIM4_Init+0xe8>)
 8005802:	f008 f9a1 	bl	800db48 <HAL_TIM_PWM_ConfigChannel>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800580c:	f7ff f92c 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005810:	4803      	ldr	r0, [pc, #12]	; (8005820 <MX_TIM4_Init+0xe8>)
 8005812:	f000 fc6d 	bl	80060f0 <HAL_TIM_MspPostInit>

}
 8005816:	bf00      	nop
 8005818:	3738      	adds	r7, #56	; 0x38
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	24000e74 	.word	0x24000e74
 8005824:	40000800 	.word	0x40000800

08005828 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800582e:	f107 0310 	add.w	r3, r7, #16
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	605a      	str	r2, [r3, #4]
 8005844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <MX_TIM5_Init+0x94>)
 8005848:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <MX_TIM5_Init+0x98>)
 800584a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <MX_TIM5_Init+0x94>)
 800584e:	22c7      	movs	r2, #199	; 0xc7
 8005850:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <MX_TIM5_Init+0x94>)
 8005854:	2200      	movs	r2, #0
 8005856:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005858:	4b18      	ldr	r3, [pc, #96]	; (80058bc <MX_TIM5_Init+0x94>)
 800585a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800585e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005860:	4b16      	ldr	r3, [pc, #88]	; (80058bc <MX_TIM5_Init+0x94>)
 8005862:	2200      	movs	r2, #0
 8005864:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <MX_TIM5_Init+0x94>)
 8005868:	2200      	movs	r2, #0
 800586a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800586c:	4813      	ldr	r0, [pc, #76]	; (80058bc <MX_TIM5_Init+0x94>)
 800586e:	f007 fcaa 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005878:	f7ff f8f6 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800587c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005880:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005882:	f107 0310 	add.w	r3, r7, #16
 8005886:	4619      	mov	r1, r3
 8005888:	480c      	ldr	r0, [pc, #48]	; (80058bc <MX_TIM5_Init+0x94>)
 800588a:	f008 fa71 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005894:	f7ff f8e8 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005898:	2300      	movs	r3, #0
 800589a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4805      	ldr	r0, [pc, #20]	; (80058bc <MX_TIM5_Init+0x94>)
 80058a6:	f008 ffb7 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80058b0:	f7ff f8da 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80058b4:	bf00      	nop
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	24000ec0 	.word	0x24000ec0
 80058c0:	40000c00 	.word	0x40000c00

080058c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <MX_TIM6_Init+0x64>)
 80058d6:	4a15      	ldr	r2, [pc, #84]	; (800592c <MX_TIM6_Init+0x68>)
 80058d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <MX_TIM6_Init+0x64>)
 80058dc:	22c7      	movs	r2, #199	; 0xc7
 80058de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <MX_TIM6_Init+0x64>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <MX_TIM6_Init+0x64>)
 80058e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80058ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058ee:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <MX_TIM6_Init+0x64>)
 80058f0:	2280      	movs	r2, #128	; 0x80
 80058f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80058f4:	480c      	ldr	r0, [pc, #48]	; (8005928 <MX_TIM6_Init+0x64>)
 80058f6:	f007 fc66 	bl	800d1c6 <HAL_TIM_Base_Init>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005900:	f7ff f8b2 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005904:	2300      	movs	r3, #0
 8005906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4805      	ldr	r0, [pc, #20]	; (8005928 <MX_TIM6_Init+0x64>)
 8005912:	f008 ff81 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800591c:	f7ff f8a4 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	24000f0c 	.word	0x24000f0c
 800592c:	40001000 	.word	0x40001000

08005930 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <MX_TIM7_Init+0x64>)
 8005942:	4a15      	ldr	r2, [pc, #84]	; (8005998 <MX_TIM7_Init+0x68>)
 8005944:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <MX_TIM7_Init+0x64>)
 8005948:	22c7      	movs	r2, #199	; 0xc7
 800594a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <MX_TIM7_Init+0x64>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <MX_TIM7_Init+0x64>)
 8005954:	f240 42af 	movw	r2, #1199	; 0x4af
 8005958:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <MX_TIM7_Init+0x64>)
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005960:	480c      	ldr	r0, [pc, #48]	; (8005994 <MX_TIM7_Init+0x64>)
 8005962:	f007 fc30 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800596c:	f7ff f87c 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005970:	2300      	movs	r3, #0
 8005972:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005978:	1d3b      	adds	r3, r7, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4805      	ldr	r0, [pc, #20]	; (8005994 <MX_TIM7_Init+0x64>)
 800597e:	f008 ff4b 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005988:	f7ff f86e 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	24000f58 	.word	0x24000f58
 8005998:	40001400 	.word	0x40001400

0800599c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80059a2:	f107 030c 	add.w	r3, r7, #12
 80059a6:	2224      	movs	r2, #36	; 0x24
 80059a8:	2100      	movs	r1, #0
 80059aa:	4618      	mov	r0, r3
 80059ac:	f00c fd2c 	bl	8012408 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059b0:	463b      	mov	r3, r7
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
 80059b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80059ba:	4b23      	ldr	r3, [pc, #140]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <MX_TIM8_Init+0xb0>)
 80059be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059c6:	4b20      	ldr	r3, [pc, #128]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80059d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059dc:	2200      	movs	r2, #0
 80059de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <MX_TIM8_Init+0xac>)
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059e6:	2303      	movs	r3, #3
 80059e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059ee:	2301      	movs	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80059f6:	230f      	movs	r3, #15
 80059f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059fe:	2301      	movs	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a02:	2300      	movs	r3, #0
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005a06:	230f      	movs	r3, #15
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005a0a:	f107 030c 	add.w	r3, r7, #12
 8005a0e:	4619      	mov	r1, r3
 8005a10:	480d      	ldr	r0, [pc, #52]	; (8005a48 <MX_TIM8_Init+0xac>)
 8005a12:	f007 fe45 	bl	800d6a0 <HAL_TIM_Encoder_Init>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005a1c:	f7ff f824 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a20:	2300      	movs	r3, #0
 8005a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005a24:	2300      	movs	r3, #0
 8005a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4805      	ldr	r0, [pc, #20]	; (8005a48 <MX_TIM8_Init+0xac>)
 8005a32:	f008 fef1 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005a3c:	f7ff f814 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005a40:	bf00      	nop
 8005a42:	3730      	adds	r7, #48	; 0x30
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	24000fa4 	.word	0x24000fa4
 8005a4c:	40010400 	.word	0x40010400

08005a50 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a56:	463b      	mov	r3, r7
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005a62:	4b16      	ldr	r3, [pc, #88]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <MX_TIM12_Init+0x70>)
 8005a66:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a6a:	22c7      	movs	r2, #199	; 0xc7
 8005a6c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005a74:	4b11      	ldr	r3, [pc, #68]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a76:	f240 2257 	movw	r2, #599	; 0x257
 8005a7a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a7c:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a82:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005a88:	480c      	ldr	r0, [pc, #48]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005a8a:	f007 fb9c 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005a94:	f7fe ffe8 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a9c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4806      	ldr	r0, [pc, #24]	; (8005abc <MX_TIM12_Init+0x6c>)
 8005aa4:	f008 f964 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8005aae:	f7fe ffdb 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	24000ff0 	.word	0x24000ff0
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005ac8:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005aca:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <MX_TIM13_Init+0x44>)
 8005acc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005ad0:	22c7      	movs	r2, #199	; 0xc7
 8005ad2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005adc:	f240 2257 	movw	r2, #599	; 0x257
 8005ae0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005aea:	2280      	movs	r2, #128	; 0x80
 8005aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005aee:	4805      	ldr	r0, [pc, #20]	; (8005b04 <MX_TIM13_Init+0x40>)
 8005af0:	f007 fb69 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005afa:	f7fe ffb5 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	2400103c 	.word	0x2400103c
 8005b08:	40001c00 	.word	0x40001c00

08005b0c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005b10:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b12:	4a0f      	ldr	r2, [pc, #60]	; (8005b50 <MX_TIM14_Init+0x44>)
 8005b14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b18:	22c7      	movs	r2, #199	; 0xc7
 8005b1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b24:	f640 125f 	movw	r2, #2399	; 0x95f
 8005b28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b2a:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005b36:	4805      	ldr	r0, [pc, #20]	; (8005b4c <MX_TIM14_Init+0x40>)
 8005b38:	f007 fb45 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005b42:	f7fe ff91 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	24001088 	.word	0x24001088
 8005b50:	40002000 	.word	0x40002000

08005b54 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b09a      	sub	sp, #104	; 0x68
 8005b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	609a      	str	r2, [r3, #8]
 8005b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	611a      	str	r2, [r3, #16]
 8005b84:	615a      	str	r2, [r3, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	222c      	movs	r2, #44	; 0x2c
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f00c fc3a 	bl	8012408 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005b94:	4b3f      	ldr	r3, [pc, #252]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005b96:	4a40      	ldr	r2, [pc, #256]	; (8005c98 <MX_TIM15_Init+0x144>)
 8005b98:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005b9a:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005b9c:	22ef      	movs	r2, #239	; 0xef
 8005b9e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba0:	4b3c      	ldr	r3, [pc, #240]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005ba6:	4b3b      	ldr	r3, [pc, #236]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005ba8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005bac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bae:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005bb4:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bba:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005bbc:	2280      	movs	r2, #128	; 0x80
 8005bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005bc0:	4834      	ldr	r0, [pc, #208]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005bc2:	f007 fb00 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005bcc:	f7fe ff4c 	bl	8004a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005bd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bda:	4619      	mov	r1, r3
 8005bdc:	482d      	ldr	r0, [pc, #180]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005bde:	f008 f8c7 	bl	800dd70 <HAL_TIM_ConfigClockSource>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005be8:	f7fe ff3e 	bl	8004a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005bec:	4829      	ldr	r0, [pc, #164]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005bee:	f007 fbe8 	bl	800d3c2 <HAL_TIM_PWM_Init>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005bf8:	f7fe ff36 	bl	8004a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4822      	ldr	r0, [pc, #136]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005c0c:	f008 fe04 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005c16:	f7fe ff27 	bl	8004a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c1a:	2360      	movs	r3, #96	; 0x60
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005c1e:	f240 1339 	movw	r3, #313	; 0x139
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c24:	2300      	movs	r3, #0
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c30:	2300      	movs	r3, #0
 8005c32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c34:	2300      	movs	r3, #0
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4814      	ldr	r0, [pc, #80]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005c42:	f007 ff81 	bl	800db48 <HAL_TIM_PWM_ConfigChannel>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005c4c:	f7fe ff0c 	bl	8004a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4807      	ldr	r0, [pc, #28]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005c78:	f008 fe5c 	bl	800e934 <HAL_TIMEx_ConfigBreakDeadTime>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8005c82:	f7fe fef1 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005c86:	4803      	ldr	r0, [pc, #12]	; (8005c94 <MX_TIM15_Init+0x140>)
 8005c88:	f000 fa32 	bl	80060f0 <HAL_TIM_MspPostInit>

}
 8005c8c:	bf00      	nop
 8005c8e:	3768      	adds	r7, #104	; 0x68
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	240010d4 	.word	0x240010d4
 8005c98:	40014000 	.word	0x40014000

08005c9c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005ca2:	4a10      	ldr	r2, [pc, #64]	; (8005ce4 <MX_TIM16_Init+0x48>)
 8005ca4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8005ca6:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005ca8:	22ef      	movs	r2, #239	; 0xef
 8005caa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cb8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005cc8:	2280      	movs	r2, #128	; 0x80
 8005cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005ccc:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <MX_TIM16_Init+0x44>)
 8005cce:	f007 fa7a 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005cd8:	f7fe fec6 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005cdc:	bf00      	nop
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	24001120 	.word	0x24001120
 8005ce4:	40014400 	.word	0x40014400

08005ce8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005cee:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <MX_TIM17_Init+0x4c>)
 8005cf0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2400-1;
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005cf4:	f640 125f 	movw	r2, #2399	; 0x95f
 8005cf8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000-1;
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005d02:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005d06:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d08:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005d16:	2280      	movs	r2, #128	; 0x80
 8005d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005d1a:	4805      	ldr	r0, [pc, #20]	; (8005d30 <MX_TIM17_Init+0x48>)
 8005d1c:	f007 fa53 	bl	800d1c6 <HAL_TIM_Base_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8005d26:	f7fe fe9f 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005d2a:	bf00      	nop
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	2400116c 	.word	0x2400116c
 8005d34:	40014800 	.word	0x40014800

08005d38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b090      	sub	sp, #64	; 0x40
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4aa8      	ldr	r2, [pc, #672]	; (8005fe8 <HAL_TIM_Base_MspInit+0x2b0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10f      	bne.n	8005d6a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d4a:	4ba8      	ldr	r3, [pc, #672]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d50:	4aa6      	ldr	r2, [pc, #664]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d5a:	4ba4      	ldr	r3, [pc, #656]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005d68:	e13a      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d10f      	bne.n	8005d94 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d74:	4b9d      	ldr	r3, [pc, #628]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d7a:	4a9c      	ldr	r2, [pc, #624]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d84:	4b99      	ldr	r3, [pc, #612]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d92:	e125      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a95      	ldr	r2, [pc, #596]	; (8005ff0 <HAL_TIM_Base_MspInit+0x2b8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10f      	bne.n	8005dbe <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d9e:	4b93      	ldr	r3, [pc, #588]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005da4:	4a91      	ldr	r2, [pc, #580]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dae:	4b8f      	ldr	r3, [pc, #572]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dbc:	e110      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a8c      	ldr	r2, [pc, #560]	; (8005ff4 <HAL_TIM_Base_MspInit+0x2bc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d10f      	bne.n	8005de8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005dc8:	4b88      	ldr	r3, [pc, #544]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dce:	4a87      	ldr	r2, [pc, #540]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005dd0:	f043 0304 	orr.w	r3, r3, #4
 8005dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dd8:	4b84      	ldr	r3, [pc, #528]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	633b      	str	r3, [r7, #48]	; 0x30
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005de6:	e0fb      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a82      	ldr	r2, [pc, #520]	; (8005ff8 <HAL_TIM_Base_MspInit+0x2c0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d117      	bne.n	8005e22 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005df2:	4b7e      	ldr	r3, [pc, #504]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005df8:	4a7c      	ldr	r2, [pc, #496]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005dfa:	f043 0308 	orr.w	r3, r3, #8
 8005dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e02:	4b7a      	ldr	r3, [pc, #488]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	2032      	movs	r0, #50	; 0x32
 8005e16:	f001 f838 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005e1a:	2032      	movs	r0, #50	; 0x32
 8005e1c:	f001 f84f 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005e20:	e0de      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a75      	ldr	r2, [pc, #468]	; (8005ffc <HAL_TIM_Base_MspInit+0x2c4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d117      	bne.n	8005e5c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e2c:	4b6f      	ldr	r3, [pc, #444]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e32:	4a6e      	ldr	r2, [pc, #440]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e34:	f043 0310 	orr.w	r3, r3, #16
 8005e38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e3c:	4b6b      	ldr	r3, [pc, #428]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	2036      	movs	r0, #54	; 0x36
 8005e50:	f001 f81b 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e54:	2036      	movs	r0, #54	; 0x36
 8005e56:	f001 f832 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005e5a:	e0c1      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a67      	ldr	r2, [pc, #412]	; (8006000 <HAL_TIM_Base_MspInit+0x2c8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d117      	bne.n	8005e96 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e66:	4b61      	ldr	r3, [pc, #388]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e6c:	4a5f      	ldr	r2, [pc, #380]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e6e:	f043 0320 	orr.w	r3, r3, #32
 8005e72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e84:	2200      	movs	r2, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	2037      	movs	r0, #55	; 0x37
 8005e8a:	f000 fffe 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e8e:	2037      	movs	r0, #55	; 0x37
 8005e90:	f001 f815 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005e94:	e0a4      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5a      	ldr	r2, [pc, #360]	; (8006004 <HAL_TIM_Base_MspInit+0x2cc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d117      	bne.n	8005ed0 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005ea0:	4b52      	ldr	r3, [pc, #328]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ea6:	4a51      	ldr	r2, [pc, #324]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005eb0:	4b4e      	ldr	r3, [pc, #312]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	202b      	movs	r0, #43	; 0x2b
 8005ec4:	f000 ffe1 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005ec8:	202b      	movs	r0, #43	; 0x2b
 8005eca:	f000 fff8 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005ece:	e087      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a4c      	ldr	r2, [pc, #304]	; (8006008 <HAL_TIM_Base_MspInit+0x2d0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d117      	bne.n	8005f0a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005eda:	4b44      	ldr	r3, [pc, #272]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ee0:	4a42      	ldr	r2, [pc, #264]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005eea:	4b40      	ldr	r3, [pc, #256]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	202c      	movs	r0, #44	; 0x2c
 8005efe:	f000 ffc4 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005f02:	202c      	movs	r0, #44	; 0x2c
 8005f04:	f000 ffdb 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005f08:	e06a      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3f      	ldr	r2, [pc, #252]	; (800600c <HAL_TIM_Base_MspInit+0x2d4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d117      	bne.n	8005f44 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f14:	4b35      	ldr	r3, [pc, #212]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f1a:	4a34      	ldr	r2, [pc, #208]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f24:	4b31      	ldr	r3, [pc, #196]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005f32:	2200      	movs	r2, #0
 8005f34:	2100      	movs	r1, #0
 8005f36:	202d      	movs	r0, #45	; 0x2d
 8005f38:	f000 ffa7 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005f3c:	202d      	movs	r0, #45	; 0x2d
 8005f3e:	f000 ffbe 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005f42:	e04d      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a31      	ldr	r2, [pc, #196]	; (8006010 <HAL_TIM_Base_MspInit+0x2d8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d10f      	bne.n	8005f6e <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005f4e:	4b27      	ldr	r3, [pc, #156]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f54:	4a25      	ldr	r2, [pc, #148]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f5e:	4b23      	ldr	r3, [pc, #140]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	697b      	ldr	r3, [r7, #20]
}
 8005f6c:	e038      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a28      	ldr	r2, [pc, #160]	; (8006014 <HAL_TIM_Base_MspInit+0x2dc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d117      	bne.n	8005fa8 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f88:	4b18      	ldr	r3, [pc, #96]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	613b      	str	r3, [r7, #16]
 8005f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005f96:	2200      	movs	r2, #0
 8005f98:	2100      	movs	r1, #0
 8005f9a:	2075      	movs	r0, #117	; 0x75
 8005f9c:	f000 ff75 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005fa0:	2075      	movs	r0, #117	; 0x75
 8005fa2:	f000 ff8c 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005fa6:	e01b      	b.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	; (8006018 <HAL_TIM_Base_MspInit+0x2e0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d116      	bne.n	8005fe0 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fb8:	4a0c      	ldr	r2, [pc, #48]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <HAL_TIM_Base_MspInit+0x2b4>)
 8005fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	2076      	movs	r0, #118	; 0x76
 8005fd6:	f000 ff58 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005fda:	2076      	movs	r0, #118	; 0x76
 8005fdc:	f000 ff6f 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8005fe0:	bf00      	nop
 8005fe2:	3740      	adds	r7, #64	; 0x40
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40001000 	.word	0x40001000
 8006000:	40001400 	.word	0x40001400
 8006004:	40001800 	.word	0x40001800
 8006008:	40001c00 	.word	0x40001c00
 800600c:	40002000 	.word	0x40002000
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08a      	sub	sp, #40	; 0x28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006024:	f107 0314 	add.w	r3, r7, #20
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	60da      	str	r2, [r3, #12]
 8006032:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d14d      	bne.n	80060da <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800603e:	4b2a      	ldr	r3, [pc, #168]	; (80060e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006046:	f043 0302 	orr.w	r3, r3, #2
 800604a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800604e:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800605c:	4b22      	ldr	r3, [pc, #136]	; (80060e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800605e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006062:	4a21      	ldr	r2, [pc, #132]	; (80060e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800606c:	4b1e      	ldr	r3, [pc, #120]	; (80060e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 800606e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800607a:	23c0      	movs	r3, #192	; 0xc0
 800607c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607e:	2302      	movs	r3, #2
 8006080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006086:	2300      	movs	r3, #0
 8006088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800608a:	2303      	movs	r3, #3
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	4619      	mov	r1, r3
 8006094:	4815      	ldr	r0, [pc, #84]	; (80060ec <HAL_TIM_Encoder_MspInit+0xd0>)
 8006096:	f003 ff73 	bl	8009f80 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800609a:	2200      	movs	r2, #0
 800609c:	2100      	movs	r1, #0
 800609e:	202b      	movs	r0, #43	; 0x2b
 80060a0:	f000 fef3 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80060a4:	202b      	movs	r0, #43	; 0x2b
 80060a6:	f000 ff0a 	bl	8006ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2100      	movs	r1, #0
 80060ae:	202c      	movs	r0, #44	; 0x2c
 80060b0:	f000 feeb 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80060b4:	202c      	movs	r0, #44	; 0x2c
 80060b6:	f000 ff02 	bl	8006ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	202d      	movs	r0, #45	; 0x2d
 80060c0:	f000 fee3 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80060c4:	202d      	movs	r0, #45	; 0x2d
 80060c6:	f000 fefa 	bl	8006ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	2100      	movs	r1, #0
 80060ce:	202e      	movs	r0, #46	; 0x2e
 80060d0:	f000 fedb 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80060d4:	202e      	movs	r0, #46	; 0x2e
 80060d6:	f000 fef2 	bl	8006ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80060da:	bf00      	nop
 80060dc:	3728      	adds	r7, #40	; 0x28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40010400 	.word	0x40010400
 80060e8:	58024400 	.word	0x58024400
 80060ec:	58020800 	.word	0x58020800

080060f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f8:	f107 031c 	add.w	r3, r7, #28
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	609a      	str	r2, [r3, #8]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a5e      	ldr	r2, [pc, #376]	; (8006288 <HAL_TIM_MspPostInit+0x198>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d120      	bne.n	8006154 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006112:	4b5e      	ldr	r3, [pc, #376]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006118:	4a5c      	ldr	r2, [pc, #368]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 800611a:	f043 0310 	orr.w	r3, r3, #16
 800611e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006122:	4b5a      	ldr	r3, [pc, #360]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8006130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613e:	2300      	movs	r3, #0
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006142:	2301      	movs	r3, #1
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8006146:	f107 031c 	add.w	r3, r7, #28
 800614a:	4619      	mov	r1, r3
 800614c:	4850      	ldr	r0, [pc, #320]	; (8006290 <HAL_TIM_MspPostInit+0x1a0>)
 800614e:	f003 ff17 	bl	8009f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006152:	e094      	b.n	800627e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d120      	bne.n	80061a0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800615e:	4b4b      	ldr	r3, [pc, #300]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006164:	4a49      	ldr	r2, [pc, #292]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800616e:	4b47      	ldr	r3, [pc, #284]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800617c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006182:	2302      	movs	r3, #2
 8006184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006186:	2300      	movs	r3, #0
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618a:	2300      	movs	r3, #0
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800618e:	2301      	movs	r3, #1
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006192:	f107 031c 	add.w	r3, r7, #28
 8006196:	4619      	mov	r1, r3
 8006198:	483e      	ldr	r0, [pc, #248]	; (8006294 <HAL_TIM_MspPostInit+0x1a4>)
 800619a:	f003 fef1 	bl	8009f80 <HAL_GPIO_Init>
}
 800619e:	e06e      	b.n	800627e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3c      	ldr	r2, [pc, #240]	; (8006298 <HAL_TIM_MspPostInit+0x1a8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d11f      	bne.n	80061ea <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061aa:	4b38      	ldr	r3, [pc, #224]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 80061ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061b0:	4a36      	ldr	r2, [pc, #216]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061ba:	4b34      	ldr	r3, [pc, #208]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 80061bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80061c8:	2340      	movs	r3, #64	; 0x40
 80061ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061cc:	2302      	movs	r3, #2
 80061ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d4:	2300      	movs	r3, #0
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80061d8:	2302      	movs	r3, #2
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80061dc:	f107 031c 	add.w	r3, r7, #28
 80061e0:	4619      	mov	r1, r3
 80061e2:	482e      	ldr	r0, [pc, #184]	; (800629c <HAL_TIM_MspPostInit+0x1ac>)
 80061e4:	f003 fecc 	bl	8009f80 <HAL_GPIO_Init>
}
 80061e8:	e049      	b.n	800627e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2c      	ldr	r2, [pc, #176]	; (80062a0 <HAL_TIM_MspPostInit+0x1b0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d120      	bne.n	8006236 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 80061f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061fa:	4a24      	ldr	r2, [pc, #144]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 80061fc:	f043 0302 	orr.w	r3, r3, #2
 8006200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006204:	4b21      	ldr	r3, [pc, #132]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8006212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006218:	2302      	movs	r3, #2
 800621a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621c:	2300      	movs	r3, #0
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006220:	2300      	movs	r3, #0
 8006222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006224:	2302      	movs	r3, #2
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8006228:	f107 031c 	add.w	r3, r7, #28
 800622c:	4619      	mov	r1, r3
 800622e:	4819      	ldr	r0, [pc, #100]	; (8006294 <HAL_TIM_MspPostInit+0x1a4>)
 8006230:	f003 fea6 	bl	8009f80 <HAL_GPIO_Init>
}
 8006234:	e023      	b.n	800627e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_TIM_MspPostInit+0x1b4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d11e      	bne.n	800627e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006240:	4b12      	ldr	r3, [pc, #72]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006246:	4a11      	ldr	r2, [pc, #68]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006248:	f043 0310 	orr.w	r3, r3, #16
 800624c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <HAL_TIM_MspPostInit+0x19c>)
 8006252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006262:	2302      	movs	r3, #2
 8006264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006266:	2300      	movs	r3, #0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626a:	2300      	movs	r3, #0
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800626e:	2304      	movs	r3, #4
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006272:	f107 031c 	add.w	r3, r7, #28
 8006276:	4619      	mov	r1, r3
 8006278:	4805      	ldr	r0, [pc, #20]	; (8006290 <HAL_TIM_MspPostInit+0x1a0>)
 800627a:	f003 fe81 	bl	8009f80 <HAL_GPIO_Init>
}
 800627e:	bf00      	nop
 8006280:	3730      	adds	r7, #48	; 0x30
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	58024400 	.word	0x58024400
 8006290:	58021000 	.word	0x58021000
 8006294:	58020400 	.word	0x58020400
 8006298:	40000400 	.word	0x40000400
 800629c:	58020000 	.word	0x58020000
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40014000 	.word	0x40014000

080062a8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80062ac:	4b25      	ldr	r3, [pc, #148]	; (8006344 <MX_UART4_Init+0x9c>)
 80062ae:	4a26      	ldr	r2, [pc, #152]	; (8006348 <MX_UART4_Init+0xa0>)
 80062b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <MX_UART4_Init+0x9c>)
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <MX_UART4_Init+0xa4>)
 80062b6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80062b8:	4b22      	ldr	r3, [pc, #136]	; (8006344 <MX_UART4_Init+0x9c>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80062be:	4b21      	ldr	r3, [pc, #132]	; (8006344 <MX_UART4_Init+0x9c>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80062c4:	4b1f      	ldr	r3, [pc, #124]	; (8006344 <MX_UART4_Init+0x9c>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80062ca:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <MX_UART4_Init+0x9c>)
 80062cc:	220c      	movs	r2, #12
 80062ce:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <MX_UART4_Init+0x9c>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80062d6:	4b1b      	ldr	r3, [pc, #108]	; (8006344 <MX_UART4_Init+0x9c>)
 80062d8:	2200      	movs	r2, #0
 80062da:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062dc:	4b19      	ldr	r3, [pc, #100]	; (8006344 <MX_UART4_Init+0x9c>)
 80062de:	2200      	movs	r2, #0
 80062e0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062e2:	4b18      	ldr	r3, [pc, #96]	; (8006344 <MX_UART4_Init+0x9c>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80062e8:	4b16      	ldr	r3, [pc, #88]	; (8006344 <MX_UART4_Init+0x9c>)
 80062ea:	2208      	movs	r2, #8
 80062ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80062ee:	4b15      	ldr	r3, [pc, #84]	; (8006344 <MX_UART4_Init+0x9c>)
 80062f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80062f6:	4813      	ldr	r0, [pc, #76]	; (8006344 <MX_UART4_Init+0x9c>)
 80062f8:	f008 fbb8 	bl	800ea6c <HAL_UART_Init>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8006302:	f7fe fbb1 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006306:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800630a:	480e      	ldr	r0, [pc, #56]	; (8006344 <MX_UART4_Init+0x9c>)
 800630c:	f00a fc51 	bl	8010bb2 <HAL_UARTEx_SetTxFifoThreshold>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8006316:	f7fe fba7 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800631a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800631e:	4809      	ldr	r0, [pc, #36]	; (8006344 <MX_UART4_Init+0x9c>)
 8006320:	f00a fc85 	bl	8010c2e <HAL_UARTEx_SetRxFifoThreshold>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_UART4_Init+0x86>
  {
    Error_Handler();
 800632a:	f7fe fb9d 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800632e:	4805      	ldr	r0, [pc, #20]	; (8006344 <MX_UART4_Init+0x9c>)
 8006330:	f00a fbcb 	bl	8010aca <HAL_UARTEx_EnableFifoMode>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <MX_UART4_Init+0x96>
  {
    Error_Handler();
 800633a:	f7fe fb95 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	240011b8 	.word	0x240011b8
 8006348:	40004c00 	.word	0x40004c00
 800634c:	001e8480 	.word	0x001e8480

08006350 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006354:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <MX_UART7_Init+0x94>)
 8006356:	4a24      	ldr	r2, [pc, #144]	; (80063e8 <MX_UART7_Init+0x98>)
 8006358:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800635a:	4b22      	ldr	r3, [pc, #136]	; (80063e4 <MX_UART7_Init+0x94>)
 800635c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006360:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006362:	4b20      	ldr	r3, [pc, #128]	; (80063e4 <MX_UART7_Init+0x94>)
 8006364:	2200      	movs	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006368:	4b1e      	ldr	r3, [pc, #120]	; (80063e4 <MX_UART7_Init+0x94>)
 800636a:	2200      	movs	r2, #0
 800636c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800636e:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <MX_UART7_Init+0x94>)
 8006370:	2200      	movs	r2, #0
 8006372:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <MX_UART7_Init+0x94>)
 8006376:	220c      	movs	r2, #12
 8006378:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800637a:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <MX_UART7_Init+0x94>)
 800637c:	2200      	movs	r2, #0
 800637e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006380:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <MX_UART7_Init+0x94>)
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006386:	4b17      	ldr	r3, [pc, #92]	; (80063e4 <MX_UART7_Init+0x94>)
 8006388:	2200      	movs	r2, #0
 800638a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800638c:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <MX_UART7_Init+0x94>)
 800638e:	2200      	movs	r2, #0
 8006390:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <MX_UART7_Init+0x94>)
 8006394:	2200      	movs	r2, #0
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006398:	4812      	ldr	r0, [pc, #72]	; (80063e4 <MX_UART7_Init+0x94>)
 800639a:	f008 fb67 	bl	800ea6c <HAL_UART_Init>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80063a4:	f7fe fb60 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80063a8:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80063ac:	480d      	ldr	r0, [pc, #52]	; (80063e4 <MX_UART7_Init+0x94>)
 80063ae:	f00a fc00 	bl	8010bb2 <HAL_UARTEx_SetTxFifoThreshold>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80063b8:	f7fe fb56 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80063bc:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80063c0:	4808      	ldr	r0, [pc, #32]	; (80063e4 <MX_UART7_Init+0x94>)
 80063c2:	f00a fc34 	bl	8010c2e <HAL_UARTEx_SetRxFifoThreshold>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80063cc:	f7fe fb4c 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80063d0:	4804      	ldr	r0, [pc, #16]	; (80063e4 <MX_UART7_Init+0x94>)
 80063d2:	f00a fb7a 	bl	8010aca <HAL_UARTEx_EnableFifoMode>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80063dc:	f7fe fb44 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80063e0:	bf00      	nop
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	24001248 	.word	0x24001248
 80063e8:	40007800 	.word	0x40007800

080063ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <MX_USART2_UART_Init+0x90>)
 80063f2:	4a23      	ldr	r2, [pc, #140]	; (8006480 <MX_USART2_UART_Init+0x94>)
 80063f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80063f6:	4b21      	ldr	r3, [pc, #132]	; (800647c <MX_USART2_UART_Init+0x90>)
 80063f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80063fe:	4b1f      	ldr	r3, [pc, #124]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006404:	4b1d      	ldr	r3, [pc, #116]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006406:	2200      	movs	r2, #0
 8006408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800640a:	4b1c      	ldr	r3, [pc, #112]	; (800647c <MX_USART2_UART_Init+0x90>)
 800640c:	2200      	movs	r2, #0
 800640e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006410:	4b1a      	ldr	r3, [pc, #104]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006412:	220c      	movs	r2, #12
 8006414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006416:	4b19      	ldr	r3, [pc, #100]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006418:	2200      	movs	r2, #0
 800641a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800641c:	4b17      	ldr	r3, [pc, #92]	; (800647c <MX_USART2_UART_Init+0x90>)
 800641e:	2200      	movs	r2, #0
 8006420:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006422:	4b16      	ldr	r3, [pc, #88]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006424:	2200      	movs	r2, #0
 8006426:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <MX_USART2_UART_Init+0x90>)
 800642a:	2200      	movs	r2, #0
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006430:	2200      	movs	r2, #0
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006434:	4811      	ldr	r0, [pc, #68]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006436:	f008 fb19 	bl	800ea6c <HAL_UART_Init>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006440:	f7fe fb12 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006444:	2100      	movs	r1, #0
 8006446:	480d      	ldr	r0, [pc, #52]	; (800647c <MX_USART2_UART_Init+0x90>)
 8006448:	f00a fbb3 	bl	8010bb2 <HAL_UARTEx_SetTxFifoThreshold>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006452:	f7fe fb09 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006456:	2100      	movs	r1, #0
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <MX_USART2_UART_Init+0x90>)
 800645a:	f00a fbe8 	bl	8010c2e <HAL_UARTEx_SetRxFifoThreshold>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006464:	f7fe fb00 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006468:	4804      	ldr	r0, [pc, #16]	; (800647c <MX_USART2_UART_Init+0x90>)
 800646a:	f00a fb69 	bl	8010b40 <HAL_UARTEx_DisableFifoMode>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006474:	f7fe faf8 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006478:	bf00      	nop
 800647a:	bd80      	pop	{r7, pc}
 800647c:	240012d8 	.word	0x240012d8
 8006480:	40004400 	.word	0x40004400

08006484 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006488:	4b22      	ldr	r3, [pc, #136]	; (8006514 <MX_USART3_UART_Init+0x90>)
 800648a:	4a23      	ldr	r2, [pc, #140]	; (8006518 <MX_USART3_UART_Init+0x94>)
 800648c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800648e:	4b21      	ldr	r3, [pc, #132]	; (8006514 <MX_USART3_UART_Init+0x90>)
 8006490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006496:	4b1f      	ldr	r3, [pc, #124]	; (8006514 <MX_USART3_UART_Init+0x90>)
 8006498:	2200      	movs	r2, #0
 800649a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800649c:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <MX_USART3_UART_Init+0x90>)
 800649e:	2200      	movs	r2, #0
 80064a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064aa:	220c      	movs	r2, #12
 80064ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064ae:	4b19      	ldr	r3, [pc, #100]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80064b4:	4b17      	ldr	r3, [pc, #92]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80064ba:	4b16      	ldr	r3, [pc, #88]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064bc:	2200      	movs	r2, #0
 80064be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80064c0:	4b14      	ldr	r3, [pc, #80]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80064cc:	4811      	ldr	r0, [pc, #68]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064ce:	f008 facd 	bl	800ea6c <HAL_UART_Init>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80064d8:	f7fe fac6 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064dc:	2100      	movs	r1, #0
 80064de:	480d      	ldr	r0, [pc, #52]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064e0:	f00a fb67 	bl	8010bb2 <HAL_UARTEx_SetTxFifoThreshold>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80064ea:	f7fe fabd 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80064ee:	2100      	movs	r1, #0
 80064f0:	4808      	ldr	r0, [pc, #32]	; (8006514 <MX_USART3_UART_Init+0x90>)
 80064f2:	f00a fb9c 	bl	8010c2e <HAL_UARTEx_SetRxFifoThreshold>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80064fc:	f7fe fab4 	bl	8004a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006500:	4804      	ldr	r0, [pc, #16]	; (8006514 <MX_USART3_UART_Init+0x90>)
 8006502:	f00a fb1d 	bl	8010b40 <HAL_UARTEx_DisableFifoMode>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800650c:	f7fe faac 	bl	8004a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006510:	bf00      	nop
 8006512:	bd80      	pop	{r7, pc}
 8006514:	24001368 	.word	0x24001368
 8006518:	40004800 	.word	0x40004800

0800651c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b0be      	sub	sp, #248	; 0xf8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006524:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006538:	22bc      	movs	r2, #188	; 0xbc
 800653a:	2100      	movs	r1, #0
 800653c:	4618      	mov	r0, r3
 800653e:	f00b ff63 	bl	8012408 <memset>
  if(uartHandle->Instance==UART4)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4aa1      	ldr	r2, [pc, #644]	; (80067cc <HAL_UART_MspInit+0x2b0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	f040 80b7 	bne.w	80066bc <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800654e:	2302      	movs	r3, #2
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006552:	2300      	movs	r3, #0
 8006554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800655c:	4618      	mov	r0, r3
 800655e:	f004 fee7 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006568:	f7fe fa7e 	bl	8004a68 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800656c:	4b98      	ldr	r3, [pc, #608]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 800656e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006572:	4a97      	ldr	r2, [pc, #604]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 8006574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006578:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800657c:	4b94      	ldr	r3, [pc, #592]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 800657e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800658a:	4b91      	ldr	r3, [pc, #580]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 800658c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006590:	4a8f      	ldr	r2, [pc, #572]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800659a:	4b8d      	ldr	r3, [pc, #564]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 800659c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065a8:	2303      	movs	r3, #3
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ae:	2302      	movs	r3, #2
 80065b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80065c0:	2308      	movs	r3, #8
 80065c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80065ca:	4619      	mov	r1, r3
 80065cc:	4881      	ldr	r0, [pc, #516]	; (80067d4 <HAL_UART_MspInit+0x2b8>)
 80065ce:	f003 fcd7 	bl	8009f80 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80065d2:	4b81      	ldr	r3, [pc, #516]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065d4:	4a81      	ldr	r2, [pc, #516]	; (80067dc <HAL_UART_MspInit+0x2c0>)
 80065d6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80065d8:	4b7f      	ldr	r3, [pc, #508]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065da:	223f      	movs	r2, #63	; 0x3f
 80065dc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065de:	4b7e      	ldr	r3, [pc, #504]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065e4:	4b7c      	ldr	r3, [pc, #496]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065ea:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065f0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065f2:	4b79      	ldr	r3, [pc, #484]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065f8:	4b77      	ldr	r3, [pc, #476]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80065fe:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 8006600:	2200      	movs	r2, #0
 8006602:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006604:	4b74      	ldr	r3, [pc, #464]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 8006606:	2200      	movs	r2, #0
 8006608:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800660a:	4b73      	ldr	r3, [pc, #460]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 800660c:	2204      	movs	r2, #4
 800660e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006610:	4b71      	ldr	r3, [pc, #452]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 8006612:	2203      	movs	r2, #3
 8006614:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006616:	4b70      	ldr	r3, [pc, #448]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 8006618:	2200      	movs	r2, #0
 800661a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800661c:	4b6e      	ldr	r3, [pc, #440]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006622:	486d      	ldr	r0, [pc, #436]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 8006624:	f000 fe70 	bl	8007308 <HAL_DMA_Init>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800662e:	f7fe fa1b 	bl	8004a68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a68      	ldr	r2, [pc, #416]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 8006636:	67da      	str	r2, [r3, #124]	; 0x7c
 8006638:	4a67      	ldr	r2, [pc, #412]	; (80067d8 <HAL_UART_MspInit+0x2bc>)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800663e:	4b68      	ldr	r3, [pc, #416]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006640:	4a68      	ldr	r2, [pc, #416]	; (80067e4 <HAL_UART_MspInit+0x2c8>)
 8006642:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006644:	4b66      	ldr	r3, [pc, #408]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006646:	2240      	movs	r2, #64	; 0x40
 8006648:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800664a:	4b65      	ldr	r3, [pc, #404]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 800664c:	2240      	movs	r2, #64	; 0x40
 800664e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006650:	4b63      	ldr	r3, [pc, #396]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006652:	2200      	movs	r2, #0
 8006654:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006656:	4b62      	ldr	r3, [pc, #392]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800665c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800665e:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006660:	2200      	movs	r2, #0
 8006662:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006664:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006666:	2200      	movs	r2, #0
 8006668:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800666a:	4b5d      	ldr	r3, [pc, #372]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 800666c:	2200      	movs	r2, #0
 800666e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006670:	4b5b      	ldr	r3, [pc, #364]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006672:	2200      	movs	r2, #0
 8006674:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006676:	4b5a      	ldr	r3, [pc, #360]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006678:	2204      	movs	r2, #4
 800667a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800667c:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 800667e:	2203      	movs	r2, #3
 8006680:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006682:	4b57      	ldr	r3, [pc, #348]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006684:	2200      	movs	r2, #0
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006688:	4b55      	ldr	r3, [pc, #340]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800668e:	4854      	ldr	r0, [pc, #336]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 8006690:	f000 fe3a 	bl	8007308 <HAL_DMA_Init>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800669a:	f7fe f9e5 	bl	8004a68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a4f      	ldr	r2, [pc, #316]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 80066a2:	679a      	str	r2, [r3, #120]	; 0x78
 80066a4:	4a4e      	ldr	r2, [pc, #312]	; (80067e0 <HAL_UART_MspInit+0x2c4>)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2100      	movs	r1, #0
 80066ae:	2034      	movs	r0, #52	; 0x34
 80066b0:	f000 fbeb 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80066b4:	2034      	movs	r0, #52	; 0x34
 80066b6:	f000 fc02 	bl	8006ebe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80066ba:	e20d      	b.n	8006ad8 <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a49      	ldr	r2, [pc, #292]	; (80067e8 <HAL_UART_MspInit+0x2cc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	f040 8098 	bne.w	80067f8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80066c8:	2302      	movs	r3, #2
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80066d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 fe2a 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80066e2:	f7fe f9c1 	bl	8004a68 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80066e6:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 80066e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066ec:	4a38      	ldr	r2, [pc, #224]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 80066ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066f6:	4b36      	ldr	r3, [pc, #216]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 80066f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006704:	4b32      	ldr	r3, [pc, #200]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 8006706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800670a:	4a31      	ldr	r2, [pc, #196]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 800670c:	f043 0310 	orr.w	r3, r3, #16
 8006710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006714:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <HAL_UART_MspInit+0x2b4>)
 8006716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006722:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672a:	2302      	movs	r3, #2
 800672c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006730:	2300      	movs	r3, #0
 8006732:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006736:	2300      	movs	r3, #0
 8006738:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800673c:	2307      	movs	r3, #7
 800673e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006742:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006746:	4619      	mov	r1, r3
 8006748:	4828      	ldr	r0, [pc, #160]	; (80067ec <HAL_UART_MspInit+0x2d0>)
 800674a:	f003 fc19 	bl	8009f80 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800674e:	4b28      	ldr	r3, [pc, #160]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006750:	4a28      	ldr	r2, [pc, #160]	; (80067f4 <HAL_UART_MspInit+0x2d8>)
 8006752:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006756:	2250      	movs	r2, #80	; 0x50
 8006758:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800675a:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 800675c:	2240      	movs	r2, #64	; 0x40
 800675e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006760:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006762:	2200      	movs	r2, #0
 8006764:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006766:	4b22      	ldr	r3, [pc, #136]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800676c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006770:	2200      	movs	r2, #0
 8006772:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006774:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006776:	2200      	movs	r2, #0
 8006778:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 800677c:	2200      	movs	r2, #0
 800677e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006782:	2200      	movs	r2, #0
 8006784:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006788:	2204      	movs	r2, #4
 800678a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 800678e:	2203      	movs	r2, #3
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006792:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 8006794:	2200      	movs	r2, #0
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006798:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800679e:	4814      	ldr	r0, [pc, #80]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 80067a0:	f000 fdb2 	bl	8007308 <HAL_DMA_Init>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_UART_MspInit+0x292>
      Error_Handler();
 80067aa:	f7fe f95d 	bl	8004a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a0f      	ldr	r2, [pc, #60]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 80067b2:	679a      	str	r2, [r3, #120]	; 0x78
 80067b4:	4a0e      	ldr	r2, [pc, #56]	; (80067f0 <HAL_UART_MspInit+0x2d4>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	2052      	movs	r0, #82	; 0x52
 80067c0:	f000 fb63 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80067c4:	2052      	movs	r0, #82	; 0x52
 80067c6:	f000 fb7a 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 80067ca:	e185      	b.n	8006ad8 <HAL_UART_MspInit+0x5bc>
 80067cc:	40004c00 	.word	0x40004c00
 80067d0:	58024400 	.word	0x58024400
 80067d4:	58020c00 	.word	0x58020c00
 80067d8:	240013f8 	.word	0x240013f8
 80067dc:	40020058 	.word	0x40020058
 80067e0:	24001470 	.word	0x24001470
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40007800 	.word	0x40007800
 80067ec:	58021000 	.word	0x58021000
 80067f0:	240014e8 	.word	0x240014e8
 80067f4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a54      	ldr	r2, [pc, #336]	; (8006950 <HAL_UART_MspInit+0x434>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f040 80b4 	bne.w	800696c <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006804:	2302      	movs	r3, #2
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006808:	2300      	movs	r3, #0
 800680a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800680e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006812:	4618      	mov	r0, r3
 8006814:	f004 fd8c 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800681e:	f7fe f923 	bl	8004a68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006822:	4b4c      	ldr	r3, [pc, #304]	; (8006954 <HAL_UART_MspInit+0x438>)
 8006824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006828:	4a4a      	ldr	r2, [pc, #296]	; (8006954 <HAL_UART_MspInit+0x438>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006832:	4b48      	ldr	r3, [pc, #288]	; (8006954 <HAL_UART_MspInit+0x438>)
 8006834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006840:	4b44      	ldr	r3, [pc, #272]	; (8006954 <HAL_UART_MspInit+0x438>)
 8006842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006846:	4a43      	ldr	r2, [pc, #268]	; (8006954 <HAL_UART_MspInit+0x438>)
 8006848:	f043 0308 	orr.w	r3, r3, #8
 800684c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006850:	4b40      	ldr	r3, [pc, #256]	; (8006954 <HAL_UART_MspInit+0x438>)
 8006852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800685e:	2360      	movs	r3, #96	; 0x60
 8006860:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006864:	2302      	movs	r3, #2
 8006866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006876:	2307      	movs	r3, #7
 8006878:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800687c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006880:	4619      	mov	r1, r3
 8006882:	4835      	ldr	r0, [pc, #212]	; (8006958 <HAL_UART_MspInit+0x43c>)
 8006884:	f003 fb7c 	bl	8009f80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006888:	4b34      	ldr	r3, [pc, #208]	; (800695c <HAL_UART_MspInit+0x440>)
 800688a:	4a35      	ldr	r2, [pc, #212]	; (8006960 <HAL_UART_MspInit+0x444>)
 800688c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800688e:	4b33      	ldr	r3, [pc, #204]	; (800695c <HAL_UART_MspInit+0x440>)
 8006890:	222b      	movs	r2, #43	; 0x2b
 8006892:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006894:	4b31      	ldr	r3, [pc, #196]	; (800695c <HAL_UART_MspInit+0x440>)
 8006896:	2200      	movs	r2, #0
 8006898:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <HAL_UART_MspInit+0x440>)
 800689c:	2200      	movs	r2, #0
 800689e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068a0:	4b2e      	ldr	r3, [pc, #184]	; (800695c <HAL_UART_MspInit+0x440>)
 80068a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068a8:	4b2c      	ldr	r3, [pc, #176]	; (800695c <HAL_UART_MspInit+0x440>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068ae:	4b2b      	ldr	r3, [pc, #172]	; (800695c <HAL_UART_MspInit+0x440>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80068b4:	4b29      	ldr	r3, [pc, #164]	; (800695c <HAL_UART_MspInit+0x440>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_UART_MspInit+0x440>)
 80068bc:	2200      	movs	r2, #0
 80068be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068c0:	4b26      	ldr	r3, [pc, #152]	; (800695c <HAL_UART_MspInit+0x440>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80068c6:	4825      	ldr	r0, [pc, #148]	; (800695c <HAL_UART_MspInit+0x440>)
 80068c8:	f000 fd1e 	bl	8007308 <HAL_DMA_Init>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80068d2:	f7fe f8c9 	bl	8004a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a20      	ldr	r2, [pc, #128]	; (800695c <HAL_UART_MspInit+0x440>)
 80068da:	67da      	str	r2, [r3, #124]	; 0x7c
 80068dc:	4a1f      	ldr	r2, [pc, #124]	; (800695c <HAL_UART_MspInit+0x440>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <HAL_UART_MspInit+0x448>)
 80068e4:	4a20      	ldr	r2, [pc, #128]	; (8006968 <HAL_UART_MspInit+0x44c>)
 80068e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80068e8:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <HAL_UART_MspInit+0x448>)
 80068ea:	222c      	movs	r2, #44	; 0x2c
 80068ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <HAL_UART_MspInit+0x448>)
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <HAL_UART_MspInit+0x448>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <HAL_UART_MspInit+0x448>)
 80068fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006900:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006902:	4b18      	ldr	r3, [pc, #96]	; (8006964 <HAL_UART_MspInit+0x448>)
 8006904:	2200      	movs	r2, #0
 8006906:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <HAL_UART_MspInit+0x448>)
 800690a:	2200      	movs	r2, #0
 800690c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800690e:	4b15      	ldr	r3, [pc, #84]	; (8006964 <HAL_UART_MspInit+0x448>)
 8006910:	2200      	movs	r2, #0
 8006912:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006914:	4b13      	ldr	r3, [pc, #76]	; (8006964 <HAL_UART_MspInit+0x448>)
 8006916:	2200      	movs	r2, #0
 8006918:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_UART_MspInit+0x448>)
 800691c:	2200      	movs	r2, #0
 800691e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006920:	4810      	ldr	r0, [pc, #64]	; (8006964 <HAL_UART_MspInit+0x448>)
 8006922:	f000 fcf1 	bl	8007308 <HAL_DMA_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_UART_MspInit+0x414>
      Error_Handler();
 800692c:	f7fe f89c 	bl	8004a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a0c      	ldr	r2, [pc, #48]	; (8006964 <HAL_UART_MspInit+0x448>)
 8006934:	679a      	str	r2, [r3, #120]	; 0x78
 8006936:	4a0b      	ldr	r2, [pc, #44]	; (8006964 <HAL_UART_MspInit+0x448>)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800693c:	2200      	movs	r2, #0
 800693e:	2100      	movs	r1, #0
 8006940:	2026      	movs	r0, #38	; 0x26
 8006942:	f000 faa2 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006946:	2026      	movs	r0, #38	; 0x26
 8006948:	f000 fab9 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 800694c:	e0c4      	b.n	8006ad8 <HAL_UART_MspInit+0x5bc>
 800694e:	bf00      	nop
 8006950:	40004400 	.word	0x40004400
 8006954:	58024400 	.word	0x58024400
 8006958:	58020c00 	.word	0x58020c00
 800695c:	24001560 	.word	0x24001560
 8006960:	40020088 	.word	0x40020088
 8006964:	240015d8 	.word	0x240015d8
 8006968:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5b      	ldr	r2, [pc, #364]	; (8006ae0 <HAL_UART_MspInit+0x5c4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f040 80b0 	bne.w	8006ad8 <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006978:	2302      	movs	r3, #2
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800697c:	2300      	movs	r3, #0
 800697e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006986:	4618      	mov	r0, r3
 8006988:	f004 fcd2 	bl	800b330 <HAL_RCCEx_PeriphCLKConfig>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006992:	f7fe f869 	bl	8004a68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006996:	4b53      	ldr	r3, [pc, #332]	; (8006ae4 <HAL_UART_MspInit+0x5c8>)
 8006998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800699c:	4a51      	ldr	r2, [pc, #324]	; (8006ae4 <HAL_UART_MspInit+0x5c8>)
 800699e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80069a6:	4b4f      	ldr	r3, [pc, #316]	; (8006ae4 <HAL_UART_MspInit+0x5c8>)
 80069a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069b4:	4b4b      	ldr	r3, [pc, #300]	; (8006ae4 <HAL_UART_MspInit+0x5c8>)
 80069b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ba:	4a4a      	ldr	r2, [pc, #296]	; (8006ae4 <HAL_UART_MspInit+0x5c8>)
 80069bc:	f043 0308 	orr.w	r3, r3, #8
 80069c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069c4:	4b47      	ldr	r3, [pc, #284]	; (8006ae4 <HAL_UART_MspInit+0x5c8>)
 80069c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069da:	2302      	movs	r3, #2
 80069dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80069ec:	2307      	movs	r3, #7
 80069ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80069f6:	4619      	mov	r1, r3
 80069f8:	483b      	ldr	r0, [pc, #236]	; (8006ae8 <HAL_UART_MspInit+0x5cc>)
 80069fa:	f003 fac1 	bl	8009f80 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80069fe:	4b3b      	ldr	r3, [pc, #236]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a00:	4a3b      	ldr	r2, [pc, #236]	; (8006af0 <HAL_UART_MspInit+0x5d4>)
 8006a02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006a04:	4b39      	ldr	r3, [pc, #228]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a06:	222d      	movs	r2, #45	; 0x2d
 8006a08:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a10:	4b36      	ldr	r3, [pc, #216]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a16:	4b35      	ldr	r3, [pc, #212]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a1e:	4b33      	ldr	r3, [pc, #204]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a24:	4b31      	ldr	r3, [pc, #196]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006a2a:	4b30      	ldr	r3, [pc, #192]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a30:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a38:	4b2c      	ldr	r3, [pc, #176]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006a3e:	482b      	ldr	r0, [pc, #172]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a40:	f000 fc62 	bl	8007308 <HAL_DMA_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_UART_MspInit+0x532>
      Error_Handler();
 8006a4a:	f7fe f80d 	bl	8004a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a52:	67da      	str	r2, [r3, #124]	; 0x7c
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_UART_MspInit+0x5d0>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8006a5a:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a5c:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <HAL_UART_MspInit+0x5dc>)
 8006a5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006a60:	4b24      	ldr	r3, [pc, #144]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a62:	222e      	movs	r2, #46	; 0x2e
 8006a64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a66:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a68:	2240      	movs	r2, #64	; 0x40
 8006a6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a6c:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a72:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a7a:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a80:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006a86:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a92:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a96:	2204      	movs	r2, #4
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a9a:	4b16      	ldr	r3, [pc, #88]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006aa0:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006aac:	4811      	ldr	r0, [pc, #68]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006aae:	f000 fc2b 	bl	8007308 <HAL_DMA_Init>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 8006ab8:	f7fd ffd6 	bl	8004a68 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0d      	ldr	r2, [pc, #52]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	; (8006af4 <HAL_UART_MspInit+0x5d8>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2100      	movs	r1, #0
 8006acc:	2027      	movs	r0, #39	; 0x27
 8006ace:	f000 f9dc 	bl	8006e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006ad2:	2027      	movs	r0, #39	; 0x27
 8006ad4:	f000 f9f3 	bl	8006ebe <HAL_NVIC_EnableIRQ>
}
 8006ad8:	bf00      	nop
 8006ada:	37f8      	adds	r7, #248	; 0xf8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40004800 	.word	0x40004800
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	58020c00 	.word	0x58020c00
 8006aec:	24001650 	.word	0x24001650
 8006af0:	40020028 	.word	0x40020028
 8006af4:	240016c8 	.word	0x240016c8
 8006af8:	40020040 	.word	0x40020040

08006afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8006afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006b00:	f7fe fbf0 	bl	80052e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b04:	480c      	ldr	r0, [pc, #48]	; (8006b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006b06:	490d      	ldr	r1, [pc, #52]	; (8006b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006b08:	4a0d      	ldr	r2, [pc, #52]	; (8006b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b0c:	e002      	b.n	8006b14 <LoopCopyDataInit>

08006b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b12:	3304      	adds	r3, #4

08006b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b18:	d3f9      	bcc.n	8006b0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b1a:	4a0a      	ldr	r2, [pc, #40]	; (8006b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b1c:	4c0a      	ldr	r4, [pc, #40]	; (8006b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b20:	e001      	b.n	8006b26 <LoopFillZerobss>

08006b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b24:	3204      	adds	r2, #4

08006b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b28:	d3fb      	bcc.n	8006b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b2a:	f00b fc49 	bl	80123c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b2e:	f7fd fc27 	bl	8004380 <main>
  bx  lr
 8006b32:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006b34:	24001d58 	.word	0x24001d58
  ldr r0, =_sdata
 8006b38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006b3c:	24000414 	.word	0x24000414
  ldr r2, =_sidata
 8006b40:	08016c34 	.word	0x08016c34
  ldr r2, =_sbss
 8006b44:	24000414 	.word	0x24000414
  ldr r4, =_ebss
 8006b48:	24001754 	.word	0x24001754

08006b4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b4c:	e7fe      	b.n	8006b4c <ADC3_IRQHandler>
	...

08006b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b56:	2003      	movs	r0, #3
 8006b58:	f000 f98c 	bl	8006e74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b5c:	f004 fa12 	bl	800af84 <HAL_RCC_GetSysClockFreq>
 8006b60:	4602      	mov	r2, r0
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <HAL_Init+0x68>)
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	4913      	ldr	r1, [pc, #76]	; (8006bbc <HAL_Init+0x6c>)
 8006b6e:	5ccb      	ldrb	r3, [r1, r3]
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
 8006b78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <HAL_Init+0x68>)
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	4a0e      	ldr	r2, [pc, #56]	; (8006bbc <HAL_Init+0x6c>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <HAL_Init+0x70>)
 8006b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b94:	4a0b      	ldr	r2, [pc, #44]	; (8006bc4 <HAL_Init+0x74>)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f000 f814 	bl	8006bc8 <HAL_InitTick>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e002      	b.n	8006bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006baa:	f7fe f97f 	bl	8004eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	08014d38 	.word	0x08014d38
 8006bc0:	24000238 	.word	0x24000238
 8006bc4:	24000234 	.word	0x24000234

08006bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006bd0:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <HAL_InitTick+0x60>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e021      	b.n	8006c20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006bdc:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <HAL_InitTick+0x64>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <HAL_InitTick+0x60>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	4619      	mov	r1, r3
 8006be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f971 	bl	8006eda <HAL_SYSTICK_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e00e      	b.n	8006c20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b0f      	cmp	r3, #15
 8006c06:	d80a      	bhi.n	8006c1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c10:	f000 f93b 	bl	8006e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c14:	4a06      	ldr	r2, [pc, #24]	; (8006c30 <HAL_InitTick+0x68>)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e000      	b.n	8006c20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	24000240 	.word	0x24000240
 8006c2c:	24000234 	.word	0x24000234
 8006c30:	2400023c 	.word	0x2400023c

08006c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <HAL_IncTick+0x20>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <HAL_IncTick+0x24>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4413      	add	r3, r2
 8006c44:	4a04      	ldr	r2, [pc, #16]	; (8006c58 <HAL_IncTick+0x24>)
 8006c46:	6013      	str	r3, [r2, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	24000240 	.word	0x24000240
 8006c58:	24001740 	.word	0x24001740

08006c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_GetTick+0x14>)
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	24001740 	.word	0x24001740

08006c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c7c:	f7ff ffee 	bl	8006c5c <HAL_GetTick>
 8006c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c8c:	d005      	beq.n	8006c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <HAL_Delay+0x44>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c9a:	bf00      	nop
 8006c9c:	f7ff ffde 	bl	8006c5c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d8f7      	bhi.n	8006c9c <HAL_Delay+0x28>
  {
  }
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	24000240 	.word	0x24000240

08006cbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006cc0:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <HAL_GetREVID+0x14>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	0c1b      	lsrs	r3, r3, #16
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	5c001000 	.word	0x5c001000

08006cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <__NVIC_SetPriorityGrouping+0x40>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <__NVIC_SetPriorityGrouping+0x44>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d02:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <__NVIC_SetPriorityGrouping+0x40>)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	60d3      	str	r3, [r2, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	e000ed00 	.word	0xe000ed00
 8006d18:	05fa0000 	.word	0x05fa0000

08006d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <__NVIC_GetPriorityGrouping+0x18>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 0307 	and.w	r3, r3, #7
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	db0b      	blt.n	8006d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d4a:	88fb      	ldrh	r3, [r7, #6]
 8006d4c:	f003 021f 	and.w	r2, r3, #31
 8006d50:	4907      	ldr	r1, [pc, #28]	; (8006d70 <__NVIC_EnableIRQ+0x38>)
 8006d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	2001      	movs	r0, #1
 8006d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	e000e100 	.word	0xe000e100

08006d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	db0a      	blt.n	8006d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	490c      	ldr	r1, [pc, #48]	; (8006dc0 <__NVIC_SetPriority+0x4c>)
 8006d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d92:	0112      	lsls	r2, r2, #4
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	440b      	add	r3, r1
 8006d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d9c:	e00a      	b.n	8006db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	4908      	ldr	r1, [pc, #32]	; (8006dc4 <__NVIC_SetPriority+0x50>)
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	3b04      	subs	r3, #4
 8006dac:	0112      	lsls	r2, r2, #4
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	440b      	add	r3, r1
 8006db2:	761a      	strb	r2, [r3, #24]
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	e000e100 	.word	0xe000e100
 8006dc4:	e000ed00 	.word	0xe000ed00

08006dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b089      	sub	sp, #36	; 0x24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f1c3 0307 	rsb	r3, r3, #7
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	bf28      	it	cs
 8006de6:	2304      	movcs	r3, #4
 8006de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	3304      	adds	r3, #4
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d902      	bls.n	8006df8 <NVIC_EncodePriority+0x30>
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3b03      	subs	r3, #3
 8006df6:	e000      	b.n	8006dfa <NVIC_EncodePriority+0x32>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	43da      	mvns	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1a:	43d9      	mvns	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e20:	4313      	orrs	r3, r2
         );
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3724      	adds	r7, #36	; 0x24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e40:	d301      	bcc.n	8006e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e42:	2301      	movs	r3, #1
 8006e44:	e00f      	b.n	8006e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e46:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <SysTick_Config+0x40>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e4e:	210f      	movs	r1, #15
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e54:	f7ff ff8e 	bl	8006d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <SysTick_Config+0x40>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <SysTick_Config+0x40>)
 8006e60:	2207      	movs	r2, #7
 8006e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	e000e010 	.word	0xe000e010

08006e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff29 	bl	8006cd4 <__NVIC_SetPriorityGrouping>
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	4603      	mov	r3, r0
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e98:	f7ff ff40 	bl	8006d1c <__NVIC_GetPriorityGrouping>
 8006e9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	6978      	ldr	r0, [r7, #20]
 8006ea4:	f7ff ff90 	bl	8006dc8 <NVIC_EncodePriority>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ff5f 	bl	8006d74 <__NVIC_SetPriority>
}
 8006eb6:	bf00      	nop
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ff33 	bl	8006d38 <__NVIC_EnableIRQ>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ffa4 	bl	8006e30 <SysTick_Config>
 8006ee8:	4603      	mov	r3, r0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006ef6:	f000 f802 	bl	8006efe <HAL_SYSTICK_Callback>
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006efe:	b480      	push	{r7}
 8006f00:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e054      	b.n	8006fc8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7f5b      	ldrb	r3, [r3, #29]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb f994 	bl	800225c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	791b      	ldrb	r3, [r3, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10c      	bne.n	8006f5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_CRC_Init+0xc4>)
 8006f48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0218 	bic.w	r2, r2, #24
 8006f58:	609a      	str	r2, [r3, #8]
 8006f5a:	e00c      	b.n	8006f76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6899      	ldr	r1, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f948 	bl	80071fc <HAL_CRCEx_Polynomial_Set>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e028      	b.n	8006fc8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	795b      	ldrb	r3, [r3, #5]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f86:	611a      	str	r2, [r3, #16]
 8006f88:	e004      	b.n	8006f94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6912      	ldr	r2, [r2, #16]
 8006f92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695a      	ldr	r2, [r3, #20]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699a      	ldr	r2, [r3, #24]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	04c11db7 	.word	0x04c11db7

08006fd4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d006      	beq.n	8007010 <HAL_CRC_Calculate+0x3c>
 8007002:	2b03      	cmp	r3, #3
 8007004:	d829      	bhi.n	800705a <HAL_CRC_Calculate+0x86>
 8007006:	2b01      	cmp	r3, #1
 8007008:	d019      	beq.n	800703e <HAL_CRC_Calculate+0x6a>
 800700a:	2b02      	cmp	r3, #2
 800700c:	d01e      	beq.n	800704c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800700e:	e024      	b.n	800705a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e00a      	b.n	800702c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3301      	adds	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d3f0      	bcc.n	8007016 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	613b      	str	r3, [r7, #16]
      break;
 800703c:	e00e      	b.n	800705c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f812 	bl	800706c <CRC_Handle_8>
 8007048:	6138      	str	r0, [r7, #16]
      break;
 800704a:	e007      	b.n	800705c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f899 	bl	8007188 <CRC_Handle_16>
 8007056:	6138      	str	r0, [r7, #16]
      break;
 8007058:	e000      	b.n	800705c <HAL_CRC_Calculate+0x88>
      break;
 800705a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007062:	693b      	ldr	r3, [r7, #16]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	; 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007078:	2300      	movs	r3, #0
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e023      	b.n	80070c6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	4413      	add	r3, r2
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	3301      	adds	r3, #1
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	440b      	add	r3, r1
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007098:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3302      	adds	r3, #2
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	440b      	add	r3, r1
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80070a8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	3303      	adds	r3, #3
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	440b      	add	r3, r1
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80070bc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80070be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	089b      	lsrs	r3, r3, #2
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d3d6      	bcc.n	800707e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04d      	beq.n	8007176 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d107      	bne.n	80070f4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	4413      	add	r3, r2
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d116      	bne.n	800712c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	4413      	add	r3, r2
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	b21a      	sxth	r2, r3
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	3301      	adds	r3, #1
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	440b      	add	r3, r1
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	b21b      	sxth	r3, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	b21b      	sxth	r3, r3
 800711e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	8b7a      	ldrh	r2, [r7, #26]
 800712a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b03      	cmp	r3, #3
 8007134:	d11f      	bne.n	8007176 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	4413      	add	r3, r2
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	b21a      	sxth	r2, r3
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	3301      	adds	r3, #1
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	440b      	add	r3, r1
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b21b      	sxth	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	b21b      	sxth	r3, r3
 8007156:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	8b7a      	ldrh	r2, [r7, #26]
 8007162:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	3302      	adds	r3, #2
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3724      	adds	r7, #36	; 0x24
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e013      	b.n	80071c2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	041a      	lsls	r2, r3, #16
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	3302      	adds	r3, #2
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	440b      	add	r3, r1
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	3301      	adds	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d3e6      	bcc.n	800719a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4413      	add	r3, r2
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800720c:	231f      	movs	r3, #31
 800720e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007210:	bf00      	nop
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1e5a      	subs	r2, r3, #1
 8007216:	613a      	str	r2, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <HAL_CRCEx_Polynomial_Set+0x34>
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b18      	cmp	r3, #24
 8007234:	d846      	bhi.n	80072c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <HAL_CRCEx_Polynomial_Set+0x40>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	080072cb 	.word	0x080072cb
 8007240:	080072c5 	.word	0x080072c5
 8007244:	080072c5 	.word	0x080072c5
 8007248:	080072c5 	.word	0x080072c5
 800724c:	080072c5 	.word	0x080072c5
 8007250:	080072c5 	.word	0x080072c5
 8007254:	080072c5 	.word	0x080072c5
 8007258:	080072c5 	.word	0x080072c5
 800725c:	080072b9 	.word	0x080072b9
 8007260:	080072c5 	.word	0x080072c5
 8007264:	080072c5 	.word	0x080072c5
 8007268:	080072c5 	.word	0x080072c5
 800726c:	080072c5 	.word	0x080072c5
 8007270:	080072c5 	.word	0x080072c5
 8007274:	080072c5 	.word	0x080072c5
 8007278:	080072c5 	.word	0x080072c5
 800727c:	080072ad 	.word	0x080072ad
 8007280:	080072c5 	.word	0x080072c5
 8007284:	080072c5 	.word	0x080072c5
 8007288:	080072c5 	.word	0x080072c5
 800728c:	080072c5 	.word	0x080072c5
 8007290:	080072c5 	.word	0x080072c5
 8007294:	080072c5 	.word	0x080072c5
 8007298:	080072c5 	.word	0x080072c5
 800729c:	080072a1 	.word	0x080072a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2b06      	cmp	r3, #6
 80072a4:	d913      	bls.n	80072ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072aa:	e010      	b.n	80072ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b07      	cmp	r3, #7
 80072b0:	d90f      	bls.n	80072d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072b6:	e00c      	b.n	80072d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d90b      	bls.n	80072d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80072c2:	e008      	b.n	80072d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
      break;
 80072c8:	e006      	b.n	80072d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072ca:	bf00      	nop
 80072cc:	e004      	b.n	80072d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072ce:	bf00      	nop
 80072d0:	e002      	b.n	80072d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80072d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f023 0118 	bic.w	r1, r3, #24
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007310:	f7ff fca4 	bl	8006c5c <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e316      	b.n	800794e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a66      	ldr	r2, [pc, #408]	; (80074c0 <HAL_DMA_Init+0x1b8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d04a      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a65      	ldr	r2, [pc, #404]	; (80074c4 <HAL_DMA_Init+0x1bc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d045      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a63      	ldr	r2, [pc, #396]	; (80074c8 <HAL_DMA_Init+0x1c0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d040      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a62      	ldr	r2, [pc, #392]	; (80074cc <HAL_DMA_Init+0x1c4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d03b      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <HAL_DMA_Init+0x1c8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d036      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a5f      	ldr	r2, [pc, #380]	; (80074d4 <HAL_DMA_Init+0x1cc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d031      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a5d      	ldr	r2, [pc, #372]	; (80074d8 <HAL_DMA_Init+0x1d0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d02c      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a5c      	ldr	r2, [pc, #368]	; (80074dc <HAL_DMA_Init+0x1d4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d027      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a5a      	ldr	r2, [pc, #360]	; (80074e0 <HAL_DMA_Init+0x1d8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d022      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a59      	ldr	r2, [pc, #356]	; (80074e4 <HAL_DMA_Init+0x1dc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d01d      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a57      	ldr	r2, [pc, #348]	; (80074e8 <HAL_DMA_Init+0x1e0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d018      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a56      	ldr	r2, [pc, #344]	; (80074ec <HAL_DMA_Init+0x1e4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d013      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a54      	ldr	r2, [pc, #336]	; (80074f0 <HAL_DMA_Init+0x1e8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00e      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a53      	ldr	r2, [pc, #332]	; (80074f4 <HAL_DMA_Init+0x1ec>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d009      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a51      	ldr	r2, [pc, #324]	; (80074f8 <HAL_DMA_Init+0x1f0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_DMA_Init+0xb8>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a50      	ldr	r2, [pc, #320]	; (80074fc <HAL_DMA_Init+0x1f4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d101      	bne.n	80073c4 <HAL_DMA_Init+0xbc>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <HAL_DMA_Init+0xbe>
 80073c4:	2300      	movs	r3, #0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 813b 	beq.w	8007642 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a37      	ldr	r2, [pc, #220]	; (80074c0 <HAL_DMA_Init+0x1b8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d04a      	beq.n	800747c <HAL_DMA_Init+0x174>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a36      	ldr	r2, [pc, #216]	; (80074c4 <HAL_DMA_Init+0x1bc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d045      	beq.n	800747c <HAL_DMA_Init+0x174>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a34      	ldr	r2, [pc, #208]	; (80074c8 <HAL_DMA_Init+0x1c0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d040      	beq.n	800747c <HAL_DMA_Init+0x174>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a33      	ldr	r2, [pc, #204]	; (80074cc <HAL_DMA_Init+0x1c4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d03b      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a31      	ldr	r2, [pc, #196]	; (80074d0 <HAL_DMA_Init+0x1c8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d036      	beq.n	800747c <HAL_DMA_Init+0x174>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <HAL_DMA_Init+0x1cc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d031      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_DMA_Init+0x1d0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d02c      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <HAL_DMA_Init+0x1d4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d027      	beq.n	800747c <HAL_DMA_Init+0x174>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2b      	ldr	r2, [pc, #172]	; (80074e0 <HAL_DMA_Init+0x1d8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d022      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <HAL_DMA_Init+0x1dc>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d01d      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a28      	ldr	r2, [pc, #160]	; (80074e8 <HAL_DMA_Init+0x1e0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d018      	beq.n	800747c <HAL_DMA_Init+0x174>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a27      	ldr	r2, [pc, #156]	; (80074ec <HAL_DMA_Init+0x1e4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d013      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a25      	ldr	r2, [pc, #148]	; (80074f0 <HAL_DMA_Init+0x1e8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00e      	beq.n	800747c <HAL_DMA_Init+0x174>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a24      	ldr	r2, [pc, #144]	; (80074f4 <HAL_DMA_Init+0x1ec>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d009      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a22      	ldr	r2, [pc, #136]	; (80074f8 <HAL_DMA_Init+0x1f0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d004      	beq.n	800747c <HAL_DMA_Init+0x174>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a21      	ldr	r2, [pc, #132]	; (80074fc <HAL_DMA_Init+0x1f4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d108      	bne.n	800748e <HAL_DMA_Init+0x186>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0201 	bic.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	e007      	b.n	800749e <HAL_DMA_Init+0x196>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800749e:	e02f      	b.n	8007500 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074a0:	f7ff fbdc 	bl	8006c5c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b05      	cmp	r3, #5
 80074ac:	d928      	bls.n	8007500 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2203      	movs	r2, #3
 80074b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e246      	b.n	800794e <HAL_DMA_Init+0x646>
 80074c0:	40020010 	.word	0x40020010
 80074c4:	40020028 	.word	0x40020028
 80074c8:	40020040 	.word	0x40020040
 80074cc:	40020058 	.word	0x40020058
 80074d0:	40020070 	.word	0x40020070
 80074d4:	40020088 	.word	0x40020088
 80074d8:	400200a0 	.word	0x400200a0
 80074dc:	400200b8 	.word	0x400200b8
 80074e0:	40020410 	.word	0x40020410
 80074e4:	40020428 	.word	0x40020428
 80074e8:	40020440 	.word	0x40020440
 80074ec:	40020458 	.word	0x40020458
 80074f0:	40020470 	.word	0x40020470
 80074f4:	40020488 	.word	0x40020488
 80074f8:	400204a0 	.word	0x400204a0
 80074fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1c8      	bne.n	80074a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4b83      	ldr	r3, [pc, #524]	; (8007728 <HAL_DMA_Init+0x420>)
 800751a:	4013      	ands	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007526:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007532:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800753e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b04      	cmp	r3, #4
 8007552:	d107      	bne.n	8007564 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	4313      	orrs	r3, r2
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	4313      	orrs	r3, r2
 8007562:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007564:	4b71      	ldr	r3, [pc, #452]	; (800772c <HAL_DMA_Init+0x424>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	4b71      	ldr	r3, [pc, #452]	; (8007730 <HAL_DMA_Init+0x428>)
 800756a:	4013      	ands	r3, r2
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007570:	d328      	bcc.n	80075c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b28      	cmp	r3, #40	; 0x28
 8007578:	d903      	bls.n	8007582 <HAL_DMA_Init+0x27a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b2e      	cmp	r3, #46	; 0x2e
 8007580:	d917      	bls.n	80075b2 <HAL_DMA_Init+0x2aa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b3e      	cmp	r3, #62	; 0x3e
 8007588:	d903      	bls.n	8007592 <HAL_DMA_Init+0x28a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b42      	cmp	r3, #66	; 0x42
 8007590:	d90f      	bls.n	80075b2 <HAL_DMA_Init+0x2aa>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b46      	cmp	r3, #70	; 0x46
 8007598:	d903      	bls.n	80075a2 <HAL_DMA_Init+0x29a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b48      	cmp	r3, #72	; 0x48
 80075a0:	d907      	bls.n	80075b2 <HAL_DMA_Init+0x2aa>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b4e      	cmp	r3, #78	; 0x4e
 80075a8:	d905      	bls.n	80075b6 <HAL_DMA_Init+0x2ae>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b52      	cmp	r3, #82	; 0x52
 80075b0:	d801      	bhi.n	80075b6 <HAL_DMA_Init+0x2ae>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <HAL_DMA_Init+0x2b0>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d117      	bne.n	800761e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00e      	beq.n	800761e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f002 fb33 	bl	8009c6c <DMA_CheckFifoParam>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2240      	movs	r2, #64	; 0x40
 8007610:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e197      	b.n	800794e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f002 fa6e 	bl	8009b08 <DMA_CalcBaseAndBitshift>
 800762c:	4603      	mov	r3, r0
 800762e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	223f      	movs	r2, #63	; 0x3f
 800763a:	409a      	lsls	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	609a      	str	r2, [r3, #8]
 8007640:	e0cd      	b.n	80077de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a3b      	ldr	r2, [pc, #236]	; (8007734 <HAL_DMA_Init+0x42c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d022      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a39      	ldr	r2, [pc, #228]	; (8007738 <HAL_DMA_Init+0x430>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01d      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a38      	ldr	r2, [pc, #224]	; (800773c <HAL_DMA_Init+0x434>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a36      	ldr	r2, [pc, #216]	; (8007740 <HAL_DMA_Init+0x438>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a35      	ldr	r2, [pc, #212]	; (8007744 <HAL_DMA_Init+0x43c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a33      	ldr	r2, [pc, #204]	; (8007748 <HAL_DMA_Init+0x440>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a32      	ldr	r2, [pc, #200]	; (800774c <HAL_DMA_Init+0x444>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_DMA_Init+0x38a>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a30      	ldr	r2, [pc, #192]	; (8007750 <HAL_DMA_Init+0x448>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d101      	bne.n	8007696 <HAL_DMA_Init+0x38e>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <HAL_DMA_Init+0x390>
 8007696:	2300      	movs	r3, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8097 	beq.w	80077cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a24      	ldr	r2, [pc, #144]	; (8007734 <HAL_DMA_Init+0x42c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d021      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a22      	ldr	r2, [pc, #136]	; (8007738 <HAL_DMA_Init+0x430>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01c      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <HAL_DMA_Init+0x434>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d017      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_DMA_Init+0x438>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d012      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_DMA_Init+0x43c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00d      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <HAL_DMA_Init+0x440>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d008      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_DMA_Init+0x444>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <HAL_DMA_Init+0x3e4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_DMA_Init+0x448>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4b12      	ldr	r3, [pc, #72]	; (8007754 <HAL_DMA_Init+0x44c>)
 800770a:	4013      	ands	r3, r2
 800770c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d020      	beq.n	8007758 <HAL_DMA_Init+0x450>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d102      	bne.n	8007724 <HAL_DMA_Init+0x41c>
 800771e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007722:	e01a      	b.n	800775a <HAL_DMA_Init+0x452>
 8007724:	2300      	movs	r3, #0
 8007726:	e018      	b.n	800775a <HAL_DMA_Init+0x452>
 8007728:	fe10803f 	.word	0xfe10803f
 800772c:	5c001000 	.word	0x5c001000
 8007730:	ffff0000 	.word	0xffff0000
 8007734:	58025408 	.word	0x58025408
 8007738:	5802541c 	.word	0x5802541c
 800773c:	58025430 	.word	0x58025430
 8007740:	58025444 	.word	0x58025444
 8007744:	58025458 	.word	0x58025458
 8007748:	5802546c 	.word	0x5802546c
 800774c:	58025480 	.word	0x58025480
 8007750:	58025494 	.word	0x58025494
 8007754:	fffe000f 	.word	0xfffe000f
 8007758:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	68d2      	ldr	r2, [r2, #12]
 800775e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007788:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <HAL_DMA_Init+0x650>)
 80077a0:	4413      	add	r3, r2
 80077a2:	4a6e      	ldr	r2, [pc, #440]	; (800795c <HAL_DMA_Init+0x654>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	009a      	lsls	r2, r3, #2
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f002 f9a9 	bl	8009b08 <DMA_CalcBaseAndBitshift>
 80077b6:	4603      	mov	r3, r0
 80077b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	2201      	movs	r2, #1
 80077c4:	409a      	lsls	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	605a      	str	r2, [r3, #4]
 80077ca:	e008      	b.n	80077de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2240      	movs	r2, #64	; 0x40
 80077d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0b7      	b.n	800794e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a5f      	ldr	r2, [pc, #380]	; (8007960 <HAL_DMA_Init+0x658>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d072      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a5d      	ldr	r2, [pc, #372]	; (8007964 <HAL_DMA_Init+0x65c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d06d      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a5c      	ldr	r2, [pc, #368]	; (8007968 <HAL_DMA_Init+0x660>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d068      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a5a      	ldr	r2, [pc, #360]	; (800796c <HAL_DMA_Init+0x664>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d063      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a59      	ldr	r2, [pc, #356]	; (8007970 <HAL_DMA_Init+0x668>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d05e      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a57      	ldr	r2, [pc, #348]	; (8007974 <HAL_DMA_Init+0x66c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d059      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a56      	ldr	r2, [pc, #344]	; (8007978 <HAL_DMA_Init+0x670>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d054      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a54      	ldr	r2, [pc, #336]	; (800797c <HAL_DMA_Init+0x674>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d04f      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a53      	ldr	r2, [pc, #332]	; (8007980 <HAL_DMA_Init+0x678>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d04a      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a51      	ldr	r2, [pc, #324]	; (8007984 <HAL_DMA_Init+0x67c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d045      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a50      	ldr	r2, [pc, #320]	; (8007988 <HAL_DMA_Init+0x680>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d040      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a4e      	ldr	r2, [pc, #312]	; (800798c <HAL_DMA_Init+0x684>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d03b      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a4d      	ldr	r2, [pc, #308]	; (8007990 <HAL_DMA_Init+0x688>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d036      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a4b      	ldr	r2, [pc, #300]	; (8007994 <HAL_DMA_Init+0x68c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d031      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a4a      	ldr	r2, [pc, #296]	; (8007998 <HAL_DMA_Init+0x690>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d02c      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a48      	ldr	r2, [pc, #288]	; (800799c <HAL_DMA_Init+0x694>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d027      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a47      	ldr	r2, [pc, #284]	; (80079a0 <HAL_DMA_Init+0x698>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a45      	ldr	r2, [pc, #276]	; (80079a4 <HAL_DMA_Init+0x69c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d01d      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a44      	ldr	r2, [pc, #272]	; (80079a8 <HAL_DMA_Init+0x6a0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a42      	ldr	r2, [pc, #264]	; (80079ac <HAL_DMA_Init+0x6a4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a41      	ldr	r2, [pc, #260]	; (80079b0 <HAL_DMA_Init+0x6a8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a3f      	ldr	r2, [pc, #252]	; (80079b4 <HAL_DMA_Init+0x6ac>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a3e      	ldr	r2, [pc, #248]	; (80079b8 <HAL_DMA_Init+0x6b0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_DMA_Init+0x5c6>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <HAL_DMA_Init+0x6b4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d101      	bne.n	80078d2 <HAL_DMA_Init+0x5ca>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <HAL_DMA_Init+0x5cc>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d032      	beq.n	800793e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f002 fa43 	bl	8009d64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d102      	bne.n	80078ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007900:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <HAL_DMA_Init+0x624>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	2b08      	cmp	r3, #8
 8007910:	d80c      	bhi.n	800792c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f002 fac0 	bl	8009e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	e008      	b.n	800793e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	a7fdabf8 	.word	0xa7fdabf8
 800795c:	cccccccd 	.word	0xcccccccd
 8007960:	40020010 	.word	0x40020010
 8007964:	40020028 	.word	0x40020028
 8007968:	40020040 	.word	0x40020040
 800796c:	40020058 	.word	0x40020058
 8007970:	40020070 	.word	0x40020070
 8007974:	40020088 	.word	0x40020088
 8007978:	400200a0 	.word	0x400200a0
 800797c:	400200b8 	.word	0x400200b8
 8007980:	40020410 	.word	0x40020410
 8007984:	40020428 	.word	0x40020428
 8007988:	40020440 	.word	0x40020440
 800798c:	40020458 	.word	0x40020458
 8007990:	40020470 	.word	0x40020470
 8007994:	40020488 	.word	0x40020488
 8007998:	400204a0 	.word	0x400204a0
 800799c:	400204b8 	.word	0x400204b8
 80079a0:	58025408 	.word	0x58025408
 80079a4:	5802541c 	.word	0x5802541c
 80079a8:	58025430 	.word	0x58025430
 80079ac:	58025444 	.word	0x58025444
 80079b0:	58025458 	.word	0x58025458
 80079b4:	5802546c 	.word	0x5802546c
 80079b8:	58025480 	.word	0x58025480
 80079bc:	58025494 	.word	0x58025494

080079c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e226      	b.n	8007e2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_DMA_Start_IT+0x2a>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e21f      	b.n	8007e2a <HAL_DMA_Start_IT+0x46a>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	f040 820a 	bne.w	8007e14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a68      	ldr	r2, [pc, #416]	; (8007bb4 <HAL_DMA_Start_IT+0x1f4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d04a      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a66      	ldr	r2, [pc, #408]	; (8007bb8 <HAL_DMA_Start_IT+0x1f8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d045      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a65      	ldr	r2, [pc, #404]	; (8007bbc <HAL_DMA_Start_IT+0x1fc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d040      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a63      	ldr	r2, [pc, #396]	; (8007bc0 <HAL_DMA_Start_IT+0x200>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d03b      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a62      	ldr	r2, [pc, #392]	; (8007bc4 <HAL_DMA_Start_IT+0x204>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d036      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a60      	ldr	r2, [pc, #384]	; (8007bc8 <HAL_DMA_Start_IT+0x208>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d031      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a5f      	ldr	r2, [pc, #380]	; (8007bcc <HAL_DMA_Start_IT+0x20c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d02c      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a5d      	ldr	r2, [pc, #372]	; (8007bd0 <HAL_DMA_Start_IT+0x210>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d027      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a5c      	ldr	r2, [pc, #368]	; (8007bd4 <HAL_DMA_Start_IT+0x214>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d022      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a5a      	ldr	r2, [pc, #360]	; (8007bd8 <HAL_DMA_Start_IT+0x218>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d01d      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a59      	ldr	r2, [pc, #356]	; (8007bdc <HAL_DMA_Start_IT+0x21c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d018      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a57      	ldr	r2, [pc, #348]	; (8007be0 <HAL_DMA_Start_IT+0x220>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a56      	ldr	r2, [pc, #344]	; (8007be4 <HAL_DMA_Start_IT+0x224>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00e      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a54      	ldr	r2, [pc, #336]	; (8007be8 <HAL_DMA_Start_IT+0x228>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a53      	ldr	r2, [pc, #332]	; (8007bec <HAL_DMA_Start_IT+0x22c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_DMA_Start_IT+0xee>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a51      	ldr	r2, [pc, #324]	; (8007bf0 <HAL_DMA_Start_IT+0x230>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d108      	bne.n	8007ac0 <HAL_DMA_Start_IT+0x100>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	e007      	b.n	8007ad0 <HAL_DMA_Start_IT+0x110>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f001 fe6a 	bl	80097b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a34      	ldr	r2, [pc, #208]	; (8007bb4 <HAL_DMA_Start_IT+0x1f4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d04a      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a33      	ldr	r2, [pc, #204]	; (8007bb8 <HAL_DMA_Start_IT+0x1f8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d045      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a31      	ldr	r2, [pc, #196]	; (8007bbc <HAL_DMA_Start_IT+0x1fc>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d040      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a30      	ldr	r2, [pc, #192]	; (8007bc0 <HAL_DMA_Start_IT+0x200>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d03b      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2e      	ldr	r2, [pc, #184]	; (8007bc4 <HAL_DMA_Start_IT+0x204>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d036      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2d      	ldr	r2, [pc, #180]	; (8007bc8 <HAL_DMA_Start_IT+0x208>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d031      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2b      	ldr	r2, [pc, #172]	; (8007bcc <HAL_DMA_Start_IT+0x20c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d02c      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a2a      	ldr	r2, [pc, #168]	; (8007bd0 <HAL_DMA_Start_IT+0x210>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d027      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a28      	ldr	r2, [pc, #160]	; (8007bd4 <HAL_DMA_Start_IT+0x214>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d022      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a27      	ldr	r2, [pc, #156]	; (8007bd8 <HAL_DMA_Start_IT+0x218>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d01d      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a25      	ldr	r2, [pc, #148]	; (8007bdc <HAL_DMA_Start_IT+0x21c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d018      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a24      	ldr	r2, [pc, #144]	; (8007be0 <HAL_DMA_Start_IT+0x220>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d013      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a22      	ldr	r2, [pc, #136]	; (8007be4 <HAL_DMA_Start_IT+0x224>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00e      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <HAL_DMA_Start_IT+0x228>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d009      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1f      	ldr	r2, [pc, #124]	; (8007bec <HAL_DMA_Start_IT+0x22c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d004      	beq.n	8007b7c <HAL_DMA_Start_IT+0x1bc>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <HAL_DMA_Start_IT+0x230>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d101      	bne.n	8007b80 <HAL_DMA_Start_IT+0x1c0>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e000      	b.n	8007b82 <HAL_DMA_Start_IT+0x1c2>
 8007b80:	2300      	movs	r3, #0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d036      	beq.n	8007bf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f023 021e 	bic.w	r2, r3, #30
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0216 	orr.w	r2, r2, #22
 8007b98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d03e      	beq.n	8007c20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0208 	orr.w	r2, r2, #8
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e035      	b.n	8007c20 <HAL_DMA_Start_IT+0x260>
 8007bb4:	40020010 	.word	0x40020010
 8007bb8:	40020028 	.word	0x40020028
 8007bbc:	40020040 	.word	0x40020040
 8007bc0:	40020058 	.word	0x40020058
 8007bc4:	40020070 	.word	0x40020070
 8007bc8:	40020088 	.word	0x40020088
 8007bcc:	400200a0 	.word	0x400200a0
 8007bd0:	400200b8 	.word	0x400200b8
 8007bd4:	40020410 	.word	0x40020410
 8007bd8:	40020428 	.word	0x40020428
 8007bdc:	40020440 	.word	0x40020440
 8007be0:	40020458 	.word	0x40020458
 8007be4:	40020470 	.word	0x40020470
 8007be8:	40020488 	.word	0x40020488
 8007bec:	400204a0 	.word	0x400204a0
 8007bf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f023 020e 	bic.w	r2, r3, #14
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 020a 	orr.w	r2, r2, #10
 8007c06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0204 	orr.w	r2, r2, #4
 8007c1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a83      	ldr	r2, [pc, #524]	; (8007e34 <HAL_DMA_Start_IT+0x474>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d072      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a82      	ldr	r2, [pc, #520]	; (8007e38 <HAL_DMA_Start_IT+0x478>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d06d      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a80      	ldr	r2, [pc, #512]	; (8007e3c <HAL_DMA_Start_IT+0x47c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d068      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a7f      	ldr	r2, [pc, #508]	; (8007e40 <HAL_DMA_Start_IT+0x480>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d063      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a7d      	ldr	r2, [pc, #500]	; (8007e44 <HAL_DMA_Start_IT+0x484>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d05e      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a7c      	ldr	r2, [pc, #496]	; (8007e48 <HAL_DMA_Start_IT+0x488>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d059      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a7a      	ldr	r2, [pc, #488]	; (8007e4c <HAL_DMA_Start_IT+0x48c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d054      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a79      	ldr	r2, [pc, #484]	; (8007e50 <HAL_DMA_Start_IT+0x490>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d04f      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a77      	ldr	r2, [pc, #476]	; (8007e54 <HAL_DMA_Start_IT+0x494>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d04a      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a76      	ldr	r2, [pc, #472]	; (8007e58 <HAL_DMA_Start_IT+0x498>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d045      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a74      	ldr	r2, [pc, #464]	; (8007e5c <HAL_DMA_Start_IT+0x49c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d040      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a73      	ldr	r2, [pc, #460]	; (8007e60 <HAL_DMA_Start_IT+0x4a0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d03b      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a71      	ldr	r2, [pc, #452]	; (8007e64 <HAL_DMA_Start_IT+0x4a4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d036      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a70      	ldr	r2, [pc, #448]	; (8007e68 <HAL_DMA_Start_IT+0x4a8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d031      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a6e      	ldr	r2, [pc, #440]	; (8007e6c <HAL_DMA_Start_IT+0x4ac>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d02c      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a6d      	ldr	r2, [pc, #436]	; (8007e70 <HAL_DMA_Start_IT+0x4b0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d027      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a6b      	ldr	r2, [pc, #428]	; (8007e74 <HAL_DMA_Start_IT+0x4b4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d022      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a6a      	ldr	r2, [pc, #424]	; (8007e78 <HAL_DMA_Start_IT+0x4b8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d01d      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a68      	ldr	r2, [pc, #416]	; (8007e7c <HAL_DMA_Start_IT+0x4bc>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d018      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a67      	ldr	r2, [pc, #412]	; (8007e80 <HAL_DMA_Start_IT+0x4c0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d013      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a65      	ldr	r2, [pc, #404]	; (8007e84 <HAL_DMA_Start_IT+0x4c4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00e      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a64      	ldr	r2, [pc, #400]	; (8007e88 <HAL_DMA_Start_IT+0x4c8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d009      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a62      	ldr	r2, [pc, #392]	; (8007e8c <HAL_DMA_Start_IT+0x4cc>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_DMA_Start_IT+0x350>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a61      	ldr	r2, [pc, #388]	; (8007e90 <HAL_DMA_Start_IT+0x4d0>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d101      	bne.n	8007d14 <HAL_DMA_Start_IT+0x354>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <HAL_DMA_Start_IT+0x356>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01a      	beq.n	8007d50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a37      	ldr	r2, [pc, #220]	; (8007e34 <HAL_DMA_Start_IT+0x474>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d04a      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a36      	ldr	r2, [pc, #216]	; (8007e38 <HAL_DMA_Start_IT+0x478>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d045      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a34      	ldr	r2, [pc, #208]	; (8007e3c <HAL_DMA_Start_IT+0x47c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d040      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a33      	ldr	r2, [pc, #204]	; (8007e40 <HAL_DMA_Start_IT+0x480>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d03b      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a31      	ldr	r2, [pc, #196]	; (8007e44 <HAL_DMA_Start_IT+0x484>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d036      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <HAL_DMA_Start_IT+0x488>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d031      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2e      	ldr	r2, [pc, #184]	; (8007e4c <HAL_DMA_Start_IT+0x48c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d02c      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a2d      	ldr	r2, [pc, #180]	; (8007e50 <HAL_DMA_Start_IT+0x490>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d027      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a2b      	ldr	r2, [pc, #172]	; (8007e54 <HAL_DMA_Start_IT+0x494>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d022      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a2a      	ldr	r2, [pc, #168]	; (8007e58 <HAL_DMA_Start_IT+0x498>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d01d      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a28      	ldr	r2, [pc, #160]	; (8007e5c <HAL_DMA_Start_IT+0x49c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d018      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a27      	ldr	r2, [pc, #156]	; (8007e60 <HAL_DMA_Start_IT+0x4a0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <HAL_DMA_Start_IT+0x4a4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00e      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a24      	ldr	r2, [pc, #144]	; (8007e68 <HAL_DMA_Start_IT+0x4a8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a22      	ldr	r2, [pc, #136]	; (8007e6c <HAL_DMA_Start_IT+0x4ac>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d004      	beq.n	8007df0 <HAL_DMA_Start_IT+0x430>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a21      	ldr	r2, [pc, #132]	; (8007e70 <HAL_DMA_Start_IT+0x4b0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d108      	bne.n	8007e02 <HAL_DMA_Start_IT+0x442>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e012      	b.n	8007e28 <HAL_DMA_Start_IT+0x468>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0201 	orr.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e009      	b.n	8007e28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40020010 	.word	0x40020010
 8007e38:	40020028 	.word	0x40020028
 8007e3c:	40020040 	.word	0x40020040
 8007e40:	40020058 	.word	0x40020058
 8007e44:	40020070 	.word	0x40020070
 8007e48:	40020088 	.word	0x40020088
 8007e4c:	400200a0 	.word	0x400200a0
 8007e50:	400200b8 	.word	0x400200b8
 8007e54:	40020410 	.word	0x40020410
 8007e58:	40020428 	.word	0x40020428
 8007e5c:	40020440 	.word	0x40020440
 8007e60:	40020458 	.word	0x40020458
 8007e64:	40020470 	.word	0x40020470
 8007e68:	40020488 	.word	0x40020488
 8007e6c:	400204a0 	.word	0x400204a0
 8007e70:	400204b8 	.word	0x400204b8
 8007e74:	58025408 	.word	0x58025408
 8007e78:	5802541c 	.word	0x5802541c
 8007e7c:	58025430 	.word	0x58025430
 8007e80:	58025444 	.word	0x58025444
 8007e84:	58025458 	.word	0x58025458
 8007e88:	5802546c 	.word	0x5802546c
 8007e8c:	58025480 	.word	0x58025480
 8007e90:	58025494 	.word	0x58025494

08007e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007e9c:	f7fe fede 	bl	8006c5c <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e2dc      	b.n	8008466 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d008      	beq.n	8007eca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2280      	movs	r2, #128	; 0x80
 8007ebc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e2cd      	b.n	8008466 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a76      	ldr	r2, [pc, #472]	; (80080a8 <HAL_DMA_Abort+0x214>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d04a      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a74      	ldr	r2, [pc, #464]	; (80080ac <HAL_DMA_Abort+0x218>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d045      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a73      	ldr	r2, [pc, #460]	; (80080b0 <HAL_DMA_Abort+0x21c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d040      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a71      	ldr	r2, [pc, #452]	; (80080b4 <HAL_DMA_Abort+0x220>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d03b      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a70      	ldr	r2, [pc, #448]	; (80080b8 <HAL_DMA_Abort+0x224>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d036      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6e      	ldr	r2, [pc, #440]	; (80080bc <HAL_DMA_Abort+0x228>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d031      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a6d      	ldr	r2, [pc, #436]	; (80080c0 <HAL_DMA_Abort+0x22c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d02c      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a6b      	ldr	r2, [pc, #428]	; (80080c4 <HAL_DMA_Abort+0x230>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d027      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a6a      	ldr	r2, [pc, #424]	; (80080c8 <HAL_DMA_Abort+0x234>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d022      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a68      	ldr	r2, [pc, #416]	; (80080cc <HAL_DMA_Abort+0x238>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01d      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a67      	ldr	r2, [pc, #412]	; (80080d0 <HAL_DMA_Abort+0x23c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d018      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a65      	ldr	r2, [pc, #404]	; (80080d4 <HAL_DMA_Abort+0x240>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a64      	ldr	r2, [pc, #400]	; (80080d8 <HAL_DMA_Abort+0x244>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00e      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a62      	ldr	r2, [pc, #392]	; (80080dc <HAL_DMA_Abort+0x248>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a61      	ldr	r2, [pc, #388]	; (80080e0 <HAL_DMA_Abort+0x24c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <HAL_DMA_Abort+0xd6>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a5f      	ldr	r2, [pc, #380]	; (80080e4 <HAL_DMA_Abort+0x250>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d101      	bne.n	8007f6e <HAL_DMA_Abort+0xda>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <HAL_DMA_Abort+0xdc>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d013      	beq.n	8007f9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 021e 	bic.w	r2, r2, #30
 8007f82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695a      	ldr	r2, [r3, #20]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	e00a      	b.n	8007fb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 020e 	bic.w	r2, r2, #14
 8007faa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3c      	ldr	r2, [pc, #240]	; (80080a8 <HAL_DMA_Abort+0x214>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d072      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a3a      	ldr	r2, [pc, #232]	; (80080ac <HAL_DMA_Abort+0x218>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d06d      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a39      	ldr	r2, [pc, #228]	; (80080b0 <HAL_DMA_Abort+0x21c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d068      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a37      	ldr	r2, [pc, #220]	; (80080b4 <HAL_DMA_Abort+0x220>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d063      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a36      	ldr	r2, [pc, #216]	; (80080b8 <HAL_DMA_Abort+0x224>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d05e      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a34      	ldr	r2, [pc, #208]	; (80080bc <HAL_DMA_Abort+0x228>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d059      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a33      	ldr	r2, [pc, #204]	; (80080c0 <HAL_DMA_Abort+0x22c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d054      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a31      	ldr	r2, [pc, #196]	; (80080c4 <HAL_DMA_Abort+0x230>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d04f      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a30      	ldr	r2, [pc, #192]	; (80080c8 <HAL_DMA_Abort+0x234>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d04a      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2e      	ldr	r2, [pc, #184]	; (80080cc <HAL_DMA_Abort+0x238>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d045      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a2d      	ldr	r2, [pc, #180]	; (80080d0 <HAL_DMA_Abort+0x23c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d040      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a2b      	ldr	r2, [pc, #172]	; (80080d4 <HAL_DMA_Abort+0x240>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d03b      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <HAL_DMA_Abort+0x244>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d036      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a28      	ldr	r2, [pc, #160]	; (80080dc <HAL_DMA_Abort+0x248>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d031      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a27      	ldr	r2, [pc, #156]	; (80080e0 <HAL_DMA_Abort+0x24c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d02c      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a25      	ldr	r2, [pc, #148]	; (80080e4 <HAL_DMA_Abort+0x250>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d027      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a24      	ldr	r2, [pc, #144]	; (80080e8 <HAL_DMA_Abort+0x254>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d022      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a22      	ldr	r2, [pc, #136]	; (80080ec <HAL_DMA_Abort+0x258>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d01d      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a21      	ldr	r2, [pc, #132]	; (80080f0 <HAL_DMA_Abort+0x25c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d018      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1f      	ldr	r2, [pc, #124]	; (80080f4 <HAL_DMA_Abort+0x260>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1e      	ldr	r2, [pc, #120]	; (80080f8 <HAL_DMA_Abort+0x264>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00e      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <HAL_DMA_Abort+0x268>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d009      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <HAL_DMA_Abort+0x26c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <HAL_DMA_Abort+0x20e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a19      	ldr	r2, [pc, #100]	; (8008104 <HAL_DMA_Abort+0x270>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d132      	bne.n	8008108 <HAL_DMA_Abort+0x274>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e031      	b.n	800810a <HAL_DMA_Abort+0x276>
 80080a6:	bf00      	nop
 80080a8:	40020010 	.word	0x40020010
 80080ac:	40020028 	.word	0x40020028
 80080b0:	40020040 	.word	0x40020040
 80080b4:	40020058 	.word	0x40020058
 80080b8:	40020070 	.word	0x40020070
 80080bc:	40020088 	.word	0x40020088
 80080c0:	400200a0 	.word	0x400200a0
 80080c4:	400200b8 	.word	0x400200b8
 80080c8:	40020410 	.word	0x40020410
 80080cc:	40020428 	.word	0x40020428
 80080d0:	40020440 	.word	0x40020440
 80080d4:	40020458 	.word	0x40020458
 80080d8:	40020470 	.word	0x40020470
 80080dc:	40020488 	.word	0x40020488
 80080e0:	400204a0 	.word	0x400204a0
 80080e4:	400204b8 	.word	0x400204b8
 80080e8:	58025408 	.word	0x58025408
 80080ec:	5802541c 	.word	0x5802541c
 80080f0:	58025430 	.word	0x58025430
 80080f4:	58025444 	.word	0x58025444
 80080f8:	58025458 	.word	0x58025458
 80080fc:	5802546c 	.word	0x5802546c
 8008100:	58025480 	.word	0x58025480
 8008104:	58025494 	.word	0x58025494
 8008108:	2300      	movs	r3, #0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800811c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a6d      	ldr	r2, [pc, #436]	; (80082d8 <HAL_DMA_Abort+0x444>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d04a      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a6b      	ldr	r2, [pc, #428]	; (80082dc <HAL_DMA_Abort+0x448>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d045      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a6a      	ldr	r2, [pc, #424]	; (80082e0 <HAL_DMA_Abort+0x44c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d040      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a68      	ldr	r2, [pc, #416]	; (80082e4 <HAL_DMA_Abort+0x450>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d03b      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a67      	ldr	r2, [pc, #412]	; (80082e8 <HAL_DMA_Abort+0x454>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d036      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a65      	ldr	r2, [pc, #404]	; (80082ec <HAL_DMA_Abort+0x458>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d031      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a64      	ldr	r2, [pc, #400]	; (80082f0 <HAL_DMA_Abort+0x45c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d02c      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a62      	ldr	r2, [pc, #392]	; (80082f4 <HAL_DMA_Abort+0x460>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d027      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a61      	ldr	r2, [pc, #388]	; (80082f8 <HAL_DMA_Abort+0x464>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d022      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a5f      	ldr	r2, [pc, #380]	; (80082fc <HAL_DMA_Abort+0x468>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d01d      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a5e      	ldr	r2, [pc, #376]	; (8008300 <HAL_DMA_Abort+0x46c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d018      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a5c      	ldr	r2, [pc, #368]	; (8008304 <HAL_DMA_Abort+0x470>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a5b      	ldr	r2, [pc, #364]	; (8008308 <HAL_DMA_Abort+0x474>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00e      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a59      	ldr	r2, [pc, #356]	; (800830c <HAL_DMA_Abort+0x478>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d009      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a58      	ldr	r2, [pc, #352]	; (8008310 <HAL_DMA_Abort+0x47c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d004      	beq.n	80081be <HAL_DMA_Abort+0x32a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a56      	ldr	r2, [pc, #344]	; (8008314 <HAL_DMA_Abort+0x480>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d108      	bne.n	80081d0 <HAL_DMA_Abort+0x33c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0201 	bic.w	r2, r2, #1
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e007      	b.n	80081e0 <HAL_DMA_Abort+0x34c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80081e0:	e013      	b.n	800820a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081e2:	f7fe fd3b 	bl	8006c5c <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	d90c      	bls.n	800820a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2203      	movs	r2, #3
 80081fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e12d      	b.n	8008466 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e5      	bne.n	80081e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a2f      	ldr	r2, [pc, #188]	; (80082d8 <HAL_DMA_Abort+0x444>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04a      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a2d      	ldr	r2, [pc, #180]	; (80082dc <HAL_DMA_Abort+0x448>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d045      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a2c      	ldr	r2, [pc, #176]	; (80082e0 <HAL_DMA_Abort+0x44c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <HAL_DMA_Abort+0x450>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d03b      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a29      	ldr	r2, [pc, #164]	; (80082e8 <HAL_DMA_Abort+0x454>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d036      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a27      	ldr	r2, [pc, #156]	; (80082ec <HAL_DMA_Abort+0x458>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d031      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a26      	ldr	r2, [pc, #152]	; (80082f0 <HAL_DMA_Abort+0x45c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d02c      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a24      	ldr	r2, [pc, #144]	; (80082f4 <HAL_DMA_Abort+0x460>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d027      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a23      	ldr	r2, [pc, #140]	; (80082f8 <HAL_DMA_Abort+0x464>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a21      	ldr	r2, [pc, #132]	; (80082fc <HAL_DMA_Abort+0x468>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01d      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a20      	ldr	r2, [pc, #128]	; (8008300 <HAL_DMA_Abort+0x46c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1e      	ldr	r2, [pc, #120]	; (8008304 <HAL_DMA_Abort+0x470>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1d      	ldr	r2, [pc, #116]	; (8008308 <HAL_DMA_Abort+0x474>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a1b      	ldr	r2, [pc, #108]	; (800830c <HAL_DMA_Abort+0x478>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1a      	ldr	r2, [pc, #104]	; (8008310 <HAL_DMA_Abort+0x47c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <HAL_DMA_Abort+0x422>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a18      	ldr	r2, [pc, #96]	; (8008314 <HAL_DMA_Abort+0x480>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d101      	bne.n	80082ba <HAL_DMA_Abort+0x426>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <HAL_DMA_Abort+0x428>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d02b      	beq.n	8008318 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	223f      	movs	r2, #63	; 0x3f
 80082d0:	409a      	lsls	r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	609a      	str	r2, [r3, #8]
 80082d6:	e02a      	b.n	800832e <HAL_DMA_Abort+0x49a>
 80082d8:	40020010 	.word	0x40020010
 80082dc:	40020028 	.word	0x40020028
 80082e0:	40020040 	.word	0x40020040
 80082e4:	40020058 	.word	0x40020058
 80082e8:	40020070 	.word	0x40020070
 80082ec:	40020088 	.word	0x40020088
 80082f0:	400200a0 	.word	0x400200a0
 80082f4:	400200b8 	.word	0x400200b8
 80082f8:	40020410 	.word	0x40020410
 80082fc:	40020428 	.word	0x40020428
 8008300:	40020440 	.word	0x40020440
 8008304:	40020458 	.word	0x40020458
 8008308:	40020470 	.word	0x40020470
 800830c:	40020488 	.word	0x40020488
 8008310:	400204a0 	.word	0x400204a0
 8008314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2201      	movs	r2, #1
 8008328:	409a      	lsls	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a4f      	ldr	r2, [pc, #316]	; (8008470 <HAL_DMA_Abort+0x5dc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d072      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a4d      	ldr	r2, [pc, #308]	; (8008474 <HAL_DMA_Abort+0x5e0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d06d      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a4c      	ldr	r2, [pc, #304]	; (8008478 <HAL_DMA_Abort+0x5e4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d068      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a4a      	ldr	r2, [pc, #296]	; (800847c <HAL_DMA_Abort+0x5e8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d063      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a49      	ldr	r2, [pc, #292]	; (8008480 <HAL_DMA_Abort+0x5ec>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d05e      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a47      	ldr	r2, [pc, #284]	; (8008484 <HAL_DMA_Abort+0x5f0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d059      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a46      	ldr	r2, [pc, #280]	; (8008488 <HAL_DMA_Abort+0x5f4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d054      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a44      	ldr	r2, [pc, #272]	; (800848c <HAL_DMA_Abort+0x5f8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d04f      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a43      	ldr	r2, [pc, #268]	; (8008490 <HAL_DMA_Abort+0x5fc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d04a      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a41      	ldr	r2, [pc, #260]	; (8008494 <HAL_DMA_Abort+0x600>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d045      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a40      	ldr	r2, [pc, #256]	; (8008498 <HAL_DMA_Abort+0x604>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d040      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a3e      	ldr	r2, [pc, #248]	; (800849c <HAL_DMA_Abort+0x608>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d03b      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a3d      	ldr	r2, [pc, #244]	; (80084a0 <HAL_DMA_Abort+0x60c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d036      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a3b      	ldr	r2, [pc, #236]	; (80084a4 <HAL_DMA_Abort+0x610>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d031      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a3a      	ldr	r2, [pc, #232]	; (80084a8 <HAL_DMA_Abort+0x614>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d02c      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a38      	ldr	r2, [pc, #224]	; (80084ac <HAL_DMA_Abort+0x618>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d027      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a37      	ldr	r2, [pc, #220]	; (80084b0 <HAL_DMA_Abort+0x61c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d022      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a35      	ldr	r2, [pc, #212]	; (80084b4 <HAL_DMA_Abort+0x620>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01d      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a34      	ldr	r2, [pc, #208]	; (80084b8 <HAL_DMA_Abort+0x624>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d018      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a32      	ldr	r2, [pc, #200]	; (80084bc <HAL_DMA_Abort+0x628>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d013      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a31      	ldr	r2, [pc, #196]	; (80084c0 <HAL_DMA_Abort+0x62c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00e      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a2f      	ldr	r2, [pc, #188]	; (80084c4 <HAL_DMA_Abort+0x630>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d009      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2e      	ldr	r2, [pc, #184]	; (80084c8 <HAL_DMA_Abort+0x634>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d004      	beq.n	800841e <HAL_DMA_Abort+0x58a>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a2c      	ldr	r2, [pc, #176]	; (80084cc <HAL_DMA_Abort+0x638>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d101      	bne.n	8008422 <HAL_DMA_Abort+0x58e>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <HAL_DMA_Abort+0x590>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d015      	beq.n	8008454 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008430:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008448:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008452:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40020010 	.word	0x40020010
 8008474:	40020028 	.word	0x40020028
 8008478:	40020040 	.word	0x40020040
 800847c:	40020058 	.word	0x40020058
 8008480:	40020070 	.word	0x40020070
 8008484:	40020088 	.word	0x40020088
 8008488:	400200a0 	.word	0x400200a0
 800848c:	400200b8 	.word	0x400200b8
 8008490:	40020410 	.word	0x40020410
 8008494:	40020428 	.word	0x40020428
 8008498:	40020440 	.word	0x40020440
 800849c:	40020458 	.word	0x40020458
 80084a0:	40020470 	.word	0x40020470
 80084a4:	40020488 	.word	0x40020488
 80084a8:	400204a0 	.word	0x400204a0
 80084ac:	400204b8 	.word	0x400204b8
 80084b0:	58025408 	.word	0x58025408
 80084b4:	5802541c 	.word	0x5802541c
 80084b8:	58025430 	.word	0x58025430
 80084bc:	58025444 	.word	0x58025444
 80084c0:	58025458 	.word	0x58025458
 80084c4:	5802546c 	.word	0x5802546c
 80084c8:	58025480 	.word	0x58025480
 80084cc:	58025494 	.word	0x58025494

080084d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e237      	b.n	8008952 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d004      	beq.n	80084f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2280      	movs	r2, #128	; 0x80
 80084f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e22c      	b.n	8008952 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a5c      	ldr	r2, [pc, #368]	; (8008670 <HAL_DMA_Abort_IT+0x1a0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d04a      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a5b      	ldr	r2, [pc, #364]	; (8008674 <HAL_DMA_Abort_IT+0x1a4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d045      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a59      	ldr	r2, [pc, #356]	; (8008678 <HAL_DMA_Abort_IT+0x1a8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d040      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a58      	ldr	r2, [pc, #352]	; (800867c <HAL_DMA_Abort_IT+0x1ac>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d03b      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a56      	ldr	r2, [pc, #344]	; (8008680 <HAL_DMA_Abort_IT+0x1b0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d036      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a55      	ldr	r2, [pc, #340]	; (8008684 <HAL_DMA_Abort_IT+0x1b4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d031      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a53      	ldr	r2, [pc, #332]	; (8008688 <HAL_DMA_Abort_IT+0x1b8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d02c      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a52      	ldr	r2, [pc, #328]	; (800868c <HAL_DMA_Abort_IT+0x1bc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d027      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a50      	ldr	r2, [pc, #320]	; (8008690 <HAL_DMA_Abort_IT+0x1c0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d022      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a4f      	ldr	r2, [pc, #316]	; (8008694 <HAL_DMA_Abort_IT+0x1c4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d01d      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a4d      	ldr	r2, [pc, #308]	; (8008698 <HAL_DMA_Abort_IT+0x1c8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d018      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a4c      	ldr	r2, [pc, #304]	; (800869c <HAL_DMA_Abort_IT+0x1cc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d013      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a4a      	ldr	r2, [pc, #296]	; (80086a0 <HAL_DMA_Abort_IT+0x1d0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00e      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a49      	ldr	r2, [pc, #292]	; (80086a4 <HAL_DMA_Abort_IT+0x1d4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a47      	ldr	r2, [pc, #284]	; (80086a8 <HAL_DMA_Abort_IT+0x1d8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <HAL_DMA_Abort_IT+0xc8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a46      	ldr	r2, [pc, #280]	; (80086ac <HAL_DMA_Abort_IT+0x1dc>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d101      	bne.n	800859c <HAL_DMA_Abort_IT+0xcc>
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <HAL_DMA_Abort_IT+0xce>
 800859c:	2300      	movs	r3, #0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8086 	beq.w	80086b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2204      	movs	r2, #4
 80085a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a2f      	ldr	r2, [pc, #188]	; (8008670 <HAL_DMA_Abort_IT+0x1a0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d04a      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a2e      	ldr	r2, [pc, #184]	; (8008674 <HAL_DMA_Abort_IT+0x1a4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d045      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a2c      	ldr	r2, [pc, #176]	; (8008678 <HAL_DMA_Abort_IT+0x1a8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d040      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a2b      	ldr	r2, [pc, #172]	; (800867c <HAL_DMA_Abort_IT+0x1ac>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d03b      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a29      	ldr	r2, [pc, #164]	; (8008680 <HAL_DMA_Abort_IT+0x1b0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d036      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a28      	ldr	r2, [pc, #160]	; (8008684 <HAL_DMA_Abort_IT+0x1b4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d031      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a26      	ldr	r2, [pc, #152]	; (8008688 <HAL_DMA_Abort_IT+0x1b8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d02c      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a25      	ldr	r2, [pc, #148]	; (800868c <HAL_DMA_Abort_IT+0x1bc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d027      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a23      	ldr	r2, [pc, #140]	; (8008690 <HAL_DMA_Abort_IT+0x1c0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d022      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a22      	ldr	r2, [pc, #136]	; (8008694 <HAL_DMA_Abort_IT+0x1c4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d01d      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a20      	ldr	r2, [pc, #128]	; (8008698 <HAL_DMA_Abort_IT+0x1c8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d018      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1f      	ldr	r2, [pc, #124]	; (800869c <HAL_DMA_Abort_IT+0x1cc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d013      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <HAL_DMA_Abort_IT+0x1d0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00e      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <HAL_DMA_Abort_IT+0x1d4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d009      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1a      	ldr	r2, [pc, #104]	; (80086a8 <HAL_DMA_Abort_IT+0x1d8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_DMA_Abort_IT+0x17c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a19      	ldr	r2, [pc, #100]	; (80086ac <HAL_DMA_Abort_IT+0x1dc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d108      	bne.n	800865e <HAL_DMA_Abort_IT+0x18e>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0201 	bic.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	e178      	b.n	8008950 <HAL_DMA_Abort_IT+0x480>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e16f      	b.n	8008950 <HAL_DMA_Abort_IT+0x480>
 8008670:	40020010 	.word	0x40020010
 8008674:	40020028 	.word	0x40020028
 8008678:	40020040 	.word	0x40020040
 800867c:	40020058 	.word	0x40020058
 8008680:	40020070 	.word	0x40020070
 8008684:	40020088 	.word	0x40020088
 8008688:	400200a0 	.word	0x400200a0
 800868c:	400200b8 	.word	0x400200b8
 8008690:	40020410 	.word	0x40020410
 8008694:	40020428 	.word	0x40020428
 8008698:	40020440 	.word	0x40020440
 800869c:	40020458 	.word	0x40020458
 80086a0:	40020470 	.word	0x40020470
 80086a4:	40020488 	.word	0x40020488
 80086a8:	400204a0 	.word	0x400204a0
 80086ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 020e 	bic.w	r2, r2, #14
 80086be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a6c      	ldr	r2, [pc, #432]	; (8008878 <HAL_DMA_Abort_IT+0x3a8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d04a      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a6b      	ldr	r2, [pc, #428]	; (800887c <HAL_DMA_Abort_IT+0x3ac>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d045      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a69      	ldr	r2, [pc, #420]	; (8008880 <HAL_DMA_Abort_IT+0x3b0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d040      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a68      	ldr	r2, [pc, #416]	; (8008884 <HAL_DMA_Abort_IT+0x3b4>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d03b      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a66      	ldr	r2, [pc, #408]	; (8008888 <HAL_DMA_Abort_IT+0x3b8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d036      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a65      	ldr	r2, [pc, #404]	; (800888c <HAL_DMA_Abort_IT+0x3bc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d031      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a63      	ldr	r2, [pc, #396]	; (8008890 <HAL_DMA_Abort_IT+0x3c0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d02c      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a62      	ldr	r2, [pc, #392]	; (8008894 <HAL_DMA_Abort_IT+0x3c4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d027      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a60      	ldr	r2, [pc, #384]	; (8008898 <HAL_DMA_Abort_IT+0x3c8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d022      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a5f      	ldr	r2, [pc, #380]	; (800889c <HAL_DMA_Abort_IT+0x3cc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d01d      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a5d      	ldr	r2, [pc, #372]	; (80088a0 <HAL_DMA_Abort_IT+0x3d0>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d018      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a5c      	ldr	r2, [pc, #368]	; (80088a4 <HAL_DMA_Abort_IT+0x3d4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d013      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a5a      	ldr	r2, [pc, #360]	; (80088a8 <HAL_DMA_Abort_IT+0x3d8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00e      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a59      	ldr	r2, [pc, #356]	; (80088ac <HAL_DMA_Abort_IT+0x3dc>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d009      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a57      	ldr	r2, [pc, #348]	; (80088b0 <HAL_DMA_Abort_IT+0x3e0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_DMA_Abort_IT+0x290>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a56      	ldr	r2, [pc, #344]	; (80088b4 <HAL_DMA_Abort_IT+0x3e4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d108      	bne.n	8008772 <HAL_DMA_Abort_IT+0x2a2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	e007      	b.n	8008782 <HAL_DMA_Abort_IT+0x2b2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0201 	bic.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a3c      	ldr	r2, [pc, #240]	; (8008878 <HAL_DMA_Abort_IT+0x3a8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d072      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a3a      	ldr	r2, [pc, #232]	; (800887c <HAL_DMA_Abort_IT+0x3ac>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d06d      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a39      	ldr	r2, [pc, #228]	; (8008880 <HAL_DMA_Abort_IT+0x3b0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d068      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a37      	ldr	r2, [pc, #220]	; (8008884 <HAL_DMA_Abort_IT+0x3b4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d063      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a36      	ldr	r2, [pc, #216]	; (8008888 <HAL_DMA_Abort_IT+0x3b8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d05e      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a34      	ldr	r2, [pc, #208]	; (800888c <HAL_DMA_Abort_IT+0x3bc>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d059      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a33      	ldr	r2, [pc, #204]	; (8008890 <HAL_DMA_Abort_IT+0x3c0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d054      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a31      	ldr	r2, [pc, #196]	; (8008894 <HAL_DMA_Abort_IT+0x3c4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d04f      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a30      	ldr	r2, [pc, #192]	; (8008898 <HAL_DMA_Abort_IT+0x3c8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d04a      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a2e      	ldr	r2, [pc, #184]	; (800889c <HAL_DMA_Abort_IT+0x3cc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d045      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <HAL_DMA_Abort_IT+0x3d0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d040      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a2b      	ldr	r2, [pc, #172]	; (80088a4 <HAL_DMA_Abort_IT+0x3d4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d03b      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a2a      	ldr	r2, [pc, #168]	; (80088a8 <HAL_DMA_Abort_IT+0x3d8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d036      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a28      	ldr	r2, [pc, #160]	; (80088ac <HAL_DMA_Abort_IT+0x3dc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d031      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a27      	ldr	r2, [pc, #156]	; (80088b0 <HAL_DMA_Abort_IT+0x3e0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d02c      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a25      	ldr	r2, [pc, #148]	; (80088b4 <HAL_DMA_Abort_IT+0x3e4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d027      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a24      	ldr	r2, [pc, #144]	; (80088b8 <HAL_DMA_Abort_IT+0x3e8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d022      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a22      	ldr	r2, [pc, #136]	; (80088bc <HAL_DMA_Abort_IT+0x3ec>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01d      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a21      	ldr	r2, [pc, #132]	; (80088c0 <HAL_DMA_Abort_IT+0x3f0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1f      	ldr	r2, [pc, #124]	; (80088c4 <HAL_DMA_Abort_IT+0x3f4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <HAL_DMA_Abort_IT+0x3f8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_DMA_Abort_IT+0x3fc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1b      	ldr	r2, [pc, #108]	; (80088d0 <HAL_DMA_Abort_IT+0x400>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_DMA_Abort_IT+0x3a2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a19      	ldr	r2, [pc, #100]	; (80088d4 <HAL_DMA_Abort_IT+0x404>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d132      	bne.n	80088d8 <HAL_DMA_Abort_IT+0x408>
 8008872:	2301      	movs	r3, #1
 8008874:	e031      	b.n	80088da <HAL_DMA_Abort_IT+0x40a>
 8008876:	bf00      	nop
 8008878:	40020010 	.word	0x40020010
 800887c:	40020028 	.word	0x40020028
 8008880:	40020040 	.word	0x40020040
 8008884:	40020058 	.word	0x40020058
 8008888:	40020070 	.word	0x40020070
 800888c:	40020088 	.word	0x40020088
 8008890:	400200a0 	.word	0x400200a0
 8008894:	400200b8 	.word	0x400200b8
 8008898:	40020410 	.word	0x40020410
 800889c:	40020428 	.word	0x40020428
 80088a0:	40020440 	.word	0x40020440
 80088a4:	40020458 	.word	0x40020458
 80088a8:	40020470 	.word	0x40020470
 80088ac:	40020488 	.word	0x40020488
 80088b0:	400204a0 	.word	0x400204a0
 80088b4:	400204b8 	.word	0x400204b8
 80088b8:	58025408 	.word	0x58025408
 80088bc:	5802541c 	.word	0x5802541c
 80088c0:	58025430 	.word	0x58025430
 80088c4:	58025444 	.word	0x58025444
 80088c8:	58025458 	.word	0x58025458
 80088cc:	5802546c 	.word	0x5802546c
 80088d0:	58025480 	.word	0x58025480
 80088d4:	58025494 	.word	0x58025494
 80088d8:	2300      	movs	r3, #0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d028      	beq.n	8008930 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	2201      	movs	r2, #1
 80088fe:	409a      	lsls	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800890c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00c      	beq.n	8008930 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008924:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800892e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop

0800895c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008968:	4b67      	ldr	r3, [pc, #412]	; (8008b08 <HAL_DMA_IRQHandler+0x1ac>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a67      	ldr	r2, [pc, #412]	; (8008b0c <HAL_DMA_IRQHandler+0x1b0>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	0a9b      	lsrs	r3, r3, #10
 8008974:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008980:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a5f      	ldr	r2, [pc, #380]	; (8008b10 <HAL_DMA_IRQHandler+0x1b4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d04a      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a5d      	ldr	r2, [pc, #372]	; (8008b14 <HAL_DMA_IRQHandler+0x1b8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d045      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a5c      	ldr	r2, [pc, #368]	; (8008b18 <HAL_DMA_IRQHandler+0x1bc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d040      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a5a      	ldr	r2, [pc, #360]	; (8008b1c <HAL_DMA_IRQHandler+0x1c0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d03b      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a59      	ldr	r2, [pc, #356]	; (8008b20 <HAL_DMA_IRQHandler+0x1c4>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d036      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a57      	ldr	r2, [pc, #348]	; (8008b24 <HAL_DMA_IRQHandler+0x1c8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d031      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a56      	ldr	r2, [pc, #344]	; (8008b28 <HAL_DMA_IRQHandler+0x1cc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d02c      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a54      	ldr	r2, [pc, #336]	; (8008b2c <HAL_DMA_IRQHandler+0x1d0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d027      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a53      	ldr	r2, [pc, #332]	; (8008b30 <HAL_DMA_IRQHandler+0x1d4>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d022      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a51      	ldr	r2, [pc, #324]	; (8008b34 <HAL_DMA_IRQHandler+0x1d8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01d      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a50      	ldr	r2, [pc, #320]	; (8008b38 <HAL_DMA_IRQHandler+0x1dc>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d018      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a4e      	ldr	r2, [pc, #312]	; (8008b3c <HAL_DMA_IRQHandler+0x1e0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d013      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a4d      	ldr	r2, [pc, #308]	; (8008b40 <HAL_DMA_IRQHandler+0x1e4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00e      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a4b      	ldr	r2, [pc, #300]	; (8008b44 <HAL_DMA_IRQHandler+0x1e8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d009      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a4a      	ldr	r2, [pc, #296]	; (8008b48 <HAL_DMA_IRQHandler+0x1ec>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_DMA_IRQHandler+0xd2>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a48      	ldr	r2, [pc, #288]	; (8008b4c <HAL_DMA_IRQHandler+0x1f0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d101      	bne.n	8008a32 <HAL_DMA_IRQHandler+0xd6>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <HAL_DMA_IRQHandler+0xd8>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 842b 	beq.w	8009290 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3e:	f003 031f 	and.w	r3, r3, #31
 8008a42:	2208      	movs	r2, #8
 8008a44:	409a      	lsls	r2, r3
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 80a2 	beq.w	8008b94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2e      	ldr	r2, [pc, #184]	; (8008b10 <HAL_DMA_IRQHandler+0x1b4>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d04a      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2d      	ldr	r2, [pc, #180]	; (8008b14 <HAL_DMA_IRQHandler+0x1b8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d045      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2b      	ldr	r2, [pc, #172]	; (8008b18 <HAL_DMA_IRQHandler+0x1bc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d040      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a2a      	ldr	r2, [pc, #168]	; (8008b1c <HAL_DMA_IRQHandler+0x1c0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d03b      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a28      	ldr	r2, [pc, #160]	; (8008b20 <HAL_DMA_IRQHandler+0x1c4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d036      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a27      	ldr	r2, [pc, #156]	; (8008b24 <HAL_DMA_IRQHandler+0x1c8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d031      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a25      	ldr	r2, [pc, #148]	; (8008b28 <HAL_DMA_IRQHandler+0x1cc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d02c      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a24      	ldr	r2, [pc, #144]	; (8008b2c <HAL_DMA_IRQHandler+0x1d0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d027      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a22      	ldr	r2, [pc, #136]	; (8008b30 <HAL_DMA_IRQHandler+0x1d4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d022      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a21      	ldr	r2, [pc, #132]	; (8008b34 <HAL_DMA_IRQHandler+0x1d8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d01d      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_DMA_IRQHandler+0x1dc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d018      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <HAL_DMA_IRQHandler+0x1e0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <HAL_DMA_IRQHandler+0x1e4>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <HAL_DMA_IRQHandler+0x1e8>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <HAL_DMA_IRQHandler+0x1ec>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x194>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a18      	ldr	r2, [pc, #96]	; (8008b4c <HAL_DMA_IRQHandler+0x1f0>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d12f      	bne.n	8008b50 <HAL_DMA_IRQHandler+0x1f4>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bf14      	ite	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	2300      	moveq	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	e02e      	b.n	8008b64 <HAL_DMA_IRQHandler+0x208>
 8008b06:	bf00      	nop
 8008b08:	24000234 	.word	0x24000234
 8008b0c:	1b4e81b5 	.word	0x1b4e81b5
 8008b10:	40020010 	.word	0x40020010
 8008b14:	40020028 	.word	0x40020028
 8008b18:	40020040 	.word	0x40020040
 8008b1c:	40020058 	.word	0x40020058
 8008b20:	40020070 	.word	0x40020070
 8008b24:	40020088 	.word	0x40020088
 8008b28:	400200a0 	.word	0x400200a0
 8008b2c:	400200b8 	.word	0x400200b8
 8008b30:	40020410 	.word	0x40020410
 8008b34:	40020428 	.word	0x40020428
 8008b38:	40020440 	.word	0x40020440
 8008b3c:	40020458 	.word	0x40020458
 8008b40:	40020470 	.word	0x40020470
 8008b44:	40020488 	.word	0x40020488
 8008b48:	400204a0 	.word	0x400204a0
 8008b4c:	400204b8 	.word	0x400204b8
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bf14      	ite	ne
 8008b5e:	2301      	movne	r3, #1
 8008b60:	2300      	moveq	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d015      	beq.n	8008b94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0204 	bic.w	r2, r2, #4
 8008b76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	2208      	movs	r2, #8
 8008b82:	409a      	lsls	r2, r3
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8c:	f043 0201 	orr.w	r2, r3, #1
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d06e      	beq.n	8008c88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a69      	ldr	r2, [pc, #420]	; (8008d54 <HAL_DMA_IRQHandler+0x3f8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d04a      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a67      	ldr	r2, [pc, #412]	; (8008d58 <HAL_DMA_IRQHandler+0x3fc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d045      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a66      	ldr	r2, [pc, #408]	; (8008d5c <HAL_DMA_IRQHandler+0x400>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d040      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a64      	ldr	r2, [pc, #400]	; (8008d60 <HAL_DMA_IRQHandler+0x404>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d03b      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a63      	ldr	r2, [pc, #396]	; (8008d64 <HAL_DMA_IRQHandler+0x408>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d036      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a61      	ldr	r2, [pc, #388]	; (8008d68 <HAL_DMA_IRQHandler+0x40c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d031      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a60      	ldr	r2, [pc, #384]	; (8008d6c <HAL_DMA_IRQHandler+0x410>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d02c      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a5e      	ldr	r2, [pc, #376]	; (8008d70 <HAL_DMA_IRQHandler+0x414>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d027      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a5d      	ldr	r2, [pc, #372]	; (8008d74 <HAL_DMA_IRQHandler+0x418>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d022      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a5b      	ldr	r2, [pc, #364]	; (8008d78 <HAL_DMA_IRQHandler+0x41c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d01d      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a5a      	ldr	r2, [pc, #360]	; (8008d7c <HAL_DMA_IRQHandler+0x420>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d018      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a58      	ldr	r2, [pc, #352]	; (8008d80 <HAL_DMA_IRQHandler+0x424>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d013      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a57      	ldr	r2, [pc, #348]	; (8008d84 <HAL_DMA_IRQHandler+0x428>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00e      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a55      	ldr	r2, [pc, #340]	; (8008d88 <HAL_DMA_IRQHandler+0x42c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d009      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a54      	ldr	r2, [pc, #336]	; (8008d8c <HAL_DMA_IRQHandler+0x430>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d004      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x2ee>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a52      	ldr	r2, [pc, #328]	; (8008d90 <HAL_DMA_IRQHandler+0x434>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d10a      	bne.n	8008c60 <HAL_DMA_IRQHandler+0x304>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bf14      	ite	ne
 8008c58:	2301      	movne	r3, #1
 8008c5a:	2300      	moveq	r3, #0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	e003      	b.n	8008c68 <HAL_DMA_IRQHandler+0x30c>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00d      	beq.n	8008c88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	2201      	movs	r2, #1
 8008c76:	409a      	lsls	r2, r3
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c80:	f043 0202 	orr.w	r2, r3, #2
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8c:	f003 031f 	and.w	r3, r3, #31
 8008c90:	2204      	movs	r2, #4
 8008c92:	409a      	lsls	r2, r3
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	4013      	ands	r3, r2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 808f 	beq.w	8008dbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a2c      	ldr	r2, [pc, #176]	; (8008d54 <HAL_DMA_IRQHandler+0x3f8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d04a      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a2a      	ldr	r2, [pc, #168]	; (8008d58 <HAL_DMA_IRQHandler+0x3fc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d045      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a29      	ldr	r2, [pc, #164]	; (8008d5c <HAL_DMA_IRQHandler+0x400>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d040      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a27      	ldr	r2, [pc, #156]	; (8008d60 <HAL_DMA_IRQHandler+0x404>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d03b      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a26      	ldr	r2, [pc, #152]	; (8008d64 <HAL_DMA_IRQHandler+0x408>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d036      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a24      	ldr	r2, [pc, #144]	; (8008d68 <HAL_DMA_IRQHandler+0x40c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d031      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a23      	ldr	r2, [pc, #140]	; (8008d6c <HAL_DMA_IRQHandler+0x410>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d02c      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a21      	ldr	r2, [pc, #132]	; (8008d70 <HAL_DMA_IRQHandler+0x414>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d027      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a20      	ldr	r2, [pc, #128]	; (8008d74 <HAL_DMA_IRQHandler+0x418>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d022      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1e      	ldr	r2, [pc, #120]	; (8008d78 <HAL_DMA_IRQHandler+0x41c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01d      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a1d      	ldr	r2, [pc, #116]	; (8008d7c <HAL_DMA_IRQHandler+0x420>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d018      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a1b      	ldr	r2, [pc, #108]	; (8008d80 <HAL_DMA_IRQHandler+0x424>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a1a      	ldr	r2, [pc, #104]	; (8008d84 <HAL_DMA_IRQHandler+0x428>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00e      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <HAL_DMA_IRQHandler+0x42c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d009      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <HAL_DMA_IRQHandler+0x430>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d004      	beq.n	8008d3e <HAL_DMA_IRQHandler+0x3e2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a15      	ldr	r2, [pc, #84]	; (8008d90 <HAL_DMA_IRQHandler+0x434>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d12a      	bne.n	8008d94 <HAL_DMA_IRQHandler+0x438>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bf14      	ite	ne
 8008d4c:	2301      	movne	r3, #1
 8008d4e:	2300      	moveq	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	e023      	b.n	8008d9c <HAL_DMA_IRQHandler+0x440>
 8008d54:	40020010 	.word	0x40020010
 8008d58:	40020028 	.word	0x40020028
 8008d5c:	40020040 	.word	0x40020040
 8008d60:	40020058 	.word	0x40020058
 8008d64:	40020070 	.word	0x40020070
 8008d68:	40020088 	.word	0x40020088
 8008d6c:	400200a0 	.word	0x400200a0
 8008d70:	400200b8 	.word	0x400200b8
 8008d74:	40020410 	.word	0x40020410
 8008d78:	40020428 	.word	0x40020428
 8008d7c:	40020440 	.word	0x40020440
 8008d80:	40020458 	.word	0x40020458
 8008d84:	40020470 	.word	0x40020470
 8008d88:	40020488 	.word	0x40020488
 8008d8c:	400204a0 	.word	0x400204a0
 8008d90:	400204b8 	.word	0x400204b8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00d      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da4:	f003 031f 	and.w	r3, r3, #31
 8008da8:	2204      	movs	r2, #4
 8008daa:	409a      	lsls	r2, r3
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db4:	f043 0204 	orr.w	r2, r3, #4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc0:	f003 031f 	and.w	r3, r3, #31
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	409a      	lsls	r2, r3
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80a6 	beq.w	8008f1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a85      	ldr	r2, [pc, #532]	; (8008fec <HAL_DMA_IRQHandler+0x690>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d04a      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a83      	ldr	r2, [pc, #524]	; (8008ff0 <HAL_DMA_IRQHandler+0x694>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d045      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a82      	ldr	r2, [pc, #520]	; (8008ff4 <HAL_DMA_IRQHandler+0x698>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d040      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a80      	ldr	r2, [pc, #512]	; (8008ff8 <HAL_DMA_IRQHandler+0x69c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d03b      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a7f      	ldr	r2, [pc, #508]	; (8008ffc <HAL_DMA_IRQHandler+0x6a0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d036      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a7d      	ldr	r2, [pc, #500]	; (8009000 <HAL_DMA_IRQHandler+0x6a4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d031      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a7c      	ldr	r2, [pc, #496]	; (8009004 <HAL_DMA_IRQHandler+0x6a8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d02c      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a7a      	ldr	r2, [pc, #488]	; (8009008 <HAL_DMA_IRQHandler+0x6ac>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d027      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a79      	ldr	r2, [pc, #484]	; (800900c <HAL_DMA_IRQHandler+0x6b0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d022      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a77      	ldr	r2, [pc, #476]	; (8009010 <HAL_DMA_IRQHandler+0x6b4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d01d      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a76      	ldr	r2, [pc, #472]	; (8009014 <HAL_DMA_IRQHandler+0x6b8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d018      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a74      	ldr	r2, [pc, #464]	; (8009018 <HAL_DMA_IRQHandler+0x6bc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d013      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a73      	ldr	r2, [pc, #460]	; (800901c <HAL_DMA_IRQHandler+0x6c0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00e      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a71      	ldr	r2, [pc, #452]	; (8009020 <HAL_DMA_IRQHandler+0x6c4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d009      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a70      	ldr	r2, [pc, #448]	; (8009024 <HAL_DMA_IRQHandler+0x6c8>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d004      	beq.n	8008e72 <HAL_DMA_IRQHandler+0x516>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a6e      	ldr	r2, [pc, #440]	; (8009028 <HAL_DMA_IRQHandler+0x6cc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10a      	bne.n	8008e88 <HAL_DMA_IRQHandler+0x52c>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bf14      	ite	ne
 8008e80:	2301      	movne	r3, #1
 8008e82:	2300      	moveq	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	e009      	b.n	8008e9c <HAL_DMA_IRQHandler+0x540>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bf14      	ite	ne
 8008e96:	2301      	movne	r3, #1
 8008e98:	2300      	moveq	r3, #0
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d03e      	beq.n	8008f1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea4:	f003 031f 	and.w	r3, r3, #31
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	409a      	lsls	r2, r3
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d018      	beq.n	8008ef0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d108      	bne.n	8008ede <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d024      	beq.n	8008f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
 8008edc:	e01f      	b.n	8008f1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01b      	beq.n	8008f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	4798      	blx	r3
 8008eee:	e016      	b.n	8008f1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d107      	bne.n	8008f0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0208 	bic.w	r2, r2, #8
 8008f0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f22:	f003 031f 	and.w	r3, r3, #31
 8008f26:	2220      	movs	r2, #32
 8008f28:	409a      	lsls	r2, r3
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 8110 	beq.w	8009154 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2c      	ldr	r2, [pc, #176]	; (8008fec <HAL_DMA_IRQHandler+0x690>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d04a      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a2b      	ldr	r2, [pc, #172]	; (8008ff0 <HAL_DMA_IRQHandler+0x694>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d045      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a29      	ldr	r2, [pc, #164]	; (8008ff4 <HAL_DMA_IRQHandler+0x698>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d040      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a28      	ldr	r2, [pc, #160]	; (8008ff8 <HAL_DMA_IRQHandler+0x69c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d03b      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <HAL_DMA_IRQHandler+0x6a0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d036      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a25      	ldr	r2, [pc, #148]	; (8009000 <HAL_DMA_IRQHandler+0x6a4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d031      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a23      	ldr	r2, [pc, #140]	; (8009004 <HAL_DMA_IRQHandler+0x6a8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d02c      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a22      	ldr	r2, [pc, #136]	; (8009008 <HAL_DMA_IRQHandler+0x6ac>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d027      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a20      	ldr	r2, [pc, #128]	; (800900c <HAL_DMA_IRQHandler+0x6b0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d022      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <HAL_DMA_IRQHandler+0x6b4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d01d      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1d      	ldr	r2, [pc, #116]	; (8009014 <HAL_DMA_IRQHandler+0x6b8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d018      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1c      	ldr	r2, [pc, #112]	; (8009018 <HAL_DMA_IRQHandler+0x6bc>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d013      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a1a      	ldr	r2, [pc, #104]	; (800901c <HAL_DMA_IRQHandler+0x6c0>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00e      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a19      	ldr	r2, [pc, #100]	; (8009020 <HAL_DMA_IRQHandler+0x6c4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d009      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a17      	ldr	r2, [pc, #92]	; (8009024 <HAL_DMA_IRQHandler+0x6c8>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d004      	beq.n	8008fd4 <HAL_DMA_IRQHandler+0x678>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a16      	ldr	r2, [pc, #88]	; (8009028 <HAL_DMA_IRQHandler+0x6cc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d12b      	bne.n	800902c <HAL_DMA_IRQHandler+0x6d0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bf14      	ite	ne
 8008fe2:	2301      	movne	r3, #1
 8008fe4:	2300      	moveq	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	e02a      	b.n	8009040 <HAL_DMA_IRQHandler+0x6e4>
 8008fea:	bf00      	nop
 8008fec:	40020010 	.word	0x40020010
 8008ff0:	40020028 	.word	0x40020028
 8008ff4:	40020040 	.word	0x40020040
 8008ff8:	40020058 	.word	0x40020058
 8008ffc:	40020070 	.word	0x40020070
 8009000:	40020088 	.word	0x40020088
 8009004:	400200a0 	.word	0x400200a0
 8009008:	400200b8 	.word	0x400200b8
 800900c:	40020410 	.word	0x40020410
 8009010:	40020428 	.word	0x40020428
 8009014:	40020440 	.word	0x40020440
 8009018:	40020458 	.word	0x40020458
 800901c:	40020470 	.word	0x40020470
 8009020:	40020488 	.word	0x40020488
 8009024:	400204a0 	.word	0x400204a0
 8009028:	400204b8 	.word	0x400204b8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	bf14      	ite	ne
 800903a:	2301      	movne	r3, #1
 800903c:	2300      	moveq	r3, #0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8087 	beq.w	8009154 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2220      	movs	r2, #32
 8009050:	409a      	lsls	r2, r3
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b04      	cmp	r3, #4
 8009060:	d139      	bne.n	80090d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 0216 	bic.w	r2, r2, #22
 8009070:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695a      	ldr	r2, [r3, #20]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009080:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d103      	bne.n	8009092 <HAL_DMA_IRQHandler+0x736>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0208 	bic.w	r2, r2, #8
 80090a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a6:	f003 031f 	and.w	r3, r3, #31
 80090aa:	223f      	movs	r2, #63	; 0x3f
 80090ac:	409a      	lsls	r2, r3
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 834a 	beq.w	8009760 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
          }
          return;
 80090d4:	e344      	b.n	8009760 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d018      	beq.n	8009116 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d108      	bne.n	8009104 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d02c      	beq.n	8009154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
 8009102:	e027      	b.n	8009154 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d023      	beq.n	8009154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	4798      	blx	r3
 8009114:	e01e      	b.n	8009154 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10f      	bne.n	8009144 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0210 	bic.w	r2, r2, #16
 8009132:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8306 	beq.w	800976a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8088 	beq.w	800927c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2204      	movs	r2, #4
 8009170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a7a      	ldr	r2, [pc, #488]	; (8009364 <HAL_DMA_IRQHandler+0xa08>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d04a      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a79      	ldr	r2, [pc, #484]	; (8009368 <HAL_DMA_IRQHandler+0xa0c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d045      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a77      	ldr	r2, [pc, #476]	; (800936c <HAL_DMA_IRQHandler+0xa10>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d040      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a76      	ldr	r2, [pc, #472]	; (8009370 <HAL_DMA_IRQHandler+0xa14>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d03b      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a74      	ldr	r2, [pc, #464]	; (8009374 <HAL_DMA_IRQHandler+0xa18>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d036      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a73      	ldr	r2, [pc, #460]	; (8009378 <HAL_DMA_IRQHandler+0xa1c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d031      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a71      	ldr	r2, [pc, #452]	; (800937c <HAL_DMA_IRQHandler+0xa20>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d02c      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a70      	ldr	r2, [pc, #448]	; (8009380 <HAL_DMA_IRQHandler+0xa24>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d027      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a6e      	ldr	r2, [pc, #440]	; (8009384 <HAL_DMA_IRQHandler+0xa28>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d022      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a6d      	ldr	r2, [pc, #436]	; (8009388 <HAL_DMA_IRQHandler+0xa2c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d01d      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a6b      	ldr	r2, [pc, #428]	; (800938c <HAL_DMA_IRQHandler+0xa30>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d018      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a6a      	ldr	r2, [pc, #424]	; (8009390 <HAL_DMA_IRQHandler+0xa34>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d013      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a68      	ldr	r2, [pc, #416]	; (8009394 <HAL_DMA_IRQHandler+0xa38>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00e      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a67      	ldr	r2, [pc, #412]	; (8009398 <HAL_DMA_IRQHandler+0xa3c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d009      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a65      	ldr	r2, [pc, #404]	; (800939c <HAL_DMA_IRQHandler+0xa40>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d004      	beq.n	8009214 <HAL_DMA_IRQHandler+0x8b8>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a64      	ldr	r2, [pc, #400]	; (80093a0 <HAL_DMA_IRQHandler+0xa44>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d108      	bne.n	8009226 <HAL_DMA_IRQHandler+0x8ca>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0201 	bic.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e007      	b.n	8009236 <HAL_DMA_IRQHandler+0x8da>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0201 	bic.w	r2, r2, #1
 8009234:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923e:	429a      	cmp	r2, r3
 8009240:	d307      	bcc.n	8009252 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f2      	bne.n	8009236 <HAL_DMA_IRQHandler+0x8da>
 8009250:	e000      	b.n	8009254 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009252:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2203      	movs	r2, #3
 8009266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800926a:	e003      	b.n	8009274 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8272 	beq.w	800976a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
 800928e:	e26c      	b.n	800976a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a43      	ldr	r2, [pc, #268]	; (80093a4 <HAL_DMA_IRQHandler+0xa48>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d022      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a42      	ldr	r2, [pc, #264]	; (80093a8 <HAL_DMA_IRQHandler+0xa4c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d01d      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a40      	ldr	r2, [pc, #256]	; (80093ac <HAL_DMA_IRQHandler+0xa50>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d018      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a3f      	ldr	r2, [pc, #252]	; (80093b0 <HAL_DMA_IRQHandler+0xa54>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d013      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a3d      	ldr	r2, [pc, #244]	; (80093b4 <HAL_DMA_IRQHandler+0xa58>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d00e      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a3c      	ldr	r2, [pc, #240]	; (80093b8 <HAL_DMA_IRQHandler+0xa5c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d009      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a3a      	ldr	r2, [pc, #232]	; (80093bc <HAL_DMA_IRQHandler+0xa60>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d004      	beq.n	80092e0 <HAL_DMA_IRQHandler+0x984>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a39      	ldr	r2, [pc, #228]	; (80093c0 <HAL_DMA_IRQHandler+0xa64>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d101      	bne.n	80092e4 <HAL_DMA_IRQHandler+0x988>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <HAL_DMA_IRQHandler+0x98a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 823f 	beq.w	800976a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2204      	movs	r2, #4
 80092fe:	409a      	lsls	r2, r3
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 80cd 	beq.w	80094a4 <HAL_DMA_IRQHandler+0xb48>
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80c7 	beq.w	80094a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931a:	f003 031f 	and.w	r3, r3, #31
 800931e:	2204      	movs	r2, #4
 8009320:	409a      	lsls	r2, r3
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d049      	beq.n	80093c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8210 	beq.w	8009764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800934c:	e20a      	b.n	8009764 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 8206 	beq.w	8009764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009360:	e200      	b.n	8009764 <HAL_DMA_IRQHandler+0xe08>
 8009362:	bf00      	nop
 8009364:	40020010 	.word	0x40020010
 8009368:	40020028 	.word	0x40020028
 800936c:	40020040 	.word	0x40020040
 8009370:	40020058 	.word	0x40020058
 8009374:	40020070 	.word	0x40020070
 8009378:	40020088 	.word	0x40020088
 800937c:	400200a0 	.word	0x400200a0
 8009380:	400200b8 	.word	0x400200b8
 8009384:	40020410 	.word	0x40020410
 8009388:	40020428 	.word	0x40020428
 800938c:	40020440 	.word	0x40020440
 8009390:	40020458 	.word	0x40020458
 8009394:	40020470 	.word	0x40020470
 8009398:	40020488 	.word	0x40020488
 800939c:	400204a0 	.word	0x400204a0
 80093a0:	400204b8 	.word	0x400204b8
 80093a4:	58025408 	.word	0x58025408
 80093a8:	5802541c 	.word	0x5802541c
 80093ac:	58025430 	.word	0x58025430
 80093b0:	58025444 	.word	0x58025444
 80093b4:	58025458 	.word	0x58025458
 80093b8:	5802546c 	.word	0x5802546c
 80093bc:	58025480 	.word	0x58025480
 80093c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d160      	bne.n	8009490 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a7f      	ldr	r2, [pc, #508]	; (80095d0 <HAL_DMA_IRQHandler+0xc74>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d04a      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a7d      	ldr	r2, [pc, #500]	; (80095d4 <HAL_DMA_IRQHandler+0xc78>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d045      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a7c      	ldr	r2, [pc, #496]	; (80095d8 <HAL_DMA_IRQHandler+0xc7c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d040      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a7a      	ldr	r2, [pc, #488]	; (80095dc <HAL_DMA_IRQHandler+0xc80>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d03b      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a79      	ldr	r2, [pc, #484]	; (80095e0 <HAL_DMA_IRQHandler+0xc84>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d036      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a77      	ldr	r2, [pc, #476]	; (80095e4 <HAL_DMA_IRQHandler+0xc88>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d031      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a76      	ldr	r2, [pc, #472]	; (80095e8 <HAL_DMA_IRQHandler+0xc8c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d02c      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a74      	ldr	r2, [pc, #464]	; (80095ec <HAL_DMA_IRQHandler+0xc90>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d027      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a73      	ldr	r2, [pc, #460]	; (80095f0 <HAL_DMA_IRQHandler+0xc94>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d022      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a71      	ldr	r2, [pc, #452]	; (80095f4 <HAL_DMA_IRQHandler+0xc98>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d01d      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a70      	ldr	r2, [pc, #448]	; (80095f8 <HAL_DMA_IRQHandler+0xc9c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d018      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a6e      	ldr	r2, [pc, #440]	; (80095fc <HAL_DMA_IRQHandler+0xca0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d013      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a6d      	ldr	r2, [pc, #436]	; (8009600 <HAL_DMA_IRQHandler+0xca4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00e      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a6b      	ldr	r2, [pc, #428]	; (8009604 <HAL_DMA_IRQHandler+0xca8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d009      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a6a      	ldr	r2, [pc, #424]	; (8009608 <HAL_DMA_IRQHandler+0xcac>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_DMA_IRQHandler+0xb12>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a68      	ldr	r2, [pc, #416]	; (800960c <HAL_DMA_IRQHandler+0xcb0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d108      	bne.n	8009480 <HAL_DMA_IRQHandler+0xb24>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0208 	bic.w	r2, r2, #8
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e007      	b.n	8009490 <HAL_DMA_IRQHandler+0xb34>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0204 	bic.w	r2, r2, #4
 800948e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8165 	beq.w	8009764 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094a2:	e15f      	b.n	8009764 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a8:	f003 031f 	and.w	r3, r3, #31
 80094ac:	2202      	movs	r2, #2
 80094ae:	409a      	lsls	r2, r3
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	4013      	ands	r3, r2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 80c5 	beq.w	8009644 <HAL_DMA_IRQHandler+0xce8>
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80bf 	beq.w	8009644 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ca:	f003 031f 	and.w	r3, r3, #31
 80094ce:	2202      	movs	r2, #2
 80094d0:	409a      	lsls	r2, r3
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d018      	beq.n	8009512 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d109      	bne.n	80094fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 813a 	beq.w	8009768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094fc:	e134      	b.n	8009768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8130 	beq.w	8009768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009510:	e12a      	b.n	8009768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 8089 	bne.w	8009630 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a2b      	ldr	r2, [pc, #172]	; (80095d0 <HAL_DMA_IRQHandler+0xc74>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d04a      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a29      	ldr	r2, [pc, #164]	; (80095d4 <HAL_DMA_IRQHandler+0xc78>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d045      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a28      	ldr	r2, [pc, #160]	; (80095d8 <HAL_DMA_IRQHandler+0xc7c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d040      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a26      	ldr	r2, [pc, #152]	; (80095dc <HAL_DMA_IRQHandler+0xc80>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d03b      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a25      	ldr	r2, [pc, #148]	; (80095e0 <HAL_DMA_IRQHandler+0xc84>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d036      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a23      	ldr	r2, [pc, #140]	; (80095e4 <HAL_DMA_IRQHandler+0xc88>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d031      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a22      	ldr	r2, [pc, #136]	; (80095e8 <HAL_DMA_IRQHandler+0xc8c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d02c      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a20      	ldr	r2, [pc, #128]	; (80095ec <HAL_DMA_IRQHandler+0xc90>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d027      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a1f      	ldr	r2, [pc, #124]	; (80095f0 <HAL_DMA_IRQHandler+0xc94>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d022      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a1d      	ldr	r2, [pc, #116]	; (80095f4 <HAL_DMA_IRQHandler+0xc98>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d01d      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1c      	ldr	r2, [pc, #112]	; (80095f8 <HAL_DMA_IRQHandler+0xc9c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d018      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a1a      	ldr	r2, [pc, #104]	; (80095fc <HAL_DMA_IRQHandler+0xca0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d013      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a19      	ldr	r2, [pc, #100]	; (8009600 <HAL_DMA_IRQHandler+0xca4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d00e      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a17      	ldr	r2, [pc, #92]	; (8009604 <HAL_DMA_IRQHandler+0xca8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d009      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a16      	ldr	r2, [pc, #88]	; (8009608 <HAL_DMA_IRQHandler+0xcac>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d004      	beq.n	80095be <HAL_DMA_IRQHandler+0xc62>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a14      	ldr	r2, [pc, #80]	; (800960c <HAL_DMA_IRQHandler+0xcb0>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d128      	bne.n	8009610 <HAL_DMA_IRQHandler+0xcb4>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0214 	bic.w	r2, r2, #20
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e027      	b.n	8009620 <HAL_DMA_IRQHandler+0xcc4>
 80095d0:	40020010 	.word	0x40020010
 80095d4:	40020028 	.word	0x40020028
 80095d8:	40020040 	.word	0x40020040
 80095dc:	40020058 	.word	0x40020058
 80095e0:	40020070 	.word	0x40020070
 80095e4:	40020088 	.word	0x40020088
 80095e8:	400200a0 	.word	0x400200a0
 80095ec:	400200b8 	.word	0x400200b8
 80095f0:	40020410 	.word	0x40020410
 80095f4:	40020428 	.word	0x40020428
 80095f8:	40020440 	.word	0x40020440
 80095fc:	40020458 	.word	0x40020458
 8009600:	40020470 	.word	0x40020470
 8009604:	40020488 	.word	0x40020488
 8009608:	400204a0 	.word	0x400204a0
 800960c:	400204b8 	.word	0x400204b8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 020a 	bic.w	r2, r2, #10
 800961e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 8097 	beq.w	8009768 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009642:	e091      	b.n	8009768 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009648:	f003 031f 	and.w	r3, r3, #31
 800964c:	2208      	movs	r2, #8
 800964e:	409a      	lsls	r2, r3
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 8088 	beq.w	800976a <HAL_DMA_IRQHandler+0xe0e>
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8082 	beq.w	800976a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a41      	ldr	r2, [pc, #260]	; (8009770 <HAL_DMA_IRQHandler+0xe14>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d04a      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a3f      	ldr	r2, [pc, #252]	; (8009774 <HAL_DMA_IRQHandler+0xe18>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d045      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a3e      	ldr	r2, [pc, #248]	; (8009778 <HAL_DMA_IRQHandler+0xe1c>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d040      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a3c      	ldr	r2, [pc, #240]	; (800977c <HAL_DMA_IRQHandler+0xe20>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d03b      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a3b      	ldr	r2, [pc, #236]	; (8009780 <HAL_DMA_IRQHandler+0xe24>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d036      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a39      	ldr	r2, [pc, #228]	; (8009784 <HAL_DMA_IRQHandler+0xe28>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d031      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a38      	ldr	r2, [pc, #224]	; (8009788 <HAL_DMA_IRQHandler+0xe2c>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d02c      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a36      	ldr	r2, [pc, #216]	; (800978c <HAL_DMA_IRQHandler+0xe30>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d027      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a35      	ldr	r2, [pc, #212]	; (8009790 <HAL_DMA_IRQHandler+0xe34>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d022      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a33      	ldr	r2, [pc, #204]	; (8009794 <HAL_DMA_IRQHandler+0xe38>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d01d      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a32      	ldr	r2, [pc, #200]	; (8009798 <HAL_DMA_IRQHandler+0xe3c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d018      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a30      	ldr	r2, [pc, #192]	; (800979c <HAL_DMA_IRQHandler+0xe40>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d013      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a2f      	ldr	r2, [pc, #188]	; (80097a0 <HAL_DMA_IRQHandler+0xe44>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d00e      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a2d      	ldr	r2, [pc, #180]	; (80097a4 <HAL_DMA_IRQHandler+0xe48>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d009      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a2c      	ldr	r2, [pc, #176]	; (80097a8 <HAL_DMA_IRQHandler+0xe4c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d004      	beq.n	8009706 <HAL_DMA_IRQHandler+0xdaa>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a2a      	ldr	r2, [pc, #168]	; (80097ac <HAL_DMA_IRQHandler+0xe50>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d108      	bne.n	8009718 <HAL_DMA_IRQHandler+0xdbc>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 021c 	bic.w	r2, r2, #28
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	e007      	b.n	8009728 <HAL_DMA_IRQHandler+0xdcc>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 020e 	bic.w	r2, r2, #14
 8009726:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972c:	f003 031f 	and.w	r3, r3, #31
 8009730:	2201      	movs	r2, #1
 8009732:	409a      	lsls	r2, r3
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
 800975e:	e004      	b.n	800976a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009768:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800976a:	3728      	adds	r7, #40	; 0x28
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	40020010 	.word	0x40020010
 8009774:	40020028 	.word	0x40020028
 8009778:	40020040 	.word	0x40020040
 800977c:	40020058 	.word	0x40020058
 8009780:	40020070 	.word	0x40020070
 8009784:	40020088 	.word	0x40020088
 8009788:	400200a0 	.word	0x400200a0
 800978c:	400200b8 	.word	0x400200b8
 8009790:	40020410 	.word	0x40020410
 8009794:	40020428 	.word	0x40020428
 8009798:	40020440 	.word	0x40020440
 800979c:	40020458 	.word	0x40020458
 80097a0:	40020470 	.word	0x40020470
 80097a4:	40020488 	.word	0x40020488
 80097a8:	400204a0 	.word	0x400204a0
 80097ac:	400204b8 	.word	0x400204b8

080097b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a7f      	ldr	r2, [pc, #508]	; (80099cc <DMA_SetConfig+0x21c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d072      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a7d      	ldr	r2, [pc, #500]	; (80099d0 <DMA_SetConfig+0x220>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d06d      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a7c      	ldr	r2, [pc, #496]	; (80099d4 <DMA_SetConfig+0x224>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d068      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a7a      	ldr	r2, [pc, #488]	; (80099d8 <DMA_SetConfig+0x228>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d063      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a79      	ldr	r2, [pc, #484]	; (80099dc <DMA_SetConfig+0x22c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d05e      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a77      	ldr	r2, [pc, #476]	; (80099e0 <DMA_SetConfig+0x230>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d059      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a76      	ldr	r2, [pc, #472]	; (80099e4 <DMA_SetConfig+0x234>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d054      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a74      	ldr	r2, [pc, #464]	; (80099e8 <DMA_SetConfig+0x238>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d04f      	beq.n	80098ba <DMA_SetConfig+0x10a>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a73      	ldr	r2, [pc, #460]	; (80099ec <DMA_SetConfig+0x23c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d04a      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a71      	ldr	r2, [pc, #452]	; (80099f0 <DMA_SetConfig+0x240>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d045      	beq.n	80098ba <DMA_SetConfig+0x10a>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a70      	ldr	r2, [pc, #448]	; (80099f4 <DMA_SetConfig+0x244>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d040      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a6e      	ldr	r2, [pc, #440]	; (80099f8 <DMA_SetConfig+0x248>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d03b      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a6d      	ldr	r2, [pc, #436]	; (80099fc <DMA_SetConfig+0x24c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d036      	beq.n	80098ba <DMA_SetConfig+0x10a>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6b      	ldr	r2, [pc, #428]	; (8009a00 <DMA_SetConfig+0x250>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d031      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a6a      	ldr	r2, [pc, #424]	; (8009a04 <DMA_SetConfig+0x254>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d02c      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a68      	ldr	r2, [pc, #416]	; (8009a08 <DMA_SetConfig+0x258>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d027      	beq.n	80098ba <DMA_SetConfig+0x10a>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a67      	ldr	r2, [pc, #412]	; (8009a0c <DMA_SetConfig+0x25c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d022      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a65      	ldr	r2, [pc, #404]	; (8009a10 <DMA_SetConfig+0x260>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01d      	beq.n	80098ba <DMA_SetConfig+0x10a>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a64      	ldr	r2, [pc, #400]	; (8009a14 <DMA_SetConfig+0x264>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d018      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a62      	ldr	r2, [pc, #392]	; (8009a18 <DMA_SetConfig+0x268>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <DMA_SetConfig+0x10a>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a61      	ldr	r2, [pc, #388]	; (8009a1c <DMA_SetConfig+0x26c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00e      	beq.n	80098ba <DMA_SetConfig+0x10a>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a5f      	ldr	r2, [pc, #380]	; (8009a20 <DMA_SetConfig+0x270>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d009      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a5e      	ldr	r2, [pc, #376]	; (8009a24 <DMA_SetConfig+0x274>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <DMA_SetConfig+0x10a>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a5c      	ldr	r2, [pc, #368]	; (8009a28 <DMA_SetConfig+0x278>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d101      	bne.n	80098be <DMA_SetConfig+0x10e>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <DMA_SetConfig+0x110>
 80098be:	2300      	movs	r3, #0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00d      	beq.n	80098e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80098cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d004      	beq.n	80098e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80098de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a39      	ldr	r2, [pc, #228]	; (80099cc <DMA_SetConfig+0x21c>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d04a      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a38      	ldr	r2, [pc, #224]	; (80099d0 <DMA_SetConfig+0x220>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d045      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a36      	ldr	r2, [pc, #216]	; (80099d4 <DMA_SetConfig+0x224>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d040      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a35      	ldr	r2, [pc, #212]	; (80099d8 <DMA_SetConfig+0x228>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d03b      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a33      	ldr	r2, [pc, #204]	; (80099dc <DMA_SetConfig+0x22c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d036      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a32      	ldr	r2, [pc, #200]	; (80099e0 <DMA_SetConfig+0x230>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d031      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a30      	ldr	r2, [pc, #192]	; (80099e4 <DMA_SetConfig+0x234>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d02c      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a2f      	ldr	r2, [pc, #188]	; (80099e8 <DMA_SetConfig+0x238>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d027      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a2d      	ldr	r2, [pc, #180]	; (80099ec <DMA_SetConfig+0x23c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d022      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a2c      	ldr	r2, [pc, #176]	; (80099f0 <DMA_SetConfig+0x240>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d01d      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a2a      	ldr	r2, [pc, #168]	; (80099f4 <DMA_SetConfig+0x244>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d018      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a29      	ldr	r2, [pc, #164]	; (80099f8 <DMA_SetConfig+0x248>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d013      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a27      	ldr	r2, [pc, #156]	; (80099fc <DMA_SetConfig+0x24c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00e      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a26      	ldr	r2, [pc, #152]	; (8009a00 <DMA_SetConfig+0x250>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d009      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a24      	ldr	r2, [pc, #144]	; (8009a04 <DMA_SetConfig+0x254>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d004      	beq.n	8009980 <DMA_SetConfig+0x1d0>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a23      	ldr	r2, [pc, #140]	; (8009a08 <DMA_SetConfig+0x258>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d101      	bne.n	8009984 <DMA_SetConfig+0x1d4>
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <DMA_SetConfig+0x1d6>
 8009984:	2300      	movs	r3, #0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d059      	beq.n	8009a3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	223f      	movs	r2, #63	; 0x3f
 8009994:	409a      	lsls	r2, r3
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80099a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d138      	bne.n	8009a2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80099ca:	e086      	b.n	8009ada <DMA_SetConfig+0x32a>
 80099cc:	40020010 	.word	0x40020010
 80099d0:	40020028 	.word	0x40020028
 80099d4:	40020040 	.word	0x40020040
 80099d8:	40020058 	.word	0x40020058
 80099dc:	40020070 	.word	0x40020070
 80099e0:	40020088 	.word	0x40020088
 80099e4:	400200a0 	.word	0x400200a0
 80099e8:	400200b8 	.word	0x400200b8
 80099ec:	40020410 	.word	0x40020410
 80099f0:	40020428 	.word	0x40020428
 80099f4:	40020440 	.word	0x40020440
 80099f8:	40020458 	.word	0x40020458
 80099fc:	40020470 	.word	0x40020470
 8009a00:	40020488 	.word	0x40020488
 8009a04:	400204a0 	.word	0x400204a0
 8009a08:	400204b8 	.word	0x400204b8
 8009a0c:	58025408 	.word	0x58025408
 8009a10:	5802541c 	.word	0x5802541c
 8009a14:	58025430 	.word	0x58025430
 8009a18:	58025444 	.word	0x58025444
 8009a1c:	58025458 	.word	0x58025458
 8009a20:	5802546c 	.word	0x5802546c
 8009a24:	58025480 	.word	0x58025480
 8009a28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	60da      	str	r2, [r3, #12]
}
 8009a3c:	e04d      	b.n	8009ada <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a29      	ldr	r2, [pc, #164]	; (8009ae8 <DMA_SetConfig+0x338>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d022      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a27      	ldr	r2, [pc, #156]	; (8009aec <DMA_SetConfig+0x33c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d01d      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a26      	ldr	r2, [pc, #152]	; (8009af0 <DMA_SetConfig+0x340>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d018      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a24      	ldr	r2, [pc, #144]	; (8009af4 <DMA_SetConfig+0x344>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d013      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a23      	ldr	r2, [pc, #140]	; (8009af8 <DMA_SetConfig+0x348>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00e      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a21      	ldr	r2, [pc, #132]	; (8009afc <DMA_SetConfig+0x34c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d009      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a20      	ldr	r2, [pc, #128]	; (8009b00 <DMA_SetConfig+0x350>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d004      	beq.n	8009a8e <DMA_SetConfig+0x2de>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <DMA_SetConfig+0x354>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d101      	bne.n	8009a92 <DMA_SetConfig+0x2e2>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <DMA_SetConfig+0x2e4>
 8009a92:	2300      	movs	r3, #0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d020      	beq.n	8009ada <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9c:	f003 031f 	and.w	r3, r3, #31
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	409a      	lsls	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	2b40      	cmp	r3, #64	; 0x40
 8009ab6:	d108      	bne.n	8009aca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	60da      	str	r2, [r3, #12]
}
 8009ac8:	e007      	b.n	8009ada <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	60da      	str	r2, [r3, #12]
}
 8009ada:	bf00      	nop
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	58025408 	.word	0x58025408
 8009aec:	5802541c 	.word	0x5802541c
 8009af0:	58025430 	.word	0x58025430
 8009af4:	58025444 	.word	0x58025444
 8009af8:	58025458 	.word	0x58025458
 8009afc:	5802546c 	.word	0x5802546c
 8009b00:	58025480 	.word	0x58025480
 8009b04:	58025494 	.word	0x58025494

08009b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a42      	ldr	r2, [pc, #264]	; (8009c20 <DMA_CalcBaseAndBitshift+0x118>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d04a      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a41      	ldr	r2, [pc, #260]	; (8009c24 <DMA_CalcBaseAndBitshift+0x11c>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d045      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <DMA_CalcBaseAndBitshift+0x120>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d040      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a3e      	ldr	r2, [pc, #248]	; (8009c2c <DMA_CalcBaseAndBitshift+0x124>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d03b      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a3c      	ldr	r2, [pc, #240]	; (8009c30 <DMA_CalcBaseAndBitshift+0x128>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d036      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a3b      	ldr	r2, [pc, #236]	; (8009c34 <DMA_CalcBaseAndBitshift+0x12c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d031      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a39      	ldr	r2, [pc, #228]	; (8009c38 <DMA_CalcBaseAndBitshift+0x130>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d02c      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a38      	ldr	r2, [pc, #224]	; (8009c3c <DMA_CalcBaseAndBitshift+0x134>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d027      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a36      	ldr	r2, [pc, #216]	; (8009c40 <DMA_CalcBaseAndBitshift+0x138>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d022      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a35      	ldr	r2, [pc, #212]	; (8009c44 <DMA_CalcBaseAndBitshift+0x13c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d01d      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a33      	ldr	r2, [pc, #204]	; (8009c48 <DMA_CalcBaseAndBitshift+0x140>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d018      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a32      	ldr	r2, [pc, #200]	; (8009c4c <DMA_CalcBaseAndBitshift+0x144>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d013      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a30      	ldr	r2, [pc, #192]	; (8009c50 <DMA_CalcBaseAndBitshift+0x148>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00e      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a2f      	ldr	r2, [pc, #188]	; (8009c54 <DMA_CalcBaseAndBitshift+0x14c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d009      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a2d      	ldr	r2, [pc, #180]	; (8009c58 <DMA_CalcBaseAndBitshift+0x150>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d004      	beq.n	8009bb0 <DMA_CalcBaseAndBitshift+0xa8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a2c      	ldr	r2, [pc, #176]	; (8009c5c <DMA_CalcBaseAndBitshift+0x154>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d101      	bne.n	8009bb4 <DMA_CalcBaseAndBitshift+0xac>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e000      	b.n	8009bb6 <DMA_CalcBaseAndBitshift+0xae>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d024      	beq.n	8009c04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	3b10      	subs	r3, #16
 8009bc2:	4a27      	ldr	r2, [pc, #156]	; (8009c60 <DMA_CalcBaseAndBitshift+0x158>)
 8009bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc8:	091b      	lsrs	r3, r3, #4
 8009bca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	4a24      	ldr	r2, [pc, #144]	; (8009c64 <DMA_CalcBaseAndBitshift+0x15c>)
 8009bd4:	5cd3      	ldrb	r3, [r2, r3]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d908      	bls.n	8009bf4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	4b1f      	ldr	r3, [pc, #124]	; (8009c68 <DMA_CalcBaseAndBitshift+0x160>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	1d1a      	adds	r2, r3, #4
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	659a      	str	r2, [r3, #88]	; 0x58
 8009bf2:	e00d      	b.n	8009c10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4b1b      	ldr	r3, [pc, #108]	; (8009c68 <DMA_CalcBaseAndBitshift+0x160>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	6593      	str	r3, [r2, #88]	; 0x58
 8009c02:	e005      	b.n	8009c10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	40020010 	.word	0x40020010
 8009c24:	40020028 	.word	0x40020028
 8009c28:	40020040 	.word	0x40020040
 8009c2c:	40020058 	.word	0x40020058
 8009c30:	40020070 	.word	0x40020070
 8009c34:	40020088 	.word	0x40020088
 8009c38:	400200a0 	.word	0x400200a0
 8009c3c:	400200b8 	.word	0x400200b8
 8009c40:	40020410 	.word	0x40020410
 8009c44:	40020428 	.word	0x40020428
 8009c48:	40020440 	.word	0x40020440
 8009c4c:	40020458 	.word	0x40020458
 8009c50:	40020470 	.word	0x40020470
 8009c54:	40020488 	.word	0x40020488
 8009c58:	400204a0 	.word	0x400204a0
 8009c5c:	400204b8 	.word	0x400204b8
 8009c60:	aaaaaaab 	.word	0xaaaaaaab
 8009c64:	08014d48 	.word	0x08014d48
 8009c68:	fffffc00 	.word	0xfffffc00

08009c6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d120      	bne.n	8009cc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d858      	bhi.n	8009d3a <DMA_CheckFifoParam+0xce>
 8009c88:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <DMA_CheckFifoParam+0x24>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009cb3 	.word	0x08009cb3
 8009c98:	08009ca1 	.word	0x08009ca1
 8009c9c:	08009d3b 	.word	0x08009d3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d048      	beq.n	8009d3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009cb0:	e045      	b.n	8009d3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009cba:	d142      	bne.n	8009d42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009cc0:	e03f      	b.n	8009d42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cca:	d123      	bne.n	8009d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	d838      	bhi.n	8009d46 <DMA_CheckFifoParam+0xda>
 8009cd4:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <DMA_CheckFifoParam+0x70>)
 8009cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cda:	bf00      	nop
 8009cdc:	08009ced 	.word	0x08009ced
 8009ce0:	08009cf3 	.word	0x08009cf3
 8009ce4:	08009ced 	.word	0x08009ced
 8009ce8:	08009d05 	.word	0x08009d05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
        break;
 8009cf0:	e030      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d025      	beq.n	8009d4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d02:	e022      	b.n	8009d4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009d0c:	d11f      	bne.n	8009d4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d12:	e01c      	b.n	8009d4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d902      	bls.n	8009d22 <DMA_CheckFifoParam+0xb6>
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d003      	beq.n	8009d28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009d20:	e018      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	73fb      	strb	r3, [r7, #15]
        break;
 8009d26:	e015      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
    break;
 8009d38:	e00b      	b.n	8009d52 <DMA_CheckFifoParam+0xe6>
        break;
 8009d3a:	bf00      	nop
 8009d3c:	e00a      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        break;
 8009d3e:	bf00      	nop
 8009d40:	e008      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        break;
 8009d42:	bf00      	nop
 8009d44:	e006      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        break;
 8009d46:	bf00      	nop
 8009d48:	e004      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        break;
 8009d4a:	bf00      	nop
 8009d4c:	e002      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
        break;
 8009d4e:	bf00      	nop
 8009d50:	e000      	b.n	8009d54 <DMA_CheckFifoParam+0xe8>
    break;
 8009d52:	bf00      	nop
    }
  }

  return status;
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop

08009d64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a38      	ldr	r2, [pc, #224]	; (8009e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d022      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a36      	ldr	r2, [pc, #216]	; (8009e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d01d      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a35      	ldr	r2, [pc, #212]	; (8009e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d018      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a33      	ldr	r2, [pc, #204]	; (8009e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d013      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a32      	ldr	r2, [pc, #200]	; (8009e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d00e      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a30      	ldr	r2, [pc, #192]	; (8009e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d009      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a2f      	ldr	r2, [pc, #188]	; (8009e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d004      	beq.n	8009dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a2d      	ldr	r2, [pc, #180]	; (8009e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d101      	bne.n	8009dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01a      	beq.n	8009e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	3b08      	subs	r3, #8
 8009dd4:	4a28      	ldr	r2, [pc, #160]	; (8009e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dda:	091b      	lsrs	r3, r3, #4
 8009ddc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4b26      	ldr	r3, [pc, #152]	; (8009e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009de2:	4413      	add	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a24      	ldr	r2, [pc, #144]	; (8009e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009df0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f003 031f 	and.w	r3, r3, #31
 8009df8:	2201      	movs	r2, #1
 8009dfa:	409a      	lsls	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009e00:	e024      	b.n	8009e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	3b10      	subs	r3, #16
 8009e0a:	4a1e      	ldr	r2, [pc, #120]	; (8009e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e10:	091b      	lsrs	r3, r3, #4
 8009e12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4a1c      	ldr	r2, [pc, #112]	; (8009e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d806      	bhi.n	8009e2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	4a1b      	ldr	r2, [pc, #108]	; (8009e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d902      	bls.n	8009e2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3308      	adds	r3, #8
 8009e28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4b18      	ldr	r3, [pc, #96]	; (8009e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a16      	ldr	r2, [pc, #88]	; (8009e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009e3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f003 031f 	and.w	r3, r3, #31
 8009e44:	2201      	movs	r2, #1
 8009e46:	409a      	lsls	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009e4c:	bf00      	nop
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	58025408 	.word	0x58025408
 8009e5c:	5802541c 	.word	0x5802541c
 8009e60:	58025430 	.word	0x58025430
 8009e64:	58025444 	.word	0x58025444
 8009e68:	58025458 	.word	0x58025458
 8009e6c:	5802546c 	.word	0x5802546c
 8009e70:	58025480 	.word	0x58025480
 8009e74:	58025494 	.word	0x58025494
 8009e78:	cccccccd 	.word	0xcccccccd
 8009e7c:	16009600 	.word	0x16009600
 8009e80:	58025880 	.word	0x58025880
 8009e84:	aaaaaaab 	.word	0xaaaaaaab
 8009e88:	400204b8 	.word	0x400204b8
 8009e8c:	4002040f 	.word	0x4002040f
 8009e90:	10008200 	.word	0x10008200
 8009e94:	40020880 	.word	0x40020880

08009e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d04a      	beq.n	8009f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b08      	cmp	r3, #8
 8009eb2:	d847      	bhi.n	8009f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a25      	ldr	r2, [pc, #148]	; (8009f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d022      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a24      	ldr	r2, [pc, #144]	; (8009f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d01d      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a22      	ldr	r2, [pc, #136]	; (8009f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d018      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a21      	ldr	r2, [pc, #132]	; (8009f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1f      	ldr	r2, [pc, #124]	; (8009f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00e      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a1e      	ldr	r2, [pc, #120]	; (8009f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d009      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a1c      	ldr	r2, [pc, #112]	; (8009f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a1b      	ldr	r2, [pc, #108]	; (8009f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d101      	bne.n	8009f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4b17      	ldr	r3, [pc, #92]	; (8009f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	461a      	mov	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009f20:	671a      	str	r2, [r3, #112]	; 0x70
 8009f22:	e009      	b.n	8009f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a11      	ldr	r2, [pc, #68]	; (8009f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009f36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	409a      	lsls	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	58025408 	.word	0x58025408
 8009f54:	5802541c 	.word	0x5802541c
 8009f58:	58025430 	.word	0x58025430
 8009f5c:	58025444 	.word	0x58025444
 8009f60:	58025458 	.word	0x58025458
 8009f64:	5802546c 	.word	0x5802546c
 8009f68:	58025480 	.word	0x58025480
 8009f6c:	58025494 	.word	0x58025494
 8009f70:	1600963f 	.word	0x1600963f
 8009f74:	58025940 	.word	0x58025940
 8009f78:	1000823f 	.word	0x1000823f
 8009f7c:	40020940 	.word	0x40020940

08009f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b089      	sub	sp, #36	; 0x24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009f8e:	4b89      	ldr	r3, [pc, #548]	; (800a1b4 <HAL_GPIO_Init+0x234>)
 8009f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f92:	e194      	b.n	800a2be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	2101      	movs	r1, #1
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 8186 	beq.w	800a2b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d005      	beq.n	8009fc4 <HAL_GPIO_Init+0x44>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f003 0303 	and.w	r3, r3, #3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d130      	bne.n	800a026 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	2203      	movs	r2, #3
 8009fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd4:	43db      	mvns	r3, r3
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	4013      	ands	r3, r2
 8009fda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	43db      	mvns	r3, r3
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	4013      	ands	r3, r2
 800a008:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	f003 0201 	and.w	r2, r3, #1
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f003 0303 	and.w	r3, r3, #3
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d017      	beq.n	800a062 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	005b      	lsls	r3, r3, #1
 800a03c:	2203      	movs	r2, #3
 800a03e:	fa02 f303 	lsl.w	r3, r2, r3
 800a042:	43db      	mvns	r3, r3
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	4013      	ands	r3, r2
 800a048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	fa02 f303 	lsl.w	r3, r2, r3
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	4313      	orrs	r3, r2
 800a05a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	69ba      	ldr	r2, [r7, #24]
 800a060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d123      	bne.n	800a0b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	08da      	lsrs	r2, r3, #3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3208      	adds	r2, #8
 800a076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f003 0307 	and.w	r3, r3, #7
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	220f      	movs	r2, #15
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	4013      	ands	r3, r2
 800a090:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a2:	69ba      	ldr	r2, [r7, #24]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	08da      	lsrs	r2, r3, #3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3208      	adds	r2, #8
 800a0b0:	69b9      	ldr	r1, [r7, #24]
 800a0b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c6:	43db      	mvns	r3, r3
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f003 0203 	and.w	r2, r3, #3
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80e0 	beq.w	800a2b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0f8:	4b2f      	ldr	r3, [pc, #188]	; (800a1b8 <HAL_GPIO_Init+0x238>)
 800a0fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0fe:	4a2e      	ldr	r2, [pc, #184]	; (800a1b8 <HAL_GPIO_Init+0x238>)
 800a100:	f043 0302 	orr.w	r3, r3, #2
 800a104:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a108:	4b2b      	ldr	r3, [pc, #172]	; (800a1b8 <HAL_GPIO_Init+0x238>)
 800a10a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a116:	4a29      	ldr	r2, [pc, #164]	; (800a1bc <HAL_GPIO_Init+0x23c>)
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	089b      	lsrs	r3, r3, #2
 800a11c:	3302      	adds	r3, #2
 800a11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	220f      	movs	r2, #15
 800a12e:	fa02 f303 	lsl.w	r3, r2, r3
 800a132:	43db      	mvns	r3, r3
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	4013      	ands	r3, r2
 800a138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a20      	ldr	r2, [pc, #128]	; (800a1c0 <HAL_GPIO_Init+0x240>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d052      	beq.n	800a1e8 <HAL_GPIO_Init+0x268>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a1f      	ldr	r2, [pc, #124]	; (800a1c4 <HAL_GPIO_Init+0x244>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d031      	beq.n	800a1ae <HAL_GPIO_Init+0x22e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <HAL_GPIO_Init+0x248>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d02b      	beq.n	800a1aa <HAL_GPIO_Init+0x22a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <HAL_GPIO_Init+0x24c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d025      	beq.n	800a1a6 <HAL_GPIO_Init+0x226>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <HAL_GPIO_Init+0x250>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d01f      	beq.n	800a1a2 <HAL_GPIO_Init+0x222>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a1b      	ldr	r2, [pc, #108]	; (800a1d4 <HAL_GPIO_Init+0x254>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d019      	beq.n	800a19e <HAL_GPIO_Init+0x21e>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a1a      	ldr	r2, [pc, #104]	; (800a1d8 <HAL_GPIO_Init+0x258>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d013      	beq.n	800a19a <HAL_GPIO_Init+0x21a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a19      	ldr	r2, [pc, #100]	; (800a1dc <HAL_GPIO_Init+0x25c>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d00d      	beq.n	800a196 <HAL_GPIO_Init+0x216>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a18      	ldr	r2, [pc, #96]	; (800a1e0 <HAL_GPIO_Init+0x260>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d007      	beq.n	800a192 <HAL_GPIO_Init+0x212>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a17      	ldr	r2, [pc, #92]	; (800a1e4 <HAL_GPIO_Init+0x264>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d101      	bne.n	800a18e <HAL_GPIO_Init+0x20e>
 800a18a:	2309      	movs	r3, #9
 800a18c:	e02d      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a18e:	230a      	movs	r3, #10
 800a190:	e02b      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a192:	2308      	movs	r3, #8
 800a194:	e029      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a196:	2307      	movs	r3, #7
 800a198:	e027      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a19a:	2306      	movs	r3, #6
 800a19c:	e025      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a19e:	2305      	movs	r3, #5
 800a1a0:	e023      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a1a2:	2304      	movs	r3, #4
 800a1a4:	e021      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e01f      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e01d      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e01b      	b.n	800a1ea <HAL_GPIO_Init+0x26a>
 800a1b2:	bf00      	nop
 800a1b4:	58000080 	.word	0x58000080
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	58000400 	.word	0x58000400
 800a1c0:	58020000 	.word	0x58020000
 800a1c4:	58020400 	.word	0x58020400
 800a1c8:	58020800 	.word	0x58020800
 800a1cc:	58020c00 	.word	0x58020c00
 800a1d0:	58021000 	.word	0x58021000
 800a1d4:	58021400 	.word	0x58021400
 800a1d8:	58021800 	.word	0x58021800
 800a1dc:	58021c00 	.word	0x58021c00
 800a1e0:	58022000 	.word	0x58022000
 800a1e4:	58022400 	.word	0x58022400
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	f002 0203 	and.w	r2, r2, #3
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	4093      	lsls	r3, r2
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1fa:	4938      	ldr	r1, [pc, #224]	; (800a2dc <HAL_GPIO_Init+0x35c>)
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	089b      	lsrs	r3, r3, #2
 800a200:	3302      	adds	r3, #2
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	43db      	mvns	r3, r3
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	4013      	ands	r3, r2
 800a218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a22e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	43db      	mvns	r3, r3
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	4013      	ands	r3, r2
 800a246:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a25c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	43db      	mvns	r3, r3
 800a26e:	69ba      	ldr	r2, [r7, #24]
 800a270:	4013      	ands	r3, r2
 800a272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	4313      	orrs	r3, r2
 800a286:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	43db      	mvns	r3, r3
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	4013      	ands	r3, r2
 800a29c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d003      	beq.n	800a2b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f47f ae63 	bne.w	8009f94 <HAL_GPIO_Init+0x14>
  }
}
 800a2ce:	bf00      	nop
 800a2d0:	bf00      	nop
 800a2d2:	3724      	adds	r7, #36	; 0x24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	58000400 	.word	0x58000400

0800a2e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	807b      	strh	r3, [r7, #2]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2f0:	787b      	ldrb	r3, [r7, #1]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2f6:	887a      	ldrh	r2, [r7, #2]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a2fc:	e003      	b.n	800a306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a2fe:	887b      	ldrh	r3, [r7, #2]
 800a300:	041a      	lsls	r2, r3, #16
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	619a      	str	r2, [r3, #24]
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	4603      	mov	r3, r0
 800a31a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a31c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a320:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	4013      	ands	r3, r2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d008      	beq.n	800a33e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a32c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a330:	88fb      	ldrh	r3, [r7, #6]
 800a332:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a336:	88fb      	ldrh	r3, [r7, #6]
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fa fb67 	bl	8004a0c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a350:	4b19      	ldr	r3, [pc, #100]	; (800a3b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d00a      	beq.n	800a372 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a35c:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	429a      	cmp	r2, r3
 800a368:	d001      	beq.n	800a36e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e01f      	b.n	800a3ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	e01d      	b.n	800a3ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a372:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f023 0207 	bic.w	r2, r3, #7
 800a37a:	490f      	ldr	r1, [pc, #60]	; (800a3b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4313      	orrs	r3, r2
 800a380:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a382:	f7fc fc6b 	bl	8006c5c <HAL_GetTick>
 800a386:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a388:	e009      	b.n	800a39e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a38a:	f7fc fc67 	bl	8006c5c <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a398:	d901      	bls.n	800a39e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e007      	b.n	800a3ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a39e:	4b06      	ldr	r3, [pc, #24]	; (800a3b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3aa:	d1ee      	bne.n	800a38a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	58024800 	.word	0x58024800

0800a3bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08c      	sub	sp, #48	; 0x30
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f000 bc1d 	b.w	800ac0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8087 	beq.w	800a4ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3de:	4b99      	ldr	r3, [pc, #612]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3e8:	4b96      	ldr	r3, [pc, #600]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d007      	beq.n	800a404 <HAL_RCC_OscConfig+0x48>
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	2b18      	cmp	r3, #24
 800a3f8:	d110      	bne.n	800a41c <HAL_RCC_OscConfig+0x60>
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d10b      	bne.n	800a41c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a404:	4b8f      	ldr	r3, [pc, #572]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d06c      	beq.n	800a4ea <HAL_RCC_OscConfig+0x12e>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d168      	bne.n	800a4ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e3f6      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a424:	d106      	bne.n	800a434 <HAL_RCC_OscConfig+0x78>
 800a426:	4b87      	ldr	r3, [pc, #540]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a86      	ldr	r2, [pc, #536]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a42c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	e02e      	b.n	800a492 <HAL_RCC_OscConfig+0xd6>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10c      	bne.n	800a456 <HAL_RCC_OscConfig+0x9a>
 800a43c:	4b81      	ldr	r3, [pc, #516]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a80      	ldr	r2, [pc, #512]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	4b7e      	ldr	r3, [pc, #504]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a7d      	ldr	r2, [pc, #500]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a44e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a452:	6013      	str	r3, [r2, #0]
 800a454:	e01d      	b.n	800a492 <HAL_RCC_OscConfig+0xd6>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a45e:	d10c      	bne.n	800a47a <HAL_RCC_OscConfig+0xbe>
 800a460:	4b78      	ldr	r3, [pc, #480]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a77      	ldr	r2, [pc, #476]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	4b75      	ldr	r3, [pc, #468]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a74      	ldr	r2, [pc, #464]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	e00b      	b.n	800a492 <HAL_RCC_OscConfig+0xd6>
 800a47a:	4b72      	ldr	r3, [pc, #456]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a71      	ldr	r2, [pc, #452]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	4b6f      	ldr	r3, [pc, #444]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a6e      	ldr	r2, [pc, #440]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a48c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a490:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d013      	beq.n	800a4c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a49a:	f7fc fbdf 	bl	8006c5c <HAL_GetTick>
 800a49e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4a0:	e008      	b.n	800a4b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4a2:	f7fc fbdb 	bl	8006c5c <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2b64      	cmp	r3, #100	; 0x64
 800a4ae:	d901      	bls.n	800a4b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e3aa      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4b4:	4b63      	ldr	r3, [pc, #396]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0f0      	beq.n	800a4a2 <HAL_RCC_OscConfig+0xe6>
 800a4c0:	e014      	b.n	800a4ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c2:	f7fc fbcb 	bl	8006c5c <HAL_GetTick>
 800a4c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4c8:	e008      	b.n	800a4dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4ca:	f7fc fbc7 	bl	8006c5c <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	2b64      	cmp	r3, #100	; 0x64
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e396      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4dc:	4b59      	ldr	r3, [pc, #356]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f0      	bne.n	800a4ca <HAL_RCC_OscConfig+0x10e>
 800a4e8:	e000      	b.n	800a4ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80cb 	beq.w	800a690 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4fa:	4b52      	ldr	r3, [pc, #328]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a502:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a504:	4b4f      	ldr	r3, [pc, #316]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d007      	beq.n	800a520 <HAL_RCC_OscConfig+0x164>
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	2b18      	cmp	r3, #24
 800a514:	d156      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x208>
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d151      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a520:	4b48      	ldr	r3, [pc, #288]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d005      	beq.n	800a538 <HAL_RCC_OscConfig+0x17c>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e368      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a538:	4b42      	ldr	r3, [pc, #264]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f023 0219 	bic.w	r2, r3, #25
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	493f      	ldr	r1, [pc, #252]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a546:	4313      	orrs	r3, r2
 800a548:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a54a:	f7fc fb87 	bl	8006c5c <HAL_GetTick>
 800a54e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a550:	e008      	b.n	800a564 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a552:	f7fc fb83 	bl	8006c5c <HAL_GetTick>
 800a556:	4602      	mov	r2, r0
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d901      	bls.n	800a564 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	e352      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a564:	4b37      	ldr	r3, [pc, #220]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0f0      	beq.n	800a552 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a570:	f7fc fba4 	bl	8006cbc <HAL_GetREVID>
 800a574:	4603      	mov	r3, r0
 800a576:	f241 0203 	movw	r2, #4099	; 0x1003
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d817      	bhi.n	800a5ae <HAL_RCC_OscConfig+0x1f2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	2b40      	cmp	r3, #64	; 0x40
 800a584:	d108      	bne.n	800a598 <HAL_RCC_OscConfig+0x1dc>
 800a586:	4b2f      	ldr	r3, [pc, #188]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a58e:	4a2d      	ldr	r2, [pc, #180]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a594:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a596:	e07b      	b.n	800a690 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a598:	4b2a      	ldr	r3, [pc, #168]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	031b      	lsls	r3, r3, #12
 800a5a6:	4927      	ldr	r1, [pc, #156]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5ac:	e070      	b.n	800a690 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	061b      	lsls	r3, r3, #24
 800a5bc:	4921      	ldr	r1, [pc, #132]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5c2:	e065      	b.n	800a690 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d048      	beq.n	800a65e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5cc:	4b1d      	ldr	r3, [pc, #116]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f023 0219 	bic.w	r2, r3, #25
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	491a      	ldr	r1, [pc, #104]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5de:	f7fc fb3d 	bl	8006c5c <HAL_GetTick>
 800a5e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5e4:	e008      	b.n	800a5f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5e6:	f7fc fb39 	bl	8006c5c <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d901      	bls.n	800a5f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e308      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5f8:	4b12      	ldr	r3, [pc, #72]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0f0      	beq.n	800a5e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a604:	f7fc fb5a 	bl	8006cbc <HAL_GetREVID>
 800a608:	4603      	mov	r3, r0
 800a60a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a60e:	4293      	cmp	r3, r2
 800a610:	d81a      	bhi.n	800a648 <HAL_RCC_OscConfig+0x28c>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b40      	cmp	r3, #64	; 0x40
 800a618:	d108      	bne.n	800a62c <HAL_RCC_OscConfig+0x270>
 800a61a:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a622:	4a08      	ldr	r2, [pc, #32]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a628:	6053      	str	r3, [r2, #4]
 800a62a:	e031      	b.n	800a690 <HAL_RCC_OscConfig+0x2d4>
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	031b      	lsls	r3, r3, #12
 800a63a:	4902      	ldr	r1, [pc, #8]	; (800a644 <HAL_RCC_OscConfig+0x288>)
 800a63c:	4313      	orrs	r3, r2
 800a63e:	604b      	str	r3, [r1, #4]
 800a640:	e026      	b.n	800a690 <HAL_RCC_OscConfig+0x2d4>
 800a642:	bf00      	nop
 800a644:	58024400 	.word	0x58024400
 800a648:	4b9a      	ldr	r3, [pc, #616]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	061b      	lsls	r3, r3, #24
 800a656:	4997      	ldr	r1, [pc, #604]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a658:	4313      	orrs	r3, r2
 800a65a:	604b      	str	r3, [r1, #4]
 800a65c:	e018      	b.n	800a690 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a65e:	4b95      	ldr	r3, [pc, #596]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a94      	ldr	r2, [pc, #592]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a664:	f023 0301 	bic.w	r3, r3, #1
 800a668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a66a:	f7fc faf7 	bl	8006c5c <HAL_GetTick>
 800a66e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a670:	e008      	b.n	800a684 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a672:	f7fc faf3 	bl	8006c5c <HAL_GetTick>
 800a676:	4602      	mov	r2, r0
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d901      	bls.n	800a684 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e2c2      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a684:	4b8b      	ldr	r3, [pc, #556]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1f0      	bne.n	800a672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0310 	and.w	r3, r3, #16
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80a9 	beq.w	800a7f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a69e:	4b85      	ldr	r3, [pc, #532]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6a8:	4b82      	ldr	r3, [pc, #520]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d007      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x308>
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	2b18      	cmp	r3, #24
 800a6b8:	d13a      	bne.n	800a730 <HAL_RCC_OscConfig+0x374>
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f003 0303 	and.w	r3, r3, #3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d135      	bne.n	800a730 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6c4:	4b7b      	ldr	r3, [pc, #492]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <HAL_RCC_OscConfig+0x320>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	2b80      	cmp	r3, #128	; 0x80
 800a6d6:	d001      	beq.n	800a6dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e296      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6dc:	f7fc faee 	bl	8006cbc <HAL_GetREVID>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f241 0203 	movw	r2, #4099	; 0x1003
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d817      	bhi.n	800a71a <HAL_RCC_OscConfig+0x35e>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	2b20      	cmp	r3, #32
 800a6f0:	d108      	bne.n	800a704 <HAL_RCC_OscConfig+0x348>
 800a6f2:	4b70      	ldr	r3, [pc, #448]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a6fa:	4a6e      	ldr	r2, [pc, #440]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a700:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a702:	e075      	b.n	800a7f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a704:	4b6b      	ldr	r3, [pc, #428]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	069b      	lsls	r3, r3, #26
 800a712:	4968      	ldr	r1, [pc, #416]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a714:	4313      	orrs	r3, r2
 800a716:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a718:	e06a      	b.n	800a7f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a71a:	4b66      	ldr	r3, [pc, #408]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	061b      	lsls	r3, r3, #24
 800a728:	4962      	ldr	r1, [pc, #392]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a72e:	e05f      	b.n	800a7f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d042      	beq.n	800a7be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a738:	4b5e      	ldr	r3, [pc, #376]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a5d      	ldr	r2, [pc, #372]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a73e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a744:	f7fc fa8a 	bl	8006c5c <HAL_GetTick>
 800a748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a74a:	e008      	b.n	800a75e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a74c:	f7fc fa86 	bl	8006c5c <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	2b02      	cmp	r3, #2
 800a758:	d901      	bls.n	800a75e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e255      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a75e:	4b55      	ldr	r3, [pc, #340]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f0      	beq.n	800a74c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a76a:	f7fc faa7 	bl	8006cbc <HAL_GetREVID>
 800a76e:	4603      	mov	r3, r0
 800a770:	f241 0203 	movw	r2, #4099	; 0x1003
 800a774:	4293      	cmp	r3, r2
 800a776:	d817      	bhi.n	800a7a8 <HAL_RCC_OscConfig+0x3ec>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	2b20      	cmp	r3, #32
 800a77e:	d108      	bne.n	800a792 <HAL_RCC_OscConfig+0x3d6>
 800a780:	4b4c      	ldr	r3, [pc, #304]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a788:	4a4a      	ldr	r2, [pc, #296]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a78a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a78e:	6053      	str	r3, [r2, #4]
 800a790:	e02e      	b.n	800a7f0 <HAL_RCC_OscConfig+0x434>
 800a792:	4b48      	ldr	r3, [pc, #288]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	069b      	lsls	r3, r3, #26
 800a7a0:	4944      	ldr	r1, [pc, #272]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	604b      	str	r3, [r1, #4]
 800a7a6:	e023      	b.n	800a7f0 <HAL_RCC_OscConfig+0x434>
 800a7a8:	4b42      	ldr	r3, [pc, #264]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	061b      	lsls	r3, r3, #24
 800a7b6:	493f      	ldr	r1, [pc, #252]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60cb      	str	r3, [r1, #12]
 800a7bc:	e018      	b.n	800a7f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a7be:	4b3d      	ldr	r3, [pc, #244]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a3c      	ldr	r2, [pc, #240]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ca:	f7fc fa47 	bl	8006c5c <HAL_GetTick>
 800a7ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7d0:	e008      	b.n	800a7e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a7d2:	f7fc fa43 	bl	8006c5c <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d901      	bls.n	800a7e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e212      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7e4:	4b33      	ldr	r3, [pc, #204]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1f0      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0308 	and.w	r3, r3, #8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d036      	beq.n	800a86a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d019      	beq.n	800a838 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a804:	4b2b      	ldr	r3, [pc, #172]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a808:	4a2a      	ldr	r2, [pc, #168]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a810:	f7fc fa24 	bl	8006c5c <HAL_GetTick>
 800a814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a816:	e008      	b.n	800a82a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a818:	f7fc fa20 	bl	8006c5c <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d901      	bls.n	800a82a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e1ef      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a82a:	4b22      	ldr	r3, [pc, #136]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a82c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0f0      	beq.n	800a818 <HAL_RCC_OscConfig+0x45c>
 800a836:	e018      	b.n	800a86a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a838:	4b1e      	ldr	r3, [pc, #120]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a83c:	4a1d      	ldr	r2, [pc, #116]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a83e:	f023 0301 	bic.w	r3, r3, #1
 800a842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a844:	f7fc fa0a 	bl	8006c5c <HAL_GetTick>
 800a848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a84a:	e008      	b.n	800a85e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a84c:	f7fc fa06 	bl	8006c5c <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	2b02      	cmp	r3, #2
 800a858:	d901      	bls.n	800a85e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e1d5      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a85e:	4b15      	ldr	r3, [pc, #84]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1f0      	bne.n	800a84c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d039      	beq.n	800a8ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01c      	beq.n	800a8b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a87e:	4b0d      	ldr	r3, [pc, #52]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a0c      	ldr	r2, [pc, #48]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a888:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a88a:	f7fc f9e7 	bl	8006c5c <HAL_GetTick>
 800a88e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a890:	e008      	b.n	800a8a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a892:	f7fc f9e3 	bl	8006c5c <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d901      	bls.n	800a8a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e1b2      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8a4:	4b03      	ldr	r3, [pc, #12]	; (800a8b4 <HAL_RCC_OscConfig+0x4f8>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0f0      	beq.n	800a892 <HAL_RCC_OscConfig+0x4d6>
 800a8b0:	e01b      	b.n	800a8ea <HAL_RCC_OscConfig+0x52e>
 800a8b2:	bf00      	nop
 800a8b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a8b8:	4b9b      	ldr	r3, [pc, #620]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a9a      	ldr	r2, [pc, #616]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a8be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8c4:	f7fc f9ca 	bl	8006c5c <HAL_GetTick>
 800a8c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8ca:	e008      	b.n	800a8de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a8cc:	f7fc f9c6 	bl	8006c5c <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d901      	bls.n	800a8de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e195      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8de:	4b92      	ldr	r3, [pc, #584]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1f0      	bne.n	800a8cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 8081 	beq.w	800a9fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8f8:	4b8c      	ldr	r3, [pc, #560]	; (800ab2c <HAL_RCC_OscConfig+0x770>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a8b      	ldr	r2, [pc, #556]	; (800ab2c <HAL_RCC_OscConfig+0x770>)
 800a8fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a904:	f7fc f9aa 	bl	8006c5c <HAL_GetTick>
 800a908:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a90c:	f7fc f9a6 	bl	8006c5c <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b64      	cmp	r3, #100	; 0x64
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e175      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a91e:	4b83      	ldr	r3, [pc, #524]	; (800ab2c <HAL_RCC_OscConfig+0x770>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f0      	beq.n	800a90c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d106      	bne.n	800a940 <HAL_RCC_OscConfig+0x584>
 800a932:	4b7d      	ldr	r3, [pc, #500]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a936:	4a7c      	ldr	r2, [pc, #496]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a938:	f043 0301 	orr.w	r3, r3, #1
 800a93c:	6713      	str	r3, [r2, #112]	; 0x70
 800a93e:	e02d      	b.n	800a99c <HAL_RCC_OscConfig+0x5e0>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10c      	bne.n	800a962 <HAL_RCC_OscConfig+0x5a6>
 800a948:	4b77      	ldr	r3, [pc, #476]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94c:	4a76      	ldr	r2, [pc, #472]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a94e:	f023 0301 	bic.w	r3, r3, #1
 800a952:	6713      	str	r3, [r2, #112]	; 0x70
 800a954:	4b74      	ldr	r3, [pc, #464]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a958:	4a73      	ldr	r2, [pc, #460]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a95a:	f023 0304 	bic.w	r3, r3, #4
 800a95e:	6713      	str	r3, [r2, #112]	; 0x70
 800a960:	e01c      	b.n	800a99c <HAL_RCC_OscConfig+0x5e0>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	2b05      	cmp	r3, #5
 800a968:	d10c      	bne.n	800a984 <HAL_RCC_OscConfig+0x5c8>
 800a96a:	4b6f      	ldr	r3, [pc, #444]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96e:	4a6e      	ldr	r2, [pc, #440]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a970:	f043 0304 	orr.w	r3, r3, #4
 800a974:	6713      	str	r3, [r2, #112]	; 0x70
 800a976:	4b6c      	ldr	r3, [pc, #432]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97a:	4a6b      	ldr	r2, [pc, #428]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	6713      	str	r3, [r2, #112]	; 0x70
 800a982:	e00b      	b.n	800a99c <HAL_RCC_OscConfig+0x5e0>
 800a984:	4b68      	ldr	r3, [pc, #416]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a988:	4a67      	ldr	r2, [pc, #412]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a98a:	f023 0301 	bic.w	r3, r3, #1
 800a98e:	6713      	str	r3, [r2, #112]	; 0x70
 800a990:	4b65      	ldr	r3, [pc, #404]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a994:	4a64      	ldr	r2, [pc, #400]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a996:	f023 0304 	bic.w	r3, r3, #4
 800a99a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d015      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9a4:	f7fc f95a 	bl	8006c5c <HAL_GetTick>
 800a9a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9aa:	e00a      	b.n	800a9c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9ac:	f7fc f956 	bl	8006c5c <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d901      	bls.n	800a9c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e123      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9c2:	4b59      	ldr	r3, [pc, #356]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c6:	f003 0302 	and.w	r3, r3, #2
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0ee      	beq.n	800a9ac <HAL_RCC_OscConfig+0x5f0>
 800a9ce:	e014      	b.n	800a9fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9d0:	f7fc f944 	bl	8006c5c <HAL_GetTick>
 800a9d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9d6:	e00a      	b.n	800a9ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9d8:	f7fc f940 	bl	8006c5c <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d901      	bls.n	800a9ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e10d      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9ee:	4b4e      	ldr	r3, [pc, #312]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1ee      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8102 	beq.w	800ac08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa04:	4b48      	ldr	r3, [pc, #288]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa0c:	2b18      	cmp	r3, #24
 800aa0e:	f000 80bd 	beq.w	800ab8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	f040 809e 	bne.w	800ab58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa1c:	4b42      	ldr	r3, [pc, #264]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a41      	ldr	r2, [pc, #260]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa28:	f7fc f918 	bl	8006c5c <HAL_GetTick>
 800aa2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa2e:	e008      	b.n	800aa42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa30:	f7fc f914 	bl	8006c5c <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e0e3      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa42:	4b39      	ldr	r3, [pc, #228]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f0      	bne.n	800aa30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa4e:	4b36      	ldr	r3, [pc, #216]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa52:	4b37      	ldr	r3, [pc, #220]	; (800ab30 <HAL_RCC_OscConfig+0x774>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa5e:	0112      	lsls	r2, r2, #4
 800aa60:	430a      	orrs	r2, r1
 800aa62:	4931      	ldr	r1, [pc, #196]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	628b      	str	r3, [r1, #40]	; 0x28
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa76:	3b01      	subs	r3, #1
 800aa78:	025b      	lsls	r3, r3, #9
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	3b01      	subs	r3, #1
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa90:	3b01      	subs	r3, #1
 800aa92:	061b      	lsls	r3, r3, #24
 800aa94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa98:	4923      	ldr	r1, [pc, #140]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aa9e:	4b22      	ldr	r3, [pc, #136]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	4a21      	ldr	r2, [pc, #132]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aaa4:	f023 0301 	bic.w	r3, r3, #1
 800aaa8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aaac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaae:	4b21      	ldr	r3, [pc, #132]	; (800ab34 <HAL_RCC_OscConfig+0x778>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aab6:	00d2      	lsls	r2, r2, #3
 800aab8:	491b      	ldr	r1, [pc, #108]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aabe:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac2:	f023 020c 	bic.w	r2, r3, #12
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	4917      	ldr	r1, [pc, #92]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aad0:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	f023 0202 	bic.w	r2, r3, #2
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aadc:	4912      	ldr	r1, [pc, #72]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aae2:	4b11      	ldr	r3, [pc, #68]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	4a10      	ldr	r2, [pc, #64]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaee:	4b0e      	ldr	r3, [pc, #56]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	4a0d      	ldr	r2, [pc, #52]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aaf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aafa:	4b0b      	ldr	r3, [pc, #44]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafe:	4a0a      	ldr	r2, [pc, #40]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800ab00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ab06:	4b08      	ldr	r3, [pc, #32]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	4a07      	ldr	r2, [pc, #28]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab12:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a04      	ldr	r2, [pc, #16]	; (800ab28 <HAL_RCC_OscConfig+0x76c>)
 800ab18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab1e:	f7fc f89d 	bl	8006c5c <HAL_GetTick>
 800ab22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab24:	e011      	b.n	800ab4a <HAL_RCC_OscConfig+0x78e>
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	58024800 	.word	0x58024800
 800ab30:	fffffc0c 	.word	0xfffffc0c
 800ab34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab38:	f7fc f890 	bl	8006c5c <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d901      	bls.n	800ab4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e05f      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab4a:	4b32      	ldr	r3, [pc, #200]	; (800ac14 <HAL_RCC_OscConfig+0x858>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f0      	beq.n	800ab38 <HAL_RCC_OscConfig+0x77c>
 800ab56:	e057      	b.n	800ac08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab58:	4b2e      	ldr	r3, [pc, #184]	; (800ac14 <HAL_RCC_OscConfig+0x858>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a2d      	ldr	r2, [pc, #180]	; (800ac14 <HAL_RCC_OscConfig+0x858>)
 800ab5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab64:	f7fc f87a 	bl	8006c5c <HAL_GetTick>
 800ab68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab6a:	e008      	b.n	800ab7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab6c:	f7fc f876 	bl	8006c5c <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d901      	bls.n	800ab7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e045      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab7e:	4b25      	ldr	r3, [pc, #148]	; (800ac14 <HAL_RCC_OscConfig+0x858>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1f0      	bne.n	800ab6c <HAL_RCC_OscConfig+0x7b0>
 800ab8a:	e03d      	b.n	800ac08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab8c:	4b21      	ldr	r3, [pc, #132]	; (800ac14 <HAL_RCC_OscConfig+0x858>)
 800ab8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab92:	4b20      	ldr	r3, [pc, #128]	; (800ac14 <HAL_RCC_OscConfig+0x858>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d031      	beq.n	800ac04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	f003 0203 	and.w	r2, r3, #3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abaa:	429a      	cmp	r2, r3
 800abac:	d12a      	bne.n	800ac04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	091b      	lsrs	r3, r3, #4
 800abb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abba:	429a      	cmp	r2, r3
 800abbc:	d122      	bne.n	800ac04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abca:	429a      	cmp	r2, r3
 800abcc:	d11a      	bne.n	800ac04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	0a5b      	lsrs	r3, r3, #9
 800abd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abdc:	429a      	cmp	r2, r3
 800abde:	d111      	bne.n	800ac04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	0c1b      	lsrs	r3, r3, #16
 800abe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abee:	429a      	cmp	r2, r3
 800abf0:	d108      	bne.n	800ac04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	0e1b      	lsrs	r3, r3, #24
 800abf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d001      	beq.n	800ac08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e000      	b.n	800ac0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3730      	adds	r7, #48	; 0x30
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	58024400 	.word	0x58024400

0800ac18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e19c      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac2c:	4b8a      	ldr	r3, [pc, #552]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 030f 	and.w	r3, r3, #15
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d910      	bls.n	800ac5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac3a:	4b87      	ldr	r3, [pc, #540]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f023 020f 	bic.w	r2, r3, #15
 800ac42:	4985      	ldr	r1, [pc, #532]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac4a:	4b83      	ldr	r3, [pc, #524]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 030f 	and.w	r3, r3, #15
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d001      	beq.n	800ac5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e184      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d010      	beq.n	800ac8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	691a      	ldr	r2, [r3, #16]
 800ac6c:	4b7b      	ldr	r3, [pc, #492]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d908      	bls.n	800ac8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac78:	4b78      	ldr	r3, [pc, #480]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	4975      	ldr	r1, [pc, #468]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d010      	beq.n	800acb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	695a      	ldr	r2, [r3, #20]
 800ac9a:	4b70      	ldr	r3, [pc, #448]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ac9c:	69db      	ldr	r3, [r3, #28]
 800ac9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d908      	bls.n	800acb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aca6:	4b6d      	ldr	r3, [pc, #436]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	496a      	ldr	r1, [pc, #424]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0310 	and.w	r3, r3, #16
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d010      	beq.n	800ace6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	699a      	ldr	r2, [r3, #24]
 800acc8:	4b64      	ldr	r3, [pc, #400]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d908      	bls.n	800ace6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800acd4:	4b61      	ldr	r3, [pc, #388]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	495e      	ldr	r1, [pc, #376]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0320 	and.w	r3, r3, #32
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d010      	beq.n	800ad14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	69da      	ldr	r2, [r3, #28]
 800acf6:	4b59      	ldr	r3, [pc, #356]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d908      	bls.n	800ad14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ad02:	4b56      	ldr	r3, [pc, #344]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	4953      	ldr	r1, [pc, #332]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d010      	beq.n	800ad42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	4b4d      	ldr	r3, [pc, #308]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d908      	bls.n	800ad42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad30:	4b4a      	ldr	r3, [pc, #296]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f023 020f 	bic.w	r2, r3, #15
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4947      	ldr	r1, [pc, #284]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d055      	beq.n	800adfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ad4e:	4b43      	ldr	r3, [pc, #268]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	4940      	ldr	r1, [pc, #256]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d107      	bne.n	800ad78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad68:	4b3c      	ldr	r3, [pc, #240]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d121      	bne.n	800adb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e0f6      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2b03      	cmp	r3, #3
 800ad7e:	d107      	bne.n	800ad90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad80:	4b36      	ldr	r3, [pc, #216]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d115      	bne.n	800adb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e0ea      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d107      	bne.n	800ada8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad98:	4b30      	ldr	r3, [pc, #192]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d109      	bne.n	800adb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e0de      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ada8:	4b2c      	ldr	r3, [pc, #176]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0d6      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adb8:	4b28      	ldr	r3, [pc, #160]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	f023 0207 	bic.w	r2, r3, #7
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4925      	ldr	r1, [pc, #148]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adca:	f7fb ff47 	bl	8006c5c <HAL_GetTick>
 800adce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800add0:	e00a      	b.n	800ade8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800add2:	f7fb ff43 	bl	8006c5c <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d901      	bls.n	800ade8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e0be      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ade8:	4b1c      	ldr	r3, [pc, #112]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	00db      	lsls	r3, r3, #3
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d1eb      	bne.n	800add2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d010      	beq.n	800ae28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d208      	bcs.n	800ae28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae16:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	f023 020f 	bic.w	r2, r3, #15
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	490e      	ldr	r1, [pc, #56]	; (800ae5c <HAL_RCC_ClockConfig+0x244>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae28:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d214      	bcs.n	800ae60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae36:	4b08      	ldr	r3, [pc, #32]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f023 020f 	bic.w	r2, r3, #15
 800ae3e:	4906      	ldr	r1, [pc, #24]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae46:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <HAL_RCC_ClockConfig+0x240>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d005      	beq.n	800ae60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e086      	b.n	800af66 <HAL_RCC_ClockConfig+0x34e>
 800ae58:	52002000 	.word	0x52002000
 800ae5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d010      	beq.n	800ae8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	691a      	ldr	r2, [r3, #16]
 800ae70:	4b3f      	ldr	r3, [pc, #252]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d208      	bcs.n	800ae8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae7c:	4b3c      	ldr	r3, [pc, #240]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	4939      	ldr	r1, [pc, #228]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0308 	and.w	r3, r3, #8
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d010      	beq.n	800aebc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	695a      	ldr	r2, [r3, #20]
 800ae9e:	4b34      	ldr	r3, [pc, #208]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d208      	bcs.n	800aebc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aeaa:	4b31      	ldr	r3, [pc, #196]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	492e      	ldr	r1, [pc, #184]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d010      	beq.n	800aeea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699a      	ldr	r2, [r3, #24]
 800aecc:	4b28      	ldr	r3, [pc, #160]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d208      	bcs.n	800aeea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aed8:	4b25      	ldr	r3, [pc, #148]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	4922      	ldr	r1, [pc, #136]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aee6:	4313      	orrs	r3, r2
 800aee8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 0320 	and.w	r3, r3, #32
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d010      	beq.n	800af18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	69da      	ldr	r2, [r3, #28]
 800aefa:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af02:	429a      	cmp	r2, r3
 800af04:	d208      	bcs.n	800af18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800af06:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	4917      	ldr	r1, [pc, #92]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800af14:	4313      	orrs	r3, r2
 800af16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af18:	f000 f834 	bl	800af84 <HAL_RCC_GetSysClockFreq>
 800af1c:	4602      	mov	r2, r0
 800af1e:	4b14      	ldr	r3, [pc, #80]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	0a1b      	lsrs	r3, r3, #8
 800af24:	f003 030f 	and.w	r3, r3, #15
 800af28:	4912      	ldr	r1, [pc, #72]	; (800af74 <HAL_RCC_ClockConfig+0x35c>)
 800af2a:	5ccb      	ldrb	r3, [r1, r3]
 800af2c:	f003 031f 	and.w	r3, r3, #31
 800af30:	fa22 f303 	lsr.w	r3, r2, r3
 800af34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af36:	4b0e      	ldr	r3, [pc, #56]	; (800af70 <HAL_RCC_ClockConfig+0x358>)
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	f003 030f 	and.w	r3, r3, #15
 800af3e:	4a0d      	ldr	r2, [pc, #52]	; (800af74 <HAL_RCC_ClockConfig+0x35c>)
 800af40:	5cd3      	ldrb	r3, [r2, r3]
 800af42:	f003 031f 	and.w	r3, r3, #31
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	fa22 f303 	lsr.w	r3, r2, r3
 800af4c:	4a0a      	ldr	r2, [pc, #40]	; (800af78 <HAL_RCC_ClockConfig+0x360>)
 800af4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af50:	4a0a      	ldr	r2, [pc, #40]	; (800af7c <HAL_RCC_ClockConfig+0x364>)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800af56:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <HAL_RCC_ClockConfig+0x368>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fb fe34 	bl	8006bc8 <HAL_InitTick>
 800af60:	4603      	mov	r3, r0
 800af62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800af64:	7bfb      	ldrb	r3, [r7, #15]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	58024400 	.word	0x58024400
 800af74:	08014d38 	.word	0x08014d38
 800af78:	24000238 	.word	0x24000238
 800af7c:	24000234 	.word	0x24000234
 800af80:	2400023c 	.word	0x2400023c

0800af84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af84:	b480      	push	{r7}
 800af86:	b089      	sub	sp, #36	; 0x24
 800af88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af8a:	4bb3      	ldr	r3, [pc, #716]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af92:	2b18      	cmp	r3, #24
 800af94:	f200 8155 	bhi.w	800b242 <HAL_RCC_GetSysClockFreq+0x2be>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800b005 	.word	0x0800b005
 800afa4:	0800b243 	.word	0x0800b243
 800afa8:	0800b243 	.word	0x0800b243
 800afac:	0800b243 	.word	0x0800b243
 800afb0:	0800b243 	.word	0x0800b243
 800afb4:	0800b243 	.word	0x0800b243
 800afb8:	0800b243 	.word	0x0800b243
 800afbc:	0800b243 	.word	0x0800b243
 800afc0:	0800b02b 	.word	0x0800b02b
 800afc4:	0800b243 	.word	0x0800b243
 800afc8:	0800b243 	.word	0x0800b243
 800afcc:	0800b243 	.word	0x0800b243
 800afd0:	0800b243 	.word	0x0800b243
 800afd4:	0800b243 	.word	0x0800b243
 800afd8:	0800b243 	.word	0x0800b243
 800afdc:	0800b243 	.word	0x0800b243
 800afe0:	0800b031 	.word	0x0800b031
 800afe4:	0800b243 	.word	0x0800b243
 800afe8:	0800b243 	.word	0x0800b243
 800afec:	0800b243 	.word	0x0800b243
 800aff0:	0800b243 	.word	0x0800b243
 800aff4:	0800b243 	.word	0x0800b243
 800aff8:	0800b243 	.word	0x0800b243
 800affc:	0800b243 	.word	0x0800b243
 800b000:	0800b037 	.word	0x0800b037
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b004:	4b94      	ldr	r3, [pc, #592]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0320 	and.w	r3, r3, #32
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b010:	4b91      	ldr	r3, [pc, #580]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	08db      	lsrs	r3, r3, #3
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	4a90      	ldr	r2, [pc, #576]	; (800b25c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b01c:	fa22 f303 	lsr.w	r3, r2, r3
 800b020:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b022:	e111      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b024:	4b8d      	ldr	r3, [pc, #564]	; (800b25c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b026:	61bb      	str	r3, [r7, #24]
    break;
 800b028:	e10e      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b02a:	4b8d      	ldr	r3, [pc, #564]	; (800b260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b02c:	61bb      	str	r3, [r7, #24]
    break;
 800b02e:	e10b      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b030:	4b8c      	ldr	r3, [pc, #560]	; (800b264 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b032:	61bb      	str	r3, [r7, #24]
    break;
 800b034:	e108      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b036:	4b88      	ldr	r3, [pc, #544]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03a:	f003 0303 	and.w	r3, r3, #3
 800b03e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b040:	4b85      	ldr	r3, [pc, #532]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b044:	091b      	lsrs	r3, r3, #4
 800b046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b04c:	4b82      	ldr	r3, [pc, #520]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b056:	4b80      	ldr	r3, [pc, #512]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05a:	08db      	lsrs	r3, r3, #3
 800b05c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	fb02 f303 	mul.w	r3, r2, r3
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80e1 	beq.w	800b23c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	f000 8083 	beq.w	800b188 <HAL_RCC_GetSysClockFreq+0x204>
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b02      	cmp	r3, #2
 800b086:	f200 80a1 	bhi.w	800b1cc <HAL_RCC_GetSysClockFreq+0x248>
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <HAL_RCC_GetSysClockFreq+0x114>
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d056      	beq.n	800b144 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b096:	e099      	b.n	800b1cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b098:	4b6f      	ldr	r3, [pc, #444]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0320 	and.w	r3, r3, #32
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d02d      	beq.n	800b100 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0a4:	4b6c      	ldr	r3, [pc, #432]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	08db      	lsrs	r3, r3, #3
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	4a6b      	ldr	r2, [pc, #428]	; (800b25c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	ee07 3a90 	vmov	s15, r3
 800b0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ce:	4b62      	ldr	r3, [pc, #392]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0de:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b0fe:	e087      	b.n	800b210 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b26c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b112:	4b51      	ldr	r3, [pc, #324]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b122:	ed97 6a02 	vldr	s12, [r7, #8]
 800b126:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b142:	e065      	b.n	800b210 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b270 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b156:	4b40      	ldr	r3, [pc, #256]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b166:	ed97 6a02 	vldr	s12, [r7, #8]
 800b16a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b16e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b186:	e043      	b.n	800b210 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b192:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b274 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b19a:	4b2f      	ldr	r3, [pc, #188]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a2:	ee07 3a90 	vmov	s15, r3
 800b1a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ca:	e021      	b.n	800b210 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b270 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1de:	4b1e      	ldr	r3, [pc, #120]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b20a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b20e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b210:	4b11      	ldr	r3, [pc, #68]	; (800b258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b214:	0a5b      	lsrs	r3, r3, #9
 800b216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b21a:	3301      	adds	r3, #1
 800b21c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b228:	edd7 6a07 	vldr	s13, [r7, #28]
 800b22c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b234:	ee17 3a90 	vmov	r3, s15
 800b238:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b23a:	e005      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	61bb      	str	r3, [r7, #24]
    break;
 800b240:	e002      	b.n	800b248 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b242:	4b07      	ldr	r3, [pc, #28]	; (800b260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b244:	61bb      	str	r3, [r7, #24]
    break;
 800b246:	bf00      	nop
  }

  return sysclockfreq;
 800b248:	69bb      	ldr	r3, [r7, #24]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3724      	adds	r7, #36	; 0x24
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	58024400 	.word	0x58024400
 800b25c:	03d09000 	.word	0x03d09000
 800b260:	003d0900 	.word	0x003d0900
 800b264:	02dc6c00 	.word	0x02dc6c00
 800b268:	46000000 	.word	0x46000000
 800b26c:	4c742400 	.word	0x4c742400
 800b270:	4a742400 	.word	0x4a742400
 800b274:	4c371b00 	.word	0x4c371b00

0800b278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b27e:	f7ff fe81 	bl	800af84 <HAL_RCC_GetSysClockFreq>
 800b282:	4602      	mov	r2, r0
 800b284:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	f003 030f 	and.w	r3, r3, #15
 800b28e:	490f      	ldr	r1, [pc, #60]	; (800b2cc <HAL_RCC_GetHCLKFreq+0x54>)
 800b290:	5ccb      	ldrb	r3, [r1, r3]
 800b292:	f003 031f 	and.w	r3, r3, #31
 800b296:	fa22 f303 	lsr.w	r3, r2, r3
 800b29a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	f003 030f 	and.w	r3, r3, #15
 800b2a4:	4a09      	ldr	r2, [pc, #36]	; (800b2cc <HAL_RCC_GetHCLKFreq+0x54>)
 800b2a6:	5cd3      	ldrb	r3, [r2, r3]
 800b2a8:	f003 031f 	and.w	r3, r3, #31
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b2:	4a07      	ldr	r2, [pc, #28]	; (800b2d0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2b6:	4a07      	ldr	r2, [pc, #28]	; (800b2d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b2bc:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2be:	681b      	ldr	r3, [r3, #0]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	58024400 	.word	0x58024400
 800b2cc:	08014d38 	.word	0x08014d38
 800b2d0:	24000238 	.word	0x24000238
 800b2d4:	24000234 	.word	0x24000234

0800b2d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b2dc:	f7ff ffcc 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	4b06      	ldr	r3, [pc, #24]	; (800b2fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	091b      	lsrs	r3, r3, #4
 800b2e8:	f003 0307 	and.w	r3, r3, #7
 800b2ec:	4904      	ldr	r1, [pc, #16]	; (800b300 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2ee:	5ccb      	ldrb	r3, [r1, r3]
 800b2f0:	f003 031f 	and.w	r3, r3, #31
 800b2f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	58024400 	.word	0x58024400
 800b300:	08014d38 	.word	0x08014d38

0800b304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b308:	f7ff ffb6 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800b30c:	4602      	mov	r2, r0
 800b30e:	4b06      	ldr	r3, [pc, #24]	; (800b328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	0a1b      	lsrs	r3, r3, #8
 800b314:	f003 0307 	and.w	r3, r3, #7
 800b318:	4904      	ldr	r1, [pc, #16]	; (800b32c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b31a:	5ccb      	ldrb	r3, [r1, r3]
 800b31c:	f003 031f 	and.w	r3, r3, #31
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b324:	4618      	mov	r0, r3
 800b326:	bd80      	pop	{r7, pc}
 800b328:	58024400 	.word	0x58024400
 800b32c:	08014d38 	.word	0x08014d38

0800b330 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b338:	2300      	movs	r3, #0
 800b33a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b33c:	2300      	movs	r3, #0
 800b33e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d03f      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b354:	d02a      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b356:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b35a:	d824      	bhi.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b35c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b360:	d018      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b366:	d81e      	bhi.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b370:	d007      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b372:	e018      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b374:	4ba3      	ldr	r3, [pc, #652]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	4aa2      	ldr	r2, [pc, #648]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b37a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b37e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b380:	e015      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3304      	adds	r3, #4
 800b386:	2102      	movs	r1, #2
 800b388:	4618      	mov	r0, r3
 800b38a:	f001 f9d5 	bl	800c738 <RCCEx_PLL2_Config>
 800b38e:	4603      	mov	r3, r0
 800b390:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b392:	e00c      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3324      	adds	r3, #36	; 0x24
 800b398:	2102      	movs	r1, #2
 800b39a:	4618      	mov	r0, r3
 800b39c:	f001 fa7e 	bl	800c89c <RCCEx_PLL3_Config>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b3a4:	e003      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3aa:	e000      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b3ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d109      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3b4:	4b93      	ldr	r3, [pc, #588]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3c0:	4990      	ldr	r1, [pc, #576]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	650b      	str	r3, [r1, #80]	; 0x50
 800b3c6:	e001      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d03d      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d826      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b3e0:	a201      	add	r2, pc, #4	; (adr r2, 800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e6:	bf00      	nop
 800b3e8:	0800b3fd 	.word	0x0800b3fd
 800b3ec:	0800b40b 	.word	0x0800b40b
 800b3f0:	0800b41d 	.word	0x0800b41d
 800b3f4:	0800b435 	.word	0x0800b435
 800b3f8:	0800b435 	.word	0x0800b435
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3fc:	4b81      	ldr	r3, [pc, #516]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	4a80      	ldr	r2, [pc, #512]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b408:	e015      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	3304      	adds	r3, #4
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f001 f991 	bl	800c738 <RCCEx_PLL2_Config>
 800b416:	4603      	mov	r3, r0
 800b418:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b41a:	e00c      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3324      	adds	r3, #36	; 0x24
 800b420:	2100      	movs	r1, #0
 800b422:	4618      	mov	r0, r3
 800b424:	f001 fa3a 	bl	800c89c <RCCEx_PLL3_Config>
 800b428:	4603      	mov	r3, r0
 800b42a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b42c:	e003      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	75fb      	strb	r3, [r7, #23]
      break;
 800b432:	e000      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b434:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b43c:	4b71      	ldr	r3, [pc, #452]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b440:	f023 0207 	bic.w	r2, r3, #7
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b448:	496e      	ldr	r1, [pc, #440]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	650b      	str	r3, [r1, #80]	; 0x50
 800b44e:	e001      	b.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d042      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b468:	d02b      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b46e:	d825      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b470:	2bc0      	cmp	r3, #192	; 0xc0
 800b472:	d028      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b474:	2bc0      	cmp	r3, #192	; 0xc0
 800b476:	d821      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b478:	2b80      	cmp	r3, #128	; 0x80
 800b47a:	d016      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b47c:	2b80      	cmp	r3, #128	; 0x80
 800b47e:	d81d      	bhi.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b484:	2b40      	cmp	r3, #64	; 0x40
 800b486:	d007      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b488:	e018      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b48a:	4b5e      	ldr	r3, [pc, #376]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48e:	4a5d      	ldr	r2, [pc, #372]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b494:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b496:	e017      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3304      	adds	r3, #4
 800b49c:	2100      	movs	r1, #0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 f94a 	bl	800c738 <RCCEx_PLL2_Config>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b4a8:	e00e      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	3324      	adds	r3, #36	; 0x24
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f001 f9f3 	bl	800c89c <RCCEx_PLL3_Config>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b4ba:	e005      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c0:	e002      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b4c2:	bf00      	nop
 800b4c4:	e000      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b4c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4c8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d109      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b4ce:	4b4d      	ldr	r3, [pc, #308]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	494a      	ldr	r1, [pc, #296]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	650b      	str	r3, [r1, #80]	; 0x50
 800b4e0:	e001      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d049      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4fc:	d030      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b4fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b502:	d82a      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b504:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b508:	d02c      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b50a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b50e:	d824      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b514:	d018      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b51a:	d81e      	bhi.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d003      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b524:	d007      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b526:	e018      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b528:	4b36      	ldr	r3, [pc, #216]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	4a35      	ldr	r2, [pc, #212]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b52e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b534:	e017      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3304      	adds	r3, #4
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f001 f8fb 	bl	800c738 <RCCEx_PLL2_Config>
 800b542:	4603      	mov	r3, r0
 800b544:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b546:	e00e      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3324      	adds	r3, #36	; 0x24
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f001 f9a4 	bl	800c89c <RCCEx_PLL3_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b558:	e005      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	75fb      	strb	r3, [r7, #23]
      break;
 800b55e:	e002      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b560:	bf00      	nop
 800b562:	e000      	b.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b564:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10a      	bne.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b56c:	4b25      	ldr	r3, [pc, #148]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b570:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b57a:	4922      	ldr	r1, [pc, #136]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	658b      	str	r3, [r1, #88]	; 0x58
 800b580:	e001      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d04b      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b59c:	d030      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b59e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5a2:	d82a      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b5a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5a8:	d02e      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b5aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5ae:	d824      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b5b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5b4:	d018      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b5b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5ba:	d81e      	bhi.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b5c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b5c4:	d007      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b5c6:	e018      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5c8:	4b0e      	ldr	r3, [pc, #56]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	4a0d      	ldr	r2, [pc, #52]	; (800b604 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b5ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b5d4:	e019      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f001 f8ab 	bl	800c738 <RCCEx_PLL2_Config>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b5e6:	e010      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3324      	adds	r3, #36	; 0x24
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f001 f954 	bl	800c89c <RCCEx_PLL3_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b5f8:	e007      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b5fe:	e004      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b600:	bf00      	nop
 800b602:	e002      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b604:	58024400 	.word	0x58024400
      break;
 800b608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b610:	4b99      	ldr	r3, [pc, #612]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b614:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b61e:	4996      	ldr	r1, [pc, #600]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b620:	4313      	orrs	r3, r2
 800b622:	658b      	str	r3, [r1, #88]	; 0x58
 800b624:	e001      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d032      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b63a:	2b30      	cmp	r3, #48	; 0x30
 800b63c:	d01c      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b63e:	2b30      	cmp	r3, #48	; 0x30
 800b640:	d817      	bhi.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b642:	2b20      	cmp	r3, #32
 800b644:	d00c      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b646:	2b20      	cmp	r3, #32
 800b648:	d813      	bhi.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d016      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b64e:	2b10      	cmp	r3, #16
 800b650:	d10f      	bne.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b652:	4b89      	ldr	r3, [pc, #548]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	4a88      	ldr	r2, [pc, #544]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b65c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b65e:	e00e      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	3304      	adds	r3, #4
 800b664:	2102      	movs	r1, #2
 800b666:	4618      	mov	r0, r3
 800b668:	f001 f866 	bl	800c738 <RCCEx_PLL2_Config>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b670:	e005      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	75fb      	strb	r3, [r7, #23]
      break;
 800b676:	e002      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b678:	bf00      	nop
 800b67a:	e000      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b67c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d109      	bne.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b684:	4b7c      	ldr	r3, [pc, #496]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b688:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b690:	4979      	ldr	r1, [pc, #484]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b692:	4313      	orrs	r3, r2
 800b694:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b696:	e001      	b.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d047      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6b0:	d030      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b6b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6b6:	d82a      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b6b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6bc:	d02c      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b6be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6c2:	d824      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b6c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6c8:	d018      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b6ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6ce:	d81e      	bhi.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d003      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d8:	d007      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b6da:	e018      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6dc:	4b66      	ldr	r3, [pc, #408]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	4a65      	ldr	r2, [pc, #404]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b6e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b6e8:	e017      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f001 f821 	bl	800c738 <RCCEx_PLL2_Config>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b6fa:	e00e      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3324      	adds	r3, #36	; 0x24
 800b700:	2100      	movs	r1, #0
 800b702:	4618      	mov	r0, r3
 800b704:	f001 f8ca 	bl	800c89c <RCCEx_PLL3_Config>
 800b708:	4603      	mov	r3, r0
 800b70a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b70c:	e005      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
      break;
 800b712:	e002      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b714:	bf00      	nop
 800b716:	e000      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d109      	bne.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b720:	4b55      	ldr	r3, [pc, #340]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b724:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b72c:	4952      	ldr	r1, [pc, #328]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b72e:	4313      	orrs	r3, r2
 800b730:	650b      	str	r3, [r1, #80]	; 0x50
 800b732:	e001      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b734:	7dfb      	ldrb	r3, [r7, #23]
 800b736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d049      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b74c:	d02e      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b74e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b752:	d828      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b758:	d02a      	beq.n	800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b75a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b75e:	d822      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b760:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b764:	d026      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b766:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b76a:	d81c      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b76c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b770:	d010      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b776:	d816      	bhi.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d01d      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b77c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b780:	d111      	bne.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3304      	adds	r3, #4
 800b786:	2101      	movs	r1, #1
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 ffd5 	bl	800c738 <RCCEx_PLL2_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b792:	e012      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	3324      	adds	r3, #36	; 0x24
 800b798:	2101      	movs	r1, #1
 800b79a:	4618      	mov	r0, r3
 800b79c:	f001 f87e 	bl	800c89c <RCCEx_PLL3_Config>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b7a4:	e009      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7aa:	e006      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b7ac:	bf00      	nop
 800b7ae:	e004      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b7b0:	bf00      	nop
 800b7b2:	e002      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b7b4:	bf00      	nop
 800b7b6:	e000      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b7b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d109      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7c0:	4b2d      	ldr	r3, [pc, #180]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7cc:	492a      	ldr	r1, [pc, #168]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	650b      	str	r3, [r1, #80]	; 0x50
 800b7d2:	e001      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d04d      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b7ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7ee:	d02e      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b7f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7f4:	d828      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7fa:	d02a      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b7fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b800:	d822      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b806:	d026      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b80c:	d81c      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b812:	d010      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b818:	d816      	bhi.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d01d      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b81e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b822:	d111      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3304      	adds	r3, #4
 800b828:	2101      	movs	r1, #1
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 ff84 	bl	800c738 <RCCEx_PLL2_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b834:	e012      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3324      	adds	r3, #36	; 0x24
 800b83a:	2101      	movs	r1, #1
 800b83c:	4618      	mov	r0, r3
 800b83e:	f001 f82d 	bl	800c89c <RCCEx_PLL3_Config>
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b846:	e009      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	75fb      	strb	r3, [r7, #23]
      break;
 800b84c:	e006      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b84e:	bf00      	nop
 800b850:	e004      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b852:	bf00      	nop
 800b854:	e002      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b856:	bf00      	nop
 800b858:	e000      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b85a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b85c:	7dfb      	ldrb	r3, [r7, #23]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10c      	bne.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b866:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b870:	4901      	ldr	r1, [pc, #4]	; (800b878 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b872:	4313      	orrs	r3, r2
 800b874:	658b      	str	r3, [r1, #88]	; 0x58
 800b876:	e003      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b878:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d02f      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b894:	d00e      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b89a:	d814      	bhi.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d015      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b8a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8a4:	d10f      	bne.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a6:	4baf      	ldr	r3, [pc, #700]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8aa:	4aae      	ldr	r2, [pc, #696]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b8b2:	e00c      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 ff3c 	bl	800c738 <RCCEx_PLL2_Config>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b8c4:	e003      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ca:	e000      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b8cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d109      	bne.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b8d4:	4ba3      	ldr	r3, [pc, #652]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e0:	49a0      	ldr	r1, [pc, #640]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	650b      	str	r3, [r1, #80]	; 0x50
 800b8e6:	e001      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d032      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d81b      	bhi.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b900:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b906:	bf00      	nop
 800b908:	0800b93f 	.word	0x0800b93f
 800b90c:	0800b919 	.word	0x0800b919
 800b910:	0800b927 	.word	0x0800b927
 800b914:	0800b93f 	.word	0x0800b93f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b918:	4b92      	ldr	r3, [pc, #584]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	4a91      	ldr	r2, [pc, #580]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b91e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b924:	e00c      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3304      	adds	r3, #4
 800b92a:	2102      	movs	r1, #2
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 ff03 	bl	800c738 <RCCEx_PLL2_Config>
 800b932:	4603      	mov	r3, r0
 800b934:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b936:	e003      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	75fb      	strb	r3, [r7, #23]
      break;
 800b93c:	e000      	b.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b93e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d109      	bne.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b946:	4b87      	ldr	r3, [pc, #540]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94a:	f023 0203 	bic.w	r2, r3, #3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b952:	4984      	ldr	r1, [pc, #528]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b954:	4313      	orrs	r3, r2
 800b956:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b958:	e001      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 8086 	beq.w	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b96c:	4b7e      	ldr	r3, [pc, #504]	; (800bb68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a7d      	ldr	r2, [pc, #500]	; (800bb68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b978:	f7fb f970 	bl	8006c5c <HAL_GetTick>
 800b97c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b97e:	e009      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b980:	f7fb f96c 	bl	8006c5c <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	2b64      	cmp	r3, #100	; 0x64
 800b98c:	d902      	bls.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	75fb      	strb	r3, [r7, #23]
        break;
 800b992:	e005      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b994:	4b74      	ldr	r3, [pc, #464]	; (800bb68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0ef      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d166      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b9a6:	4b6f      	ldr	r3, [pc, #444]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9b0:	4053      	eors	r3, r2
 800b9b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d013      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b9ba:	4b6a      	ldr	r3, [pc, #424]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b9c4:	4b67      	ldr	r3, [pc, #412]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c8:	4a66      	ldr	r2, [pc, #408]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9d0:	4b64      	ldr	r3, [pc, #400]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d4:	4a63      	ldr	r2, [pc, #396]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b9dc:	4a61      	ldr	r2, [pc, #388]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ec:	d115      	bne.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9ee:	f7fb f935 	bl	8006c5c <HAL_GetTick>
 800b9f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9f4:	e00b      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9f6:	f7fb f931 	bl	8006c5c <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d902      	bls.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	75fb      	strb	r3, [r7, #23]
            break;
 800ba0c:	e005      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba0e:	4b55      	ldr	r3, [pc, #340]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba12:	f003 0302 	and.w	r3, r3, #2
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0ed      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d126      	bne.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba2e:	d10d      	bne.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ba30:	4b4c      	ldr	r3, [pc, #304]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba3e:	0919      	lsrs	r1, r3, #4
 800ba40:	4b4a      	ldr	r3, [pc, #296]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ba42:	400b      	ands	r3, r1
 800ba44:	4947      	ldr	r1, [pc, #284]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	610b      	str	r3, [r1, #16]
 800ba4a:	e005      	b.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ba4c:	4b45      	ldr	r3, [pc, #276]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	4a44      	ldr	r2, [pc, #272]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba56:	6113      	str	r3, [r2, #16]
 800ba58:	4b42      	ldr	r3, [pc, #264]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba66:	493f      	ldr	r1, [pc, #252]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	670b      	str	r3, [r1, #112]	; 0x70
 800ba6c:	e004      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	75bb      	strb	r3, [r7, #22]
 800ba72:	e001      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 8085 	beq.w	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba8a:	2b28      	cmp	r3, #40	; 0x28
 800ba8c:	d866      	bhi.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ba8e:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800ba90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba94:	0800bb71 	.word	0x0800bb71
 800ba98:	0800bb5d 	.word	0x0800bb5d
 800ba9c:	0800bb5d 	.word	0x0800bb5d
 800baa0:	0800bb5d 	.word	0x0800bb5d
 800baa4:	0800bb5d 	.word	0x0800bb5d
 800baa8:	0800bb5d 	.word	0x0800bb5d
 800baac:	0800bb5d 	.word	0x0800bb5d
 800bab0:	0800bb5d 	.word	0x0800bb5d
 800bab4:	0800bb39 	.word	0x0800bb39
 800bab8:	0800bb5d 	.word	0x0800bb5d
 800babc:	0800bb5d 	.word	0x0800bb5d
 800bac0:	0800bb5d 	.word	0x0800bb5d
 800bac4:	0800bb5d 	.word	0x0800bb5d
 800bac8:	0800bb5d 	.word	0x0800bb5d
 800bacc:	0800bb5d 	.word	0x0800bb5d
 800bad0:	0800bb5d 	.word	0x0800bb5d
 800bad4:	0800bb4b 	.word	0x0800bb4b
 800bad8:	0800bb5d 	.word	0x0800bb5d
 800badc:	0800bb5d 	.word	0x0800bb5d
 800bae0:	0800bb5d 	.word	0x0800bb5d
 800bae4:	0800bb5d 	.word	0x0800bb5d
 800bae8:	0800bb5d 	.word	0x0800bb5d
 800baec:	0800bb5d 	.word	0x0800bb5d
 800baf0:	0800bb5d 	.word	0x0800bb5d
 800baf4:	0800bb71 	.word	0x0800bb71
 800baf8:	0800bb5d 	.word	0x0800bb5d
 800bafc:	0800bb5d 	.word	0x0800bb5d
 800bb00:	0800bb5d 	.word	0x0800bb5d
 800bb04:	0800bb5d 	.word	0x0800bb5d
 800bb08:	0800bb5d 	.word	0x0800bb5d
 800bb0c:	0800bb5d 	.word	0x0800bb5d
 800bb10:	0800bb5d 	.word	0x0800bb5d
 800bb14:	0800bb71 	.word	0x0800bb71
 800bb18:	0800bb5d 	.word	0x0800bb5d
 800bb1c:	0800bb5d 	.word	0x0800bb5d
 800bb20:	0800bb5d 	.word	0x0800bb5d
 800bb24:	0800bb5d 	.word	0x0800bb5d
 800bb28:	0800bb5d 	.word	0x0800bb5d
 800bb2c:	0800bb5d 	.word	0x0800bb5d
 800bb30:	0800bb5d 	.word	0x0800bb5d
 800bb34:	0800bb71 	.word	0x0800bb71
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 fdfa 	bl	800c738 <RCCEx_PLL2_Config>
 800bb44:	4603      	mov	r3, r0
 800bb46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bb48:	e013      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3324      	adds	r3, #36	; 0x24
 800bb4e:	2101      	movs	r1, #1
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 fea3 	bl	800c89c <RCCEx_PLL3_Config>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bb5a:	e00a      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb60:	e007      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800bb62:	bf00      	nop
 800bb64:	58024400 	.word	0x58024400
 800bb68:	58024800 	.word	0x58024800
 800bb6c:	00ffffcf 	.word	0x00ffffcf
      break;
 800bb70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d109      	bne.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bb78:	4b96      	ldr	r3, [pc, #600]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb84:	4993      	ldr	r1, [pc, #588]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb86:	4313      	orrs	r3, r2
 800bb88:	654b      	str	r3, [r1, #84]	; 0x54
 800bb8a:	e001      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d038      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bba0:	2b05      	cmp	r3, #5
 800bba2:	d821      	bhi.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800bba4:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800bba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbaa:	bf00      	nop
 800bbac:	0800bbef 	.word	0x0800bbef
 800bbb0:	0800bbc5 	.word	0x0800bbc5
 800bbb4:	0800bbd7 	.word	0x0800bbd7
 800bbb8:	0800bbef 	.word	0x0800bbef
 800bbbc:	0800bbef 	.word	0x0800bbef
 800bbc0:	0800bbef 	.word	0x0800bbef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	2101      	movs	r1, #1
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fdb4 	bl	800c738 <RCCEx_PLL2_Config>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bbd4:	e00c      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3324      	adds	r3, #36	; 0x24
 800bbda:	2101      	movs	r1, #1
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 fe5d 	bl	800c89c <RCCEx_PLL3_Config>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bbe6:	e003      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	75fb      	strb	r3, [r7, #23]
      break;
 800bbec:	e000      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800bbee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bbf6:	4b77      	ldr	r3, [pc, #476]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfa:	f023 0207 	bic.w	r2, r3, #7
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc02:	4974      	ldr	r1, [pc, #464]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	654b      	str	r3, [r1, #84]	; 0x54
 800bc08:	e001      	b.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d03a      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc20:	2b05      	cmp	r3, #5
 800bc22:	d821      	bhi.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800bc24:	a201      	add	r2, pc, #4	; (adr r2, 800bc2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800bc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2a:	bf00      	nop
 800bc2c:	0800bc6f 	.word	0x0800bc6f
 800bc30:	0800bc45 	.word	0x0800bc45
 800bc34:	0800bc57 	.word	0x0800bc57
 800bc38:	0800bc6f 	.word	0x0800bc6f
 800bc3c:	0800bc6f 	.word	0x0800bc6f
 800bc40:	0800bc6f 	.word	0x0800bc6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3304      	adds	r3, #4
 800bc48:	2101      	movs	r1, #1
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fd74 	bl	800c738 <RCCEx_PLL2_Config>
 800bc50:	4603      	mov	r3, r0
 800bc52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bc54:	e00c      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3324      	adds	r3, #36	; 0x24
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 fe1d 	bl	800c89c <RCCEx_PLL3_Config>
 800bc62:	4603      	mov	r3, r0
 800bc64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bc66:	e003      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc6c:	e000      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800bc6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc76:	4b57      	ldr	r3, [pc, #348]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7a:	f023 0207 	bic.w	r2, r3, #7
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc84:	4953      	ldr	r1, [pc, #332]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc86:	4313      	orrs	r3, r2
 800bc88:	658b      	str	r3, [r1, #88]	; 0x58
 800bc8a:	e001      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 0320 	and.w	r3, r3, #32
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d04b      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bca6:	d02e      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcac:	d828      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bcae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb2:	d02a      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bcb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb8:	d822      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bcba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcbe:	d026      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bcc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bcc4:	d81c      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bcc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcca:	d010      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800bccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd0:	d816      	bhi.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d01d      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800bcd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcda:	d111      	bne.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3304      	adds	r3, #4
 800bce0:	2100      	movs	r1, #0
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 fd28 	bl	800c738 <RCCEx_PLL2_Config>
 800bce8:	4603      	mov	r3, r0
 800bcea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bcec:	e012      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3324      	adds	r3, #36	; 0x24
 800bcf2:	2102      	movs	r1, #2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 fdd1 	bl	800c89c <RCCEx_PLL3_Config>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bcfe:	e009      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	75fb      	strb	r3, [r7, #23]
      break;
 800bd04:	e006      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bd06:	bf00      	nop
 800bd08:	e004      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bd0a:	bf00      	nop
 800bd0c:	e002      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bd0e:	bf00      	nop
 800bd10:	e000      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bd12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10a      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd1a:	4b2e      	ldr	r3, [pc, #184]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd28:	492a      	ldr	r1, [pc, #168]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	654b      	str	r3, [r1, #84]	; 0x54
 800bd2e:	e001      	b.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d04d      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd4a:	d02e      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bd4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd50:	d828      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d02a      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bd58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd5c:	d822      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bd5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd62:	d026      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bd64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd68:	d81c      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd6e:	d010      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800bd70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd74:	d816      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d01d      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800bd7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7e:	d111      	bne.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	2100      	movs	r1, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fcd6 	bl	800c738 <RCCEx_PLL2_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bd90:	e012      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3324      	adds	r3, #36	; 0x24
 800bd96:	2102      	movs	r1, #2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fd7f 	bl	800c89c <RCCEx_PLL3_Config>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bda2:	e009      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	75fb      	strb	r3, [r7, #23]
      break;
 800bda8:	e006      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bdaa:	bf00      	nop
 800bdac:	e004      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bdae:	bf00      	nop
 800bdb0:	e002      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bdb2:	bf00      	nop
 800bdb4:	e000      	b.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bdb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10c      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdbe:	4b05      	ldr	r3, [pc, #20]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bdc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bdcc:	4901      	ldr	r1, [pc, #4]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	658b      	str	r3, [r1, #88]	; 0x58
 800bdd2:	e003      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800bdd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d04b      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bdf2:	d02e      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bdf4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bdf8:	d828      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bdfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdfe:	d02a      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800be00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be04:	d822      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800be06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be0a:	d026      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800be0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be10:	d81c      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800be12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be16:	d010      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800be18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be1c:	d816      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d01d      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800be22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be26:	d111      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3304      	adds	r3, #4
 800be2c:	2100      	movs	r1, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fc82 	bl	800c738 <RCCEx_PLL2_Config>
 800be34:	4603      	mov	r3, r0
 800be36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800be38:	e012      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3324      	adds	r3, #36	; 0x24
 800be3e:	2102      	movs	r1, #2
 800be40:	4618      	mov	r0, r3
 800be42:	f000 fd2b 	bl	800c89c <RCCEx_PLL3_Config>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800be4a:	e009      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]
      break;
 800be50:	e006      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800be52:	bf00      	nop
 800be54:	e004      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800be56:	bf00      	nop
 800be58:	e002      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800be5a:	bf00      	nop
 800be5c:	e000      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800be5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10a      	bne.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be66:	4b9d      	ldr	r3, [pc, #628]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be74:	4999      	ldr	r1, [pc, #612]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be76:	4313      	orrs	r3, r2
 800be78:	658b      	str	r3, [r1, #88]	; 0x58
 800be7a:	e001      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0308 	and.w	r3, r3, #8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01a      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be96:	d10a      	bne.n	800beae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3324      	adds	r3, #36	; 0x24
 800be9c:	2102      	movs	r1, #2
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 fcfc 	bl	800c89c <RCCEx_PLL3_Config>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800beae:	4b8b      	ldr	r3, [pc, #556]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800beb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bebc:	4987      	ldr	r1, [pc, #540]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0310 	and.w	r3, r3, #16
 800beca:	2b00      	cmp	r3, #0
 800becc:	d01a      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bed8:	d10a      	bne.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3324      	adds	r3, #36	; 0x24
 800bede:	2102      	movs	r1, #2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fcdb 	bl	800c89c <RCCEx_PLL3_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bef0:	4b7a      	ldr	r3, [pc, #488]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800befe:	4977      	ldr	r1, [pc, #476]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d034      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf1a:	d01d      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800bf1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf20:	d817      	bhi.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800bf26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2a:	d009      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800bf2c:	e011      	b.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3304      	adds	r3, #4
 800bf32:	2100      	movs	r1, #0
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fbff 	bl	800c738 <RCCEx_PLL2_Config>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bf3e:	e00c      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3324      	adds	r3, #36	; 0x24
 800bf44:	2102      	movs	r1, #2
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 fca8 	bl	800c89c <RCCEx_PLL3_Config>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bf50:	e003      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	75fb      	strb	r3, [r7, #23]
      break;
 800bf56:	e000      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800bf58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10a      	bne.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf60:	4b5e      	ldr	r3, [pc, #376]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf6e:	495b      	ldr	r1, [pc, #364]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	658b      	str	r3, [r1, #88]	; 0x58
 800bf74:	e001      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf76:	7dfb      	ldrb	r3, [r7, #23]
 800bf78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d033      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf90:	d01c      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800bf92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf96:	d816      	bhi.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800bf98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf9c:	d003      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800bf9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfa2:	d007      	beq.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800bfa4:	e00f      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfa6:	4b4d      	ldr	r3, [pc, #308]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	4a4c      	ldr	r2, [pc, #304]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bfb2:	e00c      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	3324      	adds	r3, #36	; 0x24
 800bfb8:	2101      	movs	r1, #1
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 fc6e 	bl	800c89c <RCCEx_PLL3_Config>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bfc4:	e003      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	75fb      	strb	r3, [r7, #23]
      break;
 800bfca:	e000      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800bfcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfd4:	4b41      	ldr	r3, [pc, #260]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfe2:	493e      	ldr	r1, [pc, #248]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	654b      	str	r3, [r1, #84]	; 0x54
 800bfe8:	e001      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
 800bfec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d029      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d003      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c006:	d007      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c008:	e00f      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c00a:	4b34      	ldr	r3, [pc, #208]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	4a33      	ldr	r2, [pc, #204]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c016:	e00b      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3304      	adds	r3, #4
 800c01c:	2102      	movs	r1, #2
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 fb8a 	bl	800c738 <RCCEx_PLL2_Config>
 800c024:	4603      	mov	r3, r0
 800c026:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c028:	e002      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	75fb      	strb	r3, [r7, #23]
      break;
 800c02e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c030:	7dfb      	ldrb	r3, [r7, #23]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d109      	bne.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c036:	4b29      	ldr	r3, [pc, #164]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c042:	4926      	ldr	r1, [pc, #152]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c044:	4313      	orrs	r3, r2
 800c046:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c048:	e001      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00a      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3324      	adds	r3, #36	; 0x24
 800c05e:	2102      	movs	r1, #2
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fc1b 	bl	800c89c <RCCEx_PLL3_Config>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c06c:	2301      	movs	r3, #1
 800c06e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d033      	beq.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c084:	d017      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c08a:	d811      	bhi.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c090:	d013      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c096:	d80b      	bhi.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d010      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0a0:	d106      	bne.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0a2:	4b0e      	ldr	r3, [pc, #56]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4a0d      	ldr	r2, [pc, #52]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c0a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c0ae:	e007      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0b4:	e004      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c0b6:	bf00      	nop
 800c0b8:	e002      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c0ba:	bf00      	nop
 800c0bc:	e000      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c0be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10c      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0c6:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d2:	4902      	ldr	r1, [pc, #8]	; (800c0dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	654b      	str	r3, [r1, #84]	; 0x54
 800c0d8:	e004      	b.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c0da:	bf00      	nop
 800c0dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d008      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c0f0:	4b31      	ldr	r3, [pc, #196]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0fc:	492e      	ldr	r1, [pc, #184]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c0fe:	4313      	orrs	r3, r2
 800c100:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d009      	beq.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c10e:	4b2a      	ldr	r3, [pc, #168]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c11c:	4926      	ldr	r1, [pc, #152]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d008      	beq.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c12e:	4b22      	ldr	r3, [pc, #136]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c132:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c13a:	491f      	ldr	r1, [pc, #124]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c13c:	4313      	orrs	r3, r2
 800c13e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00d      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c14c:	4b1a      	ldr	r3, [pc, #104]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	4a19      	ldr	r2, [pc, #100]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c152:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c156:	6113      	str	r3, [r2, #16]
 800c158:	4b17      	ldr	r3, [pc, #92]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c15a:	691a      	ldr	r2, [r3, #16]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c162:	4915      	ldr	r1, [pc, #84]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c164:	4313      	orrs	r3, r2
 800c166:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da08      	bge.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c170:	4b11      	ldr	r3, [pc, #68]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c174:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17c:	490e      	ldr	r1, [pc, #56]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d009      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c18e:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c19c:	4906      	ldr	r1, [pc, #24]	; (800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c1a2:	7dbb      	ldrb	r3, [r7, #22]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e000      	b.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	58024400 	.word	0x58024400

0800c1bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c1c0:	f7ff f85a 	bl	800b278 <HAL_RCC_GetHCLKFreq>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	091b      	lsrs	r3, r3, #4
 800c1cc:	f003 0307 	and.w	r3, r3, #7
 800c1d0:	4904      	ldr	r1, [pc, #16]	; (800c1e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c1d2:	5ccb      	ldrb	r3, [r1, r3]
 800c1d4:	f003 031f 	and.w	r3, r3, #31
 800c1d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	58024400 	.word	0x58024400
 800c1e4:	08014d38 	.word	0x08014d38

0800c1e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b089      	sub	sp, #36	; 0x24
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1f0:	4ba1      	ldr	r3, [pc, #644]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f4:	f003 0303 	and.w	r3, r3, #3
 800c1f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c1fa:	4b9f      	ldr	r3, [pc, #636]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1fe:	0b1b      	lsrs	r3, r3, #12
 800c200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c204:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c206:	4b9c      	ldr	r3, [pc, #624]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	091b      	lsrs	r3, r3, #4
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c212:	4b99      	ldr	r3, [pc, #612]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c216:	08db      	lsrs	r3, r3, #3
 800c218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	ee07 3a90 	vmov	s15, r3
 800c226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 8111 	beq.w	800c458 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	f000 8083 	beq.w	800c344 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	2b02      	cmp	r3, #2
 800c242:	f200 80a1 	bhi.w	800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d056      	beq.n	800c300 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c252:	e099      	b.n	800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c254:	4b88      	ldr	r3, [pc, #544]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 0320 	and.w	r3, r3, #32
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d02d      	beq.n	800c2bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c260:	4b85      	ldr	r3, [pc, #532]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	08db      	lsrs	r3, r3, #3
 800c266:	f003 0303 	and.w	r3, r3, #3
 800c26a:	4a84      	ldr	r2, [pc, #528]	; (800c47c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c26c:	fa22 f303 	lsr.w	r3, r2, r3
 800c270:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	ee07 3a90 	vmov	s15, r3
 800c278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28a:	4b7b      	ldr	r3, [pc, #492]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c29a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c29e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c2ba:	e087      	b.n	800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	ee07 3a90 	vmov	s15, r3
 800c2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c484 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ce:	4b6a      	ldr	r3, [pc, #424]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2fe:	e065      	b.n	800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	ee07 3a90 	vmov	s15, r3
 800c306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c312:	4b59      	ldr	r3, [pc, #356]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c31a:	ee07 3a90 	vmov	s15, r3
 800c31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c322:	ed97 6a03 	vldr	s12, [r7, #12]
 800c326:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c342:	e043      	b.n	800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c48c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c356:	4b48      	ldr	r3, [pc, #288]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35e:	ee07 3a90 	vmov	s15, r3
 800c362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c366:	ed97 6a03 	vldr	s12, [r7, #12]
 800c36a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c386:	e021      	b.n	800c3cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c392:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c39a:	4b37      	ldr	r3, [pc, #220]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a2:	ee07 3a90 	vmov	s15, r3
 800c3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c3cc:	4b2a      	ldr	r3, [pc, #168]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d0:	0a5b      	lsrs	r3, r3, #9
 800c3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3f2:	ee17 2a90 	vmov	r2, s15
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c3fa:	4b1f      	ldr	r3, [pc, #124]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	0c1b      	lsrs	r3, r3, #16
 800c400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c404:	ee07 3a90 	vmov	s15, r3
 800c408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c410:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c414:	edd7 6a07 	vldr	s13, [r7, #28]
 800c418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c41c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c420:	ee17 2a90 	vmov	r2, s15
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c428:	4b13      	ldr	r3, [pc, #76]	; (800c478 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42c:	0e1b      	lsrs	r3, r3, #24
 800c42e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c43a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c43e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c442:	edd7 6a07 	vldr	s13, [r7, #28]
 800c446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c44a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c44e:	ee17 2a90 	vmov	r2, s15
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c456:	e008      	b.n	800c46a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	609a      	str	r2, [r3, #8]
}
 800c46a:	bf00      	nop
 800c46c:	3724      	adds	r7, #36	; 0x24
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	58024400 	.word	0x58024400
 800c47c:	03d09000 	.word	0x03d09000
 800c480:	46000000 	.word	0x46000000
 800c484:	4c742400 	.word	0x4c742400
 800c488:	4a742400 	.word	0x4a742400
 800c48c:	4c371b00 	.word	0x4c371b00

0800c490 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c490:	b480      	push	{r7}
 800c492:	b089      	sub	sp, #36	; 0x24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c498:	4ba1      	ldr	r3, [pc, #644]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c4a2:	4b9f      	ldr	r3, [pc, #636]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a6:	0d1b      	lsrs	r3, r3, #20
 800c4a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c4ae:	4b9c      	ldr	r3, [pc, #624]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b2:	0a1b      	lsrs	r3, r3, #8
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c4ba:	4b99      	ldr	r3, [pc, #612]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4be:	08db      	lsrs	r3, r3, #3
 800c4c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	fb02 f303 	mul.w	r3, r2, r3
 800c4ca:	ee07 3a90 	vmov	s15, r3
 800c4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 8111 	beq.w	800c700 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	f000 8083 	beq.w	800c5ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	f200 80a1 	bhi.w	800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d056      	beq.n	800c5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c4fa:	e099      	b.n	800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4fc:	4b88      	ldr	r3, [pc, #544]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0320 	and.w	r3, r3, #32
 800c504:	2b00      	cmp	r3, #0
 800c506:	d02d      	beq.n	800c564 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c508:	4b85      	ldr	r3, [pc, #532]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	08db      	lsrs	r3, r3, #3
 800c50e:	f003 0303 	and.w	r3, r3, #3
 800c512:	4a84      	ldr	r2, [pc, #528]	; (800c724 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c514:	fa22 f303 	lsr.w	r3, r2, r3
 800c518:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	ee07 3a90 	vmov	s15, r3
 800c520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	ee07 3a90 	vmov	s15, r3
 800c52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c532:	4b7b      	ldr	r3, [pc, #492]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c542:	ed97 6a03 	vldr	s12, [r7, #12]
 800c546:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c562:	e087      	b.n	800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	ee07 3a90 	vmov	s15, r3
 800c56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c72c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c576:	4b6a      	ldr	r3, [pc, #424]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c586:	ed97 6a03 	vldr	s12, [r7, #12]
 800c58a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5a6:	e065      	b.n	800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	ee07 3a90 	vmov	s15, r3
 800c5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ba:	4b59      	ldr	r3, [pc, #356]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5ea:	e043      	b.n	800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c734 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fe:	4b48      	ldr	r3, [pc, #288]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c606:	ee07 3a90 	vmov	s15, r3
 800c60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c612:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c62e:	e021      	b.n	800c674 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c642:	4b37      	ldr	r3, [pc, #220]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64a:	ee07 3a90 	vmov	s15, r3
 800c64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c652:	ed97 6a03 	vldr	s12, [r7, #12]
 800c656:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c672:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c674:	4b2a      	ldr	r3, [pc, #168]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c678:	0a5b      	lsrs	r3, r3, #9
 800c67a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c67e:	ee07 3a90 	vmov	s15, r3
 800c682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c68a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c68e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c69a:	ee17 2a90 	vmov	r2, s15
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c6a2:	4b1f      	ldr	r3, [pc, #124]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a6:	0c1b      	lsrs	r3, r3, #16
 800c6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ac:	ee07 3a90 	vmov	s15, r3
 800c6b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6c8:	ee17 2a90 	vmov	r2, s15
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c6d0:	4b13      	ldr	r3, [pc, #76]	; (800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	0e1b      	lsrs	r3, r3, #24
 800c6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6f6:	ee17 2a90 	vmov	r2, s15
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6fe:	e008      	b.n	800c712 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	609a      	str	r2, [r3, #8]
}
 800c712:	bf00      	nop
 800c714:	3724      	adds	r7, #36	; 0x24
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	58024400 	.word	0x58024400
 800c724:	03d09000 	.word	0x03d09000
 800c728:	46000000 	.word	0x46000000
 800c72c:	4c742400 	.word	0x4c742400
 800c730:	4a742400 	.word	0x4a742400
 800c734:	4c371b00 	.word	0x4c371b00

0800c738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c746:	4b53      	ldr	r3, [pc, #332]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74a:	f003 0303 	and.w	r3, r3, #3
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d101      	bne.n	800c756 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	e099      	b.n	800c88a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c756:	4b4f      	ldr	r3, [pc, #316]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a4e      	ldr	r2, [pc, #312]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c75c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c762:	f7fa fa7b 	bl	8006c5c <HAL_GetTick>
 800c766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c768:	e008      	b.n	800c77c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c76a:	f7fa fa77 	bl	8006c5c <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e086      	b.n	800c88a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c77c:	4b45      	ldr	r3, [pc, #276]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1f0      	bne.n	800c76a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c788:	4b42      	ldr	r3, [pc, #264]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	031b      	lsls	r3, r3, #12
 800c796:	493f      	ldr	r1, [pc, #252]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c798:	4313      	orrs	r3, r2
 800c79a:	628b      	str	r3, [r1, #40]	; 0x28
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	025b      	lsls	r3, r3, #9
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	041b      	lsls	r3, r3, #16
 800c7ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	061b      	lsls	r3, r3, #24
 800c7c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7cc:	4931      	ldr	r1, [pc, #196]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c7d2:	4b30      	ldr	r3, [pc, #192]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	492d      	ldr	r1, [pc, #180]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c7e4:	4b2b      	ldr	r3, [pc, #172]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	f023 0220 	bic.w	r2, r3, #32
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	4928      	ldr	r1, [pc, #160]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c7f6:	4b27      	ldr	r3, [pc, #156]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fa:	4a26      	ldr	r2, [pc, #152]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c7fc:	f023 0310 	bic.w	r3, r3, #16
 800c800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c802:	4b24      	ldr	r3, [pc, #144]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c806:	4b24      	ldr	r3, [pc, #144]	; (800c898 <RCCEx_PLL2_Config+0x160>)
 800c808:	4013      	ands	r3, r2
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	69d2      	ldr	r2, [r2, #28]
 800c80e:	00d2      	lsls	r2, r2, #3
 800c810:	4920      	ldr	r1, [pc, #128]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c812:	4313      	orrs	r3, r2
 800c814:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c816:	4b1f      	ldr	r3, [pc, #124]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	4a1e      	ldr	r2, [pc, #120]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c81c:	f043 0310 	orr.w	r3, r3, #16
 800c820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c828:	4b1a      	ldr	r3, [pc, #104]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	4a19      	ldr	r2, [pc, #100]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c82e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c832:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c834:	e00f      	b.n	800c856 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d106      	bne.n	800c84a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c83c:	4b15      	ldr	r3, [pc, #84]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	4a14      	ldr	r2, [pc, #80]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c846:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c848:	e005      	b.n	800c856 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c84a:	4b12      	ldr	r3, [pc, #72]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	4a11      	ldr	r2, [pc, #68]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c854:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c856:	4b0f      	ldr	r3, [pc, #60]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a0e      	ldr	r2, [pc, #56]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c85c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c862:	f7fa f9fb 	bl	8006c5c <HAL_GetTick>
 800c866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c868:	e008      	b.n	800c87c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c86a:	f7fa f9f7 	bl	8006c5c <HAL_GetTick>
 800c86e:	4602      	mov	r2, r0
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	2b02      	cmp	r3, #2
 800c876:	d901      	bls.n	800c87c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c878:	2303      	movs	r3, #3
 800c87a:	e006      	b.n	800c88a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c87c:	4b05      	ldr	r3, [pc, #20]	; (800c894 <RCCEx_PLL2_Config+0x15c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0f0      	beq.n	800c86a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	58024400 	.word	0x58024400
 800c898:	ffff0007 	.word	0xffff0007

0800c89c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c8aa:	4b53      	ldr	r3, [pc, #332]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ae:	f003 0303 	and.w	r3, r3, #3
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d101      	bne.n	800c8ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e099      	b.n	800c9ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c8ba:	4b4f      	ldr	r3, [pc, #316]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a4e      	ldr	r2, [pc, #312]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c8c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8c6:	f7fa f9c9 	bl	8006c5c <HAL_GetTick>
 800c8ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8cc:	e008      	b.n	800c8e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c8ce:	f7fa f9c5 	bl	8006c5c <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d901      	bls.n	800c8e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e086      	b.n	800c9ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8e0:	4b45      	ldr	r3, [pc, #276]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1f0      	bne.n	800c8ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c8ec:	4b42      	ldr	r3, [pc, #264]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	051b      	lsls	r3, r3, #20
 800c8fa:	493f      	ldr	r1, [pc, #252]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	628b      	str	r3, [r1, #40]	; 0x28
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	3b01      	subs	r3, #1
 800c906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	3b01      	subs	r3, #1
 800c910:	025b      	lsls	r3, r3, #9
 800c912:	b29b      	uxth	r3, r3
 800c914:	431a      	orrs	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	041b      	lsls	r3, r3, #16
 800c91e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c922:	431a      	orrs	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	3b01      	subs	r3, #1
 800c92a:	061b      	lsls	r3, r3, #24
 800c92c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c930:	4931      	ldr	r1, [pc, #196]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c932:	4313      	orrs	r3, r2
 800c934:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c936:	4b30      	ldr	r3, [pc, #192]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	492d      	ldr	r1, [pc, #180]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c944:	4313      	orrs	r3, r2
 800c946:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c948:	4b2b      	ldr	r3, [pc, #172]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	4928      	ldr	r1, [pc, #160]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c956:	4313      	orrs	r3, r2
 800c958:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c95a:	4b27      	ldr	r3, [pc, #156]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95e:	4a26      	ldr	r2, [pc, #152]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c966:	4b24      	ldr	r3, [pc, #144]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c96a:	4b24      	ldr	r3, [pc, #144]	; (800c9fc <RCCEx_PLL3_Config+0x160>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	69d2      	ldr	r2, [r2, #28]
 800c972:	00d2      	lsls	r2, r2, #3
 800c974:	4920      	ldr	r1, [pc, #128]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c976:	4313      	orrs	r3, r2
 800c978:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c97a:	4b1f      	ldr	r3, [pc, #124]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	4a1e      	ldr	r2, [pc, #120]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c98c:	4b1a      	ldr	r3, [pc, #104]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c990:	4a19      	ldr	r2, [pc, #100]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c996:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c998:	e00f      	b.n	800c9ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d106      	bne.n	800c9ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c9a0:	4b15      	ldr	r3, [pc, #84]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a4:	4a14      	ldr	r2, [pc, #80]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c9aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c9ac:	e005      	b.n	800c9ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c9ae:	4b12      	ldr	r3, [pc, #72]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	4a11      	ldr	r2, [pc, #68]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c9b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c9ba:	4b0f      	ldr	r3, [pc, #60]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a0e      	ldr	r2, [pc, #56]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9c6:	f7fa f949 	bl	8006c5c <HAL_GetTick>
 800c9ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9cc:	e008      	b.n	800c9e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c9ce:	f7fa f945 	bl	8006c5c <HAL_GetTick>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d901      	bls.n	800c9e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e006      	b.n	800c9ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9e0:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <RCCEx_PLL3_Config+0x15c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d0f0      	beq.n	800c9ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	58024400 	.word	0x58024400
 800c9fc:	ffff0007 	.word	0xffff0007

0800ca00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e0f1      	b.n	800cbf6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a78      	ldr	r2, [pc, #480]	; (800cc00 <HAL_SPI_Init+0x200>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d00f      	beq.n	800ca42 <HAL_SPI_Init+0x42>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a77      	ldr	r2, [pc, #476]	; (800cc04 <HAL_SPI_Init+0x204>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d00a      	beq.n	800ca42 <HAL_SPI_Init+0x42>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a75      	ldr	r2, [pc, #468]	; (800cc08 <HAL_SPI_Init+0x208>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d005      	beq.n	800ca42 <HAL_SPI_Init+0x42>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	2b0f      	cmp	r3, #15
 800ca3c:	d901      	bls.n	800ca42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e0d9      	b.n	800cbf6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fba4 	bl	800d190 <SPI_GetPacketSize>
 800ca48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a6c      	ldr	r2, [pc, #432]	; (800cc00 <HAL_SPI_Init+0x200>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d00c      	beq.n	800ca6e <HAL_SPI_Init+0x6e>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a6a      	ldr	r2, [pc, #424]	; (800cc04 <HAL_SPI_Init+0x204>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d007      	beq.n	800ca6e <HAL_SPI_Init+0x6e>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a69      	ldr	r2, [pc, #420]	; (800cc08 <HAL_SPI_Init+0x208>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d002      	beq.n	800ca6e <HAL_SPI_Init+0x6e>
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b08      	cmp	r3, #8
 800ca6c:	d811      	bhi.n	800ca92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca72:	4a63      	ldr	r2, [pc, #396]	; (800cc00 <HAL_SPI_Init+0x200>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d009      	beq.n	800ca8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a61      	ldr	r2, [pc, #388]	; (800cc04 <HAL_SPI_Init+0x204>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d004      	beq.n	800ca8c <HAL_SPI_Init+0x8c>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a60      	ldr	r2, [pc, #384]	; (800cc08 <HAL_SPI_Init+0x208>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d104      	bne.n	800ca96 <HAL_SPI_Init+0x96>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b10      	cmp	r3, #16
 800ca90:	d901      	bls.n	800ca96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e0af      	b.n	800cbf6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d106      	bne.n	800cab0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7f8 f92e 	bl	8004d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 0201 	bic.w	r2, r2, #1
 800cac6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cad2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cadc:	d119      	bne.n	800cb12 <HAL_SPI_Init+0x112>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cae6:	d103      	bne.n	800caf0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800caec:	2b00      	cmp	r3, #0
 800caee:	d008      	beq.n	800cb02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10c      	bne.n	800cb12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cafc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb00:	d107      	bne.n	800cb12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	69da      	ldr	r2, [r3, #28]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	431a      	orrs	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb24:	ea42 0103 	orr.w	r1, r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb42:	431a      	orrs	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	431a      	orrs	r2, r3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	431a      	orrs	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	431a      	orrs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb66:	431a      	orrs	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	431a      	orrs	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb72:	ea42 0103 	orr.w	r1, r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d113      	bne.n	800cbb2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbb0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0201 	bic.w	r2, r2, #1
 800cbc0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	40013000 	.word	0x40013000
 800cc04:	40003800 	.word	0x40003800
 800cc08:	40003c00 	.word	0x40003c00

0800cc0c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08a      	sub	sp, #40	; 0x28
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	695b      	ldr	r3, [r3, #20]
 800cc22:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cc24:	6a3a      	ldr	r2, [r7, #32]
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	4013      	ands	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cc34:	2300      	movs	r3, #0
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc3e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	3330      	adds	r3, #48	; 0x30
 800cc46:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d113      	bne.n	800cc7a <HAL_SPI_IRQHandler+0x6e>
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10e      	bne.n	800cc7a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d009      	beq.n	800cc7a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	4798      	blx	r3
    handled = 1UL;
 800cc76:	2301      	movs	r3, #1
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10f      	bne.n	800cca4 <HAL_SPI_IRQHandler+0x98>
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	f003 0301 	and.w	r3, r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00a      	beq.n	800cca4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d105      	bne.n	800cca4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
    handled = 1UL;
 800cca0:	2301      	movs	r3, #1
 800cca2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	f003 0320 	and.w	r3, r3, #32
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10f      	bne.n	800ccce <HAL_SPI_IRQHandler+0xc2>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00a      	beq.n	800ccce <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d105      	bne.n	800ccce <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	4798      	blx	r3
    handled = 1UL;
 800ccca:	2301      	movs	r3, #1
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f040 816f 	bne.w	800cfb4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	f003 0308 	and.w	r3, r3, #8
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 80a0 	beq.w	800ce22 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	699a      	ldr	r2, [r3, #24]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f042 0208 	orr.w	r2, r2, #8
 800ccf0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	699a      	ldr	r2, [r3, #24]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f042 0210 	orr.w	r2, r2, #16
 800cd00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	699a      	ldr	r2, [r3, #24]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd10:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	691a      	ldr	r2, [r3, #16]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f022 0208 	bic.w	r2, r2, #8
 800cd20:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00f      	beq.n	800cd4c <HAL_SPI_IRQHandler+0x140>
 800cd2c:	7cfb      	ldrb	r3, [r7, #19]
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	d004      	beq.n	800cd3c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd36:	69db      	ldr	r3, [r3, #28]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d007      	beq.n	800cd4c <HAL_SPI_IRQHandler+0x140>
 800cd3c:	7cfb      	ldrb	r3, [r7, #19]
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d059      	beq.n	800cdf6 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d154      	bne.n	800cdf6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d13d      	bne.n	800cdd6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800cd5a:	e036      	b.n	800cdca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	2b0f      	cmp	r3, #15
 800cd62:	d90b      	bls.n	800cd7c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd6e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd74:	1d1a      	adds	r2, r3, #4
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	665a      	str	r2, [r3, #100]	; 0x64
 800cd7a:	e01d      	b.n	800cdb8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	2b07      	cmp	r3, #7
 800cd82:	d90b      	bls.n	800cd9c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	8812      	ldrh	r2, [r2, #0]
 800cd8c:	b292      	uxth	r2, r2
 800cd8e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd94:	1c9a      	adds	r2, r3, #2
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	665a      	str	r2, [r3, #100]	; 0x64
 800cd9a:	e00d      	b.n	800cdb8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cda8:	7812      	ldrb	r2, [r2, #0]
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1c2      	bne.n	800cd5c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f93a 	bl	800d050 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d003      	beq.n	800cdf6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f90a 	bl	800d008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800cdf4:	e0e3      	b.n	800cfbe <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cdf6:	7cfb      	ldrb	r3, [r7, #19]
 800cdf8:	2b05      	cmp	r3, #5
 800cdfa:	d103      	bne.n	800ce04 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f8f9 	bl	800cff4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ce02:	e0d9      	b.n	800cfb8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ce04:	7cfb      	ldrb	r3, [r7, #19]
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	d103      	bne.n	800ce12 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f8e8 	bl	800cfe0 <HAL_SPI_RxCpltCallback>
    return;
 800ce10:	e0d2      	b.n	800cfb8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ce12:	7cfb      	ldrb	r3, [r7, #19]
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	f040 80cf 	bne.w	800cfb8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f8d6 	bl	800cfcc <HAL_SPI_TxCpltCallback>
    return;
 800ce20:	e0ca      	b.n	800cfb8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00d      	beq.n	800ce48 <HAL_SPI_IRQHandler+0x23c>
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	f003 0308 	and.w	r3, r3, #8
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d008      	beq.n	800ce48 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	699a      	ldr	r2, [r3, #24]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce44:	619a      	str	r2, [r3, #24]

    return;
 800ce46:	e0ba      	b.n	800cfbe <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 80b5 	beq.w	800cfbe <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00f      	beq.n	800ce7e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce64:	f043 0204 	orr.w	r2, r3, #4
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	699a      	ldr	r2, [r3, #24]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00f      	beq.n	800cea8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce8e:	f043 0201 	orr.w	r2, r3, #1
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	699a      	ldr	r2, [r3, #24]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cea6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00f      	beq.n	800ced2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceb8:	f043 0208 	orr.w	r2, r3, #8
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	699a      	ldr	r2, [r3, #24]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ced0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	f003 0320 	and.w	r3, r3, #32
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00f      	beq.n	800cefc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cee2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f042 0220 	orr.w	r2, r2, #32
 800cefa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d05a      	beq.n	800cfbc <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0201 	bic.w	r2, r2, #1
 800cf14:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6919      	ldr	r1, [r3, #16]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <HAL_SPI_IRQHandler+0x3b8>)
 800cf22:	400b      	ands	r3, r1
 800cf24:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cf2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cf30:	d138      	bne.n	800cfa4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689a      	ldr	r2, [r3, #8]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cf40:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d013      	beq.n	800cf72 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4e:	4a1e      	ldr	r2, [pc, #120]	; (800cfc8 <HAL_SPI_IRQHandler+0x3bc>)
 800cf50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fb faba 	bl	80084d0 <HAL_DMA_Abort_IT>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d007      	beq.n	800cf72 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d020      	beq.n	800cfbc <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf7e:	4a12      	ldr	r2, [pc, #72]	; (800cfc8 <HAL_SPI_IRQHandler+0x3bc>)
 800cf80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fb faa2 	bl	80084d0 <HAL_DMA_Abort_IT>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d014      	beq.n	800cfbc <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cfa2:	e00b      	b.n	800cfbc <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f82b 	bl	800d008 <HAL_SPI_ErrorCallback>
    return;
 800cfb2:	e003      	b.n	800cfbc <HAL_SPI_IRQHandler+0x3b0>
    return;
 800cfb4:	bf00      	nop
 800cfb6:	e002      	b.n	800cfbe <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cfb8:	bf00      	nop
 800cfba:	e000      	b.n	800cfbe <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cfbc:	bf00      	nop
  }
}
 800cfbe:	3728      	adds	r7, #40	; 0x28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	fffffc94 	.word	0xfffffc94
 800cfc8:	0800d01d 	.word	0x0800d01d

0800cfcc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d028:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f7ff ffe0 	bl	800d008 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d048:	bf00      	nop
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	699a      	ldr	r2, [r3, #24]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f042 0208 	orr.w	r2, r2, #8
 800d06e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	699a      	ldr	r2, [r3, #24]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f042 0210 	orr.w	r2, r2, #16
 800d07e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f022 0201 	bic.w	r2, r2, #1
 800d08e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6919      	ldr	r1, [r3, #16]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	4b3c      	ldr	r3, [pc, #240]	; (800d18c <SPI_CloseTransfer+0x13c>)
 800d09c:	400b      	ands	r3, r1
 800d09e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d0ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d014      	beq.n	800d0e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f003 0320 	and.w	r3, r3, #32
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00f      	beq.n	800d0e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	699a      	ldr	r2, [r3, #24]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f042 0220 	orr.w	r2, r2, #32
 800d0e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d014      	beq.n	800d11c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00f      	beq.n	800d11c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d102:	f043 0204 	orr.w	r2, r3, #4
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	699a      	ldr	r2, [r3, #24]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d11a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00f      	beq.n	800d146 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d12c:	f043 0201 	orr.w	r2, r3, #1
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	699a      	ldr	r2, [r3, #24]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d144:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00f      	beq.n	800d170 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d156:	f043 0208 	orr.w	r2, r3, #8
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	699a      	ldr	r2, [r3, #24]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d16e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d180:	bf00      	nop
 800d182:	3714      	adds	r7, #20
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	fffffc90 	.word	0xfffffc90

0800d190 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19c:	095b      	lsrs	r3, r3, #5
 800d19e:	3301      	adds	r3, #1
 800d1a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	3307      	adds	r3, #7
 800d1ae:	08db      	lsrs	r3, r3, #3
 800d1b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b082      	sub	sp, #8
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e049      	b.n	800d26c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d106      	bne.n	800d1f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7f8 fda3 	bl	8005d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2202      	movs	r2, #2
 800d1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	3304      	adds	r3, #4
 800d202:	4619      	mov	r1, r3
 800d204:	4610      	mov	r0, r2
 800d206:	f000 fed3 	bl	800dfb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b01      	cmp	r3, #1
 800d286:	d001      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	e054      	b.n	800d336 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2202      	movs	r2, #2
 800d290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68da      	ldr	r2, [r3, #12]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f042 0201 	orr.w	r2, r2, #1
 800d2a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a26      	ldr	r2, [pc, #152]	; (800d344 <HAL_TIM_Base_Start_IT+0xd0>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d022      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2b6:	d01d      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a22      	ldr	r2, [pc, #136]	; (800d348 <HAL_TIM_Base_Start_IT+0xd4>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d018      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a21      	ldr	r2, [pc, #132]	; (800d34c <HAL_TIM_Base_Start_IT+0xd8>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d013      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1f      	ldr	r2, [pc, #124]	; (800d350 <HAL_TIM_Base_Start_IT+0xdc>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d00e      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a1e      	ldr	r2, [pc, #120]	; (800d354 <HAL_TIM_Base_Start_IT+0xe0>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d009      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a1c      	ldr	r2, [pc, #112]	; (800d358 <HAL_TIM_Base_Start_IT+0xe4>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d004      	beq.n	800d2f4 <HAL_TIM_Base_Start_IT+0x80>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a1b      	ldr	r2, [pc, #108]	; (800d35c <HAL_TIM_Base_Start_IT+0xe8>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d115      	bne.n	800d320 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689a      	ldr	r2, [r3, #8]
 800d2fa:	4b19      	ldr	r3, [pc, #100]	; (800d360 <HAL_TIM_Base_Start_IT+0xec>)
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b06      	cmp	r3, #6
 800d304:	d015      	beq.n	800d332 <HAL_TIM_Base_Start_IT+0xbe>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d30c:	d011      	beq.n	800d332 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f042 0201 	orr.w	r2, r2, #1
 800d31c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d31e:	e008      	b.n	800d332 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f042 0201 	orr.w	r2, r2, #1
 800d32e:	601a      	str	r2, [r3, #0]
 800d330:	e000      	b.n	800d334 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d332:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	40010000 	.word	0x40010000
 800d348:	40000400 	.word	0x40000400
 800d34c:	40000800 	.word	0x40000800
 800d350:	40000c00 	.word	0x40000c00
 800d354:	40010400 	.word	0x40010400
 800d358:	40001800 	.word	0x40001800
 800d35c:	40014000 	.word	0x40014000
 800d360:	00010007 	.word	0x00010007

0800d364 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68da      	ldr	r2, [r3, #12]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f022 0201 	bic.w	r2, r2, #1
 800d37a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6a1a      	ldr	r2, [r3, #32]
 800d382:	f241 1311 	movw	r3, #4369	; 0x1111
 800d386:	4013      	ands	r3, r2
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10f      	bne.n	800d3ac <HAL_TIM_Base_Stop_IT+0x48>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6a1a      	ldr	r2, [r3, #32]
 800d392:	f240 4344 	movw	r3, #1092	; 0x444
 800d396:	4013      	ands	r3, r2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d107      	bne.n	800d3ac <HAL_TIM_Base_Stop_IT+0x48>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 0201 	bic.w	r2, r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e049      	b.n	800d468 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d106      	bne.n	800d3ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 f841 	bl	800d470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f000 fdd5 	bl	800dfb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2201      	movs	r2, #1
 800d412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2201      	movs	r2, #1
 800d442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d478:	bf00      	nop
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr

0800d484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d109      	bne.n	800d4a8 <HAL_TIM_PWM_Start+0x24>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	bf14      	ite	ne
 800d4a0:	2301      	movne	r3, #1
 800d4a2:	2300      	moveq	r3, #0
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	e03c      	b.n	800d522 <HAL_TIM_PWM_Start+0x9e>
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	d109      	bne.n	800d4c2 <HAL_TIM_PWM_Start+0x3e>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	bf14      	ite	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	2300      	moveq	r3, #0
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	e02f      	b.n	800d522 <HAL_TIM_PWM_Start+0x9e>
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b08      	cmp	r3, #8
 800d4c6:	d109      	bne.n	800d4dc <HAL_TIM_PWM_Start+0x58>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	bf14      	ite	ne
 800d4d4:	2301      	movne	r3, #1
 800d4d6:	2300      	moveq	r3, #0
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	e022      	b.n	800d522 <HAL_TIM_PWM_Start+0x9e>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2b0c      	cmp	r3, #12
 800d4e0:	d109      	bne.n	800d4f6 <HAL_TIM_PWM_Start+0x72>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	bf14      	ite	ne
 800d4ee:	2301      	movne	r3, #1
 800d4f0:	2300      	moveq	r3, #0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	e015      	b.n	800d522 <HAL_TIM_PWM_Start+0x9e>
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b10      	cmp	r3, #16
 800d4fa:	d109      	bne.n	800d510 <HAL_TIM_PWM_Start+0x8c>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b01      	cmp	r3, #1
 800d506:	bf14      	ite	ne
 800d508:	2301      	movne	r3, #1
 800d50a:	2300      	moveq	r3, #0
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	e008      	b.n	800d522 <HAL_TIM_PWM_Start+0x9e>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b01      	cmp	r3, #1
 800d51a:	bf14      	ite	ne
 800d51c:	2301      	movne	r3, #1
 800d51e:	2300      	moveq	r3, #0
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e0a1      	b.n	800d66e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d104      	bne.n	800d53a <HAL_TIM_PWM_Start+0xb6>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d538:	e023      	b.n	800d582 <HAL_TIM_PWM_Start+0xfe>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	d104      	bne.n	800d54a <HAL_TIM_PWM_Start+0xc6>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2202      	movs	r2, #2
 800d544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d548:	e01b      	b.n	800d582 <HAL_TIM_PWM_Start+0xfe>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b08      	cmp	r3, #8
 800d54e:	d104      	bne.n	800d55a <HAL_TIM_PWM_Start+0xd6>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2202      	movs	r2, #2
 800d554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d558:	e013      	b.n	800d582 <HAL_TIM_PWM_Start+0xfe>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b0c      	cmp	r3, #12
 800d55e:	d104      	bne.n	800d56a <HAL_TIM_PWM_Start+0xe6>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2202      	movs	r2, #2
 800d564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d568:	e00b      	b.n	800d582 <HAL_TIM_PWM_Start+0xfe>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b10      	cmp	r3, #16
 800d56e:	d104      	bne.n	800d57a <HAL_TIM_PWM_Start+0xf6>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d578:	e003      	b.n	800d582 <HAL_TIM_PWM_Start+0xfe>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2202      	movs	r2, #2
 800d57e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2201      	movs	r2, #1
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f001 f91e 	bl	800e7cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a38      	ldr	r2, [pc, #224]	; (800d678 <HAL_TIM_PWM_Start+0x1f4>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d013      	beq.n	800d5c2 <HAL_TIM_PWM_Start+0x13e>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a37      	ldr	r2, [pc, #220]	; (800d67c <HAL_TIM_PWM_Start+0x1f8>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00e      	beq.n	800d5c2 <HAL_TIM_PWM_Start+0x13e>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a35      	ldr	r2, [pc, #212]	; (800d680 <HAL_TIM_PWM_Start+0x1fc>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d009      	beq.n	800d5c2 <HAL_TIM_PWM_Start+0x13e>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a34      	ldr	r2, [pc, #208]	; (800d684 <HAL_TIM_PWM_Start+0x200>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d004      	beq.n	800d5c2 <HAL_TIM_PWM_Start+0x13e>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4a32      	ldr	r2, [pc, #200]	; (800d688 <HAL_TIM_PWM_Start+0x204>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d101      	bne.n	800d5c6 <HAL_TIM_PWM_Start+0x142>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <HAL_TIM_PWM_Start+0x144>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d007      	beq.n	800d5dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a25      	ldr	r2, [pc, #148]	; (800d678 <HAL_TIM_PWM_Start+0x1f4>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d022      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5ee:	d01d      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a25      	ldr	r2, [pc, #148]	; (800d68c <HAL_TIM_PWM_Start+0x208>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d018      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a24      	ldr	r2, [pc, #144]	; (800d690 <HAL_TIM_PWM_Start+0x20c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d013      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a22      	ldr	r2, [pc, #136]	; (800d694 <HAL_TIM_PWM_Start+0x210>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d00e      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a1a      	ldr	r2, [pc, #104]	; (800d67c <HAL_TIM_PWM_Start+0x1f8>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d009      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a1e      	ldr	r2, [pc, #120]	; (800d698 <HAL_TIM_PWM_Start+0x214>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d004      	beq.n	800d62c <HAL_TIM_PWM_Start+0x1a8>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a16      	ldr	r2, [pc, #88]	; (800d680 <HAL_TIM_PWM_Start+0x1fc>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d115      	bne.n	800d658 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689a      	ldr	r2, [r3, #8]
 800d632:	4b1a      	ldr	r3, [pc, #104]	; (800d69c <HAL_TIM_PWM_Start+0x218>)
 800d634:	4013      	ands	r3, r2
 800d636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b06      	cmp	r3, #6
 800d63c:	d015      	beq.n	800d66a <HAL_TIM_PWM_Start+0x1e6>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d644:	d011      	beq.n	800d66a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f042 0201 	orr.w	r2, r2, #1
 800d654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d656:	e008      	b.n	800d66a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f042 0201 	orr.w	r2, r2, #1
 800d666:	601a      	str	r2, [r3, #0]
 800d668:	e000      	b.n	800d66c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d66a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	40010000 	.word	0x40010000
 800d67c:	40010400 	.word	0x40010400
 800d680:	40014000 	.word	0x40014000
 800d684:	40014400 	.word	0x40014400
 800d688:	40014800 	.word	0x40014800
 800d68c:	40000400 	.word	0x40000400
 800d690:	40000800 	.word	0x40000800
 800d694:	40000c00 	.word	0x40000c00
 800d698:	40001800 	.word	0x40001800
 800d69c:	00010007 	.word	0x00010007

0800d6a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e08f      	b.n	800d7d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f7f8 fca7 	bl	800601c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6899      	ldr	r1, [r3, #8]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	4b3e      	ldr	r3, [pc, #248]	; (800d7dc <HAL_TIM_Encoder_Init+0x13c>)
 800d6e2:	400b      	ands	r3, r1
 800d6e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f000 fc5d 	bl	800dfb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	4313      	orrs	r3, r2
 800d716:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	4b31      	ldr	r3, [pc, #196]	; (800d7e0 <HAL_TIM_Encoder_Init+0x140>)
 800d71c:	4013      	ands	r3, r2
 800d71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	689a      	ldr	r2, [r3, #8]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	021b      	lsls	r3, r3, #8
 800d72a:	4313      	orrs	r3, r2
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	4313      	orrs	r3, r2
 800d730:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	4b2b      	ldr	r3, [pc, #172]	; (800d7e4 <HAL_TIM_Encoder_Init+0x144>)
 800d736:	4013      	ands	r3, r2
 800d738:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	4b2a      	ldr	r3, [pc, #168]	; (800d7e8 <HAL_TIM_Encoder_Init+0x148>)
 800d73e:	4013      	ands	r3, r2
 800d740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	021b      	lsls	r3, r3, #8
 800d74c:	4313      	orrs	r3, r2
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	4313      	orrs	r3, r2
 800d752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	011a      	lsls	r2, r3, #4
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	031b      	lsls	r3, r3, #12
 800d760:	4313      	orrs	r3, r2
 800d762:	693a      	ldr	r2, [r7, #16]
 800d764:	4313      	orrs	r3, r2
 800d766:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d76e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d776:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	695b      	ldr	r3, [r3, #20]
 800d780:	011b      	lsls	r3, r3, #4
 800d782:	4313      	orrs	r3, r2
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	4313      	orrs	r3, r2
 800d788:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	697a      	ldr	r2, [r7, #20]
 800d790:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	693a      	ldr	r2, [r7, #16]
 800d798:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	fffebff8 	.word	0xfffebff8
 800d7e0:	fffffcfc 	.word	0xfffffcfc
 800d7e4:	fffff3f3 	.word	0xfffff3f3
 800d7e8:	ffff0f0f 	.word	0xffff0f0f

0800d7ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d7fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d804:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d80c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d814:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d110      	bne.n	800d83e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d102      	bne.n	800d828 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d822:	7b7b      	ldrb	r3, [r7, #13]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d001      	beq.n	800d82c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	e069      	b.n	800d900 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2202      	movs	r2, #2
 800d830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d83c:	e031      	b.n	800d8a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	2b04      	cmp	r3, #4
 800d842:	d110      	bne.n	800d866 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d844:	7bbb      	ldrb	r3, [r7, #14]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d102      	bne.n	800d850 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d84a:	7b3b      	ldrb	r3, [r7, #12]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d001      	beq.n	800d854 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	e055      	b.n	800d900 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2202      	movs	r2, #2
 800d858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2202      	movs	r2, #2
 800d860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d864:	e01d      	b.n	800d8a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d866:	7bfb      	ldrb	r3, [r7, #15]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d108      	bne.n	800d87e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d105      	bne.n	800d87e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d872:	7b7b      	ldrb	r3, [r7, #13]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d102      	bne.n	800d87e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d878:	7b3b      	ldrb	r3, [r7, #12]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d001      	beq.n	800d882 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e03e      	b.n	800d900 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2202      	movs	r2, #2
 800d886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2202      	movs	r2, #2
 800d88e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2202      	movs	r2, #2
 800d896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2202      	movs	r2, #2
 800d89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <HAL_TIM_Encoder_Start+0xc4>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b04      	cmp	r3, #4
 800d8ac:	d008      	beq.n	800d8c0 <HAL_TIM_Encoder_Start+0xd4>
 800d8ae:	e00f      	b.n	800d8d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 ff87 	bl	800e7cc <TIM_CCxChannelCmd>
      break;
 800d8be:	e016      	b.n	800d8ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	2104      	movs	r1, #4
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 ff7f 	bl	800e7cc <TIM_CCxChannelCmd>
      break;
 800d8ce:	e00e      	b.n	800d8ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 ff77 	bl	800e7cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	2104      	movs	r1, #4
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f000 ff70 	bl	800e7cc <TIM_CCxChannelCmd>
      break;
 800d8ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f042 0201 	orr.w	r2, r2, #1
 800d8fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d122      	bne.n	800d964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d11b      	bne.n	800d964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f06f 0202 	mvn.w	r2, #2
 800d934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	f003 0303 	and.w	r3, r3, #3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 fb12 	bl	800df74 <HAL_TIM_IC_CaptureCallback>
 800d950:	e005      	b.n	800d95e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fb04 	bl	800df60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 fb15 	bl	800df88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	2b04      	cmp	r3, #4
 800d970:	d122      	bne.n	800d9b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	f003 0304 	and.w	r3, r3, #4
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d11b      	bne.n	800d9b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f06f 0204 	mvn.w	r2, #4
 800d988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2202      	movs	r2, #2
 800d98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fae8 	bl	800df74 <HAL_TIM_IC_CaptureCallback>
 800d9a4:	e005      	b.n	800d9b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 fada 	bl	800df60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 faeb 	bl	800df88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	f003 0308 	and.w	r3, r3, #8
 800d9c2:	2b08      	cmp	r3, #8
 800d9c4:	d122      	bne.n	800da0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f003 0308 	and.w	r3, r3, #8
 800d9d0:	2b08      	cmp	r3, #8
 800d9d2:	d11b      	bne.n	800da0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f06f 0208 	mvn.w	r2, #8
 800d9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2204      	movs	r2, #4
 800d9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	69db      	ldr	r3, [r3, #28]
 800d9ea:	f003 0303 	and.w	r3, r3, #3
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fabe 	bl	800df74 <HAL_TIM_IC_CaptureCallback>
 800d9f8:	e005      	b.n	800da06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fab0 	bl	800df60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fac1 	bl	800df88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	f003 0310 	and.w	r3, r3, #16
 800da16:	2b10      	cmp	r3, #16
 800da18:	d122      	bne.n	800da60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	f003 0310 	and.w	r3, r3, #16
 800da24:	2b10      	cmp	r3, #16
 800da26:	d11b      	bne.n	800da60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f06f 0210 	mvn.w	r2, #16
 800da30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2208      	movs	r2, #8
 800da36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	69db      	ldr	r3, [r3, #28]
 800da3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 fa94 	bl	800df74 <HAL_TIM_IC_CaptureCallback>
 800da4c:	e005      	b.n	800da5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fa86 	bl	800df60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fa97 	bl	800df88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	f003 0301 	and.w	r3, r3, #1
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d10e      	bne.n	800da8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	f003 0301 	and.w	r3, r3, #1
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d107      	bne.n	800da8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f06f 0201 	mvn.w	r2, #1
 800da84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7f5 fd8a 	bl	80035a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da96:	2b80      	cmp	r3, #128	; 0x80
 800da98:	d10e      	bne.n	800dab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daa4:	2b80      	cmp	r3, #128	; 0x80
 800daa6:	d107      	bne.n	800dab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 ffc6 	bl	800ea44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac6:	d10e      	bne.n	800dae6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad2:	2b80      	cmp	r3, #128	; 0x80
 800dad4:	d107      	bne.n	800dae6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 ffb9 	bl	800ea58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf0:	2b40      	cmp	r3, #64	; 0x40
 800daf2:	d10e      	bne.n	800db12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafe:	2b40      	cmp	r3, #64	; 0x40
 800db00:	d107      	bne.n	800db12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fa45 	bl	800df9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b20      	cmp	r3, #32
 800db1e:	d10e      	bne.n	800db3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	f003 0320 	and.w	r3, r3, #32
 800db2a:	2b20      	cmp	r3, #32
 800db2c:	d107      	bne.n	800db3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f06f 0220 	mvn.w	r2, #32
 800db36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 ff79 	bl	800ea30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db3e:	bf00      	nop
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
	...

0800db48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db54:	2300      	movs	r3, #0
 800db56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db5e:	2b01      	cmp	r3, #1
 800db60:	d101      	bne.n	800db66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db62:	2302      	movs	r3, #2
 800db64:	e0ff      	b.n	800dd66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2201      	movs	r2, #1
 800db6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b14      	cmp	r3, #20
 800db72:	f200 80f0 	bhi.w	800dd56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db76:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7c:	0800dbd1 	.word	0x0800dbd1
 800db80:	0800dd57 	.word	0x0800dd57
 800db84:	0800dd57 	.word	0x0800dd57
 800db88:	0800dd57 	.word	0x0800dd57
 800db8c:	0800dc11 	.word	0x0800dc11
 800db90:	0800dd57 	.word	0x0800dd57
 800db94:	0800dd57 	.word	0x0800dd57
 800db98:	0800dd57 	.word	0x0800dd57
 800db9c:	0800dc53 	.word	0x0800dc53
 800dba0:	0800dd57 	.word	0x0800dd57
 800dba4:	0800dd57 	.word	0x0800dd57
 800dba8:	0800dd57 	.word	0x0800dd57
 800dbac:	0800dc93 	.word	0x0800dc93
 800dbb0:	0800dd57 	.word	0x0800dd57
 800dbb4:	0800dd57 	.word	0x0800dd57
 800dbb8:	0800dd57 	.word	0x0800dd57
 800dbbc:	0800dcd5 	.word	0x0800dcd5
 800dbc0:	0800dd57 	.word	0x0800dd57
 800dbc4:	0800dd57 	.word	0x0800dd57
 800dbc8:	0800dd57 	.word	0x0800dd57
 800dbcc:	0800dd15 	.word	0x0800dd15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f000 fa84 	bl	800e0e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f042 0208 	orr.w	r2, r2, #8
 800dbea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f022 0204 	bic.w	r2, r2, #4
 800dbfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6999      	ldr	r1, [r3, #24]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	691a      	ldr	r2, [r3, #16]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	430a      	orrs	r2, r1
 800dc0c:	619a      	str	r2, [r3, #24]
      break;
 800dc0e:	e0a5      	b.n	800dd5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68b9      	ldr	r1, [r7, #8]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 faf4 	bl	800e204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	699a      	ldr	r2, [r3, #24]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	699a      	ldr	r2, [r3, #24]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	6999      	ldr	r1, [r3, #24]
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	021a      	lsls	r2, r3, #8
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	430a      	orrs	r2, r1
 800dc4e:	619a      	str	r2, [r3, #24]
      break;
 800dc50:	e084      	b.n	800dd5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	68b9      	ldr	r1, [r7, #8]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 fb5d 	bl	800e318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	69da      	ldr	r2, [r3, #28]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f042 0208 	orr.w	r2, r2, #8
 800dc6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69da      	ldr	r2, [r3, #28]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f022 0204 	bic.w	r2, r2, #4
 800dc7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	69d9      	ldr	r1, [r3, #28]
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	691a      	ldr	r2, [r3, #16]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	430a      	orrs	r2, r1
 800dc8e:	61da      	str	r2, [r3, #28]
      break;
 800dc90:	e064      	b.n	800dd5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 fbc5 	bl	800e428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	69da      	ldr	r2, [r3, #28]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	69da      	ldr	r2, [r3, #28]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	69d9      	ldr	r1, [r3, #28]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	691b      	ldr	r3, [r3, #16]
 800dcc8:	021a      	lsls	r2, r3, #8
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	61da      	str	r2, [r3, #28]
      break;
 800dcd2:	e043      	b.n	800dd5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	68b9      	ldr	r1, [r7, #8]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 fc0e 	bl	800e4fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f042 0208 	orr.w	r2, r2, #8
 800dcee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f022 0204 	bic.w	r2, r2, #4
 800dcfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	691a      	ldr	r2, [r3, #16]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	430a      	orrs	r2, r1
 800dd10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dd12:	e023      	b.n	800dd5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	68b9      	ldr	r1, [r7, #8]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f000 fc52 	bl	800e5c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	021a      	lsls	r2, r3, #8
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	430a      	orrs	r2, r1
 800dd52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dd54:	e002      	b.n	800dd5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	75fb      	strb	r3, [r7, #23]
      break;
 800dd5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop

0800dd70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d101      	bne.n	800dd8c <HAL_TIM_ConfigClockSource+0x1c>
 800dd88:	2302      	movs	r3, #2
 800dd8a:	e0dc      	b.n	800df46 <HAL_TIM_ConfigClockSource+0x1d6>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2202      	movs	r2, #2
 800dd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dda4:	68ba      	ldr	r2, [r7, #8]
 800dda6:	4b6a      	ldr	r3, [pc, #424]	; (800df50 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dda8:	4013      	ands	r3, r2
 800ddaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a64      	ldr	r2, [pc, #400]	; (800df54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	f000 80a9 	beq.w	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddc8:	4a62      	ldr	r2, [pc, #392]	; (800df54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	f200 80ae 	bhi.w	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ddd0:	4a61      	ldr	r2, [pc, #388]	; (800df58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddd2:	4293      	cmp	r3, r2
 800ddd4:	f000 80a1 	beq.w	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddd8:	4a5f      	ldr	r2, [pc, #380]	; (800df58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	f200 80a6 	bhi.w	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dde0:	4a5e      	ldr	r2, [pc, #376]	; (800df5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	f000 8099 	beq.w	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dde8:	4a5c      	ldr	r2, [pc, #368]	; (800df5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	f200 809e 	bhi.w	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800ddf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ddf4:	f000 8091 	beq.w	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800ddf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ddfc:	f200 8096 	bhi.w	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de04:	f000 8089 	beq.w	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800de08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de0c:	f200 808e 	bhi.w	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de14:	d03e      	beq.n	800de94 <HAL_TIM_ConfigClockSource+0x124>
 800de16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de1a:	f200 8087 	bhi.w	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de22:	f000 8086 	beq.w	800df32 <HAL_TIM_ConfigClockSource+0x1c2>
 800de26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de2a:	d87f      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de2c:	2b70      	cmp	r3, #112	; 0x70
 800de2e:	d01a      	beq.n	800de66 <HAL_TIM_ConfigClockSource+0xf6>
 800de30:	2b70      	cmp	r3, #112	; 0x70
 800de32:	d87b      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de34:	2b60      	cmp	r3, #96	; 0x60
 800de36:	d050      	beq.n	800deda <HAL_TIM_ConfigClockSource+0x16a>
 800de38:	2b60      	cmp	r3, #96	; 0x60
 800de3a:	d877      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de3c:	2b50      	cmp	r3, #80	; 0x50
 800de3e:	d03c      	beq.n	800deba <HAL_TIM_ConfigClockSource+0x14a>
 800de40:	2b50      	cmp	r3, #80	; 0x50
 800de42:	d873      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de44:	2b40      	cmp	r3, #64	; 0x40
 800de46:	d058      	beq.n	800defa <HAL_TIM_ConfigClockSource+0x18a>
 800de48:	2b40      	cmp	r3, #64	; 0x40
 800de4a:	d86f      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de4c:	2b30      	cmp	r3, #48	; 0x30
 800de4e:	d064      	beq.n	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800de50:	2b30      	cmp	r3, #48	; 0x30
 800de52:	d86b      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de54:	2b20      	cmp	r3, #32
 800de56:	d060      	beq.n	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800de58:	2b20      	cmp	r3, #32
 800de5a:	d867      	bhi.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d05c      	beq.n	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800de60:	2b10      	cmp	r3, #16
 800de62:	d05a      	beq.n	800df1a <HAL_TIM_ConfigClockSource+0x1aa>
 800de64:	e062      	b.n	800df2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	6899      	ldr	r1, [r3, #8]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	f000 fc89 	bl	800e78c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800de88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	609a      	str	r2, [r3, #8]
      break;
 800de92:	e04f      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6818      	ldr	r0, [r3, #0]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	6899      	ldr	r1, [r3, #8]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685a      	ldr	r2, [r3, #4]
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	f000 fc72 	bl	800e78c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689a      	ldr	r2, [r3, #8]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800deb6:	609a      	str	r2, [r3, #8]
      break;
 800deb8:	e03c      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6818      	ldr	r0, [r3, #0]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	6859      	ldr	r1, [r3, #4]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	461a      	mov	r2, r3
 800dec8:	f000 fbe2 	bl	800e690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2150      	movs	r1, #80	; 0x50
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 fc3c 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800ded8:	e02c      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6818      	ldr	r0, [r3, #0]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	6859      	ldr	r1, [r3, #4]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	461a      	mov	r2, r3
 800dee8:	f000 fc01 	bl	800e6ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2160      	movs	r1, #96	; 0x60
 800def2:	4618      	mov	r0, r3
 800def4:	f000 fc2c 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800def8:	e01c      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	6859      	ldr	r1, [r3, #4]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	461a      	mov	r2, r3
 800df08:	f000 fbc2 	bl	800e690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2140      	movs	r1, #64	; 0x40
 800df12:	4618      	mov	r0, r3
 800df14:	f000 fc1c 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800df18:	e00c      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4619      	mov	r1, r3
 800df24:	4610      	mov	r0, r2
 800df26:	f000 fc13 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800df2a:	e003      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	73fb      	strb	r3, [r7, #15]
      break;
 800df30:	e000      	b.n	800df34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800df44:	7bfb      	ldrb	r3, [r7, #15]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	ffceff88 	.word	0xffceff88
 800df54:	00100040 	.word	0x00100040
 800df58:	00100030 	.word	0x00100030
 800df5c:	00100020 	.word	0x00100020

0800df60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df7c:	bf00      	nop
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df90:	bf00      	nop
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfa4:	bf00      	nop
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a40      	ldr	r2, [pc, #256]	; (800e0c4 <TIM_Base_SetConfig+0x114>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d013      	beq.n	800dff0 <TIM_Base_SetConfig+0x40>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfce:	d00f      	beq.n	800dff0 <TIM_Base_SetConfig+0x40>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a3d      	ldr	r2, [pc, #244]	; (800e0c8 <TIM_Base_SetConfig+0x118>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d00b      	beq.n	800dff0 <TIM_Base_SetConfig+0x40>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4a3c      	ldr	r2, [pc, #240]	; (800e0cc <TIM_Base_SetConfig+0x11c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d007      	beq.n	800dff0 <TIM_Base_SetConfig+0x40>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a3b      	ldr	r2, [pc, #236]	; (800e0d0 <TIM_Base_SetConfig+0x120>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d003      	beq.n	800dff0 <TIM_Base_SetConfig+0x40>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a3a      	ldr	r2, [pc, #232]	; (800e0d4 <TIM_Base_SetConfig+0x124>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d108      	bne.n	800e002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	4313      	orrs	r3, r2
 800e000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a2f      	ldr	r2, [pc, #188]	; (800e0c4 <TIM_Base_SetConfig+0x114>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d01f      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e010:	d01b      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a2c      	ldr	r2, [pc, #176]	; (800e0c8 <TIM_Base_SetConfig+0x118>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d017      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a2b      	ldr	r2, [pc, #172]	; (800e0cc <TIM_Base_SetConfig+0x11c>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d013      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a2a      	ldr	r2, [pc, #168]	; (800e0d0 <TIM_Base_SetConfig+0x120>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d00f      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a29      	ldr	r2, [pc, #164]	; (800e0d4 <TIM_Base_SetConfig+0x124>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d00b      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a28      	ldr	r2, [pc, #160]	; (800e0d8 <TIM_Base_SetConfig+0x128>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d007      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a27      	ldr	r2, [pc, #156]	; (800e0dc <TIM_Base_SetConfig+0x12c>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d003      	beq.n	800e04a <TIM_Base_SetConfig+0x9a>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a26      	ldr	r2, [pc, #152]	; (800e0e0 <TIM_Base_SetConfig+0x130>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d108      	bne.n	800e05c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	4313      	orrs	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	689a      	ldr	r2, [r3, #8]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a10      	ldr	r2, [pc, #64]	; (800e0c4 <TIM_Base_SetConfig+0x114>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d00f      	beq.n	800e0a8 <TIM_Base_SetConfig+0xf8>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a12      	ldr	r2, [pc, #72]	; (800e0d4 <TIM_Base_SetConfig+0x124>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d00b      	beq.n	800e0a8 <TIM_Base_SetConfig+0xf8>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4a11      	ldr	r2, [pc, #68]	; (800e0d8 <TIM_Base_SetConfig+0x128>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d007      	beq.n	800e0a8 <TIM_Base_SetConfig+0xf8>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4a10      	ldr	r2, [pc, #64]	; (800e0dc <TIM_Base_SetConfig+0x12c>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d003      	beq.n	800e0a8 <TIM_Base_SetConfig+0xf8>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a0f      	ldr	r2, [pc, #60]	; (800e0e0 <TIM_Base_SetConfig+0x130>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d103      	bne.n	800e0b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	691a      	ldr	r2, [r3, #16]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	615a      	str	r2, [r3, #20]
}
 800e0b6:	bf00      	nop
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	40010000 	.word	0x40010000
 800e0c8:	40000400 	.word	0x40000400
 800e0cc:	40000800 	.word	0x40000800
 800e0d0:	40000c00 	.word	0x40000c00
 800e0d4:	40010400 	.word	0x40010400
 800e0d8:	40014000 	.word	0x40014000
 800e0dc:	40014400 	.word	0x40014400
 800e0e0:	40014800 	.word	0x40014800

0800e0e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	f023 0201 	bic.w	r2, r3, #1
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	4b37      	ldr	r3, [pc, #220]	; (800e1ec <TIM_OC1_SetConfig+0x108>)
 800e110:	4013      	ands	r3, r2
 800e112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f023 0303 	bic.w	r3, r3, #3
 800e11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	4313      	orrs	r3, r2
 800e124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f023 0302 	bic.w	r3, r3, #2
 800e12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	697a      	ldr	r2, [r7, #20]
 800e134:	4313      	orrs	r3, r2
 800e136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a2d      	ldr	r2, [pc, #180]	; (800e1f0 <TIM_OC1_SetConfig+0x10c>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d00f      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a2c      	ldr	r2, [pc, #176]	; (800e1f4 <TIM_OC1_SetConfig+0x110>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d00b      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a2b      	ldr	r2, [pc, #172]	; (800e1f8 <TIM_OC1_SetConfig+0x114>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d007      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a2a      	ldr	r2, [pc, #168]	; (800e1fc <TIM_OC1_SetConfig+0x118>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d003      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a29      	ldr	r2, [pc, #164]	; (800e200 <TIM_OC1_SetConfig+0x11c>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d10c      	bne.n	800e17a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	f023 0308 	bic.w	r3, r3, #8
 800e166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	4313      	orrs	r3, r2
 800e170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f023 0304 	bic.w	r3, r3, #4
 800e178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4a1c      	ldr	r2, [pc, #112]	; (800e1f0 <TIM_OC1_SetConfig+0x10c>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d00f      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4a1b      	ldr	r2, [pc, #108]	; (800e1f4 <TIM_OC1_SetConfig+0x110>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d00b      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4a1a      	ldr	r2, [pc, #104]	; (800e1f8 <TIM_OC1_SetConfig+0x114>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d007      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a19      	ldr	r2, [pc, #100]	; (800e1fc <TIM_OC1_SetConfig+0x118>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d003      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a18      	ldr	r2, [pc, #96]	; (800e200 <TIM_OC1_SetConfig+0x11c>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d111      	bne.n	800e1c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	693a      	ldr	r2, [r7, #16]
 800e1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	621a      	str	r2, [r3, #32]
}
 800e1e0:	bf00      	nop
 800e1e2:	371c      	adds	r7, #28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	fffeff8f 	.word	0xfffeff8f
 800e1f0:	40010000 	.word	0x40010000
 800e1f4:	40010400 	.word	0x40010400
 800e1f8:	40014000 	.word	0x40014000
 800e1fc:	40014400 	.word	0x40014400
 800e200:	40014800 	.word	0x40014800

0800e204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e204:	b480      	push	{r7}
 800e206:	b087      	sub	sp, #28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	f023 0210 	bic.w	r2, r3, #16
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6a1b      	ldr	r3, [r3, #32]
 800e21e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	4b34      	ldr	r3, [pc, #208]	; (800e300 <TIM_OC2_SetConfig+0xfc>)
 800e230:	4013      	ands	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e23a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	021b      	lsls	r3, r3, #8
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	4313      	orrs	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f023 0320 	bic.w	r3, r3, #32
 800e24e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	011b      	lsls	r3, r3, #4
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	4313      	orrs	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a29      	ldr	r2, [pc, #164]	; (800e304 <TIM_OC2_SetConfig+0x100>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d003      	beq.n	800e26c <TIM_OC2_SetConfig+0x68>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a28      	ldr	r2, [pc, #160]	; (800e308 <TIM_OC2_SetConfig+0x104>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d10d      	bne.n	800e288 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	011b      	lsls	r3, r3, #4
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	4313      	orrs	r3, r2
 800e27e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e286:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a1e      	ldr	r2, [pc, #120]	; (800e304 <TIM_OC2_SetConfig+0x100>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d00f      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4a1d      	ldr	r2, [pc, #116]	; (800e308 <TIM_OC2_SetConfig+0x104>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d00b      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a1c      	ldr	r2, [pc, #112]	; (800e30c <TIM_OC2_SetConfig+0x108>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d007      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a1b      	ldr	r2, [pc, #108]	; (800e310 <TIM_OC2_SetConfig+0x10c>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d003      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a1a      	ldr	r2, [pc, #104]	; (800e314 <TIM_OC2_SetConfig+0x110>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d113      	bne.n	800e2d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	621a      	str	r2, [r3, #32]
}
 800e2f2:	bf00      	nop
 800e2f4:	371c      	adds	r7, #28
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	feff8fff 	.word	0xfeff8fff
 800e304:	40010000 	.word	0x40010000
 800e308:	40010400 	.word	0x40010400
 800e30c:	40014000 	.word	0x40014000
 800e310:	40014400 	.word	0x40014400
 800e314:	40014800 	.word	0x40014800

0800e318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e318:	b480      	push	{r7}
 800e31a:	b087      	sub	sp, #28
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a1b      	ldr	r3, [r3, #32]
 800e332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	69db      	ldr	r3, [r3, #28]
 800e33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	4b33      	ldr	r3, [pc, #204]	; (800e410 <TIM_OC3_SetConfig+0xf8>)
 800e344:	4013      	ands	r3, r2
 800e346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f023 0303 	bic.w	r3, r3, #3
 800e34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4313      	orrs	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	021b      	lsls	r3, r3, #8
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a28      	ldr	r2, [pc, #160]	; (800e414 <TIM_OC3_SetConfig+0xfc>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d003      	beq.n	800e37e <TIM_OC3_SetConfig+0x66>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a27      	ldr	r2, [pc, #156]	; (800e418 <TIM_OC3_SetConfig+0x100>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d10d      	bne.n	800e39a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	021b      	lsls	r3, r3, #8
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	4313      	orrs	r3, r2
 800e390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a1d      	ldr	r2, [pc, #116]	; (800e414 <TIM_OC3_SetConfig+0xfc>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d00f      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a1c      	ldr	r2, [pc, #112]	; (800e418 <TIM_OC3_SetConfig+0x100>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d00b      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4a1b      	ldr	r2, [pc, #108]	; (800e41c <TIM_OC3_SetConfig+0x104>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d007      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4a1a      	ldr	r2, [pc, #104]	; (800e420 <TIM_OC3_SetConfig+0x108>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d003      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4a19      	ldr	r2, [pc, #100]	; (800e424 <TIM_OC3_SetConfig+0x10c>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d113      	bne.n	800e3ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	011b      	lsls	r3, r3, #4
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	011b      	lsls	r3, r3, #4
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	685a      	ldr	r2, [r3, #4]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	621a      	str	r2, [r3, #32]
}
 800e404:	bf00      	nop
 800e406:	371c      	adds	r7, #28
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	fffeff8f 	.word	0xfffeff8f
 800e414:	40010000 	.word	0x40010000
 800e418:	40010400 	.word	0x40010400
 800e41c:	40014000 	.word	0x40014000
 800e420:	40014400 	.word	0x40014400
 800e424:	40014800 	.word	0x40014800

0800e428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e428:	b480      	push	{r7}
 800e42a:	b087      	sub	sp, #28
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a1b      	ldr	r3, [r3, #32]
 800e436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a1b      	ldr	r3, [r3, #32]
 800e442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <TIM_OC4_SetConfig+0xbc>)
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	021b      	lsls	r3, r3, #8
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	4313      	orrs	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	031b      	lsls	r3, r3, #12
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a19      	ldr	r2, [pc, #100]	; (800e4e8 <TIM_OC4_SetConfig+0xc0>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d00f      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a18      	ldr	r2, [pc, #96]	; (800e4ec <TIM_OC4_SetConfig+0xc4>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d00b      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a17      	ldr	r2, [pc, #92]	; (800e4f0 <TIM_OC4_SetConfig+0xc8>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d007      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a16      	ldr	r2, [pc, #88]	; (800e4f4 <TIM_OC4_SetConfig+0xcc>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d003      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a15      	ldr	r2, [pc, #84]	; (800e4f8 <TIM_OC4_SetConfig+0xd0>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d109      	bne.n	800e4bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	019b      	lsls	r3, r3, #6
 800e4b6:	697a      	ldr	r2, [r7, #20]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	621a      	str	r2, [r3, #32]
}
 800e4d6:	bf00      	nop
 800e4d8:	371c      	adds	r7, #28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	feff8fff 	.word	0xfeff8fff
 800e4e8:	40010000 	.word	0x40010000
 800e4ec:	40010400 	.word	0x40010400
 800e4f0:	40014000 	.word	0x40014000
 800e4f4:	40014400 	.word	0x40014400
 800e4f8:	40014800 	.word	0x40014800

0800e4fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b087      	sub	sp, #28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	4b21      	ldr	r3, [pc, #132]	; (800e5ac <TIM_OC5_SetConfig+0xb0>)
 800e528:	4013      	ands	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	4313      	orrs	r3, r2
 800e534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e53c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	4313      	orrs	r3, r2
 800e548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a18      	ldr	r2, [pc, #96]	; (800e5b0 <TIM_OC5_SetConfig+0xb4>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d00f      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a17      	ldr	r2, [pc, #92]	; (800e5b4 <TIM_OC5_SetConfig+0xb8>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d00b      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a16      	ldr	r2, [pc, #88]	; (800e5b8 <TIM_OC5_SetConfig+0xbc>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d007      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a15      	ldr	r2, [pc, #84]	; (800e5bc <TIM_OC5_SetConfig+0xc0>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d003      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a14      	ldr	r2, [pc, #80]	; (800e5c0 <TIM_OC5_SetConfig+0xc4>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d109      	bne.n	800e586 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	695b      	ldr	r3, [r3, #20]
 800e57e:	021b      	lsls	r3, r3, #8
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	4313      	orrs	r3, r2
 800e584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	693a      	ldr	r2, [r7, #16]
 800e59e:	621a      	str	r2, [r3, #32]
}
 800e5a0:	bf00      	nop
 800e5a2:	371c      	adds	r7, #28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	fffeff8f 	.word	0xfffeff8f
 800e5b0:	40010000 	.word	0x40010000
 800e5b4:	40010400 	.word	0x40010400
 800e5b8:	40014000 	.word	0x40014000
 800e5bc:	40014400 	.word	0x40014400
 800e5c0:	40014800 	.word	0x40014800

0800e5c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b087      	sub	sp, #28
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a1b      	ldr	r3, [r3, #32]
 800e5de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	4b22      	ldr	r3, [pc, #136]	; (800e678 <TIM_OC6_SetConfig+0xb4>)
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	021b      	lsls	r3, r3, #8
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	051b      	lsls	r3, r3, #20
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	4313      	orrs	r3, r2
 800e612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a19      	ldr	r2, [pc, #100]	; (800e67c <TIM_OC6_SetConfig+0xb8>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d00f      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a18      	ldr	r2, [pc, #96]	; (800e680 <TIM_OC6_SetConfig+0xbc>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d00b      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a17      	ldr	r2, [pc, #92]	; (800e684 <TIM_OC6_SetConfig+0xc0>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d007      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a16      	ldr	r2, [pc, #88]	; (800e688 <TIM_OC6_SetConfig+0xc4>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d003      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a15      	ldr	r2, [pc, #84]	; (800e68c <TIM_OC6_SetConfig+0xc8>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d109      	bne.n	800e650 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	695b      	ldr	r3, [r3, #20]
 800e648:	029b      	lsls	r3, r3, #10
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	621a      	str	r2, [r3, #32]
}
 800e66a:	bf00      	nop
 800e66c:	371c      	adds	r7, #28
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	feff8fff 	.word	0xfeff8fff
 800e67c:	40010000 	.word	0x40010000
 800e680:	40010400 	.word	0x40010400
 800e684:	40014000 	.word	0x40014000
 800e688:	40014400 	.word	0x40014400
 800e68c:	40014800 	.word	0x40014800

0800e690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e690:	b480      	push	{r7}
 800e692:	b087      	sub	sp, #28
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	f023 0201 	bic.w	r2, r3, #1
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	011b      	lsls	r3, r3, #4
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	f023 030a 	bic.w	r3, r3, #10
 800e6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6ce:	697a      	ldr	r2, [r7, #20]
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	621a      	str	r2, [r3, #32]
}
 800e6e2:	bf00      	nop
 800e6e4:	371c      	adds	r7, #28
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr

0800e6ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	b087      	sub	sp, #28
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	60f8      	str	r0, [r7, #12]
 800e6f6:	60b9      	str	r1, [r7, #8]
 800e6f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	f023 0210 	bic.w	r2, r3, #16
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e718:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	031b      	lsls	r3, r3, #12
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	4313      	orrs	r3, r2
 800e722:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e72a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	011b      	lsls	r3, r3, #4
 800e730:	693a      	ldr	r2, [r7, #16]
 800e732:	4313      	orrs	r3, r2
 800e734:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	697a      	ldr	r2, [r7, #20]
 800e73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	693a      	ldr	r2, [r7, #16]
 800e740:	621a      	str	r2, [r3, #32]
}
 800e742:	bf00      	nop
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
	...

0800e750 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	4b09      	ldr	r3, [pc, #36]	; (800e788 <TIM_ITRx_SetConfig+0x38>)
 800e764:	4013      	ands	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	f043 0307 	orr.w	r3, r3, #7
 800e772:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	609a      	str	r2, [r3, #8]
}
 800e77a:	bf00      	nop
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	ffcfff8f 	.word	0xffcfff8f

0800e78c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	021a      	lsls	r2, r3, #8
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	609a      	str	r2, [r3, #8]
}
 800e7c0:	bf00      	nop
 800e7c2:	371c      	adds	r7, #28
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f003 031f 	and.w	r3, r3, #31
 800e7de:	2201      	movs	r2, #1
 800e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6a1a      	ldr	r2, [r3, #32]
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	43db      	mvns	r3, r3
 800e7ee:	401a      	ands	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6a1a      	ldr	r2, [r3, #32]
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	f003 031f 	and.w	r3, r3, #31
 800e7fe:	6879      	ldr	r1, [r7, #4]
 800e800:	fa01 f303 	lsl.w	r3, r1, r3
 800e804:	431a      	orrs	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	621a      	str	r2, [r3, #32]
}
 800e80a:	bf00      	nop
 800e80c:	371c      	adds	r7, #28
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
	...

0800e818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d101      	bne.n	800e830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e82c:	2302      	movs	r3, #2
 800e82e:	e06d      	b.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2202      	movs	r2, #2
 800e83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a30      	ldr	r2, [pc, #192]	; (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d004      	beq.n	800e864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a2f      	ldr	r2, [pc, #188]	; (800e91c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d108      	bne.n	800e876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e86a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4313      	orrs	r3, r2
 800e874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e87c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4313      	orrs	r3, r2
 800e886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a20      	ldr	r2, [pc, #128]	; (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d022      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8a2:	d01d      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a1d      	ldr	r2, [pc, #116]	; (800e920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d018      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a1c      	ldr	r2, [pc, #112]	; (800e924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d013      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a1a      	ldr	r2, [pc, #104]	; (800e928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d00e      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a15      	ldr	r2, [pc, #84]	; (800e91c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d009      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a16      	ldr	r2, [pc, #88]	; (800e92c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d004      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a15      	ldr	r2, [pc, #84]	; (800e930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d10c      	bne.n	800e8fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	40010000 	.word	0x40010000
 800e91c:	40010400 	.word	0x40010400
 800e920:	40000400 	.word	0x40000400
 800e924:	40000800 	.word	0x40000800
 800e928:	40000c00 	.word	0x40000c00
 800e92c:	40001800 	.word	0x40001800
 800e930:	40014000 	.word	0x40014000

0800e934 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d101      	bne.n	800e950 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e94c:	2302      	movs	r3, #2
 800e94e:	e065      	b.n	800ea1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	4313      	orrs	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	695b      	ldr	r3, [r3, #20]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	041b      	lsls	r3, r3, #16
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a16      	ldr	r2, [pc, #88]	; (800ea28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d004      	beq.n	800e9de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a14      	ldr	r2, [pc, #80]	; (800ea2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d115      	bne.n	800ea0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	051b      	lsls	r3, r3, #20
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	69db      	ldr	r3, [r3, #28]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3714      	adds	r7, #20
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	40010000 	.word	0x40010000
 800ea2c:	40010400 	.word	0x40010400

0800ea30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e042      	b.n	800eb04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d106      	bne.n	800ea96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f7f7 fd43 	bl	800651c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2224      	movs	r2, #36	; 0x24
 800ea9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 0201 	bic.w	r2, r2, #1
 800eaac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 fdf8 	bl	800f6a4 <UART_SetConfig>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d101      	bne.n	800eabe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e022      	b.n	800eb04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d002      	beq.n	800eacc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f001 fb54 	bl	8010174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685a      	ldr	r2, [r3, #4]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689a      	ldr	r2, [r3, #8]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eaea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f042 0201 	orr.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f001 fbdb 	bl	80102b8 <UART_CheckIdleState>
 800eb02:	4603      	mov	r3, r0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	; 0x28
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb22:	2b20      	cmp	r3, #32
 800eb24:	f040 8083 	bne.w	800ec2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <HAL_UART_Transmit+0x28>
 800eb2e:	88fb      	ldrh	r3, [r7, #6]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d101      	bne.n	800eb38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800eb34:	2301      	movs	r3, #1
 800eb36:	e07b      	b.n	800ec30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d101      	bne.n	800eb46 <HAL_UART_Transmit+0x3a>
 800eb42:	2302      	movs	r3, #2
 800eb44:	e074      	b.n	800ec30 <HAL_UART_Transmit+0x124>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2221      	movs	r2, #33	; 0x21
 800eb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb5e:	f7f8 f87d 	bl	8006c5c <HAL_GetTick>
 800eb62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	88fa      	ldrh	r2, [r7, #6]
 800eb68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	88fa      	ldrh	r2, [r7, #6]
 800eb70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb7c:	d108      	bne.n	800eb90 <HAL_UART_Transmit+0x84>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	691b      	ldr	r3, [r3, #16]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d104      	bne.n	800eb90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800eb86:	2300      	movs	r3, #0
 800eb88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	61bb      	str	r3, [r7, #24]
 800eb8e:	e003      	b.n	800eb98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb94:	2300      	movs	r3, #0
 800eb96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800eba0:	e02c      	b.n	800ebfc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	2180      	movs	r1, #128	; 0x80
 800ebac:	68f8      	ldr	r0, [r7, #12]
 800ebae:	f001 fbce 	bl	801034e <UART_WaitOnFlagUntilTimeout>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e039      	b.n	800ec30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10b      	bne.n	800ebda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	881b      	ldrh	r3, [r3, #0]
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	3302      	adds	r3, #2
 800ebd6:	61bb      	str	r3, [r7, #24]
 800ebd8:	e007      	b.n	800ebea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	781a      	ldrb	r2, [r3, #0]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	3b01      	subs	r3, #1
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1cc      	bne.n	800eba2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	2140      	movs	r1, #64	; 0x40
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	f001 fb9b 	bl	801034e <UART_WaitOnFlagUntilTimeout>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d001      	beq.n	800ec22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	e006      	b.n	800ec30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2220      	movs	r2, #32
 800ec26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e000      	b.n	800ec30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ec2e:	2302      	movs	r3, #2
  }
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3720      	adds	r7, #32
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b08a      	sub	sp, #40	; 0x28
 800ec3c:	af02      	add	r7, sp, #8
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	4613      	mov	r3, r2
 800ec46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec4e:	2b20      	cmp	r3, #32
 800ec50:	f040 80c0 	bne.w	800edd4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <HAL_UART_Receive+0x28>
 800ec5a:	88fb      	ldrh	r3, [r7, #6]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	e0b8      	b.n	800edd6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d101      	bne.n	800ec72 <HAL_UART_Receive+0x3a>
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e0b1      	b.n	800edd6 <HAL_UART_Receive+0x19e>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2222      	movs	r2, #34	; 0x22
 800ec86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec90:	f7f7 ffe4 	bl	8006c5c <HAL_GetTick>
 800ec94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	88fa      	ldrh	r2, [r7, #6]
 800ec9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	88fa      	ldrh	r2, [r7, #6]
 800eca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	689b      	ldr	r3, [r3, #8]
 800ecaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecae:	d10e      	bne.n	800ecce <HAL_UART_Receive+0x96>
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d105      	bne.n	800ecc4 <HAL_UART_Receive+0x8c>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ecbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ecc2:	e02d      	b.n	800ed20 <HAL_UART_Receive+0xe8>
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	22ff      	movs	r2, #255	; 0xff
 800ecc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eccc:	e028      	b.n	800ed20 <HAL_UART_Receive+0xe8>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10d      	bne.n	800ecf2 <HAL_UART_Receive+0xba>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d104      	bne.n	800ece8 <HAL_UART_Receive+0xb0>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	22ff      	movs	r2, #255	; 0xff
 800ece2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ece6:	e01b      	b.n	800ed20 <HAL_UART_Receive+0xe8>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	227f      	movs	r2, #127	; 0x7f
 800ecec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ecf0:	e016      	b.n	800ed20 <HAL_UART_Receive+0xe8>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ecfa:	d10d      	bne.n	800ed18 <HAL_UART_Receive+0xe0>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d104      	bne.n	800ed0e <HAL_UART_Receive+0xd6>
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	227f      	movs	r2, #127	; 0x7f
 800ed08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed0c:	e008      	b.n	800ed20 <HAL_UART_Receive+0xe8>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	223f      	movs	r2, #63	; 0x3f
 800ed12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed16:	e003      	b.n	800ed20 <HAL_UART_Receive+0xe8>
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed30:	d108      	bne.n	800ed44 <HAL_UART_Receive+0x10c>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	e003      	b.n	800ed4c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ed54:	e032      	b.n	800edbc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2120      	movs	r1, #32
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f001 faf4 	bl	801034e <UART_WaitOnFlagUntilTimeout>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e032      	b.n	800edd6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10c      	bne.n	800ed90 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	8a7b      	ldrh	r3, [r7, #18]
 800ed80:	4013      	ands	r3, r2
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	3302      	adds	r3, #2
 800ed8c:	61bb      	str	r3, [r7, #24]
 800ed8e:	e00c      	b.n	800edaa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	8a7b      	ldrh	r3, [r7, #18]
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	3301      	adds	r3, #1
 800eda8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	3b01      	subs	r3, #1
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1c6      	bne.n	800ed56 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2220      	movs	r2, #32
 800edcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	e000      	b.n	800edd6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800edd4:	2302      	movs	r3, #2
  }
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3720      	adds	r7, #32
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b08a      	sub	sp, #40	; 0x28
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	4613      	mov	r3, r2
 800edec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edf4:	2b20      	cmp	r3, #32
 800edf6:	d17a      	bne.n	800eeee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <HAL_UART_Transmit_DMA+0x24>
 800edfe:	88fb      	ldrh	r3, [r7, #6]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e073      	b.n	800eef0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d101      	bne.n	800ee16 <HAL_UART_Transmit_DMA+0x36>
 800ee12:	2302      	movs	r3, #2
 800ee14:	e06c      	b.n	800eef0 <HAL_UART_Transmit_DMA+0x110>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	88fa      	ldrh	r2, [r7, #6]
 800ee28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	88fa      	ldrh	r2, [r7, #6]
 800ee30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2221      	movs	r2, #33	; 0x21
 800ee40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d02c      	beq.n	800eea6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee50:	4a29      	ldr	r2, [pc, #164]	; (800eef8 <HAL_UART_Transmit_DMA+0x118>)
 800ee52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee58:	4a28      	ldr	r2, [pc, #160]	; (800eefc <HAL_UART_Transmit_DMA+0x11c>)
 800ee5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee60:	4a27      	ldr	r2, [pc, #156]	; (800ef00 <HAL_UART_Transmit_DMA+0x120>)
 800ee62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee68:	2200      	movs	r2, #0
 800ee6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee74:	4619      	mov	r1, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3328      	adds	r3, #40	; 0x28
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	88fb      	ldrh	r3, [r7, #6]
 800ee80:	f7f8 fd9e 	bl	80079c0 <HAL_DMA_Start_IT>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00d      	beq.n	800eea6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2210      	movs	r2, #16
 800ee8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	e024      	b.n	800eef0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2240      	movs	r2, #64	; 0x40
 800eeac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3308      	adds	r3, #8
 800eebc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	e853 3f00 	ldrex	r3, [r3]
 800eec4:	613b      	str	r3, [r7, #16]
   return(result);
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eecc:	627b      	str	r3, [r7, #36]	; 0x24
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	3308      	adds	r3, #8
 800eed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed6:	623a      	str	r2, [r7, #32]
 800eed8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeda:	69f9      	ldr	r1, [r7, #28]
 800eedc:	6a3a      	ldr	r2, [r7, #32]
 800eede:	e841 2300 	strex	r3, r2, [r1]
 800eee2:	61bb      	str	r3, [r7, #24]
   return(result);
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1e5      	bne.n	800eeb6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800eeea:	2300      	movs	r3, #0
 800eeec:	e000      	b.n	800eef0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800eeee:	2302      	movs	r3, #2
  }
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3728      	adds	r7, #40	; 0x28
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	08010781 	.word	0x08010781
 800eefc:	08010817 	.word	0x08010817
 800ef00:	0801098d 	.word	0x0801098d

0800ef04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b0ba      	sub	sp, #232	; 0xe8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	69db      	ldr	r3, [r3, #28]
 800ef12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ef2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ef2e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ef32:	4013      	ands	r3, r2
 800ef34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ef38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d11b      	bne.n	800ef78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ef40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef44:	f003 0320 	and.w	r3, r3, #32
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d015      	beq.n	800ef78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef50:	f003 0320 	and.w	r3, r3, #32
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d105      	bne.n	800ef64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d009      	beq.n	800ef78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f000 835a 	beq.w	800f622 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	4798      	blx	r3
      }
      return;
 800ef76:	e354      	b.n	800f622 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ef78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	f000 811f 	beq.w	800f1c0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ef82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef86:	4b8b      	ldr	r3, [pc, #556]	; (800f1b4 <HAL_UART_IRQHandler+0x2b0>)
 800ef88:	4013      	ands	r3, r2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d106      	bne.n	800ef9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ef8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ef92:	4b89      	ldr	r3, [pc, #548]	; (800f1b8 <HAL_UART_IRQHandler+0x2b4>)
 800ef94:	4013      	ands	r3, r2
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 8112 	beq.w	800f1c0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efa0:	f003 0301 	and.w	r3, r3, #1
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d011      	beq.n	800efcc <HAL_UART_IRQHandler+0xc8>
 800efa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00b      	beq.n	800efcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2201      	movs	r2, #1
 800efba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efc2:	f043 0201 	orr.w	r2, r3, #1
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efd0:	f003 0302 	and.w	r3, r3, #2
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d011      	beq.n	800effc <HAL_UART_IRQHandler+0xf8>
 800efd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800efdc:	f003 0301 	and.w	r3, r3, #1
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00b      	beq.n	800effc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2202      	movs	r2, #2
 800efea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eff2:	f043 0204 	orr.w	r2, r3, #4
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800effc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f000:	f003 0304 	and.w	r3, r3, #4
 800f004:	2b00      	cmp	r3, #0
 800f006:	d011      	beq.n	800f02c <HAL_UART_IRQHandler+0x128>
 800f008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f00c:	f003 0301 	and.w	r3, r3, #1
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00b      	beq.n	800f02c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	2204      	movs	r2, #4
 800f01a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f022:	f043 0202 	orr.w	r2, r3, #2
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f030:	f003 0308 	and.w	r3, r3, #8
 800f034:	2b00      	cmp	r3, #0
 800f036:	d017      	beq.n	800f068 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f03c:	f003 0320 	and.w	r3, r3, #32
 800f040:	2b00      	cmp	r3, #0
 800f042:	d105      	bne.n	800f050 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f044:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f048:	4b5a      	ldr	r3, [pc, #360]	; (800f1b4 <HAL_UART_IRQHandler+0x2b0>)
 800f04a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00b      	beq.n	800f068 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2208      	movs	r2, #8
 800f056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f05e:	f043 0208 	orr.w	r2, r3, #8
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f06c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f070:	2b00      	cmp	r3, #0
 800f072:	d012      	beq.n	800f09a <HAL_UART_IRQHandler+0x196>
 800f074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00c      	beq.n	800f09a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f090:	f043 0220 	orr.w	r2, r3, #32
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 82c0 	beq.w	800f626 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0aa:	f003 0320 	and.w	r3, r3, #32
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d013      	beq.n	800f0da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f0b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0b6:	f003 0320 	and.w	r3, r3, #32
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d105      	bne.n	800f0ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d007      	beq.n	800f0da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d003      	beq.n	800f0da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ee:	2b40      	cmp	r3, #64	; 0x40
 800f0f0:	d005      	beq.n	800f0fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f0f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f0f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d04f      	beq.n	800f19e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f001 fad8 	bl	80106b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f10e:	2b40      	cmp	r3, #64	; 0x40
 800f110:	d141      	bne.n	800f196 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	3308      	adds	r3, #8
 800f118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f11c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f120:	e853 3f00 	ldrex	r3, [r3]
 800f124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	3308      	adds	r3, #8
 800f13a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f13e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f14a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f14e:	e841 2300 	strex	r3, r2, [r1]
 800f152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1d9      	bne.n	800f112 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f162:	2b00      	cmp	r3, #0
 800f164:	d013      	beq.n	800f18e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f16a:	4a14      	ldr	r2, [pc, #80]	; (800f1bc <HAL_UART_IRQHandler+0x2b8>)
 800f16c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f172:	4618      	mov	r0, r3
 800f174:	f7f9 f9ac 	bl	80084d0 <HAL_DMA_Abort_IT>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d017      	beq.n	800f1ae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f188:	4610      	mov	r0, r2
 800f18a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f18c:	e00f      	b.n	800f1ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fa7e 	bl	800f690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f194:	e00b      	b.n	800f1ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fa7a 	bl	800f690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f19c:	e007      	b.n	800f1ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fa76 	bl	800f690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f1ac:	e23b      	b.n	800f626 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1ae:	bf00      	nop
    return;
 800f1b0:	e239      	b.n	800f626 <HAL_UART_IRQHandler+0x722>
 800f1b2:	bf00      	nop
 800f1b4:	10000001 	.word	0x10000001
 800f1b8:	04000120 	.word	0x04000120
 800f1bc:	08010a0d 	.word	0x08010a0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	f040 81ce 	bne.w	800f566 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1ce:	f003 0310 	and.w	r3, r3, #16
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f000 81c7 	beq.w	800f566 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1dc:	f003 0310 	and.w	r3, r3, #16
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 81c0 	beq.w	800f566 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2210      	movs	r2, #16
 800f1ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1f8:	2b40      	cmp	r3, #64	; 0x40
 800f1fa:	f040 813b 	bne.w	800f474 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a8b      	ldr	r2, [pc, #556]	; (800f434 <HAL_UART_IRQHandler+0x530>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d059      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a89      	ldr	r2, [pc, #548]	; (800f438 <HAL_UART_IRQHandler+0x534>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d053      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a87      	ldr	r2, [pc, #540]	; (800f43c <HAL_UART_IRQHandler+0x538>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d04d      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a85      	ldr	r2, [pc, #532]	; (800f440 <HAL_UART_IRQHandler+0x53c>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d047      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a83      	ldr	r2, [pc, #524]	; (800f444 <HAL_UART_IRQHandler+0x540>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d041      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a81      	ldr	r2, [pc, #516]	; (800f448 <HAL_UART_IRQHandler+0x544>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d03b      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a7f      	ldr	r2, [pc, #508]	; (800f44c <HAL_UART_IRQHandler+0x548>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d035      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a7d      	ldr	r2, [pc, #500]	; (800f450 <HAL_UART_IRQHandler+0x54c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d02f      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a7b      	ldr	r2, [pc, #492]	; (800f454 <HAL_UART_IRQHandler+0x550>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d029      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a79      	ldr	r2, [pc, #484]	; (800f458 <HAL_UART_IRQHandler+0x554>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d023      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a77      	ldr	r2, [pc, #476]	; (800f45c <HAL_UART_IRQHandler+0x558>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d01d      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a75      	ldr	r2, [pc, #468]	; (800f460 <HAL_UART_IRQHandler+0x55c>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d017      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a73      	ldr	r2, [pc, #460]	; (800f464 <HAL_UART_IRQHandler+0x560>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d011      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a71      	ldr	r2, [pc, #452]	; (800f468 <HAL_UART_IRQHandler+0x564>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d00b      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a6f      	ldr	r2, [pc, #444]	; (800f46c <HAL_UART_IRQHandler+0x568>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d005      	beq.n	800f2be <HAL_UART_IRQHandler+0x3ba>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	4a6d      	ldr	r2, [pc, #436]	; (800f470 <HAL_UART_IRQHandler+0x56c>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d105      	bne.n	800f2ca <HAL_UART_IRQHandler+0x3c6>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	e004      	b.n	800f2d4 <HAL_UART_IRQHandler+0x3d0>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f2d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 81a4 	beq.w	800f62a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	f080 819c 	bcs.w	800f62a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f2f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f306:	f000 8086 	beq.w	800f416 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f316:	e853 3f00 	ldrex	r3, [r3]
 800f31a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f31e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f338:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f33c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f340:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f344:	e841 2300 	strex	r3, r2, [r1]
 800f348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f34c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1da      	bne.n	800f30a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3308      	adds	r3, #8
 800f35a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f35c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f35e:	e853 3f00 	ldrex	r3, [r3]
 800f362:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f366:	f023 0301 	bic.w	r3, r3, #1
 800f36a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3308      	adds	r3, #8
 800f374:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f378:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f37c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f380:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f384:	e841 2300 	strex	r3, r2, [r1]
 800f388:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f38a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1e1      	bne.n	800f354 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	3308      	adds	r3, #8
 800f396:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f39a:	e853 3f00 	ldrex	r3, [r3]
 800f39e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f3a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3308      	adds	r3, #8
 800f3b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f3b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f3b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f3ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f3bc:	e841 2300 	strex	r3, r2, [r1]
 800f3c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1e3      	bne.n	800f390 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3de:	e853 3f00 	ldrex	r3, [r3]
 800f3e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3e6:	f023 0310 	bic.w	r3, r3, #16
 800f3ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f3f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f400:	e841 2300 	strex	r3, r2, [r1]
 800f404:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d1e4      	bne.n	800f3d6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f410:	4618      	mov	r0, r3
 800f412:	f7f8 fd3f 	bl	8007e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f422:	b29b      	uxth	r3, r3
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	b29b      	uxth	r3, r3
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7f3 feb6 	bl	800319c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f430:	e0fb      	b.n	800f62a <HAL_UART_IRQHandler+0x726>
 800f432:	bf00      	nop
 800f434:	40020010 	.word	0x40020010
 800f438:	40020028 	.word	0x40020028
 800f43c:	40020040 	.word	0x40020040
 800f440:	40020058 	.word	0x40020058
 800f444:	40020070 	.word	0x40020070
 800f448:	40020088 	.word	0x40020088
 800f44c:	400200a0 	.word	0x400200a0
 800f450:	400200b8 	.word	0x400200b8
 800f454:	40020410 	.word	0x40020410
 800f458:	40020428 	.word	0x40020428
 800f45c:	40020440 	.word	0x40020440
 800f460:	40020458 	.word	0x40020458
 800f464:	40020470 	.word	0x40020470
 800f468:	40020488 	.word	0x40020488
 800f46c:	400204a0 	.word	0x400204a0
 800f470:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f480:	b29b      	uxth	r3, r3
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f48e:	b29b      	uxth	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 80cc 	beq.w	800f62e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	f000 80c7 	beq.w	800f62e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a8:	e853 3f00 	ldrex	r3, [r3]
 800f4ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f4b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	461a      	mov	r2, r3
 800f4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f4c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4ca:	e841 2300 	strex	r3, r2, [r1]
 800f4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1e4      	bne.n	800f4a0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	3308      	adds	r3, #8
 800f4dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e0:	e853 3f00 	ldrex	r3, [r3]
 800f4e4:	623b      	str	r3, [r7, #32]
   return(result);
 800f4e6:	6a3a      	ldr	r2, [r7, #32]
 800f4e8:	4b54      	ldr	r3, [pc, #336]	; (800f63c <HAL_UART_IRQHandler+0x738>)
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f4fa:	633a      	str	r2, [r7, #48]	; 0x30
 800f4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f502:	e841 2300 	strex	r3, r2, [r1]
 800f506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1e3      	bne.n	800f4d6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2220      	movs	r2, #32
 800f512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	e853 3f00 	ldrex	r3, [r3]
 800f52e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f023 0310 	bic.w	r3, r3, #16
 800f536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	461a      	mov	r2, r3
 800f540:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f544:	61fb      	str	r3, [r7, #28]
 800f546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f548:	69b9      	ldr	r1, [r7, #24]
 800f54a:	69fa      	ldr	r2, [r7, #28]
 800f54c:	e841 2300 	strex	r3, r2, [r1]
 800f550:	617b      	str	r3, [r7, #20]
   return(result);
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e4      	bne.n	800f522 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f55c:	4619      	mov	r1, r3
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7f3 fe1c 	bl	800319c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f564:	e063      	b.n	800f62e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00e      	beq.n	800f590 <HAL_UART_IRQHandler+0x68c>
 800f572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d008      	beq.n	800f590 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f001 fa80 	bl	8010a8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f58e:	e051      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d014      	beq.n	800f5c6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d105      	bne.n	800f5b4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f5a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d008      	beq.n	800f5c6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d03a      	beq.n	800f632 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	4798      	blx	r3
    }
    return;
 800f5c4:	e035      	b.n	800f632 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d009      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x6e2>
 800f5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d003      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f001 fa2a 	bl	8010a38 <UART_EndTransmit_IT>
    return;
 800f5e4:	e026      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d009      	beq.n	800f606 <HAL_UART_IRQHandler+0x702>
 800f5f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d003      	beq.n	800f606 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f001 fa59 	bl	8010ab6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f604:	e016      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f60a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d010      	beq.n	800f634 <HAL_UART_IRQHandler+0x730>
 800f612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f616:	2b00      	cmp	r3, #0
 800f618:	da0c      	bge.n	800f634 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f001 fa41 	bl	8010aa2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f620:	e008      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
      return;
 800f622:	bf00      	nop
 800f624:	e006      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
    return;
 800f626:	bf00      	nop
 800f628:	e004      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
      return;
 800f62a:	bf00      	nop
 800f62c:	e002      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
      return;
 800f62e:	bf00      	nop
 800f630:	e000      	b.n	800f634 <HAL_UART_IRQHandler+0x730>
    return;
 800f632:	bf00      	nop
  }
}
 800f634:	37e8      	adds	r7, #232	; 0xe8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	effffffe 	.word	0xeffffffe

0800f640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f648:	bf00      	nop
 800f64a:	370c      	adds	r7, #12
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f670:	bf00      	nop
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f684:	bf00      	nop
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr

0800f690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6a8:	b092      	sub	sp, #72	; 0x48
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	689a      	ldr	r2, [r3, #8]
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	431a      	orrs	r2, r3
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	695b      	ldr	r3, [r3, #20]
 800f6c2:	431a      	orrs	r2, r3
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	69db      	ldr	r3, [r3, #28]
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	4bbe      	ldr	r3, [pc, #760]	; (800f9cc <UART_SetConfig+0x328>)
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	697a      	ldr	r2, [r7, #20]
 800f6d8:	6812      	ldr	r2, [r2, #0]
 800f6da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6dc:	430b      	orrs	r3, r1
 800f6de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	68da      	ldr	r2, [r3, #12]
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	430a      	orrs	r2, r1
 800f6f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4ab3      	ldr	r2, [pc, #716]	; (800f9d0 <UART_SetConfig+0x32c>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d004      	beq.n	800f710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f70c:	4313      	orrs	r3, r2
 800f70e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	689a      	ldr	r2, [r3, #8]
 800f716:	4baf      	ldr	r3, [pc, #700]	; (800f9d4 <UART_SetConfig+0x330>)
 800f718:	4013      	ands	r3, r2
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	6812      	ldr	r2, [r2, #0]
 800f71e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f720:	430b      	orrs	r3, r1
 800f722:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72a:	f023 010f 	bic.w	r1, r3, #15
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	430a      	orrs	r2, r1
 800f738:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4aa6      	ldr	r2, [pc, #664]	; (800f9d8 <UART_SetConfig+0x334>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d177      	bne.n	800f834 <UART_SetConfig+0x190>
 800f744:	4ba5      	ldr	r3, [pc, #660]	; (800f9dc <UART_SetConfig+0x338>)
 800f746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f74c:	2b28      	cmp	r3, #40	; 0x28
 800f74e:	d86d      	bhi.n	800f82c <UART_SetConfig+0x188>
 800f750:	a201      	add	r2, pc, #4	; (adr r2, 800f758 <UART_SetConfig+0xb4>)
 800f752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f756:	bf00      	nop
 800f758:	0800f7fd 	.word	0x0800f7fd
 800f75c:	0800f82d 	.word	0x0800f82d
 800f760:	0800f82d 	.word	0x0800f82d
 800f764:	0800f82d 	.word	0x0800f82d
 800f768:	0800f82d 	.word	0x0800f82d
 800f76c:	0800f82d 	.word	0x0800f82d
 800f770:	0800f82d 	.word	0x0800f82d
 800f774:	0800f82d 	.word	0x0800f82d
 800f778:	0800f805 	.word	0x0800f805
 800f77c:	0800f82d 	.word	0x0800f82d
 800f780:	0800f82d 	.word	0x0800f82d
 800f784:	0800f82d 	.word	0x0800f82d
 800f788:	0800f82d 	.word	0x0800f82d
 800f78c:	0800f82d 	.word	0x0800f82d
 800f790:	0800f82d 	.word	0x0800f82d
 800f794:	0800f82d 	.word	0x0800f82d
 800f798:	0800f80d 	.word	0x0800f80d
 800f79c:	0800f82d 	.word	0x0800f82d
 800f7a0:	0800f82d 	.word	0x0800f82d
 800f7a4:	0800f82d 	.word	0x0800f82d
 800f7a8:	0800f82d 	.word	0x0800f82d
 800f7ac:	0800f82d 	.word	0x0800f82d
 800f7b0:	0800f82d 	.word	0x0800f82d
 800f7b4:	0800f82d 	.word	0x0800f82d
 800f7b8:	0800f815 	.word	0x0800f815
 800f7bc:	0800f82d 	.word	0x0800f82d
 800f7c0:	0800f82d 	.word	0x0800f82d
 800f7c4:	0800f82d 	.word	0x0800f82d
 800f7c8:	0800f82d 	.word	0x0800f82d
 800f7cc:	0800f82d 	.word	0x0800f82d
 800f7d0:	0800f82d 	.word	0x0800f82d
 800f7d4:	0800f82d 	.word	0x0800f82d
 800f7d8:	0800f81d 	.word	0x0800f81d
 800f7dc:	0800f82d 	.word	0x0800f82d
 800f7e0:	0800f82d 	.word	0x0800f82d
 800f7e4:	0800f82d 	.word	0x0800f82d
 800f7e8:	0800f82d 	.word	0x0800f82d
 800f7ec:	0800f82d 	.word	0x0800f82d
 800f7f0:	0800f82d 	.word	0x0800f82d
 800f7f4:	0800f82d 	.word	0x0800f82d
 800f7f8:	0800f825 	.word	0x0800f825
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e222      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f804:	2304      	movs	r3, #4
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e21e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f80c:	2308      	movs	r3, #8
 800f80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f812:	e21a      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f814:	2310      	movs	r3, #16
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81a:	e216      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f81c:	2320      	movs	r3, #32
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f822:	e212      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f824:	2340      	movs	r3, #64	; 0x40
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82a:	e20e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f82c:	2380      	movs	r3, #128	; 0x80
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f832:	e20a      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a69      	ldr	r2, [pc, #420]	; (800f9e0 <UART_SetConfig+0x33c>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d130      	bne.n	800f8a0 <UART_SetConfig+0x1fc>
 800f83e:	4b67      	ldr	r3, [pc, #412]	; (800f9dc <UART_SetConfig+0x338>)
 800f840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	2b05      	cmp	r3, #5
 800f848:	d826      	bhi.n	800f898 <UART_SetConfig+0x1f4>
 800f84a:	a201      	add	r2, pc, #4	; (adr r2, 800f850 <UART_SetConfig+0x1ac>)
 800f84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f850:	0800f869 	.word	0x0800f869
 800f854:	0800f871 	.word	0x0800f871
 800f858:	0800f879 	.word	0x0800f879
 800f85c:	0800f881 	.word	0x0800f881
 800f860:	0800f889 	.word	0x0800f889
 800f864:	0800f891 	.word	0x0800f891
 800f868:	2300      	movs	r3, #0
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e1ec      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f870:	2304      	movs	r3, #4
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e1e8      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f878:	2308      	movs	r3, #8
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87e:	e1e4      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f880:	2310      	movs	r3, #16
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f886:	e1e0      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f888:	2320      	movs	r3, #32
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88e:	e1dc      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f890:	2340      	movs	r3, #64	; 0x40
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f896:	e1d8      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f898:	2380      	movs	r3, #128	; 0x80
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89e:	e1d4      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a4f      	ldr	r2, [pc, #316]	; (800f9e4 <UART_SetConfig+0x340>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d130      	bne.n	800f90c <UART_SetConfig+0x268>
 800f8aa:	4b4c      	ldr	r3, [pc, #304]	; (800f9dc <UART_SetConfig+0x338>)
 800f8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ae:	f003 0307 	and.w	r3, r3, #7
 800f8b2:	2b05      	cmp	r3, #5
 800f8b4:	d826      	bhi.n	800f904 <UART_SetConfig+0x260>
 800f8b6:	a201      	add	r2, pc, #4	; (adr r2, 800f8bc <UART_SetConfig+0x218>)
 800f8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8bc:	0800f8d5 	.word	0x0800f8d5
 800f8c0:	0800f8dd 	.word	0x0800f8dd
 800f8c4:	0800f8e5 	.word	0x0800f8e5
 800f8c8:	0800f8ed 	.word	0x0800f8ed
 800f8cc:	0800f8f5 	.word	0x0800f8f5
 800f8d0:	0800f8fd 	.word	0x0800f8fd
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e1b6      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f8dc:	2304      	movs	r3, #4
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e2:	e1b2      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f8e4:	2308      	movs	r3, #8
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ea:	e1ae      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f2:	e1aa      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f8f4:	2320      	movs	r3, #32
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fa:	e1a6      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f8fc:	2340      	movs	r3, #64	; 0x40
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f902:	e1a2      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f904:	2380      	movs	r3, #128	; 0x80
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e19e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a35      	ldr	r2, [pc, #212]	; (800f9e8 <UART_SetConfig+0x344>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d130      	bne.n	800f978 <UART_SetConfig+0x2d4>
 800f916:	4b31      	ldr	r3, [pc, #196]	; (800f9dc <UART_SetConfig+0x338>)
 800f918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f91a:	f003 0307 	and.w	r3, r3, #7
 800f91e:	2b05      	cmp	r3, #5
 800f920:	d826      	bhi.n	800f970 <UART_SetConfig+0x2cc>
 800f922:	a201      	add	r2, pc, #4	; (adr r2, 800f928 <UART_SetConfig+0x284>)
 800f924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f928:	0800f941 	.word	0x0800f941
 800f92c:	0800f949 	.word	0x0800f949
 800f930:	0800f951 	.word	0x0800f951
 800f934:	0800f959 	.word	0x0800f959
 800f938:	0800f961 	.word	0x0800f961
 800f93c:	0800f969 	.word	0x0800f969
 800f940:	2300      	movs	r3, #0
 800f942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f946:	e180      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f948:	2304      	movs	r3, #4
 800f94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94e:	e17c      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f950:	2308      	movs	r3, #8
 800f952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f956:	e178      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f958:	2310      	movs	r3, #16
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95e:	e174      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f960:	2320      	movs	r3, #32
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f966:	e170      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f968:	2340      	movs	r3, #64	; 0x40
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96e:	e16c      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f970:	2380      	movs	r3, #128	; 0x80
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f976:	e168      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a1b      	ldr	r2, [pc, #108]	; (800f9ec <UART_SetConfig+0x348>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d142      	bne.n	800fa08 <UART_SetConfig+0x364>
 800f982:	4b16      	ldr	r3, [pc, #88]	; (800f9dc <UART_SetConfig+0x338>)
 800f984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f986:	f003 0307 	and.w	r3, r3, #7
 800f98a:	2b05      	cmp	r3, #5
 800f98c:	d838      	bhi.n	800fa00 <UART_SetConfig+0x35c>
 800f98e:	a201      	add	r2, pc, #4	; (adr r2, 800f994 <UART_SetConfig+0x2f0>)
 800f990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f994:	0800f9ad 	.word	0x0800f9ad
 800f998:	0800f9b5 	.word	0x0800f9b5
 800f99c:	0800f9bd 	.word	0x0800f9bd
 800f9a0:	0800f9c5 	.word	0x0800f9c5
 800f9a4:	0800f9f1 	.word	0x0800f9f1
 800f9a8:	0800f9f9 	.word	0x0800f9f9
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9b2:	e14a      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f9b4:	2304      	movs	r3, #4
 800f9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ba:	e146      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f9bc:	2308      	movs	r3, #8
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c2:	e142      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f9c4:	2310      	movs	r3, #16
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ca:	e13e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f9cc:	cfff69f3 	.word	0xcfff69f3
 800f9d0:	58000c00 	.word	0x58000c00
 800f9d4:	11fff4ff 	.word	0x11fff4ff
 800f9d8:	40011000 	.word	0x40011000
 800f9dc:	58024400 	.word	0x58024400
 800f9e0:	40004400 	.word	0x40004400
 800f9e4:	40004800 	.word	0x40004800
 800f9e8:	40004c00 	.word	0x40004c00
 800f9ec:	40005000 	.word	0x40005000
 800f9f0:	2320      	movs	r3, #32
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f6:	e128      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800f9f8:	2340      	movs	r3, #64	; 0x40
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fe:	e124      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fa00:	2380      	movs	r3, #128	; 0x80
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa06:	e120      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4acb      	ldr	r2, [pc, #812]	; (800fd3c <UART_SetConfig+0x698>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d176      	bne.n	800fb00 <UART_SetConfig+0x45c>
 800fa12:	4bcb      	ldr	r3, [pc, #812]	; (800fd40 <UART_SetConfig+0x69c>)
 800fa14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa1a:	2b28      	cmp	r3, #40	; 0x28
 800fa1c:	d86c      	bhi.n	800faf8 <UART_SetConfig+0x454>
 800fa1e:	a201      	add	r2, pc, #4	; (adr r2, 800fa24 <UART_SetConfig+0x380>)
 800fa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa24:	0800fac9 	.word	0x0800fac9
 800fa28:	0800faf9 	.word	0x0800faf9
 800fa2c:	0800faf9 	.word	0x0800faf9
 800fa30:	0800faf9 	.word	0x0800faf9
 800fa34:	0800faf9 	.word	0x0800faf9
 800fa38:	0800faf9 	.word	0x0800faf9
 800fa3c:	0800faf9 	.word	0x0800faf9
 800fa40:	0800faf9 	.word	0x0800faf9
 800fa44:	0800fad1 	.word	0x0800fad1
 800fa48:	0800faf9 	.word	0x0800faf9
 800fa4c:	0800faf9 	.word	0x0800faf9
 800fa50:	0800faf9 	.word	0x0800faf9
 800fa54:	0800faf9 	.word	0x0800faf9
 800fa58:	0800faf9 	.word	0x0800faf9
 800fa5c:	0800faf9 	.word	0x0800faf9
 800fa60:	0800faf9 	.word	0x0800faf9
 800fa64:	0800fad9 	.word	0x0800fad9
 800fa68:	0800faf9 	.word	0x0800faf9
 800fa6c:	0800faf9 	.word	0x0800faf9
 800fa70:	0800faf9 	.word	0x0800faf9
 800fa74:	0800faf9 	.word	0x0800faf9
 800fa78:	0800faf9 	.word	0x0800faf9
 800fa7c:	0800faf9 	.word	0x0800faf9
 800fa80:	0800faf9 	.word	0x0800faf9
 800fa84:	0800fae1 	.word	0x0800fae1
 800fa88:	0800faf9 	.word	0x0800faf9
 800fa8c:	0800faf9 	.word	0x0800faf9
 800fa90:	0800faf9 	.word	0x0800faf9
 800fa94:	0800faf9 	.word	0x0800faf9
 800fa98:	0800faf9 	.word	0x0800faf9
 800fa9c:	0800faf9 	.word	0x0800faf9
 800faa0:	0800faf9 	.word	0x0800faf9
 800faa4:	0800fae9 	.word	0x0800fae9
 800faa8:	0800faf9 	.word	0x0800faf9
 800faac:	0800faf9 	.word	0x0800faf9
 800fab0:	0800faf9 	.word	0x0800faf9
 800fab4:	0800faf9 	.word	0x0800faf9
 800fab8:	0800faf9 	.word	0x0800faf9
 800fabc:	0800faf9 	.word	0x0800faf9
 800fac0:	0800faf9 	.word	0x0800faf9
 800fac4:	0800faf1 	.word	0x0800faf1
 800fac8:	2301      	movs	r3, #1
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800face:	e0bc      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fad0:	2304      	movs	r3, #4
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad6:	e0b8      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fad8:	2308      	movs	r3, #8
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fade:	e0b4      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fae0:	2310      	movs	r3, #16
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae6:	e0b0      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fae8:	2320      	movs	r3, #32
 800faea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faee:	e0ac      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800faf0:	2340      	movs	r3, #64	; 0x40
 800faf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf6:	e0a8      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800faf8:	2380      	movs	r3, #128	; 0x80
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafe:	e0a4      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a8f      	ldr	r2, [pc, #572]	; (800fd44 <UART_SetConfig+0x6a0>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d130      	bne.n	800fb6c <UART_SetConfig+0x4c8>
 800fb0a:	4b8d      	ldr	r3, [pc, #564]	; (800fd40 <UART_SetConfig+0x69c>)
 800fb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb0e:	f003 0307 	and.w	r3, r3, #7
 800fb12:	2b05      	cmp	r3, #5
 800fb14:	d826      	bhi.n	800fb64 <UART_SetConfig+0x4c0>
 800fb16:	a201      	add	r2, pc, #4	; (adr r2, 800fb1c <UART_SetConfig+0x478>)
 800fb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1c:	0800fb35 	.word	0x0800fb35
 800fb20:	0800fb3d 	.word	0x0800fb3d
 800fb24:	0800fb45 	.word	0x0800fb45
 800fb28:	0800fb4d 	.word	0x0800fb4d
 800fb2c:	0800fb55 	.word	0x0800fb55
 800fb30:	0800fb5d 	.word	0x0800fb5d
 800fb34:	2300      	movs	r3, #0
 800fb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb3a:	e086      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb3c:	2304      	movs	r3, #4
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb42:	e082      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb44:	2308      	movs	r3, #8
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4a:	e07e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb4c:	2310      	movs	r3, #16
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb52:	e07a      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb54:	2320      	movs	r3, #32
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5a:	e076      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb5c:	2340      	movs	r3, #64	; 0x40
 800fb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb62:	e072      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb64:	2380      	movs	r3, #128	; 0x80
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb6a:	e06e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a75      	ldr	r2, [pc, #468]	; (800fd48 <UART_SetConfig+0x6a4>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d130      	bne.n	800fbd8 <UART_SetConfig+0x534>
 800fb76:	4b72      	ldr	r3, [pc, #456]	; (800fd40 <UART_SetConfig+0x69c>)
 800fb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb7a:	f003 0307 	and.w	r3, r3, #7
 800fb7e:	2b05      	cmp	r3, #5
 800fb80:	d826      	bhi.n	800fbd0 <UART_SetConfig+0x52c>
 800fb82:	a201      	add	r2, pc, #4	; (adr r2, 800fb88 <UART_SetConfig+0x4e4>)
 800fb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb88:	0800fba1 	.word	0x0800fba1
 800fb8c:	0800fba9 	.word	0x0800fba9
 800fb90:	0800fbb1 	.word	0x0800fbb1
 800fb94:	0800fbb9 	.word	0x0800fbb9
 800fb98:	0800fbc1 	.word	0x0800fbc1
 800fb9c:	0800fbc9 	.word	0x0800fbc9
 800fba0:	2300      	movs	r3, #0
 800fba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fba6:	e050      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fba8:	2304      	movs	r3, #4
 800fbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbae:	e04c      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb6:	e048      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fbb8:	2310      	movs	r3, #16
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbbe:	e044      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fbc0:	2320      	movs	r3, #32
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc6:	e040      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fbc8:	2340      	movs	r3, #64	; 0x40
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbce:	e03c      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fbd0:	2380      	movs	r3, #128	; 0x80
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbd6:	e038      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a5b      	ldr	r2, [pc, #364]	; (800fd4c <UART_SetConfig+0x6a8>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d130      	bne.n	800fc44 <UART_SetConfig+0x5a0>
 800fbe2:	4b57      	ldr	r3, [pc, #348]	; (800fd40 <UART_SetConfig+0x69c>)
 800fbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbe6:	f003 0307 	and.w	r3, r3, #7
 800fbea:	2b05      	cmp	r3, #5
 800fbec:	d826      	bhi.n	800fc3c <UART_SetConfig+0x598>
 800fbee:	a201      	add	r2, pc, #4	; (adr r2, 800fbf4 <UART_SetConfig+0x550>)
 800fbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf4:	0800fc0d 	.word	0x0800fc0d
 800fbf8:	0800fc15 	.word	0x0800fc15
 800fbfc:	0800fc1d 	.word	0x0800fc1d
 800fc00:	0800fc25 	.word	0x0800fc25
 800fc04:	0800fc2d 	.word	0x0800fc2d
 800fc08:	0800fc35 	.word	0x0800fc35
 800fc0c:	2302      	movs	r3, #2
 800fc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc12:	e01a      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc14:	2304      	movs	r3, #4
 800fc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc1a:	e016      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc1c:	2308      	movs	r3, #8
 800fc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc22:	e012      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc24:	2310      	movs	r3, #16
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc2a:	e00e      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc2c:	2320      	movs	r3, #32
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc32:	e00a      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc34:	2340      	movs	r3, #64	; 0x40
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc3a:	e006      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc3c:	2380      	movs	r3, #128	; 0x80
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc42:	e002      	b.n	800fc4a <UART_SetConfig+0x5a6>
 800fc44:	2380      	movs	r3, #128	; 0x80
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a3f      	ldr	r2, [pc, #252]	; (800fd4c <UART_SetConfig+0x6a8>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	f040 80f8 	bne.w	800fe46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc5a:	2b20      	cmp	r3, #32
 800fc5c:	dc46      	bgt.n	800fcec <UART_SetConfig+0x648>
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	f2c0 8082 	blt.w	800fd68 <UART_SetConfig+0x6c4>
 800fc64:	3b02      	subs	r3, #2
 800fc66:	2b1e      	cmp	r3, #30
 800fc68:	d87e      	bhi.n	800fd68 <UART_SetConfig+0x6c4>
 800fc6a:	a201      	add	r2, pc, #4	; (adr r2, 800fc70 <UART_SetConfig+0x5cc>)
 800fc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc70:	0800fcf3 	.word	0x0800fcf3
 800fc74:	0800fd69 	.word	0x0800fd69
 800fc78:	0800fcfb 	.word	0x0800fcfb
 800fc7c:	0800fd69 	.word	0x0800fd69
 800fc80:	0800fd69 	.word	0x0800fd69
 800fc84:	0800fd69 	.word	0x0800fd69
 800fc88:	0800fd0b 	.word	0x0800fd0b
 800fc8c:	0800fd69 	.word	0x0800fd69
 800fc90:	0800fd69 	.word	0x0800fd69
 800fc94:	0800fd69 	.word	0x0800fd69
 800fc98:	0800fd69 	.word	0x0800fd69
 800fc9c:	0800fd69 	.word	0x0800fd69
 800fca0:	0800fd69 	.word	0x0800fd69
 800fca4:	0800fd69 	.word	0x0800fd69
 800fca8:	0800fd1b 	.word	0x0800fd1b
 800fcac:	0800fd69 	.word	0x0800fd69
 800fcb0:	0800fd69 	.word	0x0800fd69
 800fcb4:	0800fd69 	.word	0x0800fd69
 800fcb8:	0800fd69 	.word	0x0800fd69
 800fcbc:	0800fd69 	.word	0x0800fd69
 800fcc0:	0800fd69 	.word	0x0800fd69
 800fcc4:	0800fd69 	.word	0x0800fd69
 800fcc8:	0800fd69 	.word	0x0800fd69
 800fccc:	0800fd69 	.word	0x0800fd69
 800fcd0:	0800fd69 	.word	0x0800fd69
 800fcd4:	0800fd69 	.word	0x0800fd69
 800fcd8:	0800fd69 	.word	0x0800fd69
 800fcdc:	0800fd69 	.word	0x0800fd69
 800fce0:	0800fd69 	.word	0x0800fd69
 800fce4:	0800fd69 	.word	0x0800fd69
 800fce8:	0800fd5b 	.word	0x0800fd5b
 800fcec:	2b40      	cmp	r3, #64	; 0x40
 800fcee:	d037      	beq.n	800fd60 <UART_SetConfig+0x6bc>
 800fcf0:	e03a      	b.n	800fd68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fcf2:	f7fc fa63 	bl	800c1bc <HAL_RCCEx_GetD3PCLK1Freq>
 800fcf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcf8:	e03c      	b.n	800fd74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fc fa72 	bl	800c1e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd08:	e034      	b.n	800fd74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd0a:	f107 0318 	add.w	r3, r7, #24
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fc fbbe 	bl	800c490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd18:	e02c      	b.n	800fd74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd1a:	4b09      	ldr	r3, [pc, #36]	; (800fd40 <UART_SetConfig+0x69c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f003 0320 	and.w	r3, r3, #32
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d016      	beq.n	800fd54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd26:	4b06      	ldr	r3, [pc, #24]	; (800fd40 <UART_SetConfig+0x69c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	08db      	lsrs	r3, r3, #3
 800fd2c:	f003 0303 	and.w	r3, r3, #3
 800fd30:	4a07      	ldr	r2, [pc, #28]	; (800fd50 <UART_SetConfig+0x6ac>)
 800fd32:	fa22 f303 	lsr.w	r3, r2, r3
 800fd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd38:	e01c      	b.n	800fd74 <UART_SetConfig+0x6d0>
 800fd3a:	bf00      	nop
 800fd3c:	40011400 	.word	0x40011400
 800fd40:	58024400 	.word	0x58024400
 800fd44:	40007800 	.word	0x40007800
 800fd48:	40007c00 	.word	0x40007c00
 800fd4c:	58000c00 	.word	0x58000c00
 800fd50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fd54:	4b9d      	ldr	r3, [pc, #628]	; (800ffcc <UART_SetConfig+0x928>)
 800fd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd58:	e00c      	b.n	800fd74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd5a:	4b9d      	ldr	r3, [pc, #628]	; (800ffd0 <UART_SetConfig+0x92c>)
 800fd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd5e:	e009      	b.n	800fd74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd66:	e005      	b.n	800fd74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f000 81de 	beq.w	8010138 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd80:	4a94      	ldr	r2, [pc, #592]	; (800ffd4 <UART_SetConfig+0x930>)
 800fd82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd86:	461a      	mov	r2, r3
 800fd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd8e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	4613      	mov	r3, r2
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	4413      	add	r3, r2
 800fd9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d305      	bcc.n	800fdac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d903      	bls.n	800fdb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fdac:	2301      	movs	r3, #1
 800fdae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fdb2:	e1c1      	b.n	8010138 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	60bb      	str	r3, [r7, #8]
 800fdba:	60fa      	str	r2, [r7, #12]
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc0:	4a84      	ldr	r2, [pc, #528]	; (800ffd4 <UART_SetConfig+0x930>)
 800fdc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	2200      	movs	r2, #0
 800fdca:	603b      	str	r3, [r7, #0]
 800fdcc:	607a      	str	r2, [r7, #4]
 800fdce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fdd6:	f7f0 fadb 	bl	8000390 <__aeabi_uldivmod>
 800fdda:	4602      	mov	r2, r0
 800fddc:	460b      	mov	r3, r1
 800fdde:	4610      	mov	r0, r2
 800fde0:	4619      	mov	r1, r3
 800fde2:	f04f 0200 	mov.w	r2, #0
 800fde6:	f04f 0300 	mov.w	r3, #0
 800fdea:	020b      	lsls	r3, r1, #8
 800fdec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fdf0:	0202      	lsls	r2, r0, #8
 800fdf2:	6979      	ldr	r1, [r7, #20]
 800fdf4:	6849      	ldr	r1, [r1, #4]
 800fdf6:	0849      	lsrs	r1, r1, #1
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	eb12 0804 	adds.w	r8, r2, r4
 800fe02:	eb43 0905 	adc.w	r9, r3, r5
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	469a      	mov	sl, r3
 800fe0e:	4693      	mov	fp, r2
 800fe10:	4652      	mov	r2, sl
 800fe12:	465b      	mov	r3, fp
 800fe14:	4640      	mov	r0, r8
 800fe16:	4649      	mov	r1, r9
 800fe18:	f7f0 faba 	bl	8000390 <__aeabi_uldivmod>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	4613      	mov	r3, r2
 800fe22:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fe2a:	d308      	bcc.n	800fe3e <UART_SetConfig+0x79a>
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe32:	d204      	bcs.n	800fe3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe3a:	60da      	str	r2, [r3, #12]
 800fe3c:	e17c      	b.n	8010138 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fe44:	e178      	b.n	8010138 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	69db      	ldr	r3, [r3, #28]
 800fe4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe4e:	f040 80c5 	bne.w	800ffdc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fe52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe56:	2b20      	cmp	r3, #32
 800fe58:	dc48      	bgt.n	800feec <UART_SetConfig+0x848>
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	db7b      	blt.n	800ff56 <UART_SetConfig+0x8b2>
 800fe5e:	2b20      	cmp	r3, #32
 800fe60:	d879      	bhi.n	800ff56 <UART_SetConfig+0x8b2>
 800fe62:	a201      	add	r2, pc, #4	; (adr r2, 800fe68 <UART_SetConfig+0x7c4>)
 800fe64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe68:	0800fef3 	.word	0x0800fef3
 800fe6c:	0800fefb 	.word	0x0800fefb
 800fe70:	0800ff57 	.word	0x0800ff57
 800fe74:	0800ff57 	.word	0x0800ff57
 800fe78:	0800ff03 	.word	0x0800ff03
 800fe7c:	0800ff57 	.word	0x0800ff57
 800fe80:	0800ff57 	.word	0x0800ff57
 800fe84:	0800ff57 	.word	0x0800ff57
 800fe88:	0800ff13 	.word	0x0800ff13
 800fe8c:	0800ff57 	.word	0x0800ff57
 800fe90:	0800ff57 	.word	0x0800ff57
 800fe94:	0800ff57 	.word	0x0800ff57
 800fe98:	0800ff57 	.word	0x0800ff57
 800fe9c:	0800ff57 	.word	0x0800ff57
 800fea0:	0800ff57 	.word	0x0800ff57
 800fea4:	0800ff57 	.word	0x0800ff57
 800fea8:	0800ff23 	.word	0x0800ff23
 800feac:	0800ff57 	.word	0x0800ff57
 800feb0:	0800ff57 	.word	0x0800ff57
 800feb4:	0800ff57 	.word	0x0800ff57
 800feb8:	0800ff57 	.word	0x0800ff57
 800febc:	0800ff57 	.word	0x0800ff57
 800fec0:	0800ff57 	.word	0x0800ff57
 800fec4:	0800ff57 	.word	0x0800ff57
 800fec8:	0800ff57 	.word	0x0800ff57
 800fecc:	0800ff57 	.word	0x0800ff57
 800fed0:	0800ff57 	.word	0x0800ff57
 800fed4:	0800ff57 	.word	0x0800ff57
 800fed8:	0800ff57 	.word	0x0800ff57
 800fedc:	0800ff57 	.word	0x0800ff57
 800fee0:	0800ff57 	.word	0x0800ff57
 800fee4:	0800ff57 	.word	0x0800ff57
 800fee8:	0800ff49 	.word	0x0800ff49
 800feec:	2b40      	cmp	r3, #64	; 0x40
 800feee:	d02e      	beq.n	800ff4e <UART_SetConfig+0x8aa>
 800fef0:	e031      	b.n	800ff56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fef2:	f7fb f9f1 	bl	800b2d8 <HAL_RCC_GetPCLK1Freq>
 800fef6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fef8:	e033      	b.n	800ff62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fefa:	f7fb fa03 	bl	800b304 <HAL_RCC_GetPCLK2Freq>
 800fefe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff00:	e02f      	b.n	800ff62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fc f96e 	bl	800c1e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff10:	e027      	b.n	800ff62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff12:	f107 0318 	add.w	r3, r7, #24
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fc faba 	bl	800c490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff20:	e01f      	b.n	800ff62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff22:	4b2d      	ldr	r3, [pc, #180]	; (800ffd8 <UART_SetConfig+0x934>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f003 0320 	and.w	r3, r3, #32
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d009      	beq.n	800ff42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff2e:	4b2a      	ldr	r3, [pc, #168]	; (800ffd8 <UART_SetConfig+0x934>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	08db      	lsrs	r3, r3, #3
 800ff34:	f003 0303 	and.w	r3, r3, #3
 800ff38:	4a24      	ldr	r2, [pc, #144]	; (800ffcc <UART_SetConfig+0x928>)
 800ff3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff40:	e00f      	b.n	800ff62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ff42:	4b22      	ldr	r3, [pc, #136]	; (800ffcc <UART_SetConfig+0x928>)
 800ff44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff46:	e00c      	b.n	800ff62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff48:	4b21      	ldr	r3, [pc, #132]	; (800ffd0 <UART_SetConfig+0x92c>)
 800ff4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff4c:	e009      	b.n	800ff62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff54:	e005      	b.n	800ff62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ff56:	2300      	movs	r3, #0
 800ff58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f000 80e7 	beq.w	8010138 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6e:	4a19      	ldr	r2, [pc, #100]	; (800ffd4 <UART_SetConfig+0x930>)
 800ff70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff74:	461a      	mov	r2, r3
 800ff76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff7c:	005a      	lsls	r2, r3, #1
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	085b      	lsrs	r3, r3, #1
 800ff84:	441a      	add	r2, r3
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	2b0f      	cmp	r3, #15
 800ff94:	d916      	bls.n	800ffc4 <UART_SetConfig+0x920>
 800ff96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff9c:	d212      	bcs.n	800ffc4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	f023 030f 	bic.w	r3, r3, #15
 800ffa6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffaa:	085b      	lsrs	r3, r3, #1
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	f003 0307 	and.w	r3, r3, #7
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ffc0:	60da      	str	r2, [r3, #12]
 800ffc2:	e0b9      	b.n	8010138 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ffca:	e0b5      	b.n	8010138 <UART_SetConfig+0xa94>
 800ffcc:	03d09000 	.word	0x03d09000
 800ffd0:	003d0900 	.word	0x003d0900
 800ffd4:	08014d50 	.word	0x08014d50
 800ffd8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ffe0:	2b20      	cmp	r3, #32
 800ffe2:	dc49      	bgt.n	8010078 <UART_SetConfig+0x9d4>
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	db7c      	blt.n	80100e2 <UART_SetConfig+0xa3e>
 800ffe8:	2b20      	cmp	r3, #32
 800ffea:	d87a      	bhi.n	80100e2 <UART_SetConfig+0xa3e>
 800ffec:	a201      	add	r2, pc, #4	; (adr r2, 800fff4 <UART_SetConfig+0x950>)
 800ffee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff2:	bf00      	nop
 800fff4:	0801007f 	.word	0x0801007f
 800fff8:	08010087 	.word	0x08010087
 800fffc:	080100e3 	.word	0x080100e3
 8010000:	080100e3 	.word	0x080100e3
 8010004:	0801008f 	.word	0x0801008f
 8010008:	080100e3 	.word	0x080100e3
 801000c:	080100e3 	.word	0x080100e3
 8010010:	080100e3 	.word	0x080100e3
 8010014:	0801009f 	.word	0x0801009f
 8010018:	080100e3 	.word	0x080100e3
 801001c:	080100e3 	.word	0x080100e3
 8010020:	080100e3 	.word	0x080100e3
 8010024:	080100e3 	.word	0x080100e3
 8010028:	080100e3 	.word	0x080100e3
 801002c:	080100e3 	.word	0x080100e3
 8010030:	080100e3 	.word	0x080100e3
 8010034:	080100af 	.word	0x080100af
 8010038:	080100e3 	.word	0x080100e3
 801003c:	080100e3 	.word	0x080100e3
 8010040:	080100e3 	.word	0x080100e3
 8010044:	080100e3 	.word	0x080100e3
 8010048:	080100e3 	.word	0x080100e3
 801004c:	080100e3 	.word	0x080100e3
 8010050:	080100e3 	.word	0x080100e3
 8010054:	080100e3 	.word	0x080100e3
 8010058:	080100e3 	.word	0x080100e3
 801005c:	080100e3 	.word	0x080100e3
 8010060:	080100e3 	.word	0x080100e3
 8010064:	080100e3 	.word	0x080100e3
 8010068:	080100e3 	.word	0x080100e3
 801006c:	080100e3 	.word	0x080100e3
 8010070:	080100e3 	.word	0x080100e3
 8010074:	080100d5 	.word	0x080100d5
 8010078:	2b40      	cmp	r3, #64	; 0x40
 801007a:	d02e      	beq.n	80100da <UART_SetConfig+0xa36>
 801007c:	e031      	b.n	80100e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801007e:	f7fb f92b 	bl	800b2d8 <HAL_RCC_GetPCLK1Freq>
 8010082:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010084:	e033      	b.n	80100ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010086:	f7fb f93d 	bl	800b304 <HAL_RCC_GetPCLK2Freq>
 801008a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801008c:	e02f      	b.n	80100ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801008e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010092:	4618      	mov	r0, r3
 8010094:	f7fc f8a8 	bl	800c1e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801009c:	e027      	b.n	80100ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801009e:	f107 0318 	add.w	r3, r7, #24
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fc f9f4 	bl	800c490 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100ac:	e01f      	b.n	80100ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100ae:	4b2d      	ldr	r3, [pc, #180]	; (8010164 <UART_SetConfig+0xac0>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f003 0320 	and.w	r3, r3, #32
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d009      	beq.n	80100ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100ba:	4b2a      	ldr	r3, [pc, #168]	; (8010164 <UART_SetConfig+0xac0>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	08db      	lsrs	r3, r3, #3
 80100c0:	f003 0303 	and.w	r3, r3, #3
 80100c4:	4a28      	ldr	r2, [pc, #160]	; (8010168 <UART_SetConfig+0xac4>)
 80100c6:	fa22 f303 	lsr.w	r3, r2, r3
 80100ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100cc:	e00f      	b.n	80100ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80100ce:	4b26      	ldr	r3, [pc, #152]	; (8010168 <UART_SetConfig+0xac4>)
 80100d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100d2:	e00c      	b.n	80100ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100d4:	4b25      	ldr	r3, [pc, #148]	; (801016c <UART_SetConfig+0xac8>)
 80100d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100d8:	e009      	b.n	80100ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100e0:	e005      	b.n	80100ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80100e2:	2300      	movs	r3, #0
 80100e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80100e6:	2301      	movs	r3, #1
 80100e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80100ec:	bf00      	nop
    }

    if (pclk != 0U)
 80100ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d021      	beq.n	8010138 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f8:	4a1d      	ldr	r2, [pc, #116]	; (8010170 <UART_SetConfig+0xacc>)
 80100fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100fe:	461a      	mov	r2, r3
 8010100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010102:	fbb3 f2f2 	udiv	r2, r3, r2
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	085b      	lsrs	r3, r3, #1
 801010c:	441a      	add	r2, r3
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	fbb2 f3f3 	udiv	r3, r2, r3
 8010116:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011a:	2b0f      	cmp	r3, #15
 801011c:	d909      	bls.n	8010132 <UART_SetConfig+0xa8e>
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010124:	d205      	bcs.n	8010132 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010128:	b29a      	uxth	r2, r3
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	60da      	str	r2, [r3, #12]
 8010130:	e002      	b.n	8010138 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	2201      	movs	r2, #1
 801013c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	2201      	movs	r2, #1
 8010144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2200      	movs	r2, #0
 801014c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	2200      	movs	r2, #0
 8010152:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010154:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010158:	4618      	mov	r0, r3
 801015a:	3748      	adds	r7, #72	; 0x48
 801015c:	46bd      	mov	sp, r7
 801015e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010162:	bf00      	nop
 8010164:	58024400 	.word	0x58024400
 8010168:	03d09000 	.word	0x03d09000
 801016c:	003d0900 	.word	0x003d0900
 8010170:	08014d50 	.word	0x08014d50

08010174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010180:	f003 0301 	and.w	r3, r3, #1
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00a      	beq.n	801019e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a2:	f003 0302 	and.w	r3, r3, #2
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00a      	beq.n	80101c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	430a      	orrs	r2, r1
 80101be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d00a      	beq.n	80101e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	430a      	orrs	r2, r1
 80101e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101e6:	f003 0308 	and.w	r3, r3, #8
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00a      	beq.n	8010204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	430a      	orrs	r2, r1
 8010202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010208:	f003 0310 	and.w	r3, r3, #16
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00a      	beq.n	8010226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	430a      	orrs	r2, r1
 8010224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801022a:	f003 0320 	and.w	r3, r3, #32
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00a      	beq.n	8010248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	430a      	orrs	r2, r1
 8010246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801024c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010250:	2b00      	cmp	r3, #0
 8010252:	d01a      	beq.n	801028a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	430a      	orrs	r2, r1
 8010268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801026e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010272:	d10a      	bne.n	801028a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	430a      	orrs	r2, r1
 8010288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801028e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00a      	beq.n	80102ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	430a      	orrs	r2, r1
 80102aa:	605a      	str	r2, [r3, #4]
  }
}
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af02      	add	r7, sp, #8
 80102be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80102c8:	f7f6 fcc8 	bl	8006c5c <HAL_GetTick>
 80102cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f003 0308 	and.w	r3, r3, #8
 80102d8:	2b08      	cmp	r3, #8
 80102da:	d10e      	bne.n	80102fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f000 f82f 	bl	801034e <UART_WaitOnFlagUntilTimeout>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d001      	beq.n	80102fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102f6:	2303      	movs	r3, #3
 80102f8:	e025      	b.n	8010346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f003 0304 	and.w	r3, r3, #4
 8010304:	2b04      	cmp	r3, #4
 8010306:	d10e      	bne.n	8010326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2200      	movs	r2, #0
 8010312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f819 	bl	801034e <UART_WaitOnFlagUntilTimeout>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010322:	2303      	movs	r3, #3
 8010324:	e00f      	b.n	8010346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2220      	movs	r2, #32
 801032a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2220      	movs	r2, #32
 8010332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3710      	adds	r7, #16
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801034e:	b580      	push	{r7, lr}
 8010350:	b09c      	sub	sp, #112	; 0x70
 8010352:	af00      	add	r7, sp, #0
 8010354:	60f8      	str	r0, [r7, #12]
 8010356:	60b9      	str	r1, [r7, #8]
 8010358:	603b      	str	r3, [r7, #0]
 801035a:	4613      	mov	r3, r2
 801035c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801035e:	e0a9      	b.n	80104b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010366:	f000 80a5 	beq.w	80104b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801036a:	f7f6 fc77 	bl	8006c5c <HAL_GetTick>
 801036e:	4602      	mov	r2, r0
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010376:	429a      	cmp	r2, r3
 8010378:	d302      	bcc.n	8010380 <UART_WaitOnFlagUntilTimeout+0x32>
 801037a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801037c:	2b00      	cmp	r3, #0
 801037e:	d140      	bne.n	8010402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010388:	e853 3f00 	ldrex	r3, [r3]
 801038c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801038e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010394:	667b      	str	r3, [r7, #100]	; 0x64
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	461a      	mov	r2, r3
 801039c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801039e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103a6:	e841 2300 	strex	r3, r2, [r1]
 80103aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80103ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1e6      	bne.n	8010380 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	3308      	adds	r3, #8
 80103b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103bc:	e853 3f00 	ldrex	r3, [r3]
 80103c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c4:	f023 0301 	bic.w	r3, r3, #1
 80103c8:	663b      	str	r3, [r7, #96]	; 0x60
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3308      	adds	r3, #8
 80103d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80103d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103da:	e841 2300 	strex	r3, r2, [r1]
 80103de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80103e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d1e5      	bne.n	80103b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2220      	movs	r2, #32
 80103ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2220      	movs	r2, #32
 80103f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80103fe:	2303      	movs	r3, #3
 8010400:	e069      	b.n	80104d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f003 0304 	and.w	r3, r3, #4
 801040c:	2b00      	cmp	r3, #0
 801040e:	d051      	beq.n	80104b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	69db      	ldr	r3, [r3, #28]
 8010416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801041a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801041e:	d149      	bne.n	80104b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010428:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010432:	e853 3f00 	ldrex	r3, [r3]
 8010436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801043e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	461a      	mov	r2, r3
 8010446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010448:	637b      	str	r3, [r7, #52]	; 0x34
 801044a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801044e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010450:	e841 2300 	strex	r3, r2, [r1]
 8010454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1e6      	bne.n	801042a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	3308      	adds	r3, #8
 8010462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	e853 3f00 	ldrex	r3, [r3]
 801046a:	613b      	str	r3, [r7, #16]
   return(result);
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	f023 0301 	bic.w	r3, r3, #1
 8010472:	66bb      	str	r3, [r7, #104]	; 0x68
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3308      	adds	r3, #8
 801047a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801047c:	623a      	str	r2, [r7, #32]
 801047e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010480:	69f9      	ldr	r1, [r7, #28]
 8010482:	6a3a      	ldr	r2, [r7, #32]
 8010484:	e841 2300 	strex	r3, r2, [r1]
 8010488:	61bb      	str	r3, [r7, #24]
   return(result);
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d1e5      	bne.n	801045c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2220      	movs	r2, #32
 8010494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2220      	movs	r2, #32
 801049c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2220      	movs	r2, #32
 80104a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80104b0:	2303      	movs	r3, #3
 80104b2:	e010      	b.n	80104d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	69da      	ldr	r2, [r3, #28]
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	4013      	ands	r3, r2
 80104be:	68ba      	ldr	r2, [r7, #8]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	bf0c      	ite	eq
 80104c4:	2301      	moveq	r3, #1
 80104c6:	2300      	movne	r3, #0
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	461a      	mov	r2, r3
 80104cc:	79fb      	ldrb	r3, [r7, #7]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	f43f af46 	beq.w	8010360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3770      	adds	r7, #112	; 0x70
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
	...

080104e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b096      	sub	sp, #88	; 0x58
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	4613      	mov	r3, r2
 80104ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	88fa      	ldrh	r2, [r7, #6]
 80104f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2200      	movs	r2, #0
 8010500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2222      	movs	r2, #34	; 0x22
 8010508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010510:	2b00      	cmp	r3, #0
 8010512:	d02c      	beq.n	801056e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010518:	4a42      	ldr	r2, [pc, #264]	; (8010624 <UART_Start_Receive_DMA+0x144>)
 801051a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010520:	4a41      	ldr	r2, [pc, #260]	; (8010628 <UART_Start_Receive_DMA+0x148>)
 8010522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010528:	4a40      	ldr	r2, [pc, #256]	; (801062c <UART_Start_Receive_DMA+0x14c>)
 801052a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010530:	2200      	movs	r2, #0
 8010532:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	3324      	adds	r3, #36	; 0x24
 801053e:	4619      	mov	r1, r3
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010544:	461a      	mov	r2, r3
 8010546:	88fb      	ldrh	r3, [r7, #6]
 8010548:	f7f7 fa3a 	bl	80079c0 <HAL_DMA_Start_IT>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d00d      	beq.n	801056e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2210      	movs	r2, #16
 8010556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2220      	movs	r2, #32
 8010566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801056a:	2301      	movs	r3, #1
 801056c:	e055      	b.n	801061a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d018      	beq.n	80105b0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010586:	e853 3f00 	ldrex	r3, [r3]
 801058a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010592:	657b      	str	r3, [r7, #84]	; 0x54
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	461a      	mov	r2, r3
 801059a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801059c:	64bb      	str	r3, [r7, #72]	; 0x48
 801059e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105a4:	e841 2300 	strex	r3, r2, [r1]
 80105a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80105aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e6      	bne.n	801057e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3308      	adds	r3, #8
 80105b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ba:	e853 3f00 	ldrex	r3, [r3]
 80105be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	f043 0301 	orr.w	r3, r3, #1
 80105c6:	653b      	str	r3, [r7, #80]	; 0x50
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	3308      	adds	r3, #8
 80105ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105d0:	637a      	str	r2, [r7, #52]	; 0x34
 80105d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105d8:	e841 2300 	strex	r3, r2, [r1]
 80105dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80105de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d1e5      	bne.n	80105b0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3308      	adds	r3, #8
 80105ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	e853 3f00 	ldrex	r3, [r3]
 80105f2:	613b      	str	r3, [r7, #16]
   return(result);
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3308      	adds	r3, #8
 8010602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010604:	623a      	str	r2, [r7, #32]
 8010606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010608:	69f9      	ldr	r1, [r7, #28]
 801060a:	6a3a      	ldr	r2, [r7, #32]
 801060c:	e841 2300 	strex	r3, r2, [r1]
 8010610:	61bb      	str	r3, [r7, #24]
   return(result);
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d1e5      	bne.n	80105e4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3758      	adds	r7, #88	; 0x58
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	08010833 	.word	0x08010833
 8010628:	08010955 	.word	0x08010955
 801062c:	0801098d 	.word	0x0801098d

08010630 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010630:	b480      	push	{r7}
 8010632:	b08f      	sub	sp, #60	; 0x3c
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	e853 3f00 	ldrex	r3, [r3]
 8010644:	61fb      	str	r3, [r7, #28]
   return(result);
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801064c:	637b      	str	r3, [r7, #52]	; 0x34
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010658:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801065c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801065e:	e841 2300 	strex	r3, r2, [r1]
 8010662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1e6      	bne.n	8010638 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3308      	adds	r3, #8
 8010670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	e853 3f00 	ldrex	r3, [r3]
 8010678:	60bb      	str	r3, [r7, #8]
   return(result);
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010680:	633b      	str	r3, [r7, #48]	; 0x30
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	3308      	adds	r3, #8
 8010688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801068a:	61ba      	str	r2, [r7, #24]
 801068c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068e:	6979      	ldr	r1, [r7, #20]
 8010690:	69ba      	ldr	r2, [r7, #24]
 8010692:	e841 2300 	strex	r3, r2, [r1]
 8010696:	613b      	str	r3, [r7, #16]
   return(result);
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1e5      	bne.n	801066a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80106a6:	bf00      	nop
 80106a8:	373c      	adds	r7, #60	; 0x3c
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
	...

080106b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b095      	sub	sp, #84	; 0x54
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80106ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106da:	643b      	str	r3, [r7, #64]	; 0x40
 80106dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e6      	bne.n	80106bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	3308      	adds	r3, #8
 80106f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	e853 3f00 	ldrex	r3, [r3]
 80106fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80106fe:	69fa      	ldr	r2, [r7, #28]
 8010700:	4b1e      	ldr	r3, [pc, #120]	; (801077c <UART_EndRxTransfer+0xc8>)
 8010702:	4013      	ands	r3, r2
 8010704:	64bb      	str	r3, [r7, #72]	; 0x48
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	3308      	adds	r3, #8
 801070c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801070e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010716:	e841 2300 	strex	r3, r2, [r1]
 801071a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1e5      	bne.n	80106ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010726:	2b01      	cmp	r3, #1
 8010728:	d118      	bne.n	801075c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	e853 3f00 	ldrex	r3, [r3]
 8010736:	60bb      	str	r3, [r7, #8]
   return(result);
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	f023 0310 	bic.w	r3, r3, #16
 801073e:	647b      	str	r3, [r7, #68]	; 0x44
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	461a      	mov	r2, r3
 8010746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010748:	61bb      	str	r3, [r7, #24]
 801074a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801074c:	6979      	ldr	r1, [r7, #20]
 801074e:	69ba      	ldr	r2, [r7, #24]
 8010750:	e841 2300 	strex	r3, r2, [r1]
 8010754:	613b      	str	r3, [r7, #16]
   return(result);
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1e6      	bne.n	801072a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2220      	movs	r2, #32
 8010760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2200      	movs	r2, #0
 801076e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010770:	bf00      	nop
 8010772:	3754      	adds	r7, #84	; 0x54
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	effffffe 	.word	0xeffffffe

08010780 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b090      	sub	sp, #64	; 0x40
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801078c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	69db      	ldr	r3, [r3, #28]
 8010792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010796:	d037      	beq.n	8010808 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801079a:	2200      	movs	r2, #0
 801079c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80107a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	3308      	adds	r3, #8
 80107a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	e853 3f00 	ldrex	r3, [r3]
 80107ae:	623b      	str	r3, [r7, #32]
   return(result);
 80107b0:	6a3b      	ldr	r3, [r7, #32]
 80107b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80107b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3308      	adds	r3, #8
 80107be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107c0:	633a      	str	r2, [r7, #48]	; 0x30
 80107c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107c8:	e841 2300 	strex	r3, r2, [r1]
 80107cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e5      	bne.n	80107a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80107d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	e853 3f00 	ldrex	r3, [r3]
 80107e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107e8:	637b      	str	r3, [r7, #52]	; 0x34
 80107ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f2:	61fb      	str	r3, [r7, #28]
 80107f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f6:	69b9      	ldr	r1, [r7, #24]
 80107f8:	69fa      	ldr	r2, [r7, #28]
 80107fa:	e841 2300 	strex	r3, r2, [r1]
 80107fe:	617b      	str	r3, [r7, #20]
   return(result);
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d1e6      	bne.n	80107d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010806:	e002      	b.n	801080e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010808:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801080a:	f7fe ff19 	bl	800f640 <HAL_UART_TxCpltCallback>
}
 801080e:	bf00      	nop
 8010810:	3740      	adds	r7, #64	; 0x40
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b084      	sub	sp, #16
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010822:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f7fe ff15 	bl	800f654 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801082a:	bf00      	nop
 801082c:	3710      	adds	r7, #16
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}

08010832 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010832:	b580      	push	{r7, lr}
 8010834:	b09c      	sub	sp, #112	; 0x70
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801083e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	69db      	ldr	r3, [r3, #28]
 8010844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010848:	d071      	beq.n	801092e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801084a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801084c:	2200      	movs	r2, #0
 801084e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085a:	e853 3f00 	ldrex	r3, [r3]
 801085e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010866:	66bb      	str	r3, [r7, #104]	; 0x68
 8010868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	461a      	mov	r2, r3
 801086e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010870:	65bb      	str	r3, [r7, #88]	; 0x58
 8010872:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010878:	e841 2300 	strex	r3, r2, [r1]
 801087c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801087e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1e6      	bne.n	8010852 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	3308      	adds	r3, #8
 801088a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088e:	e853 3f00 	ldrex	r3, [r3]
 8010892:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010896:	f023 0301 	bic.w	r3, r3, #1
 801089a:	667b      	str	r3, [r7, #100]	; 0x64
 801089c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	3308      	adds	r3, #8
 80108a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80108a4:	647a      	str	r2, [r7, #68]	; 0x44
 80108a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108ac:	e841 2300 	strex	r3, r2, [r1]
 80108b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80108b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1e5      	bne.n	8010884 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	3308      	adds	r3, #8
 80108be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c2:	e853 3f00 	ldrex	r3, [r3]
 80108c6:	623b      	str	r3, [r7, #32]
   return(result);
 80108c8:	6a3b      	ldr	r3, [r7, #32]
 80108ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108ce:	663b      	str	r3, [r7, #96]	; 0x60
 80108d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	3308      	adds	r3, #8
 80108d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80108d8:	633a      	str	r2, [r7, #48]	; 0x30
 80108da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108e0:	e841 2300 	strex	r3, r2, [r1]
 80108e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1e5      	bne.n	80108b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80108ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108ee:	2220      	movs	r2, #32
 80108f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d118      	bne.n	801092e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	e853 3f00 	ldrex	r3, [r3]
 8010908:	60fb      	str	r3, [r7, #12]
   return(result);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f023 0310 	bic.w	r3, r3, #16
 8010910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	461a      	mov	r2, r3
 8010918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801091a:	61fb      	str	r3, [r7, #28]
 801091c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091e:	69b9      	ldr	r1, [r7, #24]
 8010920:	69fa      	ldr	r2, [r7, #28]
 8010922:	e841 2300 	strex	r3, r2, [r1]
 8010926:	617b      	str	r3, [r7, #20]
   return(result);
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1e6      	bne.n	80108fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801092e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010932:	2b01      	cmp	r3, #1
 8010934:	d107      	bne.n	8010946 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801093c:	4619      	mov	r1, r3
 801093e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010940:	f7f2 fc2c 	bl	800319c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010944:	e002      	b.n	801094c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010946:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010948:	f7fe fe8e 	bl	800f668 <HAL_UART_RxCpltCallback>
}
 801094c:	bf00      	nop
 801094e:	3770      	adds	r7, #112	; 0x70
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010960:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010966:	2b01      	cmp	r3, #1
 8010968:	d109      	bne.n	801097e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010970:	085b      	lsrs	r3, r3, #1
 8010972:	b29b      	uxth	r3, r3
 8010974:	4619      	mov	r1, r3
 8010976:	68f8      	ldr	r0, [r7, #12]
 8010978:	f7f2 fc10 	bl	800319c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801097c:	e002      	b.n	8010984 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801097e:	68f8      	ldr	r0, [r7, #12]
 8010980:	f7fe fe7c 	bl	800f67c <HAL_UART_RxHalfCpltCallback>
}
 8010984:	bf00      	nop
 8010986:	3710      	adds	r7, #16
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b086      	sub	sp, #24
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010998:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109b4:	2b80      	cmp	r3, #128	; 0x80
 80109b6:	d109      	bne.n	80109cc <UART_DMAError+0x40>
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	2b21      	cmp	r3, #33	; 0x21
 80109bc:	d106      	bne.n	80109cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	2200      	movs	r2, #0
 80109c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80109c6:	6978      	ldr	r0, [r7, #20]
 80109c8:	f7ff fe32 	bl	8010630 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d6:	2b40      	cmp	r3, #64	; 0x40
 80109d8:	d109      	bne.n	80109ee <UART_DMAError+0x62>
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2b22      	cmp	r3, #34	; 0x22
 80109de:	d106      	bne.n	80109ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80109e8:	6978      	ldr	r0, [r7, #20]
 80109ea:	f7ff fe63 	bl	80106b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80109f4:	f043 0210 	orr.w	r2, r3, #16
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109fe:	6978      	ldr	r0, [r7, #20]
 8010a00:	f7fe fe46 	bl	800f690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a04:	bf00      	nop
 8010a06:	3718      	adds	r7, #24
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2200      	movs	r2, #0
 8010a26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	f7fe fe30 	bl	800f690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a30:	bf00      	nop
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b088      	sub	sp, #32
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	e853 3f00 	ldrex	r3, [r3]
 8010a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a54:	61fb      	str	r3, [r7, #28]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	461a      	mov	r2, r3
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	61bb      	str	r3, [r7, #24]
 8010a60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a62:	6979      	ldr	r1, [r7, #20]
 8010a64:	69ba      	ldr	r2, [r7, #24]
 8010a66:	e841 2300 	strex	r3, r2, [r1]
 8010a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1e6      	bne.n	8010a40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2220      	movs	r2, #32
 8010a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7fe fddd 	bl	800f640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a86:	bf00      	nop
 8010a88:	3720      	adds	r7, #32
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010a8e:	b480      	push	{r7}
 8010a90:	b083      	sub	sp, #12
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010a96:	bf00      	nop
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr

08010aa2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010aaa:	bf00      	nop
 8010aac:	370c      	adds	r7, #12
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr

08010ab6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ab6:	b480      	push	{r7}
 8010ab8:	b083      	sub	sp, #12
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010abe:	bf00      	nop
 8010ac0:	370c      	adds	r7, #12
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr

08010aca <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b084      	sub	sp, #16
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d101      	bne.n	8010ae0 <HAL_UARTEx_EnableFifoMode+0x16>
 8010adc:	2302      	movs	r3, #2
 8010ade:	e02b      	b.n	8010b38 <HAL_UARTEx_EnableFifoMode+0x6e>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2224      	movs	r2, #36	; 0x24
 8010aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f022 0201 	bic.w	r2, r2, #1
 8010b06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010b16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f000 f91f 	bl	8010d64 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2220      	movs	r2, #32
 8010b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b36:	2300      	movs	r3, #0
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d101      	bne.n	8010b56 <HAL_UARTEx_DisableFifoMode+0x16>
 8010b52:	2302      	movs	r3, #2
 8010b54:	e027      	b.n	8010ba6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2224      	movs	r2, #36	; 0x24
 8010b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f022 0201 	bic.w	r2, r2, #1
 8010b7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010b84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2220      	movs	r2, #32
 8010b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ba4:	2300      	movs	r3, #0
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3714      	adds	r7, #20
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b084      	sub	sp, #16
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d101      	bne.n	8010bca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010bc6:	2302      	movs	r3, #2
 8010bc8:	e02d      	b.n	8010c26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2224      	movs	r2, #36	; 0x24
 8010bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	681a      	ldr	r2, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f022 0201 	bic.w	r2, r2, #1
 8010bf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	683a      	ldr	r2, [r7, #0]
 8010c02:	430a      	orrs	r2, r1
 8010c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 f8ac 	bl	8010d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2220      	movs	r2, #32
 8010c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b084      	sub	sp, #16
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
 8010c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d101      	bne.n	8010c46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c42:	2302      	movs	r3, #2
 8010c44:	e02d      	b.n	8010ca2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2201      	movs	r2, #1
 8010c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2224      	movs	r2, #36	; 0x24
 8010c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f022 0201 	bic.w	r2, r2, #1
 8010c6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	683a      	ldr	r2, [r7, #0]
 8010c7e:	430a      	orrs	r2, r1
 8010c80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 f86e 	bl	8010d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2220      	movs	r2, #32
 8010c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3710      	adds	r7, #16
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}

08010caa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b08c      	sub	sp, #48	; 0x30
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	60f8      	str	r0, [r7, #12]
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cbe:	2b20      	cmp	r3, #32
 8010cc0:	d14a      	bne.n	8010d58 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010cc8:	88fb      	ldrh	r3, [r7, #6]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e043      	b.n	8010d5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d101      	bne.n	8010ce0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010cdc:	2302      	movs	r3, #2
 8010cde:	e03c      	b.n	8010d5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2201      	movs	r2, #1
 8010cec:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010cee:	88fb      	ldrh	r3, [r7, #6]
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	68b9      	ldr	r1, [r7, #8]
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	f7ff fbf3 	bl	80104e0 <UART_Start_Receive_DMA>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d124      	bne.n	8010d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d11d      	bne.n	8010d4c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2210      	movs	r2, #16
 8010d16:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1e:	69bb      	ldr	r3, [r7, #24]
 8010d20:	e853 3f00 	ldrex	r3, [r3]
 8010d24:	617b      	str	r3, [r7, #20]
   return(result);
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	f043 0310 	orr.w	r3, r3, #16
 8010d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	461a      	mov	r2, r3
 8010d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d36:	627b      	str	r3, [r7, #36]	; 0x24
 8010d38:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d3a:	6a39      	ldr	r1, [r7, #32]
 8010d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d3e:	e841 2300 	strex	r3, r2, [r1]
 8010d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d1e6      	bne.n	8010d18 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010d4a:	e002      	b.n	8010d52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d56:	e000      	b.n	8010d5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010d58:	2302      	movs	r3, #2
  }
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3730      	adds	r7, #48	; 0x30
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
	...

08010d64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d108      	bne.n	8010d86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2201      	movs	r2, #1
 8010d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2201      	movs	r2, #1
 8010d80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d84:	e031      	b.n	8010dea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d86:	2310      	movs	r3, #16
 8010d88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d8a:	2310      	movs	r3, #16
 8010d8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	0e5b      	lsrs	r3, r3, #25
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	f003 0307 	and.w	r3, r3, #7
 8010d9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	689b      	ldr	r3, [r3, #8]
 8010da4:	0f5b      	lsrs	r3, r3, #29
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	f003 0307 	and.w	r3, r3, #7
 8010dac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010dae:	7bbb      	ldrb	r3, [r7, #14]
 8010db0:	7b3a      	ldrb	r2, [r7, #12]
 8010db2:	4911      	ldr	r1, [pc, #68]	; (8010df8 <UARTEx_SetNbDataToProcess+0x94>)
 8010db4:	5c8a      	ldrb	r2, [r1, r2]
 8010db6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010dba:	7b3a      	ldrb	r2, [r7, #12]
 8010dbc:	490f      	ldr	r1, [pc, #60]	; (8010dfc <UARTEx_SetNbDataToProcess+0x98>)
 8010dbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010dc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	7b7a      	ldrb	r2, [r7, #13]
 8010dd0:	4909      	ldr	r1, [pc, #36]	; (8010df8 <UARTEx_SetNbDataToProcess+0x94>)
 8010dd2:	5c8a      	ldrb	r2, [r1, r2]
 8010dd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010dd8:	7b7a      	ldrb	r2, [r7, #13]
 8010dda:	4908      	ldr	r1, [pc, #32]	; (8010dfc <UARTEx_SetNbDataToProcess+0x98>)
 8010ddc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010dde:	fb93 f3f2 	sdiv	r3, r3, r2
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010dea:	bf00      	nop
 8010dec:	3714      	adds	r7, #20
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	08014d68 	.word	0x08014d68
 8010dfc:	08014d70 	.word	0x08014d70

08010e00 <checkint>:
 8010e00:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010e04:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	b570      	push	{r4, r5, r6, lr}
 8010e0c:	dd2a      	ble.n	8010e64 <checkint+0x64>
 8010e0e:	f240 4333 	movw	r3, #1075	; 0x433
 8010e12:	429a      	cmp	r2, r3
 8010e14:	dc24      	bgt.n	8010e60 <checkint+0x60>
 8010e16:	1a9b      	subs	r3, r3, r2
 8010e18:	f1a3 0620 	sub.w	r6, r3, #32
 8010e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e20:	fa02 f403 	lsl.w	r4, r2, r3
 8010e24:	fa02 f606 	lsl.w	r6, r2, r6
 8010e28:	f1c3 0520 	rsb	r5, r3, #32
 8010e2c:	fa22 f505 	lsr.w	r5, r2, r5
 8010e30:	4334      	orrs	r4, r6
 8010e32:	432c      	orrs	r4, r5
 8010e34:	409a      	lsls	r2, r3
 8010e36:	ea20 0202 	bic.w	r2, r0, r2
 8010e3a:	ea21 0404 	bic.w	r4, r1, r4
 8010e3e:	4322      	orrs	r2, r4
 8010e40:	f1a3 0420 	sub.w	r4, r3, #32
 8010e44:	f1c3 0220 	rsb	r2, r3, #32
 8010e48:	d10c      	bne.n	8010e64 <checkint+0x64>
 8010e4a:	40d8      	lsrs	r0, r3
 8010e4c:	fa01 f302 	lsl.w	r3, r1, r2
 8010e50:	4318      	orrs	r0, r3
 8010e52:	40e1      	lsrs	r1, r4
 8010e54:	4308      	orrs	r0, r1
 8010e56:	f000 0001 	and.w	r0, r0, #1
 8010e5a:	f1d0 0002 	rsbs	r0, r0, #2
 8010e5e:	bd70      	pop	{r4, r5, r6, pc}
 8010e60:	2002      	movs	r0, #2
 8010e62:	e7fc      	b.n	8010e5e <checkint+0x5e>
 8010e64:	2000      	movs	r0, #0
 8010e66:	e7fa      	b.n	8010e5e <checkint+0x5e>

08010e68 <pow>:
 8010e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e6c:	ee10 4a90 	vmov	r4, s1
 8010e70:	ed2d 8b0a 	vpush	{d8-d12}
 8010e74:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010e78:	ee11 7a90 	vmov	r7, s3
 8010e7c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8010e80:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010e84:	429a      	cmp	r2, r3
 8010e86:	ee10 6a10 	vmov	r6, s0
 8010e8a:	ee11 0a10 	vmov	r0, s2
 8010e8e:	b086      	sub	sp, #24
 8010e90:	46d4      	mov	ip, sl
 8010e92:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010e96:	d806      	bhi.n	8010ea6 <pow+0x3e>
 8010e98:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010e9c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8010ea2:	f240 8156 	bls.w	8011152 <pow+0x2ea>
 8010ea6:	1802      	adds	r2, r0, r0
 8010ea8:	eb47 0107 	adc.w	r1, r7, r7
 8010eac:	f06f 0e01 	mvn.w	lr, #1
 8010eb0:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 8010eb4:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8010eb8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010ebc:	45ce      	cmp	lr, r9
 8010ebe:	eb73 0808 	sbcs.w	r8, r3, r8
 8010ec2:	d23f      	bcs.n	8010f44 <pow+0xdc>
 8010ec4:	ea52 0301 	orrs.w	r3, r2, r1
 8010ec8:	f04f 0300 	mov.w	r3, #0
 8010ecc:	d10c      	bne.n	8010ee8 <pow+0x80>
 8010ece:	19b6      	adds	r6, r6, r6
 8010ed0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010ed4:	4164      	adcs	r4, r4
 8010ed6:	42b3      	cmp	r3, r6
 8010ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010edc:	41a3      	sbcs	r3, r4
 8010ede:	f0c0 808c 	bcc.w	8010ffa <pow+0x192>
 8010ee2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010ee6:	e028      	b.n	8010f3a <pow+0xd2>
 8010ee8:	4da3      	ldr	r5, [pc, #652]	; (8011178 <pow+0x310>)
 8010eea:	42ac      	cmp	r4, r5
 8010eec:	bf08      	it	eq
 8010eee:	429e      	cmpeq	r6, r3
 8010ef0:	d107      	bne.n	8010f02 <pow+0x9a>
 8010ef2:	1800      	adds	r0, r0, r0
 8010ef4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010ef8:	417f      	adcs	r7, r7
 8010efa:	4283      	cmp	r3, r0
 8010efc:	4b9f      	ldr	r3, [pc, #636]	; (801117c <pow+0x314>)
 8010efe:	41bb      	sbcs	r3, r7
 8010f00:	e7ed      	b.n	8010ede <pow+0x76>
 8010f02:	19b6      	adds	r6, r6, r6
 8010f04:	489e      	ldr	r0, [pc, #632]	; (8011180 <pow+0x318>)
 8010f06:	4164      	adcs	r4, r4
 8010f08:	42b3      	cmp	r3, r6
 8010f0a:	eb70 0504 	sbcs.w	r5, r0, r4
 8010f0e:	d374      	bcc.n	8010ffa <pow+0x192>
 8010f10:	4281      	cmp	r1, r0
 8010f12:	bf08      	it	eq
 8010f14:	429a      	cmpeq	r2, r3
 8010f16:	d170      	bne.n	8010ffa <pow+0x192>
 8010f18:	4a9a      	ldr	r2, [pc, #616]	; (8011184 <pow+0x31c>)
 8010f1a:	4294      	cmp	r4, r2
 8010f1c:	bf08      	it	eq
 8010f1e:	429e      	cmpeq	r6, r3
 8010f20:	d0df      	beq.n	8010ee2 <pow+0x7a>
 8010f22:	4294      	cmp	r4, r2
 8010f24:	ea6f 0707 	mvn.w	r7, r7
 8010f28:	bf34      	ite	cc
 8010f2a:	2400      	movcc	r4, #0
 8010f2c:	2401      	movcs	r4, #1
 8010f2e:	0fff      	lsrs	r7, r7, #31
 8010f30:	42bc      	cmp	r4, r7
 8010f32:	f040 81d9 	bne.w	80112e8 <pow+0x480>
 8010f36:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010f3a:	b006      	add	sp, #24
 8010f3c:	ecbd 8b0a 	vpop	{d8-d12}
 8010f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f44:	eb16 0806 	adds.w	r8, r6, r6
 8010f48:	eb44 0904 	adc.w	r9, r4, r4
 8010f4c:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8010f50:	f169 0200 	sbc.w	r2, r9, #0
 8010f54:	458e      	cmp	lr, r1
 8010f56:	4193      	sbcs	r3, r2
 8010f58:	d223      	bcs.n	8010fa2 <pow+0x13a>
 8010f5a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010f5e:	2c00      	cmp	r4, #0
 8010f60:	da12      	bge.n	8010f88 <pow+0x120>
 8010f62:	4639      	mov	r1, r7
 8010f64:	f7ff ff4c 	bl	8010e00 <checkint>
 8010f68:	2801      	cmp	r0, #1
 8010f6a:	d10d      	bne.n	8010f88 <pow+0x120>
 8010f6c:	eeb1 0b40 	vneg.f64	d0, d0
 8010f70:	ea58 0309 	orrs.w	r3, r8, r9
 8010f74:	d10a      	bne.n	8010f8c <pow+0x124>
 8010f76:	2f00      	cmp	r7, #0
 8010f78:	dadf      	bge.n	8010f3a <pow+0xd2>
 8010f7a:	b006      	add	sp, #24
 8010f7c:	ecbd 8b0a 	vpop	{d8-d12}
 8010f80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f84:	f000 bfec 	b.w	8011f60 <__math_divzero>
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e7f1      	b.n	8010f70 <pow+0x108>
 8010f8c:	2f00      	cmp	r7, #0
 8010f8e:	dad4      	bge.n	8010f3a <pow+0xd2>
 8010f90:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010f94:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010f98:	ed8d 7b00 	vstr	d7, [sp]
 8010f9c:	ed9d 0b00 	vldr	d0, [sp]
 8010fa0:	e7cb      	b.n	8010f3a <pow+0xd2>
 8010fa2:	2c00      	cmp	r4, #0
 8010fa4:	da2c      	bge.n	8011000 <pow+0x198>
 8010fa6:	4639      	mov	r1, r7
 8010fa8:	f7ff ff2a 	bl	8010e00 <checkint>
 8010fac:	b930      	cbnz	r0, 8010fbc <pow+0x154>
 8010fae:	b006      	add	sp, #24
 8010fb0:	ecbd 8b0a 	vpop	{d8-d12}
 8010fb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb8:	f000 bfea 	b.w	8011f90 <__math_invalid>
 8010fbc:	2801      	cmp	r0, #1
 8010fbe:	bf14      	ite	ne
 8010fc0:	2000      	movne	r0, #0
 8010fc2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010fc6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010fca:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010fce:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010fd2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8010fd8:	d92d      	bls.n	8011036 <pow+0x1ce>
 8010fda:	4b67      	ldr	r3, [pc, #412]	; (8011178 <pow+0x310>)
 8010fdc:	2000      	movs	r0, #0
 8010fde:	429c      	cmp	r4, r3
 8010fe0:	bf08      	it	eq
 8010fe2:	4286      	cmpeq	r6, r0
 8010fe4:	f43f af7d 	beq.w	8010ee2 <pow+0x7a>
 8010fe8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010fec:	428a      	cmp	r2, r1
 8010fee:	d80c      	bhi.n	801100a <pow+0x1a2>
 8010ff0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010ff4:	42b0      	cmp	r0, r6
 8010ff6:	41a3      	sbcs	r3, r4
 8010ff8:	d204      	bcs.n	8011004 <pow+0x19c>
 8010ffa:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010ffe:	e79c      	b.n	8010f3a <pow+0xd2>
 8011000:	2000      	movs	r0, #0
 8011002:	e7e4      	b.n	8010fce <pow+0x166>
 8011004:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011008:	e797      	b.n	8010f3a <pow+0xd2>
 801100a:	2e01      	cmp	r6, #1
 801100c:	eb74 0303 	sbcs.w	r3, r4, r3
 8011010:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011014:	bf34      	ite	cc
 8011016:	2301      	movcc	r3, #1
 8011018:	2300      	movcs	r3, #0
 801101a:	4295      	cmp	r5, r2
 801101c:	bf8c      	ite	hi
 801101e:	2500      	movhi	r5, #0
 8011020:	2501      	movls	r5, #1
 8011022:	42ab      	cmp	r3, r5
 8011024:	f000 809d 	beq.w	8011162 <pow+0x2fa>
 8011028:	b006      	add	sp, #24
 801102a:	ecbd 8b0a 	vpop	{d8-d12}
 801102e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011032:	f000 bf8d 	b.w	8011f50 <__math_oflow>
 8011036:	f1bc 0f00 	cmp.w	ip, #0
 801103a:	d10b      	bne.n	8011054 <pow+0x1ec>
 801103c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011170 <pow+0x308>
 8011040:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011044:	ec53 2b17 	vmov	r2, r3, d7
 8011048:	ee17 6a10 	vmov	r6, s14
 801104c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011050:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011054:	4b4c      	ldr	r3, [pc, #304]	; (8011188 <pow+0x320>)
 8011056:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801105a:	4423      	add	r3, r4
 801105c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011060:	1519      	asrs	r1, r3, #20
 8011062:	0d1b      	lsrs	r3, r3, #20
 8011064:	051b      	lsls	r3, r3, #20
 8011066:	eba4 0903 	sub.w	r9, r4, r3
 801106a:	4b48      	ldr	r3, [pc, #288]	; (801118c <pow+0x324>)
 801106c:	ee04 1a10 	vmov	s8, r1
 8011070:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8011074:	f1b6 0800 	subs.w	r8, r6, #0
 8011078:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801107c:	ec49 8b15 	vmov	d5, r8, r9
 8011080:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8011084:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011088:	ed93 7b00 	vldr	d7, [r3]
 801108c:	ed93 5b02 	vldr	d5, [r3, #8]
 8011090:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8011094:	eea4 2b07 	vfma.f64	d2, d4, d7
 8011098:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801109c:	ee36 ab02 	vadd.f64	d10, d6, d2
 80110a0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80110a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80110a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80110ac:	ee32 2b06 	vadd.f64	d2, d2, d6
 80110b0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80110b4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80110b8:	ed93 4b08 	vldr	d4, [r3, #32]
 80110bc:	ee26 0b05 	vmul.f64	d0, d6, d5
 80110c0:	eeb0 9b40 	vmov.f64	d9, d0
 80110c4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80110c8:	ed93 5b06 	vldr	d5, [r3, #24]
 80110cc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80110d0:	ee26 bb00 	vmul.f64	d11, d6, d0
 80110d4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80110d8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80110dc:	ee3a ab48 	vsub.f64	d10, d10, d8
 80110e0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80110e4:	ee37 9b09 	vadd.f64	d9, d7, d9
 80110e8:	ee3a ab00 	vadd.f64	d10, d10, d0
 80110ec:	eea6 4b03 	vfma.f64	d4, d6, d3
 80110f0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80110f4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80110f8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80110fc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011100:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011104:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011108:	eeab ab05 	vfma.f64	d10, d11, d5
 801110c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011110:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011114:	ee17 3a90 	vmov	r3, s15
 8011118:	eeb0 5b47 	vmov.f64	d5, d7
 801111c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011120:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011124:	18b2      	adds	r2, r6, r2
 8011126:	2a3e      	cmp	r2, #62	; 0x3e
 8011128:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801112c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011130:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011134:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011138:	d92b      	bls.n	8011192 <pow+0x32a>
 801113a:	2a00      	cmp	r2, #0
 801113c:	da0b      	bge.n	8011156 <pow+0x2ee>
 801113e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011142:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011146:	2800      	cmp	r0, #0
 8011148:	f43f aef7 	beq.w	8010f3a <pow+0xd2>
 801114c:	eeb1 0b40 	vneg.f64	d0, d0
 8011150:	e6f3      	b.n	8010f3a <pow+0xd2>
 8011152:	2000      	movs	r0, #0
 8011154:	e77e      	b.n	8011054 <pow+0x1ec>
 8011156:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801115a:	d919      	bls.n	8011190 <pow+0x328>
 801115c:	2b00      	cmp	r3, #0
 801115e:	f6bf af63 	bge.w	8011028 <pow+0x1c0>
 8011162:	b006      	add	sp, #24
 8011164:	ecbd 8b0a 	vpop	{d8-d12}
 8011168:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801116c:	f000 bee8 	b.w	8011f40 <__math_uflow>
 8011170:	00000000 	.word	0x00000000
 8011174:	43300000 	.word	0x43300000
 8011178:	3ff00000 	.word	0x3ff00000
 801117c:	fff00000 	.word	0xfff00000
 8011180:	ffe00000 	.word	0xffe00000
 8011184:	7fe00000 	.word	0x7fe00000
 8011188:	c0196aab 	.word	0xc0196aab
 801118c:	08014d78 	.word	0x08014d78
 8011190:	2600      	movs	r6, #0
 8011192:	495d      	ldr	r1, [pc, #372]	; (8011308 <pow+0x4a0>)
 8011194:	ed91 4b02 	vldr	d4, [r1, #8]
 8011198:	ed91 3b00 	vldr	d3, [r1]
 801119c:	eeb0 6b44 	vmov.f64	d6, d4
 80111a0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80111a4:	ee16 5a10 	vmov	r5, s12
 80111a8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80111ac:	ed91 4b04 	vldr	d4, [r1, #16]
 80111b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80111b4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80111b8:	eeb0 0b47 	vmov.f64	d0, d7
 80111bc:	ed91 7b06 	vldr	d7, [r1, #24]
 80111c0:	18dc      	adds	r4, r3, r3
 80111c2:	f104 030f 	add.w	r3, r4, #15
 80111c6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80111ca:	eea6 0b07 	vfma.f64	d0, d6, d7
 80111ce:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80111d2:	ee35 0b00 	vadd.f64	d0, d5, d0
 80111d6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80111da:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80111de:	ed91 5b08 	vldr	d5, [r1, #32]
 80111e2:	ee30 7b07 	vadd.f64	d7, d0, d7
 80111e6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80111ea:	eea0 5b04 	vfma.f64	d5, d0, d4
 80111ee:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80111f2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80111f6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80111fa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80111fe:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011202:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011206:	eea0 5b04 	vfma.f64	d5, d0, d4
 801120a:	1940      	adds	r0, r0, r5
 801120c:	2700      	movs	r7, #0
 801120e:	eb17 020c 	adds.w	r2, r7, ip
 8011212:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011216:	eea6 7b05 	vfma.f64	d7, d6, d5
 801121a:	2e00      	cmp	r6, #0
 801121c:	d15f      	bne.n	80112de <pow+0x476>
 801121e:	42bd      	cmp	r5, r7
 8011220:	db13      	blt.n	801124a <pow+0x3e2>
 8011222:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011226:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801122a:	4610      	mov	r0, r2
 801122c:	ec41 0b10 	vmov	d0, r0, r1
 8011230:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011234:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80112f0 <pow+0x488>
 8011238:	ee20 0b07 	vmul.f64	d0, d0, d7
 801123c:	b006      	add	sp, #24
 801123e:	ecbd 8b0a 	vpop	{d8-d12}
 8011242:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011246:	f000 bebb 	b.w	8011fc0 <__math_check_oflow>
 801124a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801124e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011252:	4610      	mov	r0, r2
 8011254:	ec41 0b15 	vmov	d5, r0, r1
 8011258:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801125c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011260:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011264:	eeb0 3bc7 	vabs.f64	d3, d7
 8011268:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011270:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80112f8 <pow+0x490>
 8011274:	d52a      	bpl.n	80112cc <pow+0x464>
 8011276:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801127a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011282:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011286:	ee35 6b06 	vadd.f64	d6, d5, d6
 801128a:	bf48      	it	mi
 801128c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011290:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011294:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011298:	ee35 7b07 	vadd.f64	d7, d5, d7
 801129c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80112a0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80112a4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80112a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b0:	d104      	bne.n	80112bc <pow+0x454>
 80112b2:	4632      	mov	r2, r6
 80112b4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80112b8:	ec43 2b17 	vmov	d7, r2, r3
 80112bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80112c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80112c4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80112c8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80112cc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80112d0:	b006      	add	sp, #24
 80112d2:	ecbd 8b0a 	vpop	{d8-d12}
 80112d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112da:	f000 be68 	b.w	8011fae <__math_check_uflow>
 80112de:	ec43 2b10 	vmov	d0, r2, r3
 80112e2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80112e6:	e628      	b.n	8010f3a <pow+0xd2>
 80112e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011300 <pow+0x498>
 80112ec:	e625      	b.n	8010f3a <pow+0xd2>
 80112ee:	bf00      	nop
 80112f0:	00000000 	.word	0x00000000
 80112f4:	7f000000 	.word	0x7f000000
 80112f8:	00000000 	.word	0x00000000
 80112fc:	00100000 	.word	0x00100000
	...
 8011308:	08015f60 	.word	0x08015f60
 801130c:	00000000 	.word	0x00000000

08011310 <cos>:
 8011310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011312:	eeb0 7b40 	vmov.f64	d7, d0
 8011316:	ee17 3a90 	vmov	r3, s15
 801131a:	4a21      	ldr	r2, [pc, #132]	; (80113a0 <cos+0x90>)
 801131c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011320:	4293      	cmp	r3, r2
 8011322:	dc06      	bgt.n	8011332 <cos+0x22>
 8011324:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011398 <cos+0x88>
 8011328:	b005      	add	sp, #20
 801132a:	f85d eb04 	ldr.w	lr, [sp], #4
 801132e:	f000 ba8f 	b.w	8011850 <__kernel_cos>
 8011332:	4a1c      	ldr	r2, [pc, #112]	; (80113a4 <cos+0x94>)
 8011334:	4293      	cmp	r3, r2
 8011336:	dd04      	ble.n	8011342 <cos+0x32>
 8011338:	ee30 0b40 	vsub.f64	d0, d0, d0
 801133c:	b005      	add	sp, #20
 801133e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011342:	4668      	mov	r0, sp
 8011344:	f000 f89c 	bl	8011480 <__ieee754_rem_pio2>
 8011348:	f000 0003 	and.w	r0, r0, #3
 801134c:	2801      	cmp	r0, #1
 801134e:	d009      	beq.n	8011364 <cos+0x54>
 8011350:	2802      	cmp	r0, #2
 8011352:	d010      	beq.n	8011376 <cos+0x66>
 8011354:	b9b0      	cbnz	r0, 8011384 <cos+0x74>
 8011356:	ed9d 1b02 	vldr	d1, [sp, #8]
 801135a:	ed9d 0b00 	vldr	d0, [sp]
 801135e:	f000 fa77 	bl	8011850 <__kernel_cos>
 8011362:	e7eb      	b.n	801133c <cos+0x2c>
 8011364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011368:	ed9d 0b00 	vldr	d0, [sp]
 801136c:	f000 fd74 	bl	8011e58 <__kernel_sin>
 8011370:	eeb1 0b40 	vneg.f64	d0, d0
 8011374:	e7e2      	b.n	801133c <cos+0x2c>
 8011376:	ed9d 1b02 	vldr	d1, [sp, #8]
 801137a:	ed9d 0b00 	vldr	d0, [sp]
 801137e:	f000 fa67 	bl	8011850 <__kernel_cos>
 8011382:	e7f5      	b.n	8011370 <cos+0x60>
 8011384:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011388:	ed9d 0b00 	vldr	d0, [sp]
 801138c:	2001      	movs	r0, #1
 801138e:	f000 fd63 	bl	8011e58 <__kernel_sin>
 8011392:	e7d3      	b.n	801133c <cos+0x2c>
 8011394:	f3af 8000 	nop.w
	...
 80113a0:	3fe921fb 	.word	0x3fe921fb
 80113a4:	7fefffff 	.word	0x7fefffff

080113a8 <sin>:
 80113a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80113aa:	eeb0 7b40 	vmov.f64	d7, d0
 80113ae:	ee17 3a90 	vmov	r3, s15
 80113b2:	4a21      	ldr	r2, [pc, #132]	; (8011438 <sin+0x90>)
 80113b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80113b8:	4293      	cmp	r3, r2
 80113ba:	dc07      	bgt.n	80113cc <sin+0x24>
 80113bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011430 <sin+0x88>
 80113c0:	2000      	movs	r0, #0
 80113c2:	b005      	add	sp, #20
 80113c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80113c8:	f000 bd46 	b.w	8011e58 <__kernel_sin>
 80113cc:	4a1b      	ldr	r2, [pc, #108]	; (801143c <sin+0x94>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	dd04      	ble.n	80113dc <sin+0x34>
 80113d2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80113d6:	b005      	add	sp, #20
 80113d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80113dc:	4668      	mov	r0, sp
 80113de:	f000 f84f 	bl	8011480 <__ieee754_rem_pio2>
 80113e2:	f000 0003 	and.w	r0, r0, #3
 80113e6:	2801      	cmp	r0, #1
 80113e8:	d00a      	beq.n	8011400 <sin+0x58>
 80113ea:	2802      	cmp	r0, #2
 80113ec:	d00f      	beq.n	801140e <sin+0x66>
 80113ee:	b9c0      	cbnz	r0, 8011422 <sin+0x7a>
 80113f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113f4:	ed9d 0b00 	vldr	d0, [sp]
 80113f8:	2001      	movs	r0, #1
 80113fa:	f000 fd2d 	bl	8011e58 <__kernel_sin>
 80113fe:	e7ea      	b.n	80113d6 <sin+0x2e>
 8011400:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011404:	ed9d 0b00 	vldr	d0, [sp]
 8011408:	f000 fa22 	bl	8011850 <__kernel_cos>
 801140c:	e7e3      	b.n	80113d6 <sin+0x2e>
 801140e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011412:	ed9d 0b00 	vldr	d0, [sp]
 8011416:	2001      	movs	r0, #1
 8011418:	f000 fd1e 	bl	8011e58 <__kernel_sin>
 801141c:	eeb1 0b40 	vneg.f64	d0, d0
 8011420:	e7d9      	b.n	80113d6 <sin+0x2e>
 8011422:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011426:	ed9d 0b00 	vldr	d0, [sp]
 801142a:	f000 fa11 	bl	8011850 <__kernel_cos>
 801142e:	e7f5      	b.n	801141c <sin+0x74>
	...
 8011438:	3fe921fb 	.word	0x3fe921fb
 801143c:	7fefffff 	.word	0x7fefffff

08011440 <atan2f>:
 8011440:	f000 b962 	b.w	8011708 <__ieee754_atan2f>

08011444 <sqrtf>:
 8011444:	b508      	push	{r3, lr}
 8011446:	ed2d 8b02 	vpush	{d8}
 801144a:	eeb0 8a40 	vmov.f32	s16, s0
 801144e:	f000 f9f9 	bl	8011844 <__ieee754_sqrtf>
 8011452:	eeb4 8a48 	vcmp.f32	s16, s16
 8011456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145a:	d60c      	bvs.n	8011476 <sqrtf+0x32>
 801145c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801147c <sqrtf+0x38>
 8011460:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011468:	d505      	bpl.n	8011476 <sqrtf+0x32>
 801146a:	f000 ffa3 	bl	80123b4 <__errno>
 801146e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011472:	2321      	movs	r3, #33	; 0x21
 8011474:	6003      	str	r3, [r0, #0]
 8011476:	ecbd 8b02 	vpop	{d8}
 801147a:	bd08      	pop	{r3, pc}
 801147c:	00000000 	.word	0x00000000

08011480 <__ieee754_rem_pio2>:
 8011480:	b570      	push	{r4, r5, r6, lr}
 8011482:	eeb0 7b40 	vmov.f64	d7, d0
 8011486:	ee17 5a90 	vmov	r5, s15
 801148a:	4b99      	ldr	r3, [pc, #612]	; (80116f0 <__ieee754_rem_pio2+0x270>)
 801148c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011490:	429e      	cmp	r6, r3
 8011492:	b088      	sub	sp, #32
 8011494:	4604      	mov	r4, r0
 8011496:	dc07      	bgt.n	80114a8 <__ieee754_rem_pio2+0x28>
 8011498:	2200      	movs	r2, #0
 801149a:	2300      	movs	r3, #0
 801149c:	ed84 0b00 	vstr	d0, [r4]
 80114a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80114a4:	2000      	movs	r0, #0
 80114a6:	e01b      	b.n	80114e0 <__ieee754_rem_pio2+0x60>
 80114a8:	4b92      	ldr	r3, [pc, #584]	; (80116f4 <__ieee754_rem_pio2+0x274>)
 80114aa:	429e      	cmp	r6, r3
 80114ac:	dc3b      	bgt.n	8011526 <__ieee754_rem_pio2+0xa6>
 80114ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80114b2:	2d00      	cmp	r5, #0
 80114b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80116b0 <__ieee754_rem_pio2+0x230>
 80114b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80114bc:	dd19      	ble.n	80114f2 <__ieee754_rem_pio2+0x72>
 80114be:	ee30 7b46 	vsub.f64	d7, d0, d6
 80114c2:	429e      	cmp	r6, r3
 80114c4:	d00e      	beq.n	80114e4 <__ieee754_rem_pio2+0x64>
 80114c6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80116b8 <__ieee754_rem_pio2+0x238>
 80114ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 80114ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80114d2:	ed84 5b00 	vstr	d5, [r4]
 80114d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114da:	ed84 7b02 	vstr	d7, [r4, #8]
 80114de:	2001      	movs	r0, #1
 80114e0:	b008      	add	sp, #32
 80114e2:	bd70      	pop	{r4, r5, r6, pc}
 80114e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80116c0 <__ieee754_rem_pio2+0x240>
 80114e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80114ec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80116c8 <__ieee754_rem_pio2+0x248>
 80114f0:	e7eb      	b.n	80114ca <__ieee754_rem_pio2+0x4a>
 80114f2:	429e      	cmp	r6, r3
 80114f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80114f8:	d00e      	beq.n	8011518 <__ieee754_rem_pio2+0x98>
 80114fa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80116b8 <__ieee754_rem_pio2+0x238>
 80114fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011502:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011506:	ed84 5b00 	vstr	d5, [r4]
 801150a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801150e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011512:	ed84 7b02 	vstr	d7, [r4, #8]
 8011516:	e7e3      	b.n	80114e0 <__ieee754_rem_pio2+0x60>
 8011518:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80116c0 <__ieee754_rem_pio2+0x240>
 801151c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011520:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80116c8 <__ieee754_rem_pio2+0x248>
 8011524:	e7eb      	b.n	80114fe <__ieee754_rem_pio2+0x7e>
 8011526:	4b74      	ldr	r3, [pc, #464]	; (80116f8 <__ieee754_rem_pio2+0x278>)
 8011528:	429e      	cmp	r6, r3
 801152a:	dc70      	bgt.n	801160e <__ieee754_rem_pio2+0x18e>
 801152c:	f000 fd5c 	bl	8011fe8 <fabs>
 8011530:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011534:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80116d0 <__ieee754_rem_pio2+0x250>
 8011538:	eea0 7b06 	vfma.f64	d7, d0, d6
 801153c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011540:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011544:	ee17 0a90 	vmov	r0, s15
 8011548:	eeb1 4b45 	vneg.f64	d4, d5
 801154c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80116b0 <__ieee754_rem_pio2+0x230>
 8011550:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011554:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80116b8 <__ieee754_rem_pio2+0x238>
 8011558:	281f      	cmp	r0, #31
 801155a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801155e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011562:	dc08      	bgt.n	8011576 <__ieee754_rem_pio2+0xf6>
 8011564:	4b65      	ldr	r3, [pc, #404]	; (80116fc <__ieee754_rem_pio2+0x27c>)
 8011566:	1e42      	subs	r2, r0, #1
 8011568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801156c:	42b3      	cmp	r3, r6
 801156e:	d002      	beq.n	8011576 <__ieee754_rem_pio2+0xf6>
 8011570:	ed84 6b00 	vstr	d6, [r4]
 8011574:	e026      	b.n	80115c4 <__ieee754_rem_pio2+0x144>
 8011576:	ee16 3a90 	vmov	r3, s13
 801157a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801157e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011582:	2b10      	cmp	r3, #16
 8011584:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011588:	ddf2      	ble.n	8011570 <__ieee754_rem_pio2+0xf0>
 801158a:	eeb0 6b40 	vmov.f64	d6, d0
 801158e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80116c0 <__ieee754_rem_pio2+0x240>
 8011592:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80116c8 <__ieee754_rem_pio2+0x248>
 8011596:	eea4 6b07 	vfma.f64	d6, d4, d7
 801159a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801159e:	eea4 0b07 	vfma.f64	d0, d4, d7
 80115a2:	eeb0 7b40 	vmov.f64	d7, d0
 80115a6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80115aa:	ee36 3b47 	vsub.f64	d3, d6, d7
 80115ae:	ee13 3a90 	vmov	r3, s7
 80115b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80115b6:	1ad3      	subs	r3, r2, r3
 80115b8:	2b31      	cmp	r3, #49	; 0x31
 80115ba:	dc17      	bgt.n	80115ec <__ieee754_rem_pio2+0x16c>
 80115bc:	eeb0 0b46 	vmov.f64	d0, d6
 80115c0:	ed84 3b00 	vstr	d3, [r4]
 80115c4:	ed94 6b00 	vldr	d6, [r4]
 80115c8:	2d00      	cmp	r5, #0
 80115ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 80115ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 80115d2:	ed84 0b02 	vstr	d0, [r4, #8]
 80115d6:	da83      	bge.n	80114e0 <__ieee754_rem_pio2+0x60>
 80115d8:	eeb1 6b46 	vneg.f64	d6, d6
 80115dc:	eeb1 0b40 	vneg.f64	d0, d0
 80115e0:	ed84 6b00 	vstr	d6, [r4]
 80115e4:	ed84 0b02 	vstr	d0, [r4, #8]
 80115e8:	4240      	negs	r0, r0
 80115ea:	e779      	b.n	80114e0 <__ieee754_rem_pio2+0x60>
 80115ec:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80116d8 <__ieee754_rem_pio2+0x258>
 80115f0:	eeb0 0b46 	vmov.f64	d0, d6
 80115f4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80115f8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80115fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80116e0 <__ieee754_rem_pio2+0x260>
 8011600:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011604:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011608:	ee30 6b47 	vsub.f64	d6, d0, d7
 801160c:	e7b0      	b.n	8011570 <__ieee754_rem_pio2+0xf0>
 801160e:	4b3c      	ldr	r3, [pc, #240]	; (8011700 <__ieee754_rem_pio2+0x280>)
 8011610:	429e      	cmp	r6, r3
 8011612:	dd06      	ble.n	8011622 <__ieee754_rem_pio2+0x1a2>
 8011614:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011618:	ed80 7b02 	vstr	d7, [r0, #8]
 801161c:	ed80 7b00 	vstr	d7, [r0]
 8011620:	e740      	b.n	80114a4 <__ieee754_rem_pio2+0x24>
 8011622:	1532      	asrs	r2, r6, #20
 8011624:	ee10 0a10 	vmov	r0, s0
 8011628:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801162c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011630:	ec41 0b17 	vmov	d7, r0, r1
 8011634:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011638:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80116e8 <__ieee754_rem_pio2+0x268>
 801163c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011640:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011644:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011648:	ee27 7b05 	vmul.f64	d7, d7, d5
 801164c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011650:	a902      	add	r1, sp, #8
 8011652:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011656:	ee37 7b46 	vsub.f64	d7, d7, d6
 801165a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801165e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011662:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011666:	2603      	movs	r6, #3
 8011668:	4608      	mov	r0, r1
 801166a:	ed91 7b04 	vldr	d7, [r1, #16]
 801166e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011676:	4633      	mov	r3, r6
 8011678:	f1a1 0108 	sub.w	r1, r1, #8
 801167c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8011680:	d0f3      	beq.n	801166a <__ieee754_rem_pio2+0x1ea>
 8011682:	4920      	ldr	r1, [pc, #128]	; (8011704 <__ieee754_rem_pio2+0x284>)
 8011684:	9101      	str	r1, [sp, #4]
 8011686:	2102      	movs	r1, #2
 8011688:	9100      	str	r1, [sp, #0]
 801168a:	4621      	mov	r1, r4
 801168c:	f000 f94c 	bl	8011928 <__kernel_rem_pio2>
 8011690:	2d00      	cmp	r5, #0
 8011692:	f6bf af25 	bge.w	80114e0 <__ieee754_rem_pio2+0x60>
 8011696:	ed94 7b00 	vldr	d7, [r4]
 801169a:	eeb1 7b47 	vneg.f64	d7, d7
 801169e:	ed84 7b00 	vstr	d7, [r4]
 80116a2:	ed94 7b02 	vldr	d7, [r4, #8]
 80116a6:	eeb1 7b47 	vneg.f64	d7, d7
 80116aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80116ae:	e79b      	b.n	80115e8 <__ieee754_rem_pio2+0x168>
 80116b0:	54400000 	.word	0x54400000
 80116b4:	3ff921fb 	.word	0x3ff921fb
 80116b8:	1a626331 	.word	0x1a626331
 80116bc:	3dd0b461 	.word	0x3dd0b461
 80116c0:	1a600000 	.word	0x1a600000
 80116c4:	3dd0b461 	.word	0x3dd0b461
 80116c8:	2e037073 	.word	0x2e037073
 80116cc:	3ba3198a 	.word	0x3ba3198a
 80116d0:	6dc9c883 	.word	0x6dc9c883
 80116d4:	3fe45f30 	.word	0x3fe45f30
 80116d8:	2e000000 	.word	0x2e000000
 80116dc:	3ba3198a 	.word	0x3ba3198a
 80116e0:	252049c1 	.word	0x252049c1
 80116e4:	397b839a 	.word	0x397b839a
 80116e8:	00000000 	.word	0x00000000
 80116ec:	41700000 	.word	0x41700000
 80116f0:	3fe921fb 	.word	0x3fe921fb
 80116f4:	4002d97b 	.word	0x4002d97b
 80116f8:	413921fb 	.word	0x413921fb
 80116fc:	08015dc0 	.word	0x08015dc0
 8011700:	7fefffff 	.word	0x7fefffff
 8011704:	08015e40 	.word	0x08015e40

08011708 <__ieee754_atan2f>:
 8011708:	ee10 2a90 	vmov	r2, s1
 801170c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011710:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011714:	b510      	push	{r4, lr}
 8011716:	eef0 7a40 	vmov.f32	s15, s0
 801171a:	dc06      	bgt.n	801172a <__ieee754_atan2f+0x22>
 801171c:	ee10 0a10 	vmov	r0, s0
 8011720:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8011724:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011728:	dd04      	ble.n	8011734 <__ieee754_atan2f+0x2c>
 801172a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801172e:	eeb0 0a67 	vmov.f32	s0, s15
 8011732:	bd10      	pop	{r4, pc}
 8011734:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011738:	d103      	bne.n	8011742 <__ieee754_atan2f+0x3a>
 801173a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801173e:	f000 bd5d 	b.w	80121fc <atanf>
 8011742:	1794      	asrs	r4, r2, #30
 8011744:	f004 0402 	and.w	r4, r4, #2
 8011748:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801174c:	b93b      	cbnz	r3, 801175e <__ieee754_atan2f+0x56>
 801174e:	2c02      	cmp	r4, #2
 8011750:	d05c      	beq.n	801180c <__ieee754_atan2f+0x104>
 8011752:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011820 <__ieee754_atan2f+0x118>
 8011756:	2c03      	cmp	r4, #3
 8011758:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801175c:	e7e7      	b.n	801172e <__ieee754_atan2f+0x26>
 801175e:	b939      	cbnz	r1, 8011770 <__ieee754_atan2f+0x68>
 8011760:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011824 <__ieee754_atan2f+0x11c>
 8011764:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011828 <__ieee754_atan2f+0x120>
 8011768:	2800      	cmp	r0, #0
 801176a:	fe67 7a80 	vselge.f32	s15, s15, s0
 801176e:	e7de      	b.n	801172e <__ieee754_atan2f+0x26>
 8011770:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011774:	d110      	bne.n	8011798 <__ieee754_atan2f+0x90>
 8011776:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801177a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801177e:	d107      	bne.n	8011790 <__ieee754_atan2f+0x88>
 8011780:	2c02      	cmp	r4, #2
 8011782:	d846      	bhi.n	8011812 <__ieee754_atan2f+0x10a>
 8011784:	4b29      	ldr	r3, [pc, #164]	; (801182c <__ieee754_atan2f+0x124>)
 8011786:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801178a:	edd4 7a00 	vldr	s15, [r4]
 801178e:	e7ce      	b.n	801172e <__ieee754_atan2f+0x26>
 8011790:	2c02      	cmp	r4, #2
 8011792:	d841      	bhi.n	8011818 <__ieee754_atan2f+0x110>
 8011794:	4b26      	ldr	r3, [pc, #152]	; (8011830 <__ieee754_atan2f+0x128>)
 8011796:	e7f6      	b.n	8011786 <__ieee754_atan2f+0x7e>
 8011798:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801179c:	d0e0      	beq.n	8011760 <__ieee754_atan2f+0x58>
 801179e:	1a5b      	subs	r3, r3, r1
 80117a0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80117a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80117a8:	da1a      	bge.n	80117e0 <__ieee754_atan2f+0xd8>
 80117aa:	2a00      	cmp	r2, #0
 80117ac:	da01      	bge.n	80117b2 <__ieee754_atan2f+0xaa>
 80117ae:	313c      	adds	r1, #60	; 0x3c
 80117b0:	db19      	blt.n	80117e6 <__ieee754_atan2f+0xde>
 80117b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80117b6:	f000 fdf5 	bl	80123a4 <fabsf>
 80117ba:	f000 fd1f 	bl	80121fc <atanf>
 80117be:	eef0 7a40 	vmov.f32	s15, s0
 80117c2:	2c01      	cmp	r4, #1
 80117c4:	d012      	beq.n	80117ec <__ieee754_atan2f+0xe4>
 80117c6:	2c02      	cmp	r4, #2
 80117c8:	d017      	beq.n	80117fa <__ieee754_atan2f+0xf2>
 80117ca:	2c00      	cmp	r4, #0
 80117cc:	d0af      	beq.n	801172e <__ieee754_atan2f+0x26>
 80117ce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011834 <__ieee754_atan2f+0x12c>
 80117d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80117d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011838 <__ieee754_atan2f+0x130>
 80117da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80117de:	e7a6      	b.n	801172e <__ieee754_atan2f+0x26>
 80117e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011824 <__ieee754_atan2f+0x11c>
 80117e4:	e7ed      	b.n	80117c2 <__ieee754_atan2f+0xba>
 80117e6:	eddf 7a15 	vldr	s15, [pc, #84]	; 801183c <__ieee754_atan2f+0x134>
 80117ea:	e7ea      	b.n	80117c2 <__ieee754_atan2f+0xba>
 80117ec:	ee17 3a90 	vmov	r3, s15
 80117f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80117f4:	ee07 3a90 	vmov	s15, r3
 80117f8:	e799      	b.n	801172e <__ieee754_atan2f+0x26>
 80117fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8011834 <__ieee754_atan2f+0x12c>
 80117fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011802:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011838 <__ieee754_atan2f+0x130>
 8011806:	ee70 7a67 	vsub.f32	s15, s0, s15
 801180a:	e790      	b.n	801172e <__ieee754_atan2f+0x26>
 801180c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011838 <__ieee754_atan2f+0x130>
 8011810:	e78d      	b.n	801172e <__ieee754_atan2f+0x26>
 8011812:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011840 <__ieee754_atan2f+0x138>
 8011816:	e78a      	b.n	801172e <__ieee754_atan2f+0x26>
 8011818:	eddf 7a08 	vldr	s15, [pc, #32]	; 801183c <__ieee754_atan2f+0x134>
 801181c:	e787      	b.n	801172e <__ieee754_atan2f+0x26>
 801181e:	bf00      	nop
 8011820:	c0490fdb 	.word	0xc0490fdb
 8011824:	3fc90fdb 	.word	0x3fc90fdb
 8011828:	bfc90fdb 	.word	0xbfc90fdb
 801182c:	08015f48 	.word	0x08015f48
 8011830:	08015f54 	.word	0x08015f54
 8011834:	33bbbd2e 	.word	0x33bbbd2e
 8011838:	40490fdb 	.word	0x40490fdb
 801183c:	00000000 	.word	0x00000000
 8011840:	3f490fdb 	.word	0x3f490fdb

08011844 <__ieee754_sqrtf>:
 8011844:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011848:	4770      	bx	lr
 801184a:	0000      	movs	r0, r0
 801184c:	0000      	movs	r0, r0
	...

08011850 <__kernel_cos>:
 8011850:	ee10 1a90 	vmov	r1, s1
 8011854:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801185c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011860:	da05      	bge.n	801186e <__kernel_cos+0x1e>
 8011862:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011866:	ee17 3a90 	vmov	r3, s15
 801186a:	2b00      	cmp	r3, #0
 801186c:	d03d      	beq.n	80118ea <__kernel_cos+0x9a>
 801186e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011872:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80118f0 <__kernel_cos+0xa0>
 8011876:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80118f8 <__kernel_cos+0xa8>
 801187a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801187e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011900 <__kernel_cos+0xb0>
 8011882:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011886:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011908 <__kernel_cos+0xb8>
 801188a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801188e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011910 <__kernel_cos+0xc0>
 8011892:	4b23      	ldr	r3, [pc, #140]	; (8011920 <__kernel_cos+0xd0>)
 8011894:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011898:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011918 <__kernel_cos+0xc8>
 801189c:	4299      	cmp	r1, r3
 801189e:	eea7 6b03 	vfma.f64	d6, d7, d3
 80118a2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80118a6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80118aa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80118ae:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80118b2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80118b6:	dc04      	bgt.n	80118c2 <__kernel_cos+0x72>
 80118b8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80118bc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80118c0:	4770      	bx	lr
 80118c2:	4b18      	ldr	r3, [pc, #96]	; (8011924 <__kernel_cos+0xd4>)
 80118c4:	4299      	cmp	r1, r3
 80118c6:	dc0d      	bgt.n	80118e4 <__kernel_cos+0x94>
 80118c8:	2200      	movs	r2, #0
 80118ca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80118ce:	ec43 2b15 	vmov	d5, r2, r3
 80118d2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80118d6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80118da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80118de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80118e2:	4770      	bx	lr
 80118e4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80118e8:	e7f3      	b.n	80118d2 <__kernel_cos+0x82>
 80118ea:	eeb0 0b44 	vmov.f64	d0, d4
 80118ee:	4770      	bx	lr
 80118f0:	be8838d4 	.word	0xbe8838d4
 80118f4:	bda8fae9 	.word	0xbda8fae9
 80118f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80118fc:	3e21ee9e 	.word	0x3e21ee9e
 8011900:	809c52ad 	.word	0x809c52ad
 8011904:	be927e4f 	.word	0xbe927e4f
 8011908:	19cb1590 	.word	0x19cb1590
 801190c:	3efa01a0 	.word	0x3efa01a0
 8011910:	16c15177 	.word	0x16c15177
 8011914:	bf56c16c 	.word	0xbf56c16c
 8011918:	5555554c 	.word	0x5555554c
 801191c:	3fa55555 	.word	0x3fa55555
 8011920:	3fd33332 	.word	0x3fd33332
 8011924:	3fe90000 	.word	0x3fe90000

08011928 <__kernel_rem_pio2>:
 8011928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	ed2d 8b06 	vpush	{d8-d10}
 8011930:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8011934:	460f      	mov	r7, r1
 8011936:	9002      	str	r0, [sp, #8]
 8011938:	49c5      	ldr	r1, [pc, #788]	; (8011c50 <__kernel_rem_pio2+0x328>)
 801193a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801193c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011940:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	f112 0f14 	cmn.w	r2, #20
 801194a:	bfa8      	it	ge
 801194c:	2018      	movge	r0, #24
 801194e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8011952:	bfb8      	it	lt
 8011954:	2000      	movlt	r0, #0
 8011956:	f06f 0417 	mvn.w	r4, #23
 801195a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011c38 <__kernel_rem_pio2+0x310>
 801195e:	bfa4      	itt	ge
 8011960:	f1a2 0a03 	subge.w	sl, r2, #3
 8011964:	fb9a f0f0 	sdivge	r0, sl, r0
 8011968:	fb00 4404 	mla	r4, r0, r4, r4
 801196c:	1a46      	subs	r6, r0, r1
 801196e:	4414      	add	r4, r2
 8011970:	eb09 0c01 	add.w	ip, r9, r1
 8011974:	ad1a      	add	r5, sp, #104	; 0x68
 8011976:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801197a:	2200      	movs	r2, #0
 801197c:	4562      	cmp	r2, ip
 801197e:	dd10      	ble.n	80119a2 <__kernel_rem_pio2+0x7a>
 8011980:	9a01      	ldr	r2, [sp, #4]
 8011982:	ab1a      	add	r3, sp, #104	; 0x68
 8011984:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011988:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801198c:	f04f 0c00 	mov.w	ip, #0
 8011990:	45cc      	cmp	ip, r9
 8011992:	dc26      	bgt.n	80119e2 <__kernel_rem_pio2+0xba>
 8011994:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011c38 <__kernel_rem_pio2+0x310>
 8011998:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801199c:	4616      	mov	r6, r2
 801199e:	2500      	movs	r5, #0
 80119a0:	e015      	b.n	80119ce <__kernel_rem_pio2+0xa6>
 80119a2:	42d6      	cmn	r6, r2
 80119a4:	d409      	bmi.n	80119ba <__kernel_rem_pio2+0x92>
 80119a6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80119aa:	ee07 3a90 	vmov	s15, r3
 80119ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80119b2:	eca5 7b02 	vstmia	r5!, {d7}
 80119b6:	3201      	adds	r2, #1
 80119b8:	e7e0      	b.n	801197c <__kernel_rem_pio2+0x54>
 80119ba:	eeb0 7b46 	vmov.f64	d7, d6
 80119be:	e7f8      	b.n	80119b2 <__kernel_rem_pio2+0x8a>
 80119c0:	ecb8 5b02 	vldmia	r8!, {d5}
 80119c4:	ed96 6b00 	vldr	d6, [r6]
 80119c8:	3501      	adds	r5, #1
 80119ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 80119ce:	428d      	cmp	r5, r1
 80119d0:	f1a6 0608 	sub.w	r6, r6, #8
 80119d4:	ddf4      	ble.n	80119c0 <__kernel_rem_pio2+0x98>
 80119d6:	ecaa 7b02 	vstmia	sl!, {d7}
 80119da:	f10c 0c01 	add.w	ip, ip, #1
 80119de:	3208      	adds	r2, #8
 80119e0:	e7d6      	b.n	8011990 <__kernel_rem_pio2+0x68>
 80119e2:	ab06      	add	r3, sp, #24
 80119e4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011c40 <__kernel_rem_pio2+0x318>
 80119e8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011c48 <__kernel_rem_pio2+0x320>
 80119ec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80119f0:	9303      	str	r3, [sp, #12]
 80119f2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80119f6:	464d      	mov	r5, r9
 80119f8:	00eb      	lsls	r3, r5, #3
 80119fa:	9304      	str	r3, [sp, #16]
 80119fc:	ab92      	add	r3, sp, #584	; 0x248
 80119fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011a02:	f10d 0b18 	add.w	fp, sp, #24
 8011a06:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011a08:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011a0c:	465e      	mov	r6, fp
 8011a0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8011a12:	4628      	mov	r0, r5
 8011a14:	2800      	cmp	r0, #0
 8011a16:	f1a2 0208 	sub.w	r2, r2, #8
 8011a1a:	dc4c      	bgt.n	8011ab6 <__kernel_rem_pio2+0x18e>
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	9105      	str	r1, [sp, #20]
 8011a20:	f000 fb62 	bl	80120e8 <scalbn>
 8011a24:	eeb0 8b40 	vmov.f64	d8, d0
 8011a28:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011a2c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011a30:	f000 fae6 	bl	8012000 <floor>
 8011a34:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011a38:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011a3c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011a40:	2c00      	cmp	r4, #0
 8011a42:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8011a46:	ee17 8a90 	vmov	r8, s15
 8011a4a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011a4e:	9905      	ldr	r1, [sp, #20]
 8011a50:	dd43      	ble.n	8011ada <__kernel_rem_pio2+0x1b2>
 8011a52:	1e68      	subs	r0, r5, #1
 8011a54:	ab06      	add	r3, sp, #24
 8011a56:	f1c4 0c18 	rsb	ip, r4, #24
 8011a5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011a5e:	fa46 f20c 	asr.w	r2, r6, ip
 8011a62:	4490      	add	r8, r2
 8011a64:	fa02 f20c 	lsl.w	r2, r2, ip
 8011a68:	1ab6      	subs	r6, r6, r2
 8011a6a:	f1c4 0217 	rsb	r2, r4, #23
 8011a6e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8011a72:	4116      	asrs	r6, r2
 8011a74:	2e00      	cmp	r6, #0
 8011a76:	dd3f      	ble.n	8011af8 <__kernel_rem_pio2+0x1d0>
 8011a78:	f04f 0c00 	mov.w	ip, #0
 8011a7c:	f108 0801 	add.w	r8, r8, #1
 8011a80:	4660      	mov	r0, ip
 8011a82:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011a86:	4565      	cmp	r5, ip
 8011a88:	dc6e      	bgt.n	8011b68 <__kernel_rem_pio2+0x240>
 8011a8a:	2c00      	cmp	r4, #0
 8011a8c:	dd04      	ble.n	8011a98 <__kernel_rem_pio2+0x170>
 8011a8e:	2c01      	cmp	r4, #1
 8011a90:	d07f      	beq.n	8011b92 <__kernel_rem_pio2+0x26a>
 8011a92:	2c02      	cmp	r4, #2
 8011a94:	f000 8087 	beq.w	8011ba6 <__kernel_rem_pio2+0x27e>
 8011a98:	2e02      	cmp	r6, #2
 8011a9a:	d12d      	bne.n	8011af8 <__kernel_rem_pio2+0x1d0>
 8011a9c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011aa0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011aa4:	b340      	cbz	r0, 8011af8 <__kernel_rem_pio2+0x1d0>
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	9105      	str	r1, [sp, #20]
 8011aaa:	f000 fb1d 	bl	80120e8 <scalbn>
 8011aae:	9905      	ldr	r1, [sp, #20]
 8011ab0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011ab4:	e020      	b.n	8011af8 <__kernel_rem_pio2+0x1d0>
 8011ab6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011aba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011abe:	3801      	subs	r0, #1
 8011ac0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011ac4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011ac8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011acc:	eca6 0a01 	vstmia	r6!, {s0}
 8011ad0:	ed92 0b00 	vldr	d0, [r2]
 8011ad4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011ad8:	e79c      	b.n	8011a14 <__kernel_rem_pio2+0xec>
 8011ada:	d105      	bne.n	8011ae8 <__kernel_rem_pio2+0x1c0>
 8011adc:	1e6a      	subs	r2, r5, #1
 8011ade:	ab06      	add	r3, sp, #24
 8011ae0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011ae4:	15f6      	asrs	r6, r6, #23
 8011ae6:	e7c5      	b.n	8011a74 <__kernel_rem_pio2+0x14c>
 8011ae8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011aec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af4:	da36      	bge.n	8011b64 <__kernel_rem_pio2+0x23c>
 8011af6:	2600      	movs	r6, #0
 8011af8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b00:	f040 80aa 	bne.w	8011c58 <__kernel_rem_pio2+0x330>
 8011b04:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011b08:	4658      	mov	r0, fp
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	4548      	cmp	r0, r9
 8011b0e:	da52      	bge.n	8011bb6 <__kernel_rem_pio2+0x28e>
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	f000 8081 	beq.w	8011c18 <__kernel_rem_pio2+0x2f0>
 8011b16:	ab06      	add	r3, sp, #24
 8011b18:	3c18      	subs	r4, #24
 8011b1a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f000 8087 	beq.w	8011c32 <__kernel_rem_pio2+0x30a>
 8011b24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f000 fadd 	bl	80120e8 <scalbn>
 8011b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011b32:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011c40 <__kernel_rem_pio2+0x318>
 8011b36:	a96a      	add	r1, sp, #424	; 0x1a8
 8011b38:	f103 0208 	add.w	r2, r3, #8
 8011b3c:	1888      	adds	r0, r1, r2
 8011b3e:	4659      	mov	r1, fp
 8011b40:	2900      	cmp	r1, #0
 8011b42:	f280 80b7 	bge.w	8011cb4 <__kernel_rem_pio2+0x38c>
 8011b46:	4659      	mov	r1, fp
 8011b48:	2900      	cmp	r1, #0
 8011b4a:	f2c0 80d5 	blt.w	8011cf8 <__kernel_rem_pio2+0x3d0>
 8011b4e:	a86a      	add	r0, sp, #424	; 0x1a8
 8011b50:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011b54:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011c38 <__kernel_rem_pio2+0x310>
 8011b58:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011c54 <__kernel_rem_pio2+0x32c>
 8011b5c:	2400      	movs	r4, #0
 8011b5e:	ebab 0001 	sub.w	r0, fp, r1
 8011b62:	e0be      	b.n	8011ce2 <__kernel_rem_pio2+0x3ba>
 8011b64:	2602      	movs	r6, #2
 8011b66:	e787      	b.n	8011a78 <__kernel_rem_pio2+0x150>
 8011b68:	f8db 2000 	ldr.w	r2, [fp]
 8011b6c:	b958      	cbnz	r0, 8011b86 <__kernel_rem_pio2+0x25e>
 8011b6e:	b122      	cbz	r2, 8011b7a <__kernel_rem_pio2+0x252>
 8011b70:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011b74:	f8cb 2000 	str.w	r2, [fp]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	f10c 0c01 	add.w	ip, ip, #1
 8011b7e:	f10b 0b04 	add.w	fp, fp, #4
 8011b82:	4610      	mov	r0, r2
 8011b84:	e77f      	b.n	8011a86 <__kernel_rem_pio2+0x15e>
 8011b86:	ebae 0202 	sub.w	r2, lr, r2
 8011b8a:	f8cb 2000 	str.w	r2, [fp]
 8011b8e:	4602      	mov	r2, r0
 8011b90:	e7f3      	b.n	8011b7a <__kernel_rem_pio2+0x252>
 8011b92:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011b96:	ab06      	add	r3, sp, #24
 8011b98:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011b9c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011ba0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011ba4:	e778      	b.n	8011a98 <__kernel_rem_pio2+0x170>
 8011ba6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011baa:	ab06      	add	r3, sp, #24
 8011bac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011bb0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011bb4:	e7f4      	b.n	8011ba0 <__kernel_rem_pio2+0x278>
 8011bb6:	ab06      	add	r3, sp, #24
 8011bb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011bbc:	3801      	subs	r0, #1
 8011bbe:	431a      	orrs	r2, r3
 8011bc0:	e7a4      	b.n	8011b0c <__kernel_rem_pio2+0x1e4>
 8011bc2:	f10c 0c01 	add.w	ip, ip, #1
 8011bc6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d0f9      	beq.n	8011bc2 <__kernel_rem_pio2+0x29a>
 8011bce:	9b04      	ldr	r3, [sp, #16]
 8011bd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011bd4:	eb0d 0203 	add.w	r2, sp, r3
 8011bd8:	9b01      	ldr	r3, [sp, #4]
 8011bda:	18e8      	adds	r0, r5, r3
 8011bdc:	ab1a      	add	r3, sp, #104	; 0x68
 8011bde:	1c6e      	adds	r6, r5, #1
 8011be0:	3a98      	subs	r2, #152	; 0x98
 8011be2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011be6:	4465      	add	r5, ip
 8011be8:	42b5      	cmp	r5, r6
 8011bea:	f6ff af05 	blt.w	80119f8 <__kernel_rem_pio2+0xd0>
 8011bee:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011bf2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011bf6:	ee07 3a90 	vmov	s15, r3
 8011bfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011bfe:	f04f 0c00 	mov.w	ip, #0
 8011c02:	eca0 7b02 	vstmia	r0!, {d7}
 8011c06:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011c38 <__kernel_rem_pio2+0x310>
 8011c0a:	4680      	mov	r8, r0
 8011c0c:	458c      	cmp	ip, r1
 8011c0e:	dd07      	ble.n	8011c20 <__kernel_rem_pio2+0x2f8>
 8011c10:	eca2 7b02 	vstmia	r2!, {d7}
 8011c14:	3601      	adds	r6, #1
 8011c16:	e7e7      	b.n	8011be8 <__kernel_rem_pio2+0x2c0>
 8011c18:	9a03      	ldr	r2, [sp, #12]
 8011c1a:	f04f 0c01 	mov.w	ip, #1
 8011c1e:	e7d2      	b.n	8011bc6 <__kernel_rem_pio2+0x29e>
 8011c20:	ecbe 5b02 	vldmia	lr!, {d5}
 8011c24:	ed38 6b02 	vldmdb	r8!, {d6}
 8011c28:	f10c 0c01 	add.w	ip, ip, #1
 8011c2c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011c30:	e7ec      	b.n	8011c0c <__kernel_rem_pio2+0x2e4>
 8011c32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011c36:	e76e      	b.n	8011b16 <__kernel_rem_pio2+0x1ee>
	...
 8011c44:	3e700000 	.word	0x3e700000
 8011c48:	00000000 	.word	0x00000000
 8011c4c:	41700000 	.word	0x41700000
 8011c50:	08016810 	.word	0x08016810
 8011c54:	080167d0 	.word	0x080167d0
 8011c58:	4260      	negs	r0, r4
 8011c5a:	eeb0 0b48 	vmov.f64	d0, d8
 8011c5e:	f000 fa43 	bl	80120e8 <scalbn>
 8011c62:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011e40 <__kernel_rem_pio2+0x518>
 8011c66:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	db18      	blt.n	8011ca2 <__kernel_rem_pio2+0x37a>
 8011c70:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011e48 <__kernel_rem_pio2+0x520>
 8011c74:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011c78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011c7c:	aa06      	add	r2, sp, #24
 8011c7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011c82:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011c86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011c8a:	f105 0b01 	add.w	fp, r5, #1
 8011c8e:	ee10 3a10 	vmov	r3, s0
 8011c92:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011c96:	ee17 3a10 	vmov	r3, s14
 8011c9a:	3418      	adds	r4, #24
 8011c9c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011ca0:	e740      	b.n	8011b24 <__kernel_rem_pio2+0x1fc>
 8011ca2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011ca6:	aa06      	add	r2, sp, #24
 8011ca8:	ee10 3a10 	vmov	r3, s0
 8011cac:	46ab      	mov	fp, r5
 8011cae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011cb2:	e737      	b.n	8011b24 <__kernel_rem_pio2+0x1fc>
 8011cb4:	ac06      	add	r4, sp, #24
 8011cb6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011cba:	9401      	str	r4, [sp, #4]
 8011cbc:	ee07 4a90 	vmov	s15, r4
 8011cc0:	3901      	subs	r1, #1
 8011cc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011cc6:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011cca:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011cce:	ed20 7b02 	vstmdb	r0!, {d7}
 8011cd2:	e735      	b.n	8011b40 <__kernel_rem_pio2+0x218>
 8011cd4:	ecbc 5b02 	vldmia	ip!, {d5}
 8011cd8:	ecb5 6b02 	vldmia	r5!, {d6}
 8011cdc:	3401      	adds	r4, #1
 8011cde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011ce2:	454c      	cmp	r4, r9
 8011ce4:	dc01      	bgt.n	8011cea <__kernel_rem_pio2+0x3c2>
 8011ce6:	4284      	cmp	r4, r0
 8011ce8:	ddf4      	ble.n	8011cd4 <__kernel_rem_pio2+0x3ac>
 8011cea:	ac42      	add	r4, sp, #264	; 0x108
 8011cec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011cf0:	ed80 7b00 	vstr	d7, [r0]
 8011cf4:	3901      	subs	r1, #1
 8011cf6:	e727      	b.n	8011b48 <__kernel_rem_pio2+0x220>
 8011cf8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011cfa:	2902      	cmp	r1, #2
 8011cfc:	dc0a      	bgt.n	8011d14 <__kernel_rem_pio2+0x3ec>
 8011cfe:	2900      	cmp	r1, #0
 8011d00:	dc2c      	bgt.n	8011d5c <__kernel_rem_pio2+0x434>
 8011d02:	d045      	beq.n	8011d90 <__kernel_rem_pio2+0x468>
 8011d04:	f008 0007 	and.w	r0, r8, #7
 8011d08:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011d0c:	ecbd 8b06 	vpop	{d8-d10}
 8011d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d14:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011d16:	2a03      	cmp	r2, #3
 8011d18:	d1f4      	bne.n	8011d04 <__kernel_rem_pio2+0x3dc>
 8011d1a:	aa42      	add	r2, sp, #264	; 0x108
 8011d1c:	4413      	add	r3, r2
 8011d1e:	461a      	mov	r2, r3
 8011d20:	4619      	mov	r1, r3
 8011d22:	4658      	mov	r0, fp
 8011d24:	2800      	cmp	r0, #0
 8011d26:	f1a1 0108 	sub.w	r1, r1, #8
 8011d2a:	dc54      	bgt.n	8011dd6 <__kernel_rem_pio2+0x4ae>
 8011d2c:	4659      	mov	r1, fp
 8011d2e:	2901      	cmp	r1, #1
 8011d30:	f1a2 0208 	sub.w	r2, r2, #8
 8011d34:	dc5f      	bgt.n	8011df6 <__kernel_rem_pio2+0x4ce>
 8011d36:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011e50 <__kernel_rem_pio2+0x528>
 8011d3a:	3308      	adds	r3, #8
 8011d3c:	f1bb 0f01 	cmp.w	fp, #1
 8011d40:	dc69      	bgt.n	8011e16 <__kernel_rem_pio2+0x4ee>
 8011d42:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011d46:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011d4a:	2e00      	cmp	r6, #0
 8011d4c:	d16a      	bne.n	8011e24 <__kernel_rem_pio2+0x4fc>
 8011d4e:	ed87 5b00 	vstr	d5, [r7]
 8011d52:	ed87 6b02 	vstr	d6, [r7, #8]
 8011d56:	ed87 7b04 	vstr	d7, [r7, #16]
 8011d5a:	e7d3      	b.n	8011d04 <__kernel_rem_pio2+0x3dc>
 8011d5c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011e50 <__kernel_rem_pio2+0x528>
 8011d60:	ab42      	add	r3, sp, #264	; 0x108
 8011d62:	441a      	add	r2, r3
 8011d64:	465b      	mov	r3, fp
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	da26      	bge.n	8011db8 <__kernel_rem_pio2+0x490>
 8011d6a:	b35e      	cbz	r6, 8011dc4 <__kernel_rem_pio2+0x49c>
 8011d6c:	eeb1 7b46 	vneg.f64	d7, d6
 8011d70:	ed87 7b00 	vstr	d7, [r7]
 8011d74:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011d78:	aa44      	add	r2, sp, #272	; 0x110
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d80:	459b      	cmp	fp, r3
 8011d82:	da22      	bge.n	8011dca <__kernel_rem_pio2+0x4a2>
 8011d84:	b10e      	cbz	r6, 8011d8a <__kernel_rem_pio2+0x462>
 8011d86:	eeb1 7b47 	vneg.f64	d7, d7
 8011d8a:	ed87 7b02 	vstr	d7, [r7, #8]
 8011d8e:	e7b9      	b.n	8011d04 <__kernel_rem_pio2+0x3dc>
 8011d90:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011e50 <__kernel_rem_pio2+0x528>
 8011d94:	ab42      	add	r3, sp, #264	; 0x108
 8011d96:	441a      	add	r2, r3
 8011d98:	f1bb 0f00 	cmp.w	fp, #0
 8011d9c:	da05      	bge.n	8011daa <__kernel_rem_pio2+0x482>
 8011d9e:	b10e      	cbz	r6, 8011da4 <__kernel_rem_pio2+0x47c>
 8011da0:	eeb1 7b47 	vneg.f64	d7, d7
 8011da4:	ed87 7b00 	vstr	d7, [r7]
 8011da8:	e7ac      	b.n	8011d04 <__kernel_rem_pio2+0x3dc>
 8011daa:	ed32 6b02 	vldmdb	r2!, {d6}
 8011dae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011db2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011db6:	e7ef      	b.n	8011d98 <__kernel_rem_pio2+0x470>
 8011db8:	ed32 7b02 	vldmdb	r2!, {d7}
 8011dbc:	3b01      	subs	r3, #1
 8011dbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011dc2:	e7d0      	b.n	8011d66 <__kernel_rem_pio2+0x43e>
 8011dc4:	eeb0 7b46 	vmov.f64	d7, d6
 8011dc8:	e7d2      	b.n	8011d70 <__kernel_rem_pio2+0x448>
 8011dca:	ecb2 6b02 	vldmia	r2!, {d6}
 8011dce:	3301      	adds	r3, #1
 8011dd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011dd4:	e7d4      	b.n	8011d80 <__kernel_rem_pio2+0x458>
 8011dd6:	ed91 7b00 	vldr	d7, [r1]
 8011dda:	ed91 5b02 	vldr	d5, [r1, #8]
 8011dde:	3801      	subs	r0, #1
 8011de0:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011de4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011de8:	ed81 6b00 	vstr	d6, [r1]
 8011dec:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011df0:	ed81 7b02 	vstr	d7, [r1, #8]
 8011df4:	e796      	b.n	8011d24 <__kernel_rem_pio2+0x3fc>
 8011df6:	ed92 7b00 	vldr	d7, [r2]
 8011dfa:	ed92 5b02 	vldr	d5, [r2, #8]
 8011dfe:	3901      	subs	r1, #1
 8011e00:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011e04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011e08:	ed82 6b00 	vstr	d6, [r2]
 8011e0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011e10:	ed82 7b02 	vstr	d7, [r2, #8]
 8011e14:	e78b      	b.n	8011d2e <__kernel_rem_pio2+0x406>
 8011e16:	ed33 6b02 	vldmdb	r3!, {d6}
 8011e1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011e1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011e22:	e78b      	b.n	8011d3c <__kernel_rem_pio2+0x414>
 8011e24:	eeb1 5b45 	vneg.f64	d5, d5
 8011e28:	eeb1 6b46 	vneg.f64	d6, d6
 8011e2c:	ed87 5b00 	vstr	d5, [r7]
 8011e30:	eeb1 7b47 	vneg.f64	d7, d7
 8011e34:	ed87 6b02 	vstr	d6, [r7, #8]
 8011e38:	e78d      	b.n	8011d56 <__kernel_rem_pio2+0x42e>
 8011e3a:	bf00      	nop
 8011e3c:	f3af 8000 	nop.w
 8011e40:	00000000 	.word	0x00000000
 8011e44:	41700000 	.word	0x41700000
 8011e48:	00000000 	.word	0x00000000
 8011e4c:	3e700000 	.word	0x3e700000
	...

08011e58 <__kernel_sin>:
 8011e58:	ee10 3a90 	vmov	r3, s1
 8011e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e60:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011e64:	da04      	bge.n	8011e70 <__kernel_sin+0x18>
 8011e66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011e6a:	ee17 3a90 	vmov	r3, s15
 8011e6e:	b35b      	cbz	r3, 8011ec8 <__kernel_sin+0x70>
 8011e70:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011e74:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011e78:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011ed0 <__kernel_sin+0x78>
 8011e7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ed8 <__kernel_sin+0x80>
 8011e80:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011e84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011ee0 <__kernel_sin+0x88>
 8011e88:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011e8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ee8 <__kernel_sin+0x90>
 8011e90:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011e94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011ef0 <__kernel_sin+0x98>
 8011e98:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011e9c:	b930      	cbnz	r0, 8011eac <__kernel_sin+0x54>
 8011e9e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011ef8 <__kernel_sin+0xa0>
 8011ea2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011ea6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011eaa:	4770      	bx	lr
 8011eac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011eb0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011eb4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011eb8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011ebc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011f00 <__kernel_sin+0xa8>
 8011ec0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011ec4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	f3af 8000 	nop.w
 8011ed0:	5acfd57c 	.word	0x5acfd57c
 8011ed4:	3de5d93a 	.word	0x3de5d93a
 8011ed8:	8a2b9ceb 	.word	0x8a2b9ceb
 8011edc:	be5ae5e6 	.word	0xbe5ae5e6
 8011ee0:	57b1fe7d 	.word	0x57b1fe7d
 8011ee4:	3ec71de3 	.word	0x3ec71de3
 8011ee8:	19c161d5 	.word	0x19c161d5
 8011eec:	bf2a01a0 	.word	0xbf2a01a0
 8011ef0:	1110f8a6 	.word	0x1110f8a6
 8011ef4:	3f811111 	.word	0x3f811111
 8011ef8:	55555549 	.word	0x55555549
 8011efc:	bfc55555 	.word	0xbfc55555
 8011f00:	55555549 	.word	0x55555549
 8011f04:	3fc55555 	.word	0x3fc55555

08011f08 <with_errno>:
 8011f08:	b513      	push	{r0, r1, r4, lr}
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	ed8d 0b00 	vstr	d0, [sp]
 8011f10:	f000 fa50 	bl	80123b4 <__errno>
 8011f14:	ed9d 0b00 	vldr	d0, [sp]
 8011f18:	6004      	str	r4, [r0, #0]
 8011f1a:	b002      	add	sp, #8
 8011f1c:	bd10      	pop	{r4, pc}

08011f1e <xflow>:
 8011f1e:	b082      	sub	sp, #8
 8011f20:	b158      	cbz	r0, 8011f3a <xflow+0x1c>
 8011f22:	eeb1 7b40 	vneg.f64	d7, d0
 8011f26:	ed8d 7b00 	vstr	d7, [sp]
 8011f2a:	ed9d 7b00 	vldr	d7, [sp]
 8011f2e:	2022      	movs	r0, #34	; 0x22
 8011f30:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011f34:	b002      	add	sp, #8
 8011f36:	f7ff bfe7 	b.w	8011f08 <with_errno>
 8011f3a:	eeb0 7b40 	vmov.f64	d7, d0
 8011f3e:	e7f2      	b.n	8011f26 <xflow+0x8>

08011f40 <__math_uflow>:
 8011f40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f48 <__math_uflow+0x8>
 8011f44:	f7ff bfeb 	b.w	8011f1e <xflow>
 8011f48:	00000000 	.word	0x00000000
 8011f4c:	10000000 	.word	0x10000000

08011f50 <__math_oflow>:
 8011f50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f58 <__math_oflow+0x8>
 8011f54:	f7ff bfe3 	b.w	8011f1e <xflow>
 8011f58:	00000000 	.word	0x00000000
 8011f5c:	70000000 	.word	0x70000000

08011f60 <__math_divzero>:
 8011f60:	b082      	sub	sp, #8
 8011f62:	2800      	cmp	r0, #0
 8011f64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011f68:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011f6c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011f70:	ed8d 7b00 	vstr	d7, [sp]
 8011f74:	ed9d 0b00 	vldr	d0, [sp]
 8011f78:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011f88 <__math_divzero+0x28>
 8011f7c:	2022      	movs	r0, #34	; 0x22
 8011f7e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011f82:	b002      	add	sp, #8
 8011f84:	f7ff bfc0 	b.w	8011f08 <with_errno>
	...

08011f90 <__math_invalid>:
 8011f90:	eeb0 7b40 	vmov.f64	d7, d0
 8011f94:	eeb4 7b47 	vcmp.f64	d7, d7
 8011f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011fa0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011fa4:	d602      	bvs.n	8011fac <__math_invalid+0x1c>
 8011fa6:	2021      	movs	r0, #33	; 0x21
 8011fa8:	f7ff bfae 	b.w	8011f08 <with_errno>
 8011fac:	4770      	bx	lr

08011fae <__math_check_uflow>:
 8011fae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb6:	d102      	bne.n	8011fbe <__math_check_uflow+0x10>
 8011fb8:	2022      	movs	r0, #34	; 0x22
 8011fba:	f7ff bfa5 	b.w	8011f08 <with_errno>
 8011fbe:	4770      	bx	lr

08011fc0 <__math_check_oflow>:
 8011fc0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011fe0 <__math_check_oflow+0x20>
 8011fc4:	eeb0 7bc0 	vabs.f64	d7, d0
 8011fc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8011fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd0:	dd02      	ble.n	8011fd8 <__math_check_oflow+0x18>
 8011fd2:	2022      	movs	r0, #34	; 0x22
 8011fd4:	f7ff bf98 	b.w	8011f08 <with_errno>
 8011fd8:	4770      	bx	lr
 8011fda:	bf00      	nop
 8011fdc:	f3af 8000 	nop.w
 8011fe0:	ffffffff 	.word	0xffffffff
 8011fe4:	7fefffff 	.word	0x7fefffff

08011fe8 <fabs>:
 8011fe8:	ec51 0b10 	vmov	r0, r1, d0
 8011fec:	ee10 2a10 	vmov	r2, s0
 8011ff0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ff4:	ec43 2b10 	vmov	d0, r2, r3
 8011ff8:	4770      	bx	lr
 8011ffa:	0000      	movs	r0, r0
 8011ffc:	0000      	movs	r0, r0
	...

08012000 <floor>:
 8012000:	ee10 1a90 	vmov	r1, s1
 8012004:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012008:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801200c:	2b13      	cmp	r3, #19
 801200e:	b530      	push	{r4, r5, lr}
 8012010:	ee10 0a10 	vmov	r0, s0
 8012014:	ee10 5a10 	vmov	r5, s0
 8012018:	dc31      	bgt.n	801207e <floor+0x7e>
 801201a:	2b00      	cmp	r3, #0
 801201c:	da15      	bge.n	801204a <floor+0x4a>
 801201e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80120d8 <floor+0xd8>
 8012022:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012026:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202e:	dd07      	ble.n	8012040 <floor+0x40>
 8012030:	2900      	cmp	r1, #0
 8012032:	da4e      	bge.n	80120d2 <floor+0xd2>
 8012034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012038:	4318      	orrs	r0, r3
 801203a:	d001      	beq.n	8012040 <floor+0x40>
 801203c:	4928      	ldr	r1, [pc, #160]	; (80120e0 <floor+0xe0>)
 801203e:	2000      	movs	r0, #0
 8012040:	460b      	mov	r3, r1
 8012042:	4602      	mov	r2, r0
 8012044:	ec43 2b10 	vmov	d0, r2, r3
 8012048:	e020      	b.n	801208c <floor+0x8c>
 801204a:	4a26      	ldr	r2, [pc, #152]	; (80120e4 <floor+0xe4>)
 801204c:	411a      	asrs	r2, r3
 801204e:	ea01 0402 	and.w	r4, r1, r2
 8012052:	4304      	orrs	r4, r0
 8012054:	d01a      	beq.n	801208c <floor+0x8c>
 8012056:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80120d8 <floor+0xd8>
 801205a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801205e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012066:	ddeb      	ble.n	8012040 <floor+0x40>
 8012068:	2900      	cmp	r1, #0
 801206a:	bfbe      	ittt	lt
 801206c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012070:	fa40 f303 	asrlt.w	r3, r0, r3
 8012074:	18c9      	addlt	r1, r1, r3
 8012076:	ea21 0102 	bic.w	r1, r1, r2
 801207a:	2000      	movs	r0, #0
 801207c:	e7e0      	b.n	8012040 <floor+0x40>
 801207e:	2b33      	cmp	r3, #51	; 0x33
 8012080:	dd05      	ble.n	801208e <floor+0x8e>
 8012082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012086:	d101      	bne.n	801208c <floor+0x8c>
 8012088:	ee30 0b00 	vadd.f64	d0, d0, d0
 801208c:	bd30      	pop	{r4, r5, pc}
 801208e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012096:	40e2      	lsrs	r2, r4
 8012098:	4202      	tst	r2, r0
 801209a:	d0f7      	beq.n	801208c <floor+0x8c>
 801209c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80120d8 <floor+0xd8>
 80120a0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80120a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	ddc8      	ble.n	8012040 <floor+0x40>
 80120ae:	2900      	cmp	r1, #0
 80120b0:	da02      	bge.n	80120b8 <floor+0xb8>
 80120b2:	2b14      	cmp	r3, #20
 80120b4:	d103      	bne.n	80120be <floor+0xbe>
 80120b6:	3101      	adds	r1, #1
 80120b8:	ea20 0002 	bic.w	r0, r0, r2
 80120bc:	e7c0      	b.n	8012040 <floor+0x40>
 80120be:	2401      	movs	r4, #1
 80120c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80120c4:	fa04 f303 	lsl.w	r3, r4, r3
 80120c8:	4418      	add	r0, r3
 80120ca:	42a8      	cmp	r0, r5
 80120cc:	bf38      	it	cc
 80120ce:	1909      	addcc	r1, r1, r4
 80120d0:	e7f2      	b.n	80120b8 <floor+0xb8>
 80120d2:	2000      	movs	r0, #0
 80120d4:	4601      	mov	r1, r0
 80120d6:	e7b3      	b.n	8012040 <floor+0x40>
 80120d8:	8800759c 	.word	0x8800759c
 80120dc:	7e37e43c 	.word	0x7e37e43c
 80120e0:	bff00000 	.word	0xbff00000
 80120e4:	000fffff 	.word	0x000fffff

080120e8 <scalbn>:
 80120e8:	ee10 1a90 	vmov	r1, s1
 80120ec:	b510      	push	{r4, lr}
 80120ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80120f2:	b98c      	cbnz	r4, 8012118 <scalbn+0x30>
 80120f4:	ee10 3a10 	vmov	r3, s0
 80120f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80120fc:	430b      	orrs	r3, r1
 80120fe:	d011      	beq.n	8012124 <scalbn+0x3c>
 8012100:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80121c8 <scalbn+0xe0>
 8012104:	4b3c      	ldr	r3, [pc, #240]	; (80121f8 <scalbn+0x110>)
 8012106:	ee20 0b07 	vmul.f64	d0, d0, d7
 801210a:	4298      	cmp	r0, r3
 801210c:	da0b      	bge.n	8012126 <scalbn+0x3e>
 801210e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80121d0 <scalbn+0xe8>
 8012112:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012116:	e005      	b.n	8012124 <scalbn+0x3c>
 8012118:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801211c:	429c      	cmp	r4, r3
 801211e:	d107      	bne.n	8012130 <scalbn+0x48>
 8012120:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012124:	bd10      	pop	{r4, pc}
 8012126:	ee10 1a90 	vmov	r1, s1
 801212a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801212e:	3c36      	subs	r4, #54	; 0x36
 8012130:	4404      	add	r4, r0
 8012132:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012136:	429c      	cmp	r4, r3
 8012138:	dd0d      	ble.n	8012156 <scalbn+0x6e>
 801213a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80121d8 <scalbn+0xf0>
 801213e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80121e0 <scalbn+0xf8>
 8012142:	eeb0 6b47 	vmov.f64	d6, d7
 8012146:	ee10 3a90 	vmov	r3, s1
 801214a:	2b00      	cmp	r3, #0
 801214c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012150:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012154:	e7e6      	b.n	8012124 <scalbn+0x3c>
 8012156:	2c00      	cmp	r4, #0
 8012158:	dd0a      	ble.n	8012170 <scalbn+0x88>
 801215a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801215e:	ec53 2b10 	vmov	r2, r3, d0
 8012162:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012166:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801216a:	ec43 2b10 	vmov	d0, r2, r3
 801216e:	e7d9      	b.n	8012124 <scalbn+0x3c>
 8012170:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012174:	da19      	bge.n	80121aa <scalbn+0xc2>
 8012176:	f24c 3350 	movw	r3, #50000	; 0xc350
 801217a:	4298      	cmp	r0, r3
 801217c:	ee10 3a90 	vmov	r3, s1
 8012180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012184:	dd09      	ble.n	801219a <scalbn+0xb2>
 8012186:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80121d8 <scalbn+0xf0>
 801218a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80121e0 <scalbn+0xf8>
 801218e:	eeb0 7b40 	vmov.f64	d7, d0
 8012192:	2b00      	cmp	r3, #0
 8012194:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012198:	e7bb      	b.n	8012112 <scalbn+0x2a>
 801219a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80121d0 <scalbn+0xe8>
 801219e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80121e8 <scalbn+0x100>
 80121a2:	eeb0 7b40 	vmov.f64	d7, d0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	e7f4      	b.n	8012194 <scalbn+0xac>
 80121aa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80121ae:	ec53 2b10 	vmov	r2, r3, d0
 80121b2:	3436      	adds	r4, #54	; 0x36
 80121b4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80121b8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80121bc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80121f0 <scalbn+0x108>
 80121c0:	ec43 2b10 	vmov	d0, r2, r3
 80121c4:	e7a5      	b.n	8012112 <scalbn+0x2a>
 80121c6:	bf00      	nop
 80121c8:	00000000 	.word	0x00000000
 80121cc:	43500000 	.word	0x43500000
 80121d0:	c2f8f359 	.word	0xc2f8f359
 80121d4:	01a56e1f 	.word	0x01a56e1f
 80121d8:	8800759c 	.word	0x8800759c
 80121dc:	7e37e43c 	.word	0x7e37e43c
 80121e0:	8800759c 	.word	0x8800759c
 80121e4:	fe37e43c 	.word	0xfe37e43c
 80121e8:	c2f8f359 	.word	0xc2f8f359
 80121ec:	81a56e1f 	.word	0x81a56e1f
 80121f0:	00000000 	.word	0x00000000
 80121f4:	3c900000 	.word	0x3c900000
 80121f8:	ffff3cb0 	.word	0xffff3cb0

080121fc <atanf>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	ee10 5a10 	vmov	r5, s0
 8012202:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012206:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801220a:	eef0 7a40 	vmov.f32	s15, s0
 801220e:	db0f      	blt.n	8012230 <atanf+0x34>
 8012210:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012214:	dd04      	ble.n	8012220 <atanf+0x24>
 8012216:	ee70 7a00 	vadd.f32	s15, s0, s0
 801221a:	eeb0 0a67 	vmov.f32	s0, s15
 801221e:	bd38      	pop	{r3, r4, r5, pc}
 8012220:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012358 <atanf+0x15c>
 8012224:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801235c <atanf+0x160>
 8012228:	2d00      	cmp	r5, #0
 801222a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801222e:	e7f4      	b.n	801221a <atanf+0x1e>
 8012230:	4b4b      	ldr	r3, [pc, #300]	; (8012360 <atanf+0x164>)
 8012232:	429c      	cmp	r4, r3
 8012234:	dc10      	bgt.n	8012258 <atanf+0x5c>
 8012236:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801223a:	da0a      	bge.n	8012252 <atanf+0x56>
 801223c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012364 <atanf+0x168>
 8012240:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012248:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012250:	dce3      	bgt.n	801221a <atanf+0x1e>
 8012252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012256:	e013      	b.n	8012280 <atanf+0x84>
 8012258:	f000 f8a4 	bl	80123a4 <fabsf>
 801225c:	4b42      	ldr	r3, [pc, #264]	; (8012368 <atanf+0x16c>)
 801225e:	429c      	cmp	r4, r3
 8012260:	dc4f      	bgt.n	8012302 <atanf+0x106>
 8012262:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012266:	429c      	cmp	r4, r3
 8012268:	dc41      	bgt.n	80122ee <atanf+0xf2>
 801226a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801226e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012272:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012276:	2300      	movs	r3, #0
 8012278:	ee30 0a27 	vadd.f32	s0, s0, s15
 801227c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012280:	1c5a      	adds	r2, r3, #1
 8012282:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012286:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801236c <atanf+0x170>
 801228a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012370 <atanf+0x174>
 801228e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8012374 <atanf+0x178>
 8012292:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012296:	eee6 5a87 	vfma.f32	s11, s13, s14
 801229a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012378 <atanf+0x17c>
 801229e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80122a2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801237c <atanf+0x180>
 80122a6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80122aa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8012380 <atanf+0x184>
 80122ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80122b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012384 <atanf+0x188>
 80122b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80122ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012388 <atanf+0x18c>
 80122be:	eea6 5a87 	vfma.f32	s10, s13, s14
 80122c2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801238c <atanf+0x190>
 80122c6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80122ca:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8012390 <atanf+0x194>
 80122ce:	eea7 5a26 	vfma.f32	s10, s14, s13
 80122d2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012394 <atanf+0x198>
 80122d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80122da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80122de:	eea5 7a86 	vfma.f32	s14, s11, s12
 80122e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80122e6:	d121      	bne.n	801232c <atanf+0x130>
 80122e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122ec:	e795      	b.n	801221a <atanf+0x1e>
 80122ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80122f2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80122f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80122fa:	2301      	movs	r3, #1
 80122fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012300:	e7be      	b.n	8012280 <atanf+0x84>
 8012302:	4b25      	ldr	r3, [pc, #148]	; (8012398 <atanf+0x19c>)
 8012304:	429c      	cmp	r4, r3
 8012306:	dc0b      	bgt.n	8012320 <atanf+0x124>
 8012308:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801230c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012310:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012314:	2302      	movs	r3, #2
 8012316:	ee70 6a67 	vsub.f32	s13, s0, s15
 801231a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801231e:	e7af      	b.n	8012280 <atanf+0x84>
 8012320:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012324:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012328:	2303      	movs	r3, #3
 801232a:	e7a9      	b.n	8012280 <atanf+0x84>
 801232c:	4a1b      	ldr	r2, [pc, #108]	; (801239c <atanf+0x1a0>)
 801232e:	491c      	ldr	r1, [pc, #112]	; (80123a0 <atanf+0x1a4>)
 8012330:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012334:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012338:	ed93 0a00 	vldr	s0, [r3]
 801233c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012340:	ed92 0a00 	vldr	s0, [r2]
 8012344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012348:	2d00      	cmp	r5, #0
 801234a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801234e:	bfb8      	it	lt
 8012350:	eef1 7a67 	vneglt.f32	s15, s15
 8012354:	e761      	b.n	801221a <atanf+0x1e>
 8012356:	bf00      	nop
 8012358:	3fc90fdb 	.word	0x3fc90fdb
 801235c:	bfc90fdb 	.word	0xbfc90fdb
 8012360:	3edfffff 	.word	0x3edfffff
 8012364:	7149f2ca 	.word	0x7149f2ca
 8012368:	3f97ffff 	.word	0x3f97ffff
 801236c:	3c8569d7 	.word	0x3c8569d7
 8012370:	3d4bda59 	.word	0x3d4bda59
 8012374:	bd6ef16b 	.word	0xbd6ef16b
 8012378:	3d886b35 	.word	0x3d886b35
 801237c:	3dba2e6e 	.word	0x3dba2e6e
 8012380:	3e124925 	.word	0x3e124925
 8012384:	3eaaaaab 	.word	0x3eaaaaab
 8012388:	bd15a221 	.word	0xbd15a221
 801238c:	bd9d8795 	.word	0xbd9d8795
 8012390:	bde38e38 	.word	0xbde38e38
 8012394:	be4ccccd 	.word	0xbe4ccccd
 8012398:	401bffff 	.word	0x401bffff
 801239c:	08016820 	.word	0x08016820
 80123a0:	08016830 	.word	0x08016830

080123a4 <fabsf>:
 80123a4:	ee10 3a10 	vmov	r3, s0
 80123a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80123ac:	ee00 3a10 	vmov	s0, r3
 80123b0:	4770      	bx	lr
	...

080123b4 <__errno>:
 80123b4:	4b01      	ldr	r3, [pc, #4]	; (80123bc <__errno+0x8>)
 80123b6:	6818      	ldr	r0, [r3, #0]
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	24000244 	.word	0x24000244

080123c0 <__libc_init_array>:
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	4d0d      	ldr	r5, [pc, #52]	; (80123f8 <__libc_init_array+0x38>)
 80123c4:	4c0d      	ldr	r4, [pc, #52]	; (80123fc <__libc_init_array+0x3c>)
 80123c6:	1b64      	subs	r4, r4, r5
 80123c8:	10a4      	asrs	r4, r4, #2
 80123ca:	2600      	movs	r6, #0
 80123cc:	42a6      	cmp	r6, r4
 80123ce:	d109      	bne.n	80123e4 <__libc_init_array+0x24>
 80123d0:	4d0b      	ldr	r5, [pc, #44]	; (8012400 <__libc_init_array+0x40>)
 80123d2:	4c0c      	ldr	r4, [pc, #48]	; (8012404 <__libc_init_array+0x44>)
 80123d4:	f002 fc90 	bl	8014cf8 <_init>
 80123d8:	1b64      	subs	r4, r4, r5
 80123da:	10a4      	asrs	r4, r4, #2
 80123dc:	2600      	movs	r6, #0
 80123de:	42a6      	cmp	r6, r4
 80123e0:	d105      	bne.n	80123ee <__libc_init_array+0x2e>
 80123e2:	bd70      	pop	{r4, r5, r6, pc}
 80123e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80123e8:	4798      	blx	r3
 80123ea:	3601      	adds	r6, #1
 80123ec:	e7ee      	b.n	80123cc <__libc_init_array+0xc>
 80123ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80123f2:	4798      	blx	r3
 80123f4:	3601      	adds	r6, #1
 80123f6:	e7f2      	b.n	80123de <__libc_init_array+0x1e>
 80123f8:	08016c24 	.word	0x08016c24
 80123fc:	08016c24 	.word	0x08016c24
 8012400:	08016c24 	.word	0x08016c24
 8012404:	08016c2c 	.word	0x08016c2c

08012408 <memset>:
 8012408:	4402      	add	r2, r0
 801240a:	4603      	mov	r3, r0
 801240c:	4293      	cmp	r3, r2
 801240e:	d100      	bne.n	8012412 <memset+0xa>
 8012410:	4770      	bx	lr
 8012412:	f803 1b01 	strb.w	r1, [r3], #1
 8012416:	e7f9      	b.n	801240c <memset+0x4>

08012418 <__cvt>:
 8012418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801241a:	ed2d 8b02 	vpush	{d8}
 801241e:	eeb0 8b40 	vmov.f64	d8, d0
 8012422:	b085      	sub	sp, #20
 8012424:	4617      	mov	r7, r2
 8012426:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012428:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801242a:	ee18 2a90 	vmov	r2, s17
 801242e:	f025 0520 	bic.w	r5, r5, #32
 8012432:	2a00      	cmp	r2, #0
 8012434:	bfb6      	itet	lt
 8012436:	222d      	movlt	r2, #45	; 0x2d
 8012438:	2200      	movge	r2, #0
 801243a:	eeb1 8b40 	vneglt.f64	d8, d0
 801243e:	2d46      	cmp	r5, #70	; 0x46
 8012440:	460c      	mov	r4, r1
 8012442:	701a      	strb	r2, [r3, #0]
 8012444:	d004      	beq.n	8012450 <__cvt+0x38>
 8012446:	2d45      	cmp	r5, #69	; 0x45
 8012448:	d100      	bne.n	801244c <__cvt+0x34>
 801244a:	3401      	adds	r4, #1
 801244c:	2102      	movs	r1, #2
 801244e:	e000      	b.n	8012452 <__cvt+0x3a>
 8012450:	2103      	movs	r1, #3
 8012452:	ab03      	add	r3, sp, #12
 8012454:	9301      	str	r3, [sp, #4]
 8012456:	ab02      	add	r3, sp, #8
 8012458:	9300      	str	r3, [sp, #0]
 801245a:	4622      	mov	r2, r4
 801245c:	4633      	mov	r3, r6
 801245e:	eeb0 0b48 	vmov.f64	d0, d8
 8012462:	f000 fca9 	bl	8012db8 <_dtoa_r>
 8012466:	2d47      	cmp	r5, #71	; 0x47
 8012468:	d101      	bne.n	801246e <__cvt+0x56>
 801246a:	07fb      	lsls	r3, r7, #31
 801246c:	d51a      	bpl.n	80124a4 <__cvt+0x8c>
 801246e:	2d46      	cmp	r5, #70	; 0x46
 8012470:	eb00 0204 	add.w	r2, r0, r4
 8012474:	d10c      	bne.n	8012490 <__cvt+0x78>
 8012476:	7803      	ldrb	r3, [r0, #0]
 8012478:	2b30      	cmp	r3, #48	; 0x30
 801247a:	d107      	bne.n	801248c <__cvt+0x74>
 801247c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012484:	bf1c      	itt	ne
 8012486:	f1c4 0401 	rsbne	r4, r4, #1
 801248a:	6034      	strne	r4, [r6, #0]
 801248c:	6833      	ldr	r3, [r6, #0]
 801248e:	441a      	add	r2, r3
 8012490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012498:	bf08      	it	eq
 801249a:	9203      	streq	r2, [sp, #12]
 801249c:	2130      	movs	r1, #48	; 0x30
 801249e:	9b03      	ldr	r3, [sp, #12]
 80124a0:	4293      	cmp	r3, r2
 80124a2:	d307      	bcc.n	80124b4 <__cvt+0x9c>
 80124a4:	9b03      	ldr	r3, [sp, #12]
 80124a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124a8:	1a1b      	subs	r3, r3, r0
 80124aa:	6013      	str	r3, [r2, #0]
 80124ac:	b005      	add	sp, #20
 80124ae:	ecbd 8b02 	vpop	{d8}
 80124b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124b4:	1c5c      	adds	r4, r3, #1
 80124b6:	9403      	str	r4, [sp, #12]
 80124b8:	7019      	strb	r1, [r3, #0]
 80124ba:	e7f0      	b.n	801249e <__cvt+0x86>

080124bc <__exponent>:
 80124bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124be:	4603      	mov	r3, r0
 80124c0:	2900      	cmp	r1, #0
 80124c2:	bfb8      	it	lt
 80124c4:	4249      	neglt	r1, r1
 80124c6:	f803 2b02 	strb.w	r2, [r3], #2
 80124ca:	bfb4      	ite	lt
 80124cc:	222d      	movlt	r2, #45	; 0x2d
 80124ce:	222b      	movge	r2, #43	; 0x2b
 80124d0:	2909      	cmp	r1, #9
 80124d2:	7042      	strb	r2, [r0, #1]
 80124d4:	dd2a      	ble.n	801252c <__exponent+0x70>
 80124d6:	f10d 0407 	add.w	r4, sp, #7
 80124da:	46a4      	mov	ip, r4
 80124dc:	270a      	movs	r7, #10
 80124de:	46a6      	mov	lr, r4
 80124e0:	460a      	mov	r2, r1
 80124e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80124e6:	fb07 1516 	mls	r5, r7, r6, r1
 80124ea:	3530      	adds	r5, #48	; 0x30
 80124ec:	2a63      	cmp	r2, #99	; 0x63
 80124ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80124f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80124f6:	4631      	mov	r1, r6
 80124f8:	dcf1      	bgt.n	80124de <__exponent+0x22>
 80124fa:	3130      	adds	r1, #48	; 0x30
 80124fc:	f1ae 0502 	sub.w	r5, lr, #2
 8012500:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012504:	1c44      	adds	r4, r0, #1
 8012506:	4629      	mov	r1, r5
 8012508:	4561      	cmp	r1, ip
 801250a:	d30a      	bcc.n	8012522 <__exponent+0x66>
 801250c:	f10d 0209 	add.w	r2, sp, #9
 8012510:	eba2 020e 	sub.w	r2, r2, lr
 8012514:	4565      	cmp	r5, ip
 8012516:	bf88      	it	hi
 8012518:	2200      	movhi	r2, #0
 801251a:	4413      	add	r3, r2
 801251c:	1a18      	subs	r0, r3, r0
 801251e:	b003      	add	sp, #12
 8012520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012526:	f804 2f01 	strb.w	r2, [r4, #1]!
 801252a:	e7ed      	b.n	8012508 <__exponent+0x4c>
 801252c:	2330      	movs	r3, #48	; 0x30
 801252e:	3130      	adds	r1, #48	; 0x30
 8012530:	7083      	strb	r3, [r0, #2]
 8012532:	70c1      	strb	r1, [r0, #3]
 8012534:	1d03      	adds	r3, r0, #4
 8012536:	e7f1      	b.n	801251c <__exponent+0x60>

08012538 <_printf_float>:
 8012538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253c:	b08b      	sub	sp, #44	; 0x2c
 801253e:	460c      	mov	r4, r1
 8012540:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012544:	4616      	mov	r6, r2
 8012546:	461f      	mov	r7, r3
 8012548:	4605      	mov	r5, r0
 801254a:	f001 f9a3 	bl	8013894 <_localeconv_r>
 801254e:	f8d0 b000 	ldr.w	fp, [r0]
 8012552:	4658      	mov	r0, fp
 8012554:	f7ed fec4 	bl	80002e0 <strlen>
 8012558:	2300      	movs	r3, #0
 801255a:	9308      	str	r3, [sp, #32]
 801255c:	f8d8 3000 	ldr.w	r3, [r8]
 8012560:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012564:	6822      	ldr	r2, [r4, #0]
 8012566:	3307      	adds	r3, #7
 8012568:	f023 0307 	bic.w	r3, r3, #7
 801256c:	f103 0108 	add.w	r1, r3, #8
 8012570:	f8c8 1000 	str.w	r1, [r8]
 8012574:	4682      	mov	sl, r0
 8012576:	e9d3 0100 	ldrd	r0, r1, [r3]
 801257a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801257e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80127e0 <_printf_float+0x2a8>
 8012582:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012586:	eeb0 6bc0 	vabs.f64	d6, d0
 801258a:	eeb4 6b47 	vcmp.f64	d6, d7
 801258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012592:	dd24      	ble.n	80125de <_printf_float+0xa6>
 8012594:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259c:	d502      	bpl.n	80125a4 <_printf_float+0x6c>
 801259e:	232d      	movs	r3, #45	; 0x2d
 80125a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125a4:	4b90      	ldr	r3, [pc, #576]	; (80127e8 <_printf_float+0x2b0>)
 80125a6:	4891      	ldr	r0, [pc, #580]	; (80127ec <_printf_float+0x2b4>)
 80125a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80125ac:	bf94      	ite	ls
 80125ae:	4698      	movls	r8, r3
 80125b0:	4680      	movhi	r8, r0
 80125b2:	2303      	movs	r3, #3
 80125b4:	6123      	str	r3, [r4, #16]
 80125b6:	f022 0204 	bic.w	r2, r2, #4
 80125ba:	2300      	movs	r3, #0
 80125bc:	6022      	str	r2, [r4, #0]
 80125be:	9304      	str	r3, [sp, #16]
 80125c0:	9700      	str	r7, [sp, #0]
 80125c2:	4633      	mov	r3, r6
 80125c4:	aa09      	add	r2, sp, #36	; 0x24
 80125c6:	4621      	mov	r1, r4
 80125c8:	4628      	mov	r0, r5
 80125ca:	f000 f9d3 	bl	8012974 <_printf_common>
 80125ce:	3001      	adds	r0, #1
 80125d0:	f040 808a 	bne.w	80126e8 <_printf_float+0x1b0>
 80125d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125d8:	b00b      	add	sp, #44	; 0x2c
 80125da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125de:	eeb4 0b40 	vcmp.f64	d0, d0
 80125e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e6:	d709      	bvc.n	80125fc <_printf_float+0xc4>
 80125e8:	ee10 3a90 	vmov	r3, s1
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	bfbc      	itt	lt
 80125f0:	232d      	movlt	r3, #45	; 0x2d
 80125f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80125f6:	487e      	ldr	r0, [pc, #504]	; (80127f0 <_printf_float+0x2b8>)
 80125f8:	4b7e      	ldr	r3, [pc, #504]	; (80127f4 <_printf_float+0x2bc>)
 80125fa:	e7d5      	b.n	80125a8 <_printf_float+0x70>
 80125fc:	6863      	ldr	r3, [r4, #4]
 80125fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012602:	9104      	str	r1, [sp, #16]
 8012604:	1c59      	adds	r1, r3, #1
 8012606:	d13c      	bne.n	8012682 <_printf_float+0x14a>
 8012608:	2306      	movs	r3, #6
 801260a:	6063      	str	r3, [r4, #4]
 801260c:	2300      	movs	r3, #0
 801260e:	9303      	str	r3, [sp, #12]
 8012610:	ab08      	add	r3, sp, #32
 8012612:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801261a:	ab07      	add	r3, sp, #28
 801261c:	6861      	ldr	r1, [r4, #4]
 801261e:	9300      	str	r3, [sp, #0]
 8012620:	6022      	str	r2, [r4, #0]
 8012622:	f10d 031b 	add.w	r3, sp, #27
 8012626:	4628      	mov	r0, r5
 8012628:	f7ff fef6 	bl	8012418 <__cvt>
 801262c:	9b04      	ldr	r3, [sp, #16]
 801262e:	9907      	ldr	r1, [sp, #28]
 8012630:	2b47      	cmp	r3, #71	; 0x47
 8012632:	4680      	mov	r8, r0
 8012634:	d108      	bne.n	8012648 <_printf_float+0x110>
 8012636:	1cc8      	adds	r0, r1, #3
 8012638:	db02      	blt.n	8012640 <_printf_float+0x108>
 801263a:	6863      	ldr	r3, [r4, #4]
 801263c:	4299      	cmp	r1, r3
 801263e:	dd41      	ble.n	80126c4 <_printf_float+0x18c>
 8012640:	f1a9 0902 	sub.w	r9, r9, #2
 8012644:	fa5f f989 	uxtb.w	r9, r9
 8012648:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801264c:	d820      	bhi.n	8012690 <_printf_float+0x158>
 801264e:	3901      	subs	r1, #1
 8012650:	464a      	mov	r2, r9
 8012652:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012656:	9107      	str	r1, [sp, #28]
 8012658:	f7ff ff30 	bl	80124bc <__exponent>
 801265c:	9a08      	ldr	r2, [sp, #32]
 801265e:	9004      	str	r0, [sp, #16]
 8012660:	1813      	adds	r3, r2, r0
 8012662:	2a01      	cmp	r2, #1
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	dc02      	bgt.n	801266e <_printf_float+0x136>
 8012668:	6822      	ldr	r2, [r4, #0]
 801266a:	07d2      	lsls	r2, r2, #31
 801266c:	d501      	bpl.n	8012672 <_printf_float+0x13a>
 801266e:	3301      	adds	r3, #1
 8012670:	6123      	str	r3, [r4, #16]
 8012672:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d0a2      	beq.n	80125c0 <_printf_float+0x88>
 801267a:	232d      	movs	r3, #45	; 0x2d
 801267c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012680:	e79e      	b.n	80125c0 <_printf_float+0x88>
 8012682:	9904      	ldr	r1, [sp, #16]
 8012684:	2947      	cmp	r1, #71	; 0x47
 8012686:	d1c1      	bne.n	801260c <_printf_float+0xd4>
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1bf      	bne.n	801260c <_printf_float+0xd4>
 801268c:	2301      	movs	r3, #1
 801268e:	e7bc      	b.n	801260a <_printf_float+0xd2>
 8012690:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012694:	d118      	bne.n	80126c8 <_printf_float+0x190>
 8012696:	2900      	cmp	r1, #0
 8012698:	6863      	ldr	r3, [r4, #4]
 801269a:	dd0b      	ble.n	80126b4 <_printf_float+0x17c>
 801269c:	6121      	str	r1, [r4, #16]
 801269e:	b913      	cbnz	r3, 80126a6 <_printf_float+0x16e>
 80126a0:	6822      	ldr	r2, [r4, #0]
 80126a2:	07d0      	lsls	r0, r2, #31
 80126a4:	d502      	bpl.n	80126ac <_printf_float+0x174>
 80126a6:	3301      	adds	r3, #1
 80126a8:	440b      	add	r3, r1
 80126aa:	6123      	str	r3, [r4, #16]
 80126ac:	2300      	movs	r3, #0
 80126ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80126b0:	9304      	str	r3, [sp, #16]
 80126b2:	e7de      	b.n	8012672 <_printf_float+0x13a>
 80126b4:	b913      	cbnz	r3, 80126bc <_printf_float+0x184>
 80126b6:	6822      	ldr	r2, [r4, #0]
 80126b8:	07d2      	lsls	r2, r2, #31
 80126ba:	d501      	bpl.n	80126c0 <_printf_float+0x188>
 80126bc:	3302      	adds	r3, #2
 80126be:	e7f4      	b.n	80126aa <_printf_float+0x172>
 80126c0:	2301      	movs	r3, #1
 80126c2:	e7f2      	b.n	80126aa <_printf_float+0x172>
 80126c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80126c8:	9b08      	ldr	r3, [sp, #32]
 80126ca:	4299      	cmp	r1, r3
 80126cc:	db05      	blt.n	80126da <_printf_float+0x1a2>
 80126ce:	6823      	ldr	r3, [r4, #0]
 80126d0:	6121      	str	r1, [r4, #16]
 80126d2:	07d8      	lsls	r0, r3, #31
 80126d4:	d5ea      	bpl.n	80126ac <_printf_float+0x174>
 80126d6:	1c4b      	adds	r3, r1, #1
 80126d8:	e7e7      	b.n	80126aa <_printf_float+0x172>
 80126da:	2900      	cmp	r1, #0
 80126dc:	bfd4      	ite	le
 80126de:	f1c1 0202 	rsble	r2, r1, #2
 80126e2:	2201      	movgt	r2, #1
 80126e4:	4413      	add	r3, r2
 80126e6:	e7e0      	b.n	80126aa <_printf_float+0x172>
 80126e8:	6823      	ldr	r3, [r4, #0]
 80126ea:	055a      	lsls	r2, r3, #21
 80126ec:	d407      	bmi.n	80126fe <_printf_float+0x1c6>
 80126ee:	6923      	ldr	r3, [r4, #16]
 80126f0:	4642      	mov	r2, r8
 80126f2:	4631      	mov	r1, r6
 80126f4:	4628      	mov	r0, r5
 80126f6:	47b8      	blx	r7
 80126f8:	3001      	adds	r0, #1
 80126fa:	d12a      	bne.n	8012752 <_printf_float+0x21a>
 80126fc:	e76a      	b.n	80125d4 <_printf_float+0x9c>
 80126fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012702:	f240 80e2 	bls.w	80128ca <_printf_float+0x392>
 8012706:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801270a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012712:	d133      	bne.n	801277c <_printf_float+0x244>
 8012714:	4a38      	ldr	r2, [pc, #224]	; (80127f8 <_printf_float+0x2c0>)
 8012716:	2301      	movs	r3, #1
 8012718:	4631      	mov	r1, r6
 801271a:	4628      	mov	r0, r5
 801271c:	47b8      	blx	r7
 801271e:	3001      	adds	r0, #1
 8012720:	f43f af58 	beq.w	80125d4 <_printf_float+0x9c>
 8012724:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012728:	429a      	cmp	r2, r3
 801272a:	db02      	blt.n	8012732 <_printf_float+0x1fa>
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	07d8      	lsls	r0, r3, #31
 8012730:	d50f      	bpl.n	8012752 <_printf_float+0x21a>
 8012732:	4653      	mov	r3, sl
 8012734:	465a      	mov	r2, fp
 8012736:	4631      	mov	r1, r6
 8012738:	4628      	mov	r0, r5
 801273a:	47b8      	blx	r7
 801273c:	3001      	adds	r0, #1
 801273e:	f43f af49 	beq.w	80125d4 <_printf_float+0x9c>
 8012742:	f04f 0800 	mov.w	r8, #0
 8012746:	f104 091a 	add.w	r9, r4, #26
 801274a:	9b08      	ldr	r3, [sp, #32]
 801274c:	3b01      	subs	r3, #1
 801274e:	4543      	cmp	r3, r8
 8012750:	dc09      	bgt.n	8012766 <_printf_float+0x22e>
 8012752:	6823      	ldr	r3, [r4, #0]
 8012754:	079b      	lsls	r3, r3, #30
 8012756:	f100 8108 	bmi.w	801296a <_printf_float+0x432>
 801275a:	68e0      	ldr	r0, [r4, #12]
 801275c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801275e:	4298      	cmp	r0, r3
 8012760:	bfb8      	it	lt
 8012762:	4618      	movlt	r0, r3
 8012764:	e738      	b.n	80125d8 <_printf_float+0xa0>
 8012766:	2301      	movs	r3, #1
 8012768:	464a      	mov	r2, r9
 801276a:	4631      	mov	r1, r6
 801276c:	4628      	mov	r0, r5
 801276e:	47b8      	blx	r7
 8012770:	3001      	adds	r0, #1
 8012772:	f43f af2f 	beq.w	80125d4 <_printf_float+0x9c>
 8012776:	f108 0801 	add.w	r8, r8, #1
 801277a:	e7e6      	b.n	801274a <_printf_float+0x212>
 801277c:	9b07      	ldr	r3, [sp, #28]
 801277e:	2b00      	cmp	r3, #0
 8012780:	dc3c      	bgt.n	80127fc <_printf_float+0x2c4>
 8012782:	4a1d      	ldr	r2, [pc, #116]	; (80127f8 <_printf_float+0x2c0>)
 8012784:	2301      	movs	r3, #1
 8012786:	4631      	mov	r1, r6
 8012788:	4628      	mov	r0, r5
 801278a:	47b8      	blx	r7
 801278c:	3001      	adds	r0, #1
 801278e:	f43f af21 	beq.w	80125d4 <_printf_float+0x9c>
 8012792:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012796:	4313      	orrs	r3, r2
 8012798:	d102      	bne.n	80127a0 <_printf_float+0x268>
 801279a:	6823      	ldr	r3, [r4, #0]
 801279c:	07d9      	lsls	r1, r3, #31
 801279e:	d5d8      	bpl.n	8012752 <_printf_float+0x21a>
 80127a0:	4653      	mov	r3, sl
 80127a2:	465a      	mov	r2, fp
 80127a4:	4631      	mov	r1, r6
 80127a6:	4628      	mov	r0, r5
 80127a8:	47b8      	blx	r7
 80127aa:	3001      	adds	r0, #1
 80127ac:	f43f af12 	beq.w	80125d4 <_printf_float+0x9c>
 80127b0:	f04f 0900 	mov.w	r9, #0
 80127b4:	f104 0a1a 	add.w	sl, r4, #26
 80127b8:	9b07      	ldr	r3, [sp, #28]
 80127ba:	425b      	negs	r3, r3
 80127bc:	454b      	cmp	r3, r9
 80127be:	dc01      	bgt.n	80127c4 <_printf_float+0x28c>
 80127c0:	9b08      	ldr	r3, [sp, #32]
 80127c2:	e795      	b.n	80126f0 <_printf_float+0x1b8>
 80127c4:	2301      	movs	r3, #1
 80127c6:	4652      	mov	r2, sl
 80127c8:	4631      	mov	r1, r6
 80127ca:	4628      	mov	r0, r5
 80127cc:	47b8      	blx	r7
 80127ce:	3001      	adds	r0, #1
 80127d0:	f43f af00 	beq.w	80125d4 <_printf_float+0x9c>
 80127d4:	f109 0901 	add.w	r9, r9, #1
 80127d8:	e7ee      	b.n	80127b8 <_printf_float+0x280>
 80127da:	bf00      	nop
 80127dc:	f3af 8000 	nop.w
 80127e0:	ffffffff 	.word	0xffffffff
 80127e4:	7fefffff 	.word	0x7fefffff
 80127e8:	08016844 	.word	0x08016844
 80127ec:	08016848 	.word	0x08016848
 80127f0:	08016850 	.word	0x08016850
 80127f4:	0801684c 	.word	0x0801684c
 80127f8:	08016854 	.word	0x08016854
 80127fc:	9a08      	ldr	r2, [sp, #32]
 80127fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012800:	429a      	cmp	r2, r3
 8012802:	bfa8      	it	ge
 8012804:	461a      	movge	r2, r3
 8012806:	2a00      	cmp	r2, #0
 8012808:	4691      	mov	r9, r2
 801280a:	dc38      	bgt.n	801287e <_printf_float+0x346>
 801280c:	2300      	movs	r3, #0
 801280e:	9305      	str	r3, [sp, #20]
 8012810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012814:	f104 021a 	add.w	r2, r4, #26
 8012818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801281a:	9905      	ldr	r1, [sp, #20]
 801281c:	9304      	str	r3, [sp, #16]
 801281e:	eba3 0309 	sub.w	r3, r3, r9
 8012822:	428b      	cmp	r3, r1
 8012824:	dc33      	bgt.n	801288e <_printf_float+0x356>
 8012826:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801282a:	429a      	cmp	r2, r3
 801282c:	db3c      	blt.n	80128a8 <_printf_float+0x370>
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	07da      	lsls	r2, r3, #31
 8012832:	d439      	bmi.n	80128a8 <_printf_float+0x370>
 8012834:	9b08      	ldr	r3, [sp, #32]
 8012836:	9a04      	ldr	r2, [sp, #16]
 8012838:	9907      	ldr	r1, [sp, #28]
 801283a:	1a9a      	subs	r2, r3, r2
 801283c:	eba3 0901 	sub.w	r9, r3, r1
 8012840:	4591      	cmp	r9, r2
 8012842:	bfa8      	it	ge
 8012844:	4691      	movge	r9, r2
 8012846:	f1b9 0f00 	cmp.w	r9, #0
 801284a:	dc35      	bgt.n	80128b8 <_printf_float+0x380>
 801284c:	f04f 0800 	mov.w	r8, #0
 8012850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012854:	f104 0a1a 	add.w	sl, r4, #26
 8012858:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801285c:	1a9b      	subs	r3, r3, r2
 801285e:	eba3 0309 	sub.w	r3, r3, r9
 8012862:	4543      	cmp	r3, r8
 8012864:	f77f af75 	ble.w	8012752 <_printf_float+0x21a>
 8012868:	2301      	movs	r3, #1
 801286a:	4652      	mov	r2, sl
 801286c:	4631      	mov	r1, r6
 801286e:	4628      	mov	r0, r5
 8012870:	47b8      	blx	r7
 8012872:	3001      	adds	r0, #1
 8012874:	f43f aeae 	beq.w	80125d4 <_printf_float+0x9c>
 8012878:	f108 0801 	add.w	r8, r8, #1
 801287c:	e7ec      	b.n	8012858 <_printf_float+0x320>
 801287e:	4613      	mov	r3, r2
 8012880:	4631      	mov	r1, r6
 8012882:	4642      	mov	r2, r8
 8012884:	4628      	mov	r0, r5
 8012886:	47b8      	blx	r7
 8012888:	3001      	adds	r0, #1
 801288a:	d1bf      	bne.n	801280c <_printf_float+0x2d4>
 801288c:	e6a2      	b.n	80125d4 <_printf_float+0x9c>
 801288e:	2301      	movs	r3, #1
 8012890:	4631      	mov	r1, r6
 8012892:	4628      	mov	r0, r5
 8012894:	9204      	str	r2, [sp, #16]
 8012896:	47b8      	blx	r7
 8012898:	3001      	adds	r0, #1
 801289a:	f43f ae9b 	beq.w	80125d4 <_printf_float+0x9c>
 801289e:	9b05      	ldr	r3, [sp, #20]
 80128a0:	9a04      	ldr	r2, [sp, #16]
 80128a2:	3301      	adds	r3, #1
 80128a4:	9305      	str	r3, [sp, #20]
 80128a6:	e7b7      	b.n	8012818 <_printf_float+0x2e0>
 80128a8:	4653      	mov	r3, sl
 80128aa:	465a      	mov	r2, fp
 80128ac:	4631      	mov	r1, r6
 80128ae:	4628      	mov	r0, r5
 80128b0:	47b8      	blx	r7
 80128b2:	3001      	adds	r0, #1
 80128b4:	d1be      	bne.n	8012834 <_printf_float+0x2fc>
 80128b6:	e68d      	b.n	80125d4 <_printf_float+0x9c>
 80128b8:	9a04      	ldr	r2, [sp, #16]
 80128ba:	464b      	mov	r3, r9
 80128bc:	4442      	add	r2, r8
 80128be:	4631      	mov	r1, r6
 80128c0:	4628      	mov	r0, r5
 80128c2:	47b8      	blx	r7
 80128c4:	3001      	adds	r0, #1
 80128c6:	d1c1      	bne.n	801284c <_printf_float+0x314>
 80128c8:	e684      	b.n	80125d4 <_printf_float+0x9c>
 80128ca:	9a08      	ldr	r2, [sp, #32]
 80128cc:	2a01      	cmp	r2, #1
 80128ce:	dc01      	bgt.n	80128d4 <_printf_float+0x39c>
 80128d0:	07db      	lsls	r3, r3, #31
 80128d2:	d537      	bpl.n	8012944 <_printf_float+0x40c>
 80128d4:	2301      	movs	r3, #1
 80128d6:	4642      	mov	r2, r8
 80128d8:	4631      	mov	r1, r6
 80128da:	4628      	mov	r0, r5
 80128dc:	47b8      	blx	r7
 80128de:	3001      	adds	r0, #1
 80128e0:	f43f ae78 	beq.w	80125d4 <_printf_float+0x9c>
 80128e4:	4653      	mov	r3, sl
 80128e6:	465a      	mov	r2, fp
 80128e8:	4631      	mov	r1, r6
 80128ea:	4628      	mov	r0, r5
 80128ec:	47b8      	blx	r7
 80128ee:	3001      	adds	r0, #1
 80128f0:	f43f ae70 	beq.w	80125d4 <_printf_float+0x9c>
 80128f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80128f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80128fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012900:	d01b      	beq.n	801293a <_printf_float+0x402>
 8012902:	9b08      	ldr	r3, [sp, #32]
 8012904:	f108 0201 	add.w	r2, r8, #1
 8012908:	3b01      	subs	r3, #1
 801290a:	4631      	mov	r1, r6
 801290c:	4628      	mov	r0, r5
 801290e:	47b8      	blx	r7
 8012910:	3001      	adds	r0, #1
 8012912:	d10e      	bne.n	8012932 <_printf_float+0x3fa>
 8012914:	e65e      	b.n	80125d4 <_printf_float+0x9c>
 8012916:	2301      	movs	r3, #1
 8012918:	464a      	mov	r2, r9
 801291a:	4631      	mov	r1, r6
 801291c:	4628      	mov	r0, r5
 801291e:	47b8      	blx	r7
 8012920:	3001      	adds	r0, #1
 8012922:	f43f ae57 	beq.w	80125d4 <_printf_float+0x9c>
 8012926:	f108 0801 	add.w	r8, r8, #1
 801292a:	9b08      	ldr	r3, [sp, #32]
 801292c:	3b01      	subs	r3, #1
 801292e:	4543      	cmp	r3, r8
 8012930:	dcf1      	bgt.n	8012916 <_printf_float+0x3de>
 8012932:	9b04      	ldr	r3, [sp, #16]
 8012934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012938:	e6db      	b.n	80126f2 <_printf_float+0x1ba>
 801293a:	f04f 0800 	mov.w	r8, #0
 801293e:	f104 091a 	add.w	r9, r4, #26
 8012942:	e7f2      	b.n	801292a <_printf_float+0x3f2>
 8012944:	2301      	movs	r3, #1
 8012946:	4642      	mov	r2, r8
 8012948:	e7df      	b.n	801290a <_printf_float+0x3d2>
 801294a:	2301      	movs	r3, #1
 801294c:	464a      	mov	r2, r9
 801294e:	4631      	mov	r1, r6
 8012950:	4628      	mov	r0, r5
 8012952:	47b8      	blx	r7
 8012954:	3001      	adds	r0, #1
 8012956:	f43f ae3d 	beq.w	80125d4 <_printf_float+0x9c>
 801295a:	f108 0801 	add.w	r8, r8, #1
 801295e:	68e3      	ldr	r3, [r4, #12]
 8012960:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012962:	1a5b      	subs	r3, r3, r1
 8012964:	4543      	cmp	r3, r8
 8012966:	dcf0      	bgt.n	801294a <_printf_float+0x412>
 8012968:	e6f7      	b.n	801275a <_printf_float+0x222>
 801296a:	f04f 0800 	mov.w	r8, #0
 801296e:	f104 0919 	add.w	r9, r4, #25
 8012972:	e7f4      	b.n	801295e <_printf_float+0x426>

08012974 <_printf_common>:
 8012974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012978:	4616      	mov	r6, r2
 801297a:	4699      	mov	r9, r3
 801297c:	688a      	ldr	r2, [r1, #8]
 801297e:	690b      	ldr	r3, [r1, #16]
 8012980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012984:	4293      	cmp	r3, r2
 8012986:	bfb8      	it	lt
 8012988:	4613      	movlt	r3, r2
 801298a:	6033      	str	r3, [r6, #0]
 801298c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012990:	4607      	mov	r7, r0
 8012992:	460c      	mov	r4, r1
 8012994:	b10a      	cbz	r2, 801299a <_printf_common+0x26>
 8012996:	3301      	adds	r3, #1
 8012998:	6033      	str	r3, [r6, #0]
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	0699      	lsls	r1, r3, #26
 801299e:	bf42      	ittt	mi
 80129a0:	6833      	ldrmi	r3, [r6, #0]
 80129a2:	3302      	addmi	r3, #2
 80129a4:	6033      	strmi	r3, [r6, #0]
 80129a6:	6825      	ldr	r5, [r4, #0]
 80129a8:	f015 0506 	ands.w	r5, r5, #6
 80129ac:	d106      	bne.n	80129bc <_printf_common+0x48>
 80129ae:	f104 0a19 	add.w	sl, r4, #25
 80129b2:	68e3      	ldr	r3, [r4, #12]
 80129b4:	6832      	ldr	r2, [r6, #0]
 80129b6:	1a9b      	subs	r3, r3, r2
 80129b8:	42ab      	cmp	r3, r5
 80129ba:	dc26      	bgt.n	8012a0a <_printf_common+0x96>
 80129bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80129c0:	1e13      	subs	r3, r2, #0
 80129c2:	6822      	ldr	r2, [r4, #0]
 80129c4:	bf18      	it	ne
 80129c6:	2301      	movne	r3, #1
 80129c8:	0692      	lsls	r2, r2, #26
 80129ca:	d42b      	bmi.n	8012a24 <_printf_common+0xb0>
 80129cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129d0:	4649      	mov	r1, r9
 80129d2:	4638      	mov	r0, r7
 80129d4:	47c0      	blx	r8
 80129d6:	3001      	adds	r0, #1
 80129d8:	d01e      	beq.n	8012a18 <_printf_common+0xa4>
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	68e5      	ldr	r5, [r4, #12]
 80129de:	6832      	ldr	r2, [r6, #0]
 80129e0:	f003 0306 	and.w	r3, r3, #6
 80129e4:	2b04      	cmp	r3, #4
 80129e6:	bf08      	it	eq
 80129e8:	1aad      	subeq	r5, r5, r2
 80129ea:	68a3      	ldr	r3, [r4, #8]
 80129ec:	6922      	ldr	r2, [r4, #16]
 80129ee:	bf0c      	ite	eq
 80129f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129f4:	2500      	movne	r5, #0
 80129f6:	4293      	cmp	r3, r2
 80129f8:	bfc4      	itt	gt
 80129fa:	1a9b      	subgt	r3, r3, r2
 80129fc:	18ed      	addgt	r5, r5, r3
 80129fe:	2600      	movs	r6, #0
 8012a00:	341a      	adds	r4, #26
 8012a02:	42b5      	cmp	r5, r6
 8012a04:	d11a      	bne.n	8012a3c <_printf_common+0xc8>
 8012a06:	2000      	movs	r0, #0
 8012a08:	e008      	b.n	8012a1c <_printf_common+0xa8>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	4652      	mov	r2, sl
 8012a0e:	4649      	mov	r1, r9
 8012a10:	4638      	mov	r0, r7
 8012a12:	47c0      	blx	r8
 8012a14:	3001      	adds	r0, #1
 8012a16:	d103      	bne.n	8012a20 <_printf_common+0xac>
 8012a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a20:	3501      	adds	r5, #1
 8012a22:	e7c6      	b.n	80129b2 <_printf_common+0x3e>
 8012a24:	18e1      	adds	r1, r4, r3
 8012a26:	1c5a      	adds	r2, r3, #1
 8012a28:	2030      	movs	r0, #48	; 0x30
 8012a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a2e:	4422      	add	r2, r4
 8012a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a38:	3302      	adds	r3, #2
 8012a3a:	e7c7      	b.n	80129cc <_printf_common+0x58>
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	4622      	mov	r2, r4
 8012a40:	4649      	mov	r1, r9
 8012a42:	4638      	mov	r0, r7
 8012a44:	47c0      	blx	r8
 8012a46:	3001      	adds	r0, #1
 8012a48:	d0e6      	beq.n	8012a18 <_printf_common+0xa4>
 8012a4a:	3601      	adds	r6, #1
 8012a4c:	e7d9      	b.n	8012a02 <_printf_common+0x8e>
	...

08012a50 <_printf_i>:
 8012a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a54:	7e0f      	ldrb	r7, [r1, #24]
 8012a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012a58:	2f78      	cmp	r7, #120	; 0x78
 8012a5a:	4691      	mov	r9, r2
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	460c      	mov	r4, r1
 8012a60:	469a      	mov	sl, r3
 8012a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a66:	d807      	bhi.n	8012a78 <_printf_i+0x28>
 8012a68:	2f62      	cmp	r7, #98	; 0x62
 8012a6a:	d80a      	bhi.n	8012a82 <_printf_i+0x32>
 8012a6c:	2f00      	cmp	r7, #0
 8012a6e:	f000 80d8 	beq.w	8012c22 <_printf_i+0x1d2>
 8012a72:	2f58      	cmp	r7, #88	; 0x58
 8012a74:	f000 80a3 	beq.w	8012bbe <_printf_i+0x16e>
 8012a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a80:	e03a      	b.n	8012af8 <_printf_i+0xa8>
 8012a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a86:	2b15      	cmp	r3, #21
 8012a88:	d8f6      	bhi.n	8012a78 <_printf_i+0x28>
 8012a8a:	a101      	add	r1, pc, #4	; (adr r1, 8012a90 <_printf_i+0x40>)
 8012a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a90:	08012ae9 	.word	0x08012ae9
 8012a94:	08012afd 	.word	0x08012afd
 8012a98:	08012a79 	.word	0x08012a79
 8012a9c:	08012a79 	.word	0x08012a79
 8012aa0:	08012a79 	.word	0x08012a79
 8012aa4:	08012a79 	.word	0x08012a79
 8012aa8:	08012afd 	.word	0x08012afd
 8012aac:	08012a79 	.word	0x08012a79
 8012ab0:	08012a79 	.word	0x08012a79
 8012ab4:	08012a79 	.word	0x08012a79
 8012ab8:	08012a79 	.word	0x08012a79
 8012abc:	08012c09 	.word	0x08012c09
 8012ac0:	08012b2d 	.word	0x08012b2d
 8012ac4:	08012beb 	.word	0x08012beb
 8012ac8:	08012a79 	.word	0x08012a79
 8012acc:	08012a79 	.word	0x08012a79
 8012ad0:	08012c2b 	.word	0x08012c2b
 8012ad4:	08012a79 	.word	0x08012a79
 8012ad8:	08012b2d 	.word	0x08012b2d
 8012adc:	08012a79 	.word	0x08012a79
 8012ae0:	08012a79 	.word	0x08012a79
 8012ae4:	08012bf3 	.word	0x08012bf3
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	1d1a      	adds	r2, r3, #4
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	602a      	str	r2, [r5, #0]
 8012af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012af8:	2301      	movs	r3, #1
 8012afa:	e0a3      	b.n	8012c44 <_printf_i+0x1f4>
 8012afc:	6820      	ldr	r0, [r4, #0]
 8012afe:	6829      	ldr	r1, [r5, #0]
 8012b00:	0606      	lsls	r6, r0, #24
 8012b02:	f101 0304 	add.w	r3, r1, #4
 8012b06:	d50a      	bpl.n	8012b1e <_printf_i+0xce>
 8012b08:	680e      	ldr	r6, [r1, #0]
 8012b0a:	602b      	str	r3, [r5, #0]
 8012b0c:	2e00      	cmp	r6, #0
 8012b0e:	da03      	bge.n	8012b18 <_printf_i+0xc8>
 8012b10:	232d      	movs	r3, #45	; 0x2d
 8012b12:	4276      	negs	r6, r6
 8012b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b18:	485e      	ldr	r0, [pc, #376]	; (8012c94 <_printf_i+0x244>)
 8012b1a:	230a      	movs	r3, #10
 8012b1c:	e019      	b.n	8012b52 <_printf_i+0x102>
 8012b1e:	680e      	ldr	r6, [r1, #0]
 8012b20:	602b      	str	r3, [r5, #0]
 8012b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b26:	bf18      	it	ne
 8012b28:	b236      	sxthne	r6, r6
 8012b2a:	e7ef      	b.n	8012b0c <_printf_i+0xbc>
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	6820      	ldr	r0, [r4, #0]
 8012b30:	1d19      	adds	r1, r3, #4
 8012b32:	6029      	str	r1, [r5, #0]
 8012b34:	0601      	lsls	r1, r0, #24
 8012b36:	d501      	bpl.n	8012b3c <_printf_i+0xec>
 8012b38:	681e      	ldr	r6, [r3, #0]
 8012b3a:	e002      	b.n	8012b42 <_printf_i+0xf2>
 8012b3c:	0646      	lsls	r6, r0, #25
 8012b3e:	d5fb      	bpl.n	8012b38 <_printf_i+0xe8>
 8012b40:	881e      	ldrh	r6, [r3, #0]
 8012b42:	4854      	ldr	r0, [pc, #336]	; (8012c94 <_printf_i+0x244>)
 8012b44:	2f6f      	cmp	r7, #111	; 0x6f
 8012b46:	bf0c      	ite	eq
 8012b48:	2308      	moveq	r3, #8
 8012b4a:	230a      	movne	r3, #10
 8012b4c:	2100      	movs	r1, #0
 8012b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b52:	6865      	ldr	r5, [r4, #4]
 8012b54:	60a5      	str	r5, [r4, #8]
 8012b56:	2d00      	cmp	r5, #0
 8012b58:	bfa2      	ittt	ge
 8012b5a:	6821      	ldrge	r1, [r4, #0]
 8012b5c:	f021 0104 	bicge.w	r1, r1, #4
 8012b60:	6021      	strge	r1, [r4, #0]
 8012b62:	b90e      	cbnz	r6, 8012b68 <_printf_i+0x118>
 8012b64:	2d00      	cmp	r5, #0
 8012b66:	d04d      	beq.n	8012c04 <_printf_i+0x1b4>
 8012b68:	4615      	mov	r5, r2
 8012b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8012b72:	5dc7      	ldrb	r7, [r0, r7]
 8012b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b78:	4637      	mov	r7, r6
 8012b7a:	42bb      	cmp	r3, r7
 8012b7c:	460e      	mov	r6, r1
 8012b7e:	d9f4      	bls.n	8012b6a <_printf_i+0x11a>
 8012b80:	2b08      	cmp	r3, #8
 8012b82:	d10b      	bne.n	8012b9c <_printf_i+0x14c>
 8012b84:	6823      	ldr	r3, [r4, #0]
 8012b86:	07de      	lsls	r6, r3, #31
 8012b88:	d508      	bpl.n	8012b9c <_printf_i+0x14c>
 8012b8a:	6923      	ldr	r3, [r4, #16]
 8012b8c:	6861      	ldr	r1, [r4, #4]
 8012b8e:	4299      	cmp	r1, r3
 8012b90:	bfde      	ittt	le
 8012b92:	2330      	movle	r3, #48	; 0x30
 8012b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012b9c:	1b52      	subs	r2, r2, r5
 8012b9e:	6122      	str	r2, [r4, #16]
 8012ba0:	f8cd a000 	str.w	sl, [sp]
 8012ba4:	464b      	mov	r3, r9
 8012ba6:	aa03      	add	r2, sp, #12
 8012ba8:	4621      	mov	r1, r4
 8012baa:	4640      	mov	r0, r8
 8012bac:	f7ff fee2 	bl	8012974 <_printf_common>
 8012bb0:	3001      	adds	r0, #1
 8012bb2:	d14c      	bne.n	8012c4e <_printf_i+0x1fe>
 8012bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bb8:	b004      	add	sp, #16
 8012bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bbe:	4835      	ldr	r0, [pc, #212]	; (8012c94 <_printf_i+0x244>)
 8012bc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012bc4:	6829      	ldr	r1, [r5, #0]
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012bcc:	6029      	str	r1, [r5, #0]
 8012bce:	061d      	lsls	r5, r3, #24
 8012bd0:	d514      	bpl.n	8012bfc <_printf_i+0x1ac>
 8012bd2:	07df      	lsls	r7, r3, #31
 8012bd4:	bf44      	itt	mi
 8012bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8012bda:	6023      	strmi	r3, [r4, #0]
 8012bdc:	b91e      	cbnz	r6, 8012be6 <_printf_i+0x196>
 8012bde:	6823      	ldr	r3, [r4, #0]
 8012be0:	f023 0320 	bic.w	r3, r3, #32
 8012be4:	6023      	str	r3, [r4, #0]
 8012be6:	2310      	movs	r3, #16
 8012be8:	e7b0      	b.n	8012b4c <_printf_i+0xfc>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	f043 0320 	orr.w	r3, r3, #32
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	2378      	movs	r3, #120	; 0x78
 8012bf4:	4828      	ldr	r0, [pc, #160]	; (8012c98 <_printf_i+0x248>)
 8012bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012bfa:	e7e3      	b.n	8012bc4 <_printf_i+0x174>
 8012bfc:	0659      	lsls	r1, r3, #25
 8012bfe:	bf48      	it	mi
 8012c00:	b2b6      	uxthmi	r6, r6
 8012c02:	e7e6      	b.n	8012bd2 <_printf_i+0x182>
 8012c04:	4615      	mov	r5, r2
 8012c06:	e7bb      	b.n	8012b80 <_printf_i+0x130>
 8012c08:	682b      	ldr	r3, [r5, #0]
 8012c0a:	6826      	ldr	r6, [r4, #0]
 8012c0c:	6961      	ldr	r1, [r4, #20]
 8012c0e:	1d18      	adds	r0, r3, #4
 8012c10:	6028      	str	r0, [r5, #0]
 8012c12:	0635      	lsls	r5, r6, #24
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	d501      	bpl.n	8012c1c <_printf_i+0x1cc>
 8012c18:	6019      	str	r1, [r3, #0]
 8012c1a:	e002      	b.n	8012c22 <_printf_i+0x1d2>
 8012c1c:	0670      	lsls	r0, r6, #25
 8012c1e:	d5fb      	bpl.n	8012c18 <_printf_i+0x1c8>
 8012c20:	8019      	strh	r1, [r3, #0]
 8012c22:	2300      	movs	r3, #0
 8012c24:	6123      	str	r3, [r4, #16]
 8012c26:	4615      	mov	r5, r2
 8012c28:	e7ba      	b.n	8012ba0 <_printf_i+0x150>
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	1d1a      	adds	r2, r3, #4
 8012c2e:	602a      	str	r2, [r5, #0]
 8012c30:	681d      	ldr	r5, [r3, #0]
 8012c32:	6862      	ldr	r2, [r4, #4]
 8012c34:	2100      	movs	r1, #0
 8012c36:	4628      	mov	r0, r5
 8012c38:	f7ed fb5a 	bl	80002f0 <memchr>
 8012c3c:	b108      	cbz	r0, 8012c42 <_printf_i+0x1f2>
 8012c3e:	1b40      	subs	r0, r0, r5
 8012c40:	6060      	str	r0, [r4, #4]
 8012c42:	6863      	ldr	r3, [r4, #4]
 8012c44:	6123      	str	r3, [r4, #16]
 8012c46:	2300      	movs	r3, #0
 8012c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c4c:	e7a8      	b.n	8012ba0 <_printf_i+0x150>
 8012c4e:	6923      	ldr	r3, [r4, #16]
 8012c50:	462a      	mov	r2, r5
 8012c52:	4649      	mov	r1, r9
 8012c54:	4640      	mov	r0, r8
 8012c56:	47d0      	blx	sl
 8012c58:	3001      	adds	r0, #1
 8012c5a:	d0ab      	beq.n	8012bb4 <_printf_i+0x164>
 8012c5c:	6823      	ldr	r3, [r4, #0]
 8012c5e:	079b      	lsls	r3, r3, #30
 8012c60:	d413      	bmi.n	8012c8a <_printf_i+0x23a>
 8012c62:	68e0      	ldr	r0, [r4, #12]
 8012c64:	9b03      	ldr	r3, [sp, #12]
 8012c66:	4298      	cmp	r0, r3
 8012c68:	bfb8      	it	lt
 8012c6a:	4618      	movlt	r0, r3
 8012c6c:	e7a4      	b.n	8012bb8 <_printf_i+0x168>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	4632      	mov	r2, r6
 8012c72:	4649      	mov	r1, r9
 8012c74:	4640      	mov	r0, r8
 8012c76:	47d0      	blx	sl
 8012c78:	3001      	adds	r0, #1
 8012c7a:	d09b      	beq.n	8012bb4 <_printf_i+0x164>
 8012c7c:	3501      	adds	r5, #1
 8012c7e:	68e3      	ldr	r3, [r4, #12]
 8012c80:	9903      	ldr	r1, [sp, #12]
 8012c82:	1a5b      	subs	r3, r3, r1
 8012c84:	42ab      	cmp	r3, r5
 8012c86:	dcf2      	bgt.n	8012c6e <_printf_i+0x21e>
 8012c88:	e7eb      	b.n	8012c62 <_printf_i+0x212>
 8012c8a:	2500      	movs	r5, #0
 8012c8c:	f104 0619 	add.w	r6, r4, #25
 8012c90:	e7f5      	b.n	8012c7e <_printf_i+0x22e>
 8012c92:	bf00      	nop
 8012c94:	08016856 	.word	0x08016856
 8012c98:	08016867 	.word	0x08016867

08012c9c <quorem>:
 8012c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	6903      	ldr	r3, [r0, #16]
 8012ca2:	690c      	ldr	r4, [r1, #16]
 8012ca4:	42a3      	cmp	r3, r4
 8012ca6:	4607      	mov	r7, r0
 8012ca8:	f2c0 8081 	blt.w	8012dae <quorem+0x112>
 8012cac:	3c01      	subs	r4, #1
 8012cae:	f101 0814 	add.w	r8, r1, #20
 8012cb2:	f100 0514 	add.w	r5, r0, #20
 8012cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8012cd4:	d331      	bcc.n	8012d3a <quorem+0x9e>
 8012cd6:	f04f 0e00 	mov.w	lr, #0
 8012cda:	4640      	mov	r0, r8
 8012cdc:	46ac      	mov	ip, r5
 8012cde:	46f2      	mov	sl, lr
 8012ce0:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ce4:	b293      	uxth	r3, r2
 8012ce6:	fb06 e303 	mla	r3, r6, r3, lr
 8012cea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8012cf4:	f8dc a000 	ldr.w	sl, [ip]
 8012cf8:	0c12      	lsrs	r2, r2, #16
 8012cfa:	fa13 f38a 	uxtah	r3, r3, sl
 8012cfe:	fb06 e202 	mla	r2, r6, r2, lr
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	9b00      	ldr	r3, [sp, #0]
 8012d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012d0a:	b292      	uxth	r2, r2
 8012d0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d14:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d18:	4581      	cmp	r9, r0
 8012d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d1e:	f84c 3b04 	str.w	r3, [ip], #4
 8012d22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012d26:	d2db      	bcs.n	8012ce0 <quorem+0x44>
 8012d28:	f855 300b 	ldr.w	r3, [r5, fp]
 8012d2c:	b92b      	cbnz	r3, 8012d3a <quorem+0x9e>
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	3b04      	subs	r3, #4
 8012d32:	429d      	cmp	r5, r3
 8012d34:	461a      	mov	r2, r3
 8012d36:	d32e      	bcc.n	8012d96 <quorem+0xfa>
 8012d38:	613c      	str	r4, [r7, #16]
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	f001 f846 	bl	8013dcc <__mcmp>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	db24      	blt.n	8012d8e <quorem+0xf2>
 8012d44:	3601      	adds	r6, #1
 8012d46:	4628      	mov	r0, r5
 8012d48:	f04f 0c00 	mov.w	ip, #0
 8012d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d50:	f8d0 e000 	ldr.w	lr, [r0]
 8012d54:	b293      	uxth	r3, r2
 8012d56:	ebac 0303 	sub.w	r3, ip, r3
 8012d5a:	0c12      	lsrs	r2, r2, #16
 8012d5c:	fa13 f38e 	uxtah	r3, r3, lr
 8012d60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d6e:	45c1      	cmp	r9, r8
 8012d70:	f840 3b04 	str.w	r3, [r0], #4
 8012d74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d78:	d2e8      	bcs.n	8012d4c <quorem+0xb0>
 8012d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d82:	b922      	cbnz	r2, 8012d8e <quorem+0xf2>
 8012d84:	3b04      	subs	r3, #4
 8012d86:	429d      	cmp	r5, r3
 8012d88:	461a      	mov	r2, r3
 8012d8a:	d30a      	bcc.n	8012da2 <quorem+0x106>
 8012d8c:	613c      	str	r4, [r7, #16]
 8012d8e:	4630      	mov	r0, r6
 8012d90:	b003      	add	sp, #12
 8012d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d96:	6812      	ldr	r2, [r2, #0]
 8012d98:	3b04      	subs	r3, #4
 8012d9a:	2a00      	cmp	r2, #0
 8012d9c:	d1cc      	bne.n	8012d38 <quorem+0x9c>
 8012d9e:	3c01      	subs	r4, #1
 8012da0:	e7c7      	b.n	8012d32 <quorem+0x96>
 8012da2:	6812      	ldr	r2, [r2, #0]
 8012da4:	3b04      	subs	r3, #4
 8012da6:	2a00      	cmp	r2, #0
 8012da8:	d1f0      	bne.n	8012d8c <quorem+0xf0>
 8012daa:	3c01      	subs	r4, #1
 8012dac:	e7eb      	b.n	8012d86 <quorem+0xea>
 8012dae:	2000      	movs	r0, #0
 8012db0:	e7ee      	b.n	8012d90 <quorem+0xf4>
 8012db2:	0000      	movs	r0, r0
 8012db4:	0000      	movs	r0, r0
	...

08012db8 <_dtoa_r>:
 8012db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dbc:	ed2d 8b02 	vpush	{d8}
 8012dc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012dc2:	b091      	sub	sp, #68	; 0x44
 8012dc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012dc8:	ec59 8b10 	vmov	r8, r9, d0
 8012dcc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012dce:	9106      	str	r1, [sp, #24]
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	9208      	str	r2, [sp, #32]
 8012dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8012dd6:	b975      	cbnz	r5, 8012df6 <_dtoa_r+0x3e>
 8012dd8:	2010      	movs	r0, #16
 8012dda:	f000 fd5f 	bl	801389c <malloc>
 8012dde:	4602      	mov	r2, r0
 8012de0:	6270      	str	r0, [r6, #36]	; 0x24
 8012de2:	b920      	cbnz	r0, 8012dee <_dtoa_r+0x36>
 8012de4:	4baa      	ldr	r3, [pc, #680]	; (8013090 <_dtoa_r+0x2d8>)
 8012de6:	21ea      	movs	r1, #234	; 0xea
 8012de8:	48aa      	ldr	r0, [pc, #680]	; (8013094 <_dtoa_r+0x2dc>)
 8012dea:	f001 f9f7 	bl	80141dc <__assert_func>
 8012dee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012df2:	6005      	str	r5, [r0, #0]
 8012df4:	60c5      	str	r5, [r0, #12]
 8012df6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012df8:	6819      	ldr	r1, [r3, #0]
 8012dfa:	b151      	cbz	r1, 8012e12 <_dtoa_r+0x5a>
 8012dfc:	685a      	ldr	r2, [r3, #4]
 8012dfe:	604a      	str	r2, [r1, #4]
 8012e00:	2301      	movs	r3, #1
 8012e02:	4093      	lsls	r3, r2
 8012e04:	608b      	str	r3, [r1, #8]
 8012e06:	4630      	mov	r0, r6
 8012e08:	f000 fd9e 	bl	8013948 <_Bfree>
 8012e0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012e0e:	2200      	movs	r2, #0
 8012e10:	601a      	str	r2, [r3, #0]
 8012e12:	f1b9 0300 	subs.w	r3, r9, #0
 8012e16:	bfbb      	ittet	lt
 8012e18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e1c:	9303      	strlt	r3, [sp, #12]
 8012e1e:	2300      	movge	r3, #0
 8012e20:	2201      	movlt	r2, #1
 8012e22:	bfac      	ite	ge
 8012e24:	6023      	strge	r3, [r4, #0]
 8012e26:	6022      	strlt	r2, [r4, #0]
 8012e28:	4b9b      	ldr	r3, [pc, #620]	; (8013098 <_dtoa_r+0x2e0>)
 8012e2a:	9c03      	ldr	r4, [sp, #12]
 8012e2c:	43a3      	bics	r3, r4
 8012e2e:	d11c      	bne.n	8012e6a <_dtoa_r+0xb2>
 8012e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e36:	6013      	str	r3, [r2, #0]
 8012e38:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012e3c:	ea53 0308 	orrs.w	r3, r3, r8
 8012e40:	f000 84fd 	beq.w	801383e <_dtoa_r+0xa86>
 8012e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e46:	b963      	cbnz	r3, 8012e62 <_dtoa_r+0xaa>
 8012e48:	4b94      	ldr	r3, [pc, #592]	; (801309c <_dtoa_r+0x2e4>)
 8012e4a:	e01f      	b.n	8012e8c <_dtoa_r+0xd4>
 8012e4c:	4b94      	ldr	r3, [pc, #592]	; (80130a0 <_dtoa_r+0x2e8>)
 8012e4e:	9301      	str	r3, [sp, #4]
 8012e50:	3308      	adds	r3, #8
 8012e52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012e54:	6013      	str	r3, [r2, #0]
 8012e56:	9801      	ldr	r0, [sp, #4]
 8012e58:	b011      	add	sp, #68	; 0x44
 8012e5a:	ecbd 8b02 	vpop	{d8}
 8012e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e62:	4b8e      	ldr	r3, [pc, #568]	; (801309c <_dtoa_r+0x2e4>)
 8012e64:	9301      	str	r3, [sp, #4]
 8012e66:	3303      	adds	r3, #3
 8012e68:	e7f3      	b.n	8012e52 <_dtoa_r+0x9a>
 8012e6a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012e6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e76:	d10b      	bne.n	8012e90 <_dtoa_r+0xd8>
 8012e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	6013      	str	r3, [r2, #0]
 8012e7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f000 84d9 	beq.w	8013838 <_dtoa_r+0xa80>
 8012e86:	4887      	ldr	r0, [pc, #540]	; (80130a4 <_dtoa_r+0x2ec>)
 8012e88:	6018      	str	r0, [r3, #0]
 8012e8a:	1e43      	subs	r3, r0, #1
 8012e8c:	9301      	str	r3, [sp, #4]
 8012e8e:	e7e2      	b.n	8012e56 <_dtoa_r+0x9e>
 8012e90:	a90f      	add	r1, sp, #60	; 0x3c
 8012e92:	aa0e      	add	r2, sp, #56	; 0x38
 8012e94:	4630      	mov	r0, r6
 8012e96:	eeb0 0b48 	vmov.f64	d0, d8
 8012e9a:	f001 f83d 	bl	8013f18 <__d2b>
 8012e9e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012ea2:	4605      	mov	r5, r0
 8012ea4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012ea6:	2900      	cmp	r1, #0
 8012ea8:	d046      	beq.n	8012f38 <_dtoa_r+0x180>
 8012eaa:	ee18 4a90 	vmov	r4, s17
 8012eae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012eb2:	ec53 2b18 	vmov	r2, r3, d8
 8012eb6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012eba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012ec2:	2400      	movs	r4, #0
 8012ec4:	ec43 2b16 	vmov	d6, r2, r3
 8012ec8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012ecc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013078 <_dtoa_r+0x2c0>
 8012ed0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ed4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013080 <_dtoa_r+0x2c8>
 8012ed8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012edc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013088 <_dtoa_r+0x2d0>
 8012ee0:	ee07 1a90 	vmov	s15, r1
 8012ee4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012ee8:	eeb0 7b46 	vmov.f64	d7, d6
 8012eec:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012ef0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012ef4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efc:	ee16 ba90 	vmov	fp, s13
 8012f00:	940a      	str	r4, [sp, #40]	; 0x28
 8012f02:	d508      	bpl.n	8012f16 <_dtoa_r+0x15e>
 8012f04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012f08:	eeb4 6b47 	vcmp.f64	d6, d7
 8012f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f10:	bf18      	it	ne
 8012f12:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012f16:	f1bb 0f16 	cmp.w	fp, #22
 8012f1a:	d82f      	bhi.n	8012f7c <_dtoa_r+0x1c4>
 8012f1c:	4b62      	ldr	r3, [pc, #392]	; (80130a8 <_dtoa_r+0x2f0>)
 8012f1e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012f22:	ed93 7b00 	vldr	d7, [r3]
 8012f26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f2e:	d501      	bpl.n	8012f34 <_dtoa_r+0x17c>
 8012f30:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012f34:	2300      	movs	r3, #0
 8012f36:	e022      	b.n	8012f7e <_dtoa_r+0x1c6>
 8012f38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f3a:	4401      	add	r1, r0
 8012f3c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012f40:	2b20      	cmp	r3, #32
 8012f42:	bfc1      	itttt	gt
 8012f44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012f48:	fa04 f303 	lslgt.w	r3, r4, r3
 8012f4c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012f50:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012f54:	bfd6      	itet	le
 8012f56:	f1c3 0320 	rsble	r3, r3, #32
 8012f5a:	ea43 0808 	orrgt.w	r8, r3, r8
 8012f5e:	fa08 f803 	lslle.w	r8, r8, r3
 8012f62:	ee07 8a90 	vmov	s15, r8
 8012f66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012f6a:	3901      	subs	r1, #1
 8012f6c:	ee17 4a90 	vmov	r4, s15
 8012f70:	ec53 2b17 	vmov	r2, r3, d7
 8012f74:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012f78:	2401      	movs	r4, #1
 8012f7a:	e7a3      	b.n	8012ec4 <_dtoa_r+0x10c>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f80:	1a43      	subs	r3, r0, r1
 8012f82:	1e5a      	subs	r2, r3, #1
 8012f84:	bf45      	ittet	mi
 8012f86:	f1c3 0301 	rsbmi	r3, r3, #1
 8012f8a:	9304      	strmi	r3, [sp, #16]
 8012f8c:	2300      	movpl	r3, #0
 8012f8e:	2300      	movmi	r3, #0
 8012f90:	9205      	str	r2, [sp, #20]
 8012f92:	bf54      	ite	pl
 8012f94:	9304      	strpl	r3, [sp, #16]
 8012f96:	9305      	strmi	r3, [sp, #20]
 8012f98:	f1bb 0f00 	cmp.w	fp, #0
 8012f9c:	db18      	blt.n	8012fd0 <_dtoa_r+0x218>
 8012f9e:	9b05      	ldr	r3, [sp, #20]
 8012fa0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012fa4:	445b      	add	r3, fp
 8012fa6:	9305      	str	r3, [sp, #20]
 8012fa8:	2300      	movs	r3, #0
 8012faa:	9a06      	ldr	r2, [sp, #24]
 8012fac:	2a09      	cmp	r2, #9
 8012fae:	d849      	bhi.n	8013044 <_dtoa_r+0x28c>
 8012fb0:	2a05      	cmp	r2, #5
 8012fb2:	bfc4      	itt	gt
 8012fb4:	3a04      	subgt	r2, #4
 8012fb6:	9206      	strgt	r2, [sp, #24]
 8012fb8:	9a06      	ldr	r2, [sp, #24]
 8012fba:	f1a2 0202 	sub.w	r2, r2, #2
 8012fbe:	bfcc      	ite	gt
 8012fc0:	2400      	movgt	r4, #0
 8012fc2:	2401      	movle	r4, #1
 8012fc4:	2a03      	cmp	r2, #3
 8012fc6:	d848      	bhi.n	801305a <_dtoa_r+0x2a2>
 8012fc8:	e8df f002 	tbb	[pc, r2]
 8012fcc:	3a2c2e0b 	.word	0x3a2c2e0b
 8012fd0:	9b04      	ldr	r3, [sp, #16]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	eba3 030b 	sub.w	r3, r3, fp
 8012fd8:	9304      	str	r3, [sp, #16]
 8012fda:	9209      	str	r2, [sp, #36]	; 0x24
 8012fdc:	f1cb 0300 	rsb	r3, fp, #0
 8012fe0:	e7e3      	b.n	8012faa <_dtoa_r+0x1f2>
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	9207      	str	r2, [sp, #28]
 8012fe6:	9a08      	ldr	r2, [sp, #32]
 8012fe8:	2a00      	cmp	r2, #0
 8012fea:	dc39      	bgt.n	8013060 <_dtoa_r+0x2a8>
 8012fec:	f04f 0a01 	mov.w	sl, #1
 8012ff0:	46d1      	mov	r9, sl
 8012ff2:	4652      	mov	r2, sl
 8012ff4:	f8cd a020 	str.w	sl, [sp, #32]
 8012ff8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012ffa:	2100      	movs	r1, #0
 8012ffc:	6079      	str	r1, [r7, #4]
 8012ffe:	2004      	movs	r0, #4
 8013000:	f100 0c14 	add.w	ip, r0, #20
 8013004:	4594      	cmp	ip, r2
 8013006:	6879      	ldr	r1, [r7, #4]
 8013008:	d92f      	bls.n	801306a <_dtoa_r+0x2b2>
 801300a:	4630      	mov	r0, r6
 801300c:	930d      	str	r3, [sp, #52]	; 0x34
 801300e:	f000 fc5b 	bl	80138c8 <_Balloc>
 8013012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013014:	9001      	str	r0, [sp, #4]
 8013016:	4602      	mov	r2, r0
 8013018:	2800      	cmp	r0, #0
 801301a:	d149      	bne.n	80130b0 <_dtoa_r+0x2f8>
 801301c:	4b23      	ldr	r3, [pc, #140]	; (80130ac <_dtoa_r+0x2f4>)
 801301e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013022:	e6e1      	b.n	8012de8 <_dtoa_r+0x30>
 8013024:	2201      	movs	r2, #1
 8013026:	e7dd      	b.n	8012fe4 <_dtoa_r+0x22c>
 8013028:	2200      	movs	r2, #0
 801302a:	9207      	str	r2, [sp, #28]
 801302c:	9a08      	ldr	r2, [sp, #32]
 801302e:	eb0b 0a02 	add.w	sl, fp, r2
 8013032:	f10a 0901 	add.w	r9, sl, #1
 8013036:	464a      	mov	r2, r9
 8013038:	2a01      	cmp	r2, #1
 801303a:	bfb8      	it	lt
 801303c:	2201      	movlt	r2, #1
 801303e:	e7db      	b.n	8012ff8 <_dtoa_r+0x240>
 8013040:	2201      	movs	r2, #1
 8013042:	e7f2      	b.n	801302a <_dtoa_r+0x272>
 8013044:	2401      	movs	r4, #1
 8013046:	2200      	movs	r2, #0
 8013048:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801304c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013050:	2100      	movs	r1, #0
 8013052:	46d1      	mov	r9, sl
 8013054:	2212      	movs	r2, #18
 8013056:	9108      	str	r1, [sp, #32]
 8013058:	e7ce      	b.n	8012ff8 <_dtoa_r+0x240>
 801305a:	2201      	movs	r2, #1
 801305c:	9207      	str	r2, [sp, #28]
 801305e:	e7f5      	b.n	801304c <_dtoa_r+0x294>
 8013060:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013064:	46d1      	mov	r9, sl
 8013066:	4652      	mov	r2, sl
 8013068:	e7c6      	b.n	8012ff8 <_dtoa_r+0x240>
 801306a:	3101      	adds	r1, #1
 801306c:	6079      	str	r1, [r7, #4]
 801306e:	0040      	lsls	r0, r0, #1
 8013070:	e7c6      	b.n	8013000 <_dtoa_r+0x248>
 8013072:	bf00      	nop
 8013074:	f3af 8000 	nop.w
 8013078:	636f4361 	.word	0x636f4361
 801307c:	3fd287a7 	.word	0x3fd287a7
 8013080:	8b60c8b3 	.word	0x8b60c8b3
 8013084:	3fc68a28 	.word	0x3fc68a28
 8013088:	509f79fb 	.word	0x509f79fb
 801308c:	3fd34413 	.word	0x3fd34413
 8013090:	08016885 	.word	0x08016885
 8013094:	0801689c 	.word	0x0801689c
 8013098:	7ff00000 	.word	0x7ff00000
 801309c:	08016881 	.word	0x08016881
 80130a0:	08016878 	.word	0x08016878
 80130a4:	08016855 	.word	0x08016855
 80130a8:	08016990 	.word	0x08016990
 80130ac:	080168f7 	.word	0x080168f7
 80130b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80130b2:	9901      	ldr	r1, [sp, #4]
 80130b4:	6011      	str	r1, [r2, #0]
 80130b6:	f1b9 0f0e 	cmp.w	r9, #14
 80130ba:	d86c      	bhi.n	8013196 <_dtoa_r+0x3de>
 80130bc:	2c00      	cmp	r4, #0
 80130be:	d06a      	beq.n	8013196 <_dtoa_r+0x3de>
 80130c0:	f1bb 0f00 	cmp.w	fp, #0
 80130c4:	f340 80a0 	ble.w	8013208 <_dtoa_r+0x450>
 80130c8:	49c1      	ldr	r1, [pc, #772]	; (80133d0 <_dtoa_r+0x618>)
 80130ca:	f00b 020f 	and.w	r2, fp, #15
 80130ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80130d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80130d6:	ed92 7b00 	vldr	d7, [r2]
 80130da:	ea4f 112b 	mov.w	r1, fp, asr #4
 80130de:	f000 8087 	beq.w	80131f0 <_dtoa_r+0x438>
 80130e2:	4abc      	ldr	r2, [pc, #752]	; (80133d4 <_dtoa_r+0x61c>)
 80130e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80130e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80130ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80130f0:	f001 010f 	and.w	r1, r1, #15
 80130f4:	2203      	movs	r2, #3
 80130f6:	48b7      	ldr	r0, [pc, #732]	; (80133d4 <_dtoa_r+0x61c>)
 80130f8:	2900      	cmp	r1, #0
 80130fa:	d17b      	bne.n	80131f4 <_dtoa_r+0x43c>
 80130fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013100:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013104:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801310a:	2900      	cmp	r1, #0
 801310c:	f000 80a2 	beq.w	8013254 <_dtoa_r+0x49c>
 8013110:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013114:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013118:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013120:	f140 8098 	bpl.w	8013254 <_dtoa_r+0x49c>
 8013124:	f1b9 0f00 	cmp.w	r9, #0
 8013128:	f000 8094 	beq.w	8013254 <_dtoa_r+0x49c>
 801312c:	f1ba 0f00 	cmp.w	sl, #0
 8013130:	dd2f      	ble.n	8013192 <_dtoa_r+0x3da>
 8013132:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013136:	ee27 7b06 	vmul.f64	d7, d7, d6
 801313a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801313e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8013142:	3201      	adds	r2, #1
 8013144:	4650      	mov	r0, sl
 8013146:	ed9d 6b02 	vldr	d6, [sp, #8]
 801314a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801314e:	ee07 2a90 	vmov	s15, r2
 8013152:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013156:	eea7 5b06 	vfma.f64	d5, d7, d6
 801315a:	ee15 4a90 	vmov	r4, s11
 801315e:	ec52 1b15 	vmov	r1, r2, d5
 8013162:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013166:	2800      	cmp	r0, #0
 8013168:	d177      	bne.n	801325a <_dtoa_r+0x4a2>
 801316a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801316e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013172:	ec42 1b17 	vmov	d7, r1, r2
 8013176:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317e:	f300 8263 	bgt.w	8013648 <_dtoa_r+0x890>
 8013182:	eeb1 7b47 	vneg.f64	d7, d7
 8013186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318e:	f100 8258 	bmi.w	8013642 <_dtoa_r+0x88a>
 8013192:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013198:	2a00      	cmp	r2, #0
 801319a:	f2c0 811d 	blt.w	80133d8 <_dtoa_r+0x620>
 801319e:	f1bb 0f0e 	cmp.w	fp, #14
 80131a2:	f300 8119 	bgt.w	80133d8 <_dtoa_r+0x620>
 80131a6:	4b8a      	ldr	r3, [pc, #552]	; (80133d0 <_dtoa_r+0x618>)
 80131a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80131ac:	ed93 6b00 	vldr	d6, [r3]
 80131b0:	9b08      	ldr	r3, [sp, #32]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f280 80b7 	bge.w	8013326 <_dtoa_r+0x56e>
 80131b8:	f1b9 0f00 	cmp.w	r9, #0
 80131bc:	f300 80b3 	bgt.w	8013326 <_dtoa_r+0x56e>
 80131c0:	f040 823f 	bne.w	8013642 <_dtoa_r+0x88a>
 80131c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80131c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80131cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d8:	464c      	mov	r4, r9
 80131da:	464f      	mov	r7, r9
 80131dc:	f280 8215 	bge.w	801360a <_dtoa_r+0x852>
 80131e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80131e4:	2331      	movs	r3, #49	; 0x31
 80131e6:	f808 3b01 	strb.w	r3, [r8], #1
 80131ea:	f10b 0b01 	add.w	fp, fp, #1
 80131ee:	e211      	b.n	8013614 <_dtoa_r+0x85c>
 80131f0:	2202      	movs	r2, #2
 80131f2:	e780      	b.n	80130f6 <_dtoa_r+0x33e>
 80131f4:	07cc      	lsls	r4, r1, #31
 80131f6:	d504      	bpl.n	8013202 <_dtoa_r+0x44a>
 80131f8:	ed90 6b00 	vldr	d6, [r0]
 80131fc:	3201      	adds	r2, #1
 80131fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013202:	1049      	asrs	r1, r1, #1
 8013204:	3008      	adds	r0, #8
 8013206:	e777      	b.n	80130f8 <_dtoa_r+0x340>
 8013208:	d022      	beq.n	8013250 <_dtoa_r+0x498>
 801320a:	f1cb 0100 	rsb	r1, fp, #0
 801320e:	4a70      	ldr	r2, [pc, #448]	; (80133d0 <_dtoa_r+0x618>)
 8013210:	f001 000f 	and.w	r0, r1, #15
 8013214:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013218:	ed92 7b00 	vldr	d7, [r2]
 801321c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013224:	486b      	ldr	r0, [pc, #428]	; (80133d4 <_dtoa_r+0x61c>)
 8013226:	1109      	asrs	r1, r1, #4
 8013228:	2400      	movs	r4, #0
 801322a:	2202      	movs	r2, #2
 801322c:	b929      	cbnz	r1, 801323a <_dtoa_r+0x482>
 801322e:	2c00      	cmp	r4, #0
 8013230:	f43f af6a 	beq.w	8013108 <_dtoa_r+0x350>
 8013234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013238:	e766      	b.n	8013108 <_dtoa_r+0x350>
 801323a:	07cf      	lsls	r7, r1, #31
 801323c:	d505      	bpl.n	801324a <_dtoa_r+0x492>
 801323e:	ed90 6b00 	vldr	d6, [r0]
 8013242:	3201      	adds	r2, #1
 8013244:	2401      	movs	r4, #1
 8013246:	ee27 7b06 	vmul.f64	d7, d7, d6
 801324a:	1049      	asrs	r1, r1, #1
 801324c:	3008      	adds	r0, #8
 801324e:	e7ed      	b.n	801322c <_dtoa_r+0x474>
 8013250:	2202      	movs	r2, #2
 8013252:	e759      	b.n	8013108 <_dtoa_r+0x350>
 8013254:	465f      	mov	r7, fp
 8013256:	4648      	mov	r0, r9
 8013258:	e775      	b.n	8013146 <_dtoa_r+0x38e>
 801325a:	ec42 1b17 	vmov	d7, r1, r2
 801325e:	4a5c      	ldr	r2, [pc, #368]	; (80133d0 <_dtoa_r+0x618>)
 8013260:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013264:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013268:	9a01      	ldr	r2, [sp, #4]
 801326a:	1814      	adds	r4, r2, r0
 801326c:	9a07      	ldr	r2, [sp, #28]
 801326e:	b352      	cbz	r2, 80132c6 <_dtoa_r+0x50e>
 8013270:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013274:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013278:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801327c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013280:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013284:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013288:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801328c:	ee14 2a90 	vmov	r2, s9
 8013290:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013294:	3230      	adds	r2, #48	; 0x30
 8013296:	ee36 6b45 	vsub.f64	d6, d6, d5
 801329a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a2:	f808 2b01 	strb.w	r2, [r8], #1
 80132a6:	d439      	bmi.n	801331c <_dtoa_r+0x564>
 80132a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80132ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	d472      	bmi.n	801339c <_dtoa_r+0x5e4>
 80132b6:	45a0      	cmp	r8, r4
 80132b8:	f43f af6b 	beq.w	8013192 <_dtoa_r+0x3da>
 80132bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80132c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80132c4:	e7e0      	b.n	8013288 <_dtoa_r+0x4d0>
 80132c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80132ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80132ce:	4621      	mov	r1, r4
 80132d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80132d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80132d8:	ee14 2a90 	vmov	r2, s9
 80132dc:	3230      	adds	r2, #48	; 0x30
 80132de:	f808 2b01 	strb.w	r2, [r8], #1
 80132e2:	45a0      	cmp	r8, r4
 80132e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80132e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80132ec:	d118      	bne.n	8013320 <_dtoa_r+0x568>
 80132ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80132f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80132f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80132fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fe:	dc4d      	bgt.n	801339c <_dtoa_r+0x5e4>
 8013300:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013304:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330c:	f57f af41 	bpl.w	8013192 <_dtoa_r+0x3da>
 8013310:	4688      	mov	r8, r1
 8013312:	3901      	subs	r1, #1
 8013314:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013318:	2b30      	cmp	r3, #48	; 0x30
 801331a:	d0f9      	beq.n	8013310 <_dtoa_r+0x558>
 801331c:	46bb      	mov	fp, r7
 801331e:	e02a      	b.n	8013376 <_dtoa_r+0x5be>
 8013320:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013324:	e7d6      	b.n	80132d4 <_dtoa_r+0x51c>
 8013326:	ed9d 7b02 	vldr	d7, [sp, #8]
 801332a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801332e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013332:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013336:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801333a:	ee15 3a10 	vmov	r3, s10
 801333e:	3330      	adds	r3, #48	; 0x30
 8013340:	f808 3b01 	strb.w	r3, [r8], #1
 8013344:	9b01      	ldr	r3, [sp, #4]
 8013346:	eba8 0303 	sub.w	r3, r8, r3
 801334a:	4599      	cmp	r9, r3
 801334c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013350:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013354:	d133      	bne.n	80133be <_dtoa_r+0x606>
 8013356:	ee37 7b07 	vadd.f64	d7, d7, d7
 801335a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013362:	dc1a      	bgt.n	801339a <_dtoa_r+0x5e2>
 8013364:	eeb4 7b46 	vcmp.f64	d7, d6
 8013368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801336c:	d103      	bne.n	8013376 <_dtoa_r+0x5be>
 801336e:	ee15 3a10 	vmov	r3, s10
 8013372:	07d9      	lsls	r1, r3, #31
 8013374:	d411      	bmi.n	801339a <_dtoa_r+0x5e2>
 8013376:	4629      	mov	r1, r5
 8013378:	4630      	mov	r0, r6
 801337a:	f000 fae5 	bl	8013948 <_Bfree>
 801337e:	2300      	movs	r3, #0
 8013380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013382:	f888 3000 	strb.w	r3, [r8]
 8013386:	f10b 0301 	add.w	r3, fp, #1
 801338a:	6013      	str	r3, [r2, #0]
 801338c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801338e:	2b00      	cmp	r3, #0
 8013390:	f43f ad61 	beq.w	8012e56 <_dtoa_r+0x9e>
 8013394:	f8c3 8000 	str.w	r8, [r3]
 8013398:	e55d      	b.n	8012e56 <_dtoa_r+0x9e>
 801339a:	465f      	mov	r7, fp
 801339c:	4643      	mov	r3, r8
 801339e:	4698      	mov	r8, r3
 80133a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133a4:	2a39      	cmp	r2, #57	; 0x39
 80133a6:	d106      	bne.n	80133b6 <_dtoa_r+0x5fe>
 80133a8:	9a01      	ldr	r2, [sp, #4]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d1f7      	bne.n	801339e <_dtoa_r+0x5e6>
 80133ae:	9901      	ldr	r1, [sp, #4]
 80133b0:	2230      	movs	r2, #48	; 0x30
 80133b2:	3701      	adds	r7, #1
 80133b4:	700a      	strb	r2, [r1, #0]
 80133b6:	781a      	ldrb	r2, [r3, #0]
 80133b8:	3201      	adds	r2, #1
 80133ba:	701a      	strb	r2, [r3, #0]
 80133bc:	e7ae      	b.n	801331c <_dtoa_r+0x564>
 80133be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80133c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80133c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ca:	d1b2      	bne.n	8013332 <_dtoa_r+0x57a>
 80133cc:	e7d3      	b.n	8013376 <_dtoa_r+0x5be>
 80133ce:	bf00      	nop
 80133d0:	08016990 	.word	0x08016990
 80133d4:	08016968 	.word	0x08016968
 80133d8:	9907      	ldr	r1, [sp, #28]
 80133da:	2900      	cmp	r1, #0
 80133dc:	f000 80d0 	beq.w	8013580 <_dtoa_r+0x7c8>
 80133e0:	9906      	ldr	r1, [sp, #24]
 80133e2:	2901      	cmp	r1, #1
 80133e4:	f300 80b4 	bgt.w	8013550 <_dtoa_r+0x798>
 80133e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80133ea:	2900      	cmp	r1, #0
 80133ec:	f000 80ac 	beq.w	8013548 <_dtoa_r+0x790>
 80133f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80133f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80133f8:	461c      	mov	r4, r3
 80133fa:	930a      	str	r3, [sp, #40]	; 0x28
 80133fc:	9b04      	ldr	r3, [sp, #16]
 80133fe:	4413      	add	r3, r2
 8013400:	9304      	str	r3, [sp, #16]
 8013402:	9b05      	ldr	r3, [sp, #20]
 8013404:	2101      	movs	r1, #1
 8013406:	4413      	add	r3, r2
 8013408:	4630      	mov	r0, r6
 801340a:	9305      	str	r3, [sp, #20]
 801340c:	f000 fb54 	bl	8013ab8 <__i2b>
 8013410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013412:	4607      	mov	r7, r0
 8013414:	f1b8 0f00 	cmp.w	r8, #0
 8013418:	dd0d      	ble.n	8013436 <_dtoa_r+0x67e>
 801341a:	9a05      	ldr	r2, [sp, #20]
 801341c:	2a00      	cmp	r2, #0
 801341e:	dd0a      	ble.n	8013436 <_dtoa_r+0x67e>
 8013420:	4542      	cmp	r2, r8
 8013422:	9904      	ldr	r1, [sp, #16]
 8013424:	bfa8      	it	ge
 8013426:	4642      	movge	r2, r8
 8013428:	1a89      	subs	r1, r1, r2
 801342a:	9104      	str	r1, [sp, #16]
 801342c:	9905      	ldr	r1, [sp, #20]
 801342e:	eba8 0802 	sub.w	r8, r8, r2
 8013432:	1a8a      	subs	r2, r1, r2
 8013434:	9205      	str	r2, [sp, #20]
 8013436:	b303      	cbz	r3, 801347a <_dtoa_r+0x6c2>
 8013438:	9a07      	ldr	r2, [sp, #28]
 801343a:	2a00      	cmp	r2, #0
 801343c:	f000 80a5 	beq.w	801358a <_dtoa_r+0x7d2>
 8013440:	2c00      	cmp	r4, #0
 8013442:	dd13      	ble.n	801346c <_dtoa_r+0x6b4>
 8013444:	4639      	mov	r1, r7
 8013446:	4622      	mov	r2, r4
 8013448:	4630      	mov	r0, r6
 801344a:	930d      	str	r3, [sp, #52]	; 0x34
 801344c:	f000 fbf4 	bl	8013c38 <__pow5mult>
 8013450:	462a      	mov	r2, r5
 8013452:	4601      	mov	r1, r0
 8013454:	4607      	mov	r7, r0
 8013456:	4630      	mov	r0, r6
 8013458:	f000 fb44 	bl	8013ae4 <__multiply>
 801345c:	4629      	mov	r1, r5
 801345e:	900a      	str	r0, [sp, #40]	; 0x28
 8013460:	4630      	mov	r0, r6
 8013462:	f000 fa71 	bl	8013948 <_Bfree>
 8013466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801346a:	4615      	mov	r5, r2
 801346c:	1b1a      	subs	r2, r3, r4
 801346e:	d004      	beq.n	801347a <_dtoa_r+0x6c2>
 8013470:	4629      	mov	r1, r5
 8013472:	4630      	mov	r0, r6
 8013474:	f000 fbe0 	bl	8013c38 <__pow5mult>
 8013478:	4605      	mov	r5, r0
 801347a:	2101      	movs	r1, #1
 801347c:	4630      	mov	r0, r6
 801347e:	f000 fb1b 	bl	8013ab8 <__i2b>
 8013482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013484:	2b00      	cmp	r3, #0
 8013486:	4604      	mov	r4, r0
 8013488:	f340 8081 	ble.w	801358e <_dtoa_r+0x7d6>
 801348c:	461a      	mov	r2, r3
 801348e:	4601      	mov	r1, r0
 8013490:	4630      	mov	r0, r6
 8013492:	f000 fbd1 	bl	8013c38 <__pow5mult>
 8013496:	9b06      	ldr	r3, [sp, #24]
 8013498:	2b01      	cmp	r3, #1
 801349a:	4604      	mov	r4, r0
 801349c:	dd7a      	ble.n	8013594 <_dtoa_r+0x7dc>
 801349e:	2300      	movs	r3, #0
 80134a0:	930a      	str	r3, [sp, #40]	; 0x28
 80134a2:	6922      	ldr	r2, [r4, #16]
 80134a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80134a8:	6910      	ldr	r0, [r2, #16]
 80134aa:	f000 fab5 	bl	8013a18 <__hi0bits>
 80134ae:	f1c0 0020 	rsb	r0, r0, #32
 80134b2:	9b05      	ldr	r3, [sp, #20]
 80134b4:	4418      	add	r0, r3
 80134b6:	f010 001f 	ands.w	r0, r0, #31
 80134ba:	f000 808c 	beq.w	80135d6 <_dtoa_r+0x81e>
 80134be:	f1c0 0220 	rsb	r2, r0, #32
 80134c2:	2a04      	cmp	r2, #4
 80134c4:	f340 8085 	ble.w	80135d2 <_dtoa_r+0x81a>
 80134c8:	f1c0 001c 	rsb	r0, r0, #28
 80134cc:	9b04      	ldr	r3, [sp, #16]
 80134ce:	4403      	add	r3, r0
 80134d0:	9304      	str	r3, [sp, #16]
 80134d2:	9b05      	ldr	r3, [sp, #20]
 80134d4:	4403      	add	r3, r0
 80134d6:	4480      	add	r8, r0
 80134d8:	9305      	str	r3, [sp, #20]
 80134da:	9b04      	ldr	r3, [sp, #16]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	dd05      	ble.n	80134ec <_dtoa_r+0x734>
 80134e0:	4629      	mov	r1, r5
 80134e2:	461a      	mov	r2, r3
 80134e4:	4630      	mov	r0, r6
 80134e6:	f000 fc01 	bl	8013cec <__lshift>
 80134ea:	4605      	mov	r5, r0
 80134ec:	9b05      	ldr	r3, [sp, #20]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	dd05      	ble.n	80134fe <_dtoa_r+0x746>
 80134f2:	4621      	mov	r1, r4
 80134f4:	461a      	mov	r2, r3
 80134f6:	4630      	mov	r0, r6
 80134f8:	f000 fbf8 	bl	8013cec <__lshift>
 80134fc:	4604      	mov	r4, r0
 80134fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013500:	2b00      	cmp	r3, #0
 8013502:	d06a      	beq.n	80135da <_dtoa_r+0x822>
 8013504:	4621      	mov	r1, r4
 8013506:	4628      	mov	r0, r5
 8013508:	f000 fc60 	bl	8013dcc <__mcmp>
 801350c:	2800      	cmp	r0, #0
 801350e:	da64      	bge.n	80135da <_dtoa_r+0x822>
 8013510:	2300      	movs	r3, #0
 8013512:	4629      	mov	r1, r5
 8013514:	220a      	movs	r2, #10
 8013516:	4630      	mov	r0, r6
 8013518:	f000 fa38 	bl	801398c <__multadd>
 801351c:	9b07      	ldr	r3, [sp, #28]
 801351e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013522:	4605      	mov	r5, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	f000 8191 	beq.w	801384c <_dtoa_r+0xa94>
 801352a:	4639      	mov	r1, r7
 801352c:	2300      	movs	r3, #0
 801352e:	220a      	movs	r2, #10
 8013530:	4630      	mov	r0, r6
 8013532:	f000 fa2b 	bl	801398c <__multadd>
 8013536:	f1ba 0f00 	cmp.w	sl, #0
 801353a:	4607      	mov	r7, r0
 801353c:	f300 808d 	bgt.w	801365a <_dtoa_r+0x8a2>
 8013540:	9b06      	ldr	r3, [sp, #24]
 8013542:	2b02      	cmp	r3, #2
 8013544:	dc50      	bgt.n	80135e8 <_dtoa_r+0x830>
 8013546:	e088      	b.n	801365a <_dtoa_r+0x8a2>
 8013548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801354a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801354e:	e751      	b.n	80133f4 <_dtoa_r+0x63c>
 8013550:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8013554:	42a3      	cmp	r3, r4
 8013556:	bfbf      	itttt	lt
 8013558:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801355a:	1ae3      	sublt	r3, r4, r3
 801355c:	18d2      	addlt	r2, r2, r3
 801355e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013560:	bfb6      	itet	lt
 8013562:	4623      	movlt	r3, r4
 8013564:	1b1c      	subge	r4, r3, r4
 8013566:	2400      	movlt	r4, #0
 8013568:	f1b9 0f00 	cmp.w	r9, #0
 801356c:	bfb5      	itete	lt
 801356e:	9a04      	ldrlt	r2, [sp, #16]
 8013570:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013574:	eba2 0809 	sublt.w	r8, r2, r9
 8013578:	464a      	movge	r2, r9
 801357a:	bfb8      	it	lt
 801357c:	2200      	movlt	r2, #0
 801357e:	e73c      	b.n	80133fa <_dtoa_r+0x642>
 8013580:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013584:	9f07      	ldr	r7, [sp, #28]
 8013586:	461c      	mov	r4, r3
 8013588:	e744      	b.n	8013414 <_dtoa_r+0x65c>
 801358a:	461a      	mov	r2, r3
 801358c:	e770      	b.n	8013470 <_dtoa_r+0x6b8>
 801358e:	9b06      	ldr	r3, [sp, #24]
 8013590:	2b01      	cmp	r3, #1
 8013592:	dc18      	bgt.n	80135c6 <_dtoa_r+0x80e>
 8013594:	9b02      	ldr	r3, [sp, #8]
 8013596:	b9b3      	cbnz	r3, 80135c6 <_dtoa_r+0x80e>
 8013598:	9b03      	ldr	r3, [sp, #12]
 801359a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801359e:	b9a2      	cbnz	r2, 80135ca <_dtoa_r+0x812>
 80135a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80135a4:	0d12      	lsrs	r2, r2, #20
 80135a6:	0512      	lsls	r2, r2, #20
 80135a8:	b18a      	cbz	r2, 80135ce <_dtoa_r+0x816>
 80135aa:	9b04      	ldr	r3, [sp, #16]
 80135ac:	3301      	adds	r3, #1
 80135ae:	9304      	str	r3, [sp, #16]
 80135b0:	9b05      	ldr	r3, [sp, #20]
 80135b2:	3301      	adds	r3, #1
 80135b4:	9305      	str	r3, [sp, #20]
 80135b6:	2301      	movs	r3, #1
 80135b8:	930a      	str	r3, [sp, #40]	; 0x28
 80135ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f47f af70 	bne.w	80134a2 <_dtoa_r+0x6ea>
 80135c2:	2001      	movs	r0, #1
 80135c4:	e775      	b.n	80134b2 <_dtoa_r+0x6fa>
 80135c6:	2300      	movs	r3, #0
 80135c8:	e7f6      	b.n	80135b8 <_dtoa_r+0x800>
 80135ca:	9b02      	ldr	r3, [sp, #8]
 80135cc:	e7f4      	b.n	80135b8 <_dtoa_r+0x800>
 80135ce:	920a      	str	r2, [sp, #40]	; 0x28
 80135d0:	e7f3      	b.n	80135ba <_dtoa_r+0x802>
 80135d2:	d082      	beq.n	80134da <_dtoa_r+0x722>
 80135d4:	4610      	mov	r0, r2
 80135d6:	301c      	adds	r0, #28
 80135d8:	e778      	b.n	80134cc <_dtoa_r+0x714>
 80135da:	f1b9 0f00 	cmp.w	r9, #0
 80135de:	dc37      	bgt.n	8013650 <_dtoa_r+0x898>
 80135e0:	9b06      	ldr	r3, [sp, #24]
 80135e2:	2b02      	cmp	r3, #2
 80135e4:	dd34      	ble.n	8013650 <_dtoa_r+0x898>
 80135e6:	46ca      	mov	sl, r9
 80135e8:	f1ba 0f00 	cmp.w	sl, #0
 80135ec:	d10d      	bne.n	801360a <_dtoa_r+0x852>
 80135ee:	4621      	mov	r1, r4
 80135f0:	4653      	mov	r3, sl
 80135f2:	2205      	movs	r2, #5
 80135f4:	4630      	mov	r0, r6
 80135f6:	f000 f9c9 	bl	801398c <__multadd>
 80135fa:	4601      	mov	r1, r0
 80135fc:	4604      	mov	r4, r0
 80135fe:	4628      	mov	r0, r5
 8013600:	f000 fbe4 	bl	8013dcc <__mcmp>
 8013604:	2800      	cmp	r0, #0
 8013606:	f73f adeb 	bgt.w	80131e0 <_dtoa_r+0x428>
 801360a:	9b08      	ldr	r3, [sp, #32]
 801360c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013610:	ea6f 0b03 	mvn.w	fp, r3
 8013614:	f04f 0900 	mov.w	r9, #0
 8013618:	4621      	mov	r1, r4
 801361a:	4630      	mov	r0, r6
 801361c:	f000 f994 	bl	8013948 <_Bfree>
 8013620:	2f00      	cmp	r7, #0
 8013622:	f43f aea8 	beq.w	8013376 <_dtoa_r+0x5be>
 8013626:	f1b9 0f00 	cmp.w	r9, #0
 801362a:	d005      	beq.n	8013638 <_dtoa_r+0x880>
 801362c:	45b9      	cmp	r9, r7
 801362e:	d003      	beq.n	8013638 <_dtoa_r+0x880>
 8013630:	4649      	mov	r1, r9
 8013632:	4630      	mov	r0, r6
 8013634:	f000 f988 	bl	8013948 <_Bfree>
 8013638:	4639      	mov	r1, r7
 801363a:	4630      	mov	r0, r6
 801363c:	f000 f984 	bl	8013948 <_Bfree>
 8013640:	e699      	b.n	8013376 <_dtoa_r+0x5be>
 8013642:	2400      	movs	r4, #0
 8013644:	4627      	mov	r7, r4
 8013646:	e7e0      	b.n	801360a <_dtoa_r+0x852>
 8013648:	46bb      	mov	fp, r7
 801364a:	4604      	mov	r4, r0
 801364c:	4607      	mov	r7, r0
 801364e:	e5c7      	b.n	80131e0 <_dtoa_r+0x428>
 8013650:	9b07      	ldr	r3, [sp, #28]
 8013652:	46ca      	mov	sl, r9
 8013654:	2b00      	cmp	r3, #0
 8013656:	f000 8100 	beq.w	801385a <_dtoa_r+0xaa2>
 801365a:	f1b8 0f00 	cmp.w	r8, #0
 801365e:	dd05      	ble.n	801366c <_dtoa_r+0x8b4>
 8013660:	4639      	mov	r1, r7
 8013662:	4642      	mov	r2, r8
 8013664:	4630      	mov	r0, r6
 8013666:	f000 fb41 	bl	8013cec <__lshift>
 801366a:	4607      	mov	r7, r0
 801366c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801366e:	2b00      	cmp	r3, #0
 8013670:	d05d      	beq.n	801372e <_dtoa_r+0x976>
 8013672:	6879      	ldr	r1, [r7, #4]
 8013674:	4630      	mov	r0, r6
 8013676:	f000 f927 	bl	80138c8 <_Balloc>
 801367a:	4680      	mov	r8, r0
 801367c:	b928      	cbnz	r0, 801368a <_dtoa_r+0x8d2>
 801367e:	4b82      	ldr	r3, [pc, #520]	; (8013888 <_dtoa_r+0xad0>)
 8013680:	4602      	mov	r2, r0
 8013682:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013686:	f7ff bbaf 	b.w	8012de8 <_dtoa_r+0x30>
 801368a:	693a      	ldr	r2, [r7, #16]
 801368c:	3202      	adds	r2, #2
 801368e:	0092      	lsls	r2, r2, #2
 8013690:	f107 010c 	add.w	r1, r7, #12
 8013694:	300c      	adds	r0, #12
 8013696:	f000 f909 	bl	80138ac <memcpy>
 801369a:	2201      	movs	r2, #1
 801369c:	4641      	mov	r1, r8
 801369e:	4630      	mov	r0, r6
 80136a0:	f000 fb24 	bl	8013cec <__lshift>
 80136a4:	9b01      	ldr	r3, [sp, #4]
 80136a6:	3301      	adds	r3, #1
 80136a8:	9304      	str	r3, [sp, #16]
 80136aa:	9b01      	ldr	r3, [sp, #4]
 80136ac:	4453      	add	r3, sl
 80136ae:	9308      	str	r3, [sp, #32]
 80136b0:	9b02      	ldr	r3, [sp, #8]
 80136b2:	f003 0301 	and.w	r3, r3, #1
 80136b6:	46b9      	mov	r9, r7
 80136b8:	9307      	str	r3, [sp, #28]
 80136ba:	4607      	mov	r7, r0
 80136bc:	9b04      	ldr	r3, [sp, #16]
 80136be:	4621      	mov	r1, r4
 80136c0:	3b01      	subs	r3, #1
 80136c2:	4628      	mov	r0, r5
 80136c4:	9302      	str	r3, [sp, #8]
 80136c6:	f7ff fae9 	bl	8012c9c <quorem>
 80136ca:	4603      	mov	r3, r0
 80136cc:	3330      	adds	r3, #48	; 0x30
 80136ce:	9005      	str	r0, [sp, #20]
 80136d0:	4649      	mov	r1, r9
 80136d2:	4628      	mov	r0, r5
 80136d4:	9309      	str	r3, [sp, #36]	; 0x24
 80136d6:	f000 fb79 	bl	8013dcc <__mcmp>
 80136da:	463a      	mov	r2, r7
 80136dc:	4682      	mov	sl, r0
 80136de:	4621      	mov	r1, r4
 80136e0:	4630      	mov	r0, r6
 80136e2:	f000 fb8f 	bl	8013e04 <__mdiff>
 80136e6:	68c2      	ldr	r2, [r0, #12]
 80136e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ea:	4680      	mov	r8, r0
 80136ec:	bb0a      	cbnz	r2, 8013732 <_dtoa_r+0x97a>
 80136ee:	4601      	mov	r1, r0
 80136f0:	4628      	mov	r0, r5
 80136f2:	f000 fb6b 	bl	8013dcc <__mcmp>
 80136f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136f8:	4602      	mov	r2, r0
 80136fa:	4641      	mov	r1, r8
 80136fc:	4630      	mov	r0, r6
 80136fe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013702:	f000 f921 	bl	8013948 <_Bfree>
 8013706:	9b06      	ldr	r3, [sp, #24]
 8013708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801370a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801370e:	ea43 0102 	orr.w	r1, r3, r2
 8013712:	9b07      	ldr	r3, [sp, #28]
 8013714:	430b      	orrs	r3, r1
 8013716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013718:	d10d      	bne.n	8013736 <_dtoa_r+0x97e>
 801371a:	2b39      	cmp	r3, #57	; 0x39
 801371c:	d029      	beq.n	8013772 <_dtoa_r+0x9ba>
 801371e:	f1ba 0f00 	cmp.w	sl, #0
 8013722:	dd01      	ble.n	8013728 <_dtoa_r+0x970>
 8013724:	9b05      	ldr	r3, [sp, #20]
 8013726:	3331      	adds	r3, #49	; 0x31
 8013728:	9a02      	ldr	r2, [sp, #8]
 801372a:	7013      	strb	r3, [r2, #0]
 801372c:	e774      	b.n	8013618 <_dtoa_r+0x860>
 801372e:	4638      	mov	r0, r7
 8013730:	e7b8      	b.n	80136a4 <_dtoa_r+0x8ec>
 8013732:	2201      	movs	r2, #1
 8013734:	e7e1      	b.n	80136fa <_dtoa_r+0x942>
 8013736:	f1ba 0f00 	cmp.w	sl, #0
 801373a:	db06      	blt.n	801374a <_dtoa_r+0x992>
 801373c:	9906      	ldr	r1, [sp, #24]
 801373e:	ea41 0a0a 	orr.w	sl, r1, sl
 8013742:	9907      	ldr	r1, [sp, #28]
 8013744:	ea5a 0101 	orrs.w	r1, sl, r1
 8013748:	d120      	bne.n	801378c <_dtoa_r+0x9d4>
 801374a:	2a00      	cmp	r2, #0
 801374c:	ddec      	ble.n	8013728 <_dtoa_r+0x970>
 801374e:	4629      	mov	r1, r5
 8013750:	2201      	movs	r2, #1
 8013752:	4630      	mov	r0, r6
 8013754:	9304      	str	r3, [sp, #16]
 8013756:	f000 fac9 	bl	8013cec <__lshift>
 801375a:	4621      	mov	r1, r4
 801375c:	4605      	mov	r5, r0
 801375e:	f000 fb35 	bl	8013dcc <__mcmp>
 8013762:	2800      	cmp	r0, #0
 8013764:	9b04      	ldr	r3, [sp, #16]
 8013766:	dc02      	bgt.n	801376e <_dtoa_r+0x9b6>
 8013768:	d1de      	bne.n	8013728 <_dtoa_r+0x970>
 801376a:	07da      	lsls	r2, r3, #31
 801376c:	d5dc      	bpl.n	8013728 <_dtoa_r+0x970>
 801376e:	2b39      	cmp	r3, #57	; 0x39
 8013770:	d1d8      	bne.n	8013724 <_dtoa_r+0x96c>
 8013772:	9a02      	ldr	r2, [sp, #8]
 8013774:	2339      	movs	r3, #57	; 0x39
 8013776:	7013      	strb	r3, [r2, #0]
 8013778:	4643      	mov	r3, r8
 801377a:	4698      	mov	r8, r3
 801377c:	3b01      	subs	r3, #1
 801377e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013782:	2a39      	cmp	r2, #57	; 0x39
 8013784:	d051      	beq.n	801382a <_dtoa_r+0xa72>
 8013786:	3201      	adds	r2, #1
 8013788:	701a      	strb	r2, [r3, #0]
 801378a:	e745      	b.n	8013618 <_dtoa_r+0x860>
 801378c:	2a00      	cmp	r2, #0
 801378e:	dd03      	ble.n	8013798 <_dtoa_r+0x9e0>
 8013790:	2b39      	cmp	r3, #57	; 0x39
 8013792:	d0ee      	beq.n	8013772 <_dtoa_r+0x9ba>
 8013794:	3301      	adds	r3, #1
 8013796:	e7c7      	b.n	8013728 <_dtoa_r+0x970>
 8013798:	9a04      	ldr	r2, [sp, #16]
 801379a:	9908      	ldr	r1, [sp, #32]
 801379c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80137a0:	428a      	cmp	r2, r1
 80137a2:	d02b      	beq.n	80137fc <_dtoa_r+0xa44>
 80137a4:	4629      	mov	r1, r5
 80137a6:	2300      	movs	r3, #0
 80137a8:	220a      	movs	r2, #10
 80137aa:	4630      	mov	r0, r6
 80137ac:	f000 f8ee 	bl	801398c <__multadd>
 80137b0:	45b9      	cmp	r9, r7
 80137b2:	4605      	mov	r5, r0
 80137b4:	f04f 0300 	mov.w	r3, #0
 80137b8:	f04f 020a 	mov.w	r2, #10
 80137bc:	4649      	mov	r1, r9
 80137be:	4630      	mov	r0, r6
 80137c0:	d107      	bne.n	80137d2 <_dtoa_r+0xa1a>
 80137c2:	f000 f8e3 	bl	801398c <__multadd>
 80137c6:	4681      	mov	r9, r0
 80137c8:	4607      	mov	r7, r0
 80137ca:	9b04      	ldr	r3, [sp, #16]
 80137cc:	3301      	adds	r3, #1
 80137ce:	9304      	str	r3, [sp, #16]
 80137d0:	e774      	b.n	80136bc <_dtoa_r+0x904>
 80137d2:	f000 f8db 	bl	801398c <__multadd>
 80137d6:	4639      	mov	r1, r7
 80137d8:	4681      	mov	r9, r0
 80137da:	2300      	movs	r3, #0
 80137dc:	220a      	movs	r2, #10
 80137de:	4630      	mov	r0, r6
 80137e0:	f000 f8d4 	bl	801398c <__multadd>
 80137e4:	4607      	mov	r7, r0
 80137e6:	e7f0      	b.n	80137ca <_dtoa_r+0xa12>
 80137e8:	f1ba 0f00 	cmp.w	sl, #0
 80137ec:	9a01      	ldr	r2, [sp, #4]
 80137ee:	bfcc      	ite	gt
 80137f0:	46d0      	movgt	r8, sl
 80137f2:	f04f 0801 	movle.w	r8, #1
 80137f6:	4490      	add	r8, r2
 80137f8:	f04f 0900 	mov.w	r9, #0
 80137fc:	4629      	mov	r1, r5
 80137fe:	2201      	movs	r2, #1
 8013800:	4630      	mov	r0, r6
 8013802:	9302      	str	r3, [sp, #8]
 8013804:	f000 fa72 	bl	8013cec <__lshift>
 8013808:	4621      	mov	r1, r4
 801380a:	4605      	mov	r5, r0
 801380c:	f000 fade 	bl	8013dcc <__mcmp>
 8013810:	2800      	cmp	r0, #0
 8013812:	dcb1      	bgt.n	8013778 <_dtoa_r+0x9c0>
 8013814:	d102      	bne.n	801381c <_dtoa_r+0xa64>
 8013816:	9b02      	ldr	r3, [sp, #8]
 8013818:	07db      	lsls	r3, r3, #31
 801381a:	d4ad      	bmi.n	8013778 <_dtoa_r+0x9c0>
 801381c:	4643      	mov	r3, r8
 801381e:	4698      	mov	r8, r3
 8013820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013824:	2a30      	cmp	r2, #48	; 0x30
 8013826:	d0fa      	beq.n	801381e <_dtoa_r+0xa66>
 8013828:	e6f6      	b.n	8013618 <_dtoa_r+0x860>
 801382a:	9a01      	ldr	r2, [sp, #4]
 801382c:	429a      	cmp	r2, r3
 801382e:	d1a4      	bne.n	801377a <_dtoa_r+0x9c2>
 8013830:	f10b 0b01 	add.w	fp, fp, #1
 8013834:	2331      	movs	r3, #49	; 0x31
 8013836:	e778      	b.n	801372a <_dtoa_r+0x972>
 8013838:	4b14      	ldr	r3, [pc, #80]	; (801388c <_dtoa_r+0xad4>)
 801383a:	f7ff bb27 	b.w	8012e8c <_dtoa_r+0xd4>
 801383e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013840:	2b00      	cmp	r3, #0
 8013842:	f47f ab03 	bne.w	8012e4c <_dtoa_r+0x94>
 8013846:	4b12      	ldr	r3, [pc, #72]	; (8013890 <_dtoa_r+0xad8>)
 8013848:	f7ff bb20 	b.w	8012e8c <_dtoa_r+0xd4>
 801384c:	f1ba 0f00 	cmp.w	sl, #0
 8013850:	dc03      	bgt.n	801385a <_dtoa_r+0xaa2>
 8013852:	9b06      	ldr	r3, [sp, #24]
 8013854:	2b02      	cmp	r3, #2
 8013856:	f73f aec7 	bgt.w	80135e8 <_dtoa_r+0x830>
 801385a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801385e:	4621      	mov	r1, r4
 8013860:	4628      	mov	r0, r5
 8013862:	f7ff fa1b 	bl	8012c9c <quorem>
 8013866:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801386a:	f808 3b01 	strb.w	r3, [r8], #1
 801386e:	9a01      	ldr	r2, [sp, #4]
 8013870:	eba8 0202 	sub.w	r2, r8, r2
 8013874:	4592      	cmp	sl, r2
 8013876:	ddb7      	ble.n	80137e8 <_dtoa_r+0xa30>
 8013878:	4629      	mov	r1, r5
 801387a:	2300      	movs	r3, #0
 801387c:	220a      	movs	r2, #10
 801387e:	4630      	mov	r0, r6
 8013880:	f000 f884 	bl	801398c <__multadd>
 8013884:	4605      	mov	r5, r0
 8013886:	e7ea      	b.n	801385e <_dtoa_r+0xaa6>
 8013888:	080168f7 	.word	0x080168f7
 801388c:	08016854 	.word	0x08016854
 8013890:	08016878 	.word	0x08016878

08013894 <_localeconv_r>:
 8013894:	4800      	ldr	r0, [pc, #0]	; (8013898 <_localeconv_r+0x4>)
 8013896:	4770      	bx	lr
 8013898:	24000398 	.word	0x24000398

0801389c <malloc>:
 801389c:	4b02      	ldr	r3, [pc, #8]	; (80138a8 <malloc+0xc>)
 801389e:	4601      	mov	r1, r0
 80138a0:	6818      	ldr	r0, [r3, #0]
 80138a2:	f000 bc17 	b.w	80140d4 <_malloc_r>
 80138a6:	bf00      	nop
 80138a8:	24000244 	.word	0x24000244

080138ac <memcpy>:
 80138ac:	440a      	add	r2, r1
 80138ae:	4291      	cmp	r1, r2
 80138b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80138b4:	d100      	bne.n	80138b8 <memcpy+0xc>
 80138b6:	4770      	bx	lr
 80138b8:	b510      	push	{r4, lr}
 80138ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138c2:	4291      	cmp	r1, r2
 80138c4:	d1f9      	bne.n	80138ba <memcpy+0xe>
 80138c6:	bd10      	pop	{r4, pc}

080138c8 <_Balloc>:
 80138c8:	b570      	push	{r4, r5, r6, lr}
 80138ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138cc:	4604      	mov	r4, r0
 80138ce:	460d      	mov	r5, r1
 80138d0:	b976      	cbnz	r6, 80138f0 <_Balloc+0x28>
 80138d2:	2010      	movs	r0, #16
 80138d4:	f7ff ffe2 	bl	801389c <malloc>
 80138d8:	4602      	mov	r2, r0
 80138da:	6260      	str	r0, [r4, #36]	; 0x24
 80138dc:	b920      	cbnz	r0, 80138e8 <_Balloc+0x20>
 80138de:	4b18      	ldr	r3, [pc, #96]	; (8013940 <_Balloc+0x78>)
 80138e0:	4818      	ldr	r0, [pc, #96]	; (8013944 <_Balloc+0x7c>)
 80138e2:	2166      	movs	r1, #102	; 0x66
 80138e4:	f000 fc7a 	bl	80141dc <__assert_func>
 80138e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138ec:	6006      	str	r6, [r0, #0]
 80138ee:	60c6      	str	r6, [r0, #12]
 80138f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138f2:	68f3      	ldr	r3, [r6, #12]
 80138f4:	b183      	cbz	r3, 8013918 <_Balloc+0x50>
 80138f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80138fe:	b9b8      	cbnz	r0, 8013930 <_Balloc+0x68>
 8013900:	2101      	movs	r1, #1
 8013902:	fa01 f605 	lsl.w	r6, r1, r5
 8013906:	1d72      	adds	r2, r6, #5
 8013908:	0092      	lsls	r2, r2, #2
 801390a:	4620      	mov	r0, r4
 801390c:	f000 fb60 	bl	8013fd0 <_calloc_r>
 8013910:	b160      	cbz	r0, 801392c <_Balloc+0x64>
 8013912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013916:	e00e      	b.n	8013936 <_Balloc+0x6e>
 8013918:	2221      	movs	r2, #33	; 0x21
 801391a:	2104      	movs	r1, #4
 801391c:	4620      	mov	r0, r4
 801391e:	f000 fb57 	bl	8013fd0 <_calloc_r>
 8013922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013924:	60f0      	str	r0, [r6, #12]
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d1e4      	bne.n	80138f6 <_Balloc+0x2e>
 801392c:	2000      	movs	r0, #0
 801392e:	bd70      	pop	{r4, r5, r6, pc}
 8013930:	6802      	ldr	r2, [r0, #0]
 8013932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013936:	2300      	movs	r3, #0
 8013938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801393c:	e7f7      	b.n	801392e <_Balloc+0x66>
 801393e:	bf00      	nop
 8013940:	08016885 	.word	0x08016885
 8013944:	08016908 	.word	0x08016908

08013948 <_Bfree>:
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801394c:	4605      	mov	r5, r0
 801394e:	460c      	mov	r4, r1
 8013950:	b976      	cbnz	r6, 8013970 <_Bfree+0x28>
 8013952:	2010      	movs	r0, #16
 8013954:	f7ff ffa2 	bl	801389c <malloc>
 8013958:	4602      	mov	r2, r0
 801395a:	6268      	str	r0, [r5, #36]	; 0x24
 801395c:	b920      	cbnz	r0, 8013968 <_Bfree+0x20>
 801395e:	4b09      	ldr	r3, [pc, #36]	; (8013984 <_Bfree+0x3c>)
 8013960:	4809      	ldr	r0, [pc, #36]	; (8013988 <_Bfree+0x40>)
 8013962:	218a      	movs	r1, #138	; 0x8a
 8013964:	f000 fc3a 	bl	80141dc <__assert_func>
 8013968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801396c:	6006      	str	r6, [r0, #0]
 801396e:	60c6      	str	r6, [r0, #12]
 8013970:	b13c      	cbz	r4, 8013982 <_Bfree+0x3a>
 8013972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013974:	6862      	ldr	r2, [r4, #4]
 8013976:	68db      	ldr	r3, [r3, #12]
 8013978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801397c:	6021      	str	r1, [r4, #0]
 801397e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013982:	bd70      	pop	{r4, r5, r6, pc}
 8013984:	08016885 	.word	0x08016885
 8013988:	08016908 	.word	0x08016908

0801398c <__multadd>:
 801398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013990:	690d      	ldr	r5, [r1, #16]
 8013992:	4607      	mov	r7, r0
 8013994:	460c      	mov	r4, r1
 8013996:	461e      	mov	r6, r3
 8013998:	f101 0c14 	add.w	ip, r1, #20
 801399c:	2000      	movs	r0, #0
 801399e:	f8dc 3000 	ldr.w	r3, [ip]
 80139a2:	b299      	uxth	r1, r3
 80139a4:	fb02 6101 	mla	r1, r2, r1, r6
 80139a8:	0c1e      	lsrs	r6, r3, #16
 80139aa:	0c0b      	lsrs	r3, r1, #16
 80139ac:	fb02 3306 	mla	r3, r2, r6, r3
 80139b0:	b289      	uxth	r1, r1
 80139b2:	3001      	adds	r0, #1
 80139b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139b8:	4285      	cmp	r5, r0
 80139ba:	f84c 1b04 	str.w	r1, [ip], #4
 80139be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139c2:	dcec      	bgt.n	801399e <__multadd+0x12>
 80139c4:	b30e      	cbz	r6, 8013a0a <__multadd+0x7e>
 80139c6:	68a3      	ldr	r3, [r4, #8]
 80139c8:	42ab      	cmp	r3, r5
 80139ca:	dc19      	bgt.n	8013a00 <__multadd+0x74>
 80139cc:	6861      	ldr	r1, [r4, #4]
 80139ce:	4638      	mov	r0, r7
 80139d0:	3101      	adds	r1, #1
 80139d2:	f7ff ff79 	bl	80138c8 <_Balloc>
 80139d6:	4680      	mov	r8, r0
 80139d8:	b928      	cbnz	r0, 80139e6 <__multadd+0x5a>
 80139da:	4602      	mov	r2, r0
 80139dc:	4b0c      	ldr	r3, [pc, #48]	; (8013a10 <__multadd+0x84>)
 80139de:	480d      	ldr	r0, [pc, #52]	; (8013a14 <__multadd+0x88>)
 80139e0:	21b5      	movs	r1, #181	; 0xb5
 80139e2:	f000 fbfb 	bl	80141dc <__assert_func>
 80139e6:	6922      	ldr	r2, [r4, #16]
 80139e8:	3202      	adds	r2, #2
 80139ea:	f104 010c 	add.w	r1, r4, #12
 80139ee:	0092      	lsls	r2, r2, #2
 80139f0:	300c      	adds	r0, #12
 80139f2:	f7ff ff5b 	bl	80138ac <memcpy>
 80139f6:	4621      	mov	r1, r4
 80139f8:	4638      	mov	r0, r7
 80139fa:	f7ff ffa5 	bl	8013948 <_Bfree>
 80139fe:	4644      	mov	r4, r8
 8013a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a04:	3501      	adds	r5, #1
 8013a06:	615e      	str	r6, [r3, #20]
 8013a08:	6125      	str	r5, [r4, #16]
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a10:	080168f7 	.word	0x080168f7
 8013a14:	08016908 	.word	0x08016908

08013a18 <__hi0bits>:
 8013a18:	0c03      	lsrs	r3, r0, #16
 8013a1a:	041b      	lsls	r3, r3, #16
 8013a1c:	b9d3      	cbnz	r3, 8013a54 <__hi0bits+0x3c>
 8013a1e:	0400      	lsls	r0, r0, #16
 8013a20:	2310      	movs	r3, #16
 8013a22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a26:	bf04      	itt	eq
 8013a28:	0200      	lsleq	r0, r0, #8
 8013a2a:	3308      	addeq	r3, #8
 8013a2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a30:	bf04      	itt	eq
 8013a32:	0100      	lsleq	r0, r0, #4
 8013a34:	3304      	addeq	r3, #4
 8013a36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a3a:	bf04      	itt	eq
 8013a3c:	0080      	lsleq	r0, r0, #2
 8013a3e:	3302      	addeq	r3, #2
 8013a40:	2800      	cmp	r0, #0
 8013a42:	db05      	blt.n	8013a50 <__hi0bits+0x38>
 8013a44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a48:	f103 0301 	add.w	r3, r3, #1
 8013a4c:	bf08      	it	eq
 8013a4e:	2320      	moveq	r3, #32
 8013a50:	4618      	mov	r0, r3
 8013a52:	4770      	bx	lr
 8013a54:	2300      	movs	r3, #0
 8013a56:	e7e4      	b.n	8013a22 <__hi0bits+0xa>

08013a58 <__lo0bits>:
 8013a58:	6803      	ldr	r3, [r0, #0]
 8013a5a:	f013 0207 	ands.w	r2, r3, #7
 8013a5e:	4601      	mov	r1, r0
 8013a60:	d00b      	beq.n	8013a7a <__lo0bits+0x22>
 8013a62:	07da      	lsls	r2, r3, #31
 8013a64:	d423      	bmi.n	8013aae <__lo0bits+0x56>
 8013a66:	0798      	lsls	r0, r3, #30
 8013a68:	bf49      	itett	mi
 8013a6a:	085b      	lsrmi	r3, r3, #1
 8013a6c:	089b      	lsrpl	r3, r3, #2
 8013a6e:	2001      	movmi	r0, #1
 8013a70:	600b      	strmi	r3, [r1, #0]
 8013a72:	bf5c      	itt	pl
 8013a74:	600b      	strpl	r3, [r1, #0]
 8013a76:	2002      	movpl	r0, #2
 8013a78:	4770      	bx	lr
 8013a7a:	b298      	uxth	r0, r3
 8013a7c:	b9a8      	cbnz	r0, 8013aaa <__lo0bits+0x52>
 8013a7e:	0c1b      	lsrs	r3, r3, #16
 8013a80:	2010      	movs	r0, #16
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	b90a      	cbnz	r2, 8013a8a <__lo0bits+0x32>
 8013a86:	3008      	adds	r0, #8
 8013a88:	0a1b      	lsrs	r3, r3, #8
 8013a8a:	071a      	lsls	r2, r3, #28
 8013a8c:	bf04      	itt	eq
 8013a8e:	091b      	lsreq	r3, r3, #4
 8013a90:	3004      	addeq	r0, #4
 8013a92:	079a      	lsls	r2, r3, #30
 8013a94:	bf04      	itt	eq
 8013a96:	089b      	lsreq	r3, r3, #2
 8013a98:	3002      	addeq	r0, #2
 8013a9a:	07da      	lsls	r2, r3, #31
 8013a9c:	d403      	bmi.n	8013aa6 <__lo0bits+0x4e>
 8013a9e:	085b      	lsrs	r3, r3, #1
 8013aa0:	f100 0001 	add.w	r0, r0, #1
 8013aa4:	d005      	beq.n	8013ab2 <__lo0bits+0x5a>
 8013aa6:	600b      	str	r3, [r1, #0]
 8013aa8:	4770      	bx	lr
 8013aaa:	4610      	mov	r0, r2
 8013aac:	e7e9      	b.n	8013a82 <__lo0bits+0x2a>
 8013aae:	2000      	movs	r0, #0
 8013ab0:	4770      	bx	lr
 8013ab2:	2020      	movs	r0, #32
 8013ab4:	4770      	bx	lr
	...

08013ab8 <__i2b>:
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	460c      	mov	r4, r1
 8013abc:	2101      	movs	r1, #1
 8013abe:	f7ff ff03 	bl	80138c8 <_Balloc>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	b928      	cbnz	r0, 8013ad2 <__i2b+0x1a>
 8013ac6:	4b05      	ldr	r3, [pc, #20]	; (8013adc <__i2b+0x24>)
 8013ac8:	4805      	ldr	r0, [pc, #20]	; (8013ae0 <__i2b+0x28>)
 8013aca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ace:	f000 fb85 	bl	80141dc <__assert_func>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	6144      	str	r4, [r0, #20]
 8013ad6:	6103      	str	r3, [r0, #16]
 8013ad8:	bd10      	pop	{r4, pc}
 8013ada:	bf00      	nop
 8013adc:	080168f7 	.word	0x080168f7
 8013ae0:	08016908 	.word	0x08016908

08013ae4 <__multiply>:
 8013ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae8:	4691      	mov	r9, r2
 8013aea:	690a      	ldr	r2, [r1, #16]
 8013aec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	bfb8      	it	lt
 8013af4:	460b      	movlt	r3, r1
 8013af6:	460c      	mov	r4, r1
 8013af8:	bfbc      	itt	lt
 8013afa:	464c      	movlt	r4, r9
 8013afc:	4699      	movlt	r9, r3
 8013afe:	6927      	ldr	r7, [r4, #16]
 8013b00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013b04:	68a3      	ldr	r3, [r4, #8]
 8013b06:	6861      	ldr	r1, [r4, #4]
 8013b08:	eb07 060a 	add.w	r6, r7, sl
 8013b0c:	42b3      	cmp	r3, r6
 8013b0e:	b085      	sub	sp, #20
 8013b10:	bfb8      	it	lt
 8013b12:	3101      	addlt	r1, #1
 8013b14:	f7ff fed8 	bl	80138c8 <_Balloc>
 8013b18:	b930      	cbnz	r0, 8013b28 <__multiply+0x44>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	4b44      	ldr	r3, [pc, #272]	; (8013c30 <__multiply+0x14c>)
 8013b1e:	4845      	ldr	r0, [pc, #276]	; (8013c34 <__multiply+0x150>)
 8013b20:	f240 115d 	movw	r1, #349	; 0x15d
 8013b24:	f000 fb5a 	bl	80141dc <__assert_func>
 8013b28:	f100 0514 	add.w	r5, r0, #20
 8013b2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b30:	462b      	mov	r3, r5
 8013b32:	2200      	movs	r2, #0
 8013b34:	4543      	cmp	r3, r8
 8013b36:	d321      	bcc.n	8013b7c <__multiply+0x98>
 8013b38:	f104 0314 	add.w	r3, r4, #20
 8013b3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013b40:	f109 0314 	add.w	r3, r9, #20
 8013b44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013b48:	9202      	str	r2, [sp, #8]
 8013b4a:	1b3a      	subs	r2, r7, r4
 8013b4c:	3a15      	subs	r2, #21
 8013b4e:	f022 0203 	bic.w	r2, r2, #3
 8013b52:	3204      	adds	r2, #4
 8013b54:	f104 0115 	add.w	r1, r4, #21
 8013b58:	428f      	cmp	r7, r1
 8013b5a:	bf38      	it	cc
 8013b5c:	2204      	movcc	r2, #4
 8013b5e:	9201      	str	r2, [sp, #4]
 8013b60:	9a02      	ldr	r2, [sp, #8]
 8013b62:	9303      	str	r3, [sp, #12]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d80c      	bhi.n	8013b82 <__multiply+0x9e>
 8013b68:	2e00      	cmp	r6, #0
 8013b6a:	dd03      	ble.n	8013b74 <__multiply+0x90>
 8013b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d05a      	beq.n	8013c2a <__multiply+0x146>
 8013b74:	6106      	str	r6, [r0, #16]
 8013b76:	b005      	add	sp, #20
 8013b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b7c:	f843 2b04 	str.w	r2, [r3], #4
 8013b80:	e7d8      	b.n	8013b34 <__multiply+0x50>
 8013b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b86:	f1ba 0f00 	cmp.w	sl, #0
 8013b8a:	d024      	beq.n	8013bd6 <__multiply+0xf2>
 8013b8c:	f104 0e14 	add.w	lr, r4, #20
 8013b90:	46a9      	mov	r9, r5
 8013b92:	f04f 0c00 	mov.w	ip, #0
 8013b96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b9a:	f8d9 1000 	ldr.w	r1, [r9]
 8013b9e:	fa1f fb82 	uxth.w	fp, r2
 8013ba2:	b289      	uxth	r1, r1
 8013ba4:	fb0a 110b 	mla	r1, sl, fp, r1
 8013ba8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013bac:	f8d9 2000 	ldr.w	r2, [r9]
 8013bb0:	4461      	add	r1, ip
 8013bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8013bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013bbe:	b289      	uxth	r1, r1
 8013bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013bc4:	4577      	cmp	r7, lr
 8013bc6:	f849 1b04 	str.w	r1, [r9], #4
 8013bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013bce:	d8e2      	bhi.n	8013b96 <__multiply+0xb2>
 8013bd0:	9a01      	ldr	r2, [sp, #4]
 8013bd2:	f845 c002 	str.w	ip, [r5, r2]
 8013bd6:	9a03      	ldr	r2, [sp, #12]
 8013bd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bdc:	3304      	adds	r3, #4
 8013bde:	f1b9 0f00 	cmp.w	r9, #0
 8013be2:	d020      	beq.n	8013c26 <__multiply+0x142>
 8013be4:	6829      	ldr	r1, [r5, #0]
 8013be6:	f104 0c14 	add.w	ip, r4, #20
 8013bea:	46ae      	mov	lr, r5
 8013bec:	f04f 0a00 	mov.w	sl, #0
 8013bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8013bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013bf8:	fb09 220b 	mla	r2, r9, fp, r2
 8013bfc:	4492      	add	sl, r2
 8013bfe:	b289      	uxth	r1, r1
 8013c00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013c04:	f84e 1b04 	str.w	r1, [lr], #4
 8013c08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013c0c:	f8be 1000 	ldrh.w	r1, [lr]
 8013c10:	0c12      	lsrs	r2, r2, #16
 8013c12:	fb09 1102 	mla	r1, r9, r2, r1
 8013c16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013c1a:	4567      	cmp	r7, ip
 8013c1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013c20:	d8e6      	bhi.n	8013bf0 <__multiply+0x10c>
 8013c22:	9a01      	ldr	r2, [sp, #4]
 8013c24:	50a9      	str	r1, [r5, r2]
 8013c26:	3504      	adds	r5, #4
 8013c28:	e79a      	b.n	8013b60 <__multiply+0x7c>
 8013c2a:	3e01      	subs	r6, #1
 8013c2c:	e79c      	b.n	8013b68 <__multiply+0x84>
 8013c2e:	bf00      	nop
 8013c30:	080168f7 	.word	0x080168f7
 8013c34:	08016908 	.word	0x08016908

08013c38 <__pow5mult>:
 8013c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c3c:	4615      	mov	r5, r2
 8013c3e:	f012 0203 	ands.w	r2, r2, #3
 8013c42:	4606      	mov	r6, r0
 8013c44:	460f      	mov	r7, r1
 8013c46:	d007      	beq.n	8013c58 <__pow5mult+0x20>
 8013c48:	4c25      	ldr	r4, [pc, #148]	; (8013ce0 <__pow5mult+0xa8>)
 8013c4a:	3a01      	subs	r2, #1
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c52:	f7ff fe9b 	bl	801398c <__multadd>
 8013c56:	4607      	mov	r7, r0
 8013c58:	10ad      	asrs	r5, r5, #2
 8013c5a:	d03d      	beq.n	8013cd8 <__pow5mult+0xa0>
 8013c5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c5e:	b97c      	cbnz	r4, 8013c80 <__pow5mult+0x48>
 8013c60:	2010      	movs	r0, #16
 8013c62:	f7ff fe1b 	bl	801389c <malloc>
 8013c66:	4602      	mov	r2, r0
 8013c68:	6270      	str	r0, [r6, #36]	; 0x24
 8013c6a:	b928      	cbnz	r0, 8013c78 <__pow5mult+0x40>
 8013c6c:	4b1d      	ldr	r3, [pc, #116]	; (8013ce4 <__pow5mult+0xac>)
 8013c6e:	481e      	ldr	r0, [pc, #120]	; (8013ce8 <__pow5mult+0xb0>)
 8013c70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c74:	f000 fab2 	bl	80141dc <__assert_func>
 8013c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c7c:	6004      	str	r4, [r0, #0]
 8013c7e:	60c4      	str	r4, [r0, #12]
 8013c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c88:	b94c      	cbnz	r4, 8013c9e <__pow5mult+0x66>
 8013c8a:	f240 2171 	movw	r1, #625	; 0x271
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f7ff ff12 	bl	8013ab8 <__i2b>
 8013c94:	2300      	movs	r3, #0
 8013c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	6003      	str	r3, [r0, #0]
 8013c9e:	f04f 0900 	mov.w	r9, #0
 8013ca2:	07eb      	lsls	r3, r5, #31
 8013ca4:	d50a      	bpl.n	8013cbc <__pow5mult+0x84>
 8013ca6:	4639      	mov	r1, r7
 8013ca8:	4622      	mov	r2, r4
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7ff ff1a 	bl	8013ae4 <__multiply>
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	4680      	mov	r8, r0
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f7ff fe47 	bl	8013948 <_Bfree>
 8013cba:	4647      	mov	r7, r8
 8013cbc:	106d      	asrs	r5, r5, #1
 8013cbe:	d00b      	beq.n	8013cd8 <__pow5mult+0xa0>
 8013cc0:	6820      	ldr	r0, [r4, #0]
 8013cc2:	b938      	cbnz	r0, 8013cd4 <__pow5mult+0x9c>
 8013cc4:	4622      	mov	r2, r4
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f7ff ff0b 	bl	8013ae4 <__multiply>
 8013cce:	6020      	str	r0, [r4, #0]
 8013cd0:	f8c0 9000 	str.w	r9, [r0]
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	e7e4      	b.n	8013ca2 <__pow5mult+0x6a>
 8013cd8:	4638      	mov	r0, r7
 8013cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cde:	bf00      	nop
 8013ce0:	08016a58 	.word	0x08016a58
 8013ce4:	08016885 	.word	0x08016885
 8013ce8:	08016908 	.word	0x08016908

08013cec <__lshift>:
 8013cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	6849      	ldr	r1, [r1, #4]
 8013cf4:	6923      	ldr	r3, [r4, #16]
 8013cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cfa:	68a3      	ldr	r3, [r4, #8]
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	4691      	mov	r9, r2
 8013d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d04:	f108 0601 	add.w	r6, r8, #1
 8013d08:	42b3      	cmp	r3, r6
 8013d0a:	db0b      	blt.n	8013d24 <__lshift+0x38>
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f7ff fddb 	bl	80138c8 <_Balloc>
 8013d12:	4605      	mov	r5, r0
 8013d14:	b948      	cbnz	r0, 8013d2a <__lshift+0x3e>
 8013d16:	4602      	mov	r2, r0
 8013d18:	4b2a      	ldr	r3, [pc, #168]	; (8013dc4 <__lshift+0xd8>)
 8013d1a:	482b      	ldr	r0, [pc, #172]	; (8013dc8 <__lshift+0xdc>)
 8013d1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d20:	f000 fa5c 	bl	80141dc <__assert_func>
 8013d24:	3101      	adds	r1, #1
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	e7ee      	b.n	8013d08 <__lshift+0x1c>
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	f100 0114 	add.w	r1, r0, #20
 8013d30:	f100 0210 	add.w	r2, r0, #16
 8013d34:	4618      	mov	r0, r3
 8013d36:	4553      	cmp	r3, sl
 8013d38:	db37      	blt.n	8013daa <__lshift+0xbe>
 8013d3a:	6920      	ldr	r0, [r4, #16]
 8013d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d40:	f104 0314 	add.w	r3, r4, #20
 8013d44:	f019 091f 	ands.w	r9, r9, #31
 8013d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013d50:	d02f      	beq.n	8013db2 <__lshift+0xc6>
 8013d52:	f1c9 0e20 	rsb	lr, r9, #32
 8013d56:	468a      	mov	sl, r1
 8013d58:	f04f 0c00 	mov.w	ip, #0
 8013d5c:	681a      	ldr	r2, [r3, #0]
 8013d5e:	fa02 f209 	lsl.w	r2, r2, r9
 8013d62:	ea42 020c 	orr.w	r2, r2, ip
 8013d66:	f84a 2b04 	str.w	r2, [sl], #4
 8013d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d6e:	4298      	cmp	r0, r3
 8013d70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013d74:	d8f2      	bhi.n	8013d5c <__lshift+0x70>
 8013d76:	1b03      	subs	r3, r0, r4
 8013d78:	3b15      	subs	r3, #21
 8013d7a:	f023 0303 	bic.w	r3, r3, #3
 8013d7e:	3304      	adds	r3, #4
 8013d80:	f104 0215 	add.w	r2, r4, #21
 8013d84:	4290      	cmp	r0, r2
 8013d86:	bf38      	it	cc
 8013d88:	2304      	movcc	r3, #4
 8013d8a:	f841 c003 	str.w	ip, [r1, r3]
 8013d8e:	f1bc 0f00 	cmp.w	ip, #0
 8013d92:	d001      	beq.n	8013d98 <__lshift+0xac>
 8013d94:	f108 0602 	add.w	r6, r8, #2
 8013d98:	3e01      	subs	r6, #1
 8013d9a:	4638      	mov	r0, r7
 8013d9c:	612e      	str	r6, [r5, #16]
 8013d9e:	4621      	mov	r1, r4
 8013da0:	f7ff fdd2 	bl	8013948 <_Bfree>
 8013da4:	4628      	mov	r0, r5
 8013da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8013dae:	3301      	adds	r3, #1
 8013db0:	e7c1      	b.n	8013d36 <__lshift+0x4a>
 8013db2:	3904      	subs	r1, #4
 8013db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dbc:	4298      	cmp	r0, r3
 8013dbe:	d8f9      	bhi.n	8013db4 <__lshift+0xc8>
 8013dc0:	e7ea      	b.n	8013d98 <__lshift+0xac>
 8013dc2:	bf00      	nop
 8013dc4:	080168f7 	.word	0x080168f7
 8013dc8:	08016908 	.word	0x08016908

08013dcc <__mcmp>:
 8013dcc:	b530      	push	{r4, r5, lr}
 8013dce:	6902      	ldr	r2, [r0, #16]
 8013dd0:	690c      	ldr	r4, [r1, #16]
 8013dd2:	1b12      	subs	r2, r2, r4
 8013dd4:	d10e      	bne.n	8013df4 <__mcmp+0x28>
 8013dd6:	f100 0314 	add.w	r3, r0, #20
 8013dda:	3114      	adds	r1, #20
 8013ddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013de0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013de4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013de8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013dec:	42a5      	cmp	r5, r4
 8013dee:	d003      	beq.n	8013df8 <__mcmp+0x2c>
 8013df0:	d305      	bcc.n	8013dfe <__mcmp+0x32>
 8013df2:	2201      	movs	r2, #1
 8013df4:	4610      	mov	r0, r2
 8013df6:	bd30      	pop	{r4, r5, pc}
 8013df8:	4283      	cmp	r3, r0
 8013dfa:	d3f3      	bcc.n	8013de4 <__mcmp+0x18>
 8013dfc:	e7fa      	b.n	8013df4 <__mcmp+0x28>
 8013dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e02:	e7f7      	b.n	8013df4 <__mcmp+0x28>

08013e04 <__mdiff>:
 8013e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e08:	460c      	mov	r4, r1
 8013e0a:	4606      	mov	r6, r0
 8013e0c:	4611      	mov	r1, r2
 8013e0e:	4620      	mov	r0, r4
 8013e10:	4690      	mov	r8, r2
 8013e12:	f7ff ffdb 	bl	8013dcc <__mcmp>
 8013e16:	1e05      	subs	r5, r0, #0
 8013e18:	d110      	bne.n	8013e3c <__mdiff+0x38>
 8013e1a:	4629      	mov	r1, r5
 8013e1c:	4630      	mov	r0, r6
 8013e1e:	f7ff fd53 	bl	80138c8 <_Balloc>
 8013e22:	b930      	cbnz	r0, 8013e32 <__mdiff+0x2e>
 8013e24:	4b3a      	ldr	r3, [pc, #232]	; (8013f10 <__mdiff+0x10c>)
 8013e26:	4602      	mov	r2, r0
 8013e28:	f240 2132 	movw	r1, #562	; 0x232
 8013e2c:	4839      	ldr	r0, [pc, #228]	; (8013f14 <__mdiff+0x110>)
 8013e2e:	f000 f9d5 	bl	80141dc <__assert_func>
 8013e32:	2301      	movs	r3, #1
 8013e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e3c:	bfa4      	itt	ge
 8013e3e:	4643      	movge	r3, r8
 8013e40:	46a0      	movge	r8, r4
 8013e42:	4630      	mov	r0, r6
 8013e44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013e48:	bfa6      	itte	ge
 8013e4a:	461c      	movge	r4, r3
 8013e4c:	2500      	movge	r5, #0
 8013e4e:	2501      	movlt	r5, #1
 8013e50:	f7ff fd3a 	bl	80138c8 <_Balloc>
 8013e54:	b920      	cbnz	r0, 8013e60 <__mdiff+0x5c>
 8013e56:	4b2e      	ldr	r3, [pc, #184]	; (8013f10 <__mdiff+0x10c>)
 8013e58:	4602      	mov	r2, r0
 8013e5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e5e:	e7e5      	b.n	8013e2c <__mdiff+0x28>
 8013e60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013e64:	6926      	ldr	r6, [r4, #16]
 8013e66:	60c5      	str	r5, [r0, #12]
 8013e68:	f104 0914 	add.w	r9, r4, #20
 8013e6c:	f108 0514 	add.w	r5, r8, #20
 8013e70:	f100 0e14 	add.w	lr, r0, #20
 8013e74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013e78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013e7c:	f108 0210 	add.w	r2, r8, #16
 8013e80:	46f2      	mov	sl, lr
 8013e82:	2100      	movs	r1, #0
 8013e84:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e8c:	fa1f f883 	uxth.w	r8, r3
 8013e90:	fa11 f18b 	uxtah	r1, r1, fp
 8013e94:	0c1b      	lsrs	r3, r3, #16
 8013e96:	eba1 0808 	sub.w	r8, r1, r8
 8013e9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013ea2:	fa1f f888 	uxth.w	r8, r8
 8013ea6:	1419      	asrs	r1, r3, #16
 8013ea8:	454e      	cmp	r6, r9
 8013eaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013eae:	f84a 3b04 	str.w	r3, [sl], #4
 8013eb2:	d8e7      	bhi.n	8013e84 <__mdiff+0x80>
 8013eb4:	1b33      	subs	r3, r6, r4
 8013eb6:	3b15      	subs	r3, #21
 8013eb8:	f023 0303 	bic.w	r3, r3, #3
 8013ebc:	3304      	adds	r3, #4
 8013ebe:	3415      	adds	r4, #21
 8013ec0:	42a6      	cmp	r6, r4
 8013ec2:	bf38      	it	cc
 8013ec4:	2304      	movcc	r3, #4
 8013ec6:	441d      	add	r5, r3
 8013ec8:	4473      	add	r3, lr
 8013eca:	469e      	mov	lr, r3
 8013ecc:	462e      	mov	r6, r5
 8013ece:	4566      	cmp	r6, ip
 8013ed0:	d30e      	bcc.n	8013ef0 <__mdiff+0xec>
 8013ed2:	f10c 0203 	add.w	r2, ip, #3
 8013ed6:	1b52      	subs	r2, r2, r5
 8013ed8:	f022 0203 	bic.w	r2, r2, #3
 8013edc:	3d03      	subs	r5, #3
 8013ede:	45ac      	cmp	ip, r5
 8013ee0:	bf38      	it	cc
 8013ee2:	2200      	movcc	r2, #0
 8013ee4:	441a      	add	r2, r3
 8013ee6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013eea:	b17b      	cbz	r3, 8013f0c <__mdiff+0x108>
 8013eec:	6107      	str	r7, [r0, #16]
 8013eee:	e7a3      	b.n	8013e38 <__mdiff+0x34>
 8013ef0:	f856 8b04 	ldr.w	r8, [r6], #4
 8013ef4:	fa11 f288 	uxtah	r2, r1, r8
 8013ef8:	1414      	asrs	r4, r2, #16
 8013efa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013efe:	b292      	uxth	r2, r2
 8013f00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013f04:	f84e 2b04 	str.w	r2, [lr], #4
 8013f08:	1421      	asrs	r1, r4, #16
 8013f0a:	e7e0      	b.n	8013ece <__mdiff+0xca>
 8013f0c:	3f01      	subs	r7, #1
 8013f0e:	e7ea      	b.n	8013ee6 <__mdiff+0xe2>
 8013f10:	080168f7 	.word	0x080168f7
 8013f14:	08016908 	.word	0x08016908

08013f18 <__d2b>:
 8013f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	4689      	mov	r9, r1
 8013f1e:	2101      	movs	r1, #1
 8013f20:	ec57 6b10 	vmov	r6, r7, d0
 8013f24:	4690      	mov	r8, r2
 8013f26:	f7ff fccf 	bl	80138c8 <_Balloc>
 8013f2a:	4604      	mov	r4, r0
 8013f2c:	b930      	cbnz	r0, 8013f3c <__d2b+0x24>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	4b25      	ldr	r3, [pc, #148]	; (8013fc8 <__d2b+0xb0>)
 8013f32:	4826      	ldr	r0, [pc, #152]	; (8013fcc <__d2b+0xb4>)
 8013f34:	f240 310a 	movw	r1, #778	; 0x30a
 8013f38:	f000 f950 	bl	80141dc <__assert_func>
 8013f3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f44:	bb35      	cbnz	r5, 8013f94 <__d2b+0x7c>
 8013f46:	2e00      	cmp	r6, #0
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	d028      	beq.n	8013f9e <__d2b+0x86>
 8013f4c:	4668      	mov	r0, sp
 8013f4e:	9600      	str	r6, [sp, #0]
 8013f50:	f7ff fd82 	bl	8013a58 <__lo0bits>
 8013f54:	9900      	ldr	r1, [sp, #0]
 8013f56:	b300      	cbz	r0, 8013f9a <__d2b+0x82>
 8013f58:	9a01      	ldr	r2, [sp, #4]
 8013f5a:	f1c0 0320 	rsb	r3, r0, #32
 8013f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8013f62:	430b      	orrs	r3, r1
 8013f64:	40c2      	lsrs	r2, r0
 8013f66:	6163      	str	r3, [r4, #20]
 8013f68:	9201      	str	r2, [sp, #4]
 8013f6a:	9b01      	ldr	r3, [sp, #4]
 8013f6c:	61a3      	str	r3, [r4, #24]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	bf14      	ite	ne
 8013f72:	2202      	movne	r2, #2
 8013f74:	2201      	moveq	r2, #1
 8013f76:	6122      	str	r2, [r4, #16]
 8013f78:	b1d5      	cbz	r5, 8013fb0 <__d2b+0x98>
 8013f7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f7e:	4405      	add	r5, r0
 8013f80:	f8c9 5000 	str.w	r5, [r9]
 8013f84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f88:	f8c8 0000 	str.w	r0, [r8]
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	b003      	add	sp, #12
 8013f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f98:	e7d5      	b.n	8013f46 <__d2b+0x2e>
 8013f9a:	6161      	str	r1, [r4, #20]
 8013f9c:	e7e5      	b.n	8013f6a <__d2b+0x52>
 8013f9e:	a801      	add	r0, sp, #4
 8013fa0:	f7ff fd5a 	bl	8013a58 <__lo0bits>
 8013fa4:	9b01      	ldr	r3, [sp, #4]
 8013fa6:	6163      	str	r3, [r4, #20]
 8013fa8:	2201      	movs	r2, #1
 8013faa:	6122      	str	r2, [r4, #16]
 8013fac:	3020      	adds	r0, #32
 8013fae:	e7e3      	b.n	8013f78 <__d2b+0x60>
 8013fb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013fb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013fb8:	f8c9 0000 	str.w	r0, [r9]
 8013fbc:	6918      	ldr	r0, [r3, #16]
 8013fbe:	f7ff fd2b 	bl	8013a18 <__hi0bits>
 8013fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013fc6:	e7df      	b.n	8013f88 <__d2b+0x70>
 8013fc8:	080168f7 	.word	0x080168f7
 8013fcc:	08016908 	.word	0x08016908

08013fd0 <_calloc_r>:
 8013fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fd2:	fba1 2402 	umull	r2, r4, r1, r2
 8013fd6:	b94c      	cbnz	r4, 8013fec <_calloc_r+0x1c>
 8013fd8:	4611      	mov	r1, r2
 8013fda:	9201      	str	r2, [sp, #4]
 8013fdc:	f000 f87a 	bl	80140d4 <_malloc_r>
 8013fe0:	9a01      	ldr	r2, [sp, #4]
 8013fe2:	4605      	mov	r5, r0
 8013fe4:	b930      	cbnz	r0, 8013ff4 <_calloc_r+0x24>
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	b003      	add	sp, #12
 8013fea:	bd30      	pop	{r4, r5, pc}
 8013fec:	220c      	movs	r2, #12
 8013fee:	6002      	str	r2, [r0, #0]
 8013ff0:	2500      	movs	r5, #0
 8013ff2:	e7f8      	b.n	8013fe6 <_calloc_r+0x16>
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	f7fe fa07 	bl	8012408 <memset>
 8013ffa:	e7f4      	b.n	8013fe6 <_calloc_r+0x16>

08013ffc <_free_r>:
 8013ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ffe:	2900      	cmp	r1, #0
 8014000:	d044      	beq.n	801408c <_free_r+0x90>
 8014002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014006:	9001      	str	r0, [sp, #4]
 8014008:	2b00      	cmp	r3, #0
 801400a:	f1a1 0404 	sub.w	r4, r1, #4
 801400e:	bfb8      	it	lt
 8014010:	18e4      	addlt	r4, r4, r3
 8014012:	f000 f925 	bl	8014260 <__malloc_lock>
 8014016:	4a1e      	ldr	r2, [pc, #120]	; (8014090 <_free_r+0x94>)
 8014018:	9801      	ldr	r0, [sp, #4]
 801401a:	6813      	ldr	r3, [r2, #0]
 801401c:	b933      	cbnz	r3, 801402c <_free_r+0x30>
 801401e:	6063      	str	r3, [r4, #4]
 8014020:	6014      	str	r4, [r2, #0]
 8014022:	b003      	add	sp, #12
 8014024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014028:	f000 b920 	b.w	801426c <__malloc_unlock>
 801402c:	42a3      	cmp	r3, r4
 801402e:	d908      	bls.n	8014042 <_free_r+0x46>
 8014030:	6825      	ldr	r5, [r4, #0]
 8014032:	1961      	adds	r1, r4, r5
 8014034:	428b      	cmp	r3, r1
 8014036:	bf01      	itttt	eq
 8014038:	6819      	ldreq	r1, [r3, #0]
 801403a:	685b      	ldreq	r3, [r3, #4]
 801403c:	1949      	addeq	r1, r1, r5
 801403e:	6021      	streq	r1, [r4, #0]
 8014040:	e7ed      	b.n	801401e <_free_r+0x22>
 8014042:	461a      	mov	r2, r3
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	b10b      	cbz	r3, 801404c <_free_r+0x50>
 8014048:	42a3      	cmp	r3, r4
 801404a:	d9fa      	bls.n	8014042 <_free_r+0x46>
 801404c:	6811      	ldr	r1, [r2, #0]
 801404e:	1855      	adds	r5, r2, r1
 8014050:	42a5      	cmp	r5, r4
 8014052:	d10b      	bne.n	801406c <_free_r+0x70>
 8014054:	6824      	ldr	r4, [r4, #0]
 8014056:	4421      	add	r1, r4
 8014058:	1854      	adds	r4, r2, r1
 801405a:	42a3      	cmp	r3, r4
 801405c:	6011      	str	r1, [r2, #0]
 801405e:	d1e0      	bne.n	8014022 <_free_r+0x26>
 8014060:	681c      	ldr	r4, [r3, #0]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	6053      	str	r3, [r2, #4]
 8014066:	4421      	add	r1, r4
 8014068:	6011      	str	r1, [r2, #0]
 801406a:	e7da      	b.n	8014022 <_free_r+0x26>
 801406c:	d902      	bls.n	8014074 <_free_r+0x78>
 801406e:	230c      	movs	r3, #12
 8014070:	6003      	str	r3, [r0, #0]
 8014072:	e7d6      	b.n	8014022 <_free_r+0x26>
 8014074:	6825      	ldr	r5, [r4, #0]
 8014076:	1961      	adds	r1, r4, r5
 8014078:	428b      	cmp	r3, r1
 801407a:	bf04      	itt	eq
 801407c:	6819      	ldreq	r1, [r3, #0]
 801407e:	685b      	ldreq	r3, [r3, #4]
 8014080:	6063      	str	r3, [r4, #4]
 8014082:	bf04      	itt	eq
 8014084:	1949      	addeq	r1, r1, r5
 8014086:	6021      	streq	r1, [r4, #0]
 8014088:	6054      	str	r4, [r2, #4]
 801408a:	e7ca      	b.n	8014022 <_free_r+0x26>
 801408c:	b003      	add	sp, #12
 801408e:	bd30      	pop	{r4, r5, pc}
 8014090:	24001744 	.word	0x24001744

08014094 <sbrk_aligned>:
 8014094:	b570      	push	{r4, r5, r6, lr}
 8014096:	4e0e      	ldr	r6, [pc, #56]	; (80140d0 <sbrk_aligned+0x3c>)
 8014098:	460c      	mov	r4, r1
 801409a:	6831      	ldr	r1, [r6, #0]
 801409c:	4605      	mov	r5, r0
 801409e:	b911      	cbnz	r1, 80140a6 <sbrk_aligned+0x12>
 80140a0:	f000 f88c 	bl	80141bc <_sbrk_r>
 80140a4:	6030      	str	r0, [r6, #0]
 80140a6:	4621      	mov	r1, r4
 80140a8:	4628      	mov	r0, r5
 80140aa:	f000 f887 	bl	80141bc <_sbrk_r>
 80140ae:	1c43      	adds	r3, r0, #1
 80140b0:	d00a      	beq.n	80140c8 <sbrk_aligned+0x34>
 80140b2:	1cc4      	adds	r4, r0, #3
 80140b4:	f024 0403 	bic.w	r4, r4, #3
 80140b8:	42a0      	cmp	r0, r4
 80140ba:	d007      	beq.n	80140cc <sbrk_aligned+0x38>
 80140bc:	1a21      	subs	r1, r4, r0
 80140be:	4628      	mov	r0, r5
 80140c0:	f000 f87c 	bl	80141bc <_sbrk_r>
 80140c4:	3001      	adds	r0, #1
 80140c6:	d101      	bne.n	80140cc <sbrk_aligned+0x38>
 80140c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80140cc:	4620      	mov	r0, r4
 80140ce:	bd70      	pop	{r4, r5, r6, pc}
 80140d0:	24001748 	.word	0x24001748

080140d4 <_malloc_r>:
 80140d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d8:	1ccd      	adds	r5, r1, #3
 80140da:	f025 0503 	bic.w	r5, r5, #3
 80140de:	3508      	adds	r5, #8
 80140e0:	2d0c      	cmp	r5, #12
 80140e2:	bf38      	it	cc
 80140e4:	250c      	movcc	r5, #12
 80140e6:	2d00      	cmp	r5, #0
 80140e8:	4607      	mov	r7, r0
 80140ea:	db01      	blt.n	80140f0 <_malloc_r+0x1c>
 80140ec:	42a9      	cmp	r1, r5
 80140ee:	d905      	bls.n	80140fc <_malloc_r+0x28>
 80140f0:	230c      	movs	r3, #12
 80140f2:	603b      	str	r3, [r7, #0]
 80140f4:	2600      	movs	r6, #0
 80140f6:	4630      	mov	r0, r6
 80140f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140fc:	4e2e      	ldr	r6, [pc, #184]	; (80141b8 <_malloc_r+0xe4>)
 80140fe:	f000 f8af 	bl	8014260 <__malloc_lock>
 8014102:	6833      	ldr	r3, [r6, #0]
 8014104:	461c      	mov	r4, r3
 8014106:	bb34      	cbnz	r4, 8014156 <_malloc_r+0x82>
 8014108:	4629      	mov	r1, r5
 801410a:	4638      	mov	r0, r7
 801410c:	f7ff ffc2 	bl	8014094 <sbrk_aligned>
 8014110:	1c43      	adds	r3, r0, #1
 8014112:	4604      	mov	r4, r0
 8014114:	d14d      	bne.n	80141b2 <_malloc_r+0xde>
 8014116:	6834      	ldr	r4, [r6, #0]
 8014118:	4626      	mov	r6, r4
 801411a:	2e00      	cmp	r6, #0
 801411c:	d140      	bne.n	80141a0 <_malloc_r+0xcc>
 801411e:	6823      	ldr	r3, [r4, #0]
 8014120:	4631      	mov	r1, r6
 8014122:	4638      	mov	r0, r7
 8014124:	eb04 0803 	add.w	r8, r4, r3
 8014128:	f000 f848 	bl	80141bc <_sbrk_r>
 801412c:	4580      	cmp	r8, r0
 801412e:	d13a      	bne.n	80141a6 <_malloc_r+0xd2>
 8014130:	6821      	ldr	r1, [r4, #0]
 8014132:	3503      	adds	r5, #3
 8014134:	1a6d      	subs	r5, r5, r1
 8014136:	f025 0503 	bic.w	r5, r5, #3
 801413a:	3508      	adds	r5, #8
 801413c:	2d0c      	cmp	r5, #12
 801413e:	bf38      	it	cc
 8014140:	250c      	movcc	r5, #12
 8014142:	4629      	mov	r1, r5
 8014144:	4638      	mov	r0, r7
 8014146:	f7ff ffa5 	bl	8014094 <sbrk_aligned>
 801414a:	3001      	adds	r0, #1
 801414c:	d02b      	beq.n	80141a6 <_malloc_r+0xd2>
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	442b      	add	r3, r5
 8014152:	6023      	str	r3, [r4, #0]
 8014154:	e00e      	b.n	8014174 <_malloc_r+0xa0>
 8014156:	6822      	ldr	r2, [r4, #0]
 8014158:	1b52      	subs	r2, r2, r5
 801415a:	d41e      	bmi.n	801419a <_malloc_r+0xc6>
 801415c:	2a0b      	cmp	r2, #11
 801415e:	d916      	bls.n	801418e <_malloc_r+0xba>
 8014160:	1961      	adds	r1, r4, r5
 8014162:	42a3      	cmp	r3, r4
 8014164:	6025      	str	r5, [r4, #0]
 8014166:	bf18      	it	ne
 8014168:	6059      	strne	r1, [r3, #4]
 801416a:	6863      	ldr	r3, [r4, #4]
 801416c:	bf08      	it	eq
 801416e:	6031      	streq	r1, [r6, #0]
 8014170:	5162      	str	r2, [r4, r5]
 8014172:	604b      	str	r3, [r1, #4]
 8014174:	4638      	mov	r0, r7
 8014176:	f104 060b 	add.w	r6, r4, #11
 801417a:	f000 f877 	bl	801426c <__malloc_unlock>
 801417e:	f026 0607 	bic.w	r6, r6, #7
 8014182:	1d23      	adds	r3, r4, #4
 8014184:	1af2      	subs	r2, r6, r3
 8014186:	d0b6      	beq.n	80140f6 <_malloc_r+0x22>
 8014188:	1b9b      	subs	r3, r3, r6
 801418a:	50a3      	str	r3, [r4, r2]
 801418c:	e7b3      	b.n	80140f6 <_malloc_r+0x22>
 801418e:	6862      	ldr	r2, [r4, #4]
 8014190:	42a3      	cmp	r3, r4
 8014192:	bf0c      	ite	eq
 8014194:	6032      	streq	r2, [r6, #0]
 8014196:	605a      	strne	r2, [r3, #4]
 8014198:	e7ec      	b.n	8014174 <_malloc_r+0xa0>
 801419a:	4623      	mov	r3, r4
 801419c:	6864      	ldr	r4, [r4, #4]
 801419e:	e7b2      	b.n	8014106 <_malloc_r+0x32>
 80141a0:	4634      	mov	r4, r6
 80141a2:	6876      	ldr	r6, [r6, #4]
 80141a4:	e7b9      	b.n	801411a <_malloc_r+0x46>
 80141a6:	230c      	movs	r3, #12
 80141a8:	603b      	str	r3, [r7, #0]
 80141aa:	4638      	mov	r0, r7
 80141ac:	f000 f85e 	bl	801426c <__malloc_unlock>
 80141b0:	e7a1      	b.n	80140f6 <_malloc_r+0x22>
 80141b2:	6025      	str	r5, [r4, #0]
 80141b4:	e7de      	b.n	8014174 <_malloc_r+0xa0>
 80141b6:	bf00      	nop
 80141b8:	24001744 	.word	0x24001744

080141bc <_sbrk_r>:
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	4d06      	ldr	r5, [pc, #24]	; (80141d8 <_sbrk_r+0x1c>)
 80141c0:	2300      	movs	r3, #0
 80141c2:	4604      	mov	r4, r0
 80141c4:	4608      	mov	r0, r1
 80141c6:	602b      	str	r3, [r5, #0]
 80141c8:	f7f1 f856 	bl	8005278 <_sbrk>
 80141cc:	1c43      	adds	r3, r0, #1
 80141ce:	d102      	bne.n	80141d6 <_sbrk_r+0x1a>
 80141d0:	682b      	ldr	r3, [r5, #0]
 80141d2:	b103      	cbz	r3, 80141d6 <_sbrk_r+0x1a>
 80141d4:	6023      	str	r3, [r4, #0]
 80141d6:	bd38      	pop	{r3, r4, r5, pc}
 80141d8:	2400174c 	.word	0x2400174c

080141dc <__assert_func>:
 80141dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141de:	4614      	mov	r4, r2
 80141e0:	461a      	mov	r2, r3
 80141e2:	4b09      	ldr	r3, [pc, #36]	; (8014208 <__assert_func+0x2c>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	4605      	mov	r5, r0
 80141e8:	68d8      	ldr	r0, [r3, #12]
 80141ea:	b14c      	cbz	r4, 8014200 <__assert_func+0x24>
 80141ec:	4b07      	ldr	r3, [pc, #28]	; (801420c <__assert_func+0x30>)
 80141ee:	9100      	str	r1, [sp, #0]
 80141f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141f4:	4906      	ldr	r1, [pc, #24]	; (8014210 <__assert_func+0x34>)
 80141f6:	462b      	mov	r3, r5
 80141f8:	f000 f80e 	bl	8014218 <fiprintf>
 80141fc:	f000 fa64 	bl	80146c8 <abort>
 8014200:	4b04      	ldr	r3, [pc, #16]	; (8014214 <__assert_func+0x38>)
 8014202:	461c      	mov	r4, r3
 8014204:	e7f3      	b.n	80141ee <__assert_func+0x12>
 8014206:	bf00      	nop
 8014208:	24000244 	.word	0x24000244
 801420c:	08016a64 	.word	0x08016a64
 8014210:	08016a71 	.word	0x08016a71
 8014214:	08016a9f 	.word	0x08016a9f

08014218 <fiprintf>:
 8014218:	b40e      	push	{r1, r2, r3}
 801421a:	b503      	push	{r0, r1, lr}
 801421c:	4601      	mov	r1, r0
 801421e:	ab03      	add	r3, sp, #12
 8014220:	4805      	ldr	r0, [pc, #20]	; (8014238 <fiprintf+0x20>)
 8014222:	f853 2b04 	ldr.w	r2, [r3], #4
 8014226:	6800      	ldr	r0, [r0, #0]
 8014228:	9301      	str	r3, [sp, #4]
 801422a:	f000 f84f 	bl	80142cc <_vfiprintf_r>
 801422e:	b002      	add	sp, #8
 8014230:	f85d eb04 	ldr.w	lr, [sp], #4
 8014234:	b003      	add	sp, #12
 8014236:	4770      	bx	lr
 8014238:	24000244 	.word	0x24000244

0801423c <__ascii_mbtowc>:
 801423c:	b082      	sub	sp, #8
 801423e:	b901      	cbnz	r1, 8014242 <__ascii_mbtowc+0x6>
 8014240:	a901      	add	r1, sp, #4
 8014242:	b142      	cbz	r2, 8014256 <__ascii_mbtowc+0x1a>
 8014244:	b14b      	cbz	r3, 801425a <__ascii_mbtowc+0x1e>
 8014246:	7813      	ldrb	r3, [r2, #0]
 8014248:	600b      	str	r3, [r1, #0]
 801424a:	7812      	ldrb	r2, [r2, #0]
 801424c:	1e10      	subs	r0, r2, #0
 801424e:	bf18      	it	ne
 8014250:	2001      	movne	r0, #1
 8014252:	b002      	add	sp, #8
 8014254:	4770      	bx	lr
 8014256:	4610      	mov	r0, r2
 8014258:	e7fb      	b.n	8014252 <__ascii_mbtowc+0x16>
 801425a:	f06f 0001 	mvn.w	r0, #1
 801425e:	e7f8      	b.n	8014252 <__ascii_mbtowc+0x16>

08014260 <__malloc_lock>:
 8014260:	4801      	ldr	r0, [pc, #4]	; (8014268 <__malloc_lock+0x8>)
 8014262:	f000 bbf1 	b.w	8014a48 <__retarget_lock_acquire_recursive>
 8014266:	bf00      	nop
 8014268:	24001750 	.word	0x24001750

0801426c <__malloc_unlock>:
 801426c:	4801      	ldr	r0, [pc, #4]	; (8014274 <__malloc_unlock+0x8>)
 801426e:	f000 bbec 	b.w	8014a4a <__retarget_lock_release_recursive>
 8014272:	bf00      	nop
 8014274:	24001750 	.word	0x24001750

08014278 <__sfputc_r>:
 8014278:	6893      	ldr	r3, [r2, #8]
 801427a:	3b01      	subs	r3, #1
 801427c:	2b00      	cmp	r3, #0
 801427e:	b410      	push	{r4}
 8014280:	6093      	str	r3, [r2, #8]
 8014282:	da08      	bge.n	8014296 <__sfputc_r+0x1e>
 8014284:	6994      	ldr	r4, [r2, #24]
 8014286:	42a3      	cmp	r3, r4
 8014288:	db01      	blt.n	801428e <__sfputc_r+0x16>
 801428a:	290a      	cmp	r1, #10
 801428c:	d103      	bne.n	8014296 <__sfputc_r+0x1e>
 801428e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014292:	f000 b94b 	b.w	801452c <__swbuf_r>
 8014296:	6813      	ldr	r3, [r2, #0]
 8014298:	1c58      	adds	r0, r3, #1
 801429a:	6010      	str	r0, [r2, #0]
 801429c:	7019      	strb	r1, [r3, #0]
 801429e:	4608      	mov	r0, r1
 80142a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <__sfputs_r>:
 80142a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142a8:	4606      	mov	r6, r0
 80142aa:	460f      	mov	r7, r1
 80142ac:	4614      	mov	r4, r2
 80142ae:	18d5      	adds	r5, r2, r3
 80142b0:	42ac      	cmp	r4, r5
 80142b2:	d101      	bne.n	80142b8 <__sfputs_r+0x12>
 80142b4:	2000      	movs	r0, #0
 80142b6:	e007      	b.n	80142c8 <__sfputs_r+0x22>
 80142b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142bc:	463a      	mov	r2, r7
 80142be:	4630      	mov	r0, r6
 80142c0:	f7ff ffda 	bl	8014278 <__sfputc_r>
 80142c4:	1c43      	adds	r3, r0, #1
 80142c6:	d1f3      	bne.n	80142b0 <__sfputs_r+0xa>
 80142c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142cc <_vfiprintf_r>:
 80142cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d0:	460d      	mov	r5, r1
 80142d2:	b09d      	sub	sp, #116	; 0x74
 80142d4:	4614      	mov	r4, r2
 80142d6:	4698      	mov	r8, r3
 80142d8:	4606      	mov	r6, r0
 80142da:	b118      	cbz	r0, 80142e4 <_vfiprintf_r+0x18>
 80142dc:	6983      	ldr	r3, [r0, #24]
 80142de:	b90b      	cbnz	r3, 80142e4 <_vfiprintf_r+0x18>
 80142e0:	f000 fb14 	bl	801490c <__sinit>
 80142e4:	4b89      	ldr	r3, [pc, #548]	; (801450c <_vfiprintf_r+0x240>)
 80142e6:	429d      	cmp	r5, r3
 80142e8:	d11b      	bne.n	8014322 <_vfiprintf_r+0x56>
 80142ea:	6875      	ldr	r5, [r6, #4]
 80142ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142ee:	07d9      	lsls	r1, r3, #31
 80142f0:	d405      	bmi.n	80142fe <_vfiprintf_r+0x32>
 80142f2:	89ab      	ldrh	r3, [r5, #12]
 80142f4:	059a      	lsls	r2, r3, #22
 80142f6:	d402      	bmi.n	80142fe <_vfiprintf_r+0x32>
 80142f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142fa:	f000 fba5 	bl	8014a48 <__retarget_lock_acquire_recursive>
 80142fe:	89ab      	ldrh	r3, [r5, #12]
 8014300:	071b      	lsls	r3, r3, #28
 8014302:	d501      	bpl.n	8014308 <_vfiprintf_r+0x3c>
 8014304:	692b      	ldr	r3, [r5, #16]
 8014306:	b9eb      	cbnz	r3, 8014344 <_vfiprintf_r+0x78>
 8014308:	4629      	mov	r1, r5
 801430a:	4630      	mov	r0, r6
 801430c:	f000 f96e 	bl	80145ec <__swsetup_r>
 8014310:	b1c0      	cbz	r0, 8014344 <_vfiprintf_r+0x78>
 8014312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014314:	07dc      	lsls	r4, r3, #31
 8014316:	d50e      	bpl.n	8014336 <_vfiprintf_r+0x6a>
 8014318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801431c:	b01d      	add	sp, #116	; 0x74
 801431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014322:	4b7b      	ldr	r3, [pc, #492]	; (8014510 <_vfiprintf_r+0x244>)
 8014324:	429d      	cmp	r5, r3
 8014326:	d101      	bne.n	801432c <_vfiprintf_r+0x60>
 8014328:	68b5      	ldr	r5, [r6, #8]
 801432a:	e7df      	b.n	80142ec <_vfiprintf_r+0x20>
 801432c:	4b79      	ldr	r3, [pc, #484]	; (8014514 <_vfiprintf_r+0x248>)
 801432e:	429d      	cmp	r5, r3
 8014330:	bf08      	it	eq
 8014332:	68f5      	ldreq	r5, [r6, #12]
 8014334:	e7da      	b.n	80142ec <_vfiprintf_r+0x20>
 8014336:	89ab      	ldrh	r3, [r5, #12]
 8014338:	0598      	lsls	r0, r3, #22
 801433a:	d4ed      	bmi.n	8014318 <_vfiprintf_r+0x4c>
 801433c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801433e:	f000 fb84 	bl	8014a4a <__retarget_lock_release_recursive>
 8014342:	e7e9      	b.n	8014318 <_vfiprintf_r+0x4c>
 8014344:	2300      	movs	r3, #0
 8014346:	9309      	str	r3, [sp, #36]	; 0x24
 8014348:	2320      	movs	r3, #32
 801434a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801434e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014352:	2330      	movs	r3, #48	; 0x30
 8014354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014518 <_vfiprintf_r+0x24c>
 8014358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801435c:	f04f 0901 	mov.w	r9, #1
 8014360:	4623      	mov	r3, r4
 8014362:	469a      	mov	sl, r3
 8014364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014368:	b10a      	cbz	r2, 801436e <_vfiprintf_r+0xa2>
 801436a:	2a25      	cmp	r2, #37	; 0x25
 801436c:	d1f9      	bne.n	8014362 <_vfiprintf_r+0x96>
 801436e:	ebba 0b04 	subs.w	fp, sl, r4
 8014372:	d00b      	beq.n	801438c <_vfiprintf_r+0xc0>
 8014374:	465b      	mov	r3, fp
 8014376:	4622      	mov	r2, r4
 8014378:	4629      	mov	r1, r5
 801437a:	4630      	mov	r0, r6
 801437c:	f7ff ff93 	bl	80142a6 <__sfputs_r>
 8014380:	3001      	adds	r0, #1
 8014382:	f000 80aa 	beq.w	80144da <_vfiprintf_r+0x20e>
 8014386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014388:	445a      	add	r2, fp
 801438a:	9209      	str	r2, [sp, #36]	; 0x24
 801438c:	f89a 3000 	ldrb.w	r3, [sl]
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 80a2 	beq.w	80144da <_vfiprintf_r+0x20e>
 8014396:	2300      	movs	r3, #0
 8014398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801439c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143a0:	f10a 0a01 	add.w	sl, sl, #1
 80143a4:	9304      	str	r3, [sp, #16]
 80143a6:	9307      	str	r3, [sp, #28]
 80143a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143ac:	931a      	str	r3, [sp, #104]	; 0x68
 80143ae:	4654      	mov	r4, sl
 80143b0:	2205      	movs	r2, #5
 80143b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143b6:	4858      	ldr	r0, [pc, #352]	; (8014518 <_vfiprintf_r+0x24c>)
 80143b8:	f7eb ff9a 	bl	80002f0 <memchr>
 80143bc:	9a04      	ldr	r2, [sp, #16]
 80143be:	b9d8      	cbnz	r0, 80143f8 <_vfiprintf_r+0x12c>
 80143c0:	06d1      	lsls	r1, r2, #27
 80143c2:	bf44      	itt	mi
 80143c4:	2320      	movmi	r3, #32
 80143c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143ca:	0713      	lsls	r3, r2, #28
 80143cc:	bf44      	itt	mi
 80143ce:	232b      	movmi	r3, #43	; 0x2b
 80143d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143d4:	f89a 3000 	ldrb.w	r3, [sl]
 80143d8:	2b2a      	cmp	r3, #42	; 0x2a
 80143da:	d015      	beq.n	8014408 <_vfiprintf_r+0x13c>
 80143dc:	9a07      	ldr	r2, [sp, #28]
 80143de:	4654      	mov	r4, sl
 80143e0:	2000      	movs	r0, #0
 80143e2:	f04f 0c0a 	mov.w	ip, #10
 80143e6:	4621      	mov	r1, r4
 80143e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143ec:	3b30      	subs	r3, #48	; 0x30
 80143ee:	2b09      	cmp	r3, #9
 80143f0:	d94e      	bls.n	8014490 <_vfiprintf_r+0x1c4>
 80143f2:	b1b0      	cbz	r0, 8014422 <_vfiprintf_r+0x156>
 80143f4:	9207      	str	r2, [sp, #28]
 80143f6:	e014      	b.n	8014422 <_vfiprintf_r+0x156>
 80143f8:	eba0 0308 	sub.w	r3, r0, r8
 80143fc:	fa09 f303 	lsl.w	r3, r9, r3
 8014400:	4313      	orrs	r3, r2
 8014402:	9304      	str	r3, [sp, #16]
 8014404:	46a2      	mov	sl, r4
 8014406:	e7d2      	b.n	80143ae <_vfiprintf_r+0xe2>
 8014408:	9b03      	ldr	r3, [sp, #12]
 801440a:	1d19      	adds	r1, r3, #4
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	9103      	str	r1, [sp, #12]
 8014410:	2b00      	cmp	r3, #0
 8014412:	bfbb      	ittet	lt
 8014414:	425b      	neglt	r3, r3
 8014416:	f042 0202 	orrlt.w	r2, r2, #2
 801441a:	9307      	strge	r3, [sp, #28]
 801441c:	9307      	strlt	r3, [sp, #28]
 801441e:	bfb8      	it	lt
 8014420:	9204      	strlt	r2, [sp, #16]
 8014422:	7823      	ldrb	r3, [r4, #0]
 8014424:	2b2e      	cmp	r3, #46	; 0x2e
 8014426:	d10c      	bne.n	8014442 <_vfiprintf_r+0x176>
 8014428:	7863      	ldrb	r3, [r4, #1]
 801442a:	2b2a      	cmp	r3, #42	; 0x2a
 801442c:	d135      	bne.n	801449a <_vfiprintf_r+0x1ce>
 801442e:	9b03      	ldr	r3, [sp, #12]
 8014430:	1d1a      	adds	r2, r3, #4
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	9203      	str	r2, [sp, #12]
 8014436:	2b00      	cmp	r3, #0
 8014438:	bfb8      	it	lt
 801443a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801443e:	3402      	adds	r4, #2
 8014440:	9305      	str	r3, [sp, #20]
 8014442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014528 <_vfiprintf_r+0x25c>
 8014446:	7821      	ldrb	r1, [r4, #0]
 8014448:	2203      	movs	r2, #3
 801444a:	4650      	mov	r0, sl
 801444c:	f7eb ff50 	bl	80002f0 <memchr>
 8014450:	b140      	cbz	r0, 8014464 <_vfiprintf_r+0x198>
 8014452:	2340      	movs	r3, #64	; 0x40
 8014454:	eba0 000a 	sub.w	r0, r0, sl
 8014458:	fa03 f000 	lsl.w	r0, r3, r0
 801445c:	9b04      	ldr	r3, [sp, #16]
 801445e:	4303      	orrs	r3, r0
 8014460:	3401      	adds	r4, #1
 8014462:	9304      	str	r3, [sp, #16]
 8014464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014468:	482c      	ldr	r0, [pc, #176]	; (801451c <_vfiprintf_r+0x250>)
 801446a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801446e:	2206      	movs	r2, #6
 8014470:	f7eb ff3e 	bl	80002f0 <memchr>
 8014474:	2800      	cmp	r0, #0
 8014476:	d03f      	beq.n	80144f8 <_vfiprintf_r+0x22c>
 8014478:	4b29      	ldr	r3, [pc, #164]	; (8014520 <_vfiprintf_r+0x254>)
 801447a:	bb1b      	cbnz	r3, 80144c4 <_vfiprintf_r+0x1f8>
 801447c:	9b03      	ldr	r3, [sp, #12]
 801447e:	3307      	adds	r3, #7
 8014480:	f023 0307 	bic.w	r3, r3, #7
 8014484:	3308      	adds	r3, #8
 8014486:	9303      	str	r3, [sp, #12]
 8014488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801448a:	443b      	add	r3, r7
 801448c:	9309      	str	r3, [sp, #36]	; 0x24
 801448e:	e767      	b.n	8014360 <_vfiprintf_r+0x94>
 8014490:	fb0c 3202 	mla	r2, ip, r2, r3
 8014494:	460c      	mov	r4, r1
 8014496:	2001      	movs	r0, #1
 8014498:	e7a5      	b.n	80143e6 <_vfiprintf_r+0x11a>
 801449a:	2300      	movs	r3, #0
 801449c:	3401      	adds	r4, #1
 801449e:	9305      	str	r3, [sp, #20]
 80144a0:	4619      	mov	r1, r3
 80144a2:	f04f 0c0a 	mov.w	ip, #10
 80144a6:	4620      	mov	r0, r4
 80144a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144ac:	3a30      	subs	r2, #48	; 0x30
 80144ae:	2a09      	cmp	r2, #9
 80144b0:	d903      	bls.n	80144ba <_vfiprintf_r+0x1ee>
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d0c5      	beq.n	8014442 <_vfiprintf_r+0x176>
 80144b6:	9105      	str	r1, [sp, #20]
 80144b8:	e7c3      	b.n	8014442 <_vfiprintf_r+0x176>
 80144ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80144be:	4604      	mov	r4, r0
 80144c0:	2301      	movs	r3, #1
 80144c2:	e7f0      	b.n	80144a6 <_vfiprintf_r+0x1da>
 80144c4:	ab03      	add	r3, sp, #12
 80144c6:	9300      	str	r3, [sp, #0]
 80144c8:	462a      	mov	r2, r5
 80144ca:	4b16      	ldr	r3, [pc, #88]	; (8014524 <_vfiprintf_r+0x258>)
 80144cc:	a904      	add	r1, sp, #16
 80144ce:	4630      	mov	r0, r6
 80144d0:	f7fe f832 	bl	8012538 <_printf_float>
 80144d4:	4607      	mov	r7, r0
 80144d6:	1c78      	adds	r0, r7, #1
 80144d8:	d1d6      	bne.n	8014488 <_vfiprintf_r+0x1bc>
 80144da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144dc:	07d9      	lsls	r1, r3, #31
 80144de:	d405      	bmi.n	80144ec <_vfiprintf_r+0x220>
 80144e0:	89ab      	ldrh	r3, [r5, #12]
 80144e2:	059a      	lsls	r2, r3, #22
 80144e4:	d402      	bmi.n	80144ec <_vfiprintf_r+0x220>
 80144e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144e8:	f000 faaf 	bl	8014a4a <__retarget_lock_release_recursive>
 80144ec:	89ab      	ldrh	r3, [r5, #12]
 80144ee:	065b      	lsls	r3, r3, #25
 80144f0:	f53f af12 	bmi.w	8014318 <_vfiprintf_r+0x4c>
 80144f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144f6:	e711      	b.n	801431c <_vfiprintf_r+0x50>
 80144f8:	ab03      	add	r3, sp, #12
 80144fa:	9300      	str	r3, [sp, #0]
 80144fc:	462a      	mov	r2, r5
 80144fe:	4b09      	ldr	r3, [pc, #36]	; (8014524 <_vfiprintf_r+0x258>)
 8014500:	a904      	add	r1, sp, #16
 8014502:	4630      	mov	r0, r6
 8014504:	f7fe faa4 	bl	8012a50 <_printf_i>
 8014508:	e7e4      	b.n	80144d4 <_vfiprintf_r+0x208>
 801450a:	bf00      	nop
 801450c:	08016bdc 	.word	0x08016bdc
 8014510:	08016bfc 	.word	0x08016bfc
 8014514:	08016bbc 	.word	0x08016bbc
 8014518:	08016aaa 	.word	0x08016aaa
 801451c:	08016ab4 	.word	0x08016ab4
 8014520:	08012539 	.word	0x08012539
 8014524:	080142a7 	.word	0x080142a7
 8014528:	08016ab0 	.word	0x08016ab0

0801452c <__swbuf_r>:
 801452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801452e:	460e      	mov	r6, r1
 8014530:	4614      	mov	r4, r2
 8014532:	4605      	mov	r5, r0
 8014534:	b118      	cbz	r0, 801453e <__swbuf_r+0x12>
 8014536:	6983      	ldr	r3, [r0, #24]
 8014538:	b90b      	cbnz	r3, 801453e <__swbuf_r+0x12>
 801453a:	f000 f9e7 	bl	801490c <__sinit>
 801453e:	4b21      	ldr	r3, [pc, #132]	; (80145c4 <__swbuf_r+0x98>)
 8014540:	429c      	cmp	r4, r3
 8014542:	d12b      	bne.n	801459c <__swbuf_r+0x70>
 8014544:	686c      	ldr	r4, [r5, #4]
 8014546:	69a3      	ldr	r3, [r4, #24]
 8014548:	60a3      	str	r3, [r4, #8]
 801454a:	89a3      	ldrh	r3, [r4, #12]
 801454c:	071a      	lsls	r2, r3, #28
 801454e:	d52f      	bpl.n	80145b0 <__swbuf_r+0x84>
 8014550:	6923      	ldr	r3, [r4, #16]
 8014552:	b36b      	cbz	r3, 80145b0 <__swbuf_r+0x84>
 8014554:	6923      	ldr	r3, [r4, #16]
 8014556:	6820      	ldr	r0, [r4, #0]
 8014558:	1ac0      	subs	r0, r0, r3
 801455a:	6963      	ldr	r3, [r4, #20]
 801455c:	b2f6      	uxtb	r6, r6
 801455e:	4283      	cmp	r3, r0
 8014560:	4637      	mov	r7, r6
 8014562:	dc04      	bgt.n	801456e <__swbuf_r+0x42>
 8014564:	4621      	mov	r1, r4
 8014566:	4628      	mov	r0, r5
 8014568:	f000 f93c 	bl	80147e4 <_fflush_r>
 801456c:	bb30      	cbnz	r0, 80145bc <__swbuf_r+0x90>
 801456e:	68a3      	ldr	r3, [r4, #8]
 8014570:	3b01      	subs	r3, #1
 8014572:	60a3      	str	r3, [r4, #8]
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	1c5a      	adds	r2, r3, #1
 8014578:	6022      	str	r2, [r4, #0]
 801457a:	701e      	strb	r6, [r3, #0]
 801457c:	6963      	ldr	r3, [r4, #20]
 801457e:	3001      	adds	r0, #1
 8014580:	4283      	cmp	r3, r0
 8014582:	d004      	beq.n	801458e <__swbuf_r+0x62>
 8014584:	89a3      	ldrh	r3, [r4, #12]
 8014586:	07db      	lsls	r3, r3, #31
 8014588:	d506      	bpl.n	8014598 <__swbuf_r+0x6c>
 801458a:	2e0a      	cmp	r6, #10
 801458c:	d104      	bne.n	8014598 <__swbuf_r+0x6c>
 801458e:	4621      	mov	r1, r4
 8014590:	4628      	mov	r0, r5
 8014592:	f000 f927 	bl	80147e4 <_fflush_r>
 8014596:	b988      	cbnz	r0, 80145bc <__swbuf_r+0x90>
 8014598:	4638      	mov	r0, r7
 801459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801459c:	4b0a      	ldr	r3, [pc, #40]	; (80145c8 <__swbuf_r+0x9c>)
 801459e:	429c      	cmp	r4, r3
 80145a0:	d101      	bne.n	80145a6 <__swbuf_r+0x7a>
 80145a2:	68ac      	ldr	r4, [r5, #8]
 80145a4:	e7cf      	b.n	8014546 <__swbuf_r+0x1a>
 80145a6:	4b09      	ldr	r3, [pc, #36]	; (80145cc <__swbuf_r+0xa0>)
 80145a8:	429c      	cmp	r4, r3
 80145aa:	bf08      	it	eq
 80145ac:	68ec      	ldreq	r4, [r5, #12]
 80145ae:	e7ca      	b.n	8014546 <__swbuf_r+0x1a>
 80145b0:	4621      	mov	r1, r4
 80145b2:	4628      	mov	r0, r5
 80145b4:	f000 f81a 	bl	80145ec <__swsetup_r>
 80145b8:	2800      	cmp	r0, #0
 80145ba:	d0cb      	beq.n	8014554 <__swbuf_r+0x28>
 80145bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80145c0:	e7ea      	b.n	8014598 <__swbuf_r+0x6c>
 80145c2:	bf00      	nop
 80145c4:	08016bdc 	.word	0x08016bdc
 80145c8:	08016bfc 	.word	0x08016bfc
 80145cc:	08016bbc 	.word	0x08016bbc

080145d0 <__ascii_wctomb>:
 80145d0:	b149      	cbz	r1, 80145e6 <__ascii_wctomb+0x16>
 80145d2:	2aff      	cmp	r2, #255	; 0xff
 80145d4:	bf85      	ittet	hi
 80145d6:	238a      	movhi	r3, #138	; 0x8a
 80145d8:	6003      	strhi	r3, [r0, #0]
 80145da:	700a      	strbls	r2, [r1, #0]
 80145dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80145e0:	bf98      	it	ls
 80145e2:	2001      	movls	r0, #1
 80145e4:	4770      	bx	lr
 80145e6:	4608      	mov	r0, r1
 80145e8:	4770      	bx	lr
	...

080145ec <__swsetup_r>:
 80145ec:	4b32      	ldr	r3, [pc, #200]	; (80146b8 <__swsetup_r+0xcc>)
 80145ee:	b570      	push	{r4, r5, r6, lr}
 80145f0:	681d      	ldr	r5, [r3, #0]
 80145f2:	4606      	mov	r6, r0
 80145f4:	460c      	mov	r4, r1
 80145f6:	b125      	cbz	r5, 8014602 <__swsetup_r+0x16>
 80145f8:	69ab      	ldr	r3, [r5, #24]
 80145fa:	b913      	cbnz	r3, 8014602 <__swsetup_r+0x16>
 80145fc:	4628      	mov	r0, r5
 80145fe:	f000 f985 	bl	801490c <__sinit>
 8014602:	4b2e      	ldr	r3, [pc, #184]	; (80146bc <__swsetup_r+0xd0>)
 8014604:	429c      	cmp	r4, r3
 8014606:	d10f      	bne.n	8014628 <__swsetup_r+0x3c>
 8014608:	686c      	ldr	r4, [r5, #4]
 801460a:	89a3      	ldrh	r3, [r4, #12]
 801460c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014610:	0719      	lsls	r1, r3, #28
 8014612:	d42c      	bmi.n	801466e <__swsetup_r+0x82>
 8014614:	06dd      	lsls	r5, r3, #27
 8014616:	d411      	bmi.n	801463c <__swsetup_r+0x50>
 8014618:	2309      	movs	r3, #9
 801461a:	6033      	str	r3, [r6, #0]
 801461c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014620:	81a3      	strh	r3, [r4, #12]
 8014622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014626:	e03e      	b.n	80146a6 <__swsetup_r+0xba>
 8014628:	4b25      	ldr	r3, [pc, #148]	; (80146c0 <__swsetup_r+0xd4>)
 801462a:	429c      	cmp	r4, r3
 801462c:	d101      	bne.n	8014632 <__swsetup_r+0x46>
 801462e:	68ac      	ldr	r4, [r5, #8]
 8014630:	e7eb      	b.n	801460a <__swsetup_r+0x1e>
 8014632:	4b24      	ldr	r3, [pc, #144]	; (80146c4 <__swsetup_r+0xd8>)
 8014634:	429c      	cmp	r4, r3
 8014636:	bf08      	it	eq
 8014638:	68ec      	ldreq	r4, [r5, #12]
 801463a:	e7e6      	b.n	801460a <__swsetup_r+0x1e>
 801463c:	0758      	lsls	r0, r3, #29
 801463e:	d512      	bpl.n	8014666 <__swsetup_r+0x7a>
 8014640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014642:	b141      	cbz	r1, 8014656 <__swsetup_r+0x6a>
 8014644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014648:	4299      	cmp	r1, r3
 801464a:	d002      	beq.n	8014652 <__swsetup_r+0x66>
 801464c:	4630      	mov	r0, r6
 801464e:	f7ff fcd5 	bl	8013ffc <_free_r>
 8014652:	2300      	movs	r3, #0
 8014654:	6363      	str	r3, [r4, #52]	; 0x34
 8014656:	89a3      	ldrh	r3, [r4, #12]
 8014658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801465c:	81a3      	strh	r3, [r4, #12]
 801465e:	2300      	movs	r3, #0
 8014660:	6063      	str	r3, [r4, #4]
 8014662:	6923      	ldr	r3, [r4, #16]
 8014664:	6023      	str	r3, [r4, #0]
 8014666:	89a3      	ldrh	r3, [r4, #12]
 8014668:	f043 0308 	orr.w	r3, r3, #8
 801466c:	81a3      	strh	r3, [r4, #12]
 801466e:	6923      	ldr	r3, [r4, #16]
 8014670:	b94b      	cbnz	r3, 8014686 <__swsetup_r+0x9a>
 8014672:	89a3      	ldrh	r3, [r4, #12]
 8014674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801467c:	d003      	beq.n	8014686 <__swsetup_r+0x9a>
 801467e:	4621      	mov	r1, r4
 8014680:	4630      	mov	r0, r6
 8014682:	f000 fa09 	bl	8014a98 <__smakebuf_r>
 8014686:	89a0      	ldrh	r0, [r4, #12]
 8014688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801468c:	f010 0301 	ands.w	r3, r0, #1
 8014690:	d00a      	beq.n	80146a8 <__swsetup_r+0xbc>
 8014692:	2300      	movs	r3, #0
 8014694:	60a3      	str	r3, [r4, #8]
 8014696:	6963      	ldr	r3, [r4, #20]
 8014698:	425b      	negs	r3, r3
 801469a:	61a3      	str	r3, [r4, #24]
 801469c:	6923      	ldr	r3, [r4, #16]
 801469e:	b943      	cbnz	r3, 80146b2 <__swsetup_r+0xc6>
 80146a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80146a4:	d1ba      	bne.n	801461c <__swsetup_r+0x30>
 80146a6:	bd70      	pop	{r4, r5, r6, pc}
 80146a8:	0781      	lsls	r1, r0, #30
 80146aa:	bf58      	it	pl
 80146ac:	6963      	ldrpl	r3, [r4, #20]
 80146ae:	60a3      	str	r3, [r4, #8]
 80146b0:	e7f4      	b.n	801469c <__swsetup_r+0xb0>
 80146b2:	2000      	movs	r0, #0
 80146b4:	e7f7      	b.n	80146a6 <__swsetup_r+0xba>
 80146b6:	bf00      	nop
 80146b8:	24000244 	.word	0x24000244
 80146bc:	08016bdc 	.word	0x08016bdc
 80146c0:	08016bfc 	.word	0x08016bfc
 80146c4:	08016bbc 	.word	0x08016bbc

080146c8 <abort>:
 80146c8:	b508      	push	{r3, lr}
 80146ca:	2006      	movs	r0, #6
 80146cc:	f000 fa4c 	bl	8014b68 <raise>
 80146d0:	2001      	movs	r0, #1
 80146d2:	f7f0 fd59 	bl	8005188 <_exit>
	...

080146d8 <__sflush_r>:
 80146d8:	898a      	ldrh	r2, [r1, #12]
 80146da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146de:	4605      	mov	r5, r0
 80146e0:	0710      	lsls	r0, r2, #28
 80146e2:	460c      	mov	r4, r1
 80146e4:	d458      	bmi.n	8014798 <__sflush_r+0xc0>
 80146e6:	684b      	ldr	r3, [r1, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	dc05      	bgt.n	80146f8 <__sflush_r+0x20>
 80146ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	dc02      	bgt.n	80146f8 <__sflush_r+0x20>
 80146f2:	2000      	movs	r0, #0
 80146f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146fa:	2e00      	cmp	r6, #0
 80146fc:	d0f9      	beq.n	80146f2 <__sflush_r+0x1a>
 80146fe:	2300      	movs	r3, #0
 8014700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014704:	682f      	ldr	r7, [r5, #0]
 8014706:	602b      	str	r3, [r5, #0]
 8014708:	d032      	beq.n	8014770 <__sflush_r+0x98>
 801470a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801470c:	89a3      	ldrh	r3, [r4, #12]
 801470e:	075a      	lsls	r2, r3, #29
 8014710:	d505      	bpl.n	801471e <__sflush_r+0x46>
 8014712:	6863      	ldr	r3, [r4, #4]
 8014714:	1ac0      	subs	r0, r0, r3
 8014716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014718:	b10b      	cbz	r3, 801471e <__sflush_r+0x46>
 801471a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801471c:	1ac0      	subs	r0, r0, r3
 801471e:	2300      	movs	r3, #0
 8014720:	4602      	mov	r2, r0
 8014722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014724:	6a21      	ldr	r1, [r4, #32]
 8014726:	4628      	mov	r0, r5
 8014728:	47b0      	blx	r6
 801472a:	1c43      	adds	r3, r0, #1
 801472c:	89a3      	ldrh	r3, [r4, #12]
 801472e:	d106      	bne.n	801473e <__sflush_r+0x66>
 8014730:	6829      	ldr	r1, [r5, #0]
 8014732:	291d      	cmp	r1, #29
 8014734:	d82c      	bhi.n	8014790 <__sflush_r+0xb8>
 8014736:	4a2a      	ldr	r2, [pc, #168]	; (80147e0 <__sflush_r+0x108>)
 8014738:	40ca      	lsrs	r2, r1
 801473a:	07d6      	lsls	r6, r2, #31
 801473c:	d528      	bpl.n	8014790 <__sflush_r+0xb8>
 801473e:	2200      	movs	r2, #0
 8014740:	6062      	str	r2, [r4, #4]
 8014742:	04d9      	lsls	r1, r3, #19
 8014744:	6922      	ldr	r2, [r4, #16]
 8014746:	6022      	str	r2, [r4, #0]
 8014748:	d504      	bpl.n	8014754 <__sflush_r+0x7c>
 801474a:	1c42      	adds	r2, r0, #1
 801474c:	d101      	bne.n	8014752 <__sflush_r+0x7a>
 801474e:	682b      	ldr	r3, [r5, #0]
 8014750:	b903      	cbnz	r3, 8014754 <__sflush_r+0x7c>
 8014752:	6560      	str	r0, [r4, #84]	; 0x54
 8014754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014756:	602f      	str	r7, [r5, #0]
 8014758:	2900      	cmp	r1, #0
 801475a:	d0ca      	beq.n	80146f2 <__sflush_r+0x1a>
 801475c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014760:	4299      	cmp	r1, r3
 8014762:	d002      	beq.n	801476a <__sflush_r+0x92>
 8014764:	4628      	mov	r0, r5
 8014766:	f7ff fc49 	bl	8013ffc <_free_r>
 801476a:	2000      	movs	r0, #0
 801476c:	6360      	str	r0, [r4, #52]	; 0x34
 801476e:	e7c1      	b.n	80146f4 <__sflush_r+0x1c>
 8014770:	6a21      	ldr	r1, [r4, #32]
 8014772:	2301      	movs	r3, #1
 8014774:	4628      	mov	r0, r5
 8014776:	47b0      	blx	r6
 8014778:	1c41      	adds	r1, r0, #1
 801477a:	d1c7      	bne.n	801470c <__sflush_r+0x34>
 801477c:	682b      	ldr	r3, [r5, #0]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d0c4      	beq.n	801470c <__sflush_r+0x34>
 8014782:	2b1d      	cmp	r3, #29
 8014784:	d001      	beq.n	801478a <__sflush_r+0xb2>
 8014786:	2b16      	cmp	r3, #22
 8014788:	d101      	bne.n	801478e <__sflush_r+0xb6>
 801478a:	602f      	str	r7, [r5, #0]
 801478c:	e7b1      	b.n	80146f2 <__sflush_r+0x1a>
 801478e:	89a3      	ldrh	r3, [r4, #12]
 8014790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014794:	81a3      	strh	r3, [r4, #12]
 8014796:	e7ad      	b.n	80146f4 <__sflush_r+0x1c>
 8014798:	690f      	ldr	r7, [r1, #16]
 801479a:	2f00      	cmp	r7, #0
 801479c:	d0a9      	beq.n	80146f2 <__sflush_r+0x1a>
 801479e:	0793      	lsls	r3, r2, #30
 80147a0:	680e      	ldr	r6, [r1, #0]
 80147a2:	bf08      	it	eq
 80147a4:	694b      	ldreq	r3, [r1, #20]
 80147a6:	600f      	str	r7, [r1, #0]
 80147a8:	bf18      	it	ne
 80147aa:	2300      	movne	r3, #0
 80147ac:	eba6 0807 	sub.w	r8, r6, r7
 80147b0:	608b      	str	r3, [r1, #8]
 80147b2:	f1b8 0f00 	cmp.w	r8, #0
 80147b6:	dd9c      	ble.n	80146f2 <__sflush_r+0x1a>
 80147b8:	6a21      	ldr	r1, [r4, #32]
 80147ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80147bc:	4643      	mov	r3, r8
 80147be:	463a      	mov	r2, r7
 80147c0:	4628      	mov	r0, r5
 80147c2:	47b0      	blx	r6
 80147c4:	2800      	cmp	r0, #0
 80147c6:	dc06      	bgt.n	80147d6 <__sflush_r+0xfe>
 80147c8:	89a3      	ldrh	r3, [r4, #12]
 80147ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147ce:	81a3      	strh	r3, [r4, #12]
 80147d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147d4:	e78e      	b.n	80146f4 <__sflush_r+0x1c>
 80147d6:	4407      	add	r7, r0
 80147d8:	eba8 0800 	sub.w	r8, r8, r0
 80147dc:	e7e9      	b.n	80147b2 <__sflush_r+0xda>
 80147de:	bf00      	nop
 80147e0:	20400001 	.word	0x20400001

080147e4 <_fflush_r>:
 80147e4:	b538      	push	{r3, r4, r5, lr}
 80147e6:	690b      	ldr	r3, [r1, #16]
 80147e8:	4605      	mov	r5, r0
 80147ea:	460c      	mov	r4, r1
 80147ec:	b913      	cbnz	r3, 80147f4 <_fflush_r+0x10>
 80147ee:	2500      	movs	r5, #0
 80147f0:	4628      	mov	r0, r5
 80147f2:	bd38      	pop	{r3, r4, r5, pc}
 80147f4:	b118      	cbz	r0, 80147fe <_fflush_r+0x1a>
 80147f6:	6983      	ldr	r3, [r0, #24]
 80147f8:	b90b      	cbnz	r3, 80147fe <_fflush_r+0x1a>
 80147fa:	f000 f887 	bl	801490c <__sinit>
 80147fe:	4b14      	ldr	r3, [pc, #80]	; (8014850 <_fflush_r+0x6c>)
 8014800:	429c      	cmp	r4, r3
 8014802:	d11b      	bne.n	801483c <_fflush_r+0x58>
 8014804:	686c      	ldr	r4, [r5, #4]
 8014806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d0ef      	beq.n	80147ee <_fflush_r+0xa>
 801480e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014810:	07d0      	lsls	r0, r2, #31
 8014812:	d404      	bmi.n	801481e <_fflush_r+0x3a>
 8014814:	0599      	lsls	r1, r3, #22
 8014816:	d402      	bmi.n	801481e <_fflush_r+0x3a>
 8014818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801481a:	f000 f915 	bl	8014a48 <__retarget_lock_acquire_recursive>
 801481e:	4628      	mov	r0, r5
 8014820:	4621      	mov	r1, r4
 8014822:	f7ff ff59 	bl	80146d8 <__sflush_r>
 8014826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014828:	07da      	lsls	r2, r3, #31
 801482a:	4605      	mov	r5, r0
 801482c:	d4e0      	bmi.n	80147f0 <_fflush_r+0xc>
 801482e:	89a3      	ldrh	r3, [r4, #12]
 8014830:	059b      	lsls	r3, r3, #22
 8014832:	d4dd      	bmi.n	80147f0 <_fflush_r+0xc>
 8014834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014836:	f000 f908 	bl	8014a4a <__retarget_lock_release_recursive>
 801483a:	e7d9      	b.n	80147f0 <_fflush_r+0xc>
 801483c:	4b05      	ldr	r3, [pc, #20]	; (8014854 <_fflush_r+0x70>)
 801483e:	429c      	cmp	r4, r3
 8014840:	d101      	bne.n	8014846 <_fflush_r+0x62>
 8014842:	68ac      	ldr	r4, [r5, #8]
 8014844:	e7df      	b.n	8014806 <_fflush_r+0x22>
 8014846:	4b04      	ldr	r3, [pc, #16]	; (8014858 <_fflush_r+0x74>)
 8014848:	429c      	cmp	r4, r3
 801484a:	bf08      	it	eq
 801484c:	68ec      	ldreq	r4, [r5, #12]
 801484e:	e7da      	b.n	8014806 <_fflush_r+0x22>
 8014850:	08016bdc 	.word	0x08016bdc
 8014854:	08016bfc 	.word	0x08016bfc
 8014858:	08016bbc 	.word	0x08016bbc

0801485c <std>:
 801485c:	2300      	movs	r3, #0
 801485e:	b510      	push	{r4, lr}
 8014860:	4604      	mov	r4, r0
 8014862:	e9c0 3300 	strd	r3, r3, [r0]
 8014866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801486a:	6083      	str	r3, [r0, #8]
 801486c:	8181      	strh	r1, [r0, #12]
 801486e:	6643      	str	r3, [r0, #100]	; 0x64
 8014870:	81c2      	strh	r2, [r0, #14]
 8014872:	6183      	str	r3, [r0, #24]
 8014874:	4619      	mov	r1, r3
 8014876:	2208      	movs	r2, #8
 8014878:	305c      	adds	r0, #92	; 0x5c
 801487a:	f7fd fdc5 	bl	8012408 <memset>
 801487e:	4b05      	ldr	r3, [pc, #20]	; (8014894 <std+0x38>)
 8014880:	6263      	str	r3, [r4, #36]	; 0x24
 8014882:	4b05      	ldr	r3, [pc, #20]	; (8014898 <std+0x3c>)
 8014884:	62a3      	str	r3, [r4, #40]	; 0x28
 8014886:	4b05      	ldr	r3, [pc, #20]	; (801489c <std+0x40>)
 8014888:	62e3      	str	r3, [r4, #44]	; 0x2c
 801488a:	4b05      	ldr	r3, [pc, #20]	; (80148a0 <std+0x44>)
 801488c:	6224      	str	r4, [r4, #32]
 801488e:	6323      	str	r3, [r4, #48]	; 0x30
 8014890:	bd10      	pop	{r4, pc}
 8014892:	bf00      	nop
 8014894:	08014ba1 	.word	0x08014ba1
 8014898:	08014bc3 	.word	0x08014bc3
 801489c:	08014bfb 	.word	0x08014bfb
 80148a0:	08014c1f 	.word	0x08014c1f

080148a4 <_cleanup_r>:
 80148a4:	4901      	ldr	r1, [pc, #4]	; (80148ac <_cleanup_r+0x8>)
 80148a6:	f000 b8af 	b.w	8014a08 <_fwalk_reent>
 80148aa:	bf00      	nop
 80148ac:	080147e5 	.word	0x080147e5

080148b0 <__sfmoreglue>:
 80148b0:	b570      	push	{r4, r5, r6, lr}
 80148b2:	2268      	movs	r2, #104	; 0x68
 80148b4:	1e4d      	subs	r5, r1, #1
 80148b6:	4355      	muls	r5, r2
 80148b8:	460e      	mov	r6, r1
 80148ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80148be:	f7ff fc09 	bl	80140d4 <_malloc_r>
 80148c2:	4604      	mov	r4, r0
 80148c4:	b140      	cbz	r0, 80148d8 <__sfmoreglue+0x28>
 80148c6:	2100      	movs	r1, #0
 80148c8:	e9c0 1600 	strd	r1, r6, [r0]
 80148cc:	300c      	adds	r0, #12
 80148ce:	60a0      	str	r0, [r4, #8]
 80148d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80148d4:	f7fd fd98 	bl	8012408 <memset>
 80148d8:	4620      	mov	r0, r4
 80148da:	bd70      	pop	{r4, r5, r6, pc}

080148dc <__sfp_lock_acquire>:
 80148dc:	4801      	ldr	r0, [pc, #4]	; (80148e4 <__sfp_lock_acquire+0x8>)
 80148de:	f000 b8b3 	b.w	8014a48 <__retarget_lock_acquire_recursive>
 80148e2:	bf00      	nop
 80148e4:	24001751 	.word	0x24001751

080148e8 <__sfp_lock_release>:
 80148e8:	4801      	ldr	r0, [pc, #4]	; (80148f0 <__sfp_lock_release+0x8>)
 80148ea:	f000 b8ae 	b.w	8014a4a <__retarget_lock_release_recursive>
 80148ee:	bf00      	nop
 80148f0:	24001751 	.word	0x24001751

080148f4 <__sinit_lock_acquire>:
 80148f4:	4801      	ldr	r0, [pc, #4]	; (80148fc <__sinit_lock_acquire+0x8>)
 80148f6:	f000 b8a7 	b.w	8014a48 <__retarget_lock_acquire_recursive>
 80148fa:	bf00      	nop
 80148fc:	24001752 	.word	0x24001752

08014900 <__sinit_lock_release>:
 8014900:	4801      	ldr	r0, [pc, #4]	; (8014908 <__sinit_lock_release+0x8>)
 8014902:	f000 b8a2 	b.w	8014a4a <__retarget_lock_release_recursive>
 8014906:	bf00      	nop
 8014908:	24001752 	.word	0x24001752

0801490c <__sinit>:
 801490c:	b510      	push	{r4, lr}
 801490e:	4604      	mov	r4, r0
 8014910:	f7ff fff0 	bl	80148f4 <__sinit_lock_acquire>
 8014914:	69a3      	ldr	r3, [r4, #24]
 8014916:	b11b      	cbz	r3, 8014920 <__sinit+0x14>
 8014918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801491c:	f7ff bff0 	b.w	8014900 <__sinit_lock_release>
 8014920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014924:	6523      	str	r3, [r4, #80]	; 0x50
 8014926:	4b13      	ldr	r3, [pc, #76]	; (8014974 <__sinit+0x68>)
 8014928:	4a13      	ldr	r2, [pc, #76]	; (8014978 <__sinit+0x6c>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	62a2      	str	r2, [r4, #40]	; 0x28
 801492e:	42a3      	cmp	r3, r4
 8014930:	bf04      	itt	eq
 8014932:	2301      	moveq	r3, #1
 8014934:	61a3      	streq	r3, [r4, #24]
 8014936:	4620      	mov	r0, r4
 8014938:	f000 f820 	bl	801497c <__sfp>
 801493c:	6060      	str	r0, [r4, #4]
 801493e:	4620      	mov	r0, r4
 8014940:	f000 f81c 	bl	801497c <__sfp>
 8014944:	60a0      	str	r0, [r4, #8]
 8014946:	4620      	mov	r0, r4
 8014948:	f000 f818 	bl	801497c <__sfp>
 801494c:	2200      	movs	r2, #0
 801494e:	60e0      	str	r0, [r4, #12]
 8014950:	2104      	movs	r1, #4
 8014952:	6860      	ldr	r0, [r4, #4]
 8014954:	f7ff ff82 	bl	801485c <std>
 8014958:	68a0      	ldr	r0, [r4, #8]
 801495a:	2201      	movs	r2, #1
 801495c:	2109      	movs	r1, #9
 801495e:	f7ff ff7d 	bl	801485c <std>
 8014962:	68e0      	ldr	r0, [r4, #12]
 8014964:	2202      	movs	r2, #2
 8014966:	2112      	movs	r1, #18
 8014968:	f7ff ff78 	bl	801485c <std>
 801496c:	2301      	movs	r3, #1
 801496e:	61a3      	str	r3, [r4, #24]
 8014970:	e7d2      	b.n	8014918 <__sinit+0xc>
 8014972:	bf00      	nop
 8014974:	08016840 	.word	0x08016840
 8014978:	080148a5 	.word	0x080148a5

0801497c <__sfp>:
 801497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801497e:	4607      	mov	r7, r0
 8014980:	f7ff ffac 	bl	80148dc <__sfp_lock_acquire>
 8014984:	4b1e      	ldr	r3, [pc, #120]	; (8014a00 <__sfp+0x84>)
 8014986:	681e      	ldr	r6, [r3, #0]
 8014988:	69b3      	ldr	r3, [r6, #24]
 801498a:	b913      	cbnz	r3, 8014992 <__sfp+0x16>
 801498c:	4630      	mov	r0, r6
 801498e:	f7ff ffbd 	bl	801490c <__sinit>
 8014992:	3648      	adds	r6, #72	; 0x48
 8014994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014998:	3b01      	subs	r3, #1
 801499a:	d503      	bpl.n	80149a4 <__sfp+0x28>
 801499c:	6833      	ldr	r3, [r6, #0]
 801499e:	b30b      	cbz	r3, 80149e4 <__sfp+0x68>
 80149a0:	6836      	ldr	r6, [r6, #0]
 80149a2:	e7f7      	b.n	8014994 <__sfp+0x18>
 80149a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80149a8:	b9d5      	cbnz	r5, 80149e0 <__sfp+0x64>
 80149aa:	4b16      	ldr	r3, [pc, #88]	; (8014a04 <__sfp+0x88>)
 80149ac:	60e3      	str	r3, [r4, #12]
 80149ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80149b2:	6665      	str	r5, [r4, #100]	; 0x64
 80149b4:	f000 f847 	bl	8014a46 <__retarget_lock_init_recursive>
 80149b8:	f7ff ff96 	bl	80148e8 <__sfp_lock_release>
 80149bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80149c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80149c4:	6025      	str	r5, [r4, #0]
 80149c6:	61a5      	str	r5, [r4, #24]
 80149c8:	2208      	movs	r2, #8
 80149ca:	4629      	mov	r1, r5
 80149cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80149d0:	f7fd fd1a 	bl	8012408 <memset>
 80149d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80149d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80149dc:	4620      	mov	r0, r4
 80149de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149e0:	3468      	adds	r4, #104	; 0x68
 80149e2:	e7d9      	b.n	8014998 <__sfp+0x1c>
 80149e4:	2104      	movs	r1, #4
 80149e6:	4638      	mov	r0, r7
 80149e8:	f7ff ff62 	bl	80148b0 <__sfmoreglue>
 80149ec:	4604      	mov	r4, r0
 80149ee:	6030      	str	r0, [r6, #0]
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d1d5      	bne.n	80149a0 <__sfp+0x24>
 80149f4:	f7ff ff78 	bl	80148e8 <__sfp_lock_release>
 80149f8:	230c      	movs	r3, #12
 80149fa:	603b      	str	r3, [r7, #0]
 80149fc:	e7ee      	b.n	80149dc <__sfp+0x60>
 80149fe:	bf00      	nop
 8014a00:	08016840 	.word	0x08016840
 8014a04:	ffff0001 	.word	0xffff0001

08014a08 <_fwalk_reent>:
 8014a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a0c:	4606      	mov	r6, r0
 8014a0e:	4688      	mov	r8, r1
 8014a10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a14:	2700      	movs	r7, #0
 8014a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8014a1e:	d505      	bpl.n	8014a2c <_fwalk_reent+0x24>
 8014a20:	6824      	ldr	r4, [r4, #0]
 8014a22:	2c00      	cmp	r4, #0
 8014a24:	d1f7      	bne.n	8014a16 <_fwalk_reent+0xe>
 8014a26:	4638      	mov	r0, r7
 8014a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a2c:	89ab      	ldrh	r3, [r5, #12]
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d907      	bls.n	8014a42 <_fwalk_reent+0x3a>
 8014a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a36:	3301      	adds	r3, #1
 8014a38:	d003      	beq.n	8014a42 <_fwalk_reent+0x3a>
 8014a3a:	4629      	mov	r1, r5
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	47c0      	blx	r8
 8014a40:	4307      	orrs	r7, r0
 8014a42:	3568      	adds	r5, #104	; 0x68
 8014a44:	e7e9      	b.n	8014a1a <_fwalk_reent+0x12>

08014a46 <__retarget_lock_init_recursive>:
 8014a46:	4770      	bx	lr

08014a48 <__retarget_lock_acquire_recursive>:
 8014a48:	4770      	bx	lr

08014a4a <__retarget_lock_release_recursive>:
 8014a4a:	4770      	bx	lr

08014a4c <__swhatbuf_r>:
 8014a4c:	b570      	push	{r4, r5, r6, lr}
 8014a4e:	460e      	mov	r6, r1
 8014a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a54:	2900      	cmp	r1, #0
 8014a56:	b096      	sub	sp, #88	; 0x58
 8014a58:	4614      	mov	r4, r2
 8014a5a:	461d      	mov	r5, r3
 8014a5c:	da08      	bge.n	8014a70 <__swhatbuf_r+0x24>
 8014a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014a62:	2200      	movs	r2, #0
 8014a64:	602a      	str	r2, [r5, #0]
 8014a66:	061a      	lsls	r2, r3, #24
 8014a68:	d410      	bmi.n	8014a8c <__swhatbuf_r+0x40>
 8014a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a6e:	e00e      	b.n	8014a8e <__swhatbuf_r+0x42>
 8014a70:	466a      	mov	r2, sp
 8014a72:	f000 f8fb 	bl	8014c6c <_fstat_r>
 8014a76:	2800      	cmp	r0, #0
 8014a78:	dbf1      	blt.n	8014a5e <__swhatbuf_r+0x12>
 8014a7a:	9a01      	ldr	r2, [sp, #4]
 8014a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a84:	425a      	negs	r2, r3
 8014a86:	415a      	adcs	r2, r3
 8014a88:	602a      	str	r2, [r5, #0]
 8014a8a:	e7ee      	b.n	8014a6a <__swhatbuf_r+0x1e>
 8014a8c:	2340      	movs	r3, #64	; 0x40
 8014a8e:	2000      	movs	r0, #0
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	b016      	add	sp, #88	; 0x58
 8014a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08014a98 <__smakebuf_r>:
 8014a98:	898b      	ldrh	r3, [r1, #12]
 8014a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a9c:	079d      	lsls	r5, r3, #30
 8014a9e:	4606      	mov	r6, r0
 8014aa0:	460c      	mov	r4, r1
 8014aa2:	d507      	bpl.n	8014ab4 <__smakebuf_r+0x1c>
 8014aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014aa8:	6023      	str	r3, [r4, #0]
 8014aaa:	6123      	str	r3, [r4, #16]
 8014aac:	2301      	movs	r3, #1
 8014aae:	6163      	str	r3, [r4, #20]
 8014ab0:	b002      	add	sp, #8
 8014ab2:	bd70      	pop	{r4, r5, r6, pc}
 8014ab4:	ab01      	add	r3, sp, #4
 8014ab6:	466a      	mov	r2, sp
 8014ab8:	f7ff ffc8 	bl	8014a4c <__swhatbuf_r>
 8014abc:	9900      	ldr	r1, [sp, #0]
 8014abe:	4605      	mov	r5, r0
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	f7ff fb07 	bl	80140d4 <_malloc_r>
 8014ac6:	b948      	cbnz	r0, 8014adc <__smakebuf_r+0x44>
 8014ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014acc:	059a      	lsls	r2, r3, #22
 8014ace:	d4ef      	bmi.n	8014ab0 <__smakebuf_r+0x18>
 8014ad0:	f023 0303 	bic.w	r3, r3, #3
 8014ad4:	f043 0302 	orr.w	r3, r3, #2
 8014ad8:	81a3      	strh	r3, [r4, #12]
 8014ada:	e7e3      	b.n	8014aa4 <__smakebuf_r+0xc>
 8014adc:	4b0d      	ldr	r3, [pc, #52]	; (8014b14 <__smakebuf_r+0x7c>)
 8014ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ae0:	89a3      	ldrh	r3, [r4, #12]
 8014ae2:	6020      	str	r0, [r4, #0]
 8014ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ae8:	81a3      	strh	r3, [r4, #12]
 8014aea:	9b00      	ldr	r3, [sp, #0]
 8014aec:	6163      	str	r3, [r4, #20]
 8014aee:	9b01      	ldr	r3, [sp, #4]
 8014af0:	6120      	str	r0, [r4, #16]
 8014af2:	b15b      	cbz	r3, 8014b0c <__smakebuf_r+0x74>
 8014af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014af8:	4630      	mov	r0, r6
 8014afa:	f000 f8c9 	bl	8014c90 <_isatty_r>
 8014afe:	b128      	cbz	r0, 8014b0c <__smakebuf_r+0x74>
 8014b00:	89a3      	ldrh	r3, [r4, #12]
 8014b02:	f023 0303 	bic.w	r3, r3, #3
 8014b06:	f043 0301 	orr.w	r3, r3, #1
 8014b0a:	81a3      	strh	r3, [r4, #12]
 8014b0c:	89a0      	ldrh	r0, [r4, #12]
 8014b0e:	4305      	orrs	r5, r0
 8014b10:	81a5      	strh	r5, [r4, #12]
 8014b12:	e7cd      	b.n	8014ab0 <__smakebuf_r+0x18>
 8014b14:	080148a5 	.word	0x080148a5

08014b18 <_raise_r>:
 8014b18:	291f      	cmp	r1, #31
 8014b1a:	b538      	push	{r3, r4, r5, lr}
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	460d      	mov	r5, r1
 8014b20:	d904      	bls.n	8014b2c <_raise_r+0x14>
 8014b22:	2316      	movs	r3, #22
 8014b24:	6003      	str	r3, [r0, #0]
 8014b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b2a:	bd38      	pop	{r3, r4, r5, pc}
 8014b2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b2e:	b112      	cbz	r2, 8014b36 <_raise_r+0x1e>
 8014b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b34:	b94b      	cbnz	r3, 8014b4a <_raise_r+0x32>
 8014b36:	4620      	mov	r0, r4
 8014b38:	f000 f830 	bl	8014b9c <_getpid_r>
 8014b3c:	462a      	mov	r2, r5
 8014b3e:	4601      	mov	r1, r0
 8014b40:	4620      	mov	r0, r4
 8014b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b46:	f000 b817 	b.w	8014b78 <_kill_r>
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d00a      	beq.n	8014b64 <_raise_r+0x4c>
 8014b4e:	1c59      	adds	r1, r3, #1
 8014b50:	d103      	bne.n	8014b5a <_raise_r+0x42>
 8014b52:	2316      	movs	r3, #22
 8014b54:	6003      	str	r3, [r0, #0]
 8014b56:	2001      	movs	r0, #1
 8014b58:	e7e7      	b.n	8014b2a <_raise_r+0x12>
 8014b5a:	2400      	movs	r4, #0
 8014b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014b60:	4628      	mov	r0, r5
 8014b62:	4798      	blx	r3
 8014b64:	2000      	movs	r0, #0
 8014b66:	e7e0      	b.n	8014b2a <_raise_r+0x12>

08014b68 <raise>:
 8014b68:	4b02      	ldr	r3, [pc, #8]	; (8014b74 <raise+0xc>)
 8014b6a:	4601      	mov	r1, r0
 8014b6c:	6818      	ldr	r0, [r3, #0]
 8014b6e:	f7ff bfd3 	b.w	8014b18 <_raise_r>
 8014b72:	bf00      	nop
 8014b74:	24000244 	.word	0x24000244

08014b78 <_kill_r>:
 8014b78:	b538      	push	{r3, r4, r5, lr}
 8014b7a:	4d07      	ldr	r5, [pc, #28]	; (8014b98 <_kill_r+0x20>)
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	4604      	mov	r4, r0
 8014b80:	4608      	mov	r0, r1
 8014b82:	4611      	mov	r1, r2
 8014b84:	602b      	str	r3, [r5, #0]
 8014b86:	f7f0 faef 	bl	8005168 <_kill>
 8014b8a:	1c43      	adds	r3, r0, #1
 8014b8c:	d102      	bne.n	8014b94 <_kill_r+0x1c>
 8014b8e:	682b      	ldr	r3, [r5, #0]
 8014b90:	b103      	cbz	r3, 8014b94 <_kill_r+0x1c>
 8014b92:	6023      	str	r3, [r4, #0]
 8014b94:	bd38      	pop	{r3, r4, r5, pc}
 8014b96:	bf00      	nop
 8014b98:	2400174c 	.word	0x2400174c

08014b9c <_getpid_r>:
 8014b9c:	f7f0 badc 	b.w	8005158 <_getpid>

08014ba0 <__sread>:
 8014ba0:	b510      	push	{r4, lr}
 8014ba2:	460c      	mov	r4, r1
 8014ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ba8:	f000 f894 	bl	8014cd4 <_read_r>
 8014bac:	2800      	cmp	r0, #0
 8014bae:	bfab      	itete	ge
 8014bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8014bb4:	181b      	addge	r3, r3, r0
 8014bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bba:	bfac      	ite	ge
 8014bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8014bbe:	81a3      	strhlt	r3, [r4, #12]
 8014bc0:	bd10      	pop	{r4, pc}

08014bc2 <__swrite>:
 8014bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc6:	461f      	mov	r7, r3
 8014bc8:	898b      	ldrh	r3, [r1, #12]
 8014bca:	05db      	lsls	r3, r3, #23
 8014bcc:	4605      	mov	r5, r0
 8014bce:	460c      	mov	r4, r1
 8014bd0:	4616      	mov	r6, r2
 8014bd2:	d505      	bpl.n	8014be0 <__swrite+0x1e>
 8014bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bd8:	2302      	movs	r3, #2
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f000 f868 	bl	8014cb0 <_lseek_r>
 8014be0:	89a3      	ldrh	r3, [r4, #12]
 8014be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bea:	81a3      	strh	r3, [r4, #12]
 8014bec:	4632      	mov	r2, r6
 8014bee:	463b      	mov	r3, r7
 8014bf0:	4628      	mov	r0, r5
 8014bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf6:	f000 b817 	b.w	8014c28 <_write_r>

08014bfa <__sseek>:
 8014bfa:	b510      	push	{r4, lr}
 8014bfc:	460c      	mov	r4, r1
 8014bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c02:	f000 f855 	bl	8014cb0 <_lseek_r>
 8014c06:	1c43      	adds	r3, r0, #1
 8014c08:	89a3      	ldrh	r3, [r4, #12]
 8014c0a:	bf15      	itete	ne
 8014c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c16:	81a3      	strheq	r3, [r4, #12]
 8014c18:	bf18      	it	ne
 8014c1a:	81a3      	strhne	r3, [r4, #12]
 8014c1c:	bd10      	pop	{r4, pc}

08014c1e <__sclose>:
 8014c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c22:	f000 b813 	b.w	8014c4c <_close_r>
	...

08014c28 <_write_r>:
 8014c28:	b538      	push	{r3, r4, r5, lr}
 8014c2a:	4d07      	ldr	r5, [pc, #28]	; (8014c48 <_write_r+0x20>)
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	4608      	mov	r0, r1
 8014c30:	4611      	mov	r1, r2
 8014c32:	2200      	movs	r2, #0
 8014c34:	602a      	str	r2, [r5, #0]
 8014c36:	461a      	mov	r2, r3
 8014c38:	f7f0 facd 	bl	80051d6 <_write>
 8014c3c:	1c43      	adds	r3, r0, #1
 8014c3e:	d102      	bne.n	8014c46 <_write_r+0x1e>
 8014c40:	682b      	ldr	r3, [r5, #0]
 8014c42:	b103      	cbz	r3, 8014c46 <_write_r+0x1e>
 8014c44:	6023      	str	r3, [r4, #0]
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	2400174c 	.word	0x2400174c

08014c4c <_close_r>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	4d06      	ldr	r5, [pc, #24]	; (8014c68 <_close_r+0x1c>)
 8014c50:	2300      	movs	r3, #0
 8014c52:	4604      	mov	r4, r0
 8014c54:	4608      	mov	r0, r1
 8014c56:	602b      	str	r3, [r5, #0]
 8014c58:	f7f0 fad9 	bl	800520e <_close>
 8014c5c:	1c43      	adds	r3, r0, #1
 8014c5e:	d102      	bne.n	8014c66 <_close_r+0x1a>
 8014c60:	682b      	ldr	r3, [r5, #0]
 8014c62:	b103      	cbz	r3, 8014c66 <_close_r+0x1a>
 8014c64:	6023      	str	r3, [r4, #0]
 8014c66:	bd38      	pop	{r3, r4, r5, pc}
 8014c68:	2400174c 	.word	0x2400174c

08014c6c <_fstat_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	4d07      	ldr	r5, [pc, #28]	; (8014c8c <_fstat_r+0x20>)
 8014c70:	2300      	movs	r3, #0
 8014c72:	4604      	mov	r4, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	4611      	mov	r1, r2
 8014c78:	602b      	str	r3, [r5, #0]
 8014c7a:	f7f0 fad4 	bl	8005226 <_fstat>
 8014c7e:	1c43      	adds	r3, r0, #1
 8014c80:	d102      	bne.n	8014c88 <_fstat_r+0x1c>
 8014c82:	682b      	ldr	r3, [r5, #0]
 8014c84:	b103      	cbz	r3, 8014c88 <_fstat_r+0x1c>
 8014c86:	6023      	str	r3, [r4, #0]
 8014c88:	bd38      	pop	{r3, r4, r5, pc}
 8014c8a:	bf00      	nop
 8014c8c:	2400174c 	.word	0x2400174c

08014c90 <_isatty_r>:
 8014c90:	b538      	push	{r3, r4, r5, lr}
 8014c92:	4d06      	ldr	r5, [pc, #24]	; (8014cac <_isatty_r+0x1c>)
 8014c94:	2300      	movs	r3, #0
 8014c96:	4604      	mov	r4, r0
 8014c98:	4608      	mov	r0, r1
 8014c9a:	602b      	str	r3, [r5, #0]
 8014c9c:	f7f0 fad3 	bl	8005246 <_isatty>
 8014ca0:	1c43      	adds	r3, r0, #1
 8014ca2:	d102      	bne.n	8014caa <_isatty_r+0x1a>
 8014ca4:	682b      	ldr	r3, [r5, #0]
 8014ca6:	b103      	cbz	r3, 8014caa <_isatty_r+0x1a>
 8014ca8:	6023      	str	r3, [r4, #0]
 8014caa:	bd38      	pop	{r3, r4, r5, pc}
 8014cac:	2400174c 	.word	0x2400174c

08014cb0 <_lseek_r>:
 8014cb0:	b538      	push	{r3, r4, r5, lr}
 8014cb2:	4d07      	ldr	r5, [pc, #28]	; (8014cd0 <_lseek_r+0x20>)
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	4608      	mov	r0, r1
 8014cb8:	4611      	mov	r1, r2
 8014cba:	2200      	movs	r2, #0
 8014cbc:	602a      	str	r2, [r5, #0]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	f7f0 facc 	bl	800525c <_lseek>
 8014cc4:	1c43      	adds	r3, r0, #1
 8014cc6:	d102      	bne.n	8014cce <_lseek_r+0x1e>
 8014cc8:	682b      	ldr	r3, [r5, #0]
 8014cca:	b103      	cbz	r3, 8014cce <_lseek_r+0x1e>
 8014ccc:	6023      	str	r3, [r4, #0]
 8014cce:	bd38      	pop	{r3, r4, r5, pc}
 8014cd0:	2400174c 	.word	0x2400174c

08014cd4 <_read_r>:
 8014cd4:	b538      	push	{r3, r4, r5, lr}
 8014cd6:	4d07      	ldr	r5, [pc, #28]	; (8014cf4 <_read_r+0x20>)
 8014cd8:	4604      	mov	r4, r0
 8014cda:	4608      	mov	r0, r1
 8014cdc:	4611      	mov	r1, r2
 8014cde:	2200      	movs	r2, #0
 8014ce0:	602a      	str	r2, [r5, #0]
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	f7f0 fa5a 	bl	800519c <_read>
 8014ce8:	1c43      	adds	r3, r0, #1
 8014cea:	d102      	bne.n	8014cf2 <_read_r+0x1e>
 8014cec:	682b      	ldr	r3, [r5, #0]
 8014cee:	b103      	cbz	r3, 8014cf2 <_read_r+0x1e>
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	bd38      	pop	{r3, r4, r5, pc}
 8014cf4:	2400174c 	.word	0x2400174c

08014cf8 <_init>:
 8014cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cfa:	bf00      	nop
 8014cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cfe:	bc08      	pop	{r3}
 8014d00:	469e      	mov	lr, r3
 8014d02:	4770      	bx	lr

08014d04 <_fini>:
 8014d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d06:	bf00      	nop
 8014d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d0a:	bc08      	pop	{r3}
 8014d0c:	469e      	mov	lr, r3
 8014d0e:	4770      	bx	lr
