
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d820  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800dac0  0800dac0  0001dac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800deec  0800deec  0001deec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800def4  0800def4  0001def4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800def8  0800def8  0001def8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0800defc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000644  200001e4  0800e0e0  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000828  0800e0e0  00020828  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023c25  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003998  00000000  00000000  00043e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001430  00000000  00000000  000477d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001330  00000000  00000000  00048c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d9b  00000000  00000000  00049f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019b82  00000000  00000000  00082ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c26  00000000  00000000  0009c84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00204473  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000644c  00000000  00000000  002044c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e4 	.word	0x200001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800daa8 	.word	0x0800daa8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e8 	.word	0x200001e8
 80002dc:	0800daa8 	.word	0x0800daa8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f001 feee 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f894 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 fda8 	bl	80011e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000698:	f000 fd5e 	bl	8001158 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800069c:	f000 fd10 	bl	80010c0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006a0:	f000 fa2e 	bl	8000b00 <MX_TIM2_Init>
  MX_UART4_Init();
 80006a4:	f000 fcc0 	bl	8001028 <MX_UART4_Init>
  MX_TIM4_Init();
 80006a8:	f000 fb1a 	bl	8000ce0 <MX_TIM4_Init>
  MX_SPI3_Init();
 80006ac:	f000 f924 	bl	80008f8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006b0:	f000 f978 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006b4:	f000 fa9c 	bl	8000bf0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006b8:	f000 fb8a 	bl	8000dd0 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006bc:	f000 fc10 	bl	8000ee0 <MX_TIM15_Init>
  MX_TIM12_Init();
 80006c0:	f000 fbd4 	bl	8000e6c <MX_TIM12_Init>
  MX_CRC_Init();
 80006c4:	f000 f8f6 	bl	80008b4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t encoder_address[5] = {0xA4, 0xB4, 0xC4, 0xD4, 0x54};
//  uint16_t abs_position = 0;

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2101      	movs	r1, #1
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <main+0xf4>)
 80006ce:	f004 fd5d 	bl	800518c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2102      	movs	r1, #2
 80006d6:	482a      	ldr	r0, [pc, #168]	; (8000780 <main+0xf8>)
 80006d8:	f004 fd58 	bl	800518c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e2:	4826      	ldr	r0, [pc, #152]	; (800077c <main+0xf4>)
 80006e4:	f004 fd52 	bl	800518c <HAL_GPIO_WritePin>

//  HAL_TIM_Base_Start_IT(&htim5);
  HAL_TIM_Base_Start_IT(&htim12);
 80006e8:	4826      	ldr	r0, [pc, #152]	; (8000784 <main+0xfc>)
 80006ea:	f007 fa2f 	bl	8007b4c <HAL_TIM_Base_Start_IT>
  TIM1->CCR2 = 0;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <main+0x100>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	2200      	movs	r2, #0
 80006fa:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR1 = 0;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <main+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR3 = 0;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <main+0x108>)
 8000704:	2200      	movs	r2, #0
 8000706:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM15->CCR2 = 0;
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <main+0x10c>)
 800070a:	2200      	movs	r2, #0
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800070e:	2104      	movs	r1, #4
 8000710:	4821      	ldr	r0, [pc, #132]	; (8000798 <main+0x110>)
 8000712:	f007 fb1b 	bl	8007d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000716:	2108      	movs	r1, #8
 8000718:	4820      	ldr	r0, [pc, #128]	; (800079c <main+0x114>)
 800071a:	f007 fb17 	bl	8007d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800071e:	2100      	movs	r1, #0
 8000720:	481f      	ldr	r0, [pc, #124]	; (80007a0 <main+0x118>)
 8000722:	f007 fb13 	bl	8007d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000726:	2108      	movs	r1, #8
 8000728:	481e      	ldr	r0, [pc, #120]	; (80007a4 <main+0x11c>)
 800072a:	f007 fb0f 	bl	8007d4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800072e:	2104      	movs	r1, #4
 8000730:	481d      	ldr	r0, [pc, #116]	; (80007a8 <main+0x120>)
 8000732:	f007 fb0b 	bl	8007d4c <HAL_TIM_PWM_Start>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <main+0x124>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <main+0x124>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f042 0220 	orr.w	r2, r2, #32
 8000744:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0x124>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0x124>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000754:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000756:	2204      	movs	r2, #4
 8000758:	4915      	ldr	r1, [pc, #84]	; (80007b0 <main+0x128>)
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0x124>)
 800075c:	f008 fe16 	bl	800938c <HAL_UART_Receive_IT>
//	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
//	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	  StepDriveRad(STEPJ3, 7.00);
//	  HAL_Delay(5000);
	  printf("%.3f\n", rad);
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <main+0x12c>)
 8000762:	edd3 7a00 	vldr	s15, [r3]
 8000766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800076a:	ec53 2b17 	vmov	r2, r3, d7
 800076e:	4812      	ldr	r0, [pc, #72]	; (80007b8 <main+0x130>)
 8000770:	f00b f984 	bl	800ba7c <iprintf>
	  HAL_Delay(100);
 8000774:	2064      	movs	r0, #100	; 0x64
 8000776:	f001 ff0b 	bl	8002590 <HAL_Delay>
	  printf("%.3f\n", rad);
 800077a:	e7f1      	b.n	8000760 <main+0xd8>
 800077c:	58020400 	.word	0x58020400
 8000780:	58021000 	.word	0x58021000
 8000784:	20000740 	.word	0x20000740
 8000788:	40010000 	.word	0x40010000
 800078c:	40000400 	.word	0x40000400
 8000790:	40000800 	.word	0x40000800
 8000794:	40014000 	.word	0x40014000
 8000798:	20000608 	.word	0x20000608
 800079c:	200006f4 	.word	0x200006f4
 80007a0:	20000524 	.word	0x20000524
 80007a4:	2000028c 	.word	0x2000028c
 80007a8:	200003e0 	.word	0x200003e0
 80007ac:	20000350 	.word	0x20000350
 80007b0:	20000810 	.word	0x20000810
 80007b4:	20000658 	.word	0x20000658
 80007b8:	0800dac0 	.word	0x0800dac0

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	224c      	movs	r2, #76	; 0x4c
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f00a fd0a 	bl	800b1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2220      	movs	r2, #32
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f00a fd04 	bl	800b1e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007dc:	2002      	movs	r0, #2
 80007de:	f004 fd09 	bl	80051f4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <SystemClock_Config+0xf0>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <SystemClock_Config+0xf0>)
 80007ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <SystemClock_Config+0xf0>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <SystemClock_Config+0xf4>)
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <SystemClock_Config+0xf4>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xf4>)
 800080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000814:	bf00      	nop
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xf0>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000822:	d1f8      	bne.n	8000816 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000828:	2301      	movs	r3, #1
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800083c:	233c      	movs	r3, #60	; 0x3c
 800083e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000844:	2306      	movs	r3, #6
 8000846:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084c:	230c      	movs	r3, #12
 800084e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000850:	2300      	movs	r3, #0
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fd03 	bl	8005268 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000868:	f001 f814 	bl	8001894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	233f      	movs	r3, #63	; 0x3f
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2303      	movs	r3, #3
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000878:	2308      	movs	r3, #8
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f005 f8f8 	bl	8005a88 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800089e:	f000 fff9 	bl	8001894 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3770      	adds	r7, #112	; 0x70
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	58024800 	.word	0x58024800
 80008b0:	58000400 	.word	0x58000400

080008b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <MX_CRC_Init+0x40>)
 80008bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_CRC_Init+0x3c>)
 80008de:	f001 ff97 	bl	8002810 <HAL_CRC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008e8:	f000 ffd4 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000042c 	.word	0x2000042c
 80008f4:	58024c00 	.word	0x58024c00

080008f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_SPI3_Init+0xa4>)
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <MX_SPI3_Init+0xa8>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_SPI3_Init+0xa4>)
 8000904:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <MX_SPI3_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_SPI3_Init+0xa4>)
 8000912:	2203      	movs	r2, #3
 8000914:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_SPI3_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_SPI3_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_SPI3_Init+0xa4>)
 8000924:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000928:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_SPI3_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI3_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_SPI3_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI3_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI3_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI3_Init+0xa4>)
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI3_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI3_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI3_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI3_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI3_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI3_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI3_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI3_Init+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI3_Init+0xa4>)
 8000982:	2200      	movs	r2, #0
 8000984:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI3_Init+0xa4>)
 8000988:	f006 ff6c 	bl	8007864 <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000992:	f000 ff7f 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000570 	.word	0x20000570
 80009a0:	40003c00 	.word	0x40003c00

080009a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09a      	sub	sp, #104	; 0x68
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	222c      	movs	r2, #44	; 0x2c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00a fc00 	bl	800b1e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e4:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <MX_TIM1_Init+0x154>)
 80009e6:	4a45      	ldr	r2, [pc, #276]	; (8000afc <MX_TIM1_Init+0x158>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80009ea:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <MX_TIM1_Init+0x154>)
 80009ec:	22ef      	movs	r2, #239	; 0xef
 80009ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <MX_TIM1_Init+0x154>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <MX_TIM1_Init+0x154>)
 80009f8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80009fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a04:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a10:	4839      	ldr	r0, [pc, #228]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a12:	f007 f844 	bl	8007a9e <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 ff3a 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4832      	ldr	r0, [pc, #200]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a2e:	f007 fd5b 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a38:	f000 ff2c 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a3c:	482e      	ldr	r0, [pc, #184]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a3e:	f007 f924 	bl	8007c8a <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f000 ff24 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4826      	ldr	r0, [pc, #152]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a60:	f008 fa8a 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a6a:	f000 ff13 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000a72:	f240 1339 	movw	r3, #313	; 0x139
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a90:	2204      	movs	r2, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000a96:	f007 fc17 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000aa0:	f000 fef8 	bl	8001894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000ada:	f008 fad5 	bl	8009088 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000ae4:	f000 fed6 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM1_Init+0x154>)
 8000aea:	f001 f847 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3768      	adds	r7, #104	; 0x68
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000608 	.word	0x20000608
 8000afc:	40010000 	.word	0x40010000

08000b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b3c:	22ef      	movs	r2, #239	; 0xef
 8000b3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b48:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5a:	4824      	ldr	r0, [pc, #144]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b5c:	f006 ff9f 	bl	8007a9e <HAL_TIM_Base_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 fe95 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b74:	4619      	mov	r1, r3
 8000b76:	481d      	ldr	r0, [pc, #116]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b78:	f007 fcb6 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b82:	f000 fe87 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b86:	4819      	ldr	r0, [pc, #100]	; (8000bec <MX_TIM2_Init+0xec>)
 8000b88:	f007 f87f 	bl	8007c8a <HAL_TIM_PWM_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b92:	f000 fe7f 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_TIM2_Init+0xec>)
 8000ba6:	f008 f9e7 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bb0:	f000 fe70 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb4:	2360      	movs	r3, #96	; 0x60
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000bb8:	f240 1339 	movw	r3, #313	; 0x139
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM2_Init+0xec>)
 8000bce:	f007 fb7b 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000bd8:	f000 fe5c 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM2_Init+0xec>)
 8000bde:	f000 ffcd 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200006f4 	.word	0x200006f4

08000bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <MX_TIM3_Init+0xec>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c2a:	22ef      	movs	r2, #239	; 0xef
 8000c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c36:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c48:	4823      	ldr	r0, [pc, #140]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c4a:	f006 ff28 	bl	8007a9e <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c54:	f000 fe1e 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c66:	f007 fc3f 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c70:	f000 fe10 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c74:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c76:	f007 f808 	bl	8007c8a <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c80:	f000 fe08 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000c94:	f008 f970 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c9e:	f000 fdf9 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000ca6:	f240 1339 	movw	r3, #313	; 0x139
 8000caa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000cbc:	f007 fb04 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000cc6:	f000 fde5 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <MX_TIM3_Init+0xe8>)
 8000ccc:	f000 ff56 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000cd0:	bf00      	nop
 8000cd2:	3738      	adds	r7, #56	; 0x38
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000524 	.word	0x20000524
 8000cdc:	40000400 	.word	0x40000400

08000ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_TIM4_Init+0xec>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d1a:	22ef      	movs	r2, #239	; 0xef
 8000d1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d26:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d38:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d3a:	f006 feb0 	bl	8007a9e <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d44:	f000 fda6 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	4619      	mov	r1, r3
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d56:	f007 fbc7 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d60:	f000 fd98 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d66:	f006 ff90 	bl	8007c8a <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d70:	f000 fd90 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000d84:	f008 f8f8 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d8e:	f000 fd81 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	; 0x60
 8000d94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d96:	f240 1339 	movw	r3, #313	; 0x139
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000dac:	f007 fa8c 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000db6:	f000 fd6d 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM4_Init+0xe8>)
 8000dbc:	f000 fede 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	; 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000028c 	.word	0x2000028c
 8000dcc:	40000800 	.word	0x40000800

08000dd0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000df0:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <MX_TIM5_Init+0x98>)
 8000df2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000df6:	22ef      	movs	r2, #239	; 0xef
 8000df8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000e02:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000e16:	f006 fe42 	bl	8007a9e <HAL_TIM_Base_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e20:	f000 fd38 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000e32:	f007 fb59 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e3c:	f000 fd2a 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_TIM5_Init+0x94>)
 8000e4e:	f008 f893 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000e58:	f000 fd1c 	bl	8001894 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200004d0 	.word	0x200004d0
 8000e68:	40000c00 	.word	0x40000c00

08000e6c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000e80:	4a16      	ldr	r2, [pc, #88]	; (8000edc <MX_TIM12_Init+0x70>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000e86:	22ef      	movs	r2, #239	; 0xef
 8000e88:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000e92:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e96:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000ea6:	f006 fdfa 	bl	8007a9e <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000eb0:	f000 fcf0 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM12_Init+0x6c>)
 8000ec0:	f007 fb12 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000eca:	f000 fce3 	bl	8001894 <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000740 	.word	0x20000740
 8000edc:	40001800 	.word	0x40001800

08000ee0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09a      	sub	sp, #104	; 0x68
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	222c      	movs	r2, #44	; 0x2c
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00a f962 	bl	800b1e4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <MX_TIM15_Init+0x144>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000f26:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f28:	22ef      	movs	r2, #239	; 0xef
 8000f2a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000f32:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f34:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000f38:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000f4c:	4834      	ldr	r0, [pc, #208]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f4e:	f006 fda6 	bl	8007a9e <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000f58:	f000 fc9c 	bl	8001894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f66:	4619      	mov	r1, r3
 8000f68:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f6a:	f007 fabd 	bl	80084e8 <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000f74:	f000 fc8e 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f78:	4829      	ldr	r0, [pc, #164]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f7a:	f006 fe86 	bl	8007c8a <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000f84:	f000 fc86 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f94:	4619      	mov	r1, r3
 8000f96:	4822      	ldr	r0, [pc, #136]	; (8001020 <MX_TIM15_Init+0x140>)
 8000f98:	f007 ffee 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000fa2:	f000 fc77 	bl	8001894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	; 0x60
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000faa:	f240 1339 	movw	r3, #313	; 0x139
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc8:	2204      	movs	r2, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM15_Init+0x140>)
 8000fce:	f007 f97b 	bl	80082c8 <HAL_TIM_PWM_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000fd8:	f000 fc5c 	bl	8001894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM15_Init+0x140>)
 8001004:	f008 f840 	bl	8009088 <HAL_TIMEx_ConfigBreakDeadTime>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800100e:	f000 fc41 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM15_Init+0x140>)
 8001014:	f000 fdb2 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 8001018:	bf00      	nop
 800101a:	3768      	adds	r7, #104	; 0x68
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200003e0 	.word	0x200003e0
 8001024:	40014000 	.word	0x40014000

08001028 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_UART4_Init+0x90>)
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <MX_UART4_Init+0x94>)
 8001030:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_UART4_Init+0x90>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_UART4_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_UART4_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_UART4_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_UART4_Init+0x90>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_UART4_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <MX_UART4_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_UART4_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_UART4_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_UART4_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_UART4_Init+0x90>)
 8001072:	f008 f8a5 	bl	80091c0 <HAL_UART_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800107c:	f000 fc0a 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_UART4_Init+0x90>)
 8001084:	f009 ffb9 	bl	800affa <HAL_UARTEx_SetTxFifoThreshold>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800108e:	f000 fc01 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001092:	2100      	movs	r1, #0
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <MX_UART4_Init+0x90>)
 8001096:	f009 ffee 	bl	800b076 <HAL_UARTEx_SetRxFifoThreshold>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80010a0:	f000 fbf8 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_UART4_Init+0x90>)
 80010a6:	f009 ff6f 	bl	800af88 <HAL_UARTEx_DisableFifoMode>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010b0:	f000 fbf0 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000660 	.word	0x20000660
 80010bc:	40004c00 	.word	0x40004c00

080010c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <MX_USART3_UART_Init+0x94>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_USART3_UART_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_USART3_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_USART3_UART_Init+0x90>)
 800110a:	f008 f859 	bl	80091c0 <HAL_UART_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 fbbe 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_USART3_UART_Init+0x90>)
 800111c:	f009 ff6d 	bl	800affa <HAL_UARTEx_SetTxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001126:	f000 fbb5 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <MX_USART3_UART_Init+0x90>)
 800112e:	f009 ffa2 	bl	800b076 <HAL_UARTEx_SetRxFifoThreshold>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 fbac 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_USART3_UART_Init+0x90>)
 800113e:	f009 ff23 	bl	800af88 <HAL_UARTEx_DisableFifoMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 fba4 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000350 	.word	0x20000350
 8001154:	40004800 	.word	0x40004800

08001158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_DMA_Init+0x8c>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001164:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <MX_DMA_Init+0x8c>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_DMA_Init+0x8c>)
 8001170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_DMA_Init+0x8c>)
 800117e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <MX_DMA_Init+0x8c>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_DMA_Init+0x8c>)
 800118e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	200c      	movs	r0, #12
 80011a0:	f001 fb01 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011a4:	200c      	movs	r0, #12
 80011a6:	f001 fb18 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	200d      	movs	r0, #13
 80011b0:	f001 faf9 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011b4:	200d      	movs	r0, #13
 80011b6:	f001 fb10 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2038      	movs	r0, #56	; 0x38
 80011c0:	f001 faf1 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c4:	2038      	movs	r0, #56	; 0x38
 80011c6:	f001 fb08 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2039      	movs	r0, #57	; 0x39
 80011d0:	f001 fae9 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011d4:	2039      	movs	r0, #57	; 0x39
 80011d6:	f001 fb00 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58024400 	.word	0x58024400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fe:	4b8c      	ldr	r3, [pc, #560]	; (8001430 <MX_GPIO_Init+0x248>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	4a8a      	ldr	r2, [pc, #552]	; (8001430 <MX_GPIO_Init+0x248>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <MX_GPIO_Init+0x248>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	4b84      	ldr	r3, [pc, #528]	; (8001430 <MX_GPIO_Init+0x248>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a83      	ldr	r2, [pc, #524]	; (8001430 <MX_GPIO_Init+0x248>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122c:	4b80      	ldr	r3, [pc, #512]	; (8001430 <MX_GPIO_Init+0x248>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <MX_GPIO_Init+0x248>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	4a7b      	ldr	r2, [pc, #492]	; (8001430 <MX_GPIO_Init+0x248>)
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124a:	4b79      	ldr	r3, [pc, #484]	; (8001430 <MX_GPIO_Init+0x248>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b75      	ldr	r3, [pc, #468]	; (8001430 <MX_GPIO_Init+0x248>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	4a74      	ldr	r2, [pc, #464]	; (8001430 <MX_GPIO_Init+0x248>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001268:	4b71      	ldr	r3, [pc, #452]	; (8001430 <MX_GPIO_Init+0x248>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <MX_GPIO_Init+0x248>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a6c      	ldr	r2, [pc, #432]	; (8001430 <MX_GPIO_Init+0x248>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <MX_GPIO_Init+0x248>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <MX_GPIO_Init+0x248>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a65      	ldr	r2, [pc, #404]	; (8001430 <MX_GPIO_Init+0x248>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b62      	ldr	r3, [pc, #392]	; (8001430 <MX_GPIO_Init+0x248>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <MX_GPIO_Init+0x248>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a5d      	ldr	r2, [pc, #372]	; (8001430 <MX_GPIO_Init+0x248>)
 80012ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <MX_GPIO_Init+0x248>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80012d0:	2200      	movs	r2, #0
 80012d2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80012d6:	4857      	ldr	r0, [pc, #348]	; (8001434 <MX_GPIO_Init+0x24c>)
 80012d8:	f003 ff58 	bl	800518c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f24c 0102 	movw	r1, #49154	; 0xc002
 80012e2:	4855      	ldr	r0, [pc, #340]	; (8001438 <MX_GPIO_Init+0x250>)
 80012e4:	f003 ff52 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ee:	4853      	ldr	r0, [pc, #332]	; (800143c <MX_GPIO_Init+0x254>)
 80012f0:	f003 ff4c 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fa:	4851      	ldr	r0, [pc, #324]	; (8001440 <MX_GPIO_Init+0x258>)
 80012fc:	f003 ff46 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001306:	484f      	ldr	r0, [pc, #316]	; (8001444 <MX_GPIO_Init+0x25c>)
 8001308:	f003 ff40 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <MX_GPIO_Init+0x260>)
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4847      	ldr	r0, [pc, #284]	; (8001440 <MX_GPIO_Init+0x258>)
 8001322:	f003 fd83 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001326:	f644 2321 	movw	r3, #18977	; 0x4a21
 800132a:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	483d      	ldr	r0, [pc, #244]	; (8001434 <MX_GPIO_Init+0x24c>)
 8001340:	f003 fd74 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001344:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <MX_GPIO_Init+0x260>)
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4837      	ldr	r0, [pc, #220]	; (8001438 <MX_GPIO_Init+0x250>)
 800135a:	f003 fd67 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800135e:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4830      	ldr	r0, [pc, #192]	; (8001438 <MX_GPIO_Init+0x250>)
 8001378:	f003 fd58 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800137c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4829      	ldr	r0, [pc, #164]	; (800143c <MX_GPIO_Init+0x254>)
 8001396:	f003 fd49 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <MX_GPIO_Init+0x258>)
 80013b4:	f003 fd3a 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 80013b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_GPIO_Init+0x25c>)
 80013d2:	f003 fd2b 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80013d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_GPIO_Init+0x260>)
 80013de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_GPIO_Init+0x264>)
 80013ec:	f003 fd1e 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80013f0:	23c0      	movs	r3, #192	; 0xc0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_GPIO_Init+0x260>)
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_GPIO_Init+0x24c>)
 8001404:	f003 fd12 	bl	8004e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2103      	movs	r1, #3
 800140c:	2017      	movs	r0, #23
 800140e:	f001 f9ca 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001412:	2017      	movs	r0, #23
 8001414:	f001 f9e1 	bl	80027da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2103      	movs	r1, #3
 800141c:	2028      	movs	r0, #40	; 0x28
 800141e:	f001 f9c2 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001422:	2028      	movs	r0, #40	; 0x28
 8001424:	f001 f9d9 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400
 8001434:	58020400 	.word	0x58020400
 8001438:	58021000 	.word	0x58021000
 800143c:	58020c00 	.word	0x58020c00
 8001440:	58020800 	.word	0x58020800
 8001444:	58020000 	.word	0x58020000
 8001448:	11110000 	.word	0x11110000
 800144c:	58021800 	.word	0x58021800

08001450 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001458:	1d39      	adds	r1, r7, #4
 800145a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145e:	2201      	movs	r2, #1
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <__io_putchar+0x20>)
 8001462:	f007 fefd 	bl	8009260 <HAL_UART_Transmit>

return ch;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000350 	.word	0x20000350

08001474 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a5a      	ldr	r2, [pc, #360]	; (80015e8 <HAL_UART_RxCpltCallback+0x174>)
 8001480:	4293      	cmp	r3, r2
 8001482:	f040 80ad 	bne.w	80015e0 <HAL_UART_RxCpltCallback+0x16c>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 8001486:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_UART_RxCpltCallback+0x178>)
 8001488:	22ac      	movs	r2, #172	; 0xac
 800148a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800148c:	2364      	movs	r3, #100	; 0x64
 800148e:	2201      	movs	r2, #1
 8001490:	4956      	ldr	r1, [pc, #344]	; (80015ec <HAL_UART_RxCpltCallback+0x178>)
 8001492:	4855      	ldr	r0, [pc, #340]	; (80015e8 <HAL_UART_RxCpltCallback+0x174>)
 8001494:	f007 fee4 	bl	8009260 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2101      	movs	r1, #1
 800149c:	4854      	ldr	r0, [pc, #336]	; (80015f0 <HAL_UART_RxCpltCallback+0x17c>)
 800149e:	f003 fe75 	bl	800518c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	4853      	ldr	r0, [pc, #332]	; (80015f4 <HAL_UART_RxCpltCallback+0x180>)
 80014a8:	f003 fe70 	bl	800518c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	484f      	ldr	r0, [pc, #316]	; (80015f0 <HAL_UART_RxCpltCallback+0x17c>)
 80014b4:	f003 fe6a 	bl	800518c <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 80014b8:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <HAL_UART_RxCpltCallback+0x184>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <HAL_UART_RxCpltCallback+0x184>)
 80014c6:	78db      	ldrb	r3, [r3, #3]
 80014c8:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 80014ce:	2400      	movs	r4, #0
 80014d0:	e006      	b.n	80014e0 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_UART_RxCpltCallback+0x184>)
 80014d4:	5d1b      	ldrb	r3, [r3, r4]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 80014de:	3401      	adds	r4, #1
 80014e0:	2c02      	cmp	r4, #2
 80014e2:	ddf6      	ble.n	80014d2 <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d15b      	bne.n	80015b0 <HAL_UART_RxCpltCallback+0x13c>
		{
			switch(num_mode)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	2b0e      	cmp	r3, #14
 8001500:	d844      	bhi.n	800158c <HAL_UART_RxCpltCallback+0x118>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_UART_RxCpltCallback+0x94>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	0800158d 	.word	0x0800158d
 800150c:	0800158d 	.word	0x0800158d
 8001510:	0800158d 	.word	0x0800158d
 8001514:	0800158d 	.word	0x0800158d
 8001518:	0800158d 	.word	0x0800158d
 800151c:	08001545 	.word	0x08001545
 8001520:	0800154d 	.word	0x0800154d
 8001524:	08001555 	.word	0x08001555
 8001528:	0800155d 	.word	0x0800155d
 800152c:	08001565 	.word	0x08001565
 8001530:	0800156d 	.word	0x0800156d
 8001534:	08001575 	.word	0x08001575
 8001538:	0800157d 	.word	0x0800157d
 800153c:	08001585 	.word	0x08001585
 8001540:	0800158d 	.word	0x0800158d
			{
				case 6:		// q1 Mode
				{
					State_Input_Joint_State = 1;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_UART_RxCpltCallback+0x188>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
					break;
 800154a:	e020      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 7:		// q2 Mode
				{
					State_Input_Joint_State = 1;
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_UART_RxCpltCallback+0x188>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
					break;
 8001552:	e01c      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 8:		// q3 Mode
				{
					State_Input_Joint_State = 1;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_UART_RxCpltCallback+0x188>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
					break;
 800155a:	e018      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 9:		// q4 Mode
				{
					State_Input_Joint_State = 1;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_UART_RxCpltCallback+0x188>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
					break;
 8001562:	e014      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_UART_RxCpltCallback+0x18c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
					break;
 800156a:	e010      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_UART_RxCpltCallback+0x190>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
					break;
 8001572:	e00c      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_UART_RxCpltCallback+0x194>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
					break;
 800157a:	e008      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_UART_RxCpltCallback+0x198>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
					break;
 8001582:	e004      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_UART_RxCpltCallback+0x19c>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
					break;
 800158a:	e000      	b.n	800158e <HAL_UART_RxCpltCallback+0x11a>
				{
					break;
				}
				default:
				{
					break;
 800158c:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	4817      	ldr	r0, [pc, #92]	; (80015f0 <HAL_UART_RxCpltCallback+0x17c>)
 8001594:	f003 fdfa 	bl	800518c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2102      	movs	r1, #2
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <HAL_UART_RxCpltCallback+0x180>)
 800159e:	f003 fdf5 	bl	800518c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <HAL_UART_RxCpltCallback+0x17c>)
 80015aa:	f003 fdef 	bl	800518c <HAL_GPIO_WritePin>
 80015ae:	e012      	b.n	80015d6 <HAL_UART_RxCpltCallback+0x162>
		}
		else
		{
			  State_Checksum_Error = 1;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_UART_RxCpltCallback+0x1a0>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2101      	movs	r1, #1
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <HAL_UART_RxCpltCallback+0x17c>)
 80015bc:	f003 fde6 	bl	800518c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2102      	movs	r1, #2
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <HAL_UART_RxCpltCallback+0x180>)
 80015c6:	f003 fde1 	bl	800518c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <HAL_UART_RxCpltCallback+0x17c>)
 80015d2:	f003 fddb 	bl	800518c <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 80015d6:	2204      	movs	r2, #4
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <HAL_UART_RxCpltCallback+0x184>)
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <HAL_UART_RxCpltCallback+0x174>)
 80015dc:	f007 fed6 	bl	800938c <HAL_UART_Receive_IT>
	}
}
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	20000350 	.word	0x20000350
 80015ec:	200005fc 	.word	0x200005fc
 80015f0:	58020400 	.word	0x58020400
 80015f4:	58021000 	.word	0x58021000
 80015f8:	20000810 	.word	0x20000810
 80015fc:	2000051c 	.word	0x2000051c
 8001600:	200005fd 	.word	0x200005fd
 8001604:	200005fe 	.word	0x200005fe
 8001608:	20000210 	.word	0x20000210
 800160c:	2000080c 	.word	0x2000080c
 8001610:	20000450 	.word	0x20000450
 8001614:	20000790 	.word	0x20000790

08001618 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM1_Pin || GPIO_Pin == LM2_Pin || GPIO_Pin == LM3_Pin || GPIO_Pin == LM4_Pin || GPIO_Pin == LM5_Pin)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_EXTI_Callback+0x2e>
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001644:	d009      	beq.n	800165a <HAL_GPIO_EXTI_Callback+0x2e>
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d006      	beq.n	800165a <HAL_GPIO_EXTI_Callback+0x2e>
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	2b40      	cmp	r3, #64	; 0x40
 8001650:	d003      	beq.n	800165a <HAL_GPIO_EXTI_Callback+0x2e>
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001658:	d12b      	bne.n	80016b2 <HAL_GPIO_EXTI_Callback+0x86>
	{
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <HAL_GPIO_EXTI_Callback+0x90>)
 8001660:	f003 fd94 	bl	800518c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2102      	movs	r1, #2
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x94>)
 800166a:	f003 fd8f 	bl	800518c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <HAL_GPIO_EXTI_Callback+0x90>)
 8001676:	f003 fd89 	bl	800518c <HAL_GPIO_WritePin>

		  HAL_TIM_Base_Stop_IT(&htim5);
 800167a:	4812      	ldr	r0, [pc, #72]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x98>)
 800167c:	f006 fad6 	bl	8007c2c <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim12);
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001682:	f006 fad3 	bl	8007c2c <HAL_TIM_Base_Stop_IT>

		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001686:	2104      	movs	r1, #4
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <HAL_GPIO_EXTI_Callback+0xa0>)
 800168a:	f006 fc67 	bl	8007f5c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800168e:	2108      	movs	r1, #8
 8001690:	480f      	ldr	r0, [pc, #60]	; (80016d0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001692:	f006 fc63 	bl	8007f5c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001696:	2100      	movs	r1, #0
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800169a:	f006 fc5f 	bl	8007f5c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800169e:	2108      	movs	r1, #8
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <HAL_GPIO_EXTI_Callback+0xac>)
 80016a2:	f006 fc5b 	bl	8007f5c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 80016a6:	2104      	movs	r1, #4
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <HAL_GPIO_EXTI_Callback+0xb0>)
 80016aa:	f006 fc57 	bl	8007f5c <HAL_TIM_PWM_Stop>
		  Error_Handler();
 80016ae:	f000 f8f1 	bl	8001894 <Error_Handler>

	}
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	58020400 	.word	0x58020400
 80016c0:	58021000 	.word	0x58021000
 80016c4:	200004d0 	.word	0x200004d0
 80016c8:	20000740 	.word	0x20000740
 80016cc:	20000608 	.word	0x20000608
 80016d0:	200006f4 	.word	0x200006f4
 80016d4:	20000524 	.word	0x20000524
 80016d8:	2000028c 	.word	0x2000028c
 80016dc:	200003e0 	.word	0x200003e0

080016e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	 * HAL_TIM_Base_Start_IT(&htim5);
	 * HAL_TIM_Base_Stop_IT(&htim5);
	 *
	 */
  /* Timer5 Interrupt PID Position Control*/
  if (htim->Instance == TIM5)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d109      	bne.n	8001706 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  rad = rad + (float)(1.0f / 2000.0f);
 80016f2:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001864 <HAL_TIM_PeriodElapsedCallback+0x184>
 80016fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001700:	4b57      	ldr	r3, [pc, #348]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001702:	edc3 7a00 	vstr	s15, [r3]

  }
  /* Timer12 Interrupt Trajectory*/
  if (htim->Instance == TIM12)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800170c:	4293      	cmp	r3, r2
 800170e:	f040 809e 	bne.w	800184e <HAL_TIM_PeriodElapsedCallback+0x16e>
  {
	    float t_2 = t*t;
 8001712:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4b54      	ldr	r3, [pc, #336]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	edc7 7a07 	vstr	s15, [r7, #28]
	    float t_3 = t_2 * t;
 8001726:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001734:	edc7 7a06 	vstr	s15, [r7, #24]
	    float Goal_position_x = C0x + (C2x*t_2) - (C3x*t_3);
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800173a:	ed93 7a00 	vldr	s14, [r3]
 800173e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001746:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001750:	4b49      	ldr	r3, [pc, #292]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001752:	edd3 6a00 	vldr	s13, [r3]
 8001756:	edd7 7a06 	vldr	s15, [r7, #24]
 800175a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	edc7 7a05 	vstr	s15, [r7, #20]
	    float Goal_position_y = C0y + (C2y*t_2) - (C3y*t_3);
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001780:	edd3 6a00 	vldr	s13, [r3]
 8001784:	edd7 7a06 	vldr	s15, [r7, #24]
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001790:	edc7 7a04 	vstr	s15, [r7, #16]
	    float Goal_velocity_x = (2*C2x*t) - (3 * C3x*t_2);
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a8:	4b33      	ldr	r3, [pc, #204]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80017b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	edc7 7a03 	vstr	s15, [r7, #12]
	    float Goal_velocity_y = (2*C2y*t) - (3 * C3y*t_2);
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80017e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f4:	edc7 7a02 	vstr	s15, [r7, #8]

	    // X
//	    IPK_findChessBot(Goal_position_x, Goal_position_y, 0, 0);
	    rad = rad + (float)(1.0f / 20000.0f);
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001888 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001808:	edc3 7a00 	vstr	s15, [r3]
//			Driver_motor_Y((int) - 10000);
//		} else {
//			Driver_motor_Y((int) Output_velcont[1]);
//		}

	    if (t != T)
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800180e:	ed93 7a00 	vldr	s14, [r3]
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eeb4 7a67 	vcmp.f32	s14, s15
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d00b      	beq.n	800183a <HAL_TIM_PeriodElapsedCallback+0x15a>
	    {
	        t = t + sample_time;
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
	    	C0y = Goal_position_y;
//	    	HAL_TIM_Base_Stop_IT(&htim12);
	        // Stop Control Loop
	    }
  }
}
 8001838:	e009      	b.n	800184e <HAL_TIM_PeriodElapsedCallback+0x16e>
	    	t = T;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001840:	6013      	str	r3, [r2, #0]
	    	C0x = Goal_position_x;
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	6013      	str	r3, [r2, #0]
	    	C0y = Goal_position_y;
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40000c00 	.word	0x40000c00
 8001860:	20000658 	.word	0x20000658
 8001864:	3a03126f 	.word	0x3a03126f
 8001868:	40001800 	.word	0x40001800
 800186c:	20000200 	.word	0x20000200
 8001870:	2000065c 	.word	0x2000065c
 8001874:	20000604 	.word	0x20000604
 8001878:	20000654 	.word	0x20000654
 800187c:	20000454 	.word	0x20000454
 8001880:	2000078c 	.word	0x2000078c
 8001884:	20000600 	.word	0x20000600
 8001888:	3851b717 	.word	0x3851b717
 800188c:	20000520 	.word	0x20000520
 8001890:	20000000 	.word	0x20000000

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2101      	movs	r1, #1
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <Error_Handler+0x2c>)
 800189e:	f003 fc75 	bl	800518c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2102      	movs	r1, #2
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <Error_Handler+0x30>)
 80018a8:	f003 fc70 	bl	800518c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <Error_Handler+0x2c>)
 80018b4:	f003 fc6a 	bl	800518c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x28>
 80018be:	bf00      	nop
 80018c0:	58020400 	.word	0x58020400
 80018c4:	58021000 	.word	0x58021000

080018c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_MspInit+0x30>)
 80018d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_MspInit+0x30>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_MspInit+0x30>)
 80018e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	58024400 	.word	0x58024400

080018fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_CRC_MspInit+0x3c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10e      	bne.n	800192c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_CRC_MspInit+0x40>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_CRC_MspInit+0x40>)
 8001916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_CRC_MspInit+0x40>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	58024c00 	.word	0x58024c00
 800193c:	58024400 	.word	0x58024400

08001940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0b8      	sub	sp, #224	; 0xe0
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	22bc      	movs	r2, #188	; 0xbc
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f009 fc3f 	bl	800b1e4 <memset>
  if(hspi->Instance==SPI3)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_SPI_MspInit+0xc0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d142      	bne.n	80019f6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001976:	2300      	movs	r3, #0
 8001978:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fc0e 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800198a:	f7ff ff83 	bl	8001894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_SPI_MspInit+0xc4>)
 8001990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_SPI_MspInit+0xc4>)
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_SPI_MspInit+0xc4>)
 80019a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_SPI_MspInit+0xc4>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_SPI_MspInit+0xc4>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_SPI_MspInit+0xc4>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019e4:	2306      	movs	r3, #6
 80019e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <HAL_SPI_MspInit+0xc8>)
 80019f2:	f003 fa1b 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	37e0      	adds	r7, #224	; 0xe0
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40003c00 	.word	0x40003c00
 8001a04:	58024400 	.word	0x58024400
 8001a08:	58020800 	.word	0x58020800

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <HAL_TIM_Base_MspInit+0x154>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10f      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1e:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a24:	4a4f      	ldr	r2, [pc, #316]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a3c:	e08c      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a46:	d10f      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a48:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a4e:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	6a3b      	ldr	r3, [r7, #32]
}
 8001a66:	e077      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a3e      	ldr	r2, [pc, #248]	; (8001b68 <HAL_TIM_Base_MspInit+0x15c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10f      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	4a3a      	ldr	r2, [pc, #232]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
}
 8001a90:	e062      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a35      	ldr	r2, [pc, #212]	; (8001b6c <HAL_TIM_Base_MspInit+0x160>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d10f      	bne.n	8001abc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa2:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
}
 8001aba:	e04d      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_TIM_Base_MspInit+0x164>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d117      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001acc:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	2032      	movs	r0, #50	; 0x32
 8001aea:	f000 fe5c 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001aee:	2032      	movs	r0, #50	; 0x32
 8001af0:	f000 fe73 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8001af4:	e030      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_TIM_Base_MspInit+0x168>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d117      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	202b      	movs	r0, #43	; 0x2b
 8001b24:	f000 fe3f 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b28:	202b      	movs	r0, #43	; 0x2b
 8001b2a:	f000 fe56 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8001b2e:	e013      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM15)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_TIM_Base_MspInit+0x16c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10e      	bne.n	8001b58 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_TIM_Base_MspInit+0x158>)
 8001b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010000 	.word	0x40010000
 8001b64:	58024400 	.word	0x58024400
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40001800 	.word	0x40001800
 8001b78:	40014000 	.word	0x40014000

08001b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5e      	ldr	r2, [pc, #376]	; (8001d14 <HAL_TIM_MspPostInit+0x198>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d120      	bne.n	8001be0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba4:	4a5c      	ldr	r2, [pc, #368]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bae:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4850      	ldr	r0, [pc, #320]	; (8001d1c <HAL_TIM_MspPostInit+0x1a0>)
 8001bda:	f003 f927 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001bde:	e094      	b.n	8001d0a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be8:	d120      	bne.n	8001c2c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	483e      	ldr	r0, [pc, #248]	; (8001d20 <HAL_TIM_MspPostInit+0x1a4>)
 8001c26:	f003 f901 	bl	8004e2c <HAL_GPIO_Init>
}
 8001c2a:	e06e      	b.n	8001d0a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3c      	ldr	r2, [pc, #240]	; (8001d24 <HAL_TIM_MspPostInit+0x1a8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d11f      	bne.n	8001c76 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	4a36      	ldr	r2, [pc, #216]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c46:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	482e      	ldr	r0, [pc, #184]	; (8001d28 <HAL_TIM_MspPostInit+0x1ac>)
 8001c70:	f003 f8dc 	bl	8004e2c <HAL_GPIO_Init>
}
 8001c74:	e049      	b.n	8001d0a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <HAL_TIM_MspPostInit+0x1b0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d120      	bne.n	8001cc2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4819      	ldr	r0, [pc, #100]	; (8001d20 <HAL_TIM_MspPostInit+0x1a4>)
 8001cbc:	f003 f8b6 	bl	8004e2c <HAL_GPIO_Init>
}
 8001cc0:	e023      	b.n	8001d0a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_TIM_MspPostInit+0x1b4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d11e      	bne.n	8001d0a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_TIM_MspPostInit+0x19c>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001cea:	2340      	movs	r3, #64	; 0x40
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_TIM_MspPostInit+0x1a0>)
 8001d06:	f003 f891 	bl	8004e2c <HAL_GPIO_Init>
}
 8001d0a:	bf00      	nop
 8001d0c:	3730      	adds	r7, #48	; 0x30
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	58021000 	.word	0x58021000
 8001d20:	58020400 	.word	0x58020400
 8001d24:	40000400 	.word	0x40000400
 8001d28:	58020000 	.word	0x58020000
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40014000 	.word	0x40014000

08001d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0ba      	sub	sp, #232	; 0xe8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	22bc      	movs	r2, #188	; 0xbc
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f009 fa45 	bl	800b1e4 <memset>
  if(huart->Instance==UART4)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4aad      	ldr	r2, [pc, #692]	; (8002014 <HAL_UART_MspInit+0x2e0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f040 80a5 	bne.w	8001eb0 <HAL_UART_MspInit+0x17c>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fa13 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001d80:	f7ff fd88 	bl	8001894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d84:	4ba4      	ldr	r3, [pc, #656]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d8a:	4aa3      	ldr	r2, [pc, #652]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d94:	4ba0      	ldr	r3, [pc, #640]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da2:	4b9d      	ldr	r3, [pc, #628]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	4a9b      	ldr	r2, [pc, #620]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db2:	4b99      	ldr	r3, [pc, #612]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dd8:	2308      	movs	r3, #8
 8001dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dde:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001de2:	4619      	mov	r1, r3
 8001de4:	488d      	ldr	r0, [pc, #564]	; (800201c <HAL_UART_MspInit+0x2e8>)
 8001de6:	f003 f821 	bl	8004e2c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001dea:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001dec:	4a8d      	ldr	r2, [pc, #564]	; (8002024 <HAL_UART_MspInit+0x2f0>)
 8001dee:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001df0:	4b8b      	ldr	r3, [pc, #556]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001df2:	223f      	movs	r2, #63	; 0x3f
 8001df4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df6:	4b8a      	ldr	r3, [pc, #552]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b87      	ldr	r3, [pc, #540]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	4b85      	ldr	r3, [pc, #532]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	4b83      	ldr	r3, [pc, #524]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e16:	4b82      	ldr	r3, [pc, #520]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1c:	4b80      	ldr	r3, [pc, #512]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e22:	4b7f      	ldr	r3, [pc, #508]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e28:	487d      	ldr	r0, [pc, #500]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e2a:	f000 fddb 	bl	80029e4 <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001e34:	f7ff fd2e 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a79      	ldr	r2, [pc, #484]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e3c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e3e:	4a78      	ldr	r2, [pc, #480]	; (8002020 <HAL_UART_MspInit+0x2ec>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001e44:	4b78      	ldr	r3, [pc, #480]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e46:	4a79      	ldr	r2, [pc, #484]	; (800202c <HAL_UART_MspInit+0x2f8>)
 8001e48:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001e4a:	4b77      	ldr	r3, [pc, #476]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e50:	4b75      	ldr	r3, [pc, #468]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e56:	4b74      	ldr	r3, [pc, #464]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e5c:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e62:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e64:	4b70      	ldr	r3, [pc, #448]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001e70:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001e82:	4869      	ldr	r0, [pc, #420]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e84:	f000 fdae 	bl	80029e4 <HAL_DMA_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001e8e:	f7ff fd01 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a64      	ldr	r2, [pc, #400]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e96:	679a      	str	r2, [r3, #120]	; 0x78
 8001e98:	4a63      	ldr	r2, [pc, #396]	; (8002028 <HAL_UART_MspInit+0x2f4>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2034      	movs	r0, #52	; 0x34
 8001ea4:	f000 fc7f 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ea8:	2034      	movs	r0, #52	; 0x34
 8001eaa:	f000 fc96 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eae:	e0ac      	b.n	800200a <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5e      	ldr	r2, [pc, #376]	; (8002030 <HAL_UART_MspInit+0x2fc>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	f040 80a7 	bne.w	800200a <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 f968 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8001ed6:	f7ff fcdd 	bl	8001894 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eda:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee0:	4a4d      	ldr	r2, [pc, #308]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eea:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_UART_MspInit+0x2e4>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f30:	2307      	movs	r3, #7
 8001f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4837      	ldr	r0, [pc, #220]	; (800201c <HAL_UART_MspInit+0x2e8>)
 8001f3e:	f002 ff75 	bl	8004e2c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f44:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <HAL_UART_MspInit+0x304>)
 8001f46:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f4a:	222d      	movs	r2, #45	; 0x2d
 8001f4c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f60:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f68:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f7a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f82:	482c      	ldr	r0, [pc, #176]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f84:	f000 fd2e 	bl	80029e4 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8001f8e:	f7ff fc81 	bl	8001894 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f96:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f98:	4a26      	ldr	r2, [pc, #152]	; (8002034 <HAL_UART_MspInit+0x300>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fa0:	4a27      	ldr	r2, [pc, #156]	; (8002040 <HAL_UART_MspInit+0x30c>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fa6:	222e      	movs	r2, #46	; 0x2e
 8001fa8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fac:	2240      	movs	r2, #64	; 0x40
 8001fae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fd6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001fde:	4817      	ldr	r0, [pc, #92]	; (800203c <HAL_UART_MspInit+0x308>)
 8001fe0:	f000 fd00 	bl	80029e4 <HAL_DMA_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8001fea:	f7ff fc53 	bl	8001894 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_UART_MspInit+0x308>)
 8001ff2:	679a      	str	r2, [r3, #120]	; 0x78
 8001ff4:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_UART_MspInit+0x308>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2027      	movs	r0, #39	; 0x27
 8002000:	f000 fbd1 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002004:	2027      	movs	r0, #39	; 0x27
 8002006:	f000 fbe8 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	37e8      	adds	r7, #232	; 0xe8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40004c00 	.word	0x40004c00
 8002018:	58024400 	.word	0x58024400
 800201c:	58020c00 	.word	0x58020c00
 8002020:	20000214 	.word	0x20000214
 8002024:	40020410 	.word	0x40020410
 8002028:	20000794 	.word	0x20000794
 800202c:	40020428 	.word	0x40020428
 8002030:	40004800 	.word	0x40004800
 8002034:	200002d8 	.word	0x200002d8
 8002038:	40020028 	.word	0x40020028
 800203c:	20000458 	.word	0x20000458
 8002040:	40020040 	.word	0x40020040

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 fa5e 	bl	8002550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <DMA1_Stream1_IRQHandler+0x10>)
 800209e:	f001 fd5f 	bl	8003b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200002d8 	.word	0x200002d8

080020ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA1_Stream2_IRQHandler+0x10>)
 80020b2:	f001 fd55 	bl	8003b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000458 	.word	0x20000458

080020c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020c4:	2040      	movs	r0, #64	; 0x40
 80020c6:	f003 f87a 	bl	80051be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020ca:	2080      	movs	r0, #128	; 0x80
 80020cc:	f003 f877 	bl	80051be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <USART3_IRQHandler+0x10>)
 80020da:	f007 f99d 	bl	8009418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000350 	.word	0x20000350

080020e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80020ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020f0:	f003 f865 	bl	80051be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80020f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020f8:	f003 f861 	bl	80051be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002100:	f003 f85d 	bl	80051be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002104:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002108:	f003 f859 	bl	80051be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002116:	f005 ffb7 	bl	8008088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000740 	.word	0x20000740

08002124 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM5_IRQHandler+0x10>)
 800212a:	f005 ffad 	bl	8008088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200004d0 	.word	0x200004d0

08002138 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <UART4_IRQHandler+0x10>)
 800213e:	f007 f96b 	bl	8009418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000660 	.word	0x20000660

0800214c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA2_Stream0_IRQHandler+0x10>)
 8002152:	f001 fd05 	bl	8003b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000214 	.word	0x20000214

08002160 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <DMA2_Stream1_IRQHandler+0x10>)
 8002166:	f001 fcfb 	bl	8003b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000794 	.word	0x20000794

08002174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_kill>:

int _kill(int pid, int sig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800218e:	f008 ffff 	bl	800b190 <__errno>
 8002192:	4603      	mov	r3, r0
 8002194:	2216      	movs	r2, #22
 8002196:	601a      	str	r2, [r3, #0]
	return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_exit>:

void _exit (int status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffe7 	bl	8002184 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021b6:	e7fe      	b.n	80021b6 <_exit+0x12>

080021b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
	}

return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f91f 	bl	8001450 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
	}
	return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f008 ff64 	bl	800b190 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20020000 	.word	0x20020000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000204 	.word	0x20000204
 80022fc:	20000828 	.word	0x20000828

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002304:	4b39      	ldr	r3, [pc, #228]	; (80023ec <SystemInit+0xec>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a38      	ldr	r2, [pc, #224]	; (80023ec <SystemInit+0xec>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <SystemInit+0xf0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	2b06      	cmp	r3, #6
 800231e:	d807      	bhi.n	8002330 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <SystemInit+0xf0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 030f 	bic.w	r3, r3, #15
 8002328:	4a31      	ldr	r2, [pc, #196]	; (80023f0 <SystemInit+0xf0>)
 800232a:	f043 0307 	orr.w	r3, r3, #7
 800232e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <SystemInit+0xf4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <SystemInit+0xf4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <SystemInit+0xf4>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <SystemInit+0xf4>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	492b      	ldr	r1, [pc, #172]	; (80023f4 <SystemInit+0xf4>)
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <SystemInit+0xf8>)
 800234a:	4013      	ands	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <SystemInit+0xf0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <SystemInit+0xf0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 030f 	bic.w	r3, r3, #15
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <SystemInit+0xf0>)
 8002364:	f043 0307 	orr.w	r3, r3, #7
 8002368:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <SystemInit+0xf4>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <SystemInit+0xf4>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <SystemInit+0xf4>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <SystemInit+0xf4>)
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <SystemInit+0xfc>)
 8002380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <SystemInit+0xf4>)
 8002384:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <SystemInit+0x100>)
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <SystemInit+0xf4>)
 800238a:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <SystemInit+0x104>)
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <SystemInit+0xf4>)
 8002390:	2200      	movs	r2, #0
 8002392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <SystemInit+0xf4>)
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <SystemInit+0x104>)
 8002398:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <SystemInit+0xf4>)
 800239c:	2200      	movs	r2, #0
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <SystemInit+0xf4>)
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <SystemInit+0x104>)
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <SystemInit+0xf4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <SystemInit+0xf4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <SystemInit+0xf4>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <SystemInit+0xf4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <SystemInit+0x108>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <SystemInit+0x10c>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023ca:	d202      	bcs.n	80023d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <SystemInit+0x110>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <SystemInit+0x114>)
 80023d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SystemInit+0xec>)
 80023dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00
 80023f0:	52002000 	.word	0x52002000
 80023f4:	58024400 	.word	0x58024400
 80023f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80023fc:	02020200 	.word	0x02020200
 8002400:	01ff0000 	.word	0x01ff0000
 8002404:	01010280 	.word	0x01010280
 8002408:	5c001000 	.word	0x5c001000
 800240c:	ffff0000 	.word	0xffff0000
 8002410:	51008108 	.word	0x51008108
 8002414:	52004000 	.word	0x52004000

08002418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002450 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800241c:	f7ff ff70 	bl	8002300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002438:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002446:	f008 fea9 	bl	800b19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244a:	f7fe f91d 	bl	8000688 <main>
  bx  lr
 800244e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800245c:	0800defc 	.word	0x0800defc
  ldr r2, =_sbss
 8002460:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002464:	20000828 	.word	0x20000828

08002468 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC3_IRQHandler>
	...

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002472:	2003      	movs	r0, #3
 8002474:	f000 f98c 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002478:	f003 fcbc 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_Init+0x68>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	4913      	ldr	r1, [pc, #76]	; (80024d8 <HAL_Init+0x6c>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_Init+0x68>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_Init+0x6c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <HAL_Init+0x70>)
 80024ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024b0:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <HAL_Init+0x74>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 f814 	bl	80024e4 <HAL_InitTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e002      	b.n	80024cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024c6:	f7ff f9ff 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	58024400 	.word	0x58024400
 80024d8:	0800dac8 	.word	0x0800dac8
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_InitTick+0x60>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e021      	b.n	800253c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_InitTick+0x64>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_InitTick+0x60>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f971 	bl	80027f6 <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00e      	b.n	800253c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d80a      	bhi.n	800253a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f000 f93b 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <HAL_InitTick+0x68>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000010 	.word	0x20000010
 8002548:	20000004 	.word	0x20000004
 800254c:	2000000c 	.word	0x2000000c

08002550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x20>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x24>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_IncTick+0x24>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000010 	.word	0x20000010
 8002574:	20000814 	.word	0x20000814

08002578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000814 	.word	0x20000814

08002590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d005      	beq.n	80025b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_Delay+0x44>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b6:	bf00      	nop
 80025b8:	f7ff ffde 	bl	8002578 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d8f7      	bhi.n	80025b8 <HAL_Delay+0x28>
  {
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000010 	.word	0x20000010

080025d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetREVID+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0c1b      	lsrs	r3, r3, #16
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	5c001000 	.word	0x5c001000

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <__NVIC_SetPriorityGrouping+0x40>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x40>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	05fa0000 	.word	0x05fa0000

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff40 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff90 	bl	80026e4 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5f 	bl	8002690 <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff33 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa4 	bl	800274c <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e054      	b.n	80028cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7f5b      	ldrb	r3, [r3, #29]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff f862 	bl	80018fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a22      	ldr	r2, [pc, #136]	; (80028d4 <HAL_CRC_Init+0xc4>)
 800284c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0218 	bic.w	r2, r2, #24
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	e00c      	b.n	800287a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	461a      	mov	r2, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f834 	bl	80028d8 <HAL_CRCEx_Polynomial_Set>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e028      	b.n	80028cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	795b      	ldrb	r3, [r3, #5]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 32ff 	mov.w	r2, #4294967295
 800288a:	611a      	str	r2, [r3, #16]
 800288c:	e004      	b.n	8002898 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6912      	ldr	r2, [r2, #16]
 8002896:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	04c11db7 	.word	0x04c11db7

080028d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028e8:	231f      	movs	r3, #31
 80028ea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028ec:	bf00      	nop
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1e5a      	subs	r2, r3, #1
 80028f2:	613a      	str	r2, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <HAL_CRCEx_Polynomial_Set+0x34>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_CRCEx_Polynomial_Set+0x16>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b18      	cmp	r3, #24
 8002910:	d846      	bhi.n	80029a0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	080029a7 	.word	0x080029a7
 800291c:	080029a1 	.word	0x080029a1
 8002920:	080029a1 	.word	0x080029a1
 8002924:	080029a1 	.word	0x080029a1
 8002928:	080029a1 	.word	0x080029a1
 800292c:	080029a1 	.word	0x080029a1
 8002930:	080029a1 	.word	0x080029a1
 8002934:	080029a1 	.word	0x080029a1
 8002938:	08002995 	.word	0x08002995
 800293c:	080029a1 	.word	0x080029a1
 8002940:	080029a1 	.word	0x080029a1
 8002944:	080029a1 	.word	0x080029a1
 8002948:	080029a1 	.word	0x080029a1
 800294c:	080029a1 	.word	0x080029a1
 8002950:	080029a1 	.word	0x080029a1
 8002954:	080029a1 	.word	0x080029a1
 8002958:	08002989 	.word	0x08002989
 800295c:	080029a1 	.word	0x080029a1
 8002960:	080029a1 	.word	0x080029a1
 8002964:	080029a1 	.word	0x080029a1
 8002968:	080029a1 	.word	0x080029a1
 800296c:	080029a1 	.word	0x080029a1
 8002970:	080029a1 	.word	0x080029a1
 8002974:	080029a1 	.word	0x080029a1
 8002978:	0800297d 	.word	0x0800297d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d913      	bls.n	80029aa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002986:	e010      	b.n	80029aa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b07      	cmp	r3, #7
 800298c:	d90f      	bls.n	80029ae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002992:	e00c      	b.n	80029ae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	d90b      	bls.n	80029b2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800299e:	e008      	b.n	80029b2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	75fb      	strb	r3, [r7, #23]
      break;
 80029a4:	e006      	b.n	80029b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029a6:	bf00      	nop
 80029a8:	e004      	b.n	80029b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029aa:	bf00      	nop
 80029ac:	e002      	b.n	80029b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 0118 	bic.w	r1, r3, #24
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff fdc4 	bl	8002578 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e316      	b.n	800302a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a66      	ldr	r2, [pc, #408]	; (8002b9c <HAL_DMA_Init+0x1b8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d04a      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a65      	ldr	r2, [pc, #404]	; (8002ba0 <HAL_DMA_Init+0x1bc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d045      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a63      	ldr	r2, [pc, #396]	; (8002ba4 <HAL_DMA_Init+0x1c0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d040      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a62      	ldr	r2, [pc, #392]	; (8002ba8 <HAL_DMA_Init+0x1c4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d03b      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a60      	ldr	r2, [pc, #384]	; (8002bac <HAL_DMA_Init+0x1c8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d036      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <HAL_DMA_Init+0x1cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_DMA_Init+0x1d0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02c      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5c      	ldr	r2, [pc, #368]	; (8002bb8 <HAL_DMA_Init+0x1d4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d027      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5a      	ldr	r2, [pc, #360]	; (8002bbc <HAL_DMA_Init+0x1d8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a59      	ldr	r2, [pc, #356]	; (8002bc0 <HAL_DMA_Init+0x1dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d01d      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a57      	ldr	r2, [pc, #348]	; (8002bc4 <HAL_DMA_Init+0x1e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d018      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a56      	ldr	r2, [pc, #344]	; (8002bc8 <HAL_DMA_Init+0x1e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_DMA_Init+0x1e8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a53      	ldr	r2, [pc, #332]	; (8002bd0 <HAL_DMA_Init+0x1ec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a51      	ldr	r2, [pc, #324]	; (8002bd4 <HAL_DMA_Init+0x1f0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a50      	ldr	r2, [pc, #320]	; (8002bd8 <HAL_DMA_Init+0x1f4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_DMA_Init+0xbc>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_DMA_Init+0xbe>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 813b 	beq.w	8002d1e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <HAL_DMA_Init+0x1b8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a36      	ldr	r2, [pc, #216]	; (8002ba0 <HAL_DMA_Init+0x1bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_DMA_Init+0x1c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <HAL_DMA_Init+0x1c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a31      	ldr	r2, [pc, #196]	; (8002bac <HAL_DMA_Init+0x1c8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <HAL_DMA_Init+0x1cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2e      	ldr	r2, [pc, #184]	; (8002bb4 <HAL_DMA_Init+0x1d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <HAL_DMA_Init+0x1d4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_DMA_Init+0x1d8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_DMA_Init+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_DMA_Init+0x1e0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_DMA_Init+0x1e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <HAL_DMA_Init+0x1e8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_DMA_Init+0x1ec>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_DMA_Init+0x1f0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_DMA_Init+0x1f4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d108      	bne.n	8002b6a <HAL_DMA_Init+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e007      	b.n	8002b7a <HAL_DMA_Init+0x196>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b7a:	e02f      	b.n	8002bdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7c:	f7ff fcfc 	bl	8002578 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d928      	bls.n	8002bdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2203      	movs	r2, #3
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e246      	b.n	800302a <HAL_DMA_Init+0x646>
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1c8      	bne.n	8002b7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4b83      	ldr	r3, [pc, #524]	; (8002e04 <HAL_DMA_Init+0x420>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d107      	bne.n	8002c40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c40:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <HAL_DMA_Init+0x424>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_DMA_Init+0x428>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4c:	d328      	bcc.n	8002ca0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b28      	cmp	r3, #40	; 0x28
 8002c54:	d903      	bls.n	8002c5e <HAL_DMA_Init+0x27a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c5c:	d917      	bls.n	8002c8e <HAL_DMA_Init+0x2aa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b3e      	cmp	r3, #62	; 0x3e
 8002c64:	d903      	bls.n	8002c6e <HAL_DMA_Init+0x28a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b42      	cmp	r3, #66	; 0x42
 8002c6c:	d90f      	bls.n	8002c8e <HAL_DMA_Init+0x2aa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b46      	cmp	r3, #70	; 0x46
 8002c74:	d903      	bls.n	8002c7e <HAL_DMA_Init+0x29a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b48      	cmp	r3, #72	; 0x48
 8002c7c:	d907      	bls.n	8002c8e <HAL_DMA_Init+0x2aa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b4e      	cmp	r3, #78	; 0x4e
 8002c84:	d905      	bls.n	8002c92 <HAL_DMA_Init+0x2ae>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b52      	cmp	r3, #82	; 0x52
 8002c8c:	d801      	bhi.n	8002c92 <HAL_DMA_Init+0x2ae>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_Init+0x2b0>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0307 	bic.w	r3, r3, #7
 8002cb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d117      	bne.n	8002cfa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 ff1b 	bl	8004b18 <DMA_CheckFifoParam>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e197      	b.n	800302a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fe56 	bl	80049b4 <DMA_CalcBaseAndBitshift>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e0cd      	b.n	8002eba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_DMA_Init+0x42c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_DMA_Init+0x430>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_DMA_Init+0x434>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <HAL_DMA_Init+0x438>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <HAL_DMA_Init+0x43c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <HAL_DMA_Init+0x440>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_DMA_Init+0x444>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a30      	ldr	r2, [pc, #192]	; (8002e2c <HAL_DMA_Init+0x448>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Init+0x38e>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_DMA_Init+0x390>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8097 	beq.w	8002ea8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_DMA_Init+0x42c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d021      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_DMA_Init+0x430>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01c      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_DMA_Init+0x434>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d017      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_DMA_Init+0x438>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d012      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_DMA_Init+0x43c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00d      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_DMA_Init+0x440>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d008      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_DMA_Init+0x444>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_DMA_Init+0x448>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_DMA_Init+0x44c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d020      	beq.n	8002e34 <HAL_DMA_Init+0x450>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d102      	bne.n	8002e00 <HAL_DMA_Init+0x41c>
 8002dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dfe:	e01a      	b.n	8002e36 <HAL_DMA_Init+0x452>
 8002e00:	2300      	movs	r3, #0
 8002e02:	e018      	b.n	8002e36 <HAL_DMA_Init+0x452>
 8002e04:	fe10803f 	.word	0xfe10803f
 8002e08:	5c001000 	.word	0x5c001000
 8002e0c:	ffff0000 	.word	0xffff0000
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494
 8002e30:	fffe000f 	.word	0xfffe000f
 8002e34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b6e      	ldr	r3, [pc, #440]	; (8003034 <HAL_DMA_Init+0x650>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_DMA_Init+0x654>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	009a      	lsls	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f001 fd91 	bl	80049b4 <DMA_CalcBaseAndBitshift>
 8002e92:	4603      	mov	r3, r0
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e008      	b.n	8002eba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0b7      	b.n	800302a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5f      	ldr	r2, [pc, #380]	; (800303c <HAL_DMA_Init+0x658>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d072      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5d      	ldr	r2, [pc, #372]	; (8003040 <HAL_DMA_Init+0x65c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d06d      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5c      	ldr	r2, [pc, #368]	; (8003044 <HAL_DMA_Init+0x660>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d068      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a5a      	ldr	r2, [pc, #360]	; (8003048 <HAL_DMA_Init+0x664>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d063      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a59      	ldr	r2, [pc, #356]	; (800304c <HAL_DMA_Init+0x668>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d05e      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_DMA_Init+0x66c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d059      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a56      	ldr	r2, [pc, #344]	; (8003054 <HAL_DMA_Init+0x670>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d054      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <HAL_DMA_Init+0x674>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04f      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a53      	ldr	r2, [pc, #332]	; (800305c <HAL_DMA_Init+0x678>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d04a      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a51      	ldr	r2, [pc, #324]	; (8003060 <HAL_DMA_Init+0x67c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d045      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a50      	ldr	r2, [pc, #320]	; (8003064 <HAL_DMA_Init+0x680>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d040      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_DMA_Init+0x684>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d03b      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4d      	ldr	r2, [pc, #308]	; (800306c <HAL_DMA_Init+0x688>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d036      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_DMA_Init+0x68c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_DMA_Init+0x690>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d02c      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a48      	ldr	r2, [pc, #288]	; (8003078 <HAL_DMA_Init+0x694>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d027      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_DMA_Init+0x698>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a45      	ldr	r2, [pc, #276]	; (8003080 <HAL_DMA_Init+0x69c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01d      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a44      	ldr	r2, [pc, #272]	; (8003084 <HAL_DMA_Init+0x6a0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d018      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_DMA_Init+0x6a4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_DMA_Init+0x6a8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <HAL_DMA_Init+0x6ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_DMA_Init+0x6b0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_DMA_Init+0x6b4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_DMA_Init+0x5ca>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_DMA_Init+0x5cc>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d032      	beq.n	800301a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 fe2b 	bl	8004c10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d102      	bne.n	8002fc8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_DMA_Init+0x624>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d80c      	bhi.n	8003008 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f001 fea8 	bl	8004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e008      	b.n	800301a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	a7fdabf8 	.word	0xa7fdabf8
 8003038:	cccccccd 	.word	0xcccccccd
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494

0800309c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff fa68 	bl	8002578 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e2dc      	b.n	800366e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d008      	beq.n	80030d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e2cd      	b.n	800366e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a76      	ldr	r2, [pc, #472]	; (80032b0 <HAL_DMA_Abort+0x214>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d04a      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a74      	ldr	r2, [pc, #464]	; (80032b4 <HAL_DMA_Abort+0x218>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d045      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a73      	ldr	r2, [pc, #460]	; (80032b8 <HAL_DMA_Abort+0x21c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d040      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a71      	ldr	r2, [pc, #452]	; (80032bc <HAL_DMA_Abort+0x220>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a70      	ldr	r2, [pc, #448]	; (80032c0 <HAL_DMA_Abort+0x224>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d036      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_DMA_Abort+0x228>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d031      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <HAL_DMA_Abort+0x22c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d02c      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6b      	ldr	r2, [pc, #428]	; (80032cc <HAL_DMA_Abort+0x230>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d027      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <HAL_DMA_Abort+0x234>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a68      	ldr	r2, [pc, #416]	; (80032d4 <HAL_DMA_Abort+0x238>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a67      	ldr	r2, [pc, #412]	; (80032d8 <HAL_DMA_Abort+0x23c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d018      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_DMA_Abort+0x240>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a64      	ldr	r2, [pc, #400]	; (80032e0 <HAL_DMA_Abort+0x244>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a62      	ldr	r2, [pc, #392]	; (80032e4 <HAL_DMA_Abort+0x248>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a61      	ldr	r2, [pc, #388]	; (80032e8 <HAL_DMA_Abort+0x24c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_DMA_Abort+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5f      	ldr	r2, [pc, #380]	; (80032ec <HAL_DMA_Abort+0x250>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_DMA_Abort+0xda>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_DMA_Abort+0xdc>
 8003176:	2300      	movs	r3, #0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 021e 	bic.w	r2, r2, #30
 800318a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e00a      	b.n	80031ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 020e 	bic.w	r2, r2, #14
 80031b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <HAL_DMA_Abort+0x214>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d072      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_DMA_Abort+0x218>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d06d      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a39      	ldr	r2, [pc, #228]	; (80032b8 <HAL_DMA_Abort+0x21c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d068      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_DMA_Abort+0x220>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d063      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <HAL_DMA_Abort+0x224>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d05e      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_DMA_Abort+0x228>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d059      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <HAL_DMA_Abort+0x22c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d054      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a31      	ldr	r2, [pc, #196]	; (80032cc <HAL_DMA_Abort+0x230>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d04f      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <HAL_DMA_Abort+0x234>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d04a      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2e      	ldr	r2, [pc, #184]	; (80032d4 <HAL_DMA_Abort+0x238>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d045      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2d      	ldr	r2, [pc, #180]	; (80032d8 <HAL_DMA_Abort+0x23c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d040      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <HAL_DMA_Abort+0x240>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d03b      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <HAL_DMA_Abort+0x244>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d036      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <HAL_DMA_Abort+0x248>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d031      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <HAL_DMA_Abort+0x24c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d02c      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a25      	ldr	r2, [pc, #148]	; (80032ec <HAL_DMA_Abort+0x250>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d027      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a24      	ldr	r2, [pc, #144]	; (80032f0 <HAL_DMA_Abort+0x254>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d022      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_DMA_Abort+0x258>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_DMA_Abort+0x25c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d018      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_DMA_Abort+0x260>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <HAL_DMA_Abort+0x264>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_DMA_Abort+0x268>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_DMA_Abort+0x26c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d004      	beq.n	80032aa <HAL_DMA_Abort+0x20e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_DMA_Abort+0x270>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d132      	bne.n	8003310 <HAL_DMA_Abort+0x274>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e031      	b.n	8003312 <HAL_DMA_Abort+0x276>
 80032ae:	bf00      	nop
 80032b0:	40020010 	.word	0x40020010
 80032b4:	40020028 	.word	0x40020028
 80032b8:	40020040 	.word	0x40020040
 80032bc:	40020058 	.word	0x40020058
 80032c0:	40020070 	.word	0x40020070
 80032c4:	40020088 	.word	0x40020088
 80032c8:	400200a0 	.word	0x400200a0
 80032cc:	400200b8 	.word	0x400200b8
 80032d0:	40020410 	.word	0x40020410
 80032d4:	40020428 	.word	0x40020428
 80032d8:	40020440 	.word	0x40020440
 80032dc:	40020458 	.word	0x40020458
 80032e0:	40020470 	.word	0x40020470
 80032e4:	40020488 	.word	0x40020488
 80032e8:	400204a0 	.word	0x400204a0
 80032ec:	400204b8 	.word	0x400204b8
 80032f0:	58025408 	.word	0x58025408
 80032f4:	5802541c 	.word	0x5802541c
 80032f8:	58025430 	.word	0x58025430
 80032fc:	58025444 	.word	0x58025444
 8003300:	58025458 	.word	0x58025458
 8003304:	5802546c 	.word	0x5802546c
 8003308:	58025480 	.word	0x58025480
 800330c:	58025494 	.word	0x58025494
 8003310:	2300      	movs	r3, #0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003324:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6d      	ldr	r2, [pc, #436]	; (80034e0 <HAL_DMA_Abort+0x444>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04a      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a6b      	ldr	r2, [pc, #428]	; (80034e4 <HAL_DMA_Abort+0x448>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d045      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_DMA_Abort+0x44c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a68      	ldr	r2, [pc, #416]	; (80034ec <HAL_DMA_Abort+0x450>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03b      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_DMA_Abort+0x454>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d036      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a65      	ldr	r2, [pc, #404]	; (80034f4 <HAL_DMA_Abort+0x458>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a64      	ldr	r2, [pc, #400]	; (80034f8 <HAL_DMA_Abort+0x45c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02c      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a62      	ldr	r2, [pc, #392]	; (80034fc <HAL_DMA_Abort+0x460>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a61      	ldr	r2, [pc, #388]	; (8003500 <HAL_DMA_Abort+0x464>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5f      	ldr	r2, [pc, #380]	; (8003504 <HAL_DMA_Abort+0x468>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5e      	ldr	r2, [pc, #376]	; (8003508 <HAL_DMA_Abort+0x46c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5c      	ldr	r2, [pc, #368]	; (800350c <HAL_DMA_Abort+0x470>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5b      	ldr	r2, [pc, #364]	; (8003510 <HAL_DMA_Abort+0x474>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a59      	ldr	r2, [pc, #356]	; (8003514 <HAL_DMA_Abort+0x478>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_DMA_Abort+0x47c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_Abort+0x32a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a56      	ldr	r2, [pc, #344]	; (800351c <HAL_DMA_Abort+0x480>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d108      	bne.n	80033d8 <HAL_DMA_Abort+0x33c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e007      	b.n	80033e8 <HAL_DMA_Abort+0x34c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033e8:	e013      	b.n	8003412 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ea:	f7ff f8c5 	bl	8002578 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d90c      	bls.n	8003412 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2203      	movs	r2, #3
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e12d      	b.n	800366e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e5      	bne.n	80033ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2f      	ldr	r2, [pc, #188]	; (80034e0 <HAL_DMA_Abort+0x444>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d04a      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2d      	ldr	r2, [pc, #180]	; (80034e4 <HAL_DMA_Abort+0x448>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d045      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <HAL_DMA_Abort+0x44c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d040      	beq.n	80034be <HAL_DMA_Abort+0x422>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <HAL_DMA_Abort+0x450>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d03b      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <HAL_DMA_Abort+0x454>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d036      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <HAL_DMA_Abort+0x458>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d031      	beq.n	80034be <HAL_DMA_Abort+0x422>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <HAL_DMA_Abort+0x45c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d02c      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a24      	ldr	r2, [pc, #144]	; (80034fc <HAL_DMA_Abort+0x460>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d027      	beq.n	80034be <HAL_DMA_Abort+0x422>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_DMA_Abort+0x464>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d022      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_DMA_Abort+0x468>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01d      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_DMA_Abort+0x46c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d018      	beq.n	80034be <HAL_DMA_Abort+0x422>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_DMA_Abort+0x470>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_DMA_Abort+0x422>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_DMA_Abort+0x474>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_DMA_Abort+0x422>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_DMA_Abort+0x478>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_DMA_Abort+0x422>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	; (8003518 <HAL_DMA_Abort+0x47c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_DMA_Abort+0x422>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_DMA_Abort+0x480>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_Abort+0x426>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_DMA_Abort+0x428>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02b      	beq.n	8003520 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	223f      	movs	r2, #63	; 0x3f
 80034d8:	409a      	lsls	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	e02a      	b.n	8003536 <HAL_DMA_Abort+0x49a>
 80034e0:	40020010 	.word	0x40020010
 80034e4:	40020028 	.word	0x40020028
 80034e8:	40020040 	.word	0x40020040
 80034ec:	40020058 	.word	0x40020058
 80034f0:	40020070 	.word	0x40020070
 80034f4:	40020088 	.word	0x40020088
 80034f8:	400200a0 	.word	0x400200a0
 80034fc:	400200b8 	.word	0x400200b8
 8003500:	40020410 	.word	0x40020410
 8003504:	40020428 	.word	0x40020428
 8003508:	40020440 	.word	0x40020440
 800350c:	40020458 	.word	0x40020458
 8003510:	40020470 	.word	0x40020470
 8003514:	40020488 	.word	0x40020488
 8003518:	400204a0 	.word	0x400204a0
 800351c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2201      	movs	r2, #1
 8003530:	409a      	lsls	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a4f      	ldr	r2, [pc, #316]	; (8003678 <HAL_DMA_Abort+0x5dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d072      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a4d      	ldr	r2, [pc, #308]	; (800367c <HAL_DMA_Abort+0x5e0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d06d      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_DMA_Abort+0x5e4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d068      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_DMA_Abort+0x5e8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d063      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a49      	ldr	r2, [pc, #292]	; (8003688 <HAL_DMA_Abort+0x5ec>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d05e      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a47      	ldr	r2, [pc, #284]	; (800368c <HAL_DMA_Abort+0x5f0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d059      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a46      	ldr	r2, [pc, #280]	; (8003690 <HAL_DMA_Abort+0x5f4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d054      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a44      	ldr	r2, [pc, #272]	; (8003694 <HAL_DMA_Abort+0x5f8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d04f      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_DMA_Abort+0x5fc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a41      	ldr	r2, [pc, #260]	; (800369c <HAL_DMA_Abort+0x600>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <HAL_DMA_Abort+0x604>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a3e      	ldr	r2, [pc, #248]	; (80036a4 <HAL_DMA_Abort+0x608>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <HAL_DMA_Abort+0x60c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3b      	ldr	r2, [pc, #236]	; (80036ac <HAL_DMA_Abort+0x610>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3a      	ldr	r2, [pc, #232]	; (80036b0 <HAL_DMA_Abort+0x614>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a38      	ldr	r2, [pc, #224]	; (80036b4 <HAL_DMA_Abort+0x618>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <HAL_DMA_Abort+0x61c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a35      	ldr	r2, [pc, #212]	; (80036bc <HAL_DMA_Abort+0x620>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a34      	ldr	r2, [pc, #208]	; (80036c0 <HAL_DMA_Abort+0x624>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a32      	ldr	r2, [pc, #200]	; (80036c4 <HAL_DMA_Abort+0x628>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_DMA_Abort+0x62c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2f      	ldr	r2, [pc, #188]	; (80036cc <HAL_DMA_Abort+0x630>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <HAL_DMA_Abort+0x634>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Abort+0x58a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <HAL_DMA_Abort+0x638>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_DMA_Abort+0x58e>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_DMA_Abort+0x590>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d015      	beq.n	800365c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003638:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800365a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40020010 	.word	0x40020010
 800367c:	40020028 	.word	0x40020028
 8003680:	40020040 	.word	0x40020040
 8003684:	40020058 	.word	0x40020058
 8003688:	40020070 	.word	0x40020070
 800368c:	40020088 	.word	0x40020088
 8003690:	400200a0 	.word	0x400200a0
 8003694:	400200b8 	.word	0x400200b8
 8003698:	40020410 	.word	0x40020410
 800369c:	40020428 	.word	0x40020428
 80036a0:	40020440 	.word	0x40020440
 80036a4:	40020458 	.word	0x40020458
 80036a8:	40020470 	.word	0x40020470
 80036ac:	40020488 	.word	0x40020488
 80036b0:	400204a0 	.word	0x400204a0
 80036b4:	400204b8 	.word	0x400204b8
 80036b8:	58025408 	.word	0x58025408
 80036bc:	5802541c 	.word	0x5802541c
 80036c0:	58025430 	.word	0x58025430
 80036c4:	58025444 	.word	0x58025444
 80036c8:	58025458 	.word	0x58025458
 80036cc:	5802546c 	.word	0x5802546c
 80036d0:	58025480 	.word	0x58025480
 80036d4:	58025494 	.word	0x58025494

080036d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e205      	b.n	8003af6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d004      	beq.n	8003700 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e1fa      	b.n	8003af6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a8c      	ldr	r2, [pc, #560]	; (8003938 <HAL_DMA_Abort_IT+0x260>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d04a      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a8b      	ldr	r2, [pc, #556]	; (800393c <HAL_DMA_Abort_IT+0x264>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d045      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a89      	ldr	r2, [pc, #548]	; (8003940 <HAL_DMA_Abort_IT+0x268>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d040      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a88      	ldr	r2, [pc, #544]	; (8003944 <HAL_DMA_Abort_IT+0x26c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d03b      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a86      	ldr	r2, [pc, #536]	; (8003948 <HAL_DMA_Abort_IT+0x270>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d036      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a85      	ldr	r2, [pc, #532]	; (800394c <HAL_DMA_Abort_IT+0x274>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d031      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a83      	ldr	r2, [pc, #524]	; (8003950 <HAL_DMA_Abort_IT+0x278>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02c      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a82      	ldr	r2, [pc, #520]	; (8003954 <HAL_DMA_Abort_IT+0x27c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d027      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a80      	ldr	r2, [pc, #512]	; (8003958 <HAL_DMA_Abort_IT+0x280>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7f      	ldr	r2, [pc, #508]	; (800395c <HAL_DMA_Abort_IT+0x284>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01d      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a7d      	ldr	r2, [pc, #500]	; (8003960 <HAL_DMA_Abort_IT+0x288>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_DMA_Abort_IT+0x28c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7a      	ldr	r2, [pc, #488]	; (8003968 <HAL_DMA_Abort_IT+0x290>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a79      	ldr	r2, [pc, #484]	; (800396c <HAL_DMA_Abort_IT+0x294>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a77      	ldr	r2, [pc, #476]	; (8003970 <HAL_DMA_Abort_IT+0x298>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_Abort_IT+0xc8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a76      	ldr	r2, [pc, #472]	; (8003974 <HAL_DMA_Abort_IT+0x29c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_Abort_IT+0xcc>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_Abort_IT+0xce>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d065      	beq.n	8003876 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_DMA_Abort_IT+0x260>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d04a      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a5e      	ldr	r2, [pc, #376]	; (800393c <HAL_DMA_Abort_IT+0x264>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d045      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <HAL_DMA_Abort_IT+0x268>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d040      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5b      	ldr	r2, [pc, #364]	; (8003944 <HAL_DMA_Abort_IT+0x26c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d03b      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <HAL_DMA_Abort_IT+0x270>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d036      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_DMA_Abort_IT+0x274>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d031      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_DMA_Abort_IT+0x278>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d02c      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a55      	ldr	r2, [pc, #340]	; (8003954 <HAL_DMA_Abort_IT+0x27c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d027      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a54      	ldr	r2, [pc, #336]	; (8003958 <HAL_DMA_Abort_IT+0x280>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a52      	ldr	r2, [pc, #328]	; (800395c <HAL_DMA_Abort_IT+0x284>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01d      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a51      	ldr	r2, [pc, #324]	; (8003960 <HAL_DMA_Abort_IT+0x288>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_DMA_Abort_IT+0x28c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a4e      	ldr	r2, [pc, #312]	; (8003968 <HAL_DMA_Abort_IT+0x290>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a4c      	ldr	r2, [pc, #304]	; (800396c <HAL_DMA_Abort_IT+0x294>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4b      	ldr	r2, [pc, #300]	; (8003970 <HAL_DMA_Abort_IT+0x298>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_DMA_Abort_IT+0x17a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a49      	ldr	r2, [pc, #292]	; (8003974 <HAL_DMA_Abort_IT+0x29c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d108      	bne.n	8003864 <HAL_DMA_Abort_IT+0x18c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e147      	b.n	8003af4 <HAL_DMA_Abort_IT+0x41c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e13e      	b.n	8003af4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 020e 	bic.w	r2, r2, #14
 8003884:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_DMA_Abort_IT+0x260>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d04a      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a29      	ldr	r2, [pc, #164]	; (800393c <HAL_DMA_Abort_IT+0x264>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d045      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <HAL_DMA_Abort_IT+0x268>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d040      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <HAL_DMA_Abort_IT+0x26c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d03b      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <HAL_DMA_Abort_IT+0x270>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d036      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_DMA_Abort_IT+0x274>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d031      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_DMA_Abort_IT+0x278>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d02c      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a20      	ldr	r2, [pc, #128]	; (8003954 <HAL_DMA_Abort_IT+0x27c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d027      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_DMA_Abort_IT+0x280>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d022      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <HAL_DMA_Abort_IT+0x284>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01d      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_DMA_Abort_IT+0x288>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_DMA_Abort_IT+0x28c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_DMA_Abort_IT+0x290>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_DMA_Abort_IT+0x294>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_DMA_Abort_IT+0x298>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_DMA_Abort_IT+0x24e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_DMA_Abort_IT+0x29c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d128      	bne.n	8003978 <HAL_DMA_Abort_IT+0x2a0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	e027      	b.n	8003988 <HAL_DMA_Abort_IT+0x2b0>
 8003938:	40020010 	.word	0x40020010
 800393c:	40020028 	.word	0x40020028
 8003940:	40020040 	.word	0x40020040
 8003944:	40020058 	.word	0x40020058
 8003948:	40020070 	.word	0x40020070
 800394c:	40020088 	.word	0x40020088
 8003950:	400200a0 	.word	0x400200a0
 8003954:	400200b8 	.word	0x400200b8
 8003958:	40020410 	.word	0x40020410
 800395c:	40020428 	.word	0x40020428
 8003960:	40020440 	.word	0x40020440
 8003964:	40020458 	.word	0x40020458
 8003968:	40020470 	.word	0x40020470
 800396c:	40020488 	.word	0x40020488
 8003970:	400204a0 	.word	0x400204a0
 8003974:	400204b8 	.word	0x400204b8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5c      	ldr	r2, [pc, #368]	; (8003b00 <HAL_DMA_Abort_IT+0x428>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d072      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5b      	ldr	r2, [pc, #364]	; (8003b04 <HAL_DMA_Abort_IT+0x42c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d06d      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a59      	ldr	r2, [pc, #356]	; (8003b08 <HAL_DMA_Abort_IT+0x430>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d068      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_DMA_Abort_IT+0x434>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d063      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a56      	ldr	r2, [pc, #344]	; (8003b10 <HAL_DMA_Abort_IT+0x438>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d05e      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a55      	ldr	r2, [pc, #340]	; (8003b14 <HAL_DMA_Abort_IT+0x43c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d059      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a53      	ldr	r2, [pc, #332]	; (8003b18 <HAL_DMA_Abort_IT+0x440>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d054      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_DMA_Abort_IT+0x444>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d04f      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a50      	ldr	r2, [pc, #320]	; (8003b20 <HAL_DMA_Abort_IT+0x448>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d04a      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4f      	ldr	r2, [pc, #316]	; (8003b24 <HAL_DMA_Abort_IT+0x44c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d045      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4d      	ldr	r2, [pc, #308]	; (8003b28 <HAL_DMA_Abort_IT+0x450>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d040      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4c      	ldr	r2, [pc, #304]	; (8003b2c <HAL_DMA_Abort_IT+0x454>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d03b      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a4a      	ldr	r2, [pc, #296]	; (8003b30 <HAL_DMA_Abort_IT+0x458>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d036      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a49      	ldr	r2, [pc, #292]	; (8003b34 <HAL_DMA_Abort_IT+0x45c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d031      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a47      	ldr	r2, [pc, #284]	; (8003b38 <HAL_DMA_Abort_IT+0x460>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02c      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <HAL_DMA_Abort_IT+0x464>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d027      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <HAL_DMA_Abort_IT+0x468>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a43      	ldr	r2, [pc, #268]	; (8003b44 <HAL_DMA_Abort_IT+0x46c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01d      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a41      	ldr	r2, [pc, #260]	; (8003b48 <HAL_DMA_Abort_IT+0x470>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <HAL_DMA_Abort_IT+0x474>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3e      	ldr	r2, [pc, #248]	; (8003b50 <HAL_DMA_Abort_IT+0x478>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <HAL_DMA_Abort_IT+0x47c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_DMA_Abort_IT+0x480>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x3a0>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <HAL_DMA_Abort_IT+0x484>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_DMA_Abort_IT+0x3a4>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_DMA_Abort_IT+0x3a6>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d028      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ab0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ad2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40020010 	.word	0x40020010
 8003b04:	40020028 	.word	0x40020028
 8003b08:	40020040 	.word	0x40020040
 8003b0c:	40020058 	.word	0x40020058
 8003b10:	40020070 	.word	0x40020070
 8003b14:	40020088 	.word	0x40020088
 8003b18:	400200a0 	.word	0x400200a0
 8003b1c:	400200b8 	.word	0x400200b8
 8003b20:	40020410 	.word	0x40020410
 8003b24:	40020428 	.word	0x40020428
 8003b28:	40020440 	.word	0x40020440
 8003b2c:	40020458 	.word	0x40020458
 8003b30:	40020470 	.word	0x40020470
 8003b34:	40020488 	.word	0x40020488
 8003b38:	400204a0 	.word	0x400204a0
 8003b3c:	400204b8 	.word	0x400204b8
 8003b40:	58025408 	.word	0x58025408
 8003b44:	5802541c 	.word	0x5802541c
 8003b48:	58025430 	.word	0x58025430
 8003b4c:	58025444 	.word	0x58025444
 8003b50:	58025458 	.word	0x58025458
 8003b54:	5802546c 	.word	0x5802546c
 8003b58:	58025480 	.word	0x58025480
 8003b5c:	58025494 	.word	0x58025494

08003b60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b6c:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_DMA_IRQHandler+0x1ac>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_DMA_IRQHandler+0x1b0>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5f      	ldr	r2, [pc, #380]	; (8003d14 <HAL_DMA_IRQHandler+0x1b4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d04a      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	; (8003d18 <HAL_DMA_IRQHandler+0x1b8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d045      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5c      	ldr	r2, [pc, #368]	; (8003d1c <HAL_DMA_IRQHandler+0x1bc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d040      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5a      	ldr	r2, [pc, #360]	; (8003d20 <HAL_DMA_IRQHandler+0x1c0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d03b      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a59      	ldr	r2, [pc, #356]	; (8003d24 <HAL_DMA_IRQHandler+0x1c4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d036      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a57      	ldr	r2, [pc, #348]	; (8003d28 <HAL_DMA_IRQHandler+0x1c8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d031      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a56      	ldr	r2, [pc, #344]	; (8003d2c <HAL_DMA_IRQHandler+0x1cc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d02c      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a54      	ldr	r2, [pc, #336]	; (8003d30 <HAL_DMA_IRQHandler+0x1d0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d027      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a53      	ldr	r2, [pc, #332]	; (8003d34 <HAL_DMA_IRQHandler+0x1d4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a51      	ldr	r2, [pc, #324]	; (8003d38 <HAL_DMA_IRQHandler+0x1d8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01d      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a50      	ldr	r2, [pc, #320]	; (8003d3c <HAL_DMA_IRQHandler+0x1dc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a4e      	ldr	r2, [pc, #312]	; (8003d40 <HAL_DMA_IRQHandler+0x1e0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_DMA_IRQHandler+0x1e4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_DMA_IRQHandler+0x1e8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_DMA_IRQHandler+0x1ec>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xd2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a48      	ldr	r2, [pc, #288]	; (8003d50 <HAL_DMA_IRQHandler+0x1f0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_DMA_IRQHandler+0xd6>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_DMA_IRQHandler+0xd8>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 842b 	beq.w	8004494 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2208      	movs	r2, #8
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80a2 	beq.w	8003d98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <HAL_DMA_IRQHandler+0x1b4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d04a      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <HAL_DMA_IRQHandler+0x1b8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d045      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <HAL_DMA_IRQHandler+0x1bc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d040      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <HAL_DMA_IRQHandler+0x1c0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d03b      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <HAL_DMA_IRQHandler+0x1c4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d036      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_DMA_IRQHandler+0x1c8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d031      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <HAL_DMA_IRQHandler+0x1cc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d02c      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <HAL_DMA_IRQHandler+0x1d0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d027      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_DMA_IRQHandler+0x1d4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <HAL_DMA_IRQHandler+0x1d8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_DMA_IRQHandler+0x1dc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <HAL_DMA_IRQHandler+0x1e0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_DMA_IRQHandler+0x1e4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <HAL_DMA_IRQHandler+0x1e8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <HAL_DMA_IRQHandler+0x1ec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x194>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <HAL_DMA_IRQHandler+0x1f0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d12f      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x1f4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e02e      	b.n	8003d68 <HAL_DMA_IRQHandler+0x208>
 8003d0a:	bf00      	nop
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	1b4e81b5 	.word	0x1b4e81b5
 8003d14:	40020010 	.word	0x40020010
 8003d18:	40020028 	.word	0x40020028
 8003d1c:	40020040 	.word	0x40020040
 8003d20:	40020058 	.word	0x40020058
 8003d24:	40020070 	.word	0x40020070
 8003d28:	40020088 	.word	0x40020088
 8003d2c:	400200a0 	.word	0x400200a0
 8003d30:	400200b8 	.word	0x400200b8
 8003d34:	40020410 	.word	0x40020410
 8003d38:	40020428 	.word	0x40020428
 8003d3c:	40020440 	.word	0x40020440
 8003d40:	40020458 	.word	0x40020458
 8003d44:	40020470 	.word	0x40020470
 8003d48:	40020488 	.word	0x40020488
 8003d4c:	400204a0 	.word	0x400204a0
 8003d50:	400204b8 	.word	0x400204b8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2208      	movs	r2, #8
 8003d86:	409a      	lsls	r2, r3
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0201 	orr.w	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d06e      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a69      	ldr	r2, [pc, #420]	; (8003f58 <HAL_DMA_IRQHandler+0x3f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d04a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a67      	ldr	r2, [pc, #412]	; (8003f5c <HAL_DMA_IRQHandler+0x3fc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d045      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a66      	ldr	r2, [pc, #408]	; (8003f60 <HAL_DMA_IRQHandler+0x400>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d040      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a64      	ldr	r2, [pc, #400]	; (8003f64 <HAL_DMA_IRQHandler+0x404>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03b      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <HAL_DMA_IRQHandler+0x408>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d036      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a61      	ldr	r2, [pc, #388]	; (8003f6c <HAL_DMA_IRQHandler+0x40c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d031      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a60      	ldr	r2, [pc, #384]	; (8003f70 <HAL_DMA_IRQHandler+0x410>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d02c      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5e      	ldr	r2, [pc, #376]	; (8003f74 <HAL_DMA_IRQHandler+0x414>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5d      	ldr	r2, [pc, #372]	; (8003f78 <HAL_DMA_IRQHandler+0x418>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5b      	ldr	r2, [pc, #364]	; (8003f7c <HAL_DMA_IRQHandler+0x41c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5a      	ldr	r2, [pc, #360]	; (8003f80 <HAL_DMA_IRQHandler+0x420>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a58      	ldr	r2, [pc, #352]	; (8003f84 <HAL_DMA_IRQHandler+0x424>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a57      	ldr	r2, [pc, #348]	; (8003f88 <HAL_DMA_IRQHandler+0x428>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a55      	ldr	r2, [pc, #340]	; (8003f8c <HAL_DMA_IRQHandler+0x42c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_DMA_IRQHandler+0x430>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x2ee>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a52      	ldr	r2, [pc, #328]	; (8003f94 <HAL_DMA_IRQHandler+0x434>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10a      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x304>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e003      	b.n	8003e6c <HAL_DMA_IRQHandler+0x30c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	f043 0202 	orr.w	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2204      	movs	r2, #4
 8003e96:	409a      	lsls	r2, r3
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 808f 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <HAL_DMA_IRQHandler+0x3f8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <HAL_DMA_IRQHandler+0x3fc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d045      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <HAL_DMA_IRQHandler+0x400>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d040      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <HAL_DMA_IRQHandler+0x404>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d03b      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <HAL_DMA_IRQHandler+0x408>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d036      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a24      	ldr	r2, [pc, #144]	; (8003f6c <HAL_DMA_IRQHandler+0x40c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d031      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_DMA_IRQHandler+0x410>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d02c      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <HAL_DMA_IRQHandler+0x414>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d027      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a20      	ldr	r2, [pc, #128]	; (8003f78 <HAL_DMA_IRQHandler+0x418>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <HAL_DMA_IRQHandler+0x41c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01d      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_DMA_IRQHandler+0x420>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_DMA_IRQHandler+0x424>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_DMA_IRQHandler+0x428>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_DMA_IRQHandler+0x42c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_DMA_IRQHandler+0x430>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x3e2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <HAL_DMA_IRQHandler+0x434>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d12a      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x438>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e023      	b.n	8003fa0 <HAL_DMA_IRQHandler+0x440>
 8003f58:	40020010 	.word	0x40020010
 8003f5c:	40020028 	.word	0x40020028
 8003f60:	40020040 	.word	0x40020040
 8003f64:	40020058 	.word	0x40020058
 8003f68:	40020070 	.word	0x40020070
 8003f6c:	40020088 	.word	0x40020088
 8003f70:	400200a0 	.word	0x400200a0
 8003f74:	400200b8 	.word	0x400200b8
 8003f78:	40020410 	.word	0x40020410
 8003f7c:	40020428 	.word	0x40020428
 8003f80:	40020440 	.word	0x40020440
 8003f84:	40020458 	.word	0x40020458
 8003f88:	40020470 	.word	0x40020470
 8003f8c:	40020488 	.word	0x40020488
 8003f90:	400204a0 	.word	0x400204a0
 8003f94:	400204b8 	.word	0x400204b8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2204      	movs	r2, #4
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2210      	movs	r2, #16
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80a6 	beq.w	8004122 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a85      	ldr	r2, [pc, #532]	; (80041f0 <HAL_DMA_IRQHandler+0x690>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d04a      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a83      	ldr	r2, [pc, #524]	; (80041f4 <HAL_DMA_IRQHandler+0x694>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d045      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a82      	ldr	r2, [pc, #520]	; (80041f8 <HAL_DMA_IRQHandler+0x698>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d040      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a80      	ldr	r2, [pc, #512]	; (80041fc <HAL_DMA_IRQHandler+0x69c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d03b      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7f      	ldr	r2, [pc, #508]	; (8004200 <HAL_DMA_IRQHandler+0x6a0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d036      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7d      	ldr	r2, [pc, #500]	; (8004204 <HAL_DMA_IRQHandler+0x6a4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d031      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7c      	ldr	r2, [pc, #496]	; (8004208 <HAL_DMA_IRQHandler+0x6a8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d02c      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_DMA_IRQHandler+0x6ac>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d027      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a79      	ldr	r2, [pc, #484]	; (8004210 <HAL_DMA_IRQHandler+0x6b0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a77      	ldr	r2, [pc, #476]	; (8004214 <HAL_DMA_IRQHandler+0x6b4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01d      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a76      	ldr	r2, [pc, #472]	; (8004218 <HAL_DMA_IRQHandler+0x6b8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d018      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a74      	ldr	r2, [pc, #464]	; (800421c <HAL_DMA_IRQHandler+0x6bc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a73      	ldr	r2, [pc, #460]	; (8004220 <HAL_DMA_IRQHandler+0x6c0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a71      	ldr	r2, [pc, #452]	; (8004224 <HAL_DMA_IRQHandler+0x6c4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a70      	ldr	r2, [pc, #448]	; (8004228 <HAL_DMA_IRQHandler+0x6c8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_DMA_IRQHandler+0x516>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_DMA_IRQHandler+0x6cc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10a      	bne.n	800408c <HAL_DMA_IRQHandler+0x52c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf14      	ite	ne
 8004084:	2301      	movne	r3, #1
 8004086:	2300      	moveq	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e009      	b.n	80040a0 <HAL_DMA_IRQHandler+0x540>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03e      	beq.n	8004122 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2210      	movs	r2, #16
 80040ae:	409a      	lsls	r2, r3
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d024      	beq.n	8004122 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
 80040e0:	e01f      	b.n	8004122 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01b      	beq.n	8004122 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
 80040f2:	e016      	b.n	8004122 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0208 	bic.w	r2, r2, #8
 8004110:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2220      	movs	r2, #32
 800412c:	409a      	lsls	r2, r3
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8110 	beq.w	8004358 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <HAL_DMA_IRQHandler+0x690>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d04a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <HAL_DMA_IRQHandler+0x694>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d045      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a29      	ldr	r2, [pc, #164]	; (80041f8 <HAL_DMA_IRQHandler+0x698>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d040      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a28      	ldr	r2, [pc, #160]	; (80041fc <HAL_DMA_IRQHandler+0x69c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d03b      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a26      	ldr	r2, [pc, #152]	; (8004200 <HAL_DMA_IRQHandler+0x6a0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d036      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a25      	ldr	r2, [pc, #148]	; (8004204 <HAL_DMA_IRQHandler+0x6a4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d031      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a23      	ldr	r2, [pc, #140]	; (8004208 <HAL_DMA_IRQHandler+0x6a8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d02c      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_DMA_IRQHandler+0x6ac>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d027      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a20      	ldr	r2, [pc, #128]	; (8004210 <HAL_DMA_IRQHandler+0x6b0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d022      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_DMA_IRQHandler+0x6b4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d01d      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_DMA_IRQHandler+0x6b8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d018      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_DMA_IRQHandler+0x6bc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d013      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <HAL_DMA_IRQHandler+0x6c0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00e      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_DMA_IRQHandler+0x6c4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d009      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_DMA_IRQHandler+0x6c8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x678>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_DMA_IRQHandler+0x6cc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d12b      	bne.n	8004230 <HAL_DMA_IRQHandler+0x6d0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	e02a      	b.n	8004244 <HAL_DMA_IRQHandler+0x6e4>
 80041ee:	bf00      	nop
 80041f0:	40020010 	.word	0x40020010
 80041f4:	40020028 	.word	0x40020028
 80041f8:	40020040 	.word	0x40020040
 80041fc:	40020058 	.word	0x40020058
 8004200:	40020070 	.word	0x40020070
 8004204:	40020088 	.word	0x40020088
 8004208:	400200a0 	.word	0x400200a0
 800420c:	400200b8 	.word	0x400200b8
 8004210:	40020410 	.word	0x40020410
 8004214:	40020428 	.word	0x40020428
 8004218:	40020440 	.word	0x40020440
 800421c:	40020458 	.word	0x40020458
 8004220:	40020470 	.word	0x40020470
 8004224:	40020488 	.word	0x40020488
 8004228:	400204a0 	.word	0x400204a0
 800422c:	400204b8 	.word	0x400204b8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8087 	beq.w	8004358 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2220      	movs	r2, #32
 8004254:	409a      	lsls	r2, r3
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b04      	cmp	r3, #4
 8004264:	d139      	bne.n	80042da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0216 	bic.w	r2, r2, #22
 8004274:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004284:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_DMA_IRQHandler+0x736>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004292:	2b00      	cmp	r3, #0
 8004294:	d007      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0208 	bic.w	r2, r2, #8
 80042a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	223f      	movs	r2, #63	; 0x3f
 80042b0:	409a      	lsls	r2, r3
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 834a 	beq.w	8004964 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
          }
          return;
 80042d8:	e344      	b.n	8004964 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e027      	b.n	8004358 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
 8004318:	e01e      	b.n	8004358 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0210 	bic.w	r2, r2, #16
 8004336:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8306 	beq.w	800496e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8088 	beq.w	8004480 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2204      	movs	r2, #4
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_DMA_IRQHandler+0xa08>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d04a      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a79      	ldr	r2, [pc, #484]	; (800456c <HAL_DMA_IRQHandler+0xa0c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d045      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a77      	ldr	r2, [pc, #476]	; (8004570 <HAL_DMA_IRQHandler+0xa10>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d040      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a76      	ldr	r2, [pc, #472]	; (8004574 <HAL_DMA_IRQHandler+0xa14>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d03b      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_DMA_IRQHandler+0xa18>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d036      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	; (800457c <HAL_DMA_IRQHandler+0xa1c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d031      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a71      	ldr	r2, [pc, #452]	; (8004580 <HAL_DMA_IRQHandler+0xa20>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02c      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_DMA_IRQHandler+0xa24>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d027      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_DMA_IRQHandler+0xa28>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6d      	ldr	r2, [pc, #436]	; (800458c <HAL_DMA_IRQHandler+0xa2c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01d      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_DMA_IRQHandler+0xa30>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6a      	ldr	r2, [pc, #424]	; (8004594 <HAL_DMA_IRQHandler+0xa34>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_DMA_IRQHandler+0xa38>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a67      	ldr	r2, [pc, #412]	; (800459c <HAL_DMA_IRQHandler+0xa3c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_DMA_IRQHandler+0xa40>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_DMA_IRQHandler+0x8b8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a64      	ldr	r2, [pc, #400]	; (80045a4 <HAL_DMA_IRQHandler+0xa44>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d108      	bne.n	800442a <HAL_DMA_IRQHandler+0x8ca>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0201 	bic.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e007      	b.n	800443a <HAL_DMA_IRQHandler+0x8da>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	429a      	cmp	r2, r3
 8004444:	d307      	bcc.n	8004456 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f2      	bne.n	800443a <HAL_DMA_IRQHandler+0x8da>
 8004454:	e000      	b.n	8004458 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004456:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2203      	movs	r2, #3
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004476:	e003      	b.n	8004480 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8272 	beq.w	800496e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
 8004492:	e26c      	b.n	800496e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a43      	ldr	r2, [pc, #268]	; (80045a8 <HAL_DMA_IRQHandler+0xa48>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d022      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a42      	ldr	r2, [pc, #264]	; (80045ac <HAL_DMA_IRQHandler+0xa4c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d01d      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <HAL_DMA_IRQHandler+0xa50>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d018      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3f      	ldr	r2, [pc, #252]	; (80045b4 <HAL_DMA_IRQHandler+0xa54>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <HAL_DMA_IRQHandler+0xa58>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00e      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <HAL_DMA_IRQHandler+0xa5c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3a      	ldr	r2, [pc, #232]	; (80045c0 <HAL_DMA_IRQHandler+0xa60>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x984>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a39      	ldr	r2, [pc, #228]	; (80045c4 <HAL_DMA_IRQHandler+0xa64>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d101      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x988>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <HAL_DMA_IRQHandler+0x98a>
 80044e8:	2300      	movs	r3, #0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 823f 	beq.w	800496e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2204      	movs	r2, #4
 8004502:	409a      	lsls	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80cd 	beq.w	80046a8 <HAL_DMA_IRQHandler+0xb48>
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80c7 	beq.w	80046a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	2204      	movs	r2, #4
 8004524:	409a      	lsls	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d049      	beq.n	80045c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8210 	beq.w	8004968 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004550:	e20a      	b.n	8004968 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8206 	beq.w	8004968 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004564:	e200      	b.n	8004968 <HAL_DMA_IRQHandler+0xe08>
 8004566:	bf00      	nop
 8004568:	40020010 	.word	0x40020010
 800456c:	40020028 	.word	0x40020028
 8004570:	40020040 	.word	0x40020040
 8004574:	40020058 	.word	0x40020058
 8004578:	40020070 	.word	0x40020070
 800457c:	40020088 	.word	0x40020088
 8004580:	400200a0 	.word	0x400200a0
 8004584:	400200b8 	.word	0x400200b8
 8004588:	40020410 	.word	0x40020410
 800458c:	40020428 	.word	0x40020428
 8004590:	40020440 	.word	0x40020440
 8004594:	40020458 	.word	0x40020458
 8004598:	40020470 	.word	0x40020470
 800459c:	40020488 	.word	0x40020488
 80045a0:	400204a0 	.word	0x400204a0
 80045a4:	400204b8 	.word	0x400204b8
 80045a8:	58025408 	.word	0x58025408
 80045ac:	5802541c 	.word	0x5802541c
 80045b0:	58025430 	.word	0x58025430
 80045b4:	58025444 	.word	0x58025444
 80045b8:	58025458 	.word	0x58025458
 80045bc:	5802546c 	.word	0x5802546c
 80045c0:	58025480 	.word	0x58025480
 80045c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d160      	bne.n	8004694 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a8c      	ldr	r2, [pc, #560]	; (8004808 <HAL_DMA_IRQHandler+0xca8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04a      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a8a      	ldr	r2, [pc, #552]	; (800480c <HAL_DMA_IRQHandler+0xcac>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d045      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a89      	ldr	r2, [pc, #548]	; (8004810 <HAL_DMA_IRQHandler+0xcb0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d040      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a87      	ldr	r2, [pc, #540]	; (8004814 <HAL_DMA_IRQHandler+0xcb4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d03b      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a86      	ldr	r2, [pc, #536]	; (8004818 <HAL_DMA_IRQHandler+0xcb8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d036      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a84      	ldr	r2, [pc, #528]	; (800481c <HAL_DMA_IRQHandler+0xcbc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d031      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a83      	ldr	r2, [pc, #524]	; (8004820 <HAL_DMA_IRQHandler+0xcc0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d02c      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a81      	ldr	r2, [pc, #516]	; (8004824 <HAL_DMA_IRQHandler+0xcc4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d027      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a80      	ldr	r2, [pc, #512]	; (8004828 <HAL_DMA_IRQHandler+0xcc8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7e      	ldr	r2, [pc, #504]	; (800482c <HAL_DMA_IRQHandler+0xccc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01d      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7d      	ldr	r2, [pc, #500]	; (8004830 <HAL_DMA_IRQHandler+0xcd0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7b      	ldr	r2, [pc, #492]	; (8004834 <HAL_DMA_IRQHandler+0xcd4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7a      	ldr	r2, [pc, #488]	; (8004838 <HAL_DMA_IRQHandler+0xcd8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a78      	ldr	r2, [pc, #480]	; (800483c <HAL_DMA_IRQHandler+0xcdc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a77      	ldr	r2, [pc, #476]	; (8004840 <HAL_DMA_IRQHandler+0xce0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_DMA_IRQHandler+0xb12>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a75      	ldr	r2, [pc, #468]	; (8004844 <HAL_DMA_IRQHandler+0xce4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d108      	bne.n	8004684 <HAL_DMA_IRQHandler+0xb24>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0208 	bic.w	r2, r2, #8
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e007      	b.n	8004694 <HAL_DMA_IRQHandler+0xb34>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8165 	beq.w	8004968 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a6:	e15f      	b.n	8004968 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2202      	movs	r2, #2
 80046b2:	409a      	lsls	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80c5 	beq.w	8004848 <HAL_DMA_IRQHandler+0xce8>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80bf 	beq.w	8004848 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2202      	movs	r2, #2
 80046d4:	409a      	lsls	r2, r3
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 813a 	beq.w	800496c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004700:	e134      	b.n	800496c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8130 	beq.w	800496c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004714:	e12a      	b.n	800496c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d168      	bne.n	80047f2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <HAL_DMA_IRQHandler+0xca8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04a      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a37      	ldr	r2, [pc, #220]	; (800480c <HAL_DMA_IRQHandler+0xcac>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d045      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a35      	ldr	r2, [pc, #212]	; (8004810 <HAL_DMA_IRQHandler+0xcb0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d040      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a34      	ldr	r2, [pc, #208]	; (8004814 <HAL_DMA_IRQHandler+0xcb4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d03b      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a32      	ldr	r2, [pc, #200]	; (8004818 <HAL_DMA_IRQHandler+0xcb8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d036      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a31      	ldr	r2, [pc, #196]	; (800481c <HAL_DMA_IRQHandler+0xcbc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d031      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <HAL_DMA_IRQHandler+0xcc0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d02c      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <HAL_DMA_IRQHandler+0xcc4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d027      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_DMA_IRQHandler+0xcc8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2b      	ldr	r2, [pc, #172]	; (800482c <HAL_DMA_IRQHandler+0xccc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d01d      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a29      	ldr	r2, [pc, #164]	; (8004830 <HAL_DMA_IRQHandler+0xcd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_DMA_IRQHandler+0xcd4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_DMA_IRQHandler+0xcd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a25      	ldr	r2, [pc, #148]	; (800483c <HAL_DMA_IRQHandler+0xcdc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a23      	ldr	r2, [pc, #140]	; (8004840 <HAL_DMA_IRQHandler+0xce0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xc60>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a22      	ldr	r2, [pc, #136]	; (8004844 <HAL_DMA_IRQHandler+0xce4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <HAL_DMA_IRQHandler+0xc72>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0214 	bic.w	r2, r2, #20
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e007      	b.n	80047e2 <HAL_DMA_IRQHandler+0xc82>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 020a 	bic.w	r2, r2, #10
 80047e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80b8 	beq.w	800496c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004804:	e0b2      	b.n	800496c <HAL_DMA_IRQHandler+0xe0c>
 8004806:	bf00      	nop
 8004808:	40020010 	.word	0x40020010
 800480c:	40020028 	.word	0x40020028
 8004810:	40020040 	.word	0x40020040
 8004814:	40020058 	.word	0x40020058
 8004818:	40020070 	.word	0x40020070
 800481c:	40020088 	.word	0x40020088
 8004820:	400200a0 	.word	0x400200a0
 8004824:	400200b8 	.word	0x400200b8
 8004828:	40020410 	.word	0x40020410
 800482c:	40020428 	.word	0x40020428
 8004830:	40020440 	.word	0x40020440
 8004834:	40020458 	.word	0x40020458
 8004838:	40020470 	.word	0x40020470
 800483c:	40020488 	.word	0x40020488
 8004840:	400204a0 	.word	0x400204a0
 8004844:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2208      	movs	r2, #8
 8004852:	409a      	lsls	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4013      	ands	r3, r2
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8088 	beq.w	800496e <HAL_DMA_IRQHandler+0xe0e>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8082 	beq.w	800496e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a41      	ldr	r2, [pc, #260]	; (8004974 <HAL_DMA_IRQHandler+0xe14>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04a      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <HAL_DMA_IRQHandler+0xe18>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d045      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3e      	ldr	r2, [pc, #248]	; (800497c <HAL_DMA_IRQHandler+0xe1c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3c      	ldr	r2, [pc, #240]	; (8004980 <HAL_DMA_IRQHandler+0xe20>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d03b      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <HAL_DMA_IRQHandler+0xe24>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d036      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a39      	ldr	r2, [pc, #228]	; (8004988 <HAL_DMA_IRQHandler+0xe28>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d031      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a38      	ldr	r2, [pc, #224]	; (800498c <HAL_DMA_IRQHandler+0xe2c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d02c      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a36      	ldr	r2, [pc, #216]	; (8004990 <HAL_DMA_IRQHandler+0xe30>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d027      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a35      	ldr	r2, [pc, #212]	; (8004994 <HAL_DMA_IRQHandler+0xe34>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a33      	ldr	r2, [pc, #204]	; (8004998 <HAL_DMA_IRQHandler+0xe38>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01d      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a32      	ldr	r2, [pc, #200]	; (800499c <HAL_DMA_IRQHandler+0xe3c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a30      	ldr	r2, [pc, #192]	; (80049a0 <HAL_DMA_IRQHandler+0xe40>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <HAL_DMA_IRQHandler+0xe44>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <HAL_DMA_IRQHandler+0xe48>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <HAL_DMA_IRQHandler+0xe4c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_DMA_IRQHandler+0xdaa>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <HAL_DMA_IRQHandler+0xe50>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d108      	bne.n	800491c <HAL_DMA_IRQHandler+0xdbc>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 021c 	bic.w	r2, r2, #28
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e007      	b.n	800492c <HAL_DMA_IRQHandler+0xdcc>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 020e 	bic.w	r2, r2, #14
 800492a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
 8004962:	e004      	b.n	800496e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004964:	bf00      	nop
 8004966:	e002      	b.n	800496e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800496c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800496e:	3728      	adds	r7, #40	; 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40020010 	.word	0x40020010
 8004978:	40020028 	.word	0x40020028
 800497c:	40020040 	.word	0x40020040
 8004980:	40020058 	.word	0x40020058
 8004984:	40020070 	.word	0x40020070
 8004988:	40020088 	.word	0x40020088
 800498c:	400200a0 	.word	0x400200a0
 8004990:	400200b8 	.word	0x400200b8
 8004994:	40020410 	.word	0x40020410
 8004998:	40020428 	.word	0x40020428
 800499c:	40020440 	.word	0x40020440
 80049a0:	40020458 	.word	0x40020458
 80049a4:	40020470 	.word	0x40020470
 80049a8:	40020488 	.word	0x40020488
 80049ac:	400204a0 	.word	0x400204a0
 80049b0:	400204b8 	.word	0x400204b8

080049b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a42      	ldr	r2, [pc, #264]	; (8004acc <DMA_CalcBaseAndBitshift+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d04a      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a41      	ldr	r2, [pc, #260]	; (8004ad0 <DMA_CalcBaseAndBitshift+0x11c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d045      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a3f      	ldr	r2, [pc, #252]	; (8004ad4 <DMA_CalcBaseAndBitshift+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d040      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3e      	ldr	r2, [pc, #248]	; (8004ad8 <DMA_CalcBaseAndBitshift+0x124>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d03b      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a3c      	ldr	r2, [pc, #240]	; (8004adc <DMA_CalcBaseAndBitshift+0x128>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d036      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a3b      	ldr	r2, [pc, #236]	; (8004ae0 <DMA_CalcBaseAndBitshift+0x12c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d031      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a39      	ldr	r2, [pc, #228]	; (8004ae4 <DMA_CalcBaseAndBitshift+0x130>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02c      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <DMA_CalcBaseAndBitshift+0x134>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d027      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a36      	ldr	r2, [pc, #216]	; (8004aec <DMA_CalcBaseAndBitshift+0x138>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d022      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d01d      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a33      	ldr	r2, [pc, #204]	; (8004af4 <DMA_CalcBaseAndBitshift+0x140>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d018      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <DMA_CalcBaseAndBitshift+0x144>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d013      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a30      	ldr	r2, [pc, #192]	; (8004afc <DMA_CalcBaseAndBitshift+0x148>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00e      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d009      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <DMA_CalcBaseAndBitshift+0x150>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <DMA_CalcBaseAndBitshift+0xa8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2c      	ldr	r2, [pc, #176]	; (8004b08 <DMA_CalcBaseAndBitshift+0x154>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <DMA_CalcBaseAndBitshift+0xac>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <DMA_CalcBaseAndBitshift+0xae>
 8004a60:	2300      	movs	r3, #0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d024      	beq.n	8004ab0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	3b10      	subs	r3, #16
 8004a6e:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <DMA_CalcBaseAndBitshift+0x158>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a80:	5cd3      	ldrb	r3, [r2, r3]
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d908      	bls.n	8004aa0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <DMA_CalcBaseAndBitshift+0x160>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	1d1a      	adds	r2, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a9e:	e00d      	b.n	8004abc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <DMA_CalcBaseAndBitshift+0x160>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6593      	str	r3, [r2, #88]	; 0x58
 8004aae:	e005      	b.n	8004abc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	aaaaaaab 	.word	0xaaaaaaab
 8004b10:	0800dad8 	.word	0x0800dad8
 8004b14:	fffffc00 	.word	0xfffffc00

08004b18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d120      	bne.n	8004b6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d858      	bhi.n	8004be6 <DMA_CheckFifoParam+0xce>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <DMA_CheckFifoParam+0x24>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b5f 	.word	0x08004b5f
 8004b44:	08004b4d 	.word	0x08004b4d
 8004b48:	08004be7 	.word	0x08004be7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d048      	beq.n	8004bea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b5c:	e045      	b.n	8004bea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b66:	d142      	bne.n	8004bee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b6c:	e03f      	b.n	8004bee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b76:	d123      	bne.n	8004bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d838      	bhi.n	8004bf2 <DMA_CheckFifoParam+0xda>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <DMA_CheckFifoParam+0x70>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004b9f 	.word	0x08004b9f
 8004b90:	08004b99 	.word	0x08004b99
 8004b94:	08004bb1 	.word	0x08004bb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b9c:	e030      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d025      	beq.n	8004bf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bae:	e022      	b.n	8004bf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb8:	d11f      	bne.n	8004bfa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bbe:	e01c      	b.n	8004bfa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d902      	bls.n	8004bce <DMA_CheckFifoParam+0xb6>
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d003      	beq.n	8004bd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004bcc:	e018      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd2:	e015      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
    break;
 8004be4:	e00b      	b.n	8004bfe <DMA_CheckFifoParam+0xe6>
        break;
 8004be6:	bf00      	nop
 8004be8:	e00a      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        break;
 8004bea:	bf00      	nop
 8004bec:	e008      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e006      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        break;
 8004bf2:	bf00      	nop
 8004bf4:	e004      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        break;
 8004bf6:	bf00      	nop
 8004bf8:	e002      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <DMA_CheckFifoParam+0xe8>
    break;
 8004bfe:	bf00      	nop
    }
  }

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a38      	ldr	r2, [pc, #224]	; (8004d04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d022      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a36      	ldr	r2, [pc, #216]	; (8004d08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01d      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a35      	ldr	r2, [pc, #212]	; (8004d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a33      	ldr	r2, [pc, #204]	; (8004d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a32      	ldr	r2, [pc, #200]	; (8004d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a30      	ldr	r2, [pc, #192]	; (8004d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01a      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	3b08      	subs	r3, #8
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cac:	e024      	b.n	8004cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	3b10      	subs	r3, #16
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d806      	bhi.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d902      	bls.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a16      	ldr	r2, [pc, #88]	; (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ce8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	58025408 	.word	0x58025408
 8004d08:	5802541c 	.word	0x5802541c
 8004d0c:	58025430 	.word	0x58025430
 8004d10:	58025444 	.word	0x58025444
 8004d14:	58025458 	.word	0x58025458
 8004d18:	5802546c 	.word	0x5802546c
 8004d1c:	58025480 	.word	0x58025480
 8004d20:	58025494 	.word	0x58025494
 8004d24:	cccccccd 	.word	0xcccccccd
 8004d28:	16009600 	.word	0x16009600
 8004d2c:	58025880 	.word	0x58025880
 8004d30:	aaaaaaab 	.word	0xaaaaaaab
 8004d34:	400204b8 	.word	0x400204b8
 8004d38:	4002040f 	.word	0x4002040f
 8004d3c:	10008200 	.word	0x10008200
 8004d40:	40020880 	.word	0x40020880

08004d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d04a      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d847      	bhi.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d018      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004dcc:	671a      	str	r2, [r3, #112]	; 0x70
 8004dce:	e009      	b.n	8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a11      	ldr	r2, [pc, #68]	; (8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004de2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	58025408 	.word	0x58025408
 8004e00:	5802541c 	.word	0x5802541c
 8004e04:	58025430 	.word	0x58025430
 8004e08:	58025444 	.word	0x58025444
 8004e0c:	58025458 	.word	0x58025458
 8004e10:	5802546c 	.word	0x5802546c
 8004e14:	58025480 	.word	0x58025480
 8004e18:	58025494 	.word	0x58025494
 8004e1c:	1600963f 	.word	0x1600963f
 8004e20:	58025940 	.word	0x58025940
 8004e24:	1000823f 	.word	0x1000823f
 8004e28:	40020940 	.word	0x40020940

08004e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b089      	sub	sp, #36	; 0x24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e3a:	4b89      	ldr	r3, [pc, #548]	; (8005060 <HAL_GPIO_Init+0x234>)
 8004e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e3e:	e194      	b.n	800516a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2101      	movs	r1, #1
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8186 	beq.w	8005164 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d00b      	beq.n	8004e78 <HAL_GPIO_Init+0x4c>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d007      	beq.n	8004e78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e6c:	2b11      	cmp	r3, #17
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b12      	cmp	r3, #18
 8004e76:	d130      	bne.n	8004eda <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	2203      	movs	r2, #3
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eae:	2201      	movs	r2, #1
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	f003 0201 	and.w	r2, r3, #1
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_Init+0xee>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b12      	cmp	r3, #18
 8004f18:	d123      	bne.n	8004f62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	08da      	lsrs	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3208      	adds	r2, #8
 8004f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	220f      	movs	r2, #15
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	08da      	lsrs	r2, r3, #3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3208      	adds	r2, #8
 8004f5c:	69b9      	ldr	r1, [r7, #24]
 8004f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0203 	and.w	r2, r3, #3
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80e0 	beq.w	8005164 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <HAL_GPIO_Init+0x238>)
 8004fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004faa:	4a2e      	ldr	r2, [pc, #184]	; (8005064 <HAL_GPIO_Init+0x238>)
 8004fac:	f043 0302 	orr.w	r3, r3, #2
 8004fb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004fb4:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <HAL_GPIO_Init+0x238>)
 8004fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fc2:	4a29      	ldr	r2, [pc, #164]	; (8005068 <HAL_GPIO_Init+0x23c>)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	089b      	lsrs	r3, r3, #2
 8004fc8:	3302      	adds	r3, #2
 8004fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	220f      	movs	r2, #15
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	; (800506c <HAL_GPIO_Init+0x240>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d052      	beq.n	8005094 <HAL_GPIO_Init+0x268>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_GPIO_Init+0x244>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d031      	beq.n	800505a <HAL_GPIO_Init+0x22e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <HAL_GPIO_Init+0x248>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <HAL_GPIO_Init+0x22a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <HAL_GPIO_Init+0x24c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d025      	beq.n	8005052 <HAL_GPIO_Init+0x226>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <HAL_GPIO_Init+0x250>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01f      	beq.n	800504e <HAL_GPIO_Init+0x222>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_GPIO_Init+0x254>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d019      	beq.n	800504a <HAL_GPIO_Init+0x21e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_GPIO_Init+0x258>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_GPIO_Init+0x21a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <HAL_GPIO_Init+0x25c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00d      	beq.n	8005042 <HAL_GPIO_Init+0x216>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_GPIO_Init+0x260>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <HAL_GPIO_Init+0x212>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a17      	ldr	r2, [pc, #92]	; (8005090 <HAL_GPIO_Init+0x264>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_GPIO_Init+0x20e>
 8005036:	2309      	movs	r3, #9
 8005038:	e02d      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 800503a:	230a      	movs	r3, #10
 800503c:	e02b      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 800503e:	2308      	movs	r3, #8
 8005040:	e029      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 8005042:	2307      	movs	r3, #7
 8005044:	e027      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 8005046:	2306      	movs	r3, #6
 8005048:	e025      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 800504a:	2305      	movs	r3, #5
 800504c:	e023      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 800504e:	2304      	movs	r3, #4
 8005050:	e021      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 8005052:	2303      	movs	r3, #3
 8005054:	e01f      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 8005056:	2302      	movs	r3, #2
 8005058:	e01d      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 800505a:	2301      	movs	r3, #1
 800505c:	e01b      	b.n	8005096 <HAL_GPIO_Init+0x26a>
 800505e:	bf00      	nop
 8005060:	58000080 	.word	0x58000080
 8005064:	58024400 	.word	0x58024400
 8005068:	58000400 	.word	0x58000400
 800506c:	58020000 	.word	0x58020000
 8005070:	58020400 	.word	0x58020400
 8005074:	58020800 	.word	0x58020800
 8005078:	58020c00 	.word	0x58020c00
 800507c:	58021000 	.word	0x58021000
 8005080:	58021400 	.word	0x58021400
 8005084:	58021800 	.word	0x58021800
 8005088:	58021c00 	.word	0x58021c00
 800508c:	58022000 	.word	0x58022000
 8005090:	58022400 	.word	0x58022400
 8005094:	2300      	movs	r3, #0
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	f002 0203 	and.w	r2, r2, #3
 800509c:	0092      	lsls	r2, r2, #2
 800509e:	4093      	lsls	r3, r2
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050a6:	4938      	ldr	r1, [pc, #224]	; (8005188 <HAL_GPIO_Init+0x35c>)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	089b      	lsrs	r3, r3, #2
 80050ac:	3302      	adds	r3, #2
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800512e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800515c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	3301      	adds	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	f47f ae63 	bne.w	8004e40 <HAL_GPIO_Init+0x14>
  }
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	3724      	adds	r7, #36	; 0x24
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	58000400 	.word	0x58000400

0800518c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
 8005198:	4613      	mov	r3, r2
 800519a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800519c:	787b      	ldrb	r3, [r7, #1]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051a8:	e003      	b.n	80051b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	041a      	lsls	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	619a      	str	r2, [r3, #24]
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	4603      	mov	r3, r0
 80051c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fc fa21 	bl	800162c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <HAL_PWREx_ConfigSupply+0x70>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b04      	cmp	r3, #4
 8005206:	d00a      	beq.n	800521e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005208:	4b16      	ldr	r3, [pc, #88]	; (8005264 <HAL_PWREx_ConfigSupply+0x70>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e01f      	b.n	800525a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e01d      	b.n	800525a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800521e:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_PWREx_ConfigSupply+0x70>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f023 0207 	bic.w	r2, r3, #7
 8005226:	490f      	ldr	r1, [pc, #60]	; (8005264 <HAL_PWREx_ConfigSupply+0x70>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4313      	orrs	r3, r2
 800522c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800522e:	f7fd f9a3 	bl	8002578 <HAL_GetTick>
 8005232:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005234:	e009      	b.n	800524a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005236:	f7fd f99f 	bl	8002578 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005244:	d901      	bls.n	800524a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e007      	b.n	800525a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_PWREx_ConfigSupply+0x70>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005256:	d1ee      	bne.n	8005236 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024800 	.word	0x58024800

08005268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08c      	sub	sp, #48	; 0x30
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e3ff      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8087 	beq.w	8005396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005288:	4b99      	ldr	r3, [pc, #612]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005292:	4b97      	ldr	r3, [pc, #604]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b10      	cmp	r3, #16
 800529c:	d007      	beq.n	80052ae <HAL_RCC_OscConfig+0x46>
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b18      	cmp	r3, #24
 80052a2:	d110      	bne.n	80052c6 <HAL_RCC_OscConfig+0x5e>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d10b      	bne.n	80052c6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ae:	4b90      	ldr	r3, [pc, #576]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d06c      	beq.n	8005394 <HAL_RCC_OscConfig+0x12c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d168      	bne.n	8005394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e3d9      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x76>
 80052d0:	4b87      	ldr	r3, [pc, #540]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a86      	ldr	r2, [pc, #536]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e02e      	b.n	800533c <HAL_RCC_OscConfig+0xd4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x98>
 80052e6:	4b82      	ldr	r3, [pc, #520]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a81      	ldr	r2, [pc, #516]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b7f      	ldr	r3, [pc, #508]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7e      	ldr	r2, [pc, #504]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80052f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e01d      	b.n	800533c <HAL_RCC_OscConfig+0xd4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0xbc>
 800530a:	4b79      	ldr	r3, [pc, #484]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4b76      	ldr	r3, [pc, #472]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a75      	ldr	r2, [pc, #468]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0xd4>
 8005324:	4b72      	ldr	r3, [pc, #456]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a71      	ldr	r2, [pc, #452]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800532a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	4b6f      	ldr	r3, [pc, #444]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6e      	ldr	r2, [pc, #440]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d013      	beq.n	800536c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fd f918 	bl	8002578 <HAL_GetTick>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fd f914 	bl	8002578 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e38d      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800535e:	4b64      	ldr	r3, [pc, #400]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0xe4>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd f904 	bl	8002578 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005374:	f7fd f900 	bl	8002578 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e379      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005386:	4b5a      	ldr	r3, [pc, #360]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x10c>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80ae 	beq.w	8005500 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a4:	4b52      	ldr	r3, [pc, #328]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ae:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_RCC_OscConfig+0x162>
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2b18      	cmp	r3, #24
 80053be:	d13a      	bne.n	8005436 <HAL_RCC_OscConfig+0x1ce>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d135      	bne.n	8005436 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ca:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_RCC_OscConfig+0x17a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e34b      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e2:	f7fd f8f9 	bl	80025d8 <HAL_GetREVID>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d817      	bhi.n	8005420 <HAL_RCC_OscConfig+0x1b8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b40      	cmp	r3, #64	; 0x40
 80053f6:	d108      	bne.n	800540a <HAL_RCC_OscConfig+0x1a2>
 80053f8:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005400:	4a3b      	ldr	r2, [pc, #236]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005406:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005408:	e07a      	b.n	8005500 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540a:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	031b      	lsls	r3, r3, #12
 8005418:	4935      	ldr	r1, [pc, #212]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800541e:	e06f      	b.n	8005500 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005420:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	4930      	ldr	r1, [pc, #192]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005434:	e064      	b.n	8005500 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d045      	beq.n	80054ca <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800543e:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 0219 	bic.w	r2, r3, #25
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4929      	ldr	r1, [pc, #164]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fd f892 	bl	8002578 <HAL_GetTick>
 8005454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005458:	f7fd f88e 	bl	8002578 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e307      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800546a:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	f7fd f8af 	bl	80025d8 <HAL_GetREVID>
 800547a:	4603      	mov	r3, r0
 800547c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005480:	4293      	cmp	r3, r2
 8005482:	d817      	bhi.n	80054b4 <HAL_RCC_OscConfig+0x24c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d108      	bne.n	800549e <HAL_RCC_OscConfig+0x236>
 800548c:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005494:	4a16      	ldr	r2, [pc, #88]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 8005496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549a:	6053      	str	r3, [r2, #4]
 800549c:	e030      	b.n	8005500 <HAL_RCC_OscConfig+0x298>
 800549e:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	031b      	lsls	r3, r3, #12
 80054ac:	4910      	ldr	r1, [pc, #64]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	604b      	str	r3, [r1, #4]
 80054b2:	e025      	b.n	8005500 <HAL_RCC_OscConfig+0x298>
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	490b      	ldr	r1, [pc, #44]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	e01a      	b.n	8005500 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <HAL_RCC_OscConfig+0x288>)
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fd f84f 	bl	8002578 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054de:	f7fd f84b 	bl	8002578 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d903      	bls.n	80054f4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e2c4      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
 80054f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054f4:	4ba4      	ldr	r3, [pc, #656]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ee      	bne.n	80054de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80a9 	beq.w	8005660 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800550e:	4b9e      	ldr	r3, [pc, #632]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005516:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005518:	4b9b      	ldr	r3, [pc, #620]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d007      	beq.n	8005534 <HAL_RCC_OscConfig+0x2cc>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b18      	cmp	r3, #24
 8005528:	d13a      	bne.n	80055a0 <HAL_RCC_OscConfig+0x338>
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d135      	bne.n	80055a0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005534:	4b94      	ldr	r3, [pc, #592]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_OscConfig+0x2e4>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	2b80      	cmp	r3, #128	; 0x80
 8005546:	d001      	beq.n	800554c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e296      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800554c:	f7fd f844 	bl	80025d8 <HAL_GetREVID>
 8005550:	4603      	mov	r3, r0
 8005552:	f241 0203 	movw	r2, #4099	; 0x1003
 8005556:	4293      	cmp	r3, r2
 8005558:	d817      	bhi.n	800558a <HAL_RCC_OscConfig+0x322>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	2b20      	cmp	r3, #32
 8005560:	d108      	bne.n	8005574 <HAL_RCC_OscConfig+0x30c>
 8005562:	4b89      	ldr	r3, [pc, #548]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800556a:	4a87      	ldr	r2, [pc, #540]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800556c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005570:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005572:	e075      	b.n	8005660 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005574:	4b84      	ldr	r3, [pc, #528]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	069b      	lsls	r3, r3, #26
 8005582:	4981      	ldr	r1, [pc, #516]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005588:	e06a      	b.n	8005660 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800558a:	4b7f      	ldr	r3, [pc, #508]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	497b      	ldr	r1, [pc, #492]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800559a:	4313      	orrs	r3, r2
 800559c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800559e:	e05f      	b.n	8005660 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d042      	beq.n	800562e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055a8:	4b77      	ldr	r3, [pc, #476]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a76      	ldr	r2, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc ffe0 	bl	8002578 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055bc:	f7fc ffdc 	bl	8002578 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e255      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ce:	4b6e      	ldr	r3, [pc, #440]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055da:	f7fc fffd 	bl	80025d8 <HAL_GetREVID>
 80055de:	4603      	mov	r3, r0
 80055e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d817      	bhi.n	8005618 <HAL_RCC_OscConfig+0x3b0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d108      	bne.n	8005602 <HAL_RCC_OscConfig+0x39a>
 80055f0:	4b65      	ldr	r3, [pc, #404]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055f8:	4a63      	ldr	r2, [pc, #396]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80055fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e02e      	b.n	8005660 <HAL_RCC_OscConfig+0x3f8>
 8005602:	4b61      	ldr	r3, [pc, #388]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	069b      	lsls	r3, r3, #26
 8005610:	495d      	ldr	r1, [pc, #372]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005612:	4313      	orrs	r3, r2
 8005614:	604b      	str	r3, [r1, #4]
 8005616:	e023      	b.n	8005660 <HAL_RCC_OscConfig+0x3f8>
 8005618:	4b5b      	ldr	r3, [pc, #364]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	061b      	lsls	r3, r3, #24
 8005626:	4958      	ldr	r1, [pc, #352]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005628:	4313      	orrs	r3, r2
 800562a:	60cb      	str	r3, [r1, #12]
 800562c:	e018      	b.n	8005660 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800562e:	4b56      	ldr	r3, [pc, #344]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a55      	ldr	r2, [pc, #340]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fc ff9d 	bl	8002578 <HAL_GetTick>
 800563e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005642:	f7fc ff99 	bl	8002578 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e212      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005654:	4b4c      	ldr	r3, [pc, #304]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d036      	beq.n	80056da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d019      	beq.n	80056a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005674:	4b44      	ldr	r3, [pc, #272]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005678:	4a43      	ldr	r2, [pc, #268]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fc ff7a 	bl	8002578 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005688:	f7fc ff76 	bl	8002578 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e1ef      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800569a:	4b3b      	ldr	r3, [pc, #236]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800569c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0x420>
 80056a6:	e018      	b.n	80056da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a8:	4b37      	ldr	r3, [pc, #220]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80056aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ac:	4a36      	ldr	r2, [pc, #216]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b4:	f7fc ff60 	bl	8002578 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056bc:	f7fc ff5c 	bl	8002578 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e1d5      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80056d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f0      	bne.n	80056bc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d036      	beq.n	8005754 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d019      	beq.n	8005722 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a25      	ldr	r2, [pc, #148]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 80056f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056fa:	f7fc ff3d 	bl	8002578 <HAL_GetTick>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005702:	f7fc ff39 	bl	8002578 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e1b2      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x49a>
 8005720:	e018      	b.n	8005754 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005722:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 8005728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800572c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800572e:	f7fc ff23 	bl	8002578 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005736:	f7fc ff1f 	bl	8002578 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e198      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCC_OscConfig+0x520>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8085 	beq.w	800586c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <HAL_RCC_OscConfig+0x524>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <HAL_RCC_OscConfig+0x524>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800576e:	f7fc ff03 	bl	8002578 <HAL_GetTick>
 8005772:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005774:	e00c      	b.n	8005790 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005776:	f7fc feff 	bl	8002578 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b64      	cmp	r3, #100	; 0x64
 8005782:	d905      	bls.n	8005790 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e178      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
 8005788:	58024400 	.word	0x58024400
 800578c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005790:	4b96      	ldr	r3, [pc, #600]	; (80059ec <HAL_RCC_OscConfig+0x784>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0ec      	beq.n	8005776 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d106      	bne.n	80057b2 <HAL_RCC_OscConfig+0x54a>
 80057a4:	4b92      	ldr	r3, [pc, #584]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a91      	ldr	r2, [pc, #580]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
 80057b0:	e02d      	b.n	800580e <HAL_RCC_OscConfig+0x5a6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x56c>
 80057ba:	4b8d      	ldr	r3, [pc, #564]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a8c      	ldr	r2, [pc, #560]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
 80057c6:	4b8a      	ldr	r3, [pc, #552]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	4a89      	ldr	r2, [pc, #548]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057cc:	f023 0304 	bic.w	r3, r3, #4
 80057d0:	6713      	str	r3, [r2, #112]	; 0x70
 80057d2:	e01c      	b.n	800580e <HAL_RCC_OscConfig+0x5a6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d10c      	bne.n	80057f6 <HAL_RCC_OscConfig+0x58e>
 80057dc:	4b84      	ldr	r3, [pc, #528]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a83      	ldr	r2, [pc, #524]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057e2:	f043 0304 	orr.w	r3, r3, #4
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
 80057e8:	4b81      	ldr	r3, [pc, #516]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a80      	ldr	r2, [pc, #512]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
 80057f4:	e00b      	b.n	800580e <HAL_RCC_OscConfig+0x5a6>
 80057f6:	4b7e      	ldr	r3, [pc, #504]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a7d      	ldr	r2, [pc, #500]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
 8005802:	4b7b      	ldr	r3, [pc, #492]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	4a7a      	ldr	r2, [pc, #488]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005808:	f023 0304 	bic.w	r3, r3, #4
 800580c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d015      	beq.n	8005842 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005816:	f7fc feaf 	bl	8002578 <HAL_GetTick>
 800581a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800581c:	e00a      	b.n	8005834 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581e:	f7fc feab 	bl	8002578 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e122      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005834:	4b6e      	ldr	r3, [pc, #440]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0ee      	beq.n	800581e <HAL_RCC_OscConfig+0x5b6>
 8005840:	e014      	b.n	800586c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005842:	f7fc fe99 	bl	8002578 <HAL_GetTick>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005848:	e00a      	b.n	8005860 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584a:	f7fc fe95 	bl	8002578 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	f241 3288 	movw	r2, #5000	; 0x1388
 8005858:	4293      	cmp	r3, r2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e10c      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005860:	4b63      	ldr	r3, [pc, #396]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1ee      	bne.n	800584a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8101 	beq.w	8005a78 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005876:	4b5e      	ldr	r3, [pc, #376]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587e:	2b18      	cmp	r3, #24
 8005880:	f000 80bc 	beq.w	80059fc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2b02      	cmp	r3, #2
 800588a:	f040 8095 	bne.w	80059b8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588e:	4b58      	ldr	r3, [pc, #352]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fc fe6d 	bl	8002578 <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fc fe69 	bl	8002578 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0e2      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b4:	4b4e      	ldr	r3, [pc, #312]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058c0:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80058c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <HAL_RCC_OscConfig+0x78c>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058d0:	0112      	lsls	r2, r2, #4
 80058d2:	430a      	orrs	r2, r1
 80058d4:	4946      	ldr	r1, [pc, #280]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	628b      	str	r3, [r1, #40]	; 0x28
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	3b01      	subs	r3, #1
 80058e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e8:	3b01      	subs	r3, #1
 80058ea:	025b      	lsls	r3, r3, #9
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	3b01      	subs	r3, #1
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	3b01      	subs	r3, #1
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800590a:	4939      	ldr	r1, [pc, #228]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800590c:	4313      	orrs	r3, r2
 800590e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005910:	4b37      	ldr	r3, [pc, #220]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4a36      	ldr	r2, [pc, #216]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800591c:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	4b35      	ldr	r3, [pc, #212]	; (80059f8 <HAL_RCC_OscConfig+0x790>)
 8005922:	4013      	ands	r3, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005928:	00d2      	lsls	r2, r2, #3
 800592a:	4931      	ldr	r1, [pc, #196]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800592c:	4313      	orrs	r3, r2
 800592e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005930:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	f023 020c 	bic.w	r2, r3, #12
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	492c      	ldr	r1, [pc, #176]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800593e:	4313      	orrs	r3, r2
 8005940:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005942:	4b2b      	ldr	r3, [pc, #172]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	f023 0202 	bic.w	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594e:	4928      	ldr	r1, [pc, #160]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005950:	4313      	orrs	r3, r2
 8005952:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005954:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800595a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005960:	4b23      	ldr	r3, [pc, #140]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800596c:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005978:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005984:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a19      	ldr	r2, [pc, #100]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 800598a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fc fdf2 	bl	8002578 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005998:	f7fc fdee 	bl	8002578 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e067      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0x730>
 80059b6:	e05f      	b.n	8005a78 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80059be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc fdd8 	bl	8002578 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059cc:	f7fc fdd4 	bl	8002578 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e04d      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_RCC_OscConfig+0x788>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x764>
 80059ea:	e045      	b.n	8005a78 <HAL_RCC_OscConfig+0x810>
 80059ec:	58024800 	.word	0x58024800
 80059f0:	58024400 	.word	0x58024400
 80059f4:	fffffc0c 	.word	0xfffffc0c
 80059f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_RCC_OscConfig+0x81c>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_RCC_OscConfig+0x81c>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d031      	beq.n	8005a74 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f003 0203 	and.w	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d12a      	bne.n	8005a74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d122      	bne.n	8005a74 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d11a      	bne.n	8005a74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	0a5b      	lsrs	r3, r3, #9
 8005a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d111      	bne.n	8005a74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d108      	bne.n	8005a74 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	0e1b      	lsrs	r3, r3, #24
 8005a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d001      	beq.n	8005a78 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3730      	adds	r7, #48	; 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	58024400 	.word	0x58024400

08005a88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e19c      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b8a      	ldr	r3, [pc, #552]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d910      	bls.n	8005acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b87      	ldr	r3, [pc, #540]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 020f 	bic.w	r2, r3, #15
 8005ab2:	4985      	ldr	r1, [pc, #532]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b83      	ldr	r3, [pc, #524]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e184      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	4b7b      	ldr	r3, [pc, #492]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d908      	bls.n	8005afa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ae8:	4b78      	ldr	r3, [pc, #480]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	4975      	ldr	r1, [pc, #468]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d010      	beq.n	8005b28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	4b70      	ldr	r3, [pc, #448]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d908      	bls.n	8005b28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b16:	4b6d      	ldr	r3, [pc, #436]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	496a      	ldr	r1, [pc, #424]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d010      	beq.n	8005b56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	4b64      	ldr	r3, [pc, #400]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d908      	bls.n	8005b56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b44:	4b61      	ldr	r3, [pc, #388]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	495e      	ldr	r1, [pc, #376]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d908      	bls.n	8005b84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b72:	4b56      	ldr	r3, [pc, #344]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4953      	ldr	r1, [pc, #332]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	4b4d      	ldr	r3, [pc, #308]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d908      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba0:	4b4a      	ldr	r3, [pc, #296]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f023 020f 	bic.w	r2, r3, #15
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4947      	ldr	r1, [pc, #284]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d055      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bbe:	4b43      	ldr	r3, [pc, #268]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4940      	ldr	r1, [pc, #256]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bd8:	4b3c      	ldr	r3, [pc, #240]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d121      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0f6      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bf0:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d115      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0ea      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c08:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0de      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c18:	4b2c      	ldr	r3, [pc, #176]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0d6      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c28:	4b28      	ldr	r3, [pc, #160]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f023 0207 	bic.w	r2, r3, #7
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	4925      	ldr	r1, [pc, #148]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fc fc9d 	bl	8002578 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c42:	f7fc fc99 	bl	8002578 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0be      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d1eb      	bne.n	8005c42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d010      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d208      	bcs.n	8005c98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	f023 020f 	bic.w	r2, r3, #15
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	490e      	ldr	r1, [pc, #56]	; (8005ccc <HAL_RCC_ClockConfig+0x244>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d214      	bcs.n	8005cd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 020f 	bic.w	r2, r3, #15
 8005cae:	4906      	ldr	r1, [pc, #24]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <HAL_RCC_ClockConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e086      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x34e>
 8005cc8:	52002000 	.word	0x52002000
 8005ccc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	4b3f      	ldr	r3, [pc, #252]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d208      	bcs.n	8005cfe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cec:	4b3c      	ldr	r3, [pc, #240]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	4939      	ldr	r1, [pc, #228]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	4b34      	ldr	r3, [pc, #208]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d208      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d1a:	4b31      	ldr	r3, [pc, #196]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	492e      	ldr	r1, [pc, #184]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d208      	bcs.n	8005d5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	4922      	ldr	r1, [pc, #136]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d010      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69da      	ldr	r2, [r3, #28]
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d208      	bcs.n	8005d88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4917      	ldr	r1, [pc, #92]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d88:	f000 f834 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	4912      	ldr	r1, [pc, #72]	; (8005de4 <HAL_RCC_ClockConfig+0x35c>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	f003 031f 	and.w	r3, r3, #31
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005da6:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <HAL_RCC_ClockConfig+0x358>)
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a0d      	ldr	r2, [pc, #52]	; (8005de4 <HAL_RCC_ClockConfig+0x35c>)
 8005db0:	5cd3      	ldrb	r3, [r2, r3]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <HAL_RCC_ClockConfig+0x360>)
 8005dbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <HAL_RCC_ClockConfig+0x364>)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <HAL_RCC_ClockConfig+0x368>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fc fb8a 	bl	80024e4 <HAL_InitTick>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	58024400 	.word	0x58024400
 8005de4:	0800dac8 	.word	0x0800dac8
 8005de8:	20000008 	.word	0x20000008
 8005dec:	20000004 	.word	0x20000004
 8005df0:	2000000c 	.word	0x2000000c

08005df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dfa:	4bb3      	ldr	r3, [pc, #716]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e02:	2b18      	cmp	r3, #24
 8005e04:	f200 8155 	bhi.w	80060b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e75 	.word	0x08005e75
 8005e14:	080060b3 	.word	0x080060b3
 8005e18:	080060b3 	.word	0x080060b3
 8005e1c:	080060b3 	.word	0x080060b3
 8005e20:	080060b3 	.word	0x080060b3
 8005e24:	080060b3 	.word	0x080060b3
 8005e28:	080060b3 	.word	0x080060b3
 8005e2c:	080060b3 	.word	0x080060b3
 8005e30:	08005e9b 	.word	0x08005e9b
 8005e34:	080060b3 	.word	0x080060b3
 8005e38:	080060b3 	.word	0x080060b3
 8005e3c:	080060b3 	.word	0x080060b3
 8005e40:	080060b3 	.word	0x080060b3
 8005e44:	080060b3 	.word	0x080060b3
 8005e48:	080060b3 	.word	0x080060b3
 8005e4c:	080060b3 	.word	0x080060b3
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	080060b3 	.word	0x080060b3
 8005e58:	080060b3 	.word	0x080060b3
 8005e5c:	080060b3 	.word	0x080060b3
 8005e60:	080060b3 	.word	0x080060b3
 8005e64:	080060b3 	.word	0x080060b3
 8005e68:	080060b3 	.word	0x080060b3
 8005e6c:	080060b3 	.word	0x080060b3
 8005e70:	08005ea7 	.word	0x08005ea7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e74:	4b94      	ldr	r3, [pc, #592]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e80:	4b91      	ldr	r3, [pc, #580]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	08db      	lsrs	r3, r3, #3
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	4a90      	ldr	r2, [pc, #576]	; (80060cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e92:	e111      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e94:	4b8d      	ldr	r3, [pc, #564]	; (80060cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e96:	61bb      	str	r3, [r7, #24]
    break;
 8005e98:	e10e      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e9a:	4b8d      	ldr	r3, [pc, #564]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e9c:	61bb      	str	r3, [r7, #24]
    break;
 8005e9e:	e10b      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ea0:	4b8c      	ldr	r3, [pc, #560]	; (80060d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ea2:	61bb      	str	r3, [r7, #24]
    break;
 8005ea4:	e108      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ea6:	4b88      	ldr	r3, [pc, #544]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005eb0:	4b85      	ldr	r3, [pc, #532]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ebc:	4b82      	ldr	r3, [pc, #520]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ec6:	4b80      	ldr	r3, [pc, #512]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	08db      	lsrs	r3, r3, #3
 8005ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80e1 	beq.w	80060ac <HAL_RCC_GetSysClockFreq+0x2b8>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f000 8083 	beq.w	8005ff8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	f200 80a1 	bhi.w	800603c <HAL_RCC_GetSysClockFreq+0x248>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0x114>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d056      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f06:	e099      	b.n	800603c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f08:	4b6f      	ldr	r3, [pc, #444]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02d      	beq.n	8005f70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f14:	4b6c      	ldr	r3, [pc, #432]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	08db      	lsrs	r3, r3, #3
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	4a6b      	ldr	r2, [pc, #428]	; (80060cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f20:	fa22 f303 	lsr.w	r3, r2, r3
 8005f24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3e:	4b62      	ldr	r3, [pc, #392]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f52:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f6e:	e087      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060dc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b51      	ldr	r3, [pc, #324]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f96:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb2:	e065      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff6:	e043      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600a:	4b2f      	ldr	r3, [pc, #188]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601a:	ed97 6a02 	vldr	s12, [r7, #8]
 800601e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603a:	e021      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006062:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800607e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006080:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	0a5b      	lsrs	r3, r3, #9
 8006086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608a:	3301      	adds	r3, #1
 800608c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006098:	edd7 6a07 	vldr	s13, [r7, #28]
 800609c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a4:	ee17 3a90 	vmov	r3, s15
 80060a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060aa:	e005      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	61bb      	str	r3, [r7, #24]
    break;
 80060b0:	e002      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060b4:	61bb      	str	r3, [r7, #24]
    break;
 80060b6:	bf00      	nop
  }

  return sysclockfreq;
 80060b8:	69bb      	ldr	r3, [r7, #24]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	58024400 	.word	0x58024400
 80060cc:	03d09000 	.word	0x03d09000
 80060d0:	003d0900 	.word	0x003d0900
 80060d4:	02dc6c00 	.word	0x02dc6c00
 80060d8:	46000000 	.word	0x46000000
 80060dc:	4c742400 	.word	0x4c742400
 80060e0:	4a742400 	.word	0x4a742400
 80060e4:	4c371b00 	.word	0x4c371b00

080060e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060ee:	f7ff fe81 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 80060f2:	4602      	mov	r2, r0
 80060f4:	4b10      	ldr	r3, [pc, #64]	; (8006138 <HAL_RCC_GetHCLKFreq+0x50>)
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	490f      	ldr	r1, [pc, #60]	; (800613c <HAL_RCC_GetHCLKFreq+0x54>)
 8006100:	5ccb      	ldrb	r3, [r1, r3]
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	fa22 f303 	lsr.w	r3, r2, r3
 800610a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <HAL_RCC_GetHCLKFreq+0x50>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <HAL_RCC_GetHCLKFreq+0x54>)
 8006116:	5cd3      	ldrb	r3, [r2, r3]
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	fa22 f303 	lsr.w	r3, r2, r3
 8006122:	4a07      	ldr	r2, [pc, #28]	; (8006140 <HAL_RCC_GetHCLKFreq+0x58>)
 8006124:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006126:	4a07      	ldr	r2, [pc, #28]	; (8006144 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <HAL_RCC_GetHCLKFreq+0x58>)
 800612e:	681b      	ldr	r3, [r3, #0]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	58024400 	.word	0x58024400
 800613c:	0800dac8 	.word	0x0800dac8
 8006140:	20000008 	.word	0x20000008
 8006144:	20000004 	.word	0x20000004

08006148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800614c:	f7ff ffcc 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8006150:	4602      	mov	r2, r0
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	4904      	ldr	r1, [pc, #16]	; (8006170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800615e:	5ccb      	ldrb	r3, [r1, r3]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	58024400 	.word	0x58024400
 8006170:	0800dac8 	.word	0x0800dac8

08006174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006178:	f7ff ffb6 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4904      	ldr	r1, [pc, #16]	; (800619c <HAL_RCC_GetPCLK2Freq+0x28>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}
 8006198:	58024400 	.word	0x58024400
 800619c:	0800dac8 	.word	0x0800dac8

080061a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061ac:	2300      	movs	r3, #0
 80061ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d03f      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c4:	d02a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061ca:	d824      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d0:	d018      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d6:	d81e      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e0:	d007      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061e2:	e018      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e4:	4bab      	ldr	r3, [pc, #684]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4aaa      	ldr	r2, [pc, #680]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f9cf 	bl	800759c <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006202:	e00c      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	2102      	movs	r1, #2
 800620a:	4618      	mov	r0, r3
 800620c:	f001 fa78 	bl	8007700 <RCCEx_PLL3_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006214:	e003      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
      break;
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800621c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d109      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006224:	4b9b      	ldr	r3, [pc, #620]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006230:	4998      	ldr	r1, [pc, #608]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006232:	4313      	orrs	r3, r2
 8006234:	650b      	str	r3, [r1, #80]	; 0x50
 8006236:	e001      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d03d      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624c:	2b04      	cmp	r3, #4
 800624e:	d826      	bhi.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	0800626d 	.word	0x0800626d
 800625c:	0800627b 	.word	0x0800627b
 8006260:	0800628d 	.word	0x0800628d
 8006264:	080062a5 	.word	0x080062a5
 8006268:	080062a5 	.word	0x080062a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626c:	4b89      	ldr	r3, [pc, #548]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	4a88      	ldr	r2, [pc, #544]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006278:	e015      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3304      	adds	r3, #4
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f98b 	bl	800759c <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800628a:	e00c      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3324      	adds	r3, #36	; 0x24
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f001 fa34 	bl	8007700 <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
      break;
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062ac:	4b79      	ldr	r3, [pc, #484]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	f023 0207 	bic.w	r2, r3, #7
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	4976      	ldr	r1, [pc, #472]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	650b      	str	r3, [r1, #80]	; 0x50
 80062be:	e001      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d042      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d8:	d02b      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062de:	d825      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062e0:	2bc0      	cmp	r3, #192	; 0xc0
 80062e2:	d028      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062e4:	2bc0      	cmp	r3, #192	; 0xc0
 80062e6:	d821      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d016      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80062ec:	2b80      	cmp	r3, #128	; 0x80
 80062ee:	d81d      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d007      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80062f8:	e018      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fa:	4b66      	ldr	r3, [pc, #408]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	4a65      	ldr	r2, [pc, #404]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006306:	e017      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f001 f944 	bl	800759c <RCCEx_PLL2_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006318:	e00e      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3324      	adds	r3, #36	; 0x24
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f9ed 	bl	8007700 <RCCEx_PLL3_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800632a:	e005      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
      break;
 8006330:	e002      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006332:	bf00      	nop
 8006334:	e000      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800633e:	4b55      	ldr	r3, [pc, #340]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006342:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	4952      	ldr	r1, [pc, #328]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634c:	4313      	orrs	r3, r2
 800634e:	650b      	str	r3, [r1, #80]	; 0x50
 8006350:	e001      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635e:	2b00      	cmp	r3, #0
 8006360:	d049      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800636c:	d030      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800636e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006372:	d82a      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006374:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006378:	d02c      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800637a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800637e:	d824      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006384:	d018      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800638a:	d81e      	bhi.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006394:	d007      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006396:	e018      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006398:	4b3e      	ldr	r3, [pc, #248]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	4a3d      	ldr	r2, [pc, #244]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a4:	e017      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3304      	adds	r3, #4
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f8f5 	bl	800759c <RCCEx_PLL2_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063b6:	e00e      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3324      	adds	r3, #36	; 0x24
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 f99e 	bl	8007700 <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c8:	e005      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
      break;
 80063ce:	e002      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063dc:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ea:	492a      	ldr	r1, [pc, #168]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	658b      	str	r3, [r1, #88]	; 0x58
 80063f0:	e001      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04c      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800640c:	d030      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800640e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006412:	d82a      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006414:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006418:	d02c      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800641a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800641e:	d824      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006424:	d018      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800642a:	d81e      	bhi.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006434:	d007      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006436:	e018      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006438:	4b16      	ldr	r3, [pc, #88]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800643e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006444:	e017      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f8a5 	bl	800759c <RCCEx_PLL2_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006456:	e00e      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3324      	adds	r3, #36	; 0x24
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f001 f94e 	bl	8007700 <RCCEx_PLL3_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006468:	e005      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
      break;
 800646e:	e002      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10d      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800648a:	4902      	ldr	r1, [pc, #8]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648c:	4313      	orrs	r3, r2
 800648e:	658b      	str	r3, [r1, #88]	; 0x58
 8006490:	e004      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006492:	bf00      	nop
 8006494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
 800649a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d032      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ac:	2b30      	cmp	r3, #48	; 0x30
 80064ae:	d01c      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064b0:	2b30      	cmp	r3, #48	; 0x30
 80064b2:	d817      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d00c      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d813      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d016      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064c0:	2b10      	cmp	r3, #16
 80064c2:	d10f      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c4:	4baf      	ldr	r3, [pc, #700]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	4aae      	ldr	r2, [pc, #696]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064d0:	e00e      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	2102      	movs	r1, #2
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 f85f 	bl	800759c <RCCEx_PLL2_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064e2:	e005      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]
      break;
 80064e8:	e002      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064ea:	bf00      	nop
 80064ec:	e000      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80064ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064f6:	4ba3      	ldr	r3, [pc, #652]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006502:	49a0      	ldr	r1, [pc, #640]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006504:	4313      	orrs	r3, r2
 8006506:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006508:	e001      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d047      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006522:	d030      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006528:	d82a      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800652a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800652e:	d02c      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006530:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006534:	d824      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653a:	d018      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800653c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006540:	d81e      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654a:	d007      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800654c:	e018      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654e:	4b8d      	ldr	r3, [pc, #564]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	4a8c      	ldr	r2, [pc, #560]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800655a:	e017      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f001 f81a 	bl	800759c <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800656c:	e00e      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3324      	adds	r3, #36	; 0x24
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f8c3 	bl	8007700 <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800657e:	e005      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800658a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006592:	4b7c      	ldr	r3, [pc, #496]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	4979      	ldr	r1, [pc, #484]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	650b      	str	r3, [r1, #80]	; 0x50
 80065a4:	e001      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d049      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065be:	d02e      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c4:	d828      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065ca:	d02a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80065cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065d0:	d822      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065d6:	d026      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80065d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065dc:	d81c      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e2:	d010      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80065e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065e8:	d816      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01d      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d111      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 ffce 	bl	800759c <RCCEx_PLL2_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006604:	e012      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	2101      	movs	r1, #1
 800660c:	4618      	mov	r0, r3
 800660e:	f001 f877 	bl	8007700 <RCCEx_PLL3_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006616:	e009      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e006      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800661e:	bf00      	nop
 8006620:	e004      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006622:	bf00      	nop
 8006624:	e002      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800662a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006632:	4b54      	ldr	r3, [pc, #336]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006636:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663e:	4951      	ldr	r1, [pc, #324]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006640:	4313      	orrs	r3, r2
 8006642:	650b      	str	r3, [r1, #80]	; 0x50
 8006644:	e001      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d04b      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800665c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006660:	d02e      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006666:	d828      	bhi.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d02a      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d822      	bhi.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006674:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006678:	d026      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800667a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800667e:	d81c      	bhi.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006684:	d010      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668a:	d816      	bhi.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01d      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006694:	d111      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	2101      	movs	r1, #1
 800669c:	4618      	mov	r0, r3
 800669e:	f000 ff7d 	bl	800759c <RCCEx_PLL2_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066a6:	e012      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3324      	adds	r3, #36	; 0x24
 80066ac:	2101      	movs	r1, #1
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 f826 	bl	8007700 <RCCEx_PLL3_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066b8:	e009      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
      break;
 80066be:	e006      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066c0:	bf00      	nop
 80066c2:	e004      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066c4:	bf00      	nop
 80066c6:	e002      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80066cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066d4:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066e2:	4928      	ldr	r1, [pc, #160]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	658b      	str	r3, [r1, #88]	; 0x58
 80066e8:	e001      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d02f      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006702:	d00e      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006708:	d814      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d015      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800670e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006712:	d10f      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800671a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006720:	e00c      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	2101      	movs	r1, #1
 8006728:	4618      	mov	r0, r3
 800672a:	f000 ff37 	bl	800759c <RCCEx_PLL2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006732:	e003      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800673a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006742:	4b10      	ldr	r3, [pc, #64]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674e:	490d      	ldr	r1, [pc, #52]	; (8006784 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006750:	4313      	orrs	r3, r2
 8006752:	650b      	str	r3, [r1, #80]	; 0x50
 8006754:	e001      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d033      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676a:	2b03      	cmp	r3, #3
 800676c:	d81c      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	080067af 	.word	0x080067af
 8006778:	08006789 	.word	0x08006789
 800677c:	08006797 	.word	0x08006797
 8006780:	080067af 	.word	0x080067af
 8006784:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4bb8      	ldr	r3, [pc, #736]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4ab7      	ldr	r2, [pc, #732]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006794:	e00c      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2102      	movs	r1, #2
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fefd 	bl	800759c <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067b6:	4bad      	ldr	r3, [pc, #692]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f023 0203 	bic.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	49aa      	ldr	r1, [pc, #680]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067c8:	e001      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 8086 	beq.w	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067dc:	4ba4      	ldr	r3, [pc, #656]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4aa3      	ldr	r2, [pc, #652]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80067e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067e8:	f7fb fec6 	bl	8002578 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ee:	e009      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f0:	f7fb fec2 	bl	8002578 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	; 0x64
 80067fc:	d902      	bls.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	75fb      	strb	r3, [r7, #23]
        break;
 8006802:	e005      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006804:	4b9a      	ldr	r3, [pc, #616]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0ef      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d166      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006816:	4b95      	ldr	r3, [pc, #596]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006820:	4053      	eors	r3, r2
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800682a:	4b90      	ldr	r3, [pc, #576]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006834:	4b8d      	ldr	r3, [pc, #564]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006838:	4a8c      	ldr	r2, [pc, #560]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800683a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006840:	4b8a      	ldr	r3, [pc, #552]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	4a89      	ldr	r2, [pc, #548]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800684c:	4a87      	ldr	r2, [pc, #540]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685c:	d115      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685e:	f7fb fe8b 	bl	8002578 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006864:	e00b      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fb fe87 	bl	8002578 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f241 3288 	movw	r2, #5000	; 0x1388
 8006874:	4293      	cmp	r3, r2
 8006876:	d902      	bls.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	75fb      	strb	r3, [r7, #23]
            break;
 800687c:	e005      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800687e:	4b7b      	ldr	r3, [pc, #492]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0ed      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d126      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800689e:	d10d      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80068a0:	4b72      	ldr	r3, [pc, #456]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068ae:	0919      	lsrs	r1, r3, #4
 80068b0:	4b70      	ldr	r3, [pc, #448]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80068b2:	400b      	ands	r3, r1
 80068b4:	496d      	ldr	r1, [pc, #436]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	610b      	str	r3, [r1, #16]
 80068ba:	e005      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80068bc:	4b6b      	ldr	r3, [pc, #428]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	4a6a      	ldr	r2, [pc, #424]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80068c6:	6113      	str	r3, [r2, #16]
 80068c8:	4b68      	ldr	r3, [pc, #416]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d6:	4965      	ldr	r1, [pc, #404]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	670b      	str	r3, [r1, #112]	; 0x70
 80068dc:	e004      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068de:	7dfb      	ldrb	r3, [r7, #23]
 80068e0:	75bb      	strb	r3, [r7, #22]
 80068e2:	e001      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
 80068e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d07e      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f8:	2b28      	cmp	r3, #40	; 0x28
 80068fa:	d867      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	080069d3 	.word	0x080069d3
 8006908:	080069cd 	.word	0x080069cd
 800690c:	080069cd 	.word	0x080069cd
 8006910:	080069cd 	.word	0x080069cd
 8006914:	080069cd 	.word	0x080069cd
 8006918:	080069cd 	.word	0x080069cd
 800691c:	080069cd 	.word	0x080069cd
 8006920:	080069cd 	.word	0x080069cd
 8006924:	080069a9 	.word	0x080069a9
 8006928:	080069cd 	.word	0x080069cd
 800692c:	080069cd 	.word	0x080069cd
 8006930:	080069cd 	.word	0x080069cd
 8006934:	080069cd 	.word	0x080069cd
 8006938:	080069cd 	.word	0x080069cd
 800693c:	080069cd 	.word	0x080069cd
 8006940:	080069cd 	.word	0x080069cd
 8006944:	080069bb 	.word	0x080069bb
 8006948:	080069cd 	.word	0x080069cd
 800694c:	080069cd 	.word	0x080069cd
 8006950:	080069cd 	.word	0x080069cd
 8006954:	080069cd 	.word	0x080069cd
 8006958:	080069cd 	.word	0x080069cd
 800695c:	080069cd 	.word	0x080069cd
 8006960:	080069cd 	.word	0x080069cd
 8006964:	080069d3 	.word	0x080069d3
 8006968:	080069cd 	.word	0x080069cd
 800696c:	080069cd 	.word	0x080069cd
 8006970:	080069cd 	.word	0x080069cd
 8006974:	080069cd 	.word	0x080069cd
 8006978:	080069cd 	.word	0x080069cd
 800697c:	080069cd 	.word	0x080069cd
 8006980:	080069cd 	.word	0x080069cd
 8006984:	080069d3 	.word	0x080069d3
 8006988:	080069cd 	.word	0x080069cd
 800698c:	080069cd 	.word	0x080069cd
 8006990:	080069cd 	.word	0x080069cd
 8006994:	080069cd 	.word	0x080069cd
 8006998:	080069cd 	.word	0x080069cd
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	080069cd 	.word	0x080069cd
 80069a4:	080069d3 	.word	0x080069d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fdf4 	bl	800759c <RCCEx_PLL2_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069b8:	e00c      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	2101      	movs	r1, #1
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fe9d 	bl	8007700 <RCCEx_PLL3_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069ca:	e003      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e000      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80069d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e6:	4921      	ldr	r1, [pc, #132]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	654b      	str	r3, [r1, #84]	; 0x54
 80069ec:	e001      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03e      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	d820      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a4f 	.word	0x08006a4f
 8006a10:	08006a25 	.word	0x08006a25
 8006a14:	08006a37 	.word	0x08006a37
 8006a18:	08006a4f 	.word	0x08006a4f
 8006a1c:	08006a4f 	.word	0x08006a4f
 8006a20:	08006a4f 	.word	0x08006a4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3304      	adds	r3, #4
 8006a28:	2101      	movs	r1, #1
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fdb6 	bl	800759c <RCCEx_PLL2_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a34:	e00c      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3324      	adds	r3, #36	; 0x24
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fe5f 	bl	8007700 <RCCEx_PLL3_Config>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a46:	e003      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a4c:	e000      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d110      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	f023 0207 	bic.w	r2, r3, #7
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a62:	4902      	ldr	r1, [pc, #8]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	654b      	str	r3, [r1, #84]	; 0x54
 8006a68:	e008      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006a6a:	bf00      	nop
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	58024800 	.word	0x58024800
 8006a74:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d039      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d820      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006adb 	.word	0x08006adb
 8006a9c:	08006ab1 	.word	0x08006ab1
 8006aa0:	08006ac3 	.word	0x08006ac3
 8006aa4:	08006adb 	.word	0x08006adb
 8006aa8:	08006adb 	.word	0x08006adb
 8006aac:	08006adb 	.word	0x08006adb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fd70 	bl	800759c <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ac0:	e00c      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3324      	adds	r3, #36	; 0x24
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fe19 	bl	8007700 <RCCEx_PLL3_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ad2:	e003      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ae2:	4bb7      	ldr	r3, [pc, #732]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	f023 0207 	bic.w	r2, r3, #7
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af0:	49b3      	ldr	r1, [pc, #716]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	658b      	str	r3, [r1, #88]	; 0x58
 8006af6:	e001      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d04b      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b12:	d02e      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b18:	d828      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1e:	d02a      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b24:	d822      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b2a:	d026      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b30:	d81c      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b36:	d010      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b3c:	d816      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01d      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b46:	d111      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fd24 	bl	800759c <RCCEx_PLL2_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b58:	e012      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3324      	adds	r3, #36	; 0x24
 8006b5e:	2102      	movs	r1, #2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fdcd 	bl	8007700 <RCCEx_PLL3_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b6a:	e009      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b70:	e006      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b72:	bf00      	nop
 8006b74:	e004      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b76:	bf00      	nop
 8006b78:	e002      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e000      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b86:	4b8e      	ldr	r3, [pc, #568]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b94:	498a      	ldr	r1, [pc, #552]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	654b      	str	r3, [r1, #84]	; 0x54
 8006b9a:	e001      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04b      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bb6:	d02e      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006bb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bbc:	d828      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d02a      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc8:	d822      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bce:	d026      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd4:	d81c      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bda:	d010      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be0:	d816      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01d      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bea:	d111      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fcd2 	bl	800759c <RCCEx_PLL2_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bfc:	e012      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3324      	adds	r3, #36	; 0x24
 8006c02:	2102      	movs	r1, #2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fd7b 	bl	8007700 <RCCEx_PLL3_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c0e:	e009      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e006      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c16:	bf00      	nop
 8006c18:	e004      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c2a:	4b65      	ldr	r3, [pc, #404]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c38:	4961      	ldr	r1, [pc, #388]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8006c3e:	e001      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d04b      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c5a:	d02e      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006c5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c60:	d828      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c66:	d02a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	d822      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c72:	d026      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c78:	d81c      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c84:	d816      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01d      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fc80 	bl	800759c <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ca0:	e012      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3324      	adds	r3, #36	; 0x24
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fd29 	bl	8007700 <RCCEx_PLL3_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cb2:	e009      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb8:	e006      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cba:	bf00      	nop
 8006cbc:	e004      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006cce:	4b3c      	ldr	r3, [pc, #240]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cdc:	4938      	ldr	r1, [pc, #224]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce2:	e001      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
 8006ce6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfe:	d10a      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	2102      	movs	r1, #2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fcfa 	bl	8007700 <RCCEx_PLL3_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d16:	4b2a      	ldr	r3, [pc, #168]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d24:	4926      	ldr	r1, [pc, #152]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d40:	d10a      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3324      	adds	r3, #36	; 0x24
 8006d46:	2102      	movs	r1, #2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fcd9 	bl	8007700 <RCCEx_PLL3_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d66:	4916      	ldr	r1, [pc, #88]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d036      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d82:	d01f      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d88:	d817      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d92:	d009      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006d94:	e011      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fbfd 	bl	800759c <RCCEx_PLL2_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006da6:	e00e      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3324      	adds	r3, #36	; 0x24
 8006dac:	2102      	movs	r1, #2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fca6 	bl	8007700 <RCCEx_PLL3_Config>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006db8:	e005      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006dbe:	e002      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006dc0:	58024400 	.word	0x58024400
      break;
 8006dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dcc:	4b93      	ldr	r3, [pc, #588]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dda:	4990      	ldr	r1, [pc, #576]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	658b      	str	r3, [r1, #88]	; 0x58
 8006de0:	e001      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d033      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dfc:	d01c      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006dfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e02:	d816      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e08:	d003      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e0e:	d007      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e10:	e00f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e12:	4b82      	ldr	r3, [pc, #520]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	4a81      	ldr	r2, [pc, #516]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e1e:	e00c      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3324      	adds	r3, #36	; 0x24
 8006e24:	2101      	movs	r1, #1
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fc6a 	bl	8007700 <RCCEx_PLL3_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e30:	e003      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	e000      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e40:	4b76      	ldr	r3, [pc, #472]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4e:	4973      	ldr	r1, [pc, #460]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	654b      	str	r3, [r1, #84]	; 0x54
 8006e54:	e001      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d029      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e72:	d007      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006e74:	e00f      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e76:	4b69      	ldr	r3, [pc, #420]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	4a68      	ldr	r2, [pc, #416]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e82:	e00b      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	2102      	movs	r1, #2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fb86 	bl	800759c <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ea2:	4b5e      	ldr	r3, [pc, #376]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eae:	495b      	ldr	r1, [pc, #364]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006eb4:	e001      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3324      	adds	r3, #36	; 0x24
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fc17 	bl	8007700 <RCCEx_PLL3_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d030      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef0:	d017      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef6:	d811      	bhi.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efc:	d013      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f02:	d80b      	bhi.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0e:	4b43      	ldr	r3, [pc, #268]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	4a42      	ldr	r2, [pc, #264]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f1a:	e007      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f32:	4b3a      	ldr	r3, [pc, #232]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3e:	4937      	ldr	r1, [pc, #220]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	654b      	str	r3, [r1, #84]	; 0x54
 8006f44:	e001      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d008      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f56:	4b31      	ldr	r3, [pc, #196]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f62:	492e      	ldr	r1, [pc, #184]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d009      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f74:	4b29      	ldr	r3, [pc, #164]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f82:	4926      	ldr	r1, [pc, #152]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f94:	4b21      	ldr	r3, [pc, #132]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa0:	491e      	ldr	r1, [pc, #120]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fb2:	4b1a      	ldr	r3, [pc, #104]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	4a19      	ldr	r2, [pc, #100]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fbc:	6113      	str	r3, [r2, #16]
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fc8:	4914      	ldr	r1, [pc, #80]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da08      	bge.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe2:	490e      	ldr	r1, [pc, #56]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007002:	4906      	ldr	r1, [pc, #24]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007004:	4313      	orrs	r3, r2
 8007006:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007008:	7dbb      	ldrb	r3, [r7, #22]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	e000      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58024400 	.word	0x58024400

08007020 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007024:	f7ff f860 	bl	80060e8 <HAL_RCC_GetHCLKFreq>
 8007028:	4602      	mov	r2, r0
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	4904      	ldr	r1, [pc, #16]	; (8007048 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007036:	5ccb      	ldrb	r3, [r1, r3]
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007040:	4618      	mov	r0, r3
 8007042:	bd80      	pop	{r7, pc}
 8007044:	58024400 	.word	0x58024400
 8007048:	0800dac8 	.word	0x0800dac8

0800704c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800704c:	b480      	push	{r7}
 800704e:	b089      	sub	sp, #36	; 0x24
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007054:	4ba1      	ldr	r3, [pc, #644]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800705e:	4b9f      	ldr	r3, [pc, #636]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	0b1b      	lsrs	r3, r3, #12
 8007064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007068:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800706a:	4b9c      	ldr	r3, [pc, #624]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	091b      	lsrs	r3, r3, #4
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007076:	4b99      	ldr	r3, [pc, #612]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	fb02 f303 	mul.w	r3, r2, r3
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8111 	beq.w	80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b02      	cmp	r3, #2
 800709e:	f000 8083 	beq.w	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	f200 80a1 	bhi.w	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d056      	beq.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070b6:	e099      	b.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b8:	4b88      	ldr	r3, [pc, #544]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d02d      	beq.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070c4:	4b85      	ldr	r3, [pc, #532]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	4a84      	ldr	r2, [pc, #528]	; (80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ee:	4b7b      	ldr	r3, [pc, #492]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007102:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800711e:	e087      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b6a      	ldr	r3, [pc, #424]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	ed97 6a03 	vldr	s12, [r7, #12]
 8007146:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007162:	e065      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b59      	ldr	r3, [pc, #356]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007186:	ed97 6a03 	vldr	s12, [r7, #12]
 800718a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071a6:	e043      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ba:	4b48      	ldr	r3, [pc, #288]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ea:	e021      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fe:	4b37      	ldr	r3, [pc, #220]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007212:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800722e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007230:	4b2a      	ldr	r3, [pc, #168]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	0a5b      	lsrs	r3, r3, #9
 8007236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800724a:	edd7 6a07 	vldr	s13, [r7, #28]
 800724e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007256:	ee17 2a90 	vmov	r2, s15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800725e:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007268:	ee07 3a90 	vmov	s15, r3
 800726c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007274:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007278:	edd7 6a07 	vldr	s13, [r7, #28]
 800727c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007284:	ee17 2a90 	vmov	r2, s15
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	0e1b      	lsrs	r3, r3, #24
 8007292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b2:	ee17 2a90 	vmov	r2, s15
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072ba:	e008      	b.n	80072ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
}
 80072ce:	bf00      	nop
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	58024400 	.word	0x58024400
 80072e0:	03d09000 	.word	0x03d09000
 80072e4:	46000000 	.word	0x46000000
 80072e8:	4c742400 	.word	0x4c742400
 80072ec:	4a742400 	.word	0x4a742400
 80072f0:	4c371b00 	.word	0x4c371b00

080072f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b089      	sub	sp, #36	; 0x24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072fc:	4ba1      	ldr	r3, [pc, #644]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007306:	4b9f      	ldr	r3, [pc, #636]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	0d1b      	lsrs	r3, r3, #20
 800730c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007310:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007312:	4b9c      	ldr	r3, [pc, #624]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800731e:	4b99      	ldr	r3, [pc, #612]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8111 	beq.w	8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b02      	cmp	r3, #2
 8007346:	f000 8083 	beq.w	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	2b02      	cmp	r3, #2
 800734e:	f200 80a1 	bhi.w	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d056      	beq.n	800740c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800735e:	e099      	b.n	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007360:	4b88      	ldr	r3, [pc, #544]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d02d      	beq.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800736c:	4b85      	ldr	r3, [pc, #532]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	08db      	lsrs	r3, r3, #3
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	4a84      	ldr	r2, [pc, #528]	; (8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
 800737c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b7b      	ldr	r3, [pc, #492]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073c6:	e087      	b.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b6a      	ldr	r3, [pc, #424]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800740a:	e065      	b.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800741a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741e:	4b59      	ldr	r3, [pc, #356]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007432:	eddf 5a56 	vldr	s11, [pc, #344]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800744e:	e043      	b.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007462:	4b48      	ldr	r3, [pc, #288]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	ed97 6a03 	vldr	s12, [r7, #12]
 8007476:	eddf 5a45 	vldr	s11, [pc, #276]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007492:	e021      	b.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007594 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a6:	4b37      	ldr	r3, [pc, #220]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800758c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074d8:	4b2a      	ldr	r3, [pc, #168]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	0a5b      	lsrs	r3, r3, #9
 80074de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fe:	ee17 2a90 	vmov	r2, s15
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007506:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	0c1b      	lsrs	r3, r3, #16
 800750c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800751c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007520:	edd7 6a07 	vldr	s13, [r7, #28]
 8007524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752c:	ee17 2a90 	vmov	r2, s15
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007534:	4b13      	ldr	r3, [pc, #76]	; (8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800754a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800754e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755a:	ee17 2a90 	vmov	r2, s15
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007562:	e008      	b.n	8007576 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	609a      	str	r2, [r3, #8]
}
 8007576:	bf00      	nop
 8007578:	3724      	adds	r7, #36	; 0x24
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	58024400 	.word	0x58024400
 8007588:	03d09000 	.word	0x03d09000
 800758c:	46000000 	.word	0x46000000
 8007590:	4c742400 	.word	0x4c742400
 8007594:	4a742400 	.word	0x4a742400
 8007598:	4c371b00 	.word	0x4c371b00

0800759c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075aa:	4b53      	ldr	r3, [pc, #332]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d101      	bne.n	80075ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e099      	b.n	80076ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075ba:	4b4f      	ldr	r3, [pc, #316]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a4e      	ldr	r2, [pc, #312]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80075c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c6:	f7fa ffd7 	bl	8002578 <HAL_GetTick>
 80075ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075cc:	e008      	b.n	80075e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075ce:	f7fa ffd3 	bl	8002578 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e086      	b.n	80076ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075e0:	4b45      	ldr	r3, [pc, #276]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f0      	bne.n	80075ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075ec:	4b42      	ldr	r3, [pc, #264]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	493f      	ldr	r1, [pc, #252]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	628b      	str	r3, [r1, #40]	; 0x28
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	3b01      	subs	r3, #1
 8007606:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	3b01      	subs	r3, #1
 8007610:	025b      	lsls	r3, r3, #9
 8007612:	b29b      	uxth	r3, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	3b01      	subs	r3, #1
 800761c:	041b      	lsls	r3, r3, #16
 800761e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	3b01      	subs	r3, #1
 800762a:	061b      	lsls	r3, r3, #24
 800762c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007630:	4931      	ldr	r1, [pc, #196]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007636:	4b30      	ldr	r3, [pc, #192]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	492d      	ldr	r1, [pc, #180]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007648:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	f023 0220 	bic.w	r2, r3, #32
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	4928      	ldr	r1, [pc, #160]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800765a:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007660:	f023 0310 	bic.w	r3, r3, #16
 8007664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007666:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <RCCEx_PLL2_Config+0x160>)
 800766c:	4013      	ands	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	69d2      	ldr	r2, [r2, #28]
 8007672:	00d2      	lsls	r2, r2, #3
 8007674:	4920      	ldr	r1, [pc, #128]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800767a:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	4a1e      	ldr	r2, [pc, #120]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007680:	f043 0310 	orr.w	r3, r3, #16
 8007684:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d106      	bne.n	800769a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 8007692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007696:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007698:	e00f      	b.n	80076ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d106      	bne.n	80076ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076a0:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	4a14      	ldr	r2, [pc, #80]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076ac:	e005      	b.n	80076ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076ba:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a0e      	ldr	r2, [pc, #56]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c6:	f7fa ff57 	bl	8002578 <HAL_GetTick>
 80076ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076cc:	e008      	b.n	80076e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076ce:	f7fa ff53 	bl	8002578 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d901      	bls.n	80076e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e006      	b.n	80076ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <RCCEx_PLL2_Config+0x15c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0f0      	beq.n	80076ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	58024400 	.word	0x58024400
 80076fc:	ffff0007 	.word	0xffff0007

08007700 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770e:	4b53      	ldr	r3, [pc, #332]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d101      	bne.n	800771e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e099      	b.n	8007852 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4e      	ldr	r2, [pc, #312]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772a:	f7fa ff25 	bl	8002578 <HAL_GetTick>
 800772e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007730:	e008      	b.n	8007744 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007732:	f7fa ff21 	bl	8002578 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e086      	b.n	8007852 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007744:	4b45      	ldr	r3, [pc, #276]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007750:	4b42      	ldr	r3, [pc, #264]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	051b      	lsls	r3, r3, #20
 800775e:	493f      	ldr	r1, [pc, #252]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	628b      	str	r3, [r1, #40]	; 0x28
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	3b01      	subs	r3, #1
 8007774:	025b      	lsls	r3, r3, #9
 8007776:	b29b      	uxth	r3, r3
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	3b01      	subs	r3, #1
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	3b01      	subs	r3, #1
 800778e:	061b      	lsls	r3, r3, #24
 8007790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007794:	4931      	ldr	r1, [pc, #196]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	492d      	ldr	r1, [pc, #180]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077ac:	4b2b      	ldr	r3, [pc, #172]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4928      	ldr	r1, [pc, #160]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80077be:	4b27      	ldr	r3, [pc, #156]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	4a26      	ldr	r2, [pc, #152]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <RCCEx_PLL3_Config+0x160>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	69d2      	ldr	r2, [r2, #28]
 80077d6:	00d2      	lsls	r2, r2, #3
 80077d8:	4920      	ldr	r1, [pc, #128]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077de:	4b1f      	ldr	r3, [pc, #124]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	4a1e      	ldr	r2, [pc, #120]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077f0:	4b1a      	ldr	r3, [pc, #104]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4a19      	ldr	r2, [pc, #100]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 80077f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077fc:	e00f      	b.n	800781e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d106      	bne.n	8007812 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a14      	ldr	r2, [pc, #80]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 800780a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800780e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007810:	e005      	b.n	800781e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007812:	4b12      	ldr	r3, [pc, #72]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	4a11      	ldr	r2, [pc, #68]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800781c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a0e      	ldr	r2, [pc, #56]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782a:	f7fa fea5 	bl	8002578 <HAL_GetTick>
 800782e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007830:	e008      	b.n	8007844 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007832:	f7fa fea1 	bl	8002578 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d901      	bls.n	8007844 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007844:	4b05      	ldr	r3, [pc, #20]	; (800785c <RCCEx_PLL3_Config+0x15c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0f0      	beq.n	8007832 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400
 8007860:	ffff0007 	.word	0xffff0007

08007864 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e0eb      	b.n	8007a52 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a75      	ldr	r2, [pc, #468]	; (8007a5c <HAL_SPI_Init+0x1f8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <HAL_SPI_Init+0x46>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a74      	ldr	r2, [pc, #464]	; (8007a60 <HAL_SPI_Init+0x1fc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00a      	beq.n	80078aa <HAL_SPI_Init+0x46>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a72      	ldr	r2, [pc, #456]	; (8007a64 <HAL_SPI_Init+0x200>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d005      	beq.n	80078aa <HAL_SPI_Init+0x46>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d901      	bls.n	80078aa <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e0d3      	b.n	8007a52 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8dc 	bl	8007a68 <SPI_GetPacketSize>
 80078b0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a69      	ldr	r2, [pc, #420]	; (8007a5c <HAL_SPI_Init+0x1f8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00c      	beq.n	80078d6 <HAL_SPI_Init+0x72>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a67      	ldr	r2, [pc, #412]	; (8007a60 <HAL_SPI_Init+0x1fc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <HAL_SPI_Init+0x72>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a66      	ldr	r2, [pc, #408]	; (8007a64 <HAL_SPI_Init+0x200>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d002      	beq.n	80078d6 <HAL_SPI_Init+0x72>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d811      	bhi.n	80078fa <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078da:	4a60      	ldr	r2, [pc, #384]	; (8007a5c <HAL_SPI_Init+0x1f8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d009      	beq.n	80078f4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a5e      	ldr	r2, [pc, #376]	; (8007a60 <HAL_SPI_Init+0x1fc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <HAL_SPI_Init+0x90>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a5d      	ldr	r2, [pc, #372]	; (8007a64 <HAL_SPI_Init+0x200>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d104      	bne.n	80078fe <HAL_SPI_Init+0x9a>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d901      	bls.n	80078fe <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e0a9      	b.n	8007a52 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fa f814 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007938:	d119      	bne.n	800796e <HAL_SPI_Init+0x10a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007942:	d103      	bne.n	800794c <HAL_SPI_Init+0xe8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10c      	bne.n	800796e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795c:	d107      	bne.n	800796e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007980:	ea42 0103 	orr.w	r1, r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ce:	ea42 0103 	orr.w	r1, r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d113      	bne.n	8007a0e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40013000 	.word	0x40013000
 8007a60:	40003800 	.word	0x40003800
 8007a64:	40003c00 	.word	0x40003c00

08007a68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3307      	adds	r3, #7
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e049      	b.n	8007b44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7f9 ffa1 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f000 fe1f 	bl	8008720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d001      	beq.n	8007b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e04f      	b.n	8007c04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a23      	ldr	r2, [pc, #140]	; (8007c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x76>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8e:	d018      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x76>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x76>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x76>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x76>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x76>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d115      	bne.n	8007bee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	4b17      	ldr	r3, [pc, #92]	; (8007c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b06      	cmp	r3, #6
 8007bd2:	d015      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0xb4>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d011      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bec:	e008      	b.n	8007c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e000      	b.n	8007c02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	40010000 	.word	0x40010000
 8007c14:	40000400 	.word	0x40000400
 8007c18:	40000800 	.word	0x40000800
 8007c1c:	40000c00 	.word	0x40000c00
 8007c20:	40010400 	.word	0x40010400
 8007c24:	40001800 	.word	0x40001800
 8007c28:	00010007 	.word	0x00010007

08007c2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10f      	bne.n	8007c74 <HAL_TIM_Base_Stop_IT+0x48>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6a1a      	ldr	r2, [r3, #32]
 8007c5a:	f240 4344 	movw	r3, #1092	; 0x444
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_Base_Stop_IT+0x48>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e049      	b.n	8007d30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f841 	bl	8007d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f000 fd29 	bl	8008720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <HAL_TIM_PWM_Start+0x24>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	bf14      	ite	ne
 8007d68:	2301      	movne	r3, #1
 8007d6a:	2300      	moveq	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	e03c      	b.n	8007dea <HAL_TIM_PWM_Start+0x9e>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d109      	bne.n	8007d8a <HAL_TIM_PWM_Start+0x3e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	bf14      	ite	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	2300      	moveq	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	e02f      	b.n	8007dea <HAL_TIM_PWM_Start+0x9e>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d109      	bne.n	8007da4 <HAL_TIM_PWM_Start+0x58>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	bf14      	ite	ne
 8007d9c:	2301      	movne	r3, #1
 8007d9e:	2300      	moveq	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	e022      	b.n	8007dea <HAL_TIM_PWM_Start+0x9e>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b0c      	cmp	r3, #12
 8007da8:	d109      	bne.n	8007dbe <HAL_TIM_PWM_Start+0x72>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	bf14      	ite	ne
 8007db6:	2301      	movne	r3, #1
 8007db8:	2300      	moveq	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	e015      	b.n	8007dea <HAL_TIM_PWM_Start+0x9e>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b10      	cmp	r3, #16
 8007dc2:	d109      	bne.n	8007dd8 <HAL_TIM_PWM_Start+0x8c>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	bf14      	ite	ne
 8007dd0:	2301      	movne	r3, #1
 8007dd2:	2300      	moveq	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	e008      	b.n	8007dea <HAL_TIM_PWM_Start+0x9e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	bf14      	ite	ne
 8007de4:	2301      	movne	r3, #1
 8007de6:	2300      	moveq	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e09c      	b.n	8007f2c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <HAL_TIM_PWM_Start+0xb6>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e00:	e023      	b.n	8007e4a <HAL_TIM_PWM_Start+0xfe>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d104      	bne.n	8007e12 <HAL_TIM_PWM_Start+0xc6>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e10:	e01b      	b.n	8007e4a <HAL_TIM_PWM_Start+0xfe>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d104      	bne.n	8007e22 <HAL_TIM_PWM_Start+0xd6>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e20:	e013      	b.n	8007e4a <HAL_TIM_PWM_Start+0xfe>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b0c      	cmp	r3, #12
 8007e26:	d104      	bne.n	8007e32 <HAL_TIM_PWM_Start+0xe6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e30:	e00b      	b.n	8007e4a <HAL_TIM_PWM_Start+0xfe>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_PWM_Start+0xf6>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e40:	e003      	b.n	8007e4a <HAL_TIM_PWM_Start+0xfe>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f001 f86a 	bl	8008f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a35      	ldr	r2, [pc, #212]	; (8007f34 <HAL_TIM_PWM_Start+0x1e8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <HAL_TIM_PWM_Start+0x13e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a34      	ldr	r2, [pc, #208]	; (8007f38 <HAL_TIM_PWM_Start+0x1ec>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00e      	beq.n	8007e8a <HAL_TIM_PWM_Start+0x13e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a32      	ldr	r2, [pc, #200]	; (8007f3c <HAL_TIM_PWM_Start+0x1f0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d009      	beq.n	8007e8a <HAL_TIM_PWM_Start+0x13e>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a31      	ldr	r2, [pc, #196]	; (8007f40 <HAL_TIM_PWM_Start+0x1f4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d004      	beq.n	8007e8a <HAL_TIM_PWM_Start+0x13e>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a2f      	ldr	r2, [pc, #188]	; (8007f44 <HAL_TIM_PWM_Start+0x1f8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_Start+0x142>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_PWM_Start+0x144>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ea2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a22      	ldr	r2, [pc, #136]	; (8007f34 <HAL_TIM_PWM_Start+0x1e8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01d      	beq.n	8007eea <HAL_TIM_PWM_Start+0x19e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb6:	d018      	beq.n	8007eea <HAL_TIM_PWM_Start+0x19e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a22      	ldr	r2, [pc, #136]	; (8007f48 <HAL_TIM_PWM_Start+0x1fc>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d013      	beq.n	8007eea <HAL_TIM_PWM_Start+0x19e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a21      	ldr	r2, [pc, #132]	; (8007f4c <HAL_TIM_PWM_Start+0x200>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00e      	beq.n	8007eea <HAL_TIM_PWM_Start+0x19e>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <HAL_TIM_PWM_Start+0x204>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d009      	beq.n	8007eea <HAL_TIM_PWM_Start+0x19e>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <HAL_TIM_PWM_Start+0x1ec>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d004      	beq.n	8007eea <HAL_TIM_PWM_Start+0x19e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1b      	ldr	r2, [pc, #108]	; (8007f54 <HAL_TIM_PWM_Start+0x208>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d115      	bne.n	8007f16 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	4b19      	ldr	r3, [pc, #100]	; (8007f58 <HAL_TIM_PWM_Start+0x20c>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b06      	cmp	r3, #6
 8007efa:	d015      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x1dc>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f02:	d011      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0201 	orr.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f14:	e008      	b.n	8007f28 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	e000      	b.n	8007f2a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40010400 	.word	0x40010400
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40001800 	.word	0x40001800
 8007f58:	00010007 	.word	0x00010007

08007f5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ffdc 	bl	8008f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a3e      	ldr	r2, [pc, #248]	; (8008074 <HAL_TIM_PWM_Stop+0x118>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <HAL_TIM_PWM_Stop+0x4a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a3d      	ldr	r2, [pc, #244]	; (8008078 <HAL_TIM_PWM_Stop+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00e      	beq.n	8007fa6 <HAL_TIM_PWM_Stop+0x4a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a3b      	ldr	r2, [pc, #236]	; (800807c <HAL_TIM_PWM_Stop+0x120>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d009      	beq.n	8007fa6 <HAL_TIM_PWM_Stop+0x4a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a3a      	ldr	r2, [pc, #232]	; (8008080 <HAL_TIM_PWM_Stop+0x124>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d004      	beq.n	8007fa6 <HAL_TIM_PWM_Stop+0x4a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a38      	ldr	r2, [pc, #224]	; (8008084 <HAL_TIM_PWM_Stop+0x128>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d101      	bne.n	8007faa <HAL_TIM_PWM_Stop+0x4e>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_PWM_Stop+0x50>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d017      	beq.n	8007fe0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10f      	bne.n	8007fe0 <HAL_TIM_PWM_Stop+0x84>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6a1a      	ldr	r2, [r3, #32]
 8007fc6:	f240 4344 	movw	r3, #1092	; 0x444
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d107      	bne.n	8007fe0 <HAL_TIM_PWM_Stop+0x84>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10f      	bne.n	8008010 <HAL_TIM_PWM_Stop+0xb4>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6a1a      	ldr	r2, [r3, #32]
 8007ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <HAL_TIM_PWM_Stop+0xb4>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <HAL_TIM_PWM_Stop+0xc4>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800801e:	e023      	b.n	8008068 <HAL_TIM_PWM_Stop+0x10c>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b04      	cmp	r3, #4
 8008024:	d104      	bne.n	8008030 <HAL_TIM_PWM_Stop+0xd4>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800802e:	e01b      	b.n	8008068 <HAL_TIM_PWM_Stop+0x10c>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b08      	cmp	r3, #8
 8008034:	d104      	bne.n	8008040 <HAL_TIM_PWM_Stop+0xe4>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800803e:	e013      	b.n	8008068 <HAL_TIM_PWM_Stop+0x10c>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b0c      	cmp	r3, #12
 8008044:	d104      	bne.n	8008050 <HAL_TIM_PWM_Stop+0xf4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800804e:	e00b      	b.n	8008068 <HAL_TIM_PWM_Stop+0x10c>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b10      	cmp	r3, #16
 8008054:	d104      	bne.n	8008060 <HAL_TIM_PWM_Stop+0x104>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800805e:	e003      	b.n	8008068 <HAL_TIM_PWM_Stop+0x10c>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40010000 	.word	0x40010000
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800

08008088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b02      	cmp	r3, #2
 800809c:	d122      	bne.n	80080e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d11b      	bne.n	80080e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0202 	mvn.w	r2, #2
 80080b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fb0a 	bl	80086e4 <HAL_TIM_IC_CaptureCallback>
 80080d0:	e005      	b.n	80080de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fafc 	bl	80086d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb0d 	bl	80086f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d122      	bne.n	8008138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d11b      	bne.n	8008138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f06f 0204 	mvn.w	r2, #4
 8008108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2202      	movs	r2, #2
 800810e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fae0 	bl	80086e4 <HAL_TIM_IC_CaptureCallback>
 8008124:	e005      	b.n	8008132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fad2 	bl	80086d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fae3 	bl	80086f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0308 	and.w	r3, r3, #8
 8008142:	2b08      	cmp	r3, #8
 8008144:	d122      	bne.n	800818c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b08      	cmp	r3, #8
 8008152:	d11b      	bne.n	800818c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0208 	mvn.w	r2, #8
 800815c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2204      	movs	r2, #4
 8008162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fab6 	bl	80086e4 <HAL_TIM_IC_CaptureCallback>
 8008178:	e005      	b.n	8008186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 faa8 	bl	80086d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fab9 	bl	80086f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	2b10      	cmp	r3, #16
 8008198:	d122      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f003 0310 	and.w	r3, r3, #16
 80081a4:	2b10      	cmp	r3, #16
 80081a6:	d11b      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0210 	mvn.w	r2, #16
 80081b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2208      	movs	r2, #8
 80081b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa8c 	bl	80086e4 <HAL_TIM_IC_CaptureCallback>
 80081cc:	e005      	b.n	80081da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa7e 	bl	80086d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fa8f 	bl	80086f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d10e      	bne.n	800820c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d107      	bne.n	800820c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0201 	mvn.w	r2, #1
 8008204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7f9 fa6a 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b80      	cmp	r3, #128	; 0x80
 8008218:	d10e      	bne.n	8008238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008224:	2b80      	cmp	r3, #128	; 0x80
 8008226:	d107      	bne.n	8008238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 ffb0 	bl	8009198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008246:	d10e      	bne.n	8008266 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	d107      	bne.n	8008266 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800825e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 ffa3 	bl	80091ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b40      	cmp	r3, #64	; 0x40
 8008272:	d10e      	bne.n	8008292 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b40      	cmp	r3, #64	; 0x40
 8008280:	d107      	bne.n	8008292 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800828a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fa3d 	bl	800870c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b20      	cmp	r3, #32
 800829e:	d10e      	bne.n	80082be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d107      	bne.n	80082be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f06f 0220 	mvn.w	r2, #32
 80082b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 ff63 	bl	8009184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082de:	2302      	movs	r3, #2
 80082e0:	e0fd      	b.n	80084de <HAL_TIM_PWM_ConfigChannel+0x216>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b14      	cmp	r3, #20
 80082ee:	f200 80f0 	bhi.w	80084d2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	080084d3 	.word	0x080084d3
 8008300:	080084d3 	.word	0x080084d3
 8008304:	080084d3 	.word	0x080084d3
 8008308:	0800838d 	.word	0x0800838d
 800830c:	080084d3 	.word	0x080084d3
 8008310:	080084d3 	.word	0x080084d3
 8008314:	080084d3 	.word	0x080084d3
 8008318:	080083cf 	.word	0x080083cf
 800831c:	080084d3 	.word	0x080084d3
 8008320:	080084d3 	.word	0x080084d3
 8008324:	080084d3 	.word	0x080084d3
 8008328:	0800840f 	.word	0x0800840f
 800832c:	080084d3 	.word	0x080084d3
 8008330:	080084d3 	.word	0x080084d3
 8008334:	080084d3 	.word	0x080084d3
 8008338:	08008451 	.word	0x08008451
 800833c:	080084d3 	.word	0x080084d3
 8008340:	080084d3 	.word	0x080084d3
 8008344:	080084d3 	.word	0x080084d3
 8008348:	08008491 	.word	0x08008491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fa7e 	bl	8008854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0208 	orr.w	r2, r2, #8
 8008366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0204 	bic.w	r2, r2, #4
 8008376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6999      	ldr	r1, [r3, #24]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	691a      	ldr	r2, [r3, #16]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	619a      	str	r2, [r3, #24]
      break;
 800838a:	e0a3      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 faee 	bl	8008974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6999      	ldr	r1, [r3, #24]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	021a      	lsls	r2, r3, #8
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	619a      	str	r2, [r3, #24]
      break;
 80083cc:	e082      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fb57 	bl	8008a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69da      	ldr	r2, [r3, #28]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0208 	orr.w	r2, r2, #8
 80083e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0204 	bic.w	r2, r2, #4
 80083f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69d9      	ldr	r1, [r3, #28]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	691a      	ldr	r2, [r3, #16]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	61da      	str	r2, [r3, #28]
      break;
 800840c:	e062      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fbbd 	bl	8008b94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69da      	ldr	r2, [r3, #28]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69d9      	ldr	r1, [r3, #28]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	021a      	lsls	r2, r3, #8
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	61da      	str	r2, [r3, #28]
      break;
 800844e:	e041      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fc04 	bl	8008c64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0204 	bic.w	r2, r2, #4
 800847a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800848e:	e021      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fc46 	bl	8008d28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084d0:	e000      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80084d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop

080084e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_TIM_ConfigClockSource+0x18>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e0db      	b.n	80086b8 <HAL_TIM_ConfigClockSource+0x1d0>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4b69      	ldr	r3, [pc, #420]	; (80086c0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800851c:	4013      	ands	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008526:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a63      	ldr	r2, [pc, #396]	; (80086c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008536:	4293      	cmp	r3, r2
 8008538:	f000 80a9 	beq.w	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 800853c:	4a61      	ldr	r2, [pc, #388]	; (80086c4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	f200 80ae 	bhi.w	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008544:	4a60      	ldr	r2, [pc, #384]	; (80086c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	f000 80a1 	beq.w	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 800854c:	4a5e      	ldr	r2, [pc, #376]	; (80086c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	f200 80a6 	bhi.w	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008554:	4a5d      	ldr	r2, [pc, #372]	; (80086cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8008556:	4293      	cmp	r3, r2
 8008558:	f000 8099 	beq.w	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 800855c:	4a5b      	ldr	r2, [pc, #364]	; (80086cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800855e:	4293      	cmp	r3, r2
 8008560:	f200 809e 	bhi.w	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008564:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008568:	f000 8091 	beq.w	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 800856c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008570:	f200 8096 	bhi.w	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008578:	f000 8089 	beq.w	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 800857c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008580:	f200 808e 	bhi.w	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008588:	d03e      	beq.n	8008608 <HAL_TIM_ConfigClockSource+0x120>
 800858a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800858e:	f200 8087 	bhi.w	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 8008592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008596:	f000 8085 	beq.w	80086a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800859a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859e:	d87f      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085a0:	2b70      	cmp	r3, #112	; 0x70
 80085a2:	d01a      	beq.n	80085da <HAL_TIM_ConfigClockSource+0xf2>
 80085a4:	2b70      	cmp	r3, #112	; 0x70
 80085a6:	d87b      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085a8:	2b60      	cmp	r3, #96	; 0x60
 80085aa:	d050      	beq.n	800864e <HAL_TIM_ConfigClockSource+0x166>
 80085ac:	2b60      	cmp	r3, #96	; 0x60
 80085ae:	d877      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085b0:	2b50      	cmp	r3, #80	; 0x50
 80085b2:	d03c      	beq.n	800862e <HAL_TIM_ConfigClockSource+0x146>
 80085b4:	2b50      	cmp	r3, #80	; 0x50
 80085b6:	d873      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d058      	beq.n	800866e <HAL_TIM_ConfigClockSource+0x186>
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	d86f      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085c0:	2b30      	cmp	r3, #48	; 0x30
 80085c2:	d064      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 80085c4:	2b30      	cmp	r3, #48	; 0x30
 80085c6:	d86b      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085c8:	2b20      	cmp	r3, #32
 80085ca:	d060      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d867      	bhi.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d05c      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x1a6>
 80085d4:	2b10      	cmp	r3, #16
 80085d6:	d05a      	beq.n	800868e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80085d8:	e062      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6899      	ldr	r1, [r3, #8]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f000 fc7f 	bl	8008eec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	609a      	str	r2, [r3, #8]
      break;
 8008606:	e04e      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	6899      	ldr	r1, [r3, #8]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f000 fc68 	bl	8008eec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800862a:	609a      	str	r2, [r3, #8]
      break;
 800862c:	e03b      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6859      	ldr	r1, [r3, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	461a      	mov	r2, r3
 800863c:	f000 fbd8 	bl	8008df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2150      	movs	r1, #80	; 0x50
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fc32 	bl	8008eb0 <TIM_ITRx_SetConfig>
      break;
 800864c:	e02b      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6859      	ldr	r1, [r3, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	461a      	mov	r2, r3
 800865c:	f000 fbf7 	bl	8008e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2160      	movs	r1, #96	; 0x60
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fc22 	bl	8008eb0 <TIM_ITRx_SetConfig>
      break;
 800866c:	e01b      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6818      	ldr	r0, [r3, #0]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6859      	ldr	r1, [r3, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	461a      	mov	r2, r3
 800867c:	f000 fbb8 	bl	8008df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2140      	movs	r1, #64	; 0x40
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fc12 	bl	8008eb0 <TIM_ITRx_SetConfig>
      break;
 800868c:	e00b      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f000 fc09 	bl	8008eb0 <TIM_ITRx_SetConfig>
        break;
 800869e:	e002      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80086a0:	bf00      	nop
 80086a2:	e000      	b.n	80086a6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80086a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	ffceff88 	.word	0xffceff88
 80086c4:	00100040 	.word	0x00100040
 80086c8:	00100030 	.word	0x00100030
 80086cc:	00100020 	.word	0x00100020

080086d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a40      	ldr	r2, [pc, #256]	; (8008834 <TIM_Base_SetConfig+0x114>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d013      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d00f      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a3d      	ldr	r2, [pc, #244]	; (8008838 <TIM_Base_SetConfig+0x118>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a3c      	ldr	r2, [pc, #240]	; (800883c <TIM_Base_SetConfig+0x11c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a3b      	ldr	r2, [pc, #236]	; (8008840 <TIM_Base_SetConfig+0x120>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a3a      	ldr	r2, [pc, #232]	; (8008844 <TIM_Base_SetConfig+0x124>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d108      	bne.n	8008772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2f      	ldr	r2, [pc, #188]	; (8008834 <TIM_Base_SetConfig+0x114>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01f      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008780:	d01b      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2c      	ldr	r2, [pc, #176]	; (8008838 <TIM_Base_SetConfig+0x118>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d017      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2b      	ldr	r2, [pc, #172]	; (800883c <TIM_Base_SetConfig+0x11c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2a      	ldr	r2, [pc, #168]	; (8008840 <TIM_Base_SetConfig+0x120>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00f      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a29      	ldr	r2, [pc, #164]	; (8008844 <TIM_Base_SetConfig+0x124>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00b      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a28      	ldr	r2, [pc, #160]	; (8008848 <TIM_Base_SetConfig+0x128>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d007      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a27      	ldr	r2, [pc, #156]	; (800884c <TIM_Base_SetConfig+0x12c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d003      	beq.n	80087ba <TIM_Base_SetConfig+0x9a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a26      	ldr	r2, [pc, #152]	; (8008850 <TIM_Base_SetConfig+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d108      	bne.n	80087cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689a      	ldr	r2, [r3, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a10      	ldr	r2, [pc, #64]	; (8008834 <TIM_Base_SetConfig+0x114>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00f      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a12      	ldr	r2, [pc, #72]	; (8008844 <TIM_Base_SetConfig+0x124>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00b      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a11      	ldr	r2, [pc, #68]	; (8008848 <TIM_Base_SetConfig+0x128>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d007      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <TIM_Base_SetConfig+0x12c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d003      	beq.n	8008818 <TIM_Base_SetConfig+0xf8>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a0f      	ldr	r2, [pc, #60]	; (8008850 <TIM_Base_SetConfig+0x130>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d103      	bne.n	8008820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	615a      	str	r2, [r3, #20]
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40010400 	.word	0x40010400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800

08008854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4b37      	ldr	r3, [pc, #220]	; (800895c <TIM_OC1_SetConfig+0x108>)
 8008880:	4013      	ands	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0303 	bic.w	r3, r3, #3
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 0302 	bic.w	r3, r3, #2
 800889c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a2d      	ldr	r2, [pc, #180]	; (8008960 <TIM_OC1_SetConfig+0x10c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00f      	beq.n	80088d0 <TIM_OC1_SetConfig+0x7c>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a2c      	ldr	r2, [pc, #176]	; (8008964 <TIM_OC1_SetConfig+0x110>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00b      	beq.n	80088d0 <TIM_OC1_SetConfig+0x7c>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a2b      	ldr	r2, [pc, #172]	; (8008968 <TIM_OC1_SetConfig+0x114>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d007      	beq.n	80088d0 <TIM_OC1_SetConfig+0x7c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a2a      	ldr	r2, [pc, #168]	; (800896c <TIM_OC1_SetConfig+0x118>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_OC1_SetConfig+0x7c>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a29      	ldr	r2, [pc, #164]	; (8008970 <TIM_OC1_SetConfig+0x11c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10c      	bne.n	80088ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f023 0308 	bic.w	r3, r3, #8
 80088d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f023 0304 	bic.w	r3, r3, #4
 80088e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <TIM_OC1_SetConfig+0x10c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00f      	beq.n	8008912 <TIM_OC1_SetConfig+0xbe>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a1b      	ldr	r2, [pc, #108]	; (8008964 <TIM_OC1_SetConfig+0x110>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00b      	beq.n	8008912 <TIM_OC1_SetConfig+0xbe>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a1a      	ldr	r2, [pc, #104]	; (8008968 <TIM_OC1_SetConfig+0x114>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d007      	beq.n	8008912 <TIM_OC1_SetConfig+0xbe>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a19      	ldr	r2, [pc, #100]	; (800896c <TIM_OC1_SetConfig+0x118>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d003      	beq.n	8008912 <TIM_OC1_SetConfig+0xbe>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a18      	ldr	r2, [pc, #96]	; (8008970 <TIM_OC1_SetConfig+0x11c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d111      	bne.n	8008936 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	621a      	str	r2, [r3, #32]
}
 8008950:	bf00      	nop
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	fffeff8f 	.word	0xfffeff8f
 8008960:	40010000 	.word	0x40010000
 8008964:	40010400 	.word	0x40010400
 8008968:	40014000 	.word	0x40014000
 800896c:	40014400 	.word	0x40014400
 8008970:	40014800 	.word	0x40014800

08008974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f023 0210 	bic.w	r2, r3, #16
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4b34      	ldr	r3, [pc, #208]	; (8008a70 <TIM_OC2_SetConfig+0xfc>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f023 0320 	bic.w	r3, r3, #32
 80089be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <TIM_OC2_SetConfig+0x100>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_OC2_SetConfig+0x68>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a28      	ldr	r2, [pc, #160]	; (8008a78 <TIM_OC2_SetConfig+0x104>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d10d      	bne.n	80089f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <TIM_OC2_SetConfig+0x100>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00f      	beq.n	8008a20 <TIM_OC2_SetConfig+0xac>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <TIM_OC2_SetConfig+0x104>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <TIM_OC2_SetConfig+0xac>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <TIM_OC2_SetConfig+0x108>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d007      	beq.n	8008a20 <TIM_OC2_SetConfig+0xac>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <TIM_OC2_SetConfig+0x10c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_OC2_SetConfig+0xac>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a1a      	ldr	r2, [pc, #104]	; (8008a84 <TIM_OC2_SetConfig+0x110>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d113      	bne.n	8008a48 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	621a      	str	r2, [r3, #32]
}
 8008a62:	bf00      	nop
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	feff8fff 	.word	0xfeff8fff
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010400 	.word	0x40010400
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800

08008a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a27      	ldr	r2, [pc, #156]	; (8008b80 <TIM_OC3_SetConfig+0xf8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d003      	beq.n	8008aee <TIM_OC3_SetConfig+0x66>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a26      	ldr	r2, [pc, #152]	; (8008b84 <TIM_OC3_SetConfig+0xfc>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d10d      	bne.n	8008b0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a1c      	ldr	r2, [pc, #112]	; (8008b80 <TIM_OC3_SetConfig+0xf8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00f      	beq.n	8008b32 <TIM_OC3_SetConfig+0xaa>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a1b      	ldr	r2, [pc, #108]	; (8008b84 <TIM_OC3_SetConfig+0xfc>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00b      	beq.n	8008b32 <TIM_OC3_SetConfig+0xaa>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a1a      	ldr	r2, [pc, #104]	; (8008b88 <TIM_OC3_SetConfig+0x100>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d007      	beq.n	8008b32 <TIM_OC3_SetConfig+0xaa>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <TIM_OC3_SetConfig+0x104>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d003      	beq.n	8008b32 <TIM_OC3_SetConfig+0xaa>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <TIM_OC3_SetConfig+0x108>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d113      	bne.n	8008b5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	621a      	str	r2, [r3, #32]
}
 8008b74:	bf00      	nop
 8008b76:	371c      	adds	r7, #28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800

08008b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	031b      	lsls	r3, r3, #12
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <TIM_OC4_SetConfig+0xbc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00f      	beq.n	8008c14 <TIM_OC4_SetConfig+0x80>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a17      	ldr	r2, [pc, #92]	; (8008c54 <TIM_OC4_SetConfig+0xc0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00b      	beq.n	8008c14 <TIM_OC4_SetConfig+0x80>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a16      	ldr	r2, [pc, #88]	; (8008c58 <TIM_OC4_SetConfig+0xc4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d007      	beq.n	8008c14 <TIM_OC4_SetConfig+0x80>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <TIM_OC4_SetConfig+0xc8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC4_SetConfig+0x80>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <TIM_OC4_SetConfig+0xcc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d109      	bne.n	8008c28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	019b      	lsls	r3, r3, #6
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	621a      	str	r2, [r3, #32]
}
 8008c42:	bf00      	nop
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40010000 	.word	0x40010000
 8008c54:	40010400 	.word	0x40010400
 8008c58:	40014000 	.word	0x40014000
 8008c5c:	40014400 	.word	0x40014400
 8008c60:	40014800 	.word	0x40014800

08008c64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a17      	ldr	r2, [pc, #92]	; (8008d14 <TIM_OC5_SetConfig+0xb0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00f      	beq.n	8008cda <TIM_OC5_SetConfig+0x76>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a16      	ldr	r2, [pc, #88]	; (8008d18 <TIM_OC5_SetConfig+0xb4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00b      	beq.n	8008cda <TIM_OC5_SetConfig+0x76>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <TIM_OC5_SetConfig+0xb8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <TIM_OC5_SetConfig+0x76>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a14      	ldr	r2, [pc, #80]	; (8008d20 <TIM_OC5_SetConfig+0xbc>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <TIM_OC5_SetConfig+0x76>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a13      	ldr	r2, [pc, #76]	; (8008d24 <TIM_OC5_SetConfig+0xc0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d109      	bne.n	8008cee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	621a      	str	r2, [r3, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40010000 	.word	0x40010000
 8008d18:	40010400 	.word	0x40010400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	40014800 	.word	0x40014800

08008d28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	051b      	lsls	r3, r3, #20
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a18      	ldr	r2, [pc, #96]	; (8008ddc <TIM_OC6_SetConfig+0xb4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00f      	beq.n	8008da0 <TIM_OC6_SetConfig+0x78>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a17      	ldr	r2, [pc, #92]	; (8008de0 <TIM_OC6_SetConfig+0xb8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00b      	beq.n	8008da0 <TIM_OC6_SetConfig+0x78>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a16      	ldr	r2, [pc, #88]	; (8008de4 <TIM_OC6_SetConfig+0xbc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <TIM_OC6_SetConfig+0x78>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a15      	ldr	r2, [pc, #84]	; (8008de8 <TIM_OC6_SetConfig+0xc0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC6_SetConfig+0x78>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a14      	ldr	r2, [pc, #80]	; (8008dec <TIM_OC6_SetConfig+0xc4>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d109      	bne.n	8008db4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	029b      	lsls	r3, r3, #10
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40010000 	.word	0x40010000
 8008de0:	40010400 	.word	0x40010400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	f023 0201 	bic.w	r2, r3, #1
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f023 030a 	bic.w	r3, r3, #10
 8008e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b087      	sub	sp, #28
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f023 0210 	bic.w	r2, r3, #16
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	031b      	lsls	r3, r3, #12
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	011b      	lsls	r3, r3, #4
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <TIM_ITRx_SetConfig+0x38>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	f043 0307 	orr.w	r3, r3, #7
 8008ed2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	609a      	str	r2, [r3, #8]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	ffcfff8f 	.word	0xffcfff8f

08008eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	021a      	lsls	r2, r3, #8
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	609a      	str	r2, [r3, #8]
}
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 031f 	and.w	r3, r3, #31
 8008f3e:	2201      	movs	r2, #1
 8008f40:	fa02 f303 	lsl.w	r3, r2, r3
 8008f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1a      	ldr	r2, [r3, #32]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	401a      	ands	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a1a      	ldr	r2, [r3, #32]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	fa01 f303 	lsl.w	r3, r1, r3
 8008f64:	431a      	orrs	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	621a      	str	r2, [r3, #32]
}
 8008f6a:	bf00      	nop
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e068      	b.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a2e      	ldr	r2, [pc, #184]	; (8009070 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d004      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a2d      	ldr	r2, [pc, #180]	; (8009074 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d108      	bne.n	8008fd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d01d      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009002:	d018      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1b      	ldr	r2, [pc, #108]	; (8009078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a1a      	ldr	r2, [pc, #104]	; (800907c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00e      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a18      	ldr	r2, [pc, #96]	; (8009080 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d009      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a13      	ldr	r2, [pc, #76]	; (8009074 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d004      	beq.n	8009036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a14      	ldr	r2, [pc, #80]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d10c      	bne.n	8009050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800903c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	4313      	orrs	r3, r2
 8009046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	40010400 	.word	0x40010400
 8009078:	40000400 	.word	0x40000400
 800907c:	40000800 	.word	0x40000800
 8009080:	40000c00 	.word	0x40000c00
 8009084:	40001800 	.word	0x40001800

08009088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800909c:	2b01      	cmp	r3, #1
 800909e:	d101      	bne.n	80090a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090a0:	2302      	movs	r3, #2
 80090a2:	e065      	b.n	8009170 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a16      	ldr	r2, [pc, #88]	; (800917c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d004      	beq.n	8009132 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a14      	ldr	r2, [pc, #80]	; (8009180 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d115      	bne.n	800915e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	051b      	lsls	r3, r3, #20
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	40010000 	.word	0x40010000
 8009180:	40010400 	.word	0x40010400

08009184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e042      	b.n	8009258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7f8 fda5 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2224      	movs	r2, #36	; 0x24
 80091ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0201 	bic.w	r2, r2, #1
 8009200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fbd8 	bl	80099b8 <UART_SetConfig>
 8009208:	4603      	mov	r3, r0
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e022      	b.n	8009258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 f92c 	bl	800a478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800922e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800923e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f9b3 	bl	800a5bc <UART_CheckIdleState>
 8009256:	4603      	mov	r3, r0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af02      	add	r7, sp, #8
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009276:	2b20      	cmp	r3, #32
 8009278:	f040 8083 	bne.w	8009382 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <HAL_UART_Transmit+0x28>
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e07b      	b.n	8009384 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_UART_Transmit+0x3a>
 8009296:	2302      	movs	r3, #2
 8009298:	e074      	b.n	8009384 <HAL_UART_Transmit+0x124>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2221      	movs	r2, #33	; 0x21
 80092ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092b2:	f7f9 f961 	bl	8002578 <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d0:	d108      	bne.n	80092e4 <HAL_UART_Transmit+0x84>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80092da:	2300      	movs	r3, #0
 80092dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	e003      	b.n	80092ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80092f4:	e02c      	b.n	8009350 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2200      	movs	r2, #0
 80092fe:	2180      	movs	r1, #128	; 0x80
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f001 f9a6 	bl	800a652 <UART_WaitOnFlagUntilTimeout>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e039      	b.n	8009384 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009324:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	3302      	adds	r3, #2
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e007      	b.n	800933e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009356:	b29b      	uxth	r3, r3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1cc      	bne.n	80092f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2200      	movs	r2, #0
 8009364:	2140      	movs	r1, #64	; 0x40
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 f973 	bl	800a652 <UART_WaitOnFlagUntilTimeout>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e006      	b.n	8009384 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	e000      	b.n	8009384 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009382:	2302      	movs	r3, #2
  }
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d131      	bne.n	8009408 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <HAL_UART_Receive_IT+0x24>
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e02a      	b.n	800940a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Receive_IT+0x36>
 80093be:	2302      	movs	r3, #2
 80093c0:	e023      	b.n	800940a <HAL_UART_Receive_IT+0x7e>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a0f      	ldr	r2, [pc, #60]	; (8009414 <HAL_UART_Receive_IT+0x88>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00e      	beq.n	80093f8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d007      	beq.n	80093f8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80093f6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80093f8:	88fb      	ldrh	r3, [r7, #6]
 80093fa:	461a      	mov	r2, r3
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f001 f9a8 	bl	800a754 <UART_Start_Receive_IT>
 8009404:	4603      	mov	r3, r0
 8009406:	e000      	b.n	800940a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009408:	2302      	movs	r3, #2
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	58000c00 	.word	0x58000c00

08009418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	f640 030f 	movw	r3, #2063	; 0x80f
 800943e:	4013      	ands	r3, r2
 8009440:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d118      	bne.n	800947a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	f003 0320 	and.w	r3, r3, #32
 800944e:	2b00      	cmp	r3, #0
 8009450:	d013      	beq.n	800947a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	f003 0320 	and.w	r3, r3, #32
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 8282 	beq.w	8009974 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4798      	blx	r3
      }
      return;
 8009478:	e27c      	b.n	8009974 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80ef 	beq.w	8009660 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4b73      	ldr	r3, [pc, #460]	; (8009654 <HAL_UART_IRQHandler+0x23c>)
 8009486:	4013      	ands	r3, r2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d105      	bne.n	8009498 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	4b72      	ldr	r3, [pc, #456]	; (8009658 <HAL_UART_IRQHandler+0x240>)
 8009490:	4013      	ands	r3, r2
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80e4 	beq.w	8009660 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d010      	beq.n	80094c4 <HAL_UART_IRQHandler+0xac>
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2201      	movs	r2, #1
 80094b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ba:	f043 0201 	orr.w	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d010      	beq.n	80094f0 <HAL_UART_IRQHandler+0xd8>
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2202      	movs	r2, #2
 80094de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e6:	f043 0204 	orr.w	r2, r3, #4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d010      	beq.n	800951c <HAL_UART_IRQHandler+0x104>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2204      	movs	r2, #4
 800950a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009512:	f043 0202 	orr.w	r2, r3, #2
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f003 0308 	and.w	r3, r3, #8
 8009522:	2b00      	cmp	r3, #0
 8009524:	d015      	beq.n	8009552 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4b48      	ldr	r3, [pc, #288]	; (8009654 <HAL_UART_IRQHandler+0x23c>)
 8009534:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2208      	movs	r2, #8
 8009540:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009548:	f043 0208 	orr.w	r2, r3, #8
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009558:	2b00      	cmp	r3, #0
 800955a:	d011      	beq.n	8009580 <HAL_UART_IRQHandler+0x168>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00c      	beq.n	8009580 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800956e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009576:	f043 0220 	orr.w	r2, r3, #32
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 81f6 	beq.w	8009978 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d011      	beq.n	80095ba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d004      	beq.n	80095da <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d031      	beq.n	800963e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 f978 	bl	800a8d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ea:	2b40      	cmp	r3, #64	; 0x40
 80095ec:	d123      	bne.n	8009636 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d013      	beq.n	800962e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960a:	4a14      	ldr	r2, [pc, #80]	; (800965c <HAL_UART_IRQHandler+0x244>)
 800960c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009612:	4618      	mov	r0, r3
 8009614:	f7fa f860 	bl	80036d8 <HAL_DMA_Abort_IT>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d017      	beq.n	800964e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009628:	4610      	mov	r0, r2
 800962a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962c:	e00f      	b.n	800964e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f9ac 	bl	800998c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009634:	e00b      	b.n	800964e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f9a8 	bl	800998c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800963c:	e007      	b.n	800964e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f9a4 	bl	800998c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800964c:	e194      	b.n	8009978 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800964e:	bf00      	nop
    return;
 8009650:	e192      	b.n	8009978 <HAL_UART_IRQHandler+0x560>
 8009652:	bf00      	nop
 8009654:	10000001 	.word	0x10000001
 8009658:	04000120 	.word	0x04000120
 800965c:	0800a935 	.word	0x0800a935

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 810f 	bne.w	8009888 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f003 0310 	and.w	r3, r3, #16
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 8109 	beq.w	8009888 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8103 	beq.w	8009888 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2210      	movs	r2, #16
 8009688:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009694:	2b40      	cmp	r3, #64	; 0x40
 8009696:	f040 80bb 	bne.w	8009810 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a96      	ldr	r2, [pc, #600]	; (80098fc <HAL_UART_IRQHandler+0x4e4>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d059      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a94      	ldr	r2, [pc, #592]	; (8009900 <HAL_UART_IRQHandler+0x4e8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d053      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a92      	ldr	r2, [pc, #584]	; (8009904 <HAL_UART_IRQHandler+0x4ec>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d04d      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a90      	ldr	r2, [pc, #576]	; (8009908 <HAL_UART_IRQHandler+0x4f0>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d047      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a8e      	ldr	r2, [pc, #568]	; (800990c <HAL_UART_IRQHandler+0x4f4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d041      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a8c      	ldr	r2, [pc, #560]	; (8009910 <HAL_UART_IRQHandler+0x4f8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d03b      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a8a      	ldr	r2, [pc, #552]	; (8009914 <HAL_UART_IRQHandler+0x4fc>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d035      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a88      	ldr	r2, [pc, #544]	; (8009918 <HAL_UART_IRQHandler+0x500>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d02f      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a86      	ldr	r2, [pc, #536]	; (800991c <HAL_UART_IRQHandler+0x504>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d029      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a84      	ldr	r2, [pc, #528]	; (8009920 <HAL_UART_IRQHandler+0x508>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d023      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a82      	ldr	r2, [pc, #520]	; (8009924 <HAL_UART_IRQHandler+0x50c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d01d      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a80      	ldr	r2, [pc, #512]	; (8009928 <HAL_UART_IRQHandler+0x510>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d017      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a7e      	ldr	r2, [pc, #504]	; (800992c <HAL_UART_IRQHandler+0x514>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d011      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a7c      	ldr	r2, [pc, #496]	; (8009930 <HAL_UART_IRQHandler+0x518>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00b      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a7a      	ldr	r2, [pc, #488]	; (8009934 <HAL_UART_IRQHandler+0x51c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d005      	beq.n	800975a <HAL_UART_IRQHandler+0x342>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a78      	ldr	r2, [pc, #480]	; (8009938 <HAL_UART_IRQHandler+0x520>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d105      	bne.n	8009766 <HAL_UART_IRQHandler+0x34e>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	b29b      	uxth	r3, r3
 8009764:	e004      	b.n	8009770 <HAL_UART_IRQHandler+0x358>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	b29b      	uxth	r3, r3
 8009770:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009772:	893b      	ldrh	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8101 	beq.w	800997c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009780:	893a      	ldrh	r2, [r7, #8]
 8009782:	429a      	cmp	r2, r3
 8009784:	f080 80fa 	bcs.w	800997c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	893a      	ldrh	r2, [r7, #8]
 800978c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800979a:	d02b      	beq.n	80097f4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0201 	bic.w	r2, r2, #1
 80097ba:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689a      	ldr	r2, [r3, #8]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ca:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0210 	bic.w	r2, r2, #16
 80097e8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f9 fc54 	bl	800309c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009800:	b29b      	uxth	r3, r3
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	b29b      	uxth	r3, r3
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8c9 	bl	80099a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800980e:	e0b5      	b.n	800997c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800981c:	b29b      	uxth	r3, r3
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009828:	b29b      	uxth	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80a8 	beq.w	8009980 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009830:	897b      	ldrh	r3, [r7, #10]
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 80a4 	beq.w	8009980 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009846:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6899      	ldr	r1, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b3a      	ldr	r3, [pc, #232]	; (800993c <HAL_UART_IRQHandler+0x524>)
 8009854:	400b      	ands	r3, r1
 8009856:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0210 	bic.w	r2, r2, #16
 800987a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800987c:	897b      	ldrh	r3, [r7, #10]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f88d 	bl	80099a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009886:	e07b      	b.n	8009980 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00d      	beq.n	80098ae <HAL_UART_IRQHandler+0x496>
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d008      	beq.n	80098ae <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 fb50 	bl	800af4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ac:	e06b      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d012      	beq.n	80098de <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d008      	beq.n	80098de <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d057      	beq.n	8009984 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
    }
    return;
 80098dc:	e052      	b.n	8009984 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d02b      	beq.n	8009940 <HAL_UART_IRQHandler+0x528>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d026      	beq.n	8009940 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 f834 	bl	800a960 <UART_EndTransmit_IT>
    return;
 80098f8:	e045      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
 80098fa:	bf00      	nop
 80098fc:	40020010 	.word	0x40020010
 8009900:	40020028 	.word	0x40020028
 8009904:	40020040 	.word	0x40020040
 8009908:	40020058 	.word	0x40020058
 800990c:	40020070 	.word	0x40020070
 8009910:	40020088 	.word	0x40020088
 8009914:	400200a0 	.word	0x400200a0
 8009918:	400200b8 	.word	0x400200b8
 800991c:	40020410 	.word	0x40020410
 8009920:	40020428 	.word	0x40020428
 8009924:	40020440 	.word	0x40020440
 8009928:	40020458 	.word	0x40020458
 800992c:	40020470 	.word	0x40020470
 8009930:	40020488 	.word	0x40020488
 8009934:	400204a0 	.word	0x400204a0
 8009938:	400204b8 	.word	0x400204b8
 800993c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d008      	beq.n	800995c <HAL_UART_IRQHandler+0x544>
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d003      	beq.n	800995c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 fb0d 	bl	800af74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800995a:	e014      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00f      	beq.n	8009986 <HAL_UART_IRQHandler+0x56e>
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	2b00      	cmp	r3, #0
 800996a:	da0c      	bge.n	8009986 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 faf7 	bl	800af60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009972:	e008      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
      return;
 8009974:	bf00      	nop
 8009976:	e006      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
    return;
 8009978:	bf00      	nop
 800997a:	e004      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
      return;
 800997c:	bf00      	nop
 800997e:	e002      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
      return;
 8009980:	bf00      	nop
 8009982:	e000      	b.n	8009986 <HAL_UART_IRQHandler+0x56e>
    return;
 8009984:	bf00      	nop
  }
}
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099b8:	b5b0      	push	{r4, r5, r7, lr}
 80099ba:	b08e      	sub	sp, #56	; 0x38
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	4313      	orrs	r3, r2
 80099dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	4bbf      	ldr	r3, [pc, #764]	; (8009ce4 <UART_SetConfig+0x32c>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099ee:	430b      	orrs	r3, r1
 80099f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4ab5      	ldr	r2, [pc, #724]	; (8009ce8 <UART_SetConfig+0x330>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d004      	beq.n	8009a22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	4bb0      	ldr	r3, [pc, #704]	; (8009cec <UART_SetConfig+0x334>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a32:	430b      	orrs	r3, r1
 8009a34:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	f023 010f 	bic.w	r1, r3, #15
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4aa7      	ldr	r2, [pc, #668]	; (8009cf0 <UART_SetConfig+0x338>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d176      	bne.n	8009b44 <UART_SetConfig+0x18c>
 8009a56:	4ba7      	ldr	r3, [pc, #668]	; (8009cf4 <UART_SetConfig+0x33c>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a5e:	2b28      	cmp	r3, #40	; 0x28
 8009a60:	d86c      	bhi.n	8009b3c <UART_SetConfig+0x184>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <UART_SetConfig+0xb0>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009b0d 	.word	0x08009b0d
 8009a6c:	08009b3d 	.word	0x08009b3d
 8009a70:	08009b3d 	.word	0x08009b3d
 8009a74:	08009b3d 	.word	0x08009b3d
 8009a78:	08009b3d 	.word	0x08009b3d
 8009a7c:	08009b3d 	.word	0x08009b3d
 8009a80:	08009b3d 	.word	0x08009b3d
 8009a84:	08009b3d 	.word	0x08009b3d
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b3d 	.word	0x08009b3d
 8009a90:	08009b3d 	.word	0x08009b3d
 8009a94:	08009b3d 	.word	0x08009b3d
 8009a98:	08009b3d 	.word	0x08009b3d
 8009a9c:	08009b3d 	.word	0x08009b3d
 8009aa0:	08009b3d 	.word	0x08009b3d
 8009aa4:	08009b3d 	.word	0x08009b3d
 8009aa8:	08009b1d 	.word	0x08009b1d
 8009aac:	08009b3d 	.word	0x08009b3d
 8009ab0:	08009b3d 	.word	0x08009b3d
 8009ab4:	08009b3d 	.word	0x08009b3d
 8009ab8:	08009b3d 	.word	0x08009b3d
 8009abc:	08009b3d 	.word	0x08009b3d
 8009ac0:	08009b3d 	.word	0x08009b3d
 8009ac4:	08009b3d 	.word	0x08009b3d
 8009ac8:	08009b25 	.word	0x08009b25
 8009acc:	08009b3d 	.word	0x08009b3d
 8009ad0:	08009b3d 	.word	0x08009b3d
 8009ad4:	08009b3d 	.word	0x08009b3d
 8009ad8:	08009b3d 	.word	0x08009b3d
 8009adc:	08009b3d 	.word	0x08009b3d
 8009ae0:	08009b3d 	.word	0x08009b3d
 8009ae4:	08009b3d 	.word	0x08009b3d
 8009ae8:	08009b2d 	.word	0x08009b2d
 8009aec:	08009b3d 	.word	0x08009b3d
 8009af0:	08009b3d 	.word	0x08009b3d
 8009af4:	08009b3d 	.word	0x08009b3d
 8009af8:	08009b3d 	.word	0x08009b3d
 8009afc:	08009b3d 	.word	0x08009b3d
 8009b00:	08009b3d 	.word	0x08009b3d
 8009b04:	08009b3d 	.word	0x08009b3d
 8009b08:	08009b35 	.word	0x08009b35
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e222      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	e21e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	e21a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e216      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e212      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b34:	2340      	movs	r3, #64	; 0x40
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e20e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e20a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a6b      	ldr	r2, [pc, #428]	; (8009cf8 <UART_SetConfig+0x340>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d130      	bne.n	8009bb0 <UART_SetConfig+0x1f8>
 8009b4e:	4b69      	ldr	r3, [pc, #420]	; (8009cf4 <UART_SetConfig+0x33c>)
 8009b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	d826      	bhi.n	8009ba8 <UART_SetConfig+0x1f0>
 8009b5a:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <UART_SetConfig+0x1a8>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009b79 	.word	0x08009b79
 8009b64:	08009b81 	.word	0x08009b81
 8009b68:	08009b89 	.word	0x08009b89
 8009b6c:	08009b91 	.word	0x08009b91
 8009b70:	08009b99 	.word	0x08009b99
 8009b74:	08009ba1 	.word	0x08009ba1
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e1ec      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b80:	2304      	movs	r3, #4
 8009b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b86:	e1e8      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b88:	2308      	movs	r3, #8
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e1e4      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b90:	2310      	movs	r3, #16
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e1e0      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e1dc      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e1d8      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e1d4      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a51      	ldr	r2, [pc, #324]	; (8009cfc <UART_SetConfig+0x344>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d130      	bne.n	8009c1c <UART_SetConfig+0x264>
 8009bba:	4b4e      	ldr	r3, [pc, #312]	; (8009cf4 <UART_SetConfig+0x33c>)
 8009bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	d826      	bhi.n	8009c14 <UART_SetConfig+0x25c>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0x214>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009be5 	.word	0x08009be5
 8009bd0:	08009bed 	.word	0x08009bed
 8009bd4:	08009bf5 	.word	0x08009bf5
 8009bd8:	08009bfd 	.word	0x08009bfd
 8009bdc:	08009c05 	.word	0x08009c05
 8009be0:	08009c0d 	.word	0x08009c0d
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e1b6      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009bec:	2304      	movs	r3, #4
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e1b2      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e1ae      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e1aa      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c04:	2320      	movs	r3, #32
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e1a6      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c0c:	2340      	movs	r3, #64	; 0x40
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e1a2      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e19e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a37      	ldr	r2, [pc, #220]	; (8009d00 <UART_SetConfig+0x348>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d130      	bne.n	8009c88 <UART_SetConfig+0x2d0>
 8009c26:	4b33      	ldr	r3, [pc, #204]	; (8009cf4 <UART_SetConfig+0x33c>)
 8009c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2a:	f003 0307 	and.w	r3, r3, #7
 8009c2e:	2b05      	cmp	r3, #5
 8009c30:	d826      	bhi.n	8009c80 <UART_SetConfig+0x2c8>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <UART_SetConfig+0x280>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c51 	.word	0x08009c51
 8009c3c:	08009c59 	.word	0x08009c59
 8009c40:	08009c61 	.word	0x08009c61
 8009c44:	08009c69 	.word	0x08009c69
 8009c48:	08009c71 	.word	0x08009c71
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	2300      	movs	r3, #0
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e180      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c58:	2304      	movs	r3, #4
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	e17c      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c60:	2308      	movs	r3, #8
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e178      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c68:	2310      	movs	r3, #16
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e174      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c70:	2320      	movs	r3, #32
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e170      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c78:	2340      	movs	r3, #64	; 0x40
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e16c      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c80:	2380      	movs	r3, #128	; 0x80
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e168      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a1d      	ldr	r2, [pc, #116]	; (8009d04 <UART_SetConfig+0x34c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d142      	bne.n	8009d18 <UART_SetConfig+0x360>
 8009c92:	4b18      	ldr	r3, [pc, #96]	; (8009cf4 <UART_SetConfig+0x33c>)
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b05      	cmp	r3, #5
 8009c9c:	d838      	bhi.n	8009d10 <UART_SetConfig+0x358>
 8009c9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <UART_SetConfig+0x2ec>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009cbd 	.word	0x08009cbd
 8009ca8:	08009cc5 	.word	0x08009cc5
 8009cac:	08009ccd 	.word	0x08009ccd
 8009cb0:	08009cd5 	.word	0x08009cd5
 8009cb4:	08009cdd 	.word	0x08009cdd
 8009cb8:	08009d09 	.word	0x08009d09
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc2:	e14a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cca:	e146      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e142      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009cd4:	2310      	movs	r3, #16
 8009cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cda:	e13e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009cdc:	2320      	movs	r3, #32
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	e13a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ce4:	cfff69f3 	.word	0xcfff69f3
 8009ce8:	58000c00 	.word	0x58000c00
 8009cec:	11fff4ff 	.word	0x11fff4ff
 8009cf0:	40011000 	.word	0x40011000
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	40004400 	.word	0x40004400
 8009cfc:	40004800 	.word	0x40004800
 8009d00:	40004c00 	.word	0x40004c00
 8009d04:	40005000 	.word	0x40005000
 8009d08:	2340      	movs	r3, #64	; 0x40
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e124      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009d10:	2380      	movs	r3, #128	; 0x80
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e120      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4acc      	ldr	r2, [pc, #816]	; (800a050 <UART_SetConfig+0x698>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d176      	bne.n	8009e10 <UART_SetConfig+0x458>
 8009d22:	4bcc      	ldr	r3, [pc, #816]	; (800a054 <UART_SetConfig+0x69c>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d2a:	2b28      	cmp	r3, #40	; 0x28
 8009d2c:	d86c      	bhi.n	8009e08 <UART_SetConfig+0x450>
 8009d2e:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <UART_SetConfig+0x37c>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009dd9 	.word	0x08009dd9
 8009d38:	08009e09 	.word	0x08009e09
 8009d3c:	08009e09 	.word	0x08009e09
 8009d40:	08009e09 	.word	0x08009e09
 8009d44:	08009e09 	.word	0x08009e09
 8009d48:	08009e09 	.word	0x08009e09
 8009d4c:	08009e09 	.word	0x08009e09
 8009d50:	08009e09 	.word	0x08009e09
 8009d54:	08009de1 	.word	0x08009de1
 8009d58:	08009e09 	.word	0x08009e09
 8009d5c:	08009e09 	.word	0x08009e09
 8009d60:	08009e09 	.word	0x08009e09
 8009d64:	08009e09 	.word	0x08009e09
 8009d68:	08009e09 	.word	0x08009e09
 8009d6c:	08009e09 	.word	0x08009e09
 8009d70:	08009e09 	.word	0x08009e09
 8009d74:	08009de9 	.word	0x08009de9
 8009d78:	08009e09 	.word	0x08009e09
 8009d7c:	08009e09 	.word	0x08009e09
 8009d80:	08009e09 	.word	0x08009e09
 8009d84:	08009e09 	.word	0x08009e09
 8009d88:	08009e09 	.word	0x08009e09
 8009d8c:	08009e09 	.word	0x08009e09
 8009d90:	08009e09 	.word	0x08009e09
 8009d94:	08009df1 	.word	0x08009df1
 8009d98:	08009e09 	.word	0x08009e09
 8009d9c:	08009e09 	.word	0x08009e09
 8009da0:	08009e09 	.word	0x08009e09
 8009da4:	08009e09 	.word	0x08009e09
 8009da8:	08009e09 	.word	0x08009e09
 8009dac:	08009e09 	.word	0x08009e09
 8009db0:	08009e09 	.word	0x08009e09
 8009db4:	08009df9 	.word	0x08009df9
 8009db8:	08009e09 	.word	0x08009e09
 8009dbc:	08009e09 	.word	0x08009e09
 8009dc0:	08009e09 	.word	0x08009e09
 8009dc4:	08009e09 	.word	0x08009e09
 8009dc8:	08009e09 	.word	0x08009e09
 8009dcc:	08009e09 	.word	0x08009e09
 8009dd0:	08009e09 	.word	0x08009e09
 8009dd4:	08009e01 	.word	0x08009e01
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e0bc      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009de0:	2304      	movs	r3, #4
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e0b8      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009de8:	2308      	movs	r3, #8
 8009dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dee:	e0b4      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009df0:	2310      	movs	r3, #16
 8009df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009df6:	e0b0      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009df8:	2320      	movs	r3, #32
 8009dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfe:	e0ac      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e00:	2340      	movs	r3, #64	; 0x40
 8009e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e06:	e0a8      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e08:	2380      	movs	r3, #128	; 0x80
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e0a4      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a90      	ldr	r2, [pc, #576]	; (800a058 <UART_SetConfig+0x6a0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d130      	bne.n	8009e7c <UART_SetConfig+0x4c4>
 8009e1a:	4b8e      	ldr	r3, [pc, #568]	; (800a054 <UART_SetConfig+0x69c>)
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1e:	f003 0307 	and.w	r3, r3, #7
 8009e22:	2b05      	cmp	r3, #5
 8009e24:	d826      	bhi.n	8009e74 <UART_SetConfig+0x4bc>
 8009e26:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <UART_SetConfig+0x474>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009e45 	.word	0x08009e45
 8009e30:	08009e4d 	.word	0x08009e4d
 8009e34:	08009e55 	.word	0x08009e55
 8009e38:	08009e5d 	.word	0x08009e5d
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	2300      	movs	r3, #0
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4a:	e086      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e52:	e082      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e54:	2308      	movs	r3, #8
 8009e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5a:	e07e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e07a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e64:	2320      	movs	r3, #32
 8009e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6a:	e076      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e072      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e74:	2380      	movs	r3, #128	; 0x80
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e06e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a76      	ldr	r2, [pc, #472]	; (800a05c <UART_SetConfig+0x6a4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d130      	bne.n	8009ee8 <UART_SetConfig+0x530>
 8009e86:	4b73      	ldr	r3, [pc, #460]	; (800a054 <UART_SetConfig+0x69c>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	2b05      	cmp	r3, #5
 8009e90:	d826      	bhi.n	8009ee0 <UART_SetConfig+0x528>
 8009e92:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <UART_SetConfig+0x4e0>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009eb1 	.word	0x08009eb1
 8009e9c:	08009eb9 	.word	0x08009eb9
 8009ea0:	08009ec1 	.word	0x08009ec1
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e050      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e04c      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e048      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e044      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ed0:	2320      	movs	r3, #32
 8009ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed6:	e040      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ed8:	2340      	movs	r3, #64	; 0x40
 8009eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ede:	e03c      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee6:	e038      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a5c      	ldr	r2, [pc, #368]	; (800a060 <UART_SetConfig+0x6a8>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d130      	bne.n	8009f54 <UART_SetConfig+0x59c>
 8009ef2:	4b58      	ldr	r3, [pc, #352]	; (800a054 <UART_SetConfig+0x69c>)
 8009ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d826      	bhi.n	8009f4c <UART_SetConfig+0x594>
 8009efe:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <UART_SetConfig+0x54c>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f1d 	.word	0x08009f1d
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f2d 	.word	0x08009f2d
 8009f10:	08009f35 	.word	0x08009f35
 8009f14:	08009f3d 	.word	0x08009f3d
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e01a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f24:	2304      	movs	r3, #4
 8009f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2a:	e016      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e012      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f34:	2310      	movs	r3, #16
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e00e      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e00a      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f44:	2340      	movs	r3, #64	; 0x40
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e006      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f4c:	2380      	movs	r3, #128	; 0x80
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e002      	b.n	8009f5a <UART_SetConfig+0x5a2>
 8009f54:	2380      	movs	r3, #128	; 0x80
 8009f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a40      	ldr	r2, [pc, #256]	; (800a060 <UART_SetConfig+0x6a8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	f040 80ef 	bne.w	800a144 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	dc46      	bgt.n	8009ffc <UART_SetConfig+0x644>
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	f2c0 8081 	blt.w	800a076 <UART_SetConfig+0x6be>
 8009f74:	3b02      	subs	r3, #2
 8009f76:	2b1e      	cmp	r3, #30
 8009f78:	d87d      	bhi.n	800a076 <UART_SetConfig+0x6be>
 8009f7a:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <UART_SetConfig+0x5c8>)
 8009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f80:	0800a003 	.word	0x0800a003
 8009f84:	0800a077 	.word	0x0800a077
 8009f88:	0800a00b 	.word	0x0800a00b
 8009f8c:	0800a077 	.word	0x0800a077
 8009f90:	0800a077 	.word	0x0800a077
 8009f94:	0800a077 	.word	0x0800a077
 8009f98:	0800a01b 	.word	0x0800a01b
 8009f9c:	0800a077 	.word	0x0800a077
 8009fa0:	0800a077 	.word	0x0800a077
 8009fa4:	0800a077 	.word	0x0800a077
 8009fa8:	0800a077 	.word	0x0800a077
 8009fac:	0800a077 	.word	0x0800a077
 8009fb0:	0800a077 	.word	0x0800a077
 8009fb4:	0800a077 	.word	0x0800a077
 8009fb8:	0800a02b 	.word	0x0800a02b
 8009fbc:	0800a077 	.word	0x0800a077
 8009fc0:	0800a077 	.word	0x0800a077
 8009fc4:	0800a077 	.word	0x0800a077
 8009fc8:	0800a077 	.word	0x0800a077
 8009fcc:	0800a077 	.word	0x0800a077
 8009fd0:	0800a077 	.word	0x0800a077
 8009fd4:	0800a077 	.word	0x0800a077
 8009fd8:	0800a077 	.word	0x0800a077
 8009fdc:	0800a077 	.word	0x0800a077
 8009fe0:	0800a077 	.word	0x0800a077
 8009fe4:	0800a077 	.word	0x0800a077
 8009fe8:	0800a077 	.word	0x0800a077
 8009fec:	0800a077 	.word	0x0800a077
 8009ff0:	0800a077 	.word	0x0800a077
 8009ff4:	0800a077 	.word	0x0800a077
 8009ff8:	0800a069 	.word	0x0800a069
 8009ffc:	2b40      	cmp	r3, #64	; 0x40
 8009ffe:	d036      	beq.n	800a06e <UART_SetConfig+0x6b6>
 800a000:	e039      	b.n	800a076 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a002:	f7fd f80d 	bl	8007020 <HAL_RCCEx_GetD3PCLK1Freq>
 800a006:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a008:	e03b      	b.n	800a082 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00a:	f107 0314 	add.w	r3, r7, #20
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd f81c 	bl	800704c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a018:	e033      	b.n	800a082 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a01a:	f107 0308 	add.w	r3, r7, #8
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fd f968 	bl	80072f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a028:	e02b      	b.n	800a082 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a02a:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <UART_SetConfig+0x69c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0320 	and.w	r3, r3, #32
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a036:	4b07      	ldr	r3, [pc, #28]	; (800a054 <UART_SetConfig+0x69c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	08db      	lsrs	r3, r3, #3
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	4a08      	ldr	r2, [pc, #32]	; (800a064 <UART_SetConfig+0x6ac>)
 800a042:	fa22 f303 	lsr.w	r3, r2, r3
 800a046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a048:	e01b      	b.n	800a082 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a04a:	4b06      	ldr	r3, [pc, #24]	; (800a064 <UART_SetConfig+0x6ac>)
 800a04c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a04e:	e018      	b.n	800a082 <UART_SetConfig+0x6ca>
 800a050:	40011400 	.word	0x40011400
 800a054:	58024400 	.word	0x58024400
 800a058:	40007800 	.word	0x40007800
 800a05c:	40007c00 	.word	0x40007c00
 800a060:	58000c00 	.word	0x58000c00
 800a064:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a068:	4bc4      	ldr	r3, [pc, #784]	; (800a37c <UART_SetConfig+0x9c4>)
 800a06a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a06c:	e009      	b.n	800a082 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a074:	e005      	b.n	800a082 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a076:	2300      	movs	r3, #0
 800a078:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 81da 	beq.w	800a43e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	4abc      	ldr	r2, [pc, #752]	; (800a380 <UART_SetConfig+0x9c8>)
 800a090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a094:	461a      	mov	r2, r3
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	fbb3 f3f2 	udiv	r3, r3, r2
 800a09c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	4413      	add	r3, r2
 800a0a8:	6a3a      	ldr	r2, [r7, #32]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d305      	bcc.n	800a0ba <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0b4:	6a3a      	ldr	r2, [r7, #32]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d903      	bls.n	800a0c2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0c0:	e1bd      	b.n	800a43e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f04f 0100 	mov.w	r1, #0
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	4aac      	ldr	r2, [pc, #688]	; (800a380 <UART_SetConfig+0x9c8>)
 800a0d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	f7f6 f959 	bl	8000390 <__aeabi_uldivmod>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4610      	mov	r0, r2
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	f04f 0200 	mov.w	r2, #0
 800a0ea:	f04f 0300 	mov.w	r3, #0
 800a0ee:	020b      	lsls	r3, r1, #8
 800a0f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0f4:	0202      	lsls	r2, r0, #8
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	6849      	ldr	r1, [r1, #4]
 800a0fa:	0849      	lsrs	r1, r1, #1
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	f04f 0100 	mov.w	r1, #0
 800a102:	1814      	adds	r4, r2, r0
 800a104:	eb43 0501 	adc.w	r5, r3, r1
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	461a      	mov	r2, r3
 800a10e:	f04f 0300 	mov.w	r3, #0
 800a112:	4620      	mov	r0, r4
 800a114:	4629      	mov	r1, r5
 800a116:	f7f6 f93b 	bl	8000390 <__aeabi_uldivmod>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	4613      	mov	r3, r2
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a128:	d308      	bcc.n	800a13c <UART_SetConfig+0x784>
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a130:	d204      	bcs.n	800a13c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a138:	60da      	str	r2, [r3, #12]
 800a13a:	e180      	b.n	800a43e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a142:	e17c      	b.n	800a43e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a14c:	f040 80bf 	bne.w	800a2ce <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a150:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a154:	2b20      	cmp	r3, #32
 800a156:	dc49      	bgt.n	800a1ec <UART_SetConfig+0x834>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	db7c      	blt.n	800a256 <UART_SetConfig+0x89e>
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	d87a      	bhi.n	800a256 <UART_SetConfig+0x89e>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <UART_SetConfig+0x7b0>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a1fb 	.word	0x0800a1fb
 800a170:	0800a257 	.word	0x0800a257
 800a174:	0800a257 	.word	0x0800a257
 800a178:	0800a203 	.word	0x0800a203
 800a17c:	0800a257 	.word	0x0800a257
 800a180:	0800a257 	.word	0x0800a257
 800a184:	0800a257 	.word	0x0800a257
 800a188:	0800a213 	.word	0x0800a213
 800a18c:	0800a257 	.word	0x0800a257
 800a190:	0800a257 	.word	0x0800a257
 800a194:	0800a257 	.word	0x0800a257
 800a198:	0800a257 	.word	0x0800a257
 800a19c:	0800a257 	.word	0x0800a257
 800a1a0:	0800a257 	.word	0x0800a257
 800a1a4:	0800a257 	.word	0x0800a257
 800a1a8:	0800a223 	.word	0x0800a223
 800a1ac:	0800a257 	.word	0x0800a257
 800a1b0:	0800a257 	.word	0x0800a257
 800a1b4:	0800a257 	.word	0x0800a257
 800a1b8:	0800a257 	.word	0x0800a257
 800a1bc:	0800a257 	.word	0x0800a257
 800a1c0:	0800a257 	.word	0x0800a257
 800a1c4:	0800a257 	.word	0x0800a257
 800a1c8:	0800a257 	.word	0x0800a257
 800a1cc:	0800a257 	.word	0x0800a257
 800a1d0:	0800a257 	.word	0x0800a257
 800a1d4:	0800a257 	.word	0x0800a257
 800a1d8:	0800a257 	.word	0x0800a257
 800a1dc:	0800a257 	.word	0x0800a257
 800a1e0:	0800a257 	.word	0x0800a257
 800a1e4:	0800a257 	.word	0x0800a257
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	2b40      	cmp	r3, #64	; 0x40
 800a1ee:	d02e      	beq.n	800a24e <UART_SetConfig+0x896>
 800a1f0:	e031      	b.n	800a256 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f2:	f7fb ffa9 	bl	8006148 <HAL_RCC_GetPCLK1Freq>
 800a1f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1f8:	e033      	b.n	800a262 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1fa:	f7fb ffbb 	bl	8006174 <HAL_RCC_GetPCLK2Freq>
 800a1fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a200:	e02f      	b.n	800a262 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a202:	f107 0314 	add.w	r3, r7, #20
 800a206:	4618      	mov	r0, r3
 800a208:	f7fc ff20 	bl	800704c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a210:	e027      	b.n	800a262 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4618      	mov	r0, r3
 800a218:	f7fd f86c 	bl	80072f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a220:	e01f      	b.n	800a262 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a222:	4b58      	ldr	r3, [pc, #352]	; (800a384 <UART_SetConfig+0x9cc>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0320 	and.w	r3, r3, #32
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a22e:	4b55      	ldr	r3, [pc, #340]	; (800a384 <UART_SetConfig+0x9cc>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	4a53      	ldr	r2, [pc, #332]	; (800a388 <UART_SetConfig+0x9d0>)
 800a23a:	fa22 f303 	lsr.w	r3, r2, r3
 800a23e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a240:	e00f      	b.n	800a262 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a242:	4b51      	ldr	r3, [pc, #324]	; (800a388 <UART_SetConfig+0x9d0>)
 800a244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a246:	e00c      	b.n	800a262 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a248:	4b4c      	ldr	r3, [pc, #304]	; (800a37c <UART_SetConfig+0x9c4>)
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24c:	e009      	b.n	800a262 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a254:	e005      	b.n	800a262 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a256:	2300      	movs	r3, #0
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80ea 	beq.w	800a43e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	4a44      	ldr	r2, [pc, #272]	; (800a380 <UART_SetConfig+0x9c8>)
 800a270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a274:	461a      	mov	r2, r3
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	fbb3 f3f2 	udiv	r3, r3, r2
 800a27c:	005a      	lsls	r2, r3, #1
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28e:	b29b      	uxth	r3, r3
 800a290:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a294:	2b0f      	cmp	r3, #15
 800a296:	d916      	bls.n	800a2c6 <UART_SetConfig+0x90e>
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29e:	d212      	bcs.n	800a2c6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f023 030f 	bic.w	r3, r3, #15
 800a2a8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	085b      	lsrs	r3, r3, #1
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a2c2:	60da      	str	r2, [r3, #12]
 800a2c4:	e0bb      	b.n	800a43e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a2cc:	e0b7      	b.n	800a43e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	dc4a      	bgt.n	800a36c <UART_SetConfig+0x9b4>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f2c0 8086 	blt.w	800a3e8 <UART_SetConfig+0xa30>
 800a2dc:	2b20      	cmp	r3, #32
 800a2de:	f200 8083 	bhi.w	800a3e8 <UART_SetConfig+0xa30>
 800a2e2:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <UART_SetConfig+0x930>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a373 	.word	0x0800a373
 800a2ec:	0800a38d 	.word	0x0800a38d
 800a2f0:	0800a3e9 	.word	0x0800a3e9
 800a2f4:	0800a3e9 	.word	0x0800a3e9
 800a2f8:	0800a395 	.word	0x0800a395
 800a2fc:	0800a3e9 	.word	0x0800a3e9
 800a300:	0800a3e9 	.word	0x0800a3e9
 800a304:	0800a3e9 	.word	0x0800a3e9
 800a308:	0800a3a5 	.word	0x0800a3a5
 800a30c:	0800a3e9 	.word	0x0800a3e9
 800a310:	0800a3e9 	.word	0x0800a3e9
 800a314:	0800a3e9 	.word	0x0800a3e9
 800a318:	0800a3e9 	.word	0x0800a3e9
 800a31c:	0800a3e9 	.word	0x0800a3e9
 800a320:	0800a3e9 	.word	0x0800a3e9
 800a324:	0800a3e9 	.word	0x0800a3e9
 800a328:	0800a3b5 	.word	0x0800a3b5
 800a32c:	0800a3e9 	.word	0x0800a3e9
 800a330:	0800a3e9 	.word	0x0800a3e9
 800a334:	0800a3e9 	.word	0x0800a3e9
 800a338:	0800a3e9 	.word	0x0800a3e9
 800a33c:	0800a3e9 	.word	0x0800a3e9
 800a340:	0800a3e9 	.word	0x0800a3e9
 800a344:	0800a3e9 	.word	0x0800a3e9
 800a348:	0800a3e9 	.word	0x0800a3e9
 800a34c:	0800a3e9 	.word	0x0800a3e9
 800a350:	0800a3e9 	.word	0x0800a3e9
 800a354:	0800a3e9 	.word	0x0800a3e9
 800a358:	0800a3e9 	.word	0x0800a3e9
 800a35c:	0800a3e9 	.word	0x0800a3e9
 800a360:	0800a3e9 	.word	0x0800a3e9
 800a364:	0800a3e9 	.word	0x0800a3e9
 800a368:	0800a3db 	.word	0x0800a3db
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d037      	beq.n	800a3e0 <UART_SetConfig+0xa28>
 800a370:	e03a      	b.n	800a3e8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a372:	f7fb fee9 	bl	8006148 <HAL_RCC_GetPCLK1Freq>
 800a376:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a378:	e03c      	b.n	800a3f4 <UART_SetConfig+0xa3c>
 800a37a:	bf00      	nop
 800a37c:	003d0900 	.word	0x003d0900
 800a380:	0800dae0 	.word	0x0800dae0
 800a384:	58024400 	.word	0x58024400
 800a388:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a38c:	f7fb fef2 	bl	8006174 <HAL_RCC_GetPCLK2Freq>
 800a390:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a392:	e02f      	b.n	800a3f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a394:	f107 0314 	add.w	r3, r7, #20
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fc fe57 	bl	800704c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3a2:	e027      	b.n	800a3f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3a4:	f107 0308 	add.w	r3, r7, #8
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fc ffa3 	bl	80072f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3b2:	e01f      	b.n	800a3f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3b4:	4b2c      	ldr	r3, [pc, #176]	; (800a468 <UART_SetConfig+0xab0>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d009      	beq.n	800a3d4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3c0:	4b29      	ldr	r3, [pc, #164]	; (800a468 <UART_SetConfig+0xab0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	08db      	lsrs	r3, r3, #3
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	4a28      	ldr	r2, [pc, #160]	; (800a46c <UART_SetConfig+0xab4>)
 800a3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3d2:	e00f      	b.n	800a3f4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a3d4:	4b25      	ldr	r3, [pc, #148]	; (800a46c <UART_SetConfig+0xab4>)
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3d8:	e00c      	b.n	800a3f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3da:	4b25      	ldr	r3, [pc, #148]	; (800a470 <UART_SetConfig+0xab8>)
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3de:	e009      	b.n	800a3f4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3e6:	e005      	b.n	800a3f4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a3f2:	bf00      	nop
    }

    if (pclk != 0U)
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d021      	beq.n	800a43e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	4a1d      	ldr	r2, [pc, #116]	; (800a474 <UART_SetConfig+0xabc>)
 800a400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a404:	461a      	mov	r2, r3
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	fbb3 f2f2 	udiv	r2, r3, r2
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	085b      	lsrs	r3, r3, #1
 800a412:	441a      	add	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	2b0f      	cmp	r3, #15
 800a424:	d908      	bls.n	800a438 <UART_SetConfig+0xa80>
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a42c:	d204      	bcs.n	800a438 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a434:	60da      	str	r2, [r3, #12]
 800a436:	e002      	b.n	800a43e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a45a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3738      	adds	r7, #56	; 0x38
 800a462:	46bd      	mov	sp, r7
 800a464:	bdb0      	pop	{r4, r5, r7, pc}
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
 800a46c:	03d09000 	.word	0x03d09000
 800a470:	003d0900 	.word	0x003d0900
 800a474:	0800dae0 	.word	0x0800dae0

0800a478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	f003 0310 	and.w	r3, r3, #16
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d01a      	beq.n	800a58e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a576:	d10a      	bne.n	800a58e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	605a      	str	r2, [r3, #4]
  }
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5cc:	f7f7 ffd4 	bl	8002578 <HAL_GetTick>
 800a5d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0308 	and.w	r3, r3, #8
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d10e      	bne.n	800a5fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f82f 	bl	800a652 <UART_WaitOnFlagUntilTimeout>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e025      	b.n	800a64a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d10e      	bne.n	800a62a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a60c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f819 	bl	800a652 <UART_WaitOnFlagUntilTimeout>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e00f      	b.n	800a64a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2220      	movs	r2, #32
 800a62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2220      	movs	r2, #32
 800a636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	60f8      	str	r0, [r7, #12]
 800a65a:	60b9      	str	r1, [r7, #8]
 800a65c:	603b      	str	r3, [r7, #0]
 800a65e:	4613      	mov	r3, r2
 800a660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a662:	e062      	b.n	800a72a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66a:	d05e      	beq.n	800a72a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66c:	f7f7 ff84 	bl	8002578 <HAL_GetTick>
 800a670:	4602      	mov	r2, r0
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d302      	bcc.n	800a682 <UART_WaitOnFlagUntilTimeout+0x30>
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d11d      	bne.n	800a6be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a690:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f022 0201 	bic.w	r2, r2, #1
 800a6a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e045      	b.n	800a74a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0304 	and.w	r3, r3, #4
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d02e      	beq.n	800a72a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6da:	d126      	bne.n	800a72a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2220      	movs	r2, #32
 800a70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2220      	movs	r2, #32
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e00f      	b.n	800a74a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69da      	ldr	r2, [r3, #28]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4013      	ands	r3, r2
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	429a      	cmp	r2, r3
 800a738:	bf0c      	ite	eq
 800a73a:	2301      	moveq	r3, #1
 800a73c:	2300      	movne	r3, #0
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	461a      	mov	r2, r3
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	429a      	cmp	r2, r3
 800a746:	d08d      	beq.n	800a664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	4613      	mov	r3, r2
 800a760:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	88fa      	ldrh	r2, [r7, #6]
 800a76c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	88fa      	ldrh	r2, [r7, #6]
 800a774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a786:	d10e      	bne.n	800a7a6 <UART_Start_Receive_IT+0x52>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <UART_Start_Receive_IT+0x48>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a79a:	e02d      	b.n	800a7f8 <UART_Start_Receive_IT+0xa4>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	22ff      	movs	r2, #255	; 0xff
 800a7a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7a4:	e028      	b.n	800a7f8 <UART_Start_Receive_IT+0xa4>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10d      	bne.n	800a7ca <UART_Start_Receive_IT+0x76>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d104      	bne.n	800a7c0 <UART_Start_Receive_IT+0x6c>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	22ff      	movs	r2, #255	; 0xff
 800a7ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7be:	e01b      	b.n	800a7f8 <UART_Start_Receive_IT+0xa4>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	227f      	movs	r2, #127	; 0x7f
 800a7c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7c8:	e016      	b.n	800a7f8 <UART_Start_Receive_IT+0xa4>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7d2:	d10d      	bne.n	800a7f0 <UART_Start_Receive_IT+0x9c>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <UART_Start_Receive_IT+0x92>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	227f      	movs	r2, #127	; 0x7f
 800a7e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7e4:	e008      	b.n	800a7f8 <UART_Start_Receive_IT+0xa4>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	223f      	movs	r2, #63	; 0x3f
 800a7ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7ee:	e003      	b.n	800a7f8 <UART_Start_Receive_IT+0xa4>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2222      	movs	r2, #34	; 0x22
 800a804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689a      	ldr	r2, [r3, #8]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f042 0201 	orr.w	r2, r2, #1
 800a816:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a820:	d12a      	bne.n	800a878 <UART_Start_Receive_IT+0x124>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a828:	88fa      	ldrh	r2, [r7, #6]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d324      	bcc.n	800a878 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a836:	d107      	bne.n	800a848 <UART_Start_Receive_IT+0xf4>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d103      	bne.n	800a848 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	4a1f      	ldr	r2, [pc, #124]	; (800a8c0 <UART_Start_Receive_IT+0x16c>)
 800a844:	671a      	str	r2, [r3, #112]	; 0x70
 800a846:	e002      	b.n	800a84e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4a1e      	ldr	r2, [pc, #120]	; (800a8c4 <UART_Start_Receive_IT+0x170>)
 800a84c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a864:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a874:	609a      	str	r2, [r3, #8]
 800a876:	e01b      	b.n	800a8b0 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a880:	d107      	bne.n	800a892 <UART_Start_Receive_IT+0x13e>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4a0e      	ldr	r2, [pc, #56]	; (800a8c8 <UART_Start_Receive_IT+0x174>)
 800a88e:	671a      	str	r2, [r3, #112]	; 0x70
 800a890:	e002      	b.n	800a898 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	4a0d      	ldr	r2, [pc, #52]	; (800a8cc <UART_Start_Receive_IT+0x178>)
 800a896:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a8ae:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	0800ad49 	.word	0x0800ad49
 800a8c4:	0800ab45 	.word	0x0800ab45
 800a8c8:	0800aa6d 	.word	0x0800aa6d
 800a8cc:	0800a995 	.word	0x0800a995

0800a8d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a8e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6899      	ldr	r1, [r3, #8]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <UART_EndRxTransfer+0x60>)
 800a8f4:	400b      	ands	r3, r1
 800a8f6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d107      	bne.n	800a910 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0210 	bic.w	r2, r2, #16
 800a90e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2220      	movs	r2, #32
 800a914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	effffffe 	.word	0xeffffffe

0800a934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff f81a 	bl	800998c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a976:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f6 fe46 	bl	8001618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9aa:	2b22      	cmp	r3, #34	; 0x22
 800a9ac:	d152      	bne.n	800aa54 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9b6:	89bb      	ldrh	r3, [r7, #12]
 800a9b8:	b2d9      	uxtb	r1, r3
 800a9ba:	89fb      	ldrh	r3, [r7, #14]
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c2:	400a      	ands	r2, r1
 800a9c4:	b2d2      	uxtb	r2, r2
 800a9c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d139      	bne.n	800aa64 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9fe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	689a      	ldr	r2, [r3, #8]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0201 	bic.w	r2, r2, #1
 800aa0e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2220      	movs	r2, #32
 800aa14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d10f      	bne.n	800aa46 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0210 	bic.w	r2, r2, #16
 800aa34:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7fe ffae 	bl	80099a0 <HAL_UARTEx_RxEventCallback>
 800aa44:	e002      	b.n	800aa4c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f6 fd14 	bl	8001474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa52:	e007      	b.n	800aa64 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	619a      	str	r2, [r3, #24]
}
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa7a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa82:	2b22      	cmp	r3, #34	; 0x22
 800aa84:	d152      	bne.n	800ab2c <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa92:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800aa94:	89ba      	ldrh	r2, [r7, #12]
 800aa96:	89fb      	ldrh	r3, [r7, #14]
 800aa98:	4013      	ands	r3, r2
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa4:	1c9a      	adds	r2, r3, #2
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d139      	bne.n	800ab3c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aad6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0201 	bic.w	r2, r2, #1
 800aae6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2220      	movs	r2, #32
 800aaec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d10f      	bne.n	800ab1e <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0210 	bic.w	r2, r2, #16
 800ab0c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7fe ff42 	bl	80099a0 <HAL_UARTEx_RxEventCallback>
 800ab1c:	e002      	b.n	800ab24 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7f6 fca8 	bl	8001474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab2a:	e007      	b.n	800ab3c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699a      	ldr	r2, [r3, #24]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0208 	orr.w	r2, r2, #8
 800ab3a:	619a      	str	r2, [r3, #24]
}
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab52:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab72:	2b22      	cmp	r3, #34	; 0x22
 800ab74:	f040 80d8 	bne.w	800ad28 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab7e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab80:	e0a8      	b.n	800acd4 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab8a:	89bb      	ldrh	r3, [r7, #12]
 800ab8c:	b2d9      	uxtb	r1, r3
 800ab8e:	8b7b      	ldrh	r3, [r7, #26]
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab96:	400a      	ands	r2, r1
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abac:	b29b      	uxth	r3, r3
 800abae:	3b01      	subs	r3, #1
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d04d      	beq.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00b      	beq.n	800abf6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2201      	movs	r2, #1
 800abe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abec:	f043 0201 	orr.w	r2, r3, #1
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d010      	beq.n	800ac22 <UART_RxISR_8BIT_FIFOEN+0xde>
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac18:	f043 0204 	orr.w	r2, r3, #4
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d010      	beq.n	800ac4e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00b      	beq.n	800ac4e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac44:	f043 0202 	orr.w	r2, r3, #2
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d006      	beq.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7fe fe97 	bl	800998c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d130      	bne.n	800acd4 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac80:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6899      	ldr	r1, [r3, #8]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	4b2c      	ldr	r3, [pc, #176]	; (800ad40 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800ac8e:	400b      	ands	r3, r1
 800ac90:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2220      	movs	r2, #32
 800ac96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d10f      	bne.n	800acc8 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 0210 	bic.w	r2, r2, #16
 800acb6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fe fe6d 	bl	80099a0 <HAL_UARTEx_RxEventCallback>
 800acc6:	e002      	b.n	800acce <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7f6 fbd3 	bl	8001474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800acd4:	89fb      	ldrh	r3, [r7, #14]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	f003 0320 	and.w	r3, r3, #32
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f47f af4e 	bne.w	800ab82 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acec:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800acee:	897b      	ldrh	r3, [r7, #10]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d021      	beq.n	800ad38 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acfa:	897a      	ldrh	r2, [r7, #10]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d21b      	bcs.n	800ad38 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad0e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a0c      	ldr	r2, [pc, #48]	; (800ad44 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800ad14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0220 	orr.w	r2, r2, #32
 800ad24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad26:	e007      	b.n	800ad38 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	699a      	ldr	r2, [r3, #24]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f042 0208 	orr.w	r2, r2, #8
 800ad36:	619a      	str	r2, [r3, #24]
}
 800ad38:	bf00      	nop
 800ad3a:	3720      	adds	r7, #32
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	effffffe 	.word	0xeffffffe
 800ad44:	0800a995 	.word	0x0800a995

0800ad48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08a      	sub	sp, #40	; 0x28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad56:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad76:	2b22      	cmp	r3, #34	; 0x22
 800ad78:	f040 80d8 	bne.w	800af2c <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad82:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad84:	e0a8      	b.n	800aed8 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad92:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad94:	8aba      	ldrh	r2, [r7, #20]
 800ad96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad98:	4013      	ands	r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada4:	1c9a      	adds	r2, r3, #2
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	3b01      	subs	r3, #1
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d04d      	beq.n	800ae6a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d010      	beq.n	800adfa <UART_RxISR_16BIT_FIFOEN+0xb2>
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00b      	beq.n	800adfa <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2201      	movs	r2, #1
 800ade8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adf0:	f043 0201 	orr.w	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d010      	beq.n	800ae26 <UART_RxISR_16BIT_FIFOEN+0xde>
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00b      	beq.n	800ae26 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2202      	movs	r2, #2
 800ae14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae1c:	f043 0204 	orr.w	r2, r3, #4
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00b      	beq.n	800ae52 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2204      	movs	r2, #4
 800ae40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae48:	f043 0202 	orr.w	r2, r3, #2
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7fe fd95 	bl	800998c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d130      	bne.n	800aed8 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae84:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	6899      	ldr	r1, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	4b2c      	ldr	r3, [pc, #176]	; (800af44 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800ae92:	400b      	ands	r3, r1
 800ae94:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d10f      	bne.n	800aecc <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0210 	bic.w	r2, r2, #16
 800aeba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7fe fd6b 	bl	80099a0 <HAL_UARTEx_RxEventCallback>
 800aeca:	e002      	b.n	800aed2 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7f6 fad1 	bl	8001474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aed8:	8afb      	ldrh	r3, [r7, #22]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	f003 0320 	and.w	r3, r3, #32
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f47f af4e 	bne.w	800ad86 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aef0:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aef2:	89fb      	ldrh	r3, [r7, #14]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d021      	beq.n	800af3c <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aefe:	89fa      	ldrh	r2, [r7, #14]
 800af00:	429a      	cmp	r2, r3
 800af02:	d21b      	bcs.n	800af3c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689a      	ldr	r2, [r3, #8]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800af12:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a0c      	ldr	r2, [pc, #48]	; (800af48 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800af18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f042 0220 	orr.w	r2, r2, #32
 800af28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af2a:	e007      	b.n	800af3c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f042 0208 	orr.w	r2, r2, #8
 800af3a:	619a      	str	r2, [r3, #24]
}
 800af3c:	bf00      	nop
 800af3e:	3728      	adds	r7, #40	; 0x28
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	effffffe 	.word	0xeffffffe
 800af48:	0800aa6d 	.word	0x0800aa6d

0800af4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <HAL_UARTEx_DisableFifoMode+0x16>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e027      	b.n	800afee <HAL_UARTEx_DisableFifoMode+0x66>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2224      	movs	r2, #36	; 0x24
 800afaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0201 	bic.w	r2, r2, #1
 800afc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d101      	bne.n	800b012 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b00e:	2302      	movs	r3, #2
 800b010:	e02d      	b.n	800b06e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2224      	movs	r2, #36	; 0x24
 800b01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0201 	bic.w	r2, r2, #1
 800b038:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f850 	bl	800b0f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2220      	movs	r2, #32
 800b060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b086:	2b01      	cmp	r3, #1
 800b088:	d101      	bne.n	800b08e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b08a:	2302      	movs	r3, #2
 800b08c:	e02d      	b.n	800b0ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2224      	movs	r2, #36	; 0x24
 800b09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 0201 	bic.w	r2, r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	430a      	orrs	r2, r1
 800b0c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f812 	bl	800b0f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b100:	2b00      	cmp	r3, #0
 800b102:	d108      	bne.n	800b116 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b114:	e031      	b.n	800b17a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b116:	2310      	movs	r3, #16
 800b118:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b11a:	2310      	movs	r3, #16
 800b11c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	0e5b      	lsrs	r3, r3, #25
 800b126:	b2db      	uxtb	r3, r3
 800b128:	f003 0307 	and.w	r3, r3, #7
 800b12c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	0f5b      	lsrs	r3, r3, #29
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 0307 	and.w	r3, r3, #7
 800b13c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
 800b140:	7b3a      	ldrb	r2, [r7, #12]
 800b142:	4911      	ldr	r1, [pc, #68]	; (800b188 <UARTEx_SetNbDataToProcess+0x94>)
 800b144:	5c8a      	ldrb	r2, [r1, r2]
 800b146:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b14a:	7b3a      	ldrb	r2, [r7, #12]
 800b14c:	490f      	ldr	r1, [pc, #60]	; (800b18c <UARTEx_SetNbDataToProcess+0x98>)
 800b14e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b150:	fb93 f3f2 	sdiv	r3, r3, r2
 800b154:	b29a      	uxth	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	7b7a      	ldrb	r2, [r7, #13]
 800b160:	4909      	ldr	r1, [pc, #36]	; (800b188 <UARTEx_SetNbDataToProcess+0x94>)
 800b162:	5c8a      	ldrb	r2, [r1, r2]
 800b164:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b168:	7b7a      	ldrb	r2, [r7, #13]
 800b16a:	4908      	ldr	r1, [pc, #32]	; (800b18c <UARTEx_SetNbDataToProcess+0x98>)
 800b16c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b16e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b17a:	bf00      	nop
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	0800daf8 	.word	0x0800daf8
 800b18c:	0800db00 	.word	0x0800db00

0800b190 <__errno>:
 800b190:	4b01      	ldr	r3, [pc, #4]	; (800b198 <__errno+0x8>)
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	20000014 	.word	0x20000014

0800b19c <__libc_init_array>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	4d0d      	ldr	r5, [pc, #52]	; (800b1d4 <__libc_init_array+0x38>)
 800b1a0:	4c0d      	ldr	r4, [pc, #52]	; (800b1d8 <__libc_init_array+0x3c>)
 800b1a2:	1b64      	subs	r4, r4, r5
 800b1a4:	10a4      	asrs	r4, r4, #2
 800b1a6:	2600      	movs	r6, #0
 800b1a8:	42a6      	cmp	r6, r4
 800b1aa:	d109      	bne.n	800b1c0 <__libc_init_array+0x24>
 800b1ac:	4d0b      	ldr	r5, [pc, #44]	; (800b1dc <__libc_init_array+0x40>)
 800b1ae:	4c0c      	ldr	r4, [pc, #48]	; (800b1e0 <__libc_init_array+0x44>)
 800b1b0:	f002 fc7a 	bl	800daa8 <_init>
 800b1b4:	1b64      	subs	r4, r4, r5
 800b1b6:	10a4      	asrs	r4, r4, #2
 800b1b8:	2600      	movs	r6, #0
 800b1ba:	42a6      	cmp	r6, r4
 800b1bc:	d105      	bne.n	800b1ca <__libc_init_array+0x2e>
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
 800b1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c4:	4798      	blx	r3
 800b1c6:	3601      	adds	r6, #1
 800b1c8:	e7ee      	b.n	800b1a8 <__libc_init_array+0xc>
 800b1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ce:	4798      	blx	r3
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	e7f2      	b.n	800b1ba <__libc_init_array+0x1e>
 800b1d4:	0800def4 	.word	0x0800def4
 800b1d8:	0800def4 	.word	0x0800def4
 800b1dc:	0800def4 	.word	0x0800def4
 800b1e0:	0800def8 	.word	0x0800def8

0800b1e4 <memset>:
 800b1e4:	4402      	add	r2, r0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d100      	bne.n	800b1ee <memset+0xa>
 800b1ec:	4770      	bx	lr
 800b1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f2:	e7f9      	b.n	800b1e8 <memset+0x4>

0800b1f4 <__cvt>:
 800b1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f6:	ed2d 8b02 	vpush	{d8}
 800b1fa:	eeb0 8b40 	vmov.f64	d8, d0
 800b1fe:	b085      	sub	sp, #20
 800b200:	4617      	mov	r7, r2
 800b202:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b204:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b206:	ee18 2a90 	vmov	r2, s17
 800b20a:	f025 0520 	bic.w	r5, r5, #32
 800b20e:	2a00      	cmp	r2, #0
 800b210:	bfb6      	itet	lt
 800b212:	222d      	movlt	r2, #45	; 0x2d
 800b214:	2200      	movge	r2, #0
 800b216:	eeb1 8b40 	vneglt.f64	d8, d0
 800b21a:	2d46      	cmp	r5, #70	; 0x46
 800b21c:	460c      	mov	r4, r1
 800b21e:	701a      	strb	r2, [r3, #0]
 800b220:	d004      	beq.n	800b22c <__cvt+0x38>
 800b222:	2d45      	cmp	r5, #69	; 0x45
 800b224:	d100      	bne.n	800b228 <__cvt+0x34>
 800b226:	3401      	adds	r4, #1
 800b228:	2102      	movs	r1, #2
 800b22a:	e000      	b.n	800b22e <__cvt+0x3a>
 800b22c:	2103      	movs	r1, #3
 800b22e:	ab03      	add	r3, sp, #12
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	ab02      	add	r3, sp, #8
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	4622      	mov	r2, r4
 800b238:	4633      	mov	r3, r6
 800b23a:	eeb0 0b48 	vmov.f64	d0, d8
 800b23e:	f000 fcc3 	bl	800bbc8 <_dtoa_r>
 800b242:	2d47      	cmp	r5, #71	; 0x47
 800b244:	d109      	bne.n	800b25a <__cvt+0x66>
 800b246:	07fb      	lsls	r3, r7, #31
 800b248:	d407      	bmi.n	800b25a <__cvt+0x66>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b24e:	1a1b      	subs	r3, r3, r0
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	b005      	add	sp, #20
 800b254:	ecbd 8b02 	vpop	{d8}
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	2d46      	cmp	r5, #70	; 0x46
 800b25c:	eb00 0204 	add.w	r2, r0, r4
 800b260:	d10c      	bne.n	800b27c <__cvt+0x88>
 800b262:	7803      	ldrb	r3, [r0, #0]
 800b264:	2b30      	cmp	r3, #48	; 0x30
 800b266:	d107      	bne.n	800b278 <__cvt+0x84>
 800b268:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b270:	bf1c      	itt	ne
 800b272:	f1c4 0401 	rsbne	r4, r4, #1
 800b276:	6034      	strne	r4, [r6, #0]
 800b278:	6833      	ldr	r3, [r6, #0]
 800b27a:	441a      	add	r2, r3
 800b27c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b284:	bf08      	it	eq
 800b286:	9203      	streq	r2, [sp, #12]
 800b288:	2130      	movs	r1, #48	; 0x30
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d2dc      	bcs.n	800b24a <__cvt+0x56>
 800b290:	1c5c      	adds	r4, r3, #1
 800b292:	9403      	str	r4, [sp, #12]
 800b294:	7019      	strb	r1, [r3, #0]
 800b296:	e7f8      	b.n	800b28a <__cvt+0x96>

0800b298 <__exponent>:
 800b298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b29a:	4603      	mov	r3, r0
 800b29c:	2900      	cmp	r1, #0
 800b29e:	bfb8      	it	lt
 800b2a0:	4249      	neglt	r1, r1
 800b2a2:	f803 2b02 	strb.w	r2, [r3], #2
 800b2a6:	bfb4      	ite	lt
 800b2a8:	222d      	movlt	r2, #45	; 0x2d
 800b2aa:	222b      	movge	r2, #43	; 0x2b
 800b2ac:	2909      	cmp	r1, #9
 800b2ae:	7042      	strb	r2, [r0, #1]
 800b2b0:	dd2a      	ble.n	800b308 <__exponent+0x70>
 800b2b2:	f10d 0407 	add.w	r4, sp, #7
 800b2b6:	46a4      	mov	ip, r4
 800b2b8:	270a      	movs	r7, #10
 800b2ba:	46a6      	mov	lr, r4
 800b2bc:	460a      	mov	r2, r1
 800b2be:	fb91 f6f7 	sdiv	r6, r1, r7
 800b2c2:	fb07 1516 	mls	r5, r7, r6, r1
 800b2c6:	3530      	adds	r5, #48	; 0x30
 800b2c8:	2a63      	cmp	r2, #99	; 0x63
 800b2ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	dcf1      	bgt.n	800b2ba <__exponent+0x22>
 800b2d6:	3130      	adds	r1, #48	; 0x30
 800b2d8:	f1ae 0502 	sub.w	r5, lr, #2
 800b2dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b2e0:	1c44      	adds	r4, r0, #1
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4561      	cmp	r1, ip
 800b2e6:	d30a      	bcc.n	800b2fe <__exponent+0x66>
 800b2e8:	f10d 0209 	add.w	r2, sp, #9
 800b2ec:	eba2 020e 	sub.w	r2, r2, lr
 800b2f0:	4565      	cmp	r5, ip
 800b2f2:	bf88      	it	hi
 800b2f4:	2200      	movhi	r2, #0
 800b2f6:	4413      	add	r3, r2
 800b2f8:	1a18      	subs	r0, r3, r0
 800b2fa:	b003      	add	sp, #12
 800b2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b302:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b306:	e7ed      	b.n	800b2e4 <__exponent+0x4c>
 800b308:	2330      	movs	r3, #48	; 0x30
 800b30a:	3130      	adds	r1, #48	; 0x30
 800b30c:	7083      	strb	r3, [r0, #2]
 800b30e:	70c1      	strb	r1, [r0, #3]
 800b310:	1d03      	adds	r3, r0, #4
 800b312:	e7f1      	b.n	800b2f8 <__exponent+0x60>
 800b314:	0000      	movs	r0, r0
	...

0800b318 <_printf_float>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	b08b      	sub	sp, #44	; 0x2c
 800b31e:	460c      	mov	r4, r1
 800b320:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b324:	4616      	mov	r6, r2
 800b326:	461f      	mov	r7, r3
 800b328:	4605      	mov	r5, r0
 800b32a:	f001 fac5 	bl	800c8b8 <_localeconv_r>
 800b32e:	f8d0 b000 	ldr.w	fp, [r0]
 800b332:	4658      	mov	r0, fp
 800b334:	f7f4 ffd4 	bl	80002e0 <strlen>
 800b338:	2300      	movs	r3, #0
 800b33a:	9308      	str	r3, [sp, #32]
 800b33c:	f8d8 3000 	ldr.w	r3, [r8]
 800b340:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b344:	6822      	ldr	r2, [r4, #0]
 800b346:	3307      	adds	r3, #7
 800b348:	f023 0307 	bic.w	r3, r3, #7
 800b34c:	f103 0108 	add.w	r1, r3, #8
 800b350:	f8c8 1000 	str.w	r1, [r8]
 800b354:	4682      	mov	sl, r0
 800b356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b35a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b35e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b5c0 <_printf_float+0x2a8>
 800b362:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b366:	eeb0 6bc0 	vabs.f64	d6, d0
 800b36a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b372:	dd24      	ble.n	800b3be <_printf_float+0xa6>
 800b374:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37c:	d502      	bpl.n	800b384 <_printf_float+0x6c>
 800b37e:	232d      	movs	r3, #45	; 0x2d
 800b380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b384:	4b90      	ldr	r3, [pc, #576]	; (800b5c8 <_printf_float+0x2b0>)
 800b386:	4891      	ldr	r0, [pc, #580]	; (800b5cc <_printf_float+0x2b4>)
 800b388:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b38c:	bf94      	ite	ls
 800b38e:	4698      	movls	r8, r3
 800b390:	4680      	movhi	r8, r0
 800b392:	2303      	movs	r3, #3
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	f022 0204 	bic.w	r2, r2, #4
 800b39a:	2300      	movs	r3, #0
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	9304      	str	r3, [sp, #16]
 800b3a0:	9700      	str	r7, [sp, #0]
 800b3a2:	4633      	mov	r3, r6
 800b3a4:	aa09      	add	r2, sp, #36	; 0x24
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f000 f9d3 	bl	800b754 <_printf_common>
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f040 808a 	bne.w	800b4c8 <_printf_float+0x1b0>
 800b3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b8:	b00b      	add	sp, #44	; 0x2c
 800b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3be:	eeb4 0b40 	vcmp.f64	d0, d0
 800b3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c6:	d709      	bvc.n	800b3dc <_printf_float+0xc4>
 800b3c8:	ee10 3a90 	vmov	r3, s1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfbc      	itt	lt
 800b3d0:	232d      	movlt	r3, #45	; 0x2d
 800b3d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3d6:	487e      	ldr	r0, [pc, #504]	; (800b5d0 <_printf_float+0x2b8>)
 800b3d8:	4b7e      	ldr	r3, [pc, #504]	; (800b5d4 <_printf_float+0x2bc>)
 800b3da:	e7d5      	b.n	800b388 <_printf_float+0x70>
 800b3dc:	6863      	ldr	r3, [r4, #4]
 800b3de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b3e2:	9104      	str	r1, [sp, #16]
 800b3e4:	1c59      	adds	r1, r3, #1
 800b3e6:	d13c      	bne.n	800b462 <_printf_float+0x14a>
 800b3e8:	2306      	movs	r3, #6
 800b3ea:	6063      	str	r3, [r4, #4]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9303      	str	r3, [sp, #12]
 800b3f0:	ab08      	add	r3, sp, #32
 800b3f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b3f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b3fa:	ab07      	add	r3, sp, #28
 800b3fc:	6861      	ldr	r1, [r4, #4]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	6022      	str	r2, [r4, #0]
 800b402:	f10d 031b 	add.w	r3, sp, #27
 800b406:	4628      	mov	r0, r5
 800b408:	f7ff fef4 	bl	800b1f4 <__cvt>
 800b40c:	9b04      	ldr	r3, [sp, #16]
 800b40e:	9907      	ldr	r1, [sp, #28]
 800b410:	2b47      	cmp	r3, #71	; 0x47
 800b412:	4680      	mov	r8, r0
 800b414:	d108      	bne.n	800b428 <_printf_float+0x110>
 800b416:	1cc8      	adds	r0, r1, #3
 800b418:	db02      	blt.n	800b420 <_printf_float+0x108>
 800b41a:	6863      	ldr	r3, [r4, #4]
 800b41c:	4299      	cmp	r1, r3
 800b41e:	dd41      	ble.n	800b4a4 <_printf_float+0x18c>
 800b420:	f1a9 0902 	sub.w	r9, r9, #2
 800b424:	fa5f f989 	uxtb.w	r9, r9
 800b428:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b42c:	d820      	bhi.n	800b470 <_printf_float+0x158>
 800b42e:	3901      	subs	r1, #1
 800b430:	464a      	mov	r2, r9
 800b432:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b436:	9107      	str	r1, [sp, #28]
 800b438:	f7ff ff2e 	bl	800b298 <__exponent>
 800b43c:	9a08      	ldr	r2, [sp, #32]
 800b43e:	9004      	str	r0, [sp, #16]
 800b440:	1813      	adds	r3, r2, r0
 800b442:	2a01      	cmp	r2, #1
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	dc02      	bgt.n	800b44e <_printf_float+0x136>
 800b448:	6822      	ldr	r2, [r4, #0]
 800b44a:	07d2      	lsls	r2, r2, #31
 800b44c:	d501      	bpl.n	800b452 <_printf_float+0x13a>
 800b44e:	3301      	adds	r3, #1
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0a2      	beq.n	800b3a0 <_printf_float+0x88>
 800b45a:	232d      	movs	r3, #45	; 0x2d
 800b45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b460:	e79e      	b.n	800b3a0 <_printf_float+0x88>
 800b462:	9904      	ldr	r1, [sp, #16]
 800b464:	2947      	cmp	r1, #71	; 0x47
 800b466:	d1c1      	bne.n	800b3ec <_printf_float+0xd4>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1bf      	bne.n	800b3ec <_printf_float+0xd4>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e7bc      	b.n	800b3ea <_printf_float+0xd2>
 800b470:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b474:	d118      	bne.n	800b4a8 <_printf_float+0x190>
 800b476:	2900      	cmp	r1, #0
 800b478:	6863      	ldr	r3, [r4, #4]
 800b47a:	dd0b      	ble.n	800b494 <_printf_float+0x17c>
 800b47c:	6121      	str	r1, [r4, #16]
 800b47e:	b913      	cbnz	r3, 800b486 <_printf_float+0x16e>
 800b480:	6822      	ldr	r2, [r4, #0]
 800b482:	07d0      	lsls	r0, r2, #31
 800b484:	d502      	bpl.n	800b48c <_printf_float+0x174>
 800b486:	3301      	adds	r3, #1
 800b488:	440b      	add	r3, r1
 800b48a:	6123      	str	r3, [r4, #16]
 800b48c:	2300      	movs	r3, #0
 800b48e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b490:	9304      	str	r3, [sp, #16]
 800b492:	e7de      	b.n	800b452 <_printf_float+0x13a>
 800b494:	b913      	cbnz	r3, 800b49c <_printf_float+0x184>
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	07d2      	lsls	r2, r2, #31
 800b49a:	d501      	bpl.n	800b4a0 <_printf_float+0x188>
 800b49c:	3302      	adds	r3, #2
 800b49e:	e7f4      	b.n	800b48a <_printf_float+0x172>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e7f2      	b.n	800b48a <_printf_float+0x172>
 800b4a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b4a8:	9b08      	ldr	r3, [sp, #32]
 800b4aa:	4299      	cmp	r1, r3
 800b4ac:	db05      	blt.n	800b4ba <_printf_float+0x1a2>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	6121      	str	r1, [r4, #16]
 800b4b2:	07d8      	lsls	r0, r3, #31
 800b4b4:	d5ea      	bpl.n	800b48c <_printf_float+0x174>
 800b4b6:	1c4b      	adds	r3, r1, #1
 800b4b8:	e7e7      	b.n	800b48a <_printf_float+0x172>
 800b4ba:	2900      	cmp	r1, #0
 800b4bc:	bfd4      	ite	le
 800b4be:	f1c1 0202 	rsble	r2, r1, #2
 800b4c2:	2201      	movgt	r2, #1
 800b4c4:	4413      	add	r3, r2
 800b4c6:	e7e0      	b.n	800b48a <_printf_float+0x172>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	055a      	lsls	r2, r3, #21
 800b4cc:	d407      	bmi.n	800b4de <_printf_float+0x1c6>
 800b4ce:	6923      	ldr	r3, [r4, #16]
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d12a      	bne.n	800b532 <_printf_float+0x21a>
 800b4dc:	e76a      	b.n	800b3b4 <_printf_float+0x9c>
 800b4de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b4e2:	f240 80e2 	bls.w	800b6aa <_printf_float+0x392>
 800b4e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b4ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f2:	d133      	bne.n	800b55c <_printf_float+0x244>
 800b4f4:	4a38      	ldr	r2, [pc, #224]	; (800b5d8 <_printf_float+0x2c0>)
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	47b8      	blx	r7
 800b4fe:	3001      	adds	r0, #1
 800b500:	f43f af58 	beq.w	800b3b4 <_printf_float+0x9c>
 800b504:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b508:	429a      	cmp	r2, r3
 800b50a:	db02      	blt.n	800b512 <_printf_float+0x1fa>
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	07d8      	lsls	r0, r3, #31
 800b510:	d50f      	bpl.n	800b532 <_printf_float+0x21a>
 800b512:	4653      	mov	r3, sl
 800b514:	465a      	mov	r2, fp
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	47b8      	blx	r7
 800b51c:	3001      	adds	r0, #1
 800b51e:	f43f af49 	beq.w	800b3b4 <_printf_float+0x9c>
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	f104 091a 	add.w	r9, r4, #26
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	4543      	cmp	r3, r8
 800b530:	dc09      	bgt.n	800b546 <_printf_float+0x22e>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	079b      	lsls	r3, r3, #30
 800b536:	f100 8108 	bmi.w	800b74a <_printf_float+0x432>
 800b53a:	68e0      	ldr	r0, [r4, #12]
 800b53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53e:	4298      	cmp	r0, r3
 800b540:	bfb8      	it	lt
 800b542:	4618      	movlt	r0, r3
 800b544:	e738      	b.n	800b3b8 <_printf_float+0xa0>
 800b546:	2301      	movs	r3, #1
 800b548:	464a      	mov	r2, r9
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	f43f af2f 	beq.w	800b3b4 <_printf_float+0x9c>
 800b556:	f108 0801 	add.w	r8, r8, #1
 800b55a:	e7e6      	b.n	800b52a <_printf_float+0x212>
 800b55c:	9b07      	ldr	r3, [sp, #28]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	dc3c      	bgt.n	800b5dc <_printf_float+0x2c4>
 800b562:	4a1d      	ldr	r2, [pc, #116]	; (800b5d8 <_printf_float+0x2c0>)
 800b564:	2301      	movs	r3, #1
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f af21 	beq.w	800b3b4 <_printf_float+0x9c>
 800b572:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b576:	4313      	orrs	r3, r2
 800b578:	d102      	bne.n	800b580 <_printf_float+0x268>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	07d9      	lsls	r1, r3, #31
 800b57e:	d5d8      	bpl.n	800b532 <_printf_float+0x21a>
 800b580:	4653      	mov	r3, sl
 800b582:	465a      	mov	r2, fp
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f af12 	beq.w	800b3b4 <_printf_float+0x9c>
 800b590:	f04f 0900 	mov.w	r9, #0
 800b594:	f104 0a1a 	add.w	sl, r4, #26
 800b598:	9b07      	ldr	r3, [sp, #28]
 800b59a:	425b      	negs	r3, r3
 800b59c:	454b      	cmp	r3, r9
 800b59e:	dc01      	bgt.n	800b5a4 <_printf_float+0x28c>
 800b5a0:	9b08      	ldr	r3, [sp, #32]
 800b5a2:	e795      	b.n	800b4d0 <_printf_float+0x1b8>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	4652      	mov	r2, sl
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b8      	blx	r7
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f43f af00 	beq.w	800b3b4 <_printf_float+0x9c>
 800b5b4:	f109 0901 	add.w	r9, r9, #1
 800b5b8:	e7ee      	b.n	800b598 <_printf_float+0x280>
 800b5ba:	bf00      	nop
 800b5bc:	f3af 8000 	nop.w
 800b5c0:	ffffffff 	.word	0xffffffff
 800b5c4:	7fefffff 	.word	0x7fefffff
 800b5c8:	0800db0c 	.word	0x0800db0c
 800b5cc:	0800db10 	.word	0x0800db10
 800b5d0:	0800db18 	.word	0x0800db18
 800b5d4:	0800db14 	.word	0x0800db14
 800b5d8:	0800db1c 	.word	0x0800db1c
 800b5dc:	9a08      	ldr	r2, [sp, #32]
 800b5de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	bfa8      	it	ge
 800b5e4:	461a      	movge	r2, r3
 800b5e6:	2a00      	cmp	r2, #0
 800b5e8:	4691      	mov	r9, r2
 800b5ea:	dc38      	bgt.n	800b65e <_printf_float+0x346>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	9305      	str	r3, [sp, #20]
 800b5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5f4:	f104 021a 	add.w	r2, r4, #26
 800b5f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5fa:	9905      	ldr	r1, [sp, #20]
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	eba3 0309 	sub.w	r3, r3, r9
 800b602:	428b      	cmp	r3, r1
 800b604:	dc33      	bgt.n	800b66e <_printf_float+0x356>
 800b606:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	db3c      	blt.n	800b688 <_printf_float+0x370>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	07da      	lsls	r2, r3, #31
 800b612:	d439      	bmi.n	800b688 <_printf_float+0x370>
 800b614:	9a08      	ldr	r2, [sp, #32]
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	9907      	ldr	r1, [sp, #28]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	eba2 0901 	sub.w	r9, r2, r1
 800b620:	4599      	cmp	r9, r3
 800b622:	bfa8      	it	ge
 800b624:	4699      	movge	r9, r3
 800b626:	f1b9 0f00 	cmp.w	r9, #0
 800b62a:	dc35      	bgt.n	800b698 <_printf_float+0x380>
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b634:	f104 0a1a 	add.w	sl, r4, #26
 800b638:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b63c:	1a9b      	subs	r3, r3, r2
 800b63e:	eba3 0309 	sub.w	r3, r3, r9
 800b642:	4543      	cmp	r3, r8
 800b644:	f77f af75 	ble.w	800b532 <_printf_float+0x21a>
 800b648:	2301      	movs	r3, #1
 800b64a:	4652      	mov	r2, sl
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	f43f aeae 	beq.w	800b3b4 <_printf_float+0x9c>
 800b658:	f108 0801 	add.w	r8, r8, #1
 800b65c:	e7ec      	b.n	800b638 <_printf_float+0x320>
 800b65e:	4613      	mov	r3, r2
 800b660:	4631      	mov	r1, r6
 800b662:	4642      	mov	r2, r8
 800b664:	4628      	mov	r0, r5
 800b666:	47b8      	blx	r7
 800b668:	3001      	adds	r0, #1
 800b66a:	d1bf      	bne.n	800b5ec <_printf_float+0x2d4>
 800b66c:	e6a2      	b.n	800b3b4 <_printf_float+0x9c>
 800b66e:	2301      	movs	r3, #1
 800b670:	4631      	mov	r1, r6
 800b672:	4628      	mov	r0, r5
 800b674:	9204      	str	r2, [sp, #16]
 800b676:	47b8      	blx	r7
 800b678:	3001      	adds	r0, #1
 800b67a:	f43f ae9b 	beq.w	800b3b4 <_printf_float+0x9c>
 800b67e:	9b05      	ldr	r3, [sp, #20]
 800b680:	9a04      	ldr	r2, [sp, #16]
 800b682:	3301      	adds	r3, #1
 800b684:	9305      	str	r3, [sp, #20]
 800b686:	e7b7      	b.n	800b5f8 <_printf_float+0x2e0>
 800b688:	4653      	mov	r3, sl
 800b68a:	465a      	mov	r2, fp
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	d1be      	bne.n	800b614 <_printf_float+0x2fc>
 800b696:	e68d      	b.n	800b3b4 <_printf_float+0x9c>
 800b698:	9a04      	ldr	r2, [sp, #16]
 800b69a:	464b      	mov	r3, r9
 800b69c:	4442      	add	r2, r8
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	47b8      	blx	r7
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d1c1      	bne.n	800b62c <_printf_float+0x314>
 800b6a8:	e684      	b.n	800b3b4 <_printf_float+0x9c>
 800b6aa:	9a08      	ldr	r2, [sp, #32]
 800b6ac:	2a01      	cmp	r2, #1
 800b6ae:	dc01      	bgt.n	800b6b4 <_printf_float+0x39c>
 800b6b0:	07db      	lsls	r3, r3, #31
 800b6b2:	d537      	bpl.n	800b724 <_printf_float+0x40c>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4642      	mov	r2, r8
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	47b8      	blx	r7
 800b6be:	3001      	adds	r0, #1
 800b6c0:	f43f ae78 	beq.w	800b3b4 <_printf_float+0x9c>
 800b6c4:	4653      	mov	r3, sl
 800b6c6:	465a      	mov	r2, fp
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b8      	blx	r7
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	f43f ae70 	beq.w	800b3b4 <_printf_float+0x9c>
 800b6d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b6d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	d01b      	beq.n	800b71a <_printf_float+0x402>
 800b6e2:	9b08      	ldr	r3, [sp, #32]
 800b6e4:	f108 0201 	add.w	r2, r8, #1
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	47b8      	blx	r7
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d10e      	bne.n	800b712 <_printf_float+0x3fa>
 800b6f4:	e65e      	b.n	800b3b4 <_printf_float+0x9c>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	464a      	mov	r2, r9
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	47b8      	blx	r7
 800b700:	3001      	adds	r0, #1
 800b702:	f43f ae57 	beq.w	800b3b4 <_printf_float+0x9c>
 800b706:	f108 0801 	add.w	r8, r8, #1
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	3b01      	subs	r3, #1
 800b70e:	4543      	cmp	r3, r8
 800b710:	dcf1      	bgt.n	800b6f6 <_printf_float+0x3de>
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b718:	e6db      	b.n	800b4d2 <_printf_float+0x1ba>
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	f104 091a 	add.w	r9, r4, #26
 800b722:	e7f2      	b.n	800b70a <_printf_float+0x3f2>
 800b724:	2301      	movs	r3, #1
 800b726:	4642      	mov	r2, r8
 800b728:	e7df      	b.n	800b6ea <_printf_float+0x3d2>
 800b72a:	2301      	movs	r3, #1
 800b72c:	464a      	mov	r2, r9
 800b72e:	4631      	mov	r1, r6
 800b730:	4628      	mov	r0, r5
 800b732:	47b8      	blx	r7
 800b734:	3001      	adds	r0, #1
 800b736:	f43f ae3d 	beq.w	800b3b4 <_printf_float+0x9c>
 800b73a:	f108 0801 	add.w	r8, r8, #1
 800b73e:	68e3      	ldr	r3, [r4, #12]
 800b740:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b742:	1a5b      	subs	r3, r3, r1
 800b744:	4543      	cmp	r3, r8
 800b746:	dcf0      	bgt.n	800b72a <_printf_float+0x412>
 800b748:	e6f7      	b.n	800b53a <_printf_float+0x222>
 800b74a:	f04f 0800 	mov.w	r8, #0
 800b74e:	f104 0919 	add.w	r9, r4, #25
 800b752:	e7f4      	b.n	800b73e <_printf_float+0x426>

0800b754 <_printf_common>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	4616      	mov	r6, r2
 800b75a:	4699      	mov	r9, r3
 800b75c:	688a      	ldr	r2, [r1, #8]
 800b75e:	690b      	ldr	r3, [r1, #16]
 800b760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b764:	4293      	cmp	r3, r2
 800b766:	bfb8      	it	lt
 800b768:	4613      	movlt	r3, r2
 800b76a:	6033      	str	r3, [r6, #0]
 800b76c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b770:	4607      	mov	r7, r0
 800b772:	460c      	mov	r4, r1
 800b774:	b10a      	cbz	r2, 800b77a <_printf_common+0x26>
 800b776:	3301      	adds	r3, #1
 800b778:	6033      	str	r3, [r6, #0]
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	0699      	lsls	r1, r3, #26
 800b77e:	bf42      	ittt	mi
 800b780:	6833      	ldrmi	r3, [r6, #0]
 800b782:	3302      	addmi	r3, #2
 800b784:	6033      	strmi	r3, [r6, #0]
 800b786:	6825      	ldr	r5, [r4, #0]
 800b788:	f015 0506 	ands.w	r5, r5, #6
 800b78c:	d106      	bne.n	800b79c <_printf_common+0x48>
 800b78e:	f104 0a19 	add.w	sl, r4, #25
 800b792:	68e3      	ldr	r3, [r4, #12]
 800b794:	6832      	ldr	r2, [r6, #0]
 800b796:	1a9b      	subs	r3, r3, r2
 800b798:	42ab      	cmp	r3, r5
 800b79a:	dc26      	bgt.n	800b7ea <_printf_common+0x96>
 800b79c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7a0:	1e13      	subs	r3, r2, #0
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	bf18      	it	ne
 800b7a6:	2301      	movne	r3, #1
 800b7a8:	0692      	lsls	r2, r2, #26
 800b7aa:	d42b      	bmi.n	800b804 <_printf_common+0xb0>
 800b7ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	47c0      	blx	r8
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d01e      	beq.n	800b7f8 <_printf_common+0xa4>
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	68e5      	ldr	r5, [r4, #12]
 800b7be:	6832      	ldr	r2, [r6, #0]
 800b7c0:	f003 0306 	and.w	r3, r3, #6
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	bf08      	it	eq
 800b7c8:	1aad      	subeq	r5, r5, r2
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	6922      	ldr	r2, [r4, #16]
 800b7ce:	bf0c      	ite	eq
 800b7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7d4:	2500      	movne	r5, #0
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	bfc4      	itt	gt
 800b7da:	1a9b      	subgt	r3, r3, r2
 800b7dc:	18ed      	addgt	r5, r5, r3
 800b7de:	2600      	movs	r6, #0
 800b7e0:	341a      	adds	r4, #26
 800b7e2:	42b5      	cmp	r5, r6
 800b7e4:	d11a      	bne.n	800b81c <_printf_common+0xc8>
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	e008      	b.n	800b7fc <_printf_common+0xa8>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	4652      	mov	r2, sl
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	47c0      	blx	r8
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d103      	bne.n	800b800 <_printf_common+0xac>
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b800:	3501      	adds	r5, #1
 800b802:	e7c6      	b.n	800b792 <_printf_common+0x3e>
 800b804:	18e1      	adds	r1, r4, r3
 800b806:	1c5a      	adds	r2, r3, #1
 800b808:	2030      	movs	r0, #48	; 0x30
 800b80a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b80e:	4422      	add	r2, r4
 800b810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b818:	3302      	adds	r3, #2
 800b81a:	e7c7      	b.n	800b7ac <_printf_common+0x58>
 800b81c:	2301      	movs	r3, #1
 800b81e:	4622      	mov	r2, r4
 800b820:	4649      	mov	r1, r9
 800b822:	4638      	mov	r0, r7
 800b824:	47c0      	blx	r8
 800b826:	3001      	adds	r0, #1
 800b828:	d0e6      	beq.n	800b7f8 <_printf_common+0xa4>
 800b82a:	3601      	adds	r6, #1
 800b82c:	e7d9      	b.n	800b7e2 <_printf_common+0x8e>
	...

0800b830 <_printf_i>:
 800b830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	460c      	mov	r4, r1
 800b836:	4691      	mov	r9, r2
 800b838:	7e27      	ldrb	r7, [r4, #24]
 800b83a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b83c:	2f78      	cmp	r7, #120	; 0x78
 800b83e:	4680      	mov	r8, r0
 800b840:	469a      	mov	sl, r3
 800b842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b846:	d807      	bhi.n	800b858 <_printf_i+0x28>
 800b848:	2f62      	cmp	r7, #98	; 0x62
 800b84a:	d80a      	bhi.n	800b862 <_printf_i+0x32>
 800b84c:	2f00      	cmp	r7, #0
 800b84e:	f000 80d8 	beq.w	800ba02 <_printf_i+0x1d2>
 800b852:	2f58      	cmp	r7, #88	; 0x58
 800b854:	f000 80a3 	beq.w	800b99e <_printf_i+0x16e>
 800b858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b85c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b860:	e03a      	b.n	800b8d8 <_printf_i+0xa8>
 800b862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b866:	2b15      	cmp	r3, #21
 800b868:	d8f6      	bhi.n	800b858 <_printf_i+0x28>
 800b86a:	a001      	add	r0, pc, #4	; (adr r0, 800b870 <_printf_i+0x40>)
 800b86c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b870:	0800b8c9 	.word	0x0800b8c9
 800b874:	0800b8dd 	.word	0x0800b8dd
 800b878:	0800b859 	.word	0x0800b859
 800b87c:	0800b859 	.word	0x0800b859
 800b880:	0800b859 	.word	0x0800b859
 800b884:	0800b859 	.word	0x0800b859
 800b888:	0800b8dd 	.word	0x0800b8dd
 800b88c:	0800b859 	.word	0x0800b859
 800b890:	0800b859 	.word	0x0800b859
 800b894:	0800b859 	.word	0x0800b859
 800b898:	0800b859 	.word	0x0800b859
 800b89c:	0800b9e9 	.word	0x0800b9e9
 800b8a0:	0800b90d 	.word	0x0800b90d
 800b8a4:	0800b9cb 	.word	0x0800b9cb
 800b8a8:	0800b859 	.word	0x0800b859
 800b8ac:	0800b859 	.word	0x0800b859
 800b8b0:	0800ba0b 	.word	0x0800ba0b
 800b8b4:	0800b859 	.word	0x0800b859
 800b8b8:	0800b90d 	.word	0x0800b90d
 800b8bc:	0800b859 	.word	0x0800b859
 800b8c0:	0800b859 	.word	0x0800b859
 800b8c4:	0800b9d3 	.word	0x0800b9d3
 800b8c8:	680b      	ldr	r3, [r1, #0]
 800b8ca:	1d1a      	adds	r2, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	600a      	str	r2, [r1, #0]
 800b8d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0a3      	b.n	800ba24 <_printf_i+0x1f4>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	6808      	ldr	r0, [r1, #0]
 800b8e0:	062e      	lsls	r6, r5, #24
 800b8e2:	f100 0304 	add.w	r3, r0, #4
 800b8e6:	d50a      	bpl.n	800b8fe <_printf_i+0xce>
 800b8e8:	6805      	ldr	r5, [r0, #0]
 800b8ea:	600b      	str	r3, [r1, #0]
 800b8ec:	2d00      	cmp	r5, #0
 800b8ee:	da03      	bge.n	800b8f8 <_printf_i+0xc8>
 800b8f0:	232d      	movs	r3, #45	; 0x2d
 800b8f2:	426d      	negs	r5, r5
 800b8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8f8:	485e      	ldr	r0, [pc, #376]	; (800ba74 <_printf_i+0x244>)
 800b8fa:	230a      	movs	r3, #10
 800b8fc:	e019      	b.n	800b932 <_printf_i+0x102>
 800b8fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b902:	6805      	ldr	r5, [r0, #0]
 800b904:	600b      	str	r3, [r1, #0]
 800b906:	bf18      	it	ne
 800b908:	b22d      	sxthne	r5, r5
 800b90a:	e7ef      	b.n	800b8ec <_printf_i+0xbc>
 800b90c:	680b      	ldr	r3, [r1, #0]
 800b90e:	6825      	ldr	r5, [r4, #0]
 800b910:	1d18      	adds	r0, r3, #4
 800b912:	6008      	str	r0, [r1, #0]
 800b914:	0628      	lsls	r0, r5, #24
 800b916:	d501      	bpl.n	800b91c <_printf_i+0xec>
 800b918:	681d      	ldr	r5, [r3, #0]
 800b91a:	e002      	b.n	800b922 <_printf_i+0xf2>
 800b91c:	0669      	lsls	r1, r5, #25
 800b91e:	d5fb      	bpl.n	800b918 <_printf_i+0xe8>
 800b920:	881d      	ldrh	r5, [r3, #0]
 800b922:	4854      	ldr	r0, [pc, #336]	; (800ba74 <_printf_i+0x244>)
 800b924:	2f6f      	cmp	r7, #111	; 0x6f
 800b926:	bf0c      	ite	eq
 800b928:	2308      	moveq	r3, #8
 800b92a:	230a      	movne	r3, #10
 800b92c:	2100      	movs	r1, #0
 800b92e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b932:	6866      	ldr	r6, [r4, #4]
 800b934:	60a6      	str	r6, [r4, #8]
 800b936:	2e00      	cmp	r6, #0
 800b938:	bfa2      	ittt	ge
 800b93a:	6821      	ldrge	r1, [r4, #0]
 800b93c:	f021 0104 	bicge.w	r1, r1, #4
 800b940:	6021      	strge	r1, [r4, #0]
 800b942:	b90d      	cbnz	r5, 800b948 <_printf_i+0x118>
 800b944:	2e00      	cmp	r6, #0
 800b946:	d04d      	beq.n	800b9e4 <_printf_i+0x1b4>
 800b948:	4616      	mov	r6, r2
 800b94a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b94e:	fb03 5711 	mls	r7, r3, r1, r5
 800b952:	5dc7      	ldrb	r7, [r0, r7]
 800b954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b958:	462f      	mov	r7, r5
 800b95a:	42bb      	cmp	r3, r7
 800b95c:	460d      	mov	r5, r1
 800b95e:	d9f4      	bls.n	800b94a <_printf_i+0x11a>
 800b960:	2b08      	cmp	r3, #8
 800b962:	d10b      	bne.n	800b97c <_printf_i+0x14c>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	07df      	lsls	r7, r3, #31
 800b968:	d508      	bpl.n	800b97c <_printf_i+0x14c>
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	6861      	ldr	r1, [r4, #4]
 800b96e:	4299      	cmp	r1, r3
 800b970:	bfde      	ittt	le
 800b972:	2330      	movle	r3, #48	; 0x30
 800b974:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b97c:	1b92      	subs	r2, r2, r6
 800b97e:	6122      	str	r2, [r4, #16]
 800b980:	f8cd a000 	str.w	sl, [sp]
 800b984:	464b      	mov	r3, r9
 800b986:	aa03      	add	r2, sp, #12
 800b988:	4621      	mov	r1, r4
 800b98a:	4640      	mov	r0, r8
 800b98c:	f7ff fee2 	bl	800b754 <_printf_common>
 800b990:	3001      	adds	r0, #1
 800b992:	d14c      	bne.n	800ba2e <_printf_i+0x1fe>
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	b004      	add	sp, #16
 800b99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99e:	4835      	ldr	r0, [pc, #212]	; (800ba74 <_printf_i+0x244>)
 800b9a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	680e      	ldr	r6, [r1, #0]
 800b9a8:	061f      	lsls	r7, r3, #24
 800b9aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b9ae:	600e      	str	r6, [r1, #0]
 800b9b0:	d514      	bpl.n	800b9dc <_printf_i+0x1ac>
 800b9b2:	07d9      	lsls	r1, r3, #31
 800b9b4:	bf44      	itt	mi
 800b9b6:	f043 0320 	orrmi.w	r3, r3, #32
 800b9ba:	6023      	strmi	r3, [r4, #0]
 800b9bc:	b91d      	cbnz	r5, 800b9c6 <_printf_i+0x196>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	f023 0320 	bic.w	r3, r3, #32
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	2310      	movs	r3, #16
 800b9c8:	e7b0      	b.n	800b92c <_printf_i+0xfc>
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f043 0320 	orr.w	r3, r3, #32
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	2378      	movs	r3, #120	; 0x78
 800b9d4:	4828      	ldr	r0, [pc, #160]	; (800ba78 <_printf_i+0x248>)
 800b9d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9da:	e7e3      	b.n	800b9a4 <_printf_i+0x174>
 800b9dc:	065e      	lsls	r6, r3, #25
 800b9de:	bf48      	it	mi
 800b9e0:	b2ad      	uxthmi	r5, r5
 800b9e2:	e7e6      	b.n	800b9b2 <_printf_i+0x182>
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	e7bb      	b.n	800b960 <_printf_i+0x130>
 800b9e8:	680b      	ldr	r3, [r1, #0]
 800b9ea:	6826      	ldr	r6, [r4, #0]
 800b9ec:	6960      	ldr	r0, [r4, #20]
 800b9ee:	1d1d      	adds	r5, r3, #4
 800b9f0:	600d      	str	r5, [r1, #0]
 800b9f2:	0635      	lsls	r5, r6, #24
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	d501      	bpl.n	800b9fc <_printf_i+0x1cc>
 800b9f8:	6018      	str	r0, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <_printf_i+0x1d2>
 800b9fc:	0671      	lsls	r1, r6, #25
 800b9fe:	d5fb      	bpl.n	800b9f8 <_printf_i+0x1c8>
 800ba00:	8018      	strh	r0, [r3, #0]
 800ba02:	2300      	movs	r3, #0
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	4616      	mov	r6, r2
 800ba08:	e7ba      	b.n	800b980 <_printf_i+0x150>
 800ba0a:	680b      	ldr	r3, [r1, #0]
 800ba0c:	1d1a      	adds	r2, r3, #4
 800ba0e:	600a      	str	r2, [r1, #0]
 800ba10:	681e      	ldr	r6, [r3, #0]
 800ba12:	6862      	ldr	r2, [r4, #4]
 800ba14:	2100      	movs	r1, #0
 800ba16:	4630      	mov	r0, r6
 800ba18:	f7f4 fc6a 	bl	80002f0 <memchr>
 800ba1c:	b108      	cbz	r0, 800ba22 <_printf_i+0x1f2>
 800ba1e:	1b80      	subs	r0, r0, r6
 800ba20:	6060      	str	r0, [r4, #4]
 800ba22:	6863      	ldr	r3, [r4, #4]
 800ba24:	6123      	str	r3, [r4, #16]
 800ba26:	2300      	movs	r3, #0
 800ba28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba2c:	e7a8      	b.n	800b980 <_printf_i+0x150>
 800ba2e:	6923      	ldr	r3, [r4, #16]
 800ba30:	4632      	mov	r2, r6
 800ba32:	4649      	mov	r1, r9
 800ba34:	4640      	mov	r0, r8
 800ba36:	47d0      	blx	sl
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d0ab      	beq.n	800b994 <_printf_i+0x164>
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	079b      	lsls	r3, r3, #30
 800ba40:	d413      	bmi.n	800ba6a <_printf_i+0x23a>
 800ba42:	68e0      	ldr	r0, [r4, #12]
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	4298      	cmp	r0, r3
 800ba48:	bfb8      	it	lt
 800ba4a:	4618      	movlt	r0, r3
 800ba4c:	e7a4      	b.n	800b998 <_printf_i+0x168>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	4632      	mov	r2, r6
 800ba52:	4649      	mov	r1, r9
 800ba54:	4640      	mov	r0, r8
 800ba56:	47d0      	blx	sl
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d09b      	beq.n	800b994 <_printf_i+0x164>
 800ba5c:	3501      	adds	r5, #1
 800ba5e:	68e3      	ldr	r3, [r4, #12]
 800ba60:	9903      	ldr	r1, [sp, #12]
 800ba62:	1a5b      	subs	r3, r3, r1
 800ba64:	42ab      	cmp	r3, r5
 800ba66:	dcf2      	bgt.n	800ba4e <_printf_i+0x21e>
 800ba68:	e7eb      	b.n	800ba42 <_printf_i+0x212>
 800ba6a:	2500      	movs	r5, #0
 800ba6c:	f104 0619 	add.w	r6, r4, #25
 800ba70:	e7f5      	b.n	800ba5e <_printf_i+0x22e>
 800ba72:	bf00      	nop
 800ba74:	0800db1e 	.word	0x0800db1e
 800ba78:	0800db2f 	.word	0x0800db2f

0800ba7c <iprintf>:
 800ba7c:	b40f      	push	{r0, r1, r2, r3}
 800ba7e:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <iprintf+0x2c>)
 800ba80:	b513      	push	{r0, r1, r4, lr}
 800ba82:	681c      	ldr	r4, [r3, #0]
 800ba84:	b124      	cbz	r4, 800ba90 <iprintf+0x14>
 800ba86:	69a3      	ldr	r3, [r4, #24]
 800ba88:	b913      	cbnz	r3, 800ba90 <iprintf+0x14>
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 fe76 	bl	800c77c <__sinit>
 800ba90:	ab05      	add	r3, sp, #20
 800ba92:	9a04      	ldr	r2, [sp, #16]
 800ba94:	68a1      	ldr	r1, [r4, #8]
 800ba96:	9301      	str	r3, [sp, #4]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f001 fb8d 	bl	800d1b8 <_vfiprintf_r>
 800ba9e:	b002      	add	sp, #8
 800baa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa4:	b004      	add	sp, #16
 800baa6:	4770      	bx	lr
 800baa8:	20000014 	.word	0x20000014

0800baac <quorem>:
 800baac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab0:	6903      	ldr	r3, [r0, #16]
 800bab2:	690c      	ldr	r4, [r1, #16]
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	4607      	mov	r7, r0
 800bab8:	f2c0 8081 	blt.w	800bbbe <quorem+0x112>
 800babc:	3c01      	subs	r4, #1
 800babe:	f101 0814 	add.w	r8, r1, #20
 800bac2:	f100 0514 	add.w	r5, r0, #20
 800bac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bad4:	3301      	adds	r3, #1
 800bad6:	429a      	cmp	r2, r3
 800bad8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800badc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bae0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bae4:	d331      	bcc.n	800bb4a <quorem+0x9e>
 800bae6:	f04f 0e00 	mov.w	lr, #0
 800baea:	4640      	mov	r0, r8
 800baec:	46ac      	mov	ip, r5
 800baee:	46f2      	mov	sl, lr
 800baf0:	f850 2b04 	ldr.w	r2, [r0], #4
 800baf4:	b293      	uxth	r3, r2
 800baf6:	fb06 e303 	mla	r3, r6, r3, lr
 800bafa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	ebaa 0303 	sub.w	r3, sl, r3
 800bb04:	0c12      	lsrs	r2, r2, #16
 800bb06:	f8dc a000 	ldr.w	sl, [ip]
 800bb0a:	fb06 e202 	mla	r2, r6, r2, lr
 800bb0e:	fa13 f38a 	uxtah	r3, r3, sl
 800bb12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb16:	fa1f fa82 	uxth.w	sl, r2
 800bb1a:	f8dc 2000 	ldr.w	r2, [ip]
 800bb1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bb22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb2c:	4581      	cmp	r9, r0
 800bb2e:	f84c 3b04 	str.w	r3, [ip], #4
 800bb32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb36:	d2db      	bcs.n	800baf0 <quorem+0x44>
 800bb38:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb3c:	b92b      	cbnz	r3, 800bb4a <quorem+0x9e>
 800bb3e:	9b01      	ldr	r3, [sp, #4]
 800bb40:	3b04      	subs	r3, #4
 800bb42:	429d      	cmp	r5, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	d32e      	bcc.n	800bba6 <quorem+0xfa>
 800bb48:	613c      	str	r4, [r7, #16]
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	f001 f950 	bl	800cdf0 <__mcmp>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	db24      	blt.n	800bb9e <quorem+0xf2>
 800bb54:	3601      	adds	r6, #1
 800bb56:	4628      	mov	r0, r5
 800bb58:	f04f 0c00 	mov.w	ip, #0
 800bb5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb60:	f8d0 e000 	ldr.w	lr, [r0]
 800bb64:	b293      	uxth	r3, r2
 800bb66:	ebac 0303 	sub.w	r3, ip, r3
 800bb6a:	0c12      	lsrs	r2, r2, #16
 800bb6c:	fa13 f38e 	uxtah	r3, r3, lr
 800bb70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb7e:	45c1      	cmp	r9, r8
 800bb80:	f840 3b04 	str.w	r3, [r0], #4
 800bb84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb88:	d2e8      	bcs.n	800bb5c <quorem+0xb0>
 800bb8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb92:	b922      	cbnz	r2, 800bb9e <quorem+0xf2>
 800bb94:	3b04      	subs	r3, #4
 800bb96:	429d      	cmp	r5, r3
 800bb98:	461a      	mov	r2, r3
 800bb9a:	d30a      	bcc.n	800bbb2 <quorem+0x106>
 800bb9c:	613c      	str	r4, [r7, #16]
 800bb9e:	4630      	mov	r0, r6
 800bba0:	b003      	add	sp, #12
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	6812      	ldr	r2, [r2, #0]
 800bba8:	3b04      	subs	r3, #4
 800bbaa:	2a00      	cmp	r2, #0
 800bbac:	d1cc      	bne.n	800bb48 <quorem+0x9c>
 800bbae:	3c01      	subs	r4, #1
 800bbb0:	e7c7      	b.n	800bb42 <quorem+0x96>
 800bbb2:	6812      	ldr	r2, [r2, #0]
 800bbb4:	3b04      	subs	r3, #4
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	d1f0      	bne.n	800bb9c <quorem+0xf0>
 800bbba:	3c01      	subs	r4, #1
 800bbbc:	e7eb      	b.n	800bb96 <quorem+0xea>
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	e7ee      	b.n	800bba0 <quorem+0xf4>
 800bbc2:	0000      	movs	r0, r0
 800bbc4:	0000      	movs	r0, r0
	...

0800bbc8 <_dtoa_r>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	ec59 8b10 	vmov	r8, r9, d0
 800bbd0:	b095      	sub	sp, #84	; 0x54
 800bbd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bbd4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bbd6:	9107      	str	r1, [sp, #28]
 800bbd8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bbdc:	4606      	mov	r6, r0
 800bbde:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe0:	9310      	str	r3, [sp, #64]	; 0x40
 800bbe2:	b975      	cbnz	r5, 800bc02 <_dtoa_r+0x3a>
 800bbe4:	2010      	movs	r0, #16
 800bbe6:	f000 fe6f 	bl	800c8c8 <malloc>
 800bbea:	4602      	mov	r2, r0
 800bbec:	6270      	str	r0, [r6, #36]	; 0x24
 800bbee:	b920      	cbnz	r0, 800bbfa <_dtoa_r+0x32>
 800bbf0:	4bab      	ldr	r3, [pc, #684]	; (800bea0 <_dtoa_r+0x2d8>)
 800bbf2:	21ea      	movs	r1, #234	; 0xea
 800bbf4:	48ab      	ldr	r0, [pc, #684]	; (800bea4 <_dtoa_r+0x2dc>)
 800bbf6:	f001 fd35 	bl	800d664 <__assert_func>
 800bbfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbfe:	6005      	str	r5, [r0, #0]
 800bc00:	60c5      	str	r5, [r0, #12]
 800bc02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bc04:	6819      	ldr	r1, [r3, #0]
 800bc06:	b151      	cbz	r1, 800bc1e <_dtoa_r+0x56>
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	604a      	str	r2, [r1, #4]
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	4093      	lsls	r3, r2
 800bc10:	608b      	str	r3, [r1, #8]
 800bc12:	4630      	mov	r0, r6
 800bc14:	f000 feae 	bl	800c974 <_Bfree>
 800bc18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	f1b9 0300 	subs.w	r3, r9, #0
 800bc22:	bfbb      	ittet	lt
 800bc24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc28:	9303      	strlt	r3, [sp, #12]
 800bc2a:	2300      	movge	r3, #0
 800bc2c:	2201      	movlt	r2, #1
 800bc2e:	bfac      	ite	ge
 800bc30:	6023      	strge	r3, [r4, #0]
 800bc32:	6022      	strlt	r2, [r4, #0]
 800bc34:	4b9c      	ldr	r3, [pc, #624]	; (800bea8 <_dtoa_r+0x2e0>)
 800bc36:	9c03      	ldr	r4, [sp, #12]
 800bc38:	43a3      	bics	r3, r4
 800bc3a:	d11a      	bne.n	800bc72 <_dtoa_r+0xaa>
 800bc3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bc48:	ea53 0308 	orrs.w	r3, r3, r8
 800bc4c:	f000 8512 	beq.w	800c674 <_dtoa_r+0xaac>
 800bc50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc52:	b953      	cbnz	r3, 800bc6a <_dtoa_r+0xa2>
 800bc54:	4b95      	ldr	r3, [pc, #596]	; (800beac <_dtoa_r+0x2e4>)
 800bc56:	e01f      	b.n	800bc98 <_dtoa_r+0xd0>
 800bc58:	4b95      	ldr	r3, [pc, #596]	; (800beb0 <_dtoa_r+0x2e8>)
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	9800      	ldr	r0, [sp, #0]
 800bc64:	b015      	add	sp, #84	; 0x54
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	4b90      	ldr	r3, [pc, #576]	; (800beac <_dtoa_r+0x2e4>)
 800bc6c:	9300      	str	r3, [sp, #0]
 800bc6e:	3303      	adds	r3, #3
 800bc70:	e7f5      	b.n	800bc5e <_dtoa_r+0x96>
 800bc72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bc82:	d10b      	bne.n	800bc9c <_dtoa_r+0xd4>
 800bc84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc86:	2301      	movs	r3, #1
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f000 84ee 	beq.w	800c66e <_dtoa_r+0xaa6>
 800bc92:	4888      	ldr	r0, [pc, #544]	; (800beb4 <_dtoa_r+0x2ec>)
 800bc94:	6018      	str	r0, [r3, #0]
 800bc96:	1e43      	subs	r3, r0, #1
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	e7e2      	b.n	800bc62 <_dtoa_r+0x9a>
 800bc9c:	a913      	add	r1, sp, #76	; 0x4c
 800bc9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bca2:	aa12      	add	r2, sp, #72	; 0x48
 800bca4:	4630      	mov	r0, r6
 800bca6:	f001 f947 	bl	800cf38 <__d2b>
 800bcaa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bcae:	4605      	mov	r5, r0
 800bcb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	d047      	beq.n	800bd46 <_dtoa_r+0x17e>
 800bcb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bcb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bcbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcc0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bcc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcc8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bccc:	2400      	movs	r4, #0
 800bcce:	ec43 2b16 	vmov	d6, r2, r3
 800bcd2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bcd6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800be88 <_dtoa_r+0x2c0>
 800bcda:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bcde:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800be90 <_dtoa_r+0x2c8>
 800bce2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bce6:	eeb0 7b46 	vmov.f64	d7, d6
 800bcea:	ee06 1a90 	vmov	s13, r1
 800bcee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800bcf2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800be98 <_dtoa_r+0x2d0>
 800bcf6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bcfa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bcfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd06:	ee16 ba90 	vmov	fp, s13
 800bd0a:	9411      	str	r4, [sp, #68]	; 0x44
 800bd0c:	d508      	bpl.n	800bd20 <_dtoa_r+0x158>
 800bd0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bd12:	eeb4 6b47 	vcmp.f64	d6, d7
 800bd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd1a:	bf18      	it	ne
 800bd1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bd20:	f1bb 0f16 	cmp.w	fp, #22
 800bd24:	d832      	bhi.n	800bd8c <_dtoa_r+0x1c4>
 800bd26:	4b64      	ldr	r3, [pc, #400]	; (800beb8 <_dtoa_r+0x2f0>)
 800bd28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd2c:	ed93 7b00 	vldr	d7, [r3]
 800bd30:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bd34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3c:	d501      	bpl.n	800bd42 <_dtoa_r+0x17a>
 800bd3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd42:	2300      	movs	r3, #0
 800bd44:	e023      	b.n	800bd8e <_dtoa_r+0x1c6>
 800bd46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd48:	4401      	add	r1, r0
 800bd4a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	bfc3      	ittte	gt
 800bd52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd56:	fa04 f303 	lslgt.w	r3, r4, r3
 800bd5a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bd5e:	f1c3 0320 	rsble	r3, r3, #32
 800bd62:	bfc6      	itte	gt
 800bd64:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bd68:	ea43 0308 	orrgt.w	r3, r3, r8
 800bd6c:	fa08 f303 	lslle.w	r3, r8, r3
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bd78:	3901      	subs	r1, #1
 800bd7a:	ed8d 7b00 	vstr	d7, [sp]
 800bd7e:	9c01      	ldr	r4, [sp, #4]
 800bd80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd84:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bd88:	2401      	movs	r4, #1
 800bd8a:	e7a0      	b.n	800bcce <_dtoa_r+0x106>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd90:	1a43      	subs	r3, r0, r1
 800bd92:	1e5a      	subs	r2, r3, #1
 800bd94:	bf45      	ittet	mi
 800bd96:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd9a:	9305      	strmi	r3, [sp, #20]
 800bd9c:	2300      	movpl	r3, #0
 800bd9e:	2300      	movmi	r3, #0
 800bda0:	9206      	str	r2, [sp, #24]
 800bda2:	bf54      	ite	pl
 800bda4:	9305      	strpl	r3, [sp, #20]
 800bda6:	9306      	strmi	r3, [sp, #24]
 800bda8:	f1bb 0f00 	cmp.w	fp, #0
 800bdac:	db18      	blt.n	800bde0 <_dtoa_r+0x218>
 800bdae:	9b06      	ldr	r3, [sp, #24]
 800bdb0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bdb4:	445b      	add	r3, fp
 800bdb6:	9306      	str	r3, [sp, #24]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9a07      	ldr	r2, [sp, #28]
 800bdbc:	2a09      	cmp	r2, #9
 800bdbe:	d849      	bhi.n	800be54 <_dtoa_r+0x28c>
 800bdc0:	2a05      	cmp	r2, #5
 800bdc2:	bfc4      	itt	gt
 800bdc4:	3a04      	subgt	r2, #4
 800bdc6:	9207      	strgt	r2, [sp, #28]
 800bdc8:	9a07      	ldr	r2, [sp, #28]
 800bdca:	f1a2 0202 	sub.w	r2, r2, #2
 800bdce:	bfcc      	ite	gt
 800bdd0:	2400      	movgt	r4, #0
 800bdd2:	2401      	movle	r4, #1
 800bdd4:	2a03      	cmp	r2, #3
 800bdd6:	d848      	bhi.n	800be6a <_dtoa_r+0x2a2>
 800bdd8:	e8df f002 	tbb	[pc, r2]
 800bddc:	3a2c2e0b 	.word	0x3a2c2e0b
 800bde0:	9b05      	ldr	r3, [sp, #20]
 800bde2:	2200      	movs	r2, #0
 800bde4:	eba3 030b 	sub.w	r3, r3, fp
 800bde8:	9305      	str	r3, [sp, #20]
 800bdea:	920e      	str	r2, [sp, #56]	; 0x38
 800bdec:	f1cb 0300 	rsb	r3, fp, #0
 800bdf0:	e7e3      	b.n	800bdba <_dtoa_r+0x1f2>
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	9208      	str	r2, [sp, #32]
 800bdf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdf8:	2a00      	cmp	r2, #0
 800bdfa:	dc39      	bgt.n	800be70 <_dtoa_r+0x2a8>
 800bdfc:	f04f 0a01 	mov.w	sl, #1
 800be00:	46d1      	mov	r9, sl
 800be02:	4652      	mov	r2, sl
 800be04:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800be08:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800be0a:	2100      	movs	r1, #0
 800be0c:	6079      	str	r1, [r7, #4]
 800be0e:	2004      	movs	r0, #4
 800be10:	f100 0c14 	add.w	ip, r0, #20
 800be14:	4594      	cmp	ip, r2
 800be16:	6879      	ldr	r1, [r7, #4]
 800be18:	d92f      	bls.n	800be7a <_dtoa_r+0x2b2>
 800be1a:	4630      	mov	r0, r6
 800be1c:	930c      	str	r3, [sp, #48]	; 0x30
 800be1e:	f000 fd69 	bl	800c8f4 <_Balloc>
 800be22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be24:	9000      	str	r0, [sp, #0]
 800be26:	4602      	mov	r2, r0
 800be28:	2800      	cmp	r0, #0
 800be2a:	d149      	bne.n	800bec0 <_dtoa_r+0x2f8>
 800be2c:	4b23      	ldr	r3, [pc, #140]	; (800bebc <_dtoa_r+0x2f4>)
 800be2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800be32:	e6df      	b.n	800bbf4 <_dtoa_r+0x2c>
 800be34:	2201      	movs	r2, #1
 800be36:	e7dd      	b.n	800bdf4 <_dtoa_r+0x22c>
 800be38:	2200      	movs	r2, #0
 800be3a:	9208      	str	r2, [sp, #32]
 800be3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be3e:	eb0b 0a02 	add.w	sl, fp, r2
 800be42:	f10a 0901 	add.w	r9, sl, #1
 800be46:	464a      	mov	r2, r9
 800be48:	2a01      	cmp	r2, #1
 800be4a:	bfb8      	it	lt
 800be4c:	2201      	movlt	r2, #1
 800be4e:	e7db      	b.n	800be08 <_dtoa_r+0x240>
 800be50:	2201      	movs	r2, #1
 800be52:	e7f2      	b.n	800be3a <_dtoa_r+0x272>
 800be54:	2401      	movs	r4, #1
 800be56:	2200      	movs	r2, #0
 800be58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800be5c:	f04f 3aff 	mov.w	sl, #4294967295
 800be60:	2100      	movs	r1, #0
 800be62:	46d1      	mov	r9, sl
 800be64:	2212      	movs	r2, #18
 800be66:	9109      	str	r1, [sp, #36]	; 0x24
 800be68:	e7ce      	b.n	800be08 <_dtoa_r+0x240>
 800be6a:	2201      	movs	r2, #1
 800be6c:	9208      	str	r2, [sp, #32]
 800be6e:	e7f5      	b.n	800be5c <_dtoa_r+0x294>
 800be70:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800be74:	46d1      	mov	r9, sl
 800be76:	4652      	mov	r2, sl
 800be78:	e7c6      	b.n	800be08 <_dtoa_r+0x240>
 800be7a:	3101      	adds	r1, #1
 800be7c:	6079      	str	r1, [r7, #4]
 800be7e:	0040      	lsls	r0, r0, #1
 800be80:	e7c6      	b.n	800be10 <_dtoa_r+0x248>
 800be82:	bf00      	nop
 800be84:	f3af 8000 	nop.w
 800be88:	636f4361 	.word	0x636f4361
 800be8c:	3fd287a7 	.word	0x3fd287a7
 800be90:	8b60c8b3 	.word	0x8b60c8b3
 800be94:	3fc68a28 	.word	0x3fc68a28
 800be98:	509f79fb 	.word	0x509f79fb
 800be9c:	3fd34413 	.word	0x3fd34413
 800bea0:	0800db4d 	.word	0x0800db4d
 800bea4:	0800db64 	.word	0x0800db64
 800bea8:	7ff00000 	.word	0x7ff00000
 800beac:	0800db49 	.word	0x0800db49
 800beb0:	0800db40 	.word	0x0800db40
 800beb4:	0800db1d 	.word	0x0800db1d
 800beb8:	0800dcc0 	.word	0x0800dcc0
 800bebc:	0800dbc3 	.word	0x0800dbc3
 800bec0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800bec2:	9900      	ldr	r1, [sp, #0]
 800bec4:	6011      	str	r1, [r2, #0]
 800bec6:	f1b9 0f0e 	cmp.w	r9, #14
 800beca:	d872      	bhi.n	800bfb2 <_dtoa_r+0x3ea>
 800becc:	2c00      	cmp	r4, #0
 800bece:	d070      	beq.n	800bfb2 <_dtoa_r+0x3ea>
 800bed0:	f1bb 0f00 	cmp.w	fp, #0
 800bed4:	f340 80a6 	ble.w	800c024 <_dtoa_r+0x45c>
 800bed8:	49ca      	ldr	r1, [pc, #808]	; (800c204 <_dtoa_r+0x63c>)
 800beda:	f00b 020f 	and.w	r2, fp, #15
 800bede:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bee2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bee6:	ed92 7b00 	vldr	d7, [r2]
 800beea:	ea4f 112b 	mov.w	r1, fp, asr #4
 800beee:	f000 808d 	beq.w	800c00c <_dtoa_r+0x444>
 800bef2:	4ac5      	ldr	r2, [pc, #788]	; (800c208 <_dtoa_r+0x640>)
 800bef4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bef8:	ed92 6b08 	vldr	d6, [r2, #32]
 800befc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bf00:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bf04:	f001 010f 	and.w	r1, r1, #15
 800bf08:	2203      	movs	r2, #3
 800bf0a:	48bf      	ldr	r0, [pc, #764]	; (800c208 <_dtoa_r+0x640>)
 800bf0c:	2900      	cmp	r1, #0
 800bf0e:	d17f      	bne.n	800c010 <_dtoa_r+0x448>
 800bf10:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf14:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bf18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf1e:	2900      	cmp	r1, #0
 800bf20:	f000 80b2 	beq.w	800c088 <_dtoa_r+0x4c0>
 800bf24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bf28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf34:	f140 80a8 	bpl.w	800c088 <_dtoa_r+0x4c0>
 800bf38:	f1b9 0f00 	cmp.w	r9, #0
 800bf3c:	f000 80a4 	beq.w	800c088 <_dtoa_r+0x4c0>
 800bf40:	f1ba 0f00 	cmp.w	sl, #0
 800bf44:	dd31      	ble.n	800bfaa <_dtoa_r+0x3e2>
 800bf46:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bf4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf52:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bf56:	3201      	adds	r2, #1
 800bf58:	4650      	mov	r0, sl
 800bf5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bf5e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bf62:	ee07 2a90 	vmov	s15, r2
 800bf66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bf6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bf6e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bf72:	9c03      	ldr	r4, [sp, #12]
 800bf74:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf78:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f040 8086 	bne.w	800c08e <_dtoa_r+0x4c6>
 800bf82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf86:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf8a:	ec42 1b17 	vmov	d7, r1, r2
 800bf8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf96:	f300 8272 	bgt.w	800c47e <_dtoa_r+0x8b6>
 800bf9a:	eeb1 7b47 	vneg.f64	d7, d7
 800bf9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa6:	f100 8267 	bmi.w	800c478 <_dtoa_r+0x8b0>
 800bfaa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bfae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bfb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfb4:	2a00      	cmp	r2, #0
 800bfb6:	f2c0 8129 	blt.w	800c20c <_dtoa_r+0x644>
 800bfba:	f1bb 0f0e 	cmp.w	fp, #14
 800bfbe:	f300 8125 	bgt.w	800c20c <_dtoa_r+0x644>
 800bfc2:	4b90      	ldr	r3, [pc, #576]	; (800c204 <_dtoa_r+0x63c>)
 800bfc4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bfc8:	ed93 6b00 	vldr	d6, [r3]
 800bfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f280 80c3 	bge.w	800c15a <_dtoa_r+0x592>
 800bfd4:	f1b9 0f00 	cmp.w	r9, #0
 800bfd8:	f300 80bf 	bgt.w	800c15a <_dtoa_r+0x592>
 800bfdc:	f040 824c 	bne.w	800c478 <_dtoa_r+0x8b0>
 800bfe0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bfe4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bfe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff4:	464c      	mov	r4, r9
 800bff6:	464f      	mov	r7, r9
 800bff8:	f280 8222 	bge.w	800c440 <_dtoa_r+0x878>
 800bffc:	f8dd 8000 	ldr.w	r8, [sp]
 800c000:	2331      	movs	r3, #49	; 0x31
 800c002:	f808 3b01 	strb.w	r3, [r8], #1
 800c006:	f10b 0b01 	add.w	fp, fp, #1
 800c00a:	e21e      	b.n	800c44a <_dtoa_r+0x882>
 800c00c:	2202      	movs	r2, #2
 800c00e:	e77c      	b.n	800bf0a <_dtoa_r+0x342>
 800c010:	07cc      	lsls	r4, r1, #31
 800c012:	d504      	bpl.n	800c01e <_dtoa_r+0x456>
 800c014:	ed90 6b00 	vldr	d6, [r0]
 800c018:	3201      	adds	r2, #1
 800c01a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c01e:	1049      	asrs	r1, r1, #1
 800c020:	3008      	adds	r0, #8
 800c022:	e773      	b.n	800bf0c <_dtoa_r+0x344>
 800c024:	d02e      	beq.n	800c084 <_dtoa_r+0x4bc>
 800c026:	f1cb 0100 	rsb	r1, fp, #0
 800c02a:	4a76      	ldr	r2, [pc, #472]	; (800c204 <_dtoa_r+0x63c>)
 800c02c:	f001 000f 	and.w	r0, r1, #15
 800c030:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c034:	ed92 7b00 	vldr	d7, [r2]
 800c038:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800c03c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c040:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c044:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800c048:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c04c:	486e      	ldr	r0, [pc, #440]	; (800c208 <_dtoa_r+0x640>)
 800c04e:	1109      	asrs	r1, r1, #4
 800c050:	2400      	movs	r4, #0
 800c052:	2202      	movs	r2, #2
 800c054:	b939      	cbnz	r1, 800c066 <_dtoa_r+0x49e>
 800c056:	2c00      	cmp	r4, #0
 800c058:	f43f af60 	beq.w	800bf1c <_dtoa_r+0x354>
 800c05c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c064:	e75a      	b.n	800bf1c <_dtoa_r+0x354>
 800c066:	07cf      	lsls	r7, r1, #31
 800c068:	d509      	bpl.n	800c07e <_dtoa_r+0x4b6>
 800c06a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c06e:	ed90 7b00 	vldr	d7, [r0]
 800c072:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c076:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c07a:	3201      	adds	r2, #1
 800c07c:	2401      	movs	r4, #1
 800c07e:	1049      	asrs	r1, r1, #1
 800c080:	3008      	adds	r0, #8
 800c082:	e7e7      	b.n	800c054 <_dtoa_r+0x48c>
 800c084:	2202      	movs	r2, #2
 800c086:	e749      	b.n	800bf1c <_dtoa_r+0x354>
 800c088:	465f      	mov	r7, fp
 800c08a:	4648      	mov	r0, r9
 800c08c:	e765      	b.n	800bf5a <_dtoa_r+0x392>
 800c08e:	ec42 1b17 	vmov	d7, r1, r2
 800c092:	4a5c      	ldr	r2, [pc, #368]	; (800c204 <_dtoa_r+0x63c>)
 800c094:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c098:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c09c:	9a00      	ldr	r2, [sp, #0]
 800c09e:	1814      	adds	r4, r2, r0
 800c0a0:	9a08      	ldr	r2, [sp, #32]
 800c0a2:	b352      	cbz	r2, 800c0fa <_dtoa_r+0x532>
 800c0a4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c0a8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c0ac:	f8dd 8000 	ldr.w	r8, [sp]
 800c0b0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c0b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c0b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c0c0:	ee14 2a90 	vmov	r2, s9
 800c0c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c0c8:	3230      	adds	r2, #48	; 0x30
 800c0ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c0ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	f808 2b01 	strb.w	r2, [r8], #1
 800c0da:	d439      	bmi.n	800c150 <_dtoa_r+0x588>
 800c0dc:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c0e0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e8:	d472      	bmi.n	800c1d0 <_dtoa_r+0x608>
 800c0ea:	45a0      	cmp	r8, r4
 800c0ec:	f43f af5d 	beq.w	800bfaa <_dtoa_r+0x3e2>
 800c0f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c0f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c0f8:	e7e0      	b.n	800c0bc <_dtoa_r+0x4f4>
 800c0fa:	f8dd 8000 	ldr.w	r8, [sp]
 800c0fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c102:	4621      	mov	r1, r4
 800c104:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c108:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c10c:	ee14 2a90 	vmov	r2, s9
 800c110:	3230      	adds	r2, #48	; 0x30
 800c112:	f808 2b01 	strb.w	r2, [r8], #1
 800c116:	45a0      	cmp	r8, r4
 800c118:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c11c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c120:	d118      	bne.n	800c154 <_dtoa_r+0x58c>
 800c122:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c126:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c12a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c132:	dc4d      	bgt.n	800c1d0 <_dtoa_r+0x608>
 800c134:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c138:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c140:	f57f af33 	bpl.w	800bfaa <_dtoa_r+0x3e2>
 800c144:	4688      	mov	r8, r1
 800c146:	3901      	subs	r1, #1
 800c148:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c14c:	2b30      	cmp	r3, #48	; 0x30
 800c14e:	d0f9      	beq.n	800c144 <_dtoa_r+0x57c>
 800c150:	46bb      	mov	fp, r7
 800c152:	e02a      	b.n	800c1aa <_dtoa_r+0x5e2>
 800c154:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c158:	e7d6      	b.n	800c108 <_dtoa_r+0x540>
 800c15a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c15e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c162:	f8dd 8000 	ldr.w	r8, [sp]
 800c166:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c16a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c16e:	ee15 3a10 	vmov	r3, s10
 800c172:	3330      	adds	r3, #48	; 0x30
 800c174:	f808 3b01 	strb.w	r3, [r8], #1
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	eba8 0303 	sub.w	r3, r8, r3
 800c17e:	4599      	cmp	r9, r3
 800c180:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c184:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c188:	d133      	bne.n	800c1f2 <_dtoa_r+0x62a>
 800c18a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c18e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	dc1a      	bgt.n	800c1ce <_dtoa_r+0x606>
 800c198:	eeb4 7b46 	vcmp.f64	d7, d6
 800c19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a0:	d103      	bne.n	800c1aa <_dtoa_r+0x5e2>
 800c1a2:	ee15 3a10 	vmov	r3, s10
 800c1a6:	07d9      	lsls	r1, r3, #31
 800c1a8:	d411      	bmi.n	800c1ce <_dtoa_r+0x606>
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 fbe1 	bl	800c974 <_Bfree>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c1b6:	f888 3000 	strb.w	r3, [r8]
 800c1ba:	f10b 0301 	add.w	r3, fp, #1
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f43f ad4d 	beq.w	800bc62 <_dtoa_r+0x9a>
 800c1c8:	f8c3 8000 	str.w	r8, [r3]
 800c1cc:	e549      	b.n	800bc62 <_dtoa_r+0x9a>
 800c1ce:	465f      	mov	r7, fp
 800c1d0:	4643      	mov	r3, r8
 800c1d2:	4698      	mov	r8, r3
 800c1d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1d8:	2a39      	cmp	r2, #57	; 0x39
 800c1da:	d106      	bne.n	800c1ea <_dtoa_r+0x622>
 800c1dc:	9a00      	ldr	r2, [sp, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d1f7      	bne.n	800c1d2 <_dtoa_r+0x60a>
 800c1e2:	9900      	ldr	r1, [sp, #0]
 800c1e4:	2230      	movs	r2, #48	; 0x30
 800c1e6:	3701      	adds	r7, #1
 800c1e8:	700a      	strb	r2, [r1, #0]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	e7ae      	b.n	800c150 <_dtoa_r+0x588>
 800c1f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c1f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fe:	d1b2      	bne.n	800c166 <_dtoa_r+0x59e>
 800c200:	e7d3      	b.n	800c1aa <_dtoa_r+0x5e2>
 800c202:	bf00      	nop
 800c204:	0800dcc0 	.word	0x0800dcc0
 800c208:	0800dc98 	.word	0x0800dc98
 800c20c:	9908      	ldr	r1, [sp, #32]
 800c20e:	2900      	cmp	r1, #0
 800c210:	f000 80d1 	beq.w	800c3b6 <_dtoa_r+0x7ee>
 800c214:	9907      	ldr	r1, [sp, #28]
 800c216:	2901      	cmp	r1, #1
 800c218:	f300 80b4 	bgt.w	800c384 <_dtoa_r+0x7bc>
 800c21c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c21e:	2900      	cmp	r1, #0
 800c220:	f000 80ac 	beq.w	800c37c <_dtoa_r+0x7b4>
 800c224:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c228:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c22c:	461c      	mov	r4, r3
 800c22e:	930a      	str	r3, [sp, #40]	; 0x28
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	4413      	add	r3, r2
 800c234:	9305      	str	r3, [sp, #20]
 800c236:	9b06      	ldr	r3, [sp, #24]
 800c238:	2101      	movs	r1, #1
 800c23a:	4413      	add	r3, r2
 800c23c:	4630      	mov	r0, r6
 800c23e:	9306      	str	r3, [sp, #24]
 800c240:	f000 fc54 	bl	800caec <__i2b>
 800c244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c246:	4607      	mov	r7, r0
 800c248:	f1b8 0f00 	cmp.w	r8, #0
 800c24c:	dd0d      	ble.n	800c26a <_dtoa_r+0x6a2>
 800c24e:	9a06      	ldr	r2, [sp, #24]
 800c250:	2a00      	cmp	r2, #0
 800c252:	dd0a      	ble.n	800c26a <_dtoa_r+0x6a2>
 800c254:	4542      	cmp	r2, r8
 800c256:	9905      	ldr	r1, [sp, #20]
 800c258:	bfa8      	it	ge
 800c25a:	4642      	movge	r2, r8
 800c25c:	1a89      	subs	r1, r1, r2
 800c25e:	9105      	str	r1, [sp, #20]
 800c260:	9906      	ldr	r1, [sp, #24]
 800c262:	eba8 0802 	sub.w	r8, r8, r2
 800c266:	1a8a      	subs	r2, r1, r2
 800c268:	9206      	str	r2, [sp, #24]
 800c26a:	b303      	cbz	r3, 800c2ae <_dtoa_r+0x6e6>
 800c26c:	9a08      	ldr	r2, [sp, #32]
 800c26e:	2a00      	cmp	r2, #0
 800c270:	f000 80a6 	beq.w	800c3c0 <_dtoa_r+0x7f8>
 800c274:	2c00      	cmp	r4, #0
 800c276:	dd13      	ble.n	800c2a0 <_dtoa_r+0x6d8>
 800c278:	4639      	mov	r1, r7
 800c27a:	4622      	mov	r2, r4
 800c27c:	4630      	mov	r0, r6
 800c27e:	930c      	str	r3, [sp, #48]	; 0x30
 800c280:	f000 fcf0 	bl	800cc64 <__pow5mult>
 800c284:	462a      	mov	r2, r5
 800c286:	4601      	mov	r1, r0
 800c288:	4607      	mov	r7, r0
 800c28a:	4630      	mov	r0, r6
 800c28c:	f000 fc44 	bl	800cb18 <__multiply>
 800c290:	4629      	mov	r1, r5
 800c292:	900a      	str	r0, [sp, #40]	; 0x28
 800c294:	4630      	mov	r0, r6
 800c296:	f000 fb6d 	bl	800c974 <_Bfree>
 800c29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c29c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c29e:	4615      	mov	r5, r2
 800c2a0:	1b1a      	subs	r2, r3, r4
 800c2a2:	d004      	beq.n	800c2ae <_dtoa_r+0x6e6>
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f000 fcdc 	bl	800cc64 <__pow5mult>
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f000 fc1b 	bl	800caec <__i2b>
 800c2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	f340 8082 	ble.w	800c3c4 <_dtoa_r+0x7fc>
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f000 fccd 	bl	800cc64 <__pow5mult>
 800c2ca:	9b07      	ldr	r3, [sp, #28]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	dd7b      	ble.n	800c3ca <_dtoa_r+0x802>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d6:	6922      	ldr	r2, [r4, #16]
 800c2d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c2dc:	6910      	ldr	r0, [r2, #16]
 800c2de:	f000 fbb5 	bl	800ca4c <__hi0bits>
 800c2e2:	f1c0 0020 	rsb	r0, r0, #32
 800c2e6:	9b06      	ldr	r3, [sp, #24]
 800c2e8:	4418      	add	r0, r3
 800c2ea:	f010 001f 	ands.w	r0, r0, #31
 800c2ee:	f000 808d 	beq.w	800c40c <_dtoa_r+0x844>
 800c2f2:	f1c0 0220 	rsb	r2, r0, #32
 800c2f6:	2a04      	cmp	r2, #4
 800c2f8:	f340 8086 	ble.w	800c408 <_dtoa_r+0x840>
 800c2fc:	f1c0 001c 	rsb	r0, r0, #28
 800c300:	9b05      	ldr	r3, [sp, #20]
 800c302:	4403      	add	r3, r0
 800c304:	9305      	str	r3, [sp, #20]
 800c306:	9b06      	ldr	r3, [sp, #24]
 800c308:	4403      	add	r3, r0
 800c30a:	4480      	add	r8, r0
 800c30c:	9306      	str	r3, [sp, #24]
 800c30e:	9b05      	ldr	r3, [sp, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	dd05      	ble.n	800c320 <_dtoa_r+0x758>
 800c314:	4629      	mov	r1, r5
 800c316:	461a      	mov	r2, r3
 800c318:	4630      	mov	r0, r6
 800c31a:	f000 fcfd 	bl	800cd18 <__lshift>
 800c31e:	4605      	mov	r5, r0
 800c320:	9b06      	ldr	r3, [sp, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	dd05      	ble.n	800c332 <_dtoa_r+0x76a>
 800c326:	4621      	mov	r1, r4
 800c328:	461a      	mov	r2, r3
 800c32a:	4630      	mov	r0, r6
 800c32c:	f000 fcf4 	bl	800cd18 <__lshift>
 800c330:	4604      	mov	r4, r0
 800c332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d06b      	beq.n	800c410 <_dtoa_r+0x848>
 800c338:	4621      	mov	r1, r4
 800c33a:	4628      	mov	r0, r5
 800c33c:	f000 fd58 	bl	800cdf0 <__mcmp>
 800c340:	2800      	cmp	r0, #0
 800c342:	da65      	bge.n	800c410 <_dtoa_r+0x848>
 800c344:	2300      	movs	r3, #0
 800c346:	4629      	mov	r1, r5
 800c348:	220a      	movs	r2, #10
 800c34a:	4630      	mov	r0, r6
 800c34c:	f000 fb34 	bl	800c9b8 <__multadd>
 800c350:	9b08      	ldr	r3, [sp, #32]
 800c352:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c356:	4605      	mov	r5, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 8192 	beq.w	800c682 <_dtoa_r+0xaba>
 800c35e:	4639      	mov	r1, r7
 800c360:	2300      	movs	r3, #0
 800c362:	220a      	movs	r2, #10
 800c364:	4630      	mov	r0, r6
 800c366:	f000 fb27 	bl	800c9b8 <__multadd>
 800c36a:	f1ba 0f00 	cmp.w	sl, #0
 800c36e:	4607      	mov	r7, r0
 800c370:	f300 808e 	bgt.w	800c490 <_dtoa_r+0x8c8>
 800c374:	9b07      	ldr	r3, [sp, #28]
 800c376:	2b02      	cmp	r3, #2
 800c378:	dc51      	bgt.n	800c41e <_dtoa_r+0x856>
 800c37a:	e089      	b.n	800c490 <_dtoa_r+0x8c8>
 800c37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c37e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c382:	e751      	b.n	800c228 <_dtoa_r+0x660>
 800c384:	f109 34ff 	add.w	r4, r9, #4294967295
 800c388:	42a3      	cmp	r3, r4
 800c38a:	bfbf      	itttt	lt
 800c38c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c38e:	1ae3      	sublt	r3, r4, r3
 800c390:	18d2      	addlt	r2, r2, r3
 800c392:	4613      	movlt	r3, r2
 800c394:	bfb7      	itett	lt
 800c396:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c398:	1b1c      	subge	r4, r3, r4
 800c39a:	4623      	movlt	r3, r4
 800c39c:	2400      	movlt	r4, #0
 800c39e:	f1b9 0f00 	cmp.w	r9, #0
 800c3a2:	bfb5      	itete	lt
 800c3a4:	9a05      	ldrlt	r2, [sp, #20]
 800c3a6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c3aa:	eba2 0809 	sublt.w	r8, r2, r9
 800c3ae:	464a      	movge	r2, r9
 800c3b0:	bfb8      	it	lt
 800c3b2:	2200      	movlt	r2, #0
 800c3b4:	e73b      	b.n	800c22e <_dtoa_r+0x666>
 800c3b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c3ba:	9f08      	ldr	r7, [sp, #32]
 800c3bc:	461c      	mov	r4, r3
 800c3be:	e743      	b.n	800c248 <_dtoa_r+0x680>
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	e76f      	b.n	800c2a4 <_dtoa_r+0x6dc>
 800c3c4:	9b07      	ldr	r3, [sp, #28]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	dc18      	bgt.n	800c3fc <_dtoa_r+0x834>
 800c3ca:	9b02      	ldr	r3, [sp, #8]
 800c3cc:	b9b3      	cbnz	r3, 800c3fc <_dtoa_r+0x834>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c3d4:	b9a2      	cbnz	r2, 800c400 <_dtoa_r+0x838>
 800c3d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c3da:	0d12      	lsrs	r2, r2, #20
 800c3dc:	0512      	lsls	r2, r2, #20
 800c3de:	b18a      	cbz	r2, 800c404 <_dtoa_r+0x83c>
 800c3e0:	9b05      	ldr	r3, [sp, #20]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	9305      	str	r3, [sp, #20]
 800c3e6:	9b06      	ldr	r3, [sp, #24]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	9306      	str	r3, [sp, #24]
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f47f af6f 	bne.w	800c2d6 <_dtoa_r+0x70e>
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	e774      	b.n	800c2e6 <_dtoa_r+0x71e>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e7f6      	b.n	800c3ee <_dtoa_r+0x826>
 800c400:	9b02      	ldr	r3, [sp, #8]
 800c402:	e7f4      	b.n	800c3ee <_dtoa_r+0x826>
 800c404:	920a      	str	r2, [sp, #40]	; 0x28
 800c406:	e7f3      	b.n	800c3f0 <_dtoa_r+0x828>
 800c408:	d081      	beq.n	800c30e <_dtoa_r+0x746>
 800c40a:	4610      	mov	r0, r2
 800c40c:	301c      	adds	r0, #28
 800c40e:	e777      	b.n	800c300 <_dtoa_r+0x738>
 800c410:	f1b9 0f00 	cmp.w	r9, #0
 800c414:	dc37      	bgt.n	800c486 <_dtoa_r+0x8be>
 800c416:	9b07      	ldr	r3, [sp, #28]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	dd34      	ble.n	800c486 <_dtoa_r+0x8be>
 800c41c:	46ca      	mov	sl, r9
 800c41e:	f1ba 0f00 	cmp.w	sl, #0
 800c422:	d10d      	bne.n	800c440 <_dtoa_r+0x878>
 800c424:	4621      	mov	r1, r4
 800c426:	4653      	mov	r3, sl
 800c428:	2205      	movs	r2, #5
 800c42a:	4630      	mov	r0, r6
 800c42c:	f000 fac4 	bl	800c9b8 <__multadd>
 800c430:	4601      	mov	r1, r0
 800c432:	4604      	mov	r4, r0
 800c434:	4628      	mov	r0, r5
 800c436:	f000 fcdb 	bl	800cdf0 <__mcmp>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	f73f adde 	bgt.w	800bffc <_dtoa_r+0x434>
 800c440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c442:	f8dd 8000 	ldr.w	r8, [sp]
 800c446:	ea6f 0b03 	mvn.w	fp, r3
 800c44a:	f04f 0900 	mov.w	r9, #0
 800c44e:	4621      	mov	r1, r4
 800c450:	4630      	mov	r0, r6
 800c452:	f000 fa8f 	bl	800c974 <_Bfree>
 800c456:	2f00      	cmp	r7, #0
 800c458:	f43f aea7 	beq.w	800c1aa <_dtoa_r+0x5e2>
 800c45c:	f1b9 0f00 	cmp.w	r9, #0
 800c460:	d005      	beq.n	800c46e <_dtoa_r+0x8a6>
 800c462:	45b9      	cmp	r9, r7
 800c464:	d003      	beq.n	800c46e <_dtoa_r+0x8a6>
 800c466:	4649      	mov	r1, r9
 800c468:	4630      	mov	r0, r6
 800c46a:	f000 fa83 	bl	800c974 <_Bfree>
 800c46e:	4639      	mov	r1, r7
 800c470:	4630      	mov	r0, r6
 800c472:	f000 fa7f 	bl	800c974 <_Bfree>
 800c476:	e698      	b.n	800c1aa <_dtoa_r+0x5e2>
 800c478:	2400      	movs	r4, #0
 800c47a:	4627      	mov	r7, r4
 800c47c:	e7e0      	b.n	800c440 <_dtoa_r+0x878>
 800c47e:	46bb      	mov	fp, r7
 800c480:	4604      	mov	r4, r0
 800c482:	4607      	mov	r7, r0
 800c484:	e5ba      	b.n	800bffc <_dtoa_r+0x434>
 800c486:	9b08      	ldr	r3, [sp, #32]
 800c488:	46ca      	mov	sl, r9
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 8100 	beq.w	800c690 <_dtoa_r+0xac8>
 800c490:	f1b8 0f00 	cmp.w	r8, #0
 800c494:	dd05      	ble.n	800c4a2 <_dtoa_r+0x8da>
 800c496:	4639      	mov	r1, r7
 800c498:	4642      	mov	r2, r8
 800c49a:	4630      	mov	r0, r6
 800c49c:	f000 fc3c 	bl	800cd18 <__lshift>
 800c4a0:	4607      	mov	r7, r0
 800c4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d05d      	beq.n	800c564 <_dtoa_r+0x99c>
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f000 fa22 	bl	800c8f4 <_Balloc>
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	b928      	cbnz	r0, 800c4c0 <_dtoa_r+0x8f8>
 800c4b4:	4b82      	ldr	r3, [pc, #520]	; (800c6c0 <_dtoa_r+0xaf8>)
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c4bc:	f7ff bb9a 	b.w	800bbf4 <_dtoa_r+0x2c>
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	3202      	adds	r2, #2
 800c4c4:	0092      	lsls	r2, r2, #2
 800c4c6:	f107 010c 	add.w	r1, r7, #12
 800c4ca:	300c      	adds	r0, #12
 800c4cc:	f000 fa04 	bl	800c8d8 <memcpy>
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	4641      	mov	r1, r8
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f000 fc1f 	bl	800cd18 <__lshift>
 800c4da:	9b00      	ldr	r3, [sp, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	9305      	str	r3, [sp, #20]
 800c4e0:	9b00      	ldr	r3, [sp, #0]
 800c4e2:	4453      	add	r3, sl
 800c4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e6:	9b02      	ldr	r3, [sp, #8]
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	46b9      	mov	r9, r7
 800c4ee:	9308      	str	r3, [sp, #32]
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	9b05      	ldr	r3, [sp, #20]
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	9302      	str	r3, [sp, #8]
 800c4fc:	f7ff fad6 	bl	800baac <quorem>
 800c500:	4603      	mov	r3, r0
 800c502:	3330      	adds	r3, #48	; 0x30
 800c504:	9006      	str	r0, [sp, #24]
 800c506:	4649      	mov	r1, r9
 800c508:	4628      	mov	r0, r5
 800c50a:	930a      	str	r3, [sp, #40]	; 0x28
 800c50c:	f000 fc70 	bl	800cdf0 <__mcmp>
 800c510:	463a      	mov	r2, r7
 800c512:	4682      	mov	sl, r0
 800c514:	4621      	mov	r1, r4
 800c516:	4630      	mov	r0, r6
 800c518:	f000 fc86 	bl	800ce28 <__mdiff>
 800c51c:	68c2      	ldr	r2, [r0, #12]
 800c51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c520:	4680      	mov	r8, r0
 800c522:	bb0a      	cbnz	r2, 800c568 <_dtoa_r+0x9a0>
 800c524:	4601      	mov	r1, r0
 800c526:	4628      	mov	r0, r5
 800c528:	f000 fc62 	bl	800cdf0 <__mcmp>
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	4602      	mov	r2, r0
 800c530:	4641      	mov	r1, r8
 800c532:	4630      	mov	r0, r6
 800c534:	920e      	str	r2, [sp, #56]	; 0x38
 800c536:	930a      	str	r3, [sp, #40]	; 0x28
 800c538:	f000 fa1c 	bl	800c974 <_Bfree>
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c540:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c544:	ea43 0102 	orr.w	r1, r3, r2
 800c548:	9b08      	ldr	r3, [sp, #32]
 800c54a:	430b      	orrs	r3, r1
 800c54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c54e:	d10d      	bne.n	800c56c <_dtoa_r+0x9a4>
 800c550:	2b39      	cmp	r3, #57	; 0x39
 800c552:	d029      	beq.n	800c5a8 <_dtoa_r+0x9e0>
 800c554:	f1ba 0f00 	cmp.w	sl, #0
 800c558:	dd01      	ble.n	800c55e <_dtoa_r+0x996>
 800c55a:	9b06      	ldr	r3, [sp, #24]
 800c55c:	3331      	adds	r3, #49	; 0x31
 800c55e:	9a02      	ldr	r2, [sp, #8]
 800c560:	7013      	strb	r3, [r2, #0]
 800c562:	e774      	b.n	800c44e <_dtoa_r+0x886>
 800c564:	4638      	mov	r0, r7
 800c566:	e7b8      	b.n	800c4da <_dtoa_r+0x912>
 800c568:	2201      	movs	r2, #1
 800c56a:	e7e1      	b.n	800c530 <_dtoa_r+0x968>
 800c56c:	f1ba 0f00 	cmp.w	sl, #0
 800c570:	db06      	blt.n	800c580 <_dtoa_r+0x9b8>
 800c572:	9907      	ldr	r1, [sp, #28]
 800c574:	ea41 0a0a 	orr.w	sl, r1, sl
 800c578:	9908      	ldr	r1, [sp, #32]
 800c57a:	ea5a 0101 	orrs.w	r1, sl, r1
 800c57e:	d120      	bne.n	800c5c2 <_dtoa_r+0x9fa>
 800c580:	2a00      	cmp	r2, #0
 800c582:	ddec      	ble.n	800c55e <_dtoa_r+0x996>
 800c584:	4629      	mov	r1, r5
 800c586:	2201      	movs	r2, #1
 800c588:	4630      	mov	r0, r6
 800c58a:	9305      	str	r3, [sp, #20]
 800c58c:	f000 fbc4 	bl	800cd18 <__lshift>
 800c590:	4621      	mov	r1, r4
 800c592:	4605      	mov	r5, r0
 800c594:	f000 fc2c 	bl	800cdf0 <__mcmp>
 800c598:	2800      	cmp	r0, #0
 800c59a:	9b05      	ldr	r3, [sp, #20]
 800c59c:	dc02      	bgt.n	800c5a4 <_dtoa_r+0x9dc>
 800c59e:	d1de      	bne.n	800c55e <_dtoa_r+0x996>
 800c5a0:	07da      	lsls	r2, r3, #31
 800c5a2:	d5dc      	bpl.n	800c55e <_dtoa_r+0x996>
 800c5a4:	2b39      	cmp	r3, #57	; 0x39
 800c5a6:	d1d8      	bne.n	800c55a <_dtoa_r+0x992>
 800c5a8:	9a02      	ldr	r2, [sp, #8]
 800c5aa:	2339      	movs	r3, #57	; 0x39
 800c5ac:	7013      	strb	r3, [r2, #0]
 800c5ae:	4643      	mov	r3, r8
 800c5b0:	4698      	mov	r8, r3
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c5b8:	2a39      	cmp	r2, #57	; 0x39
 800c5ba:	d051      	beq.n	800c660 <_dtoa_r+0xa98>
 800c5bc:	3201      	adds	r2, #1
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	e745      	b.n	800c44e <_dtoa_r+0x886>
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	dd03      	ble.n	800c5ce <_dtoa_r+0xa06>
 800c5c6:	2b39      	cmp	r3, #57	; 0x39
 800c5c8:	d0ee      	beq.n	800c5a8 <_dtoa_r+0x9e0>
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	e7c7      	b.n	800c55e <_dtoa_r+0x996>
 800c5ce:	9a05      	ldr	r2, [sp, #20]
 800c5d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c5d6:	428a      	cmp	r2, r1
 800c5d8:	d02b      	beq.n	800c632 <_dtoa_r+0xa6a>
 800c5da:	4629      	mov	r1, r5
 800c5dc:	2300      	movs	r3, #0
 800c5de:	220a      	movs	r2, #10
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f000 f9e9 	bl	800c9b8 <__multadd>
 800c5e6:	45b9      	cmp	r9, r7
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	f04f 0300 	mov.w	r3, #0
 800c5ee:	f04f 020a 	mov.w	r2, #10
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	d107      	bne.n	800c608 <_dtoa_r+0xa40>
 800c5f8:	f000 f9de 	bl	800c9b8 <__multadd>
 800c5fc:	4681      	mov	r9, r0
 800c5fe:	4607      	mov	r7, r0
 800c600:	9b05      	ldr	r3, [sp, #20]
 800c602:	3301      	adds	r3, #1
 800c604:	9305      	str	r3, [sp, #20]
 800c606:	e774      	b.n	800c4f2 <_dtoa_r+0x92a>
 800c608:	f000 f9d6 	bl	800c9b8 <__multadd>
 800c60c:	4639      	mov	r1, r7
 800c60e:	4681      	mov	r9, r0
 800c610:	2300      	movs	r3, #0
 800c612:	220a      	movs	r2, #10
 800c614:	4630      	mov	r0, r6
 800c616:	f000 f9cf 	bl	800c9b8 <__multadd>
 800c61a:	4607      	mov	r7, r0
 800c61c:	e7f0      	b.n	800c600 <_dtoa_r+0xa38>
 800c61e:	f1ba 0f00 	cmp.w	sl, #0
 800c622:	9a00      	ldr	r2, [sp, #0]
 800c624:	bfcc      	ite	gt
 800c626:	46d0      	movgt	r8, sl
 800c628:	f04f 0801 	movle.w	r8, #1
 800c62c:	4490      	add	r8, r2
 800c62e:	f04f 0900 	mov.w	r9, #0
 800c632:	4629      	mov	r1, r5
 800c634:	2201      	movs	r2, #1
 800c636:	4630      	mov	r0, r6
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	f000 fb6d 	bl	800cd18 <__lshift>
 800c63e:	4621      	mov	r1, r4
 800c640:	4605      	mov	r5, r0
 800c642:	f000 fbd5 	bl	800cdf0 <__mcmp>
 800c646:	2800      	cmp	r0, #0
 800c648:	dcb1      	bgt.n	800c5ae <_dtoa_r+0x9e6>
 800c64a:	d102      	bne.n	800c652 <_dtoa_r+0xa8a>
 800c64c:	9b02      	ldr	r3, [sp, #8]
 800c64e:	07db      	lsls	r3, r3, #31
 800c650:	d4ad      	bmi.n	800c5ae <_dtoa_r+0x9e6>
 800c652:	4643      	mov	r3, r8
 800c654:	4698      	mov	r8, r3
 800c656:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c65a:	2a30      	cmp	r2, #48	; 0x30
 800c65c:	d0fa      	beq.n	800c654 <_dtoa_r+0xa8c>
 800c65e:	e6f6      	b.n	800c44e <_dtoa_r+0x886>
 800c660:	9a00      	ldr	r2, [sp, #0]
 800c662:	429a      	cmp	r2, r3
 800c664:	d1a4      	bne.n	800c5b0 <_dtoa_r+0x9e8>
 800c666:	f10b 0b01 	add.w	fp, fp, #1
 800c66a:	2331      	movs	r3, #49	; 0x31
 800c66c:	e778      	b.n	800c560 <_dtoa_r+0x998>
 800c66e:	4b15      	ldr	r3, [pc, #84]	; (800c6c4 <_dtoa_r+0xafc>)
 800c670:	f7ff bb12 	b.w	800bc98 <_dtoa_r+0xd0>
 800c674:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c676:	2b00      	cmp	r3, #0
 800c678:	f47f aaee 	bne.w	800bc58 <_dtoa_r+0x90>
 800c67c:	4b12      	ldr	r3, [pc, #72]	; (800c6c8 <_dtoa_r+0xb00>)
 800c67e:	f7ff bb0b 	b.w	800bc98 <_dtoa_r+0xd0>
 800c682:	f1ba 0f00 	cmp.w	sl, #0
 800c686:	dc03      	bgt.n	800c690 <_dtoa_r+0xac8>
 800c688:	9b07      	ldr	r3, [sp, #28]
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	f73f aec7 	bgt.w	800c41e <_dtoa_r+0x856>
 800c690:	f8dd 8000 	ldr.w	r8, [sp]
 800c694:	4621      	mov	r1, r4
 800c696:	4628      	mov	r0, r5
 800c698:	f7ff fa08 	bl	800baac <quorem>
 800c69c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c6a0:	f808 3b01 	strb.w	r3, [r8], #1
 800c6a4:	9a00      	ldr	r2, [sp, #0]
 800c6a6:	eba8 0202 	sub.w	r2, r8, r2
 800c6aa:	4592      	cmp	sl, r2
 800c6ac:	ddb7      	ble.n	800c61e <_dtoa_r+0xa56>
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	220a      	movs	r2, #10
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f000 f97f 	bl	800c9b8 <__multadd>
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	e7ea      	b.n	800c694 <_dtoa_r+0xacc>
 800c6be:	bf00      	nop
 800c6c0:	0800dbc3 	.word	0x0800dbc3
 800c6c4:	0800db1c 	.word	0x0800db1c
 800c6c8:	0800db40 	.word	0x0800db40

0800c6cc <std>:
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c6d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6da:	6083      	str	r3, [r0, #8]
 800c6dc:	8181      	strh	r1, [r0, #12]
 800c6de:	6643      	str	r3, [r0, #100]	; 0x64
 800c6e0:	81c2      	strh	r2, [r0, #14]
 800c6e2:	6183      	str	r3, [r0, #24]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	2208      	movs	r2, #8
 800c6e8:	305c      	adds	r0, #92	; 0x5c
 800c6ea:	f7fe fd7b 	bl	800b1e4 <memset>
 800c6ee:	4b05      	ldr	r3, [pc, #20]	; (800c704 <std+0x38>)
 800c6f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c6f2:	4b05      	ldr	r3, [pc, #20]	; (800c708 <std+0x3c>)
 800c6f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6f6:	4b05      	ldr	r3, [pc, #20]	; (800c70c <std+0x40>)
 800c6f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6fa:	4b05      	ldr	r3, [pc, #20]	; (800c710 <std+0x44>)
 800c6fc:	6224      	str	r4, [r4, #32]
 800c6fe:	6323      	str	r3, [r4, #48]	; 0x30
 800c700:	bd10      	pop	{r4, pc}
 800c702:	bf00      	nop
 800c704:	0800d439 	.word	0x0800d439
 800c708:	0800d45b 	.word	0x0800d45b
 800c70c:	0800d493 	.word	0x0800d493
 800c710:	0800d4b7 	.word	0x0800d4b7

0800c714 <_cleanup_r>:
 800c714:	4901      	ldr	r1, [pc, #4]	; (800c71c <_cleanup_r+0x8>)
 800c716:	f000 b8af 	b.w	800c878 <_fwalk_reent>
 800c71a:	bf00      	nop
 800c71c:	0800d7cd 	.word	0x0800d7cd

0800c720 <__sfmoreglue>:
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	1e4a      	subs	r2, r1, #1
 800c724:	2568      	movs	r5, #104	; 0x68
 800c726:	4355      	muls	r5, r2
 800c728:	460e      	mov	r6, r1
 800c72a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c72e:	f000 fcbf 	bl	800d0b0 <_malloc_r>
 800c732:	4604      	mov	r4, r0
 800c734:	b140      	cbz	r0, 800c748 <__sfmoreglue+0x28>
 800c736:	2100      	movs	r1, #0
 800c738:	e9c0 1600 	strd	r1, r6, [r0]
 800c73c:	300c      	adds	r0, #12
 800c73e:	60a0      	str	r0, [r4, #8]
 800c740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c744:	f7fe fd4e 	bl	800b1e4 <memset>
 800c748:	4620      	mov	r0, r4
 800c74a:	bd70      	pop	{r4, r5, r6, pc}

0800c74c <__sfp_lock_acquire>:
 800c74c:	4801      	ldr	r0, [pc, #4]	; (800c754 <__sfp_lock_acquire+0x8>)
 800c74e:	f000 b8b8 	b.w	800c8c2 <__retarget_lock_acquire_recursive>
 800c752:	bf00      	nop
 800c754:	20000820 	.word	0x20000820

0800c758 <__sfp_lock_release>:
 800c758:	4801      	ldr	r0, [pc, #4]	; (800c760 <__sfp_lock_release+0x8>)
 800c75a:	f000 b8b3 	b.w	800c8c4 <__retarget_lock_release_recursive>
 800c75e:	bf00      	nop
 800c760:	20000820 	.word	0x20000820

0800c764 <__sinit_lock_acquire>:
 800c764:	4801      	ldr	r0, [pc, #4]	; (800c76c <__sinit_lock_acquire+0x8>)
 800c766:	f000 b8ac 	b.w	800c8c2 <__retarget_lock_acquire_recursive>
 800c76a:	bf00      	nop
 800c76c:	2000081b 	.word	0x2000081b

0800c770 <__sinit_lock_release>:
 800c770:	4801      	ldr	r0, [pc, #4]	; (800c778 <__sinit_lock_release+0x8>)
 800c772:	f000 b8a7 	b.w	800c8c4 <__retarget_lock_release_recursive>
 800c776:	bf00      	nop
 800c778:	2000081b 	.word	0x2000081b

0800c77c <__sinit>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	4604      	mov	r4, r0
 800c780:	f7ff fff0 	bl	800c764 <__sinit_lock_acquire>
 800c784:	69a3      	ldr	r3, [r4, #24]
 800c786:	b11b      	cbz	r3, 800c790 <__sinit+0x14>
 800c788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c78c:	f7ff bff0 	b.w	800c770 <__sinit_lock_release>
 800c790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c794:	6523      	str	r3, [r4, #80]	; 0x50
 800c796:	4b13      	ldr	r3, [pc, #76]	; (800c7e4 <__sinit+0x68>)
 800c798:	4a13      	ldr	r2, [pc, #76]	; (800c7e8 <__sinit+0x6c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c79e:	42a3      	cmp	r3, r4
 800c7a0:	bf04      	itt	eq
 800c7a2:	2301      	moveq	r3, #1
 800c7a4:	61a3      	streq	r3, [r4, #24]
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 f820 	bl	800c7ec <__sfp>
 800c7ac:	6060      	str	r0, [r4, #4]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 f81c 	bl	800c7ec <__sfp>
 800c7b4:	60a0      	str	r0, [r4, #8]
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 f818 	bl	800c7ec <__sfp>
 800c7bc:	2200      	movs	r2, #0
 800c7be:	60e0      	str	r0, [r4, #12]
 800c7c0:	2104      	movs	r1, #4
 800c7c2:	6860      	ldr	r0, [r4, #4]
 800c7c4:	f7ff ff82 	bl	800c6cc <std>
 800c7c8:	68a0      	ldr	r0, [r4, #8]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	2109      	movs	r1, #9
 800c7ce:	f7ff ff7d 	bl	800c6cc <std>
 800c7d2:	68e0      	ldr	r0, [r4, #12]
 800c7d4:	2202      	movs	r2, #2
 800c7d6:	2112      	movs	r1, #18
 800c7d8:	f7ff ff78 	bl	800c6cc <std>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	61a3      	str	r3, [r4, #24]
 800c7e0:	e7d2      	b.n	800c788 <__sinit+0xc>
 800c7e2:	bf00      	nop
 800c7e4:	0800db08 	.word	0x0800db08
 800c7e8:	0800c715 	.word	0x0800c715

0800c7ec <__sfp>:
 800c7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	f7ff ffac 	bl	800c74c <__sfp_lock_acquire>
 800c7f4:	4b1e      	ldr	r3, [pc, #120]	; (800c870 <__sfp+0x84>)
 800c7f6:	681e      	ldr	r6, [r3, #0]
 800c7f8:	69b3      	ldr	r3, [r6, #24]
 800c7fa:	b913      	cbnz	r3, 800c802 <__sfp+0x16>
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f7ff ffbd 	bl	800c77c <__sinit>
 800c802:	3648      	adds	r6, #72	; 0x48
 800c804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c808:	3b01      	subs	r3, #1
 800c80a:	d503      	bpl.n	800c814 <__sfp+0x28>
 800c80c:	6833      	ldr	r3, [r6, #0]
 800c80e:	b30b      	cbz	r3, 800c854 <__sfp+0x68>
 800c810:	6836      	ldr	r6, [r6, #0]
 800c812:	e7f7      	b.n	800c804 <__sfp+0x18>
 800c814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c818:	b9d5      	cbnz	r5, 800c850 <__sfp+0x64>
 800c81a:	4b16      	ldr	r3, [pc, #88]	; (800c874 <__sfp+0x88>)
 800c81c:	60e3      	str	r3, [r4, #12]
 800c81e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c822:	6665      	str	r5, [r4, #100]	; 0x64
 800c824:	f000 f84c 	bl	800c8c0 <__retarget_lock_init_recursive>
 800c828:	f7ff ff96 	bl	800c758 <__sfp_lock_release>
 800c82c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c834:	6025      	str	r5, [r4, #0]
 800c836:	61a5      	str	r5, [r4, #24]
 800c838:	2208      	movs	r2, #8
 800c83a:	4629      	mov	r1, r5
 800c83c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c840:	f7fe fcd0 	bl	800b1e4 <memset>
 800c844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c84c:	4620      	mov	r0, r4
 800c84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c850:	3468      	adds	r4, #104	; 0x68
 800c852:	e7d9      	b.n	800c808 <__sfp+0x1c>
 800c854:	2104      	movs	r1, #4
 800c856:	4638      	mov	r0, r7
 800c858:	f7ff ff62 	bl	800c720 <__sfmoreglue>
 800c85c:	4604      	mov	r4, r0
 800c85e:	6030      	str	r0, [r6, #0]
 800c860:	2800      	cmp	r0, #0
 800c862:	d1d5      	bne.n	800c810 <__sfp+0x24>
 800c864:	f7ff ff78 	bl	800c758 <__sfp_lock_release>
 800c868:	230c      	movs	r3, #12
 800c86a:	603b      	str	r3, [r7, #0]
 800c86c:	e7ee      	b.n	800c84c <__sfp+0x60>
 800c86e:	bf00      	nop
 800c870:	0800db08 	.word	0x0800db08
 800c874:	ffff0001 	.word	0xffff0001

0800c878 <_fwalk_reent>:
 800c878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c87c:	4606      	mov	r6, r0
 800c87e:	4688      	mov	r8, r1
 800c880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c884:	2700      	movs	r7, #0
 800c886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c88a:	f1b9 0901 	subs.w	r9, r9, #1
 800c88e:	d505      	bpl.n	800c89c <_fwalk_reent+0x24>
 800c890:	6824      	ldr	r4, [r4, #0]
 800c892:	2c00      	cmp	r4, #0
 800c894:	d1f7      	bne.n	800c886 <_fwalk_reent+0xe>
 800c896:	4638      	mov	r0, r7
 800c898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c89c:	89ab      	ldrh	r3, [r5, #12]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d907      	bls.n	800c8b2 <_fwalk_reent+0x3a>
 800c8a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	d003      	beq.n	800c8b2 <_fwalk_reent+0x3a>
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	47c0      	blx	r8
 800c8b0:	4307      	orrs	r7, r0
 800c8b2:	3568      	adds	r5, #104	; 0x68
 800c8b4:	e7e9      	b.n	800c88a <_fwalk_reent+0x12>
	...

0800c8b8 <_localeconv_r>:
 800c8b8:	4800      	ldr	r0, [pc, #0]	; (800c8bc <_localeconv_r+0x4>)
 800c8ba:	4770      	bx	lr
 800c8bc:	20000168 	.word	0x20000168

0800c8c0 <__retarget_lock_init_recursive>:
 800c8c0:	4770      	bx	lr

0800c8c2 <__retarget_lock_acquire_recursive>:
 800c8c2:	4770      	bx	lr

0800c8c4 <__retarget_lock_release_recursive>:
 800c8c4:	4770      	bx	lr
	...

0800c8c8 <malloc>:
 800c8c8:	4b02      	ldr	r3, [pc, #8]	; (800c8d4 <malloc+0xc>)
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	6818      	ldr	r0, [r3, #0]
 800c8ce:	f000 bbef 	b.w	800d0b0 <_malloc_r>
 800c8d2:	bf00      	nop
 800c8d4:	20000014 	.word	0x20000014

0800c8d8 <memcpy>:
 800c8d8:	440a      	add	r2, r1
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8e0:	d100      	bne.n	800c8e4 <memcpy+0xc>
 800c8e2:	4770      	bx	lr
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ee:	4291      	cmp	r1, r2
 800c8f0:	d1f9      	bne.n	800c8e6 <memcpy+0xe>
 800c8f2:	bd10      	pop	{r4, pc}

0800c8f4 <_Balloc>:
 800c8f4:	b570      	push	{r4, r5, r6, lr}
 800c8f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	b976      	cbnz	r6, 800c91c <_Balloc+0x28>
 800c8fe:	2010      	movs	r0, #16
 800c900:	f7ff ffe2 	bl	800c8c8 <malloc>
 800c904:	4602      	mov	r2, r0
 800c906:	6260      	str	r0, [r4, #36]	; 0x24
 800c908:	b920      	cbnz	r0, 800c914 <_Balloc+0x20>
 800c90a:	4b18      	ldr	r3, [pc, #96]	; (800c96c <_Balloc+0x78>)
 800c90c:	4818      	ldr	r0, [pc, #96]	; (800c970 <_Balloc+0x7c>)
 800c90e:	2166      	movs	r1, #102	; 0x66
 800c910:	f000 fea8 	bl	800d664 <__assert_func>
 800c914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c918:	6006      	str	r6, [r0, #0]
 800c91a:	60c6      	str	r6, [r0, #12]
 800c91c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c91e:	68f3      	ldr	r3, [r6, #12]
 800c920:	b183      	cbz	r3, 800c944 <_Balloc+0x50>
 800c922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c92a:	b9b8      	cbnz	r0, 800c95c <_Balloc+0x68>
 800c92c:	2101      	movs	r1, #1
 800c92e:	fa01 f605 	lsl.w	r6, r1, r5
 800c932:	1d72      	adds	r2, r6, #5
 800c934:	0092      	lsls	r2, r2, #2
 800c936:	4620      	mov	r0, r4
 800c938:	f000 fb5a 	bl	800cff0 <_calloc_r>
 800c93c:	b160      	cbz	r0, 800c958 <_Balloc+0x64>
 800c93e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c942:	e00e      	b.n	800c962 <_Balloc+0x6e>
 800c944:	2221      	movs	r2, #33	; 0x21
 800c946:	2104      	movs	r1, #4
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fb51 	bl	800cff0 <_calloc_r>
 800c94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c950:	60f0      	str	r0, [r6, #12]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1e4      	bne.n	800c922 <_Balloc+0x2e>
 800c958:	2000      	movs	r0, #0
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	6802      	ldr	r2, [r0, #0]
 800c95e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c962:	2300      	movs	r3, #0
 800c964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c968:	e7f7      	b.n	800c95a <_Balloc+0x66>
 800c96a:	bf00      	nop
 800c96c:	0800db4d 	.word	0x0800db4d
 800c970:	0800dc34 	.word	0x0800dc34

0800c974 <_Bfree>:
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c978:	4605      	mov	r5, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	b976      	cbnz	r6, 800c99c <_Bfree+0x28>
 800c97e:	2010      	movs	r0, #16
 800c980:	f7ff ffa2 	bl	800c8c8 <malloc>
 800c984:	4602      	mov	r2, r0
 800c986:	6268      	str	r0, [r5, #36]	; 0x24
 800c988:	b920      	cbnz	r0, 800c994 <_Bfree+0x20>
 800c98a:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <_Bfree+0x3c>)
 800c98c:	4809      	ldr	r0, [pc, #36]	; (800c9b4 <_Bfree+0x40>)
 800c98e:	218a      	movs	r1, #138	; 0x8a
 800c990:	f000 fe68 	bl	800d664 <__assert_func>
 800c994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c998:	6006      	str	r6, [r0, #0]
 800c99a:	60c6      	str	r6, [r0, #12]
 800c99c:	b13c      	cbz	r4, 800c9ae <_Bfree+0x3a>
 800c99e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9a0:	6862      	ldr	r2, [r4, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9a8:	6021      	str	r1, [r4, #0]
 800c9aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	0800db4d 	.word	0x0800db4d
 800c9b4:	0800dc34 	.word	0x0800dc34

0800c9b8 <__multadd>:
 800c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9bc:	690e      	ldr	r6, [r1, #16]
 800c9be:	4607      	mov	r7, r0
 800c9c0:	4698      	mov	r8, r3
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	f101 0014 	add.w	r0, r1, #20
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6805      	ldr	r5, [r0, #0]
 800c9cc:	b2a9      	uxth	r1, r5
 800c9ce:	fb02 8101 	mla	r1, r2, r1, r8
 800c9d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c9d6:	0c2d      	lsrs	r5, r5, #16
 800c9d8:	fb02 c505 	mla	r5, r2, r5, ip
 800c9dc:	b289      	uxth	r1, r1
 800c9de:	3301      	adds	r3, #1
 800c9e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c9e4:	429e      	cmp	r6, r3
 800c9e6:	f840 1b04 	str.w	r1, [r0], #4
 800c9ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c9ee:	dcec      	bgt.n	800c9ca <__multadd+0x12>
 800c9f0:	f1b8 0f00 	cmp.w	r8, #0
 800c9f4:	d022      	beq.n	800ca3c <__multadd+0x84>
 800c9f6:	68a3      	ldr	r3, [r4, #8]
 800c9f8:	42b3      	cmp	r3, r6
 800c9fa:	dc19      	bgt.n	800ca30 <__multadd+0x78>
 800c9fc:	6861      	ldr	r1, [r4, #4]
 800c9fe:	4638      	mov	r0, r7
 800ca00:	3101      	adds	r1, #1
 800ca02:	f7ff ff77 	bl	800c8f4 <_Balloc>
 800ca06:	4605      	mov	r5, r0
 800ca08:	b928      	cbnz	r0, 800ca16 <__multadd+0x5e>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	4b0d      	ldr	r3, [pc, #52]	; (800ca44 <__multadd+0x8c>)
 800ca0e:	480e      	ldr	r0, [pc, #56]	; (800ca48 <__multadd+0x90>)
 800ca10:	21b5      	movs	r1, #181	; 0xb5
 800ca12:	f000 fe27 	bl	800d664 <__assert_func>
 800ca16:	6922      	ldr	r2, [r4, #16]
 800ca18:	3202      	adds	r2, #2
 800ca1a:	f104 010c 	add.w	r1, r4, #12
 800ca1e:	0092      	lsls	r2, r2, #2
 800ca20:	300c      	adds	r0, #12
 800ca22:	f7ff ff59 	bl	800c8d8 <memcpy>
 800ca26:	4621      	mov	r1, r4
 800ca28:	4638      	mov	r0, r7
 800ca2a:	f7ff ffa3 	bl	800c974 <_Bfree>
 800ca2e:	462c      	mov	r4, r5
 800ca30:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ca34:	3601      	adds	r6, #1
 800ca36:	f8c3 8014 	str.w	r8, [r3, #20]
 800ca3a:	6126      	str	r6, [r4, #16]
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca42:	bf00      	nop
 800ca44:	0800dbc3 	.word	0x0800dbc3
 800ca48:	0800dc34 	.word	0x0800dc34

0800ca4c <__hi0bits>:
 800ca4c:	0c03      	lsrs	r3, r0, #16
 800ca4e:	041b      	lsls	r3, r3, #16
 800ca50:	b9d3      	cbnz	r3, 800ca88 <__hi0bits+0x3c>
 800ca52:	0400      	lsls	r0, r0, #16
 800ca54:	2310      	movs	r3, #16
 800ca56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca5a:	bf04      	itt	eq
 800ca5c:	0200      	lsleq	r0, r0, #8
 800ca5e:	3308      	addeq	r3, #8
 800ca60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca64:	bf04      	itt	eq
 800ca66:	0100      	lsleq	r0, r0, #4
 800ca68:	3304      	addeq	r3, #4
 800ca6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca6e:	bf04      	itt	eq
 800ca70:	0080      	lsleq	r0, r0, #2
 800ca72:	3302      	addeq	r3, #2
 800ca74:	2800      	cmp	r0, #0
 800ca76:	db05      	blt.n	800ca84 <__hi0bits+0x38>
 800ca78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca7c:	f103 0301 	add.w	r3, r3, #1
 800ca80:	bf08      	it	eq
 800ca82:	2320      	moveq	r3, #32
 800ca84:	4618      	mov	r0, r3
 800ca86:	4770      	bx	lr
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e7e4      	b.n	800ca56 <__hi0bits+0xa>

0800ca8c <__lo0bits>:
 800ca8c:	6803      	ldr	r3, [r0, #0]
 800ca8e:	f013 0207 	ands.w	r2, r3, #7
 800ca92:	4601      	mov	r1, r0
 800ca94:	d00b      	beq.n	800caae <__lo0bits+0x22>
 800ca96:	07da      	lsls	r2, r3, #31
 800ca98:	d424      	bmi.n	800cae4 <__lo0bits+0x58>
 800ca9a:	0798      	lsls	r0, r3, #30
 800ca9c:	bf49      	itett	mi
 800ca9e:	085b      	lsrmi	r3, r3, #1
 800caa0:	089b      	lsrpl	r3, r3, #2
 800caa2:	2001      	movmi	r0, #1
 800caa4:	600b      	strmi	r3, [r1, #0]
 800caa6:	bf5c      	itt	pl
 800caa8:	600b      	strpl	r3, [r1, #0]
 800caaa:	2002      	movpl	r0, #2
 800caac:	4770      	bx	lr
 800caae:	b298      	uxth	r0, r3
 800cab0:	b9b0      	cbnz	r0, 800cae0 <__lo0bits+0x54>
 800cab2:	0c1b      	lsrs	r3, r3, #16
 800cab4:	2010      	movs	r0, #16
 800cab6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800caba:	bf04      	itt	eq
 800cabc:	0a1b      	lsreq	r3, r3, #8
 800cabe:	3008      	addeq	r0, #8
 800cac0:	071a      	lsls	r2, r3, #28
 800cac2:	bf04      	itt	eq
 800cac4:	091b      	lsreq	r3, r3, #4
 800cac6:	3004      	addeq	r0, #4
 800cac8:	079a      	lsls	r2, r3, #30
 800caca:	bf04      	itt	eq
 800cacc:	089b      	lsreq	r3, r3, #2
 800cace:	3002      	addeq	r0, #2
 800cad0:	07da      	lsls	r2, r3, #31
 800cad2:	d403      	bmi.n	800cadc <__lo0bits+0x50>
 800cad4:	085b      	lsrs	r3, r3, #1
 800cad6:	f100 0001 	add.w	r0, r0, #1
 800cada:	d005      	beq.n	800cae8 <__lo0bits+0x5c>
 800cadc:	600b      	str	r3, [r1, #0]
 800cade:	4770      	bx	lr
 800cae0:	4610      	mov	r0, r2
 800cae2:	e7e8      	b.n	800cab6 <__lo0bits+0x2a>
 800cae4:	2000      	movs	r0, #0
 800cae6:	4770      	bx	lr
 800cae8:	2020      	movs	r0, #32
 800caea:	4770      	bx	lr

0800caec <__i2b>:
 800caec:	b510      	push	{r4, lr}
 800caee:	460c      	mov	r4, r1
 800caf0:	2101      	movs	r1, #1
 800caf2:	f7ff feff 	bl	800c8f4 <_Balloc>
 800caf6:	4602      	mov	r2, r0
 800caf8:	b928      	cbnz	r0, 800cb06 <__i2b+0x1a>
 800cafa:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <__i2b+0x24>)
 800cafc:	4805      	ldr	r0, [pc, #20]	; (800cb14 <__i2b+0x28>)
 800cafe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb02:	f000 fdaf 	bl	800d664 <__assert_func>
 800cb06:	2301      	movs	r3, #1
 800cb08:	6144      	str	r4, [r0, #20]
 800cb0a:	6103      	str	r3, [r0, #16]
 800cb0c:	bd10      	pop	{r4, pc}
 800cb0e:	bf00      	nop
 800cb10:	0800dbc3 	.word	0x0800dbc3
 800cb14:	0800dc34 	.word	0x0800dc34

0800cb18 <__multiply>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	690a      	ldr	r2, [r1, #16]
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	bfb8      	it	lt
 800cb26:	460b      	movlt	r3, r1
 800cb28:	460d      	mov	r5, r1
 800cb2a:	bfbc      	itt	lt
 800cb2c:	4625      	movlt	r5, r4
 800cb2e:	461c      	movlt	r4, r3
 800cb30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cb34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cb38:	68ab      	ldr	r3, [r5, #8]
 800cb3a:	6869      	ldr	r1, [r5, #4]
 800cb3c:	eb0a 0709 	add.w	r7, sl, r9
 800cb40:	42bb      	cmp	r3, r7
 800cb42:	b085      	sub	sp, #20
 800cb44:	bfb8      	it	lt
 800cb46:	3101      	addlt	r1, #1
 800cb48:	f7ff fed4 	bl	800c8f4 <_Balloc>
 800cb4c:	b930      	cbnz	r0, 800cb5c <__multiply+0x44>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	4b42      	ldr	r3, [pc, #264]	; (800cc5c <__multiply+0x144>)
 800cb52:	4843      	ldr	r0, [pc, #268]	; (800cc60 <__multiply+0x148>)
 800cb54:	f240 115d 	movw	r1, #349	; 0x15d
 800cb58:	f000 fd84 	bl	800d664 <__assert_func>
 800cb5c:	f100 0614 	add.w	r6, r0, #20
 800cb60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cb64:	4633      	mov	r3, r6
 800cb66:	2200      	movs	r2, #0
 800cb68:	4543      	cmp	r3, r8
 800cb6a:	d31e      	bcc.n	800cbaa <__multiply+0x92>
 800cb6c:	f105 0c14 	add.w	ip, r5, #20
 800cb70:	f104 0314 	add.w	r3, r4, #20
 800cb74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cb78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cb7c:	9202      	str	r2, [sp, #8]
 800cb7e:	ebac 0205 	sub.w	r2, ip, r5
 800cb82:	3a15      	subs	r2, #21
 800cb84:	f022 0203 	bic.w	r2, r2, #3
 800cb88:	3204      	adds	r2, #4
 800cb8a:	f105 0115 	add.w	r1, r5, #21
 800cb8e:	458c      	cmp	ip, r1
 800cb90:	bf38      	it	cc
 800cb92:	2204      	movcc	r2, #4
 800cb94:	9201      	str	r2, [sp, #4]
 800cb96:	9a02      	ldr	r2, [sp, #8]
 800cb98:	9303      	str	r3, [sp, #12]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d808      	bhi.n	800cbb0 <__multiply+0x98>
 800cb9e:	2f00      	cmp	r7, #0
 800cba0:	dc55      	bgt.n	800cc4e <__multiply+0x136>
 800cba2:	6107      	str	r7, [r0, #16]
 800cba4:	b005      	add	sp, #20
 800cba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbaa:	f843 2b04 	str.w	r2, [r3], #4
 800cbae:	e7db      	b.n	800cb68 <__multiply+0x50>
 800cbb0:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbb4:	f1ba 0f00 	cmp.w	sl, #0
 800cbb8:	d020      	beq.n	800cbfc <__multiply+0xe4>
 800cbba:	f105 0e14 	add.w	lr, r5, #20
 800cbbe:	46b1      	mov	r9, r6
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cbc6:	f8d9 b000 	ldr.w	fp, [r9]
 800cbca:	b2a1      	uxth	r1, r4
 800cbcc:	fa1f fb8b 	uxth.w	fp, fp
 800cbd0:	fb0a b101 	mla	r1, sl, r1, fp
 800cbd4:	4411      	add	r1, r2
 800cbd6:	f8d9 2000 	ldr.w	r2, [r9]
 800cbda:	0c24      	lsrs	r4, r4, #16
 800cbdc:	0c12      	lsrs	r2, r2, #16
 800cbde:	fb0a 2404 	mla	r4, sl, r4, r2
 800cbe2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cbe6:	b289      	uxth	r1, r1
 800cbe8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cbec:	45f4      	cmp	ip, lr
 800cbee:	f849 1b04 	str.w	r1, [r9], #4
 800cbf2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cbf6:	d8e4      	bhi.n	800cbc2 <__multiply+0xaa>
 800cbf8:	9901      	ldr	r1, [sp, #4]
 800cbfa:	5072      	str	r2, [r6, r1]
 800cbfc:	9a03      	ldr	r2, [sp, #12]
 800cbfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc02:	3304      	adds	r3, #4
 800cc04:	f1b9 0f00 	cmp.w	r9, #0
 800cc08:	d01f      	beq.n	800cc4a <__multiply+0x132>
 800cc0a:	6834      	ldr	r4, [r6, #0]
 800cc0c:	f105 0114 	add.w	r1, r5, #20
 800cc10:	46b6      	mov	lr, r6
 800cc12:	f04f 0a00 	mov.w	sl, #0
 800cc16:	880a      	ldrh	r2, [r1, #0]
 800cc18:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cc1c:	fb09 b202 	mla	r2, r9, r2, fp
 800cc20:	4492      	add	sl, r2
 800cc22:	b2a4      	uxth	r4, r4
 800cc24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cc28:	f84e 4b04 	str.w	r4, [lr], #4
 800cc2c:	f851 4b04 	ldr.w	r4, [r1], #4
 800cc30:	f8be 2000 	ldrh.w	r2, [lr]
 800cc34:	0c24      	lsrs	r4, r4, #16
 800cc36:	fb09 2404 	mla	r4, r9, r4, r2
 800cc3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800cc3e:	458c      	cmp	ip, r1
 800cc40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cc44:	d8e7      	bhi.n	800cc16 <__multiply+0xfe>
 800cc46:	9a01      	ldr	r2, [sp, #4]
 800cc48:	50b4      	str	r4, [r6, r2]
 800cc4a:	3604      	adds	r6, #4
 800cc4c:	e7a3      	b.n	800cb96 <__multiply+0x7e>
 800cc4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1a5      	bne.n	800cba2 <__multiply+0x8a>
 800cc56:	3f01      	subs	r7, #1
 800cc58:	e7a1      	b.n	800cb9e <__multiply+0x86>
 800cc5a:	bf00      	nop
 800cc5c:	0800dbc3 	.word	0x0800dbc3
 800cc60:	0800dc34 	.word	0x0800dc34

0800cc64 <__pow5mult>:
 800cc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc68:	4615      	mov	r5, r2
 800cc6a:	f012 0203 	ands.w	r2, r2, #3
 800cc6e:	4606      	mov	r6, r0
 800cc70:	460f      	mov	r7, r1
 800cc72:	d007      	beq.n	800cc84 <__pow5mult+0x20>
 800cc74:	4c25      	ldr	r4, [pc, #148]	; (800cd0c <__pow5mult+0xa8>)
 800cc76:	3a01      	subs	r2, #1
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc7e:	f7ff fe9b 	bl	800c9b8 <__multadd>
 800cc82:	4607      	mov	r7, r0
 800cc84:	10ad      	asrs	r5, r5, #2
 800cc86:	d03d      	beq.n	800cd04 <__pow5mult+0xa0>
 800cc88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc8a:	b97c      	cbnz	r4, 800ccac <__pow5mult+0x48>
 800cc8c:	2010      	movs	r0, #16
 800cc8e:	f7ff fe1b 	bl	800c8c8 <malloc>
 800cc92:	4602      	mov	r2, r0
 800cc94:	6270      	str	r0, [r6, #36]	; 0x24
 800cc96:	b928      	cbnz	r0, 800cca4 <__pow5mult+0x40>
 800cc98:	4b1d      	ldr	r3, [pc, #116]	; (800cd10 <__pow5mult+0xac>)
 800cc9a:	481e      	ldr	r0, [pc, #120]	; (800cd14 <__pow5mult+0xb0>)
 800cc9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cca0:	f000 fce0 	bl	800d664 <__assert_func>
 800cca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cca8:	6004      	str	r4, [r0, #0]
 800ccaa:	60c4      	str	r4, [r0, #12]
 800ccac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ccb4:	b94c      	cbnz	r4, 800ccca <__pow5mult+0x66>
 800ccb6:	f240 2171 	movw	r1, #625	; 0x271
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ff16 	bl	800caec <__i2b>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	6003      	str	r3, [r0, #0]
 800ccca:	f04f 0900 	mov.w	r9, #0
 800ccce:	07eb      	lsls	r3, r5, #31
 800ccd0:	d50a      	bpl.n	800cce8 <__pow5mult+0x84>
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	4622      	mov	r2, r4
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7ff ff1e 	bl	800cb18 <__multiply>
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4680      	mov	r8, r0
 800cce0:	4630      	mov	r0, r6
 800cce2:	f7ff fe47 	bl	800c974 <_Bfree>
 800cce6:	4647      	mov	r7, r8
 800cce8:	106d      	asrs	r5, r5, #1
 800ccea:	d00b      	beq.n	800cd04 <__pow5mult+0xa0>
 800ccec:	6820      	ldr	r0, [r4, #0]
 800ccee:	b938      	cbnz	r0, 800cd00 <__pow5mult+0x9c>
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff ff0f 	bl	800cb18 <__multiply>
 800ccfa:	6020      	str	r0, [r4, #0]
 800ccfc:	f8c0 9000 	str.w	r9, [r0]
 800cd00:	4604      	mov	r4, r0
 800cd02:	e7e4      	b.n	800ccce <__pow5mult+0x6a>
 800cd04:	4638      	mov	r0, r7
 800cd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd0a:	bf00      	nop
 800cd0c:	0800dd88 	.word	0x0800dd88
 800cd10:	0800db4d 	.word	0x0800db4d
 800cd14:	0800dc34 	.word	0x0800dc34

0800cd18 <__lshift>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	6849      	ldr	r1, [r1, #4]
 800cd20:	6923      	ldr	r3, [r4, #16]
 800cd22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd26:	68a3      	ldr	r3, [r4, #8]
 800cd28:	4607      	mov	r7, r0
 800cd2a:	4691      	mov	r9, r2
 800cd2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd30:	f108 0601 	add.w	r6, r8, #1
 800cd34:	42b3      	cmp	r3, r6
 800cd36:	db0b      	blt.n	800cd50 <__lshift+0x38>
 800cd38:	4638      	mov	r0, r7
 800cd3a:	f7ff fddb 	bl	800c8f4 <_Balloc>
 800cd3e:	4605      	mov	r5, r0
 800cd40:	b948      	cbnz	r0, 800cd56 <__lshift+0x3e>
 800cd42:	4602      	mov	r2, r0
 800cd44:	4b28      	ldr	r3, [pc, #160]	; (800cde8 <__lshift+0xd0>)
 800cd46:	4829      	ldr	r0, [pc, #164]	; (800cdec <__lshift+0xd4>)
 800cd48:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd4c:	f000 fc8a 	bl	800d664 <__assert_func>
 800cd50:	3101      	adds	r1, #1
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	e7ee      	b.n	800cd34 <__lshift+0x1c>
 800cd56:	2300      	movs	r3, #0
 800cd58:	f100 0114 	add.w	r1, r0, #20
 800cd5c:	f100 0210 	add.w	r2, r0, #16
 800cd60:	4618      	mov	r0, r3
 800cd62:	4553      	cmp	r3, sl
 800cd64:	db33      	blt.n	800cdce <__lshift+0xb6>
 800cd66:	6920      	ldr	r0, [r4, #16]
 800cd68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd6c:	f104 0314 	add.w	r3, r4, #20
 800cd70:	f019 091f 	ands.w	r9, r9, #31
 800cd74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd7c:	d02b      	beq.n	800cdd6 <__lshift+0xbe>
 800cd7e:	f1c9 0e20 	rsb	lr, r9, #32
 800cd82:	468a      	mov	sl, r1
 800cd84:	2200      	movs	r2, #0
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	fa00 f009 	lsl.w	r0, r0, r9
 800cd8c:	4302      	orrs	r2, r0
 800cd8e:	f84a 2b04 	str.w	r2, [sl], #4
 800cd92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd96:	459c      	cmp	ip, r3
 800cd98:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd9c:	d8f3      	bhi.n	800cd86 <__lshift+0x6e>
 800cd9e:	ebac 0304 	sub.w	r3, ip, r4
 800cda2:	3b15      	subs	r3, #21
 800cda4:	f023 0303 	bic.w	r3, r3, #3
 800cda8:	3304      	adds	r3, #4
 800cdaa:	f104 0015 	add.w	r0, r4, #21
 800cdae:	4584      	cmp	ip, r0
 800cdb0:	bf38      	it	cc
 800cdb2:	2304      	movcc	r3, #4
 800cdb4:	50ca      	str	r2, [r1, r3]
 800cdb6:	b10a      	cbz	r2, 800cdbc <__lshift+0xa4>
 800cdb8:	f108 0602 	add.w	r6, r8, #2
 800cdbc:	3e01      	subs	r6, #1
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	612e      	str	r6, [r5, #16]
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	f7ff fdd6 	bl	800c974 <_Bfree>
 800cdc8:	4628      	mov	r0, r5
 800cdca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdce:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	e7c5      	b.n	800cd62 <__lshift+0x4a>
 800cdd6:	3904      	subs	r1, #4
 800cdd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cddc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cde0:	459c      	cmp	ip, r3
 800cde2:	d8f9      	bhi.n	800cdd8 <__lshift+0xc0>
 800cde4:	e7ea      	b.n	800cdbc <__lshift+0xa4>
 800cde6:	bf00      	nop
 800cde8:	0800dbc3 	.word	0x0800dbc3
 800cdec:	0800dc34 	.word	0x0800dc34

0800cdf0 <__mcmp>:
 800cdf0:	b530      	push	{r4, r5, lr}
 800cdf2:	6902      	ldr	r2, [r0, #16]
 800cdf4:	690c      	ldr	r4, [r1, #16]
 800cdf6:	1b12      	subs	r2, r2, r4
 800cdf8:	d10e      	bne.n	800ce18 <__mcmp+0x28>
 800cdfa:	f100 0314 	add.w	r3, r0, #20
 800cdfe:	3114      	adds	r1, #20
 800ce00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce10:	42a5      	cmp	r5, r4
 800ce12:	d003      	beq.n	800ce1c <__mcmp+0x2c>
 800ce14:	d305      	bcc.n	800ce22 <__mcmp+0x32>
 800ce16:	2201      	movs	r2, #1
 800ce18:	4610      	mov	r0, r2
 800ce1a:	bd30      	pop	{r4, r5, pc}
 800ce1c:	4283      	cmp	r3, r0
 800ce1e:	d3f3      	bcc.n	800ce08 <__mcmp+0x18>
 800ce20:	e7fa      	b.n	800ce18 <__mcmp+0x28>
 800ce22:	f04f 32ff 	mov.w	r2, #4294967295
 800ce26:	e7f7      	b.n	800ce18 <__mcmp+0x28>

0800ce28 <__mdiff>:
 800ce28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	4606      	mov	r6, r0
 800ce30:	4611      	mov	r1, r2
 800ce32:	4620      	mov	r0, r4
 800ce34:	4617      	mov	r7, r2
 800ce36:	f7ff ffdb 	bl	800cdf0 <__mcmp>
 800ce3a:	1e05      	subs	r5, r0, #0
 800ce3c:	d110      	bne.n	800ce60 <__mdiff+0x38>
 800ce3e:	4629      	mov	r1, r5
 800ce40:	4630      	mov	r0, r6
 800ce42:	f7ff fd57 	bl	800c8f4 <_Balloc>
 800ce46:	b930      	cbnz	r0, 800ce56 <__mdiff+0x2e>
 800ce48:	4b39      	ldr	r3, [pc, #228]	; (800cf30 <__mdiff+0x108>)
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	f240 2132 	movw	r1, #562	; 0x232
 800ce50:	4838      	ldr	r0, [pc, #224]	; (800cf34 <__mdiff+0x10c>)
 800ce52:	f000 fc07 	bl	800d664 <__assert_func>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce60:	bfa4      	itt	ge
 800ce62:	463b      	movge	r3, r7
 800ce64:	4627      	movge	r7, r4
 800ce66:	4630      	mov	r0, r6
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	bfa6      	itte	ge
 800ce6c:	461c      	movge	r4, r3
 800ce6e:	2500      	movge	r5, #0
 800ce70:	2501      	movlt	r5, #1
 800ce72:	f7ff fd3f 	bl	800c8f4 <_Balloc>
 800ce76:	b920      	cbnz	r0, 800ce82 <__mdiff+0x5a>
 800ce78:	4b2d      	ldr	r3, [pc, #180]	; (800cf30 <__mdiff+0x108>)
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce80:	e7e6      	b.n	800ce50 <__mdiff+0x28>
 800ce82:	693e      	ldr	r6, [r7, #16]
 800ce84:	60c5      	str	r5, [r0, #12]
 800ce86:	6925      	ldr	r5, [r4, #16]
 800ce88:	f107 0114 	add.w	r1, r7, #20
 800ce8c:	f104 0914 	add.w	r9, r4, #20
 800ce90:	f100 0e14 	add.w	lr, r0, #20
 800ce94:	f107 0210 	add.w	r2, r7, #16
 800ce98:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ce9c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cea0:	46f2      	mov	sl, lr
 800cea2:	2700      	movs	r7, #0
 800cea4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ceac:	fa1f f883 	uxth.w	r8, r3
 800ceb0:	fa17 f78b 	uxtah	r7, r7, fp
 800ceb4:	0c1b      	lsrs	r3, r3, #16
 800ceb6:	eba7 0808 	sub.w	r8, r7, r8
 800ceba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cebe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cec2:	fa1f f888 	uxth.w	r8, r8
 800cec6:	141f      	asrs	r7, r3, #16
 800cec8:	454d      	cmp	r5, r9
 800ceca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cece:	f84a 3b04 	str.w	r3, [sl], #4
 800ced2:	d8e7      	bhi.n	800cea4 <__mdiff+0x7c>
 800ced4:	1b2b      	subs	r3, r5, r4
 800ced6:	3b15      	subs	r3, #21
 800ced8:	f023 0303 	bic.w	r3, r3, #3
 800cedc:	3304      	adds	r3, #4
 800cede:	3415      	adds	r4, #21
 800cee0:	42a5      	cmp	r5, r4
 800cee2:	bf38      	it	cc
 800cee4:	2304      	movcc	r3, #4
 800cee6:	4419      	add	r1, r3
 800cee8:	4473      	add	r3, lr
 800ceea:	469e      	mov	lr, r3
 800ceec:	460d      	mov	r5, r1
 800ceee:	4565      	cmp	r5, ip
 800cef0:	d30e      	bcc.n	800cf10 <__mdiff+0xe8>
 800cef2:	f10c 0203 	add.w	r2, ip, #3
 800cef6:	1a52      	subs	r2, r2, r1
 800cef8:	f022 0203 	bic.w	r2, r2, #3
 800cefc:	3903      	subs	r1, #3
 800cefe:	458c      	cmp	ip, r1
 800cf00:	bf38      	it	cc
 800cf02:	2200      	movcc	r2, #0
 800cf04:	441a      	add	r2, r3
 800cf06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf0a:	b17b      	cbz	r3, 800cf2c <__mdiff+0x104>
 800cf0c:	6106      	str	r6, [r0, #16]
 800cf0e:	e7a5      	b.n	800ce5c <__mdiff+0x34>
 800cf10:	f855 8b04 	ldr.w	r8, [r5], #4
 800cf14:	fa17 f488 	uxtah	r4, r7, r8
 800cf18:	1422      	asrs	r2, r4, #16
 800cf1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cf1e:	b2a4      	uxth	r4, r4
 800cf20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cf24:	f84e 4b04 	str.w	r4, [lr], #4
 800cf28:	1417      	asrs	r7, r2, #16
 800cf2a:	e7e0      	b.n	800ceee <__mdiff+0xc6>
 800cf2c:	3e01      	subs	r6, #1
 800cf2e:	e7ea      	b.n	800cf06 <__mdiff+0xde>
 800cf30:	0800dbc3 	.word	0x0800dbc3
 800cf34:	0800dc34 	.word	0x0800dc34

0800cf38 <__d2b>:
 800cf38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	4689      	mov	r9, r1
 800cf3e:	2101      	movs	r1, #1
 800cf40:	ec57 6b10 	vmov	r6, r7, d0
 800cf44:	4690      	mov	r8, r2
 800cf46:	f7ff fcd5 	bl	800c8f4 <_Balloc>
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	b930      	cbnz	r0, 800cf5c <__d2b+0x24>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	4b25      	ldr	r3, [pc, #148]	; (800cfe8 <__d2b+0xb0>)
 800cf52:	4826      	ldr	r0, [pc, #152]	; (800cfec <__d2b+0xb4>)
 800cf54:	f240 310a 	movw	r1, #778	; 0x30a
 800cf58:	f000 fb84 	bl	800d664 <__assert_func>
 800cf5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cf60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf64:	bb35      	cbnz	r5, 800cfb4 <__d2b+0x7c>
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	d028      	beq.n	800cfbe <__d2b+0x86>
 800cf6c:	4668      	mov	r0, sp
 800cf6e:	9600      	str	r6, [sp, #0]
 800cf70:	f7ff fd8c 	bl	800ca8c <__lo0bits>
 800cf74:	9900      	ldr	r1, [sp, #0]
 800cf76:	b300      	cbz	r0, 800cfba <__d2b+0x82>
 800cf78:	9a01      	ldr	r2, [sp, #4]
 800cf7a:	f1c0 0320 	rsb	r3, r0, #32
 800cf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf82:	430b      	orrs	r3, r1
 800cf84:	40c2      	lsrs	r2, r0
 800cf86:	6163      	str	r3, [r4, #20]
 800cf88:	9201      	str	r2, [sp, #4]
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	61a3      	str	r3, [r4, #24]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	bf14      	ite	ne
 800cf92:	2202      	movne	r2, #2
 800cf94:	2201      	moveq	r2, #1
 800cf96:	6122      	str	r2, [r4, #16]
 800cf98:	b1d5      	cbz	r5, 800cfd0 <__d2b+0x98>
 800cf9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf9e:	4405      	add	r5, r0
 800cfa0:	f8c9 5000 	str.w	r5, [r9]
 800cfa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfa8:	f8c8 0000 	str.w	r0, [r8]
 800cfac:	4620      	mov	r0, r4
 800cfae:	b003      	add	sp, #12
 800cfb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfb8:	e7d5      	b.n	800cf66 <__d2b+0x2e>
 800cfba:	6161      	str	r1, [r4, #20]
 800cfbc:	e7e5      	b.n	800cf8a <__d2b+0x52>
 800cfbe:	a801      	add	r0, sp, #4
 800cfc0:	f7ff fd64 	bl	800ca8c <__lo0bits>
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	6163      	str	r3, [r4, #20]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	6122      	str	r2, [r4, #16]
 800cfcc:	3020      	adds	r0, #32
 800cfce:	e7e3      	b.n	800cf98 <__d2b+0x60>
 800cfd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cfd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cfd8:	f8c9 0000 	str.w	r0, [r9]
 800cfdc:	6918      	ldr	r0, [r3, #16]
 800cfde:	f7ff fd35 	bl	800ca4c <__hi0bits>
 800cfe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cfe6:	e7df      	b.n	800cfa8 <__d2b+0x70>
 800cfe8:	0800dbc3 	.word	0x0800dbc3
 800cfec:	0800dc34 	.word	0x0800dc34

0800cff0 <_calloc_r>:
 800cff0:	b513      	push	{r0, r1, r4, lr}
 800cff2:	434a      	muls	r2, r1
 800cff4:	4611      	mov	r1, r2
 800cff6:	9201      	str	r2, [sp, #4]
 800cff8:	f000 f85a 	bl	800d0b0 <_malloc_r>
 800cffc:	4604      	mov	r4, r0
 800cffe:	b118      	cbz	r0, 800d008 <_calloc_r+0x18>
 800d000:	9a01      	ldr	r2, [sp, #4]
 800d002:	2100      	movs	r1, #0
 800d004:	f7fe f8ee 	bl	800b1e4 <memset>
 800d008:	4620      	mov	r0, r4
 800d00a:	b002      	add	sp, #8
 800d00c:	bd10      	pop	{r4, pc}
	...

0800d010 <_free_r>:
 800d010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d012:	2900      	cmp	r1, #0
 800d014:	d048      	beq.n	800d0a8 <_free_r+0x98>
 800d016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d01a:	9001      	str	r0, [sp, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f1a1 0404 	sub.w	r4, r1, #4
 800d022:	bfb8      	it	lt
 800d024:	18e4      	addlt	r4, r4, r3
 800d026:	f000 fca7 	bl	800d978 <__malloc_lock>
 800d02a:	4a20      	ldr	r2, [pc, #128]	; (800d0ac <_free_r+0x9c>)
 800d02c:	9801      	ldr	r0, [sp, #4]
 800d02e:	6813      	ldr	r3, [r2, #0]
 800d030:	4615      	mov	r5, r2
 800d032:	b933      	cbnz	r3, 800d042 <_free_r+0x32>
 800d034:	6063      	str	r3, [r4, #4]
 800d036:	6014      	str	r4, [r2, #0]
 800d038:	b003      	add	sp, #12
 800d03a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d03e:	f000 bca1 	b.w	800d984 <__malloc_unlock>
 800d042:	42a3      	cmp	r3, r4
 800d044:	d90b      	bls.n	800d05e <_free_r+0x4e>
 800d046:	6821      	ldr	r1, [r4, #0]
 800d048:	1862      	adds	r2, r4, r1
 800d04a:	4293      	cmp	r3, r2
 800d04c:	bf04      	itt	eq
 800d04e:	681a      	ldreq	r2, [r3, #0]
 800d050:	685b      	ldreq	r3, [r3, #4]
 800d052:	6063      	str	r3, [r4, #4]
 800d054:	bf04      	itt	eq
 800d056:	1852      	addeq	r2, r2, r1
 800d058:	6022      	streq	r2, [r4, #0]
 800d05a:	602c      	str	r4, [r5, #0]
 800d05c:	e7ec      	b.n	800d038 <_free_r+0x28>
 800d05e:	461a      	mov	r2, r3
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	b10b      	cbz	r3, 800d068 <_free_r+0x58>
 800d064:	42a3      	cmp	r3, r4
 800d066:	d9fa      	bls.n	800d05e <_free_r+0x4e>
 800d068:	6811      	ldr	r1, [r2, #0]
 800d06a:	1855      	adds	r5, r2, r1
 800d06c:	42a5      	cmp	r5, r4
 800d06e:	d10b      	bne.n	800d088 <_free_r+0x78>
 800d070:	6824      	ldr	r4, [r4, #0]
 800d072:	4421      	add	r1, r4
 800d074:	1854      	adds	r4, r2, r1
 800d076:	42a3      	cmp	r3, r4
 800d078:	6011      	str	r1, [r2, #0]
 800d07a:	d1dd      	bne.n	800d038 <_free_r+0x28>
 800d07c:	681c      	ldr	r4, [r3, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	6053      	str	r3, [r2, #4]
 800d082:	4421      	add	r1, r4
 800d084:	6011      	str	r1, [r2, #0]
 800d086:	e7d7      	b.n	800d038 <_free_r+0x28>
 800d088:	d902      	bls.n	800d090 <_free_r+0x80>
 800d08a:	230c      	movs	r3, #12
 800d08c:	6003      	str	r3, [r0, #0]
 800d08e:	e7d3      	b.n	800d038 <_free_r+0x28>
 800d090:	6825      	ldr	r5, [r4, #0]
 800d092:	1961      	adds	r1, r4, r5
 800d094:	428b      	cmp	r3, r1
 800d096:	bf04      	itt	eq
 800d098:	6819      	ldreq	r1, [r3, #0]
 800d09a:	685b      	ldreq	r3, [r3, #4]
 800d09c:	6063      	str	r3, [r4, #4]
 800d09e:	bf04      	itt	eq
 800d0a0:	1949      	addeq	r1, r1, r5
 800d0a2:	6021      	streq	r1, [r4, #0]
 800d0a4:	6054      	str	r4, [r2, #4]
 800d0a6:	e7c7      	b.n	800d038 <_free_r+0x28>
 800d0a8:	b003      	add	sp, #12
 800d0aa:	bd30      	pop	{r4, r5, pc}
 800d0ac:	20000208 	.word	0x20000208

0800d0b0 <_malloc_r>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	1ccd      	adds	r5, r1, #3
 800d0b4:	f025 0503 	bic.w	r5, r5, #3
 800d0b8:	3508      	adds	r5, #8
 800d0ba:	2d0c      	cmp	r5, #12
 800d0bc:	bf38      	it	cc
 800d0be:	250c      	movcc	r5, #12
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	db01      	blt.n	800d0ca <_malloc_r+0x1a>
 800d0c6:	42a9      	cmp	r1, r5
 800d0c8:	d903      	bls.n	800d0d2 <_malloc_r+0x22>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	6033      	str	r3, [r6, #0]
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d2:	f000 fc51 	bl	800d978 <__malloc_lock>
 800d0d6:	4921      	ldr	r1, [pc, #132]	; (800d15c <_malloc_r+0xac>)
 800d0d8:	680a      	ldr	r2, [r1, #0]
 800d0da:	4614      	mov	r4, r2
 800d0dc:	b99c      	cbnz	r4, 800d106 <_malloc_r+0x56>
 800d0de:	4f20      	ldr	r7, [pc, #128]	; (800d160 <_malloc_r+0xb0>)
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	b923      	cbnz	r3, 800d0ee <_malloc_r+0x3e>
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f000 f996 	bl	800d418 <_sbrk_r>
 800d0ec:	6038      	str	r0, [r7, #0]
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f000 f991 	bl	800d418 <_sbrk_r>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	d123      	bne.n	800d142 <_malloc_r+0x92>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	6033      	str	r3, [r6, #0]
 800d0fe:	4630      	mov	r0, r6
 800d100:	f000 fc40 	bl	800d984 <__malloc_unlock>
 800d104:	e7e3      	b.n	800d0ce <_malloc_r+0x1e>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	1b5b      	subs	r3, r3, r5
 800d10a:	d417      	bmi.n	800d13c <_malloc_r+0x8c>
 800d10c:	2b0b      	cmp	r3, #11
 800d10e:	d903      	bls.n	800d118 <_malloc_r+0x68>
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	441c      	add	r4, r3
 800d114:	6025      	str	r5, [r4, #0]
 800d116:	e004      	b.n	800d122 <_malloc_r+0x72>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	42a2      	cmp	r2, r4
 800d11c:	bf0c      	ite	eq
 800d11e:	600b      	streq	r3, [r1, #0]
 800d120:	6053      	strne	r3, [r2, #4]
 800d122:	4630      	mov	r0, r6
 800d124:	f000 fc2e 	bl	800d984 <__malloc_unlock>
 800d128:	f104 000b 	add.w	r0, r4, #11
 800d12c:	1d23      	adds	r3, r4, #4
 800d12e:	f020 0007 	bic.w	r0, r0, #7
 800d132:	1ac2      	subs	r2, r0, r3
 800d134:	d0cc      	beq.n	800d0d0 <_malloc_r+0x20>
 800d136:	1a1b      	subs	r3, r3, r0
 800d138:	50a3      	str	r3, [r4, r2]
 800d13a:	e7c9      	b.n	800d0d0 <_malloc_r+0x20>
 800d13c:	4622      	mov	r2, r4
 800d13e:	6864      	ldr	r4, [r4, #4]
 800d140:	e7cc      	b.n	800d0dc <_malloc_r+0x2c>
 800d142:	1cc4      	adds	r4, r0, #3
 800d144:	f024 0403 	bic.w	r4, r4, #3
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d0e3      	beq.n	800d114 <_malloc_r+0x64>
 800d14c:	1a21      	subs	r1, r4, r0
 800d14e:	4630      	mov	r0, r6
 800d150:	f000 f962 	bl	800d418 <_sbrk_r>
 800d154:	3001      	adds	r0, #1
 800d156:	d1dd      	bne.n	800d114 <_malloc_r+0x64>
 800d158:	e7cf      	b.n	800d0fa <_malloc_r+0x4a>
 800d15a:	bf00      	nop
 800d15c:	20000208 	.word	0x20000208
 800d160:	2000020c 	.word	0x2000020c

0800d164 <__sfputc_r>:
 800d164:	6893      	ldr	r3, [r2, #8]
 800d166:	3b01      	subs	r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	b410      	push	{r4}
 800d16c:	6093      	str	r3, [r2, #8]
 800d16e:	da08      	bge.n	800d182 <__sfputc_r+0x1e>
 800d170:	6994      	ldr	r4, [r2, #24]
 800d172:	42a3      	cmp	r3, r4
 800d174:	db01      	blt.n	800d17a <__sfputc_r+0x16>
 800d176:	290a      	cmp	r1, #10
 800d178:	d103      	bne.n	800d182 <__sfputc_r+0x1e>
 800d17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d17e:	f000 b99f 	b.w	800d4c0 <__swbuf_r>
 800d182:	6813      	ldr	r3, [r2, #0]
 800d184:	1c58      	adds	r0, r3, #1
 800d186:	6010      	str	r0, [r2, #0]
 800d188:	7019      	strb	r1, [r3, #0]
 800d18a:	4608      	mov	r0, r1
 800d18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <__sfputs_r>:
 800d192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d194:	4606      	mov	r6, r0
 800d196:	460f      	mov	r7, r1
 800d198:	4614      	mov	r4, r2
 800d19a:	18d5      	adds	r5, r2, r3
 800d19c:	42ac      	cmp	r4, r5
 800d19e:	d101      	bne.n	800d1a4 <__sfputs_r+0x12>
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e007      	b.n	800d1b4 <__sfputs_r+0x22>
 800d1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a8:	463a      	mov	r2, r7
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f7ff ffda 	bl	800d164 <__sfputc_r>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d1f3      	bne.n	800d19c <__sfputs_r+0xa>
 800d1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1b8 <_vfiprintf_r>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	460d      	mov	r5, r1
 800d1be:	b09d      	sub	sp, #116	; 0x74
 800d1c0:	4614      	mov	r4, r2
 800d1c2:	4698      	mov	r8, r3
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	b118      	cbz	r0, 800d1d0 <_vfiprintf_r+0x18>
 800d1c8:	6983      	ldr	r3, [r0, #24]
 800d1ca:	b90b      	cbnz	r3, 800d1d0 <_vfiprintf_r+0x18>
 800d1cc:	f7ff fad6 	bl	800c77c <__sinit>
 800d1d0:	4b89      	ldr	r3, [pc, #548]	; (800d3f8 <_vfiprintf_r+0x240>)
 800d1d2:	429d      	cmp	r5, r3
 800d1d4:	d11b      	bne.n	800d20e <_vfiprintf_r+0x56>
 800d1d6:	6875      	ldr	r5, [r6, #4]
 800d1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1da:	07d9      	lsls	r1, r3, #31
 800d1dc:	d405      	bmi.n	800d1ea <_vfiprintf_r+0x32>
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	059a      	lsls	r2, r3, #22
 800d1e2:	d402      	bmi.n	800d1ea <_vfiprintf_r+0x32>
 800d1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e6:	f7ff fb6c 	bl	800c8c2 <__retarget_lock_acquire_recursive>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	071b      	lsls	r3, r3, #28
 800d1ee:	d501      	bpl.n	800d1f4 <_vfiprintf_r+0x3c>
 800d1f0:	692b      	ldr	r3, [r5, #16]
 800d1f2:	b9eb      	cbnz	r3, 800d230 <_vfiprintf_r+0x78>
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f000 f9c6 	bl	800d588 <__swsetup_r>
 800d1fc:	b1c0      	cbz	r0, 800d230 <_vfiprintf_r+0x78>
 800d1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d200:	07dc      	lsls	r4, r3, #31
 800d202:	d50e      	bpl.n	800d222 <_vfiprintf_r+0x6a>
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	b01d      	add	sp, #116	; 0x74
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	4b7b      	ldr	r3, [pc, #492]	; (800d3fc <_vfiprintf_r+0x244>)
 800d210:	429d      	cmp	r5, r3
 800d212:	d101      	bne.n	800d218 <_vfiprintf_r+0x60>
 800d214:	68b5      	ldr	r5, [r6, #8]
 800d216:	e7df      	b.n	800d1d8 <_vfiprintf_r+0x20>
 800d218:	4b79      	ldr	r3, [pc, #484]	; (800d400 <_vfiprintf_r+0x248>)
 800d21a:	429d      	cmp	r5, r3
 800d21c:	bf08      	it	eq
 800d21e:	68f5      	ldreq	r5, [r6, #12]
 800d220:	e7da      	b.n	800d1d8 <_vfiprintf_r+0x20>
 800d222:	89ab      	ldrh	r3, [r5, #12]
 800d224:	0598      	lsls	r0, r3, #22
 800d226:	d4ed      	bmi.n	800d204 <_vfiprintf_r+0x4c>
 800d228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d22a:	f7ff fb4b 	bl	800c8c4 <__retarget_lock_release_recursive>
 800d22e:	e7e9      	b.n	800d204 <_vfiprintf_r+0x4c>
 800d230:	2300      	movs	r3, #0
 800d232:	9309      	str	r3, [sp, #36]	; 0x24
 800d234:	2320      	movs	r3, #32
 800d236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d23a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d23e:	2330      	movs	r3, #48	; 0x30
 800d240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d404 <_vfiprintf_r+0x24c>
 800d244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d248:	f04f 0901 	mov.w	r9, #1
 800d24c:	4623      	mov	r3, r4
 800d24e:	469a      	mov	sl, r3
 800d250:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d254:	b10a      	cbz	r2, 800d25a <_vfiprintf_r+0xa2>
 800d256:	2a25      	cmp	r2, #37	; 0x25
 800d258:	d1f9      	bne.n	800d24e <_vfiprintf_r+0x96>
 800d25a:	ebba 0b04 	subs.w	fp, sl, r4
 800d25e:	d00b      	beq.n	800d278 <_vfiprintf_r+0xc0>
 800d260:	465b      	mov	r3, fp
 800d262:	4622      	mov	r2, r4
 800d264:	4629      	mov	r1, r5
 800d266:	4630      	mov	r0, r6
 800d268:	f7ff ff93 	bl	800d192 <__sfputs_r>
 800d26c:	3001      	adds	r0, #1
 800d26e:	f000 80aa 	beq.w	800d3c6 <_vfiprintf_r+0x20e>
 800d272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d274:	445a      	add	r2, fp
 800d276:	9209      	str	r2, [sp, #36]	; 0x24
 800d278:	f89a 3000 	ldrb.w	r3, [sl]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80a2 	beq.w	800d3c6 <_vfiprintf_r+0x20e>
 800d282:	2300      	movs	r3, #0
 800d284:	f04f 32ff 	mov.w	r2, #4294967295
 800d288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d28c:	f10a 0a01 	add.w	sl, sl, #1
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	9307      	str	r3, [sp, #28]
 800d294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d298:	931a      	str	r3, [sp, #104]	; 0x68
 800d29a:	4654      	mov	r4, sl
 800d29c:	2205      	movs	r2, #5
 800d29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a2:	4858      	ldr	r0, [pc, #352]	; (800d404 <_vfiprintf_r+0x24c>)
 800d2a4:	f7f3 f824 	bl	80002f0 <memchr>
 800d2a8:	9a04      	ldr	r2, [sp, #16]
 800d2aa:	b9d8      	cbnz	r0, 800d2e4 <_vfiprintf_r+0x12c>
 800d2ac:	06d1      	lsls	r1, r2, #27
 800d2ae:	bf44      	itt	mi
 800d2b0:	2320      	movmi	r3, #32
 800d2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2b6:	0713      	lsls	r3, r2, #28
 800d2b8:	bf44      	itt	mi
 800d2ba:	232b      	movmi	r3, #43	; 0x2b
 800d2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c6:	d015      	beq.n	800d2f4 <_vfiprintf_r+0x13c>
 800d2c8:	9a07      	ldr	r2, [sp, #28]
 800d2ca:	4654      	mov	r4, sl
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	f04f 0c0a 	mov.w	ip, #10
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2d8:	3b30      	subs	r3, #48	; 0x30
 800d2da:	2b09      	cmp	r3, #9
 800d2dc:	d94e      	bls.n	800d37c <_vfiprintf_r+0x1c4>
 800d2de:	b1b0      	cbz	r0, 800d30e <_vfiprintf_r+0x156>
 800d2e0:	9207      	str	r2, [sp, #28]
 800d2e2:	e014      	b.n	800d30e <_vfiprintf_r+0x156>
 800d2e4:	eba0 0308 	sub.w	r3, r0, r8
 800d2e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	46a2      	mov	sl, r4
 800d2f2:	e7d2      	b.n	800d29a <_vfiprintf_r+0xe2>
 800d2f4:	9b03      	ldr	r3, [sp, #12]
 800d2f6:	1d19      	adds	r1, r3, #4
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	9103      	str	r1, [sp, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bfbb      	ittet	lt
 800d300:	425b      	neglt	r3, r3
 800d302:	f042 0202 	orrlt.w	r2, r2, #2
 800d306:	9307      	strge	r3, [sp, #28]
 800d308:	9307      	strlt	r3, [sp, #28]
 800d30a:	bfb8      	it	lt
 800d30c:	9204      	strlt	r2, [sp, #16]
 800d30e:	7823      	ldrb	r3, [r4, #0]
 800d310:	2b2e      	cmp	r3, #46	; 0x2e
 800d312:	d10c      	bne.n	800d32e <_vfiprintf_r+0x176>
 800d314:	7863      	ldrb	r3, [r4, #1]
 800d316:	2b2a      	cmp	r3, #42	; 0x2a
 800d318:	d135      	bne.n	800d386 <_vfiprintf_r+0x1ce>
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	1d1a      	adds	r2, r3, #4
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	9203      	str	r2, [sp, #12]
 800d322:	2b00      	cmp	r3, #0
 800d324:	bfb8      	it	lt
 800d326:	f04f 33ff 	movlt.w	r3, #4294967295
 800d32a:	3402      	adds	r4, #2
 800d32c:	9305      	str	r3, [sp, #20]
 800d32e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d414 <_vfiprintf_r+0x25c>
 800d332:	7821      	ldrb	r1, [r4, #0]
 800d334:	2203      	movs	r2, #3
 800d336:	4650      	mov	r0, sl
 800d338:	f7f2 ffda 	bl	80002f0 <memchr>
 800d33c:	b140      	cbz	r0, 800d350 <_vfiprintf_r+0x198>
 800d33e:	2340      	movs	r3, #64	; 0x40
 800d340:	eba0 000a 	sub.w	r0, r0, sl
 800d344:	fa03 f000 	lsl.w	r0, r3, r0
 800d348:	9b04      	ldr	r3, [sp, #16]
 800d34a:	4303      	orrs	r3, r0
 800d34c:	3401      	adds	r4, #1
 800d34e:	9304      	str	r3, [sp, #16]
 800d350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d354:	482c      	ldr	r0, [pc, #176]	; (800d408 <_vfiprintf_r+0x250>)
 800d356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d35a:	2206      	movs	r2, #6
 800d35c:	f7f2 ffc8 	bl	80002f0 <memchr>
 800d360:	2800      	cmp	r0, #0
 800d362:	d03f      	beq.n	800d3e4 <_vfiprintf_r+0x22c>
 800d364:	4b29      	ldr	r3, [pc, #164]	; (800d40c <_vfiprintf_r+0x254>)
 800d366:	bb1b      	cbnz	r3, 800d3b0 <_vfiprintf_r+0x1f8>
 800d368:	9b03      	ldr	r3, [sp, #12]
 800d36a:	3307      	adds	r3, #7
 800d36c:	f023 0307 	bic.w	r3, r3, #7
 800d370:	3308      	adds	r3, #8
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d376:	443b      	add	r3, r7
 800d378:	9309      	str	r3, [sp, #36]	; 0x24
 800d37a:	e767      	b.n	800d24c <_vfiprintf_r+0x94>
 800d37c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d380:	460c      	mov	r4, r1
 800d382:	2001      	movs	r0, #1
 800d384:	e7a5      	b.n	800d2d2 <_vfiprintf_r+0x11a>
 800d386:	2300      	movs	r3, #0
 800d388:	3401      	adds	r4, #1
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	4619      	mov	r1, r3
 800d38e:	f04f 0c0a 	mov.w	ip, #10
 800d392:	4620      	mov	r0, r4
 800d394:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d398:	3a30      	subs	r2, #48	; 0x30
 800d39a:	2a09      	cmp	r2, #9
 800d39c:	d903      	bls.n	800d3a6 <_vfiprintf_r+0x1ee>
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d0c5      	beq.n	800d32e <_vfiprintf_r+0x176>
 800d3a2:	9105      	str	r1, [sp, #20]
 800d3a4:	e7c3      	b.n	800d32e <_vfiprintf_r+0x176>
 800d3a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e7f0      	b.n	800d392 <_vfiprintf_r+0x1da>
 800d3b0:	ab03      	add	r3, sp, #12
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	462a      	mov	r2, r5
 800d3b6:	4b16      	ldr	r3, [pc, #88]	; (800d410 <_vfiprintf_r+0x258>)
 800d3b8:	a904      	add	r1, sp, #16
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f7fd ffac 	bl	800b318 <_printf_float>
 800d3c0:	4607      	mov	r7, r0
 800d3c2:	1c78      	adds	r0, r7, #1
 800d3c4:	d1d6      	bne.n	800d374 <_vfiprintf_r+0x1bc>
 800d3c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3c8:	07d9      	lsls	r1, r3, #31
 800d3ca:	d405      	bmi.n	800d3d8 <_vfiprintf_r+0x220>
 800d3cc:	89ab      	ldrh	r3, [r5, #12]
 800d3ce:	059a      	lsls	r2, r3, #22
 800d3d0:	d402      	bmi.n	800d3d8 <_vfiprintf_r+0x220>
 800d3d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3d4:	f7ff fa76 	bl	800c8c4 <__retarget_lock_release_recursive>
 800d3d8:	89ab      	ldrh	r3, [r5, #12]
 800d3da:	065b      	lsls	r3, r3, #25
 800d3dc:	f53f af12 	bmi.w	800d204 <_vfiprintf_r+0x4c>
 800d3e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3e2:	e711      	b.n	800d208 <_vfiprintf_r+0x50>
 800d3e4:	ab03      	add	r3, sp, #12
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	462a      	mov	r2, r5
 800d3ea:	4b09      	ldr	r3, [pc, #36]	; (800d410 <_vfiprintf_r+0x258>)
 800d3ec:	a904      	add	r1, sp, #16
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7fe fa1e 	bl	800b830 <_printf_i>
 800d3f4:	e7e4      	b.n	800d3c0 <_vfiprintf_r+0x208>
 800d3f6:	bf00      	nop
 800d3f8:	0800dbf4 	.word	0x0800dbf4
 800d3fc:	0800dc14 	.word	0x0800dc14
 800d400:	0800dbd4 	.word	0x0800dbd4
 800d404:	0800dd94 	.word	0x0800dd94
 800d408:	0800dd9e 	.word	0x0800dd9e
 800d40c:	0800b319 	.word	0x0800b319
 800d410:	0800d193 	.word	0x0800d193
 800d414:	0800dd9a 	.word	0x0800dd9a

0800d418 <_sbrk_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d06      	ldr	r5, [pc, #24]	; (800d434 <_sbrk_r+0x1c>)
 800d41c:	2300      	movs	r3, #0
 800d41e:	4604      	mov	r4, r0
 800d420:	4608      	mov	r0, r1
 800d422:	602b      	str	r3, [r5, #0]
 800d424:	f7f4 ff36 	bl	8002294 <_sbrk>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d102      	bne.n	800d432 <_sbrk_r+0x1a>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b103      	cbz	r3, 800d432 <_sbrk_r+0x1a>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	20000824 	.word	0x20000824

0800d438 <__sread>:
 800d438:	b510      	push	{r4, lr}
 800d43a:	460c      	mov	r4, r1
 800d43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d440:	f000 faa6 	bl	800d990 <_read_r>
 800d444:	2800      	cmp	r0, #0
 800d446:	bfab      	itete	ge
 800d448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d44a:	89a3      	ldrhlt	r3, [r4, #12]
 800d44c:	181b      	addge	r3, r3, r0
 800d44e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d452:	bfac      	ite	ge
 800d454:	6563      	strge	r3, [r4, #84]	; 0x54
 800d456:	81a3      	strhlt	r3, [r4, #12]
 800d458:	bd10      	pop	{r4, pc}

0800d45a <__swrite>:
 800d45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45e:	461f      	mov	r7, r3
 800d460:	898b      	ldrh	r3, [r1, #12]
 800d462:	05db      	lsls	r3, r3, #23
 800d464:	4605      	mov	r5, r0
 800d466:	460c      	mov	r4, r1
 800d468:	4616      	mov	r6, r2
 800d46a:	d505      	bpl.n	800d478 <__swrite+0x1e>
 800d46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d470:	2302      	movs	r3, #2
 800d472:	2200      	movs	r2, #0
 800d474:	f000 f9f8 	bl	800d868 <_lseek_r>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d47e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	4632      	mov	r2, r6
 800d486:	463b      	mov	r3, r7
 800d488:	4628      	mov	r0, r5
 800d48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d48e:	f000 b869 	b.w	800d564 <_write_r>

0800d492 <__sseek>:
 800d492:	b510      	push	{r4, lr}
 800d494:	460c      	mov	r4, r1
 800d496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d49a:	f000 f9e5 	bl	800d868 <_lseek_r>
 800d49e:	1c43      	adds	r3, r0, #1
 800d4a0:	89a3      	ldrh	r3, [r4, #12]
 800d4a2:	bf15      	itete	ne
 800d4a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4ae:	81a3      	strheq	r3, [r4, #12]
 800d4b0:	bf18      	it	ne
 800d4b2:	81a3      	strhne	r3, [r4, #12]
 800d4b4:	bd10      	pop	{r4, pc}

0800d4b6 <__sclose>:
 800d4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ba:	f000 b8f1 	b.w	800d6a0 <_close_r>
	...

0800d4c0 <__swbuf_r>:
 800d4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c2:	460e      	mov	r6, r1
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	b118      	cbz	r0, 800d4d2 <__swbuf_r+0x12>
 800d4ca:	6983      	ldr	r3, [r0, #24]
 800d4cc:	b90b      	cbnz	r3, 800d4d2 <__swbuf_r+0x12>
 800d4ce:	f7ff f955 	bl	800c77c <__sinit>
 800d4d2:	4b21      	ldr	r3, [pc, #132]	; (800d558 <__swbuf_r+0x98>)
 800d4d4:	429c      	cmp	r4, r3
 800d4d6:	d12b      	bne.n	800d530 <__swbuf_r+0x70>
 800d4d8:	686c      	ldr	r4, [r5, #4]
 800d4da:	69a3      	ldr	r3, [r4, #24]
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	071a      	lsls	r2, r3, #28
 800d4e2:	d52f      	bpl.n	800d544 <__swbuf_r+0x84>
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	b36b      	cbz	r3, 800d544 <__swbuf_r+0x84>
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	6820      	ldr	r0, [r4, #0]
 800d4ec:	1ac0      	subs	r0, r0, r3
 800d4ee:	6963      	ldr	r3, [r4, #20]
 800d4f0:	b2f6      	uxtb	r6, r6
 800d4f2:	4283      	cmp	r3, r0
 800d4f4:	4637      	mov	r7, r6
 800d4f6:	dc04      	bgt.n	800d502 <__swbuf_r+0x42>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f000 f966 	bl	800d7cc <_fflush_r>
 800d500:	bb30      	cbnz	r0, 800d550 <__swbuf_r+0x90>
 800d502:	68a3      	ldr	r3, [r4, #8]
 800d504:	3b01      	subs	r3, #1
 800d506:	60a3      	str	r3, [r4, #8]
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	6022      	str	r2, [r4, #0]
 800d50e:	701e      	strb	r6, [r3, #0]
 800d510:	6963      	ldr	r3, [r4, #20]
 800d512:	3001      	adds	r0, #1
 800d514:	4283      	cmp	r3, r0
 800d516:	d004      	beq.n	800d522 <__swbuf_r+0x62>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	07db      	lsls	r3, r3, #31
 800d51c:	d506      	bpl.n	800d52c <__swbuf_r+0x6c>
 800d51e:	2e0a      	cmp	r6, #10
 800d520:	d104      	bne.n	800d52c <__swbuf_r+0x6c>
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	f000 f951 	bl	800d7cc <_fflush_r>
 800d52a:	b988      	cbnz	r0, 800d550 <__swbuf_r+0x90>
 800d52c:	4638      	mov	r0, r7
 800d52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d530:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <__swbuf_r+0x9c>)
 800d532:	429c      	cmp	r4, r3
 800d534:	d101      	bne.n	800d53a <__swbuf_r+0x7a>
 800d536:	68ac      	ldr	r4, [r5, #8]
 800d538:	e7cf      	b.n	800d4da <__swbuf_r+0x1a>
 800d53a:	4b09      	ldr	r3, [pc, #36]	; (800d560 <__swbuf_r+0xa0>)
 800d53c:	429c      	cmp	r4, r3
 800d53e:	bf08      	it	eq
 800d540:	68ec      	ldreq	r4, [r5, #12]
 800d542:	e7ca      	b.n	800d4da <__swbuf_r+0x1a>
 800d544:	4621      	mov	r1, r4
 800d546:	4628      	mov	r0, r5
 800d548:	f000 f81e 	bl	800d588 <__swsetup_r>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d0cb      	beq.n	800d4e8 <__swbuf_r+0x28>
 800d550:	f04f 37ff 	mov.w	r7, #4294967295
 800d554:	e7ea      	b.n	800d52c <__swbuf_r+0x6c>
 800d556:	bf00      	nop
 800d558:	0800dbf4 	.word	0x0800dbf4
 800d55c:	0800dc14 	.word	0x0800dc14
 800d560:	0800dbd4 	.word	0x0800dbd4

0800d564 <_write_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	4d07      	ldr	r5, [pc, #28]	; (800d584 <_write_r+0x20>)
 800d568:	4604      	mov	r4, r0
 800d56a:	4608      	mov	r0, r1
 800d56c:	4611      	mov	r1, r2
 800d56e:	2200      	movs	r2, #0
 800d570:	602a      	str	r2, [r5, #0]
 800d572:	461a      	mov	r2, r3
 800d574:	f7f4 fe3d 	bl	80021f2 <_write>
 800d578:	1c43      	adds	r3, r0, #1
 800d57a:	d102      	bne.n	800d582 <_write_r+0x1e>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	b103      	cbz	r3, 800d582 <_write_r+0x1e>
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	20000824 	.word	0x20000824

0800d588 <__swsetup_r>:
 800d588:	4b32      	ldr	r3, [pc, #200]	; (800d654 <__swsetup_r+0xcc>)
 800d58a:	b570      	push	{r4, r5, r6, lr}
 800d58c:	681d      	ldr	r5, [r3, #0]
 800d58e:	4606      	mov	r6, r0
 800d590:	460c      	mov	r4, r1
 800d592:	b125      	cbz	r5, 800d59e <__swsetup_r+0x16>
 800d594:	69ab      	ldr	r3, [r5, #24]
 800d596:	b913      	cbnz	r3, 800d59e <__swsetup_r+0x16>
 800d598:	4628      	mov	r0, r5
 800d59a:	f7ff f8ef 	bl	800c77c <__sinit>
 800d59e:	4b2e      	ldr	r3, [pc, #184]	; (800d658 <__swsetup_r+0xd0>)
 800d5a0:	429c      	cmp	r4, r3
 800d5a2:	d10f      	bne.n	800d5c4 <__swsetup_r+0x3c>
 800d5a4:	686c      	ldr	r4, [r5, #4]
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5ac:	0719      	lsls	r1, r3, #28
 800d5ae:	d42c      	bmi.n	800d60a <__swsetup_r+0x82>
 800d5b0:	06dd      	lsls	r5, r3, #27
 800d5b2:	d411      	bmi.n	800d5d8 <__swsetup_r+0x50>
 800d5b4:	2309      	movs	r3, #9
 800d5b6:	6033      	str	r3, [r6, #0]
 800d5b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c2:	e03e      	b.n	800d642 <__swsetup_r+0xba>
 800d5c4:	4b25      	ldr	r3, [pc, #148]	; (800d65c <__swsetup_r+0xd4>)
 800d5c6:	429c      	cmp	r4, r3
 800d5c8:	d101      	bne.n	800d5ce <__swsetup_r+0x46>
 800d5ca:	68ac      	ldr	r4, [r5, #8]
 800d5cc:	e7eb      	b.n	800d5a6 <__swsetup_r+0x1e>
 800d5ce:	4b24      	ldr	r3, [pc, #144]	; (800d660 <__swsetup_r+0xd8>)
 800d5d0:	429c      	cmp	r4, r3
 800d5d2:	bf08      	it	eq
 800d5d4:	68ec      	ldreq	r4, [r5, #12]
 800d5d6:	e7e6      	b.n	800d5a6 <__swsetup_r+0x1e>
 800d5d8:	0758      	lsls	r0, r3, #29
 800d5da:	d512      	bpl.n	800d602 <__swsetup_r+0x7a>
 800d5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5de:	b141      	cbz	r1, 800d5f2 <__swsetup_r+0x6a>
 800d5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5e4:	4299      	cmp	r1, r3
 800d5e6:	d002      	beq.n	800d5ee <__swsetup_r+0x66>
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff fd11 	bl	800d010 <_free_r>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	6363      	str	r3, [r4, #52]	; 0x34
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5f8:	81a3      	strh	r3, [r4, #12]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	6063      	str	r3, [r4, #4]
 800d5fe:	6923      	ldr	r3, [r4, #16]
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	f043 0308 	orr.w	r3, r3, #8
 800d608:	81a3      	strh	r3, [r4, #12]
 800d60a:	6923      	ldr	r3, [r4, #16]
 800d60c:	b94b      	cbnz	r3, 800d622 <__swsetup_r+0x9a>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d618:	d003      	beq.n	800d622 <__swsetup_r+0x9a>
 800d61a:	4621      	mov	r1, r4
 800d61c:	4630      	mov	r0, r6
 800d61e:	f000 f959 	bl	800d8d4 <__smakebuf_r>
 800d622:	89a0      	ldrh	r0, [r4, #12]
 800d624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d628:	f010 0301 	ands.w	r3, r0, #1
 800d62c:	d00a      	beq.n	800d644 <__swsetup_r+0xbc>
 800d62e:	2300      	movs	r3, #0
 800d630:	60a3      	str	r3, [r4, #8]
 800d632:	6963      	ldr	r3, [r4, #20]
 800d634:	425b      	negs	r3, r3
 800d636:	61a3      	str	r3, [r4, #24]
 800d638:	6923      	ldr	r3, [r4, #16]
 800d63a:	b943      	cbnz	r3, 800d64e <__swsetup_r+0xc6>
 800d63c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d640:	d1ba      	bne.n	800d5b8 <__swsetup_r+0x30>
 800d642:	bd70      	pop	{r4, r5, r6, pc}
 800d644:	0781      	lsls	r1, r0, #30
 800d646:	bf58      	it	pl
 800d648:	6963      	ldrpl	r3, [r4, #20]
 800d64a:	60a3      	str	r3, [r4, #8]
 800d64c:	e7f4      	b.n	800d638 <__swsetup_r+0xb0>
 800d64e:	2000      	movs	r0, #0
 800d650:	e7f7      	b.n	800d642 <__swsetup_r+0xba>
 800d652:	bf00      	nop
 800d654:	20000014 	.word	0x20000014
 800d658:	0800dbf4 	.word	0x0800dbf4
 800d65c:	0800dc14 	.word	0x0800dc14
 800d660:	0800dbd4 	.word	0x0800dbd4

0800d664 <__assert_func>:
 800d664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d666:	4614      	mov	r4, r2
 800d668:	461a      	mov	r2, r3
 800d66a:	4b09      	ldr	r3, [pc, #36]	; (800d690 <__assert_func+0x2c>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4605      	mov	r5, r0
 800d670:	68d8      	ldr	r0, [r3, #12]
 800d672:	b14c      	cbz	r4, 800d688 <__assert_func+0x24>
 800d674:	4b07      	ldr	r3, [pc, #28]	; (800d694 <__assert_func+0x30>)
 800d676:	9100      	str	r1, [sp, #0]
 800d678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d67c:	4906      	ldr	r1, [pc, #24]	; (800d698 <__assert_func+0x34>)
 800d67e:	462b      	mov	r3, r5
 800d680:	f000 f8e0 	bl	800d844 <fiprintf>
 800d684:	f000 f9a3 	bl	800d9ce <abort>
 800d688:	4b04      	ldr	r3, [pc, #16]	; (800d69c <__assert_func+0x38>)
 800d68a:	461c      	mov	r4, r3
 800d68c:	e7f3      	b.n	800d676 <__assert_func+0x12>
 800d68e:	bf00      	nop
 800d690:	20000014 	.word	0x20000014
 800d694:	0800dda5 	.word	0x0800dda5
 800d698:	0800ddb2 	.word	0x0800ddb2
 800d69c:	0800dde0 	.word	0x0800dde0

0800d6a0 <_close_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4d06      	ldr	r5, [pc, #24]	; (800d6bc <_close_r+0x1c>)
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	602b      	str	r3, [r5, #0]
 800d6ac:	f7f4 fdbd 	bl	800222a <_close>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_close_r+0x1a>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_close_r+0x1a>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20000824 	.word	0x20000824

0800d6c0 <__sflush_r>:
 800d6c0:	898a      	ldrh	r2, [r1, #12]
 800d6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	0710      	lsls	r0, r2, #28
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	d458      	bmi.n	800d780 <__sflush_r+0xc0>
 800d6ce:	684b      	ldr	r3, [r1, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dc05      	bgt.n	800d6e0 <__sflush_r+0x20>
 800d6d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dc02      	bgt.n	800d6e0 <__sflush_r+0x20>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6e2:	2e00      	cmp	r6, #0
 800d6e4:	d0f9      	beq.n	800d6da <__sflush_r+0x1a>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6ec:	682f      	ldr	r7, [r5, #0]
 800d6ee:	602b      	str	r3, [r5, #0]
 800d6f0:	d032      	beq.n	800d758 <__sflush_r+0x98>
 800d6f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	075a      	lsls	r2, r3, #29
 800d6f8:	d505      	bpl.n	800d706 <__sflush_r+0x46>
 800d6fa:	6863      	ldr	r3, [r4, #4]
 800d6fc:	1ac0      	subs	r0, r0, r3
 800d6fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d700:	b10b      	cbz	r3, 800d706 <__sflush_r+0x46>
 800d702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d704:	1ac0      	subs	r0, r0, r3
 800d706:	2300      	movs	r3, #0
 800d708:	4602      	mov	r2, r0
 800d70a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d70c:	6a21      	ldr	r1, [r4, #32]
 800d70e:	4628      	mov	r0, r5
 800d710:	47b0      	blx	r6
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	d106      	bne.n	800d726 <__sflush_r+0x66>
 800d718:	6829      	ldr	r1, [r5, #0]
 800d71a:	291d      	cmp	r1, #29
 800d71c:	d82c      	bhi.n	800d778 <__sflush_r+0xb8>
 800d71e:	4a2a      	ldr	r2, [pc, #168]	; (800d7c8 <__sflush_r+0x108>)
 800d720:	40ca      	lsrs	r2, r1
 800d722:	07d6      	lsls	r6, r2, #31
 800d724:	d528      	bpl.n	800d778 <__sflush_r+0xb8>
 800d726:	2200      	movs	r2, #0
 800d728:	6062      	str	r2, [r4, #4]
 800d72a:	04d9      	lsls	r1, r3, #19
 800d72c:	6922      	ldr	r2, [r4, #16]
 800d72e:	6022      	str	r2, [r4, #0]
 800d730:	d504      	bpl.n	800d73c <__sflush_r+0x7c>
 800d732:	1c42      	adds	r2, r0, #1
 800d734:	d101      	bne.n	800d73a <__sflush_r+0x7a>
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	b903      	cbnz	r3, 800d73c <__sflush_r+0x7c>
 800d73a:	6560      	str	r0, [r4, #84]	; 0x54
 800d73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d73e:	602f      	str	r7, [r5, #0]
 800d740:	2900      	cmp	r1, #0
 800d742:	d0ca      	beq.n	800d6da <__sflush_r+0x1a>
 800d744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d748:	4299      	cmp	r1, r3
 800d74a:	d002      	beq.n	800d752 <__sflush_r+0x92>
 800d74c:	4628      	mov	r0, r5
 800d74e:	f7ff fc5f 	bl	800d010 <_free_r>
 800d752:	2000      	movs	r0, #0
 800d754:	6360      	str	r0, [r4, #52]	; 0x34
 800d756:	e7c1      	b.n	800d6dc <__sflush_r+0x1c>
 800d758:	6a21      	ldr	r1, [r4, #32]
 800d75a:	2301      	movs	r3, #1
 800d75c:	4628      	mov	r0, r5
 800d75e:	47b0      	blx	r6
 800d760:	1c41      	adds	r1, r0, #1
 800d762:	d1c7      	bne.n	800d6f4 <__sflush_r+0x34>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0c4      	beq.n	800d6f4 <__sflush_r+0x34>
 800d76a:	2b1d      	cmp	r3, #29
 800d76c:	d001      	beq.n	800d772 <__sflush_r+0xb2>
 800d76e:	2b16      	cmp	r3, #22
 800d770:	d101      	bne.n	800d776 <__sflush_r+0xb6>
 800d772:	602f      	str	r7, [r5, #0]
 800d774:	e7b1      	b.n	800d6da <__sflush_r+0x1a>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	e7ad      	b.n	800d6dc <__sflush_r+0x1c>
 800d780:	690f      	ldr	r7, [r1, #16]
 800d782:	2f00      	cmp	r7, #0
 800d784:	d0a9      	beq.n	800d6da <__sflush_r+0x1a>
 800d786:	0793      	lsls	r3, r2, #30
 800d788:	680e      	ldr	r6, [r1, #0]
 800d78a:	bf08      	it	eq
 800d78c:	694b      	ldreq	r3, [r1, #20]
 800d78e:	600f      	str	r7, [r1, #0]
 800d790:	bf18      	it	ne
 800d792:	2300      	movne	r3, #0
 800d794:	eba6 0807 	sub.w	r8, r6, r7
 800d798:	608b      	str	r3, [r1, #8]
 800d79a:	f1b8 0f00 	cmp.w	r8, #0
 800d79e:	dd9c      	ble.n	800d6da <__sflush_r+0x1a>
 800d7a0:	6a21      	ldr	r1, [r4, #32]
 800d7a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7a4:	4643      	mov	r3, r8
 800d7a6:	463a      	mov	r2, r7
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	47b0      	blx	r6
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	dc06      	bgt.n	800d7be <__sflush_r+0xfe>
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b6:	81a3      	strh	r3, [r4, #12]
 800d7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7bc:	e78e      	b.n	800d6dc <__sflush_r+0x1c>
 800d7be:	4407      	add	r7, r0
 800d7c0:	eba8 0800 	sub.w	r8, r8, r0
 800d7c4:	e7e9      	b.n	800d79a <__sflush_r+0xda>
 800d7c6:	bf00      	nop
 800d7c8:	20400001 	.word	0x20400001

0800d7cc <_fflush_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	690b      	ldr	r3, [r1, #16]
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	b913      	cbnz	r3, 800d7dc <_fflush_r+0x10>
 800d7d6:	2500      	movs	r5, #0
 800d7d8:	4628      	mov	r0, r5
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	b118      	cbz	r0, 800d7e6 <_fflush_r+0x1a>
 800d7de:	6983      	ldr	r3, [r0, #24]
 800d7e0:	b90b      	cbnz	r3, 800d7e6 <_fflush_r+0x1a>
 800d7e2:	f7fe ffcb 	bl	800c77c <__sinit>
 800d7e6:	4b14      	ldr	r3, [pc, #80]	; (800d838 <_fflush_r+0x6c>)
 800d7e8:	429c      	cmp	r4, r3
 800d7ea:	d11b      	bne.n	800d824 <_fflush_r+0x58>
 800d7ec:	686c      	ldr	r4, [r5, #4]
 800d7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0ef      	beq.n	800d7d6 <_fflush_r+0xa>
 800d7f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7f8:	07d0      	lsls	r0, r2, #31
 800d7fa:	d404      	bmi.n	800d806 <_fflush_r+0x3a>
 800d7fc:	0599      	lsls	r1, r3, #22
 800d7fe:	d402      	bmi.n	800d806 <_fflush_r+0x3a>
 800d800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d802:	f7ff f85e 	bl	800c8c2 <__retarget_lock_acquire_recursive>
 800d806:	4628      	mov	r0, r5
 800d808:	4621      	mov	r1, r4
 800d80a:	f7ff ff59 	bl	800d6c0 <__sflush_r>
 800d80e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d810:	07da      	lsls	r2, r3, #31
 800d812:	4605      	mov	r5, r0
 800d814:	d4e0      	bmi.n	800d7d8 <_fflush_r+0xc>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	059b      	lsls	r3, r3, #22
 800d81a:	d4dd      	bmi.n	800d7d8 <_fflush_r+0xc>
 800d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d81e:	f7ff f851 	bl	800c8c4 <__retarget_lock_release_recursive>
 800d822:	e7d9      	b.n	800d7d8 <_fflush_r+0xc>
 800d824:	4b05      	ldr	r3, [pc, #20]	; (800d83c <_fflush_r+0x70>)
 800d826:	429c      	cmp	r4, r3
 800d828:	d101      	bne.n	800d82e <_fflush_r+0x62>
 800d82a:	68ac      	ldr	r4, [r5, #8]
 800d82c:	e7df      	b.n	800d7ee <_fflush_r+0x22>
 800d82e:	4b04      	ldr	r3, [pc, #16]	; (800d840 <_fflush_r+0x74>)
 800d830:	429c      	cmp	r4, r3
 800d832:	bf08      	it	eq
 800d834:	68ec      	ldreq	r4, [r5, #12]
 800d836:	e7da      	b.n	800d7ee <_fflush_r+0x22>
 800d838:	0800dbf4 	.word	0x0800dbf4
 800d83c:	0800dc14 	.word	0x0800dc14
 800d840:	0800dbd4 	.word	0x0800dbd4

0800d844 <fiprintf>:
 800d844:	b40e      	push	{r1, r2, r3}
 800d846:	b503      	push	{r0, r1, lr}
 800d848:	4601      	mov	r1, r0
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	4805      	ldr	r0, [pc, #20]	; (800d864 <fiprintf+0x20>)
 800d84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d852:	6800      	ldr	r0, [r0, #0]
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f7ff fcaf 	bl	800d1b8 <_vfiprintf_r>
 800d85a:	b002      	add	sp, #8
 800d85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d860:	b003      	add	sp, #12
 800d862:	4770      	bx	lr
 800d864:	20000014 	.word	0x20000014

0800d868 <_lseek_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d07      	ldr	r5, [pc, #28]	; (800d888 <_lseek_r+0x20>)
 800d86c:	4604      	mov	r4, r0
 800d86e:	4608      	mov	r0, r1
 800d870:	4611      	mov	r1, r2
 800d872:	2200      	movs	r2, #0
 800d874:	602a      	str	r2, [r5, #0]
 800d876:	461a      	mov	r2, r3
 800d878:	f7f4 fcfe 	bl	8002278 <_lseek>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	d102      	bne.n	800d886 <_lseek_r+0x1e>
 800d880:	682b      	ldr	r3, [r5, #0]
 800d882:	b103      	cbz	r3, 800d886 <_lseek_r+0x1e>
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	bd38      	pop	{r3, r4, r5, pc}
 800d888:	20000824 	.word	0x20000824

0800d88c <__swhatbuf_r>:
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	460e      	mov	r6, r1
 800d890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d894:	2900      	cmp	r1, #0
 800d896:	b096      	sub	sp, #88	; 0x58
 800d898:	4614      	mov	r4, r2
 800d89a:	461d      	mov	r5, r3
 800d89c:	da07      	bge.n	800d8ae <__swhatbuf_r+0x22>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	602b      	str	r3, [r5, #0]
 800d8a2:	89b3      	ldrh	r3, [r6, #12]
 800d8a4:	061a      	lsls	r2, r3, #24
 800d8a6:	d410      	bmi.n	800d8ca <__swhatbuf_r+0x3e>
 800d8a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ac:	e00e      	b.n	800d8cc <__swhatbuf_r+0x40>
 800d8ae:	466a      	mov	r2, sp
 800d8b0:	f000 f894 	bl	800d9dc <_fstat_r>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	dbf2      	blt.n	800d89e <__swhatbuf_r+0x12>
 800d8b8:	9a01      	ldr	r2, [sp, #4]
 800d8ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8c2:	425a      	negs	r2, r3
 800d8c4:	415a      	adcs	r2, r3
 800d8c6:	602a      	str	r2, [r5, #0]
 800d8c8:	e7ee      	b.n	800d8a8 <__swhatbuf_r+0x1c>
 800d8ca:	2340      	movs	r3, #64	; 0x40
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	6023      	str	r3, [r4, #0]
 800d8d0:	b016      	add	sp, #88	; 0x58
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}

0800d8d4 <__smakebuf_r>:
 800d8d4:	898b      	ldrh	r3, [r1, #12]
 800d8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8d8:	079d      	lsls	r5, r3, #30
 800d8da:	4606      	mov	r6, r0
 800d8dc:	460c      	mov	r4, r1
 800d8de:	d507      	bpl.n	800d8f0 <__smakebuf_r+0x1c>
 800d8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	6123      	str	r3, [r4, #16]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	6163      	str	r3, [r4, #20]
 800d8ec:	b002      	add	sp, #8
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	ab01      	add	r3, sp, #4
 800d8f2:	466a      	mov	r2, sp
 800d8f4:	f7ff ffca 	bl	800d88c <__swhatbuf_r>
 800d8f8:	9900      	ldr	r1, [sp, #0]
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f7ff fbd7 	bl	800d0b0 <_malloc_r>
 800d902:	b948      	cbnz	r0, 800d918 <__smakebuf_r+0x44>
 800d904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d908:	059a      	lsls	r2, r3, #22
 800d90a:	d4ef      	bmi.n	800d8ec <__smakebuf_r+0x18>
 800d90c:	f023 0303 	bic.w	r3, r3, #3
 800d910:	f043 0302 	orr.w	r3, r3, #2
 800d914:	81a3      	strh	r3, [r4, #12]
 800d916:	e7e3      	b.n	800d8e0 <__smakebuf_r+0xc>
 800d918:	4b0d      	ldr	r3, [pc, #52]	; (800d950 <__smakebuf_r+0x7c>)
 800d91a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d91c:	89a3      	ldrh	r3, [r4, #12]
 800d91e:	6020      	str	r0, [r4, #0]
 800d920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d924:	81a3      	strh	r3, [r4, #12]
 800d926:	9b00      	ldr	r3, [sp, #0]
 800d928:	6163      	str	r3, [r4, #20]
 800d92a:	9b01      	ldr	r3, [sp, #4]
 800d92c:	6120      	str	r0, [r4, #16]
 800d92e:	b15b      	cbz	r3, 800d948 <__smakebuf_r+0x74>
 800d930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d934:	4630      	mov	r0, r6
 800d936:	f000 f863 	bl	800da00 <_isatty_r>
 800d93a:	b128      	cbz	r0, 800d948 <__smakebuf_r+0x74>
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	f023 0303 	bic.w	r3, r3, #3
 800d942:	f043 0301 	orr.w	r3, r3, #1
 800d946:	81a3      	strh	r3, [r4, #12]
 800d948:	89a0      	ldrh	r0, [r4, #12]
 800d94a:	4305      	orrs	r5, r0
 800d94c:	81a5      	strh	r5, [r4, #12]
 800d94e:	e7cd      	b.n	800d8ec <__smakebuf_r+0x18>
 800d950:	0800c715 	.word	0x0800c715

0800d954 <__ascii_mbtowc>:
 800d954:	b082      	sub	sp, #8
 800d956:	b901      	cbnz	r1, 800d95a <__ascii_mbtowc+0x6>
 800d958:	a901      	add	r1, sp, #4
 800d95a:	b142      	cbz	r2, 800d96e <__ascii_mbtowc+0x1a>
 800d95c:	b14b      	cbz	r3, 800d972 <__ascii_mbtowc+0x1e>
 800d95e:	7813      	ldrb	r3, [r2, #0]
 800d960:	600b      	str	r3, [r1, #0]
 800d962:	7812      	ldrb	r2, [r2, #0]
 800d964:	1e10      	subs	r0, r2, #0
 800d966:	bf18      	it	ne
 800d968:	2001      	movne	r0, #1
 800d96a:	b002      	add	sp, #8
 800d96c:	4770      	bx	lr
 800d96e:	4610      	mov	r0, r2
 800d970:	e7fb      	b.n	800d96a <__ascii_mbtowc+0x16>
 800d972:	f06f 0001 	mvn.w	r0, #1
 800d976:	e7f8      	b.n	800d96a <__ascii_mbtowc+0x16>

0800d978 <__malloc_lock>:
 800d978:	4801      	ldr	r0, [pc, #4]	; (800d980 <__malloc_lock+0x8>)
 800d97a:	f7fe bfa2 	b.w	800c8c2 <__retarget_lock_acquire_recursive>
 800d97e:	bf00      	nop
 800d980:	2000081c 	.word	0x2000081c

0800d984 <__malloc_unlock>:
 800d984:	4801      	ldr	r0, [pc, #4]	; (800d98c <__malloc_unlock+0x8>)
 800d986:	f7fe bf9d 	b.w	800c8c4 <__retarget_lock_release_recursive>
 800d98a:	bf00      	nop
 800d98c:	2000081c 	.word	0x2000081c

0800d990 <_read_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d07      	ldr	r5, [pc, #28]	; (800d9b0 <_read_r+0x20>)
 800d994:	4604      	mov	r4, r0
 800d996:	4608      	mov	r0, r1
 800d998:	4611      	mov	r1, r2
 800d99a:	2200      	movs	r2, #0
 800d99c:	602a      	str	r2, [r5, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	f7f4 fc0a 	bl	80021b8 <_read>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_read_r+0x1e>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_read_r+0x1e>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	20000824 	.word	0x20000824

0800d9b4 <__ascii_wctomb>:
 800d9b4:	b149      	cbz	r1, 800d9ca <__ascii_wctomb+0x16>
 800d9b6:	2aff      	cmp	r2, #255	; 0xff
 800d9b8:	bf85      	ittet	hi
 800d9ba:	238a      	movhi	r3, #138	; 0x8a
 800d9bc:	6003      	strhi	r3, [r0, #0]
 800d9be:	700a      	strbls	r2, [r1, #0]
 800d9c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d9c4:	bf98      	it	ls
 800d9c6:	2001      	movls	r0, #1
 800d9c8:	4770      	bx	lr
 800d9ca:	4608      	mov	r0, r1
 800d9cc:	4770      	bx	lr

0800d9ce <abort>:
 800d9ce:	b508      	push	{r3, lr}
 800d9d0:	2006      	movs	r0, #6
 800d9d2:	f000 f84d 	bl	800da70 <raise>
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	f7f4 fbe4 	bl	80021a4 <_exit>

0800d9dc <_fstat_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d07      	ldr	r5, [pc, #28]	; (800d9fc <_fstat_r+0x20>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	602b      	str	r3, [r5, #0]
 800d9ea:	f7f4 fc2a 	bl	8002242 <_fstat>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	d102      	bne.n	800d9f8 <_fstat_r+0x1c>
 800d9f2:	682b      	ldr	r3, [r5, #0]
 800d9f4:	b103      	cbz	r3, 800d9f8 <_fstat_r+0x1c>
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
 800d9fa:	bf00      	nop
 800d9fc:	20000824 	.word	0x20000824

0800da00 <_isatty_r>:
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	4d06      	ldr	r5, [pc, #24]	; (800da1c <_isatty_r+0x1c>)
 800da04:	2300      	movs	r3, #0
 800da06:	4604      	mov	r4, r0
 800da08:	4608      	mov	r0, r1
 800da0a:	602b      	str	r3, [r5, #0]
 800da0c:	f7f4 fc29 	bl	8002262 <_isatty>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_isatty_r+0x1a>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_isatty_r+0x1a>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	20000824 	.word	0x20000824

0800da20 <_raise_r>:
 800da20:	291f      	cmp	r1, #31
 800da22:	b538      	push	{r3, r4, r5, lr}
 800da24:	4604      	mov	r4, r0
 800da26:	460d      	mov	r5, r1
 800da28:	d904      	bls.n	800da34 <_raise_r+0x14>
 800da2a:	2316      	movs	r3, #22
 800da2c:	6003      	str	r3, [r0, #0]
 800da2e:	f04f 30ff 	mov.w	r0, #4294967295
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da36:	b112      	cbz	r2, 800da3e <_raise_r+0x1e>
 800da38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da3c:	b94b      	cbnz	r3, 800da52 <_raise_r+0x32>
 800da3e:	4620      	mov	r0, r4
 800da40:	f000 f830 	bl	800daa4 <_getpid_r>
 800da44:	462a      	mov	r2, r5
 800da46:	4601      	mov	r1, r0
 800da48:	4620      	mov	r0, r4
 800da4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da4e:	f000 b817 	b.w	800da80 <_kill_r>
 800da52:	2b01      	cmp	r3, #1
 800da54:	d00a      	beq.n	800da6c <_raise_r+0x4c>
 800da56:	1c59      	adds	r1, r3, #1
 800da58:	d103      	bne.n	800da62 <_raise_r+0x42>
 800da5a:	2316      	movs	r3, #22
 800da5c:	6003      	str	r3, [r0, #0]
 800da5e:	2001      	movs	r0, #1
 800da60:	e7e7      	b.n	800da32 <_raise_r+0x12>
 800da62:	2400      	movs	r4, #0
 800da64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da68:	4628      	mov	r0, r5
 800da6a:	4798      	blx	r3
 800da6c:	2000      	movs	r0, #0
 800da6e:	e7e0      	b.n	800da32 <_raise_r+0x12>

0800da70 <raise>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <raise+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f7ff bfd3 	b.w	800da20 <_raise_r>
 800da7a:	bf00      	nop
 800da7c:	20000014 	.word	0x20000014

0800da80 <_kill_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4d07      	ldr	r5, [pc, #28]	; (800daa0 <_kill_r+0x20>)
 800da84:	2300      	movs	r3, #0
 800da86:	4604      	mov	r4, r0
 800da88:	4608      	mov	r0, r1
 800da8a:	4611      	mov	r1, r2
 800da8c:	602b      	str	r3, [r5, #0]
 800da8e:	f7f4 fb79 	bl	8002184 <_kill>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	d102      	bne.n	800da9c <_kill_r+0x1c>
 800da96:	682b      	ldr	r3, [r5, #0]
 800da98:	b103      	cbz	r3, 800da9c <_kill_r+0x1c>
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	bd38      	pop	{r3, r4, r5, pc}
 800da9e:	bf00      	nop
 800daa0:	20000824 	.word	0x20000824

0800daa4 <_getpid_r>:
 800daa4:	f7f4 bb66 	b.w	8002174 <_getpid>

0800daa8 <_init>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	bf00      	nop
 800daac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daae:	bc08      	pop	{r3}
 800dab0:	469e      	mov	lr, r3
 800dab2:	4770      	bx	lr

0800dab4 <_fini>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	bf00      	nop
 800dab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daba:	bc08      	pop	{r3}
 800dabc:	469e      	mov	lr, r3
 800dabe:	4770      	bx	lr
